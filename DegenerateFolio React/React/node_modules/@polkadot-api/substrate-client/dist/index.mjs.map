{"version":3,"sources":["../src/internal-utils/abortablePromiseFn.ts","../src/internal-utils/deferred-promise.ts","../src/internal-utils/noop.ts","../src/internal-utils/subscriptions-manager.ts","../src/client/RpcError.ts","../src/client/DestroyedError.ts","../src/client/createClient.ts","../src/transaction/transaction.ts","../src/chainhead/errors.ts","../src/chainhead/operation-promise.ts","../src/chainhead/body.ts","../src/chainhead/call.ts","../src/chainhead/header.ts","../src/chainhead/storage-subscription.ts","../src/chainhead/storage.ts","../src/chainhead/unpin.ts","../src/chainhead/chainhead.ts","../src/index.ts"],"sourcesContent":["import { AbortError, noop } from \"@polkadot-api/utils\"\nimport { AbortablePromiseFn } from \"../common-types\"\n\nexport const abortablePromiseFn =\n  <T, A extends Array<any>>(\n    fn: (\n      ...args: [...[res: (x: T) => void, rej: (e: any) => void], ...A]\n    ) => () => void,\n  ): AbortablePromiseFn<A, T> =>\n  (...args): Promise<T> =>\n    new Promise((res, rej) => {\n      let cancel = noop\n\n      const [actualArgs, abortSignal] =\n        args[args.length - 1] instanceof AbortSignal\n          ? ([args.slice(0, args.length - 1), args[args.length - 1]] as [\n              A,\n              AbortSignal,\n            ])\n          : ([args] as unknown as [A])\n\n      const onAbort = () => {\n        cancel()\n        rej(new AbortError())\n      }\n\n      abortSignal?.addEventListener(\"abort\", onAbort, { once: true })\n\n      const withCleanup =\n        <T>(fn: (x: T) => void): ((x: T) => void) =>\n        (x) => {\n          cancel = noop\n          abortSignal?.removeEventListener(\"abort\", onAbort)\n          fn(x)\n        }\n\n      cancel = fn(...[withCleanup(res), withCleanup(rej), ...actualArgs])\n    })\n","export interface DeferredPromise<T> {\n  promise: Promise<T>\n  res: (value: T) => void\n  rej: (err: Error) => void\n}\n\nexport function deferred<T>(): DeferredPromise<T> {\n  let res: (value: T) => void = () => {}\n  let rej: (err: Error) => void = () => {}\n\n  const promise = new Promise<T>((_res, _rej) => {\n    res = _res\n    rej = _rej\n  })\n\n  return { promise, res, rej }\n}\n","export const noop = (): void => {}\n","const MAX_TIME = 2_000\n\nexport interface Subscriber<T> {\n  next: (data: T) => void\n  error: (e: Error) => void\n}\n\nexport const getSubscriptionsManager = <T>() => {\n  const subscriptions = new Map<string, Subscriber<T>>()\n\n  return {\n    has: subscriptions.has.bind(subscriptions),\n    subscribe(id: string, subscriber: Subscriber<T>) {\n      subscriptions.set(id, subscriber)\n    },\n    unsubscribe(id: string) {\n      subscriptions.delete(id)\n    },\n    next(id: string, data: T) {\n      subscriptions.get(id)?.next(data)\n    },\n    error(id: string, e: Error) {\n      const subscriber = subscriptions.get(id)\n      if (subscriber) {\n        subscriptions.delete(id)\n        subscriber.error(e)\n      }\n    },\n    errorAll(e: Error) {\n      const subscribers = [...subscriptions.values()]\n      subscriptions.clear()\n      subscribers.forEach((s) => {\n        s.error(e)\n      })\n    },\n  }\n}\n\nexport type SubscriptionManager<T> = ReturnType<\n  typeof getSubscriptionsManager<T>\n>\n\nexport class OrphanMessages<T> {\n  #messages: Map<string, { expiry: number; messages: T[] }>\n  #token: number | null\n\n  constructor() {\n    this.#messages = new Map()\n    this.#token = null\n  }\n\n  private checkClear(): void {\n    if (this.#messages.size > 0) return\n\n    clearInterval(this.#token as any)\n    this.#token = null\n  }\n\n  set(key: string, message: T): void {\n    const messages = this.#messages.get(key)?.messages ?? []\n    messages.push(message)\n    this.#messages.set(key, { expiry: Date.now() + MAX_TIME, messages })\n\n    this.#token =\n      this.#token ||\n      (setInterval(() => {\n        const now = Date.now()\n        ;[...this.#messages.entries()].forEach(([key, entry]) => {\n          if (entry.expiry > now) this.#messages.delete(key)\n        })\n        this.checkClear()\n      }, MAX_TIME) as unknown as number)\n  }\n\n  retrieve(key: string): T[] {\n    const result = this.#messages.get(key)\n    if (!result) return []\n    this.#messages.delete(key)\n    this.checkClear()\n    return result.messages\n  }\n\n  clear() {\n    this.#messages.clear()\n    this.checkClear()\n  }\n}\n","export interface IRpcError {\n  code: number\n  message: string\n  data?: any\n}\n\nexport class RpcError extends Error implements IRpcError {\n  code\n  data\n  constructor(e: IRpcError) {\n    super(e.message)\n    this.code = e.code\n    this.data = e.data\n    this.name = \"RpcError\"\n  }\n}\n","export class DestroyedError extends Error {\n  constructor() {\n    super(\"Client destroyed\")\n    this.name = \"DestroyedError\"\n  }\n}\n","import {\n  type ConnectProvider,\n  type Provider,\n} from \"@polkadot-api/json-rpc-provider\"\nimport { UnsubscribeFn } from \"../common-types\"\nimport { RpcError, IRpcError } from \"./RpcError\"\nimport {\n  OrphanMessages,\n  getSubscriptionsManager,\n  Subscriber,\n} from \"@/internal-utils\"\nimport { DestroyedError } from \"./DestroyedError\"\n\nexport type FollowSubscriptionCb<T> = (\n  methodName: string,\n  subscriptionId: string,\n  cb: Subscriber<T>,\n) => UnsubscribeFn\n\nexport type ClientRequestCb<T, TT> = {\n  onSuccess: (result: T, followSubscription: FollowSubscriptionCb<TT>) => void\n  onError: (e: Error) => void\n}\n\nexport type ClientRequest<T, TT> = (\n  method: string,\n  params: Array<any>,\n  cb?: ClientRequestCb<T, TT>,\n) => UnsubscribeFn\n\nexport interface Client {\n  disconnect: () => void\n  request: ClientRequest<any, any>\n}\n\nexport const createClient = (gProvider: ConnectProvider): Client => {\n  const responses = new Map<number, ClientRequestCb<any, any>>()\n  const subscriptions = getSubscriptionsManager()\n  const orphans = new OrphanMessages<string>()\n\n  let provider: Provider | null = null\n\n  const send = (\n    id: number,\n    method: string,\n    params: Array<boolean | string | number | null>,\n  ) => {\n    provider!.send(\n      JSON.stringify({\n        jsonrpc: \"2.0\",\n        id,\n        method,\n        params,\n      }),\n    )\n  }\n\n  function onMessage(message: string): void {\n    try {\n      let id: number,\n        result,\n        error: IRpcError | undefined,\n        params: { subscription: any; result: any; error?: IRpcError },\n        subscription: string\n\n      const parsed = JSON.parse(message)\n      ;({ id, result, error, params } = parsed)\n\n      if (id) {\n        const cb = responses.get(id)\n        if (!cb) return\n\n        responses.delete(id)\n\n        return error\n          ? cb.onError(new RpcError(error))\n          : cb.onSuccess(result, (methodName, opaqueId, subscriber) => {\n              const subscriptionId = methodName + opaqueId\n              subscriptions.subscribe(subscriptionId, subscriber)\n              const pending = orphans.retrieve(subscriptionId)\n              if (pending.length) {\n                Promise.resolve().then(() => {\n                  pending.forEach((msg) => {\n                    subscriptions.next(subscriptionId, msg)\n                  })\n                })\n              }\n              return () => {\n                subscriptions.unsubscribe(subscriptionId)\n              }\n            })\n      }\n\n      // at this point, it means that it should be a notification\n      ;({ subscription, result, error } = params)\n      if (!subscription || (!error && !Object.hasOwn(params, \"result\"))) throw 0\n\n      const subscriptionId = parsed.method + subscription\n      if (!subscriptions.has(subscriptionId)) {\n        orphans.set(subscriptionId, message)\n      }\n\n      if (error) {\n        subscriptions.error(subscriptionId, new RpcError(error!))\n      } else {\n        subscriptions.next(subscriptionId, result)\n      }\n    } catch (e) {\n      console.warn(\"Error parsing incomming message: \" + message)\n      console.error(e)\n    }\n  }\n  provider = gProvider(onMessage)\n\n  const disconnect = () => {\n    provider?.disconnect()\n    provider = null\n    subscriptions.errorAll(new DestroyedError())\n    responses.forEach((r) => r.onError(new DestroyedError()))\n    responses.clear()\n    orphans.clear()\n  }\n\n  let nextId = 1\n  const request = <T, TT>(\n    method: string,\n    params: Array<any>,\n    cb?: ClientRequestCb<T, TT>,\n  ): UnsubscribeFn => {\n    if (!provider) throw new Error(\"Not connected\")\n    const id = nextId++\n\n    if (cb) responses.set(id, cb)\n    send(id, method, params)\n\n    return (): void => {\n      responses.delete(id)\n    }\n  }\n\n  return {\n    request,\n    disconnect,\n  }\n}\n","import { noop } from \"@/internal-utils\"\nimport { DestroyedError, type ClientRequest } from \"../client\"\nimport type {\n  TxEventRpc,\n  TxFinalizedRpc,\n  TxInvalidRpc,\n  TxDroppedRpc,\n  TxErrorRpc,\n} from \"./json-rpc-types\"\nimport { TxEvent } from \"./public-types\"\n\ntype EventToType<T extends { event: string }> = T extends { event: infer Type }\n  ? Omit<T, \"event\"> & { type: Type }\n  : T\nconst eventToType = <T extends { event: string }>(input: T): EventToType<T> => {\n  const { event: type, ...rest } = input\n  return { type, ...rest } as any\n}\n\ntype TerminalEvent = TxDroppedRpc | TxInvalidRpc | TxFinalizedRpc | TxErrorRpc\nconst terminalEvents: Set<string> = new Set<TerminalEvent[\"event\"]>([\n  \"dropped\",\n  \"invalid\",\n  \"finalized\",\n  \"error\",\n])\n\nfunction isTerminalEvent(event: TxEventRpc): event is TerminalEvent {\n  return terminalEvents.has(event.event)\n}\n\ntype ErrorEvents = TxDroppedRpc | TxInvalidRpc | TxErrorRpc\n\nexport interface ITxError {\n  type: ErrorEvents[\"event\"]\n  error: string\n}\n\nexport class TransactionError extends Error implements ITxError {\n  type\n  error\n  constructor(e: ErrorEvents) {\n    super(`TxError: ${e.event} - ${e.error}`)\n    this.type = e.event\n    this.error = e.error\n    this.name = \"TransactionError\"\n  }\n}\n\nexport const getTransaction =\n  (request: ClientRequest<string, TxEventRpc>) =>\n  (\n    namespace: string,\n    tx: string,\n    next: (event: TxEvent) => void,\n    error: (e: Error) => void,\n  ) => {\n    let cancel = request(namespace + \"_unstable_submitAndWatch\", [tx], {\n      onSuccess: (subscriptionId, follow) => {\n        const done = follow(\n          namespace + \"_unstable_watchEvent\",\n          subscriptionId,\n          {\n            next: (event) => {\n              if (isTerminalEvent(event)) {\n                done()\n                cancel = noop\n                if (event.event !== \"finalized\")\n                  return error(new TransactionError(event))\n              }\n              next(eventToType(event))\n            },\n            error(e) {\n              if (!(e instanceof DestroyedError)) cancel()\n              cancel = noop\n              error(e)\n            },\n          },\n        )\n\n        cancel = () => {\n          done()\n          request(namespace + \"_unstable_unwatch\", [subscriptionId])\n        }\n      },\n      onError: error,\n    })\n\n    return () => {\n      cancel()\n    }\n  }\n","export class StopError extends Error {\n  constructor() {\n    super(\"ChainHead stopped\")\n    this.name = \"StopError\"\n  }\n}\n\nexport class DisjointError extends Error {\n  constructor() {\n    super(\"ChainHead disjointed\")\n    this.name = \"DisjointError\"\n  }\n}\n\nexport class OperationLimitError extends Error {\n  constructor() {\n    super(\"ChainHead operations limit reached\")\n    this.name = \"OperationLimitError\"\n  }\n}\n\nexport class OperationError extends Error {\n  constructor(error: string) {\n    super(error)\n    this.name = \"OperationError\"\n  }\n}\n\nexport class OperationInaccessibleError extends Error {\n  constructor() {\n    super(\"ChainHead operation inaccessible\")\n    this.name = \"OperationInaccessibleError\"\n  }\n}\n","import { abortablePromiseFn, noop } from \"@/internal-utils\"\nimport {\n  CommonOperationEventsRpc,\n  OperationResponseRpc,\n} from \"./json-rpc-types\"\nimport {\n  OperationError,\n  OperationInaccessibleError,\n  OperationLimitError,\n} from \"./errors\"\nimport { ClientInnerRequest } from \"./public-types\"\n\nexport const createOperationPromise =\n  <I extends { operationId: string; event: string }, O, A extends Array<any>>(\n    operationName: string,\n    factory: (\n      ...args: A\n    ) => [\n      Array<any>,\n      (e: I, res: (x: O) => void, rej: (e: Error) => void) => void,\n    ],\n  ) =>\n  (\n    request: ClientInnerRequest<\n      OperationResponseRpc,\n      I | CommonOperationEventsRpc\n    >,\n  ) =>\n    abortablePromiseFn<O, A>((res, rej, ...args) => {\n      const [requestArgs, logicCb] = factory(...args)\n      let cancel = request(operationName, requestArgs, {\n        onSuccess: (response, followSubscription) => {\n          if (response.result === \"limitReached\") {\n            cancel = noop\n            return rej(new OperationLimitError())\n          }\n\n          let isOperationGoing = true\n          let done = noop\n          const _res = (x: O) => {\n            isOperationGoing = false\n            done()\n            res(x)\n          }\n          const _rej = (x: Error) => {\n            isOperationGoing = false\n            done()\n            rej(x)\n          }\n\n          done = followSubscription(response.operationId, {\n            next: (e) => {\n              const _e = e as CommonOperationEventsRpc\n              if (_e.event === \"operationError\") {\n                rej(new OperationError(_e.error))\n              } else if (_e.event === \"operationInaccessible\") {\n                rej(new OperationInaccessibleError())\n              } else {\n                logicCb(e as I, _res, _rej)\n              }\n            },\n            error: _rej,\n          })\n\n          cancel = () => {\n            if (!isOperationGoing) return\n            done()\n            request(\"chainHead_unstable_stopOperation\", [response.operationId])\n          }\n        },\n        onError: rej,\n      })\n\n      return () => {\n        cancel()\n      }\n    })\n","import type { OperationBodyDoneRpc } from \"./json-rpc-types\"\nimport { createOperationPromise } from \"./operation-promise\"\n\nexport const createBodyFn = createOperationPromise(\n  \"chainHead_unstable_body\",\n  (hash: string) => [\n    [hash],\n    (e: OperationBodyDoneRpc, res: (x: Array<string>) => void) => {\n      res(e.value)\n    },\n  ],\n)\n","import type { OperationCallDoneRpc } from \"./json-rpc-types\"\nimport { createOperationPromise } from \"./operation-promise\"\n\nexport const createCallFn = createOperationPromise(\n  \"chainHead_unstable_call\",\n  (hash: string, fnName: string, callParameters: string) => [\n    [hash, fnName, callParameters],\n    (e: OperationCallDoneRpc, res: (output: string) => void) => {\n      res(e.output)\n    },\n  ],\n)\n","import { ClientInnerRequest } from \"./public-types\"\n\nexport const createHeaderFn =\n  (request: ClientInnerRequest<string, unknown>) => (hash: string) =>\n    new Promise<string>((res, rej) => {\n      request(\"chainHead_unstable_header\", [hash], {\n        onSuccess: res,\n        onError: rej,\n      })\n    })\n","import { noop } from \"@polkadot-api/utils\"\nimport {\n  ClientInnerRequest,\n  FollowResponse,\n  OperationError,\n  OperationInaccessibleError,\n  OperationLimitError,\n} from \"..\"\nimport {\n  CommonOperationEventsRpc,\n  LimitReachedRpc,\n  OperationStorageDoneRpc,\n  OperationStorageItemsRpc,\n  OperationWaitingForContinueRpc,\n  OperationStorageStartedRpc,\n} from \"./json-rpc-types\"\n\nexport const createStorageCb =\n  (\n    request: ClientInnerRequest<\n      OperationStorageStartedRpc | LimitReachedRpc,\n      | CommonOperationEventsRpc\n      | OperationStorageItemsRpc\n      | OperationStorageDoneRpc\n      | OperationWaitingForContinueRpc\n    >,\n  ): FollowResponse[\"storageSubscription\"] =>\n  (hash, inputs, childTrie, onItems, onError, onDone, onDiscardedItems) => {\n    if (inputs.length === 0) {\n      onDone()\n      return noop\n    }\n\n    let cancel = request(\n      \"chainHead_unstable_storage\",\n      [hash, inputs, childTrie],\n      {\n        onSuccess: (response, followSubscription) => {\n          if (\n            response.result === \"limitReached\" ||\n            response.discardedItems === inputs.length\n          )\n            return onError(new OperationLimitError())\n\n          const doneListening = followSubscription(response.operationId, {\n            next: (event) => {\n              switch (event.event) {\n                case \"operationStorageItems\": {\n                  onItems(event.items)\n                  break\n                }\n                case \"operationStorageDone\": {\n                  _onDone()\n                  break\n                }\n                case \"operationError\": {\n                  _onError(new OperationError(event.error))\n                  break\n                }\n                case \"operationInaccessible\": {\n                  _onError(new OperationInaccessibleError())\n                  break\n                }\n                default:\n                  request(\"chainHead_unstable_continue\", [])\n              }\n            },\n            error: onError,\n          })\n\n          cancel = () => {\n            doneListening()\n            request(\"chainHead_unstable_stopOperation\", [response.operationId])\n          }\n\n          const _onError = (e: Error) => {\n            cancel = noop\n            doneListening()\n            onError(e)\n          }\n\n          const _onDone = () => {\n            cancel = noop\n            doneListening()\n            onDone()\n          }\n\n          onDiscardedItems(response.discardedItems)\n        },\n        onError,\n      },\n    )\n\n    return () => {\n      cancel()\n    }\n  }\n","import { ClientInnerRequest, FollowResponse, OperationLimitError } from \"..\"\nimport type {\n  CommonOperationEventsRpc,\n  LimitReachedRpc,\n  OperationStorageDoneRpc,\n  OperationStorageItemsRpc,\n  OperationWaitingForContinueRpc,\n  OperationStorageStartedRpc,\n} from \"./json-rpc-types\"\nimport { abortablePromiseFn } from \"@/internal-utils\"\nimport { createStorageCb } from \"./storage-subscription\"\n\nexport const createStorageFn = (\n  request: ClientInnerRequest<\n    OperationStorageStartedRpc | LimitReachedRpc,\n    | CommonOperationEventsRpc\n    | OperationStorageItemsRpc\n    | OperationStorageDoneRpc\n    | OperationWaitingForContinueRpc\n  >,\n): FollowResponse[\"storage\"] => {\n  const cbStore = createStorageCb(request)\n  return abortablePromiseFn((resolve, reject, hash, type, key, childTrie) => {\n    const isDescendants = type.startsWith(\"descendants\")\n    let result: any = isDescendants ? [] : null\n\n    const onItems: Parameters<typeof cbStore>[3] = isDescendants\n      ? (items) => {\n          result.push(...items)\n        }\n      : (items) => {\n          result = items[0]?.[type as \"value\"]\n        }\n\n    const cancel = cbStore(\n      hash,\n      [{ key, type }],\n      childTrie ?? null,\n      onItems,\n      reject,\n      () => {\n        resolve(result)\n      },\n      (nDiscarded) => {\n        if (nDiscarded > 0) {\n          cancel()\n          reject(new OperationLimitError())\n        }\n      },\n    )\n    return cancel\n  })\n}\n","import { ClientInnerRequest } from \"./public-types\"\n\nexport const createUnpinFn =\n  (request: ClientInnerRequest<null, unknown>) => (hashes: string[]) =>\n    new Promise<void>((res, rej) => {\n      request(\"chainHead_unstable_unpin\", [hashes], {\n        onSuccess() {\n          res()\n        },\n        onError: rej,\n      })\n    })\n","import type { ClientRequest, FollowSubscriptionCb } from \"@/client\"\nimport type {\n  FollowEventWithRuntimeRpc,\n  FollowEventWithoutRuntimeRpc,\n  OperationEventsRpc,\n  StopRpc,\n} from \"./json-rpc-types\"\nimport type {\n  ChainHead,\n  ClientInnerRequest,\n  FollowEventWithoutRuntime,\n  FollowEventWithRuntime,\n  FollowResponse,\n} from \"./public-types\"\nimport {\n  Subscriber,\n  getSubscriptionsManager,\n  noop,\n  deferred,\n  OrphanMessages,\n} from \"@/internal-utils\"\nimport { createBodyFn } from \"./body\"\nimport { createCallFn } from \"./call\"\nimport { createHeaderFn } from \"./header\"\nimport { createStorageFn } from \"./storage\"\nimport { createUnpinFn } from \"./unpin\"\nimport { DisjointError, StopError } from \"./errors\"\nimport { createStorageCb } from \"./storage-subscription\"\nimport { DestroyedError } from \"@/client/DestroyedError\"\n\ntype FollowEventRpc =\n  | FollowEventWithRuntimeRpc\n  | FollowEventWithoutRuntimeRpc\n  | OperationEventsRpc\n  | StopRpc\n\nfunction isOperationEvent(event: FollowEventRpc): event is OperationEventsRpc {\n  return (event as OperationEventsRpc).operationId !== undefined\n}\n\nexport function getChainHead(\n  request: ClientRequest<string, FollowEventRpc>,\n): ChainHead {\n  return (\n    withRuntime: boolean,\n    onFollowEvent:\n      | ((event: FollowEventWithoutRuntime) => void)\n      | ((event: FollowEventWithRuntime) => void),\n    onFollowError: (e: Error) => void,\n  ): FollowResponse => {\n    const subscriptions = getSubscriptionsManager<OperationEventsRpc>()\n    const orphans = new OrphanMessages<OperationEventsRpc>()\n\n    const ongoingRequests = new Set<() => void>()\n    const deferredFollow = deferred<string | Error>()\n    let followSubscription: Promise<string | Error> | string | null =\n      deferredFollow.promise\n\n    const onAllFollowEventsNext = (event: FollowEventRpc) => {\n      if (isOperationEvent(event)) {\n        if (!subscriptions.has(event.operationId)) {\n          orphans.set(event.operationId, event)\n        }\n        return subscriptions.next(event.operationId, event)\n      }\n\n      if (event.event !== \"stop\") {\n        if (event.event === \"initialized\") {\n          return onFollowEvent({\n            type: event.event,\n            finalizedBlockHashes:\n              \"finalizedBlockHash\" in event\n                ? [event.finalizedBlockHash]\n                : event.finalizedBlockHashes,\n            finalizedBlockRuntime: (event as any).finalizedBlockRuntime,\n          })\n        }\n\n        const { event: type, ...rest } = event\n        // This is kinda dangerous, but YOLO\n        return onFollowEvent({ type, ...rest } as any)\n      }\n\n      onFollowError(new StopError())\n      unfollow(false)\n    }\n\n    const onAllFollowEventsError = (error: Error) => {\n      onFollowError(error)\n      unfollow(!(error instanceof DestroyedError))\n    }\n\n    const onFollowRequestSuccess = (\n      subscriptionId: string,\n      follow: FollowSubscriptionCb<FollowEventRpc>,\n    ) => {\n      const done = follow(\"chainHead_unstable_followEvent\", subscriptionId, {\n        next: onAllFollowEventsNext,\n        error: onAllFollowEventsError,\n      })\n\n      unfollow = (sendUnfollow = true) => {\n        followSubscription = null\n        unfollow = noop\n        done()\n        sendUnfollow && request(\"chainHead_unstable_unfollow\", [subscriptionId])\n        subscriptions.errorAll(new DisjointError())\n        ongoingRequests.forEach((cb) => {\n          cb()\n        })\n        ongoingRequests.clear()\n        orphans.clear()\n      }\n\n      followSubscription = subscriptionId\n      deferredFollow.res(subscriptionId)\n    }\n\n    const onFollowRequestError = (e: Error) => {\n      if (e instanceof DestroyedError) {\n        unfollow(false)\n      } else {\n        onFollowError(e)\n      }\n      followSubscription = null\n      deferredFollow.res(e)\n    }\n\n    let unfollow: (internal?: boolean) => void = request(\n      \"chainHead_unstable_follow\",\n      [withRuntime],\n      { onSuccess: onFollowRequestSuccess, onError: onFollowRequestError },\n    )\n\n    const fRequest: ClientInnerRequest<any, any> = (method, params, cb) => {\n      const disjoint = () => {\n        cb?.onError(new DisjointError())\n      }\n\n      if (followSubscription === null) {\n        disjoint()\n        return noop\n      }\n\n      const onSubscription = (subscription: string) => {\n        if (!cb) return request(method, [subscription, ...params])\n\n        ongoingRequests.add(disjoint)\n\n        const onSubscribeOperation = (\n          operationId: string,\n          subscriber: Subscriber<any>,\n        ) => {\n          if (followSubscription === null) {\n            subscriber.error(new DisjointError())\n            return noop\n          }\n\n          subscriptions.subscribe(operationId, subscriber)\n\n          const pending = orphans.retrieve(operationId)\n          if (pending.length) {\n            Promise.resolve().then(() => {\n              pending.forEach((msg) => {\n                subscriptions.next(operationId, msg)\n              })\n            })\n          }\n\n          return () => {\n            subscriptions.unsubscribe(operationId)\n          }\n        }\n\n        const cleanup = request(method, [subscription, ...params], {\n          onSuccess: (response) => {\n            ongoingRequests.delete(disjoint)\n            cb.onSuccess(response, onSubscribeOperation)\n          },\n          onError: (e) => {\n            ongoingRequests.delete(disjoint)\n            cb.onError(e)\n          },\n        })\n\n        return () => {\n          ongoingRequests.delete(disjoint)\n          cleanup()\n        }\n      }\n\n      if (typeof followSubscription === \"string\")\n        return onSubscription(followSubscription)\n\n      let onCancel = noop\n      followSubscription.then((x) => {\n        if (x instanceof Error) return disjoint()\n        if (followSubscription) onCancel = onSubscription(x)\n      })\n\n      return () => {\n        onCancel()\n      }\n    }\n\n    return {\n      unfollow() {\n        unfollow()\n        followSubscription = null\n      },\n      body: createBodyFn(fRequest),\n      call: createCallFn(fRequest),\n      header: createHeaderFn(fRequest),\n      storage: createStorageFn(fRequest),\n      storageSubscription: createStorageCb(fRequest),\n      unpin: createUnpinFn(fRequest),\n      _request: fRequest,\n    }\n  }\n}\n","import {\n  type ConnectProvider,\n  type Provider,\n} from \"@polkadot-api/json-rpc-provider\"\nimport { getTransaction } from \"./transaction/transaction\"\nimport { getChainHead } from \"./chainhead\"\nimport {\n  ClientRequest,\n  ClientRequestCb,\n  createClient as createRawClient,\n} from \"./client\"\nimport type { ChainHead } from \"./chainhead\"\nimport type { Transaction } from \"./transaction\"\nimport { UnsubscribeFn } from \"./common-types\"\nimport { abortablePromiseFn } from \"./internal-utils\"\nimport { noop } from \"@polkadot-api/utils\"\n\nexport type { ConnectProvider, Provider }\n\nexport type * from \"./common-types\"\nexport type * from \"./client\"\nexport type * from \"./transaction\"\nexport type * from \"./chainhead\"\n\nexport { RpcError, DestroyedError } from \"./client\"\nexport { TransactionError } from \"./transaction\"\nexport {\n  StopError,\n  DisjointError,\n  OperationError,\n  OperationInaccessibleError,\n  OperationLimitError,\n} from \"./chainhead\"\n\nexport interface SubstrateClient {\n  chainHead: ChainHead\n  transaction: Transaction\n  destroy: UnsubscribeFn\n  request: <T>(\n    method: string,\n    params: any[],\n    abortSignal?: AbortSignal,\n  ) => Promise<T>\n  _request: <Reply, Notification>(\n    method: string,\n    params: any[],\n    cb?: ClientRequestCb<Reply, Notification>,\n  ) => UnsubscribeFn\n}\n\nexport const createClient = (provider: ConnectProvider): SubstrateClient => {\n  const client = createRawClient(provider)\n\n  const request = abortablePromiseFn(\n    <T>(\n      onSuccess: (value: T) => void,\n      onError: (e: any) => void,\n      method: string,\n      params: any[],\n    ) => client.request(method, params, { onSuccess, onError }),\n  )\n\n  let rpcMethods: Promise<Set<string>> | Set<string> = request<\n    { methods: Array<string> } | Array<string>\n  >(\"rpc_methods\", []).then(\n    (x) => (rpcMethods = new Set(Array.isArray(x) ? x : x.methods)),\n  )\n  rpcMethods.catch(noop)\n\n  const getSubmitAndWatchNamespace = (input: Set<string>) =>\n    input.has(\"transaction_unstable_submitAndWatch\")\n      ? \"transaction\"\n      : \"transactionWatch\"\n\n  const innerTransaction = getTransaction(\n    client.request as ClientRequest<any, any>,\n  )\n  return {\n    chainHead: getChainHead(client.request as ClientRequest<any, any>),\n    transaction: (tx, next, err) => {\n      if (rpcMethods instanceof Promise) {\n        let cleanup = noop\n        let isRunning = true\n\n        rpcMethods.then((result) => {\n          if (!isRunning) return\n          cleanup = innerTransaction(\n            getSubmitAndWatchNamespace(result),\n            tx,\n            next,\n            err,\n          )\n        })\n\n        return () => {\n          isRunning = false\n          cleanup()\n        }\n      }\n\n      return innerTransaction(\n        getSubmitAndWatchNamespace(rpcMethods),\n        tx,\n        next,\n        err,\n      )\n    },\n    destroy: () => {\n      client.disconnect()\n    },\n    request,\n    _request: client.request,\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,YAAY,YAAY;AAG1B,IAAM,qBACX,CACE,OAIF,IAAI,SACF,IAAI,QAAQ,CAAC,KAAK,QAAQ;AACxB,MAAI,SAAS;AAEb,QAAM,CAAC,YAAY,WAAW,IAC5B,KAAK,KAAK,SAAS,CAAC,aAAa,cAC5B,CAAC,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,IAItD,CAAC,IAAI;AAEZ,QAAM,UAAU,MAAM;AACpB,WAAO;AACP,QAAI,IAAI,WAAW,CAAC;AAAA,EACtB;AAEA,eAAa,iBAAiB,SAAS,SAAS,EAAE,MAAM,KAAK,CAAC;AAE9D,QAAM,cACJ,CAAIA,QACJ,CAAC,MAAM;AACL,aAAS;AACT,iBAAa,oBAAoB,SAAS,OAAO;AACjD,IAAAA,IAAG,CAAC;AAAA,EACN;AAEF,WAAS,GAAG,GAAG,CAAC,YAAY,GAAG,GAAG,YAAY,GAAG,GAAG,GAAG,UAAU,CAAC;AACpE,CAAC;;;AC/BE,SAAS,WAAkC;AAChD,MAAI,MAA0B,MAAM;AAAA,EAAC;AACrC,MAAI,MAA4B,MAAM;AAAA,EAAC;AAEvC,QAAM,UAAU,IAAI,QAAW,CAAC,MAAM,SAAS;AAC7C,UAAM;AACN,UAAM;AAAA,EACR,CAAC;AAED,SAAO,EAAE,SAAS,KAAK,IAAI;AAC7B;;;AChBO,IAAMC,QAAO,MAAY;AAAC;;;ACAjC,IAAM,WAAW;AAOV,IAAM,0BAA0B,MAAS;AAC9C,QAAM,gBAAgB,oBAAI,IAA2B;AAErD,SAAO;AAAA,IACL,KAAK,cAAc,IAAI,KAAK,aAAa;AAAA,IACzC,UAAU,IAAY,YAA2B;AAC/C,oBAAc,IAAI,IAAI,UAAU;AAAA,IAClC;AAAA,IACA,YAAY,IAAY;AACtB,oBAAc,OAAO,EAAE;AAAA,IACzB;AAAA,IACA,KAAK,IAAY,MAAS;AACxB,oBAAc,IAAI,EAAE,GAAG,KAAK,IAAI;AAAA,IAClC;AAAA,IACA,MAAM,IAAY,GAAU;AAC1B,YAAM,aAAa,cAAc,IAAI,EAAE;AACvC,UAAI,YAAY;AACd,sBAAc,OAAO,EAAE;AACvB,mBAAW,MAAM,CAAC;AAAA,MACpB;AAAA,IACF;AAAA,IACA,SAAS,GAAU;AACjB,YAAM,cAAc,CAAC,GAAG,cAAc,OAAO,CAAC;AAC9C,oBAAc,MAAM;AACpB,kBAAY,QAAQ,CAAC,MAAM;AACzB,UAAE,MAAM,CAAC;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AACF;AApCA;AA0CO,IAAM,iBAAN,MAAwB;AAAA,EAI7B,cAAc;AAHd;AACA;AAGE,uBAAK,WAAY,oBAAI,IAAI;AACzB,uBAAK,QAAS;AAAA,EAChB;AAAA,EAEQ,aAAmB;AACzB,QAAI,mBAAK,WAAU,OAAO;AAAG;AAE7B,kBAAc,mBAAK,OAAa;AAChC,uBAAK,QAAS;AAAA,EAChB;AAAA,EAEA,IAAI,KAAa,SAAkB;AACjC,UAAM,WAAW,mBAAK,WAAU,IAAI,GAAG,GAAG,YAAY,CAAC;AACvD,aAAS,KAAK,OAAO;AACrB,uBAAK,WAAU,IAAI,KAAK,EAAE,QAAQ,KAAK,IAAI,IAAI,UAAU,SAAS,CAAC;AAEnE,uBAAK,QACH,mBAAK,WACJ,YAAY,MAAM;AACjB,YAAM,MAAM,KAAK,IAAI;AACpB,OAAC,GAAG,mBAAK,WAAU,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAACC,MAAK,KAAK,MAAM;AACvD,YAAI,MAAM,SAAS;AAAK,6BAAK,WAAU,OAAOA,IAAG;AAAA,MACnD,CAAC;AACD,WAAK,WAAW;AAAA,IAClB,GAAG,QAAQ;AAAA,EACf;AAAA,EAEA,SAAS,KAAkB;AACzB,UAAM,SAAS,mBAAK,WAAU,IAAI,GAAG;AACrC,QAAI,CAAC;AAAQ,aAAO,CAAC;AACrB,uBAAK,WAAU,OAAO,GAAG;AACzB,SAAK,WAAW;AAChB,WAAO,OAAO;AAAA,EAChB;AAAA,EAEA,QAAQ;AACN,uBAAK,WAAU,MAAM;AACrB,SAAK,WAAW;AAAA,EAClB;AACF;AA3CE;AACA;;;ACtCK,IAAM,WAAN,cAAuB,MAA2B;AAAA,EAGvD,YAAY,GAAc;AACxB,UAAM,EAAE,OAAO;AAHjB;AACA;AAGE,SAAK,OAAO,EAAE;AACd,SAAK,OAAO,EAAE;AACd,SAAK,OAAO;AAAA,EACd;AACF;;;ACfO,IAAM,iBAAN,cAA6B,MAAM;AAAA,EACxC,cAAc;AACZ,UAAM,kBAAkB;AACxB,SAAK,OAAO;AAAA,EACd;AACF;;;AC8BO,IAAM,eAAe,CAAC,cAAuC;AAClE,QAAM,YAAY,oBAAI,IAAuC;AAC7D,QAAM,gBAAgB,wBAAwB;AAC9C,QAAM,UAAU,IAAI,eAAuB;AAE3C,MAAI,WAA4B;AAEhC,QAAM,OAAO,CACX,IACA,QACA,WACG;AACH,aAAU;AAAA,MACR,KAAK,UAAU;AAAA,QACb,SAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAEA,WAAS,UAAU,SAAuB;AACxC,QAAI;AACF,UAAI,IACF,QACA,OACA,QACA;AAEF,YAAM,SAAS,KAAK,MAAM,OAAO;AAChC,OAAC,EAAE,IAAI,QAAQ,OAAO,OAAO,IAAI;AAElC,UAAI,IAAI;AACN,cAAM,KAAK,UAAU,IAAI,EAAE;AAC3B,YAAI,CAAC;AAAI;AAET,kBAAU,OAAO,EAAE;AAEnB,eAAO,QACH,GAAG,QAAQ,IAAI,SAAS,KAAK,CAAC,IAC9B,GAAG,UAAU,QAAQ,CAAC,YAAY,UAAU,eAAe;AACzD,gBAAMC,kBAAiB,aAAa;AACpC,wBAAc,UAAUA,iBAAgB,UAAU;AAClD,gBAAM,UAAU,QAAQ,SAASA,eAAc;AAC/C,cAAI,QAAQ,QAAQ;AAClB,oBAAQ,QAAQ,EAAE,KAAK,MAAM;AAC3B,sBAAQ,QAAQ,CAAC,QAAQ;AACvB,8BAAc,KAAKA,iBAAgB,GAAG;AAAA,cACxC,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AACA,iBAAO,MAAM;AACX,0BAAc,YAAYA,eAAc;AAAA,UAC1C;AAAA,QACF,CAAC;AAAA,MACP;AAGA;AAAC,OAAC,EAAE,cAAc,QAAQ,MAAM,IAAI;AACpC,UAAI,CAAC,gBAAiB,CAAC,SAAS,CAAC,OAAO,OAAO,QAAQ,QAAQ;AAAI,cAAM;AAEzE,YAAM,iBAAiB,OAAO,SAAS;AACvC,UAAI,CAAC,cAAc,IAAI,cAAc,GAAG;AACtC,gBAAQ,IAAI,gBAAgB,OAAO;AAAA,MACrC;AAEA,UAAI,OAAO;AACT,sBAAc,MAAM,gBAAgB,IAAI,SAAS,KAAM,CAAC;AAAA,MAC1D,OAAO;AACL,sBAAc,KAAK,gBAAgB,MAAM;AAAA,MAC3C;AAAA,IACF,SAAS,GAAG;AACV,cAAQ,KAAK,sCAAsC,OAAO;AAC1D,cAAQ,MAAM,CAAC;AAAA,IACjB;AAAA,EACF;AACA,aAAW,UAAU,SAAS;AAE9B,QAAM,aAAa,MAAM;AACvB,cAAU,WAAW;AACrB,eAAW;AACX,kBAAc,SAAS,IAAI,eAAe,CAAC;AAC3C,cAAU,QAAQ,CAAC,MAAM,EAAE,QAAQ,IAAI,eAAe,CAAC,CAAC;AACxD,cAAU,MAAM;AAChB,YAAQ,MAAM;AAAA,EAChB;AAEA,MAAI,SAAS;AACb,QAAM,UAAU,CACd,QACA,QACA,OACkB;AAClB,QAAI,CAAC;AAAU,YAAM,IAAI,MAAM,eAAe;AAC9C,UAAM,KAAK;AAEX,QAAI;AAAI,gBAAU,IAAI,IAAI,EAAE;AAC5B,SAAK,IAAI,QAAQ,MAAM;AAEvB,WAAO,MAAY;AACjB,gBAAU,OAAO,EAAE;AAAA,IACrB;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;;;AClIA,IAAM,cAAc,CAA8B,UAA6B;AAC7E,QAAM,EAAE,OAAO,MAAM,GAAG,KAAK,IAAI;AACjC,SAAO,EAAE,MAAM,GAAG,KAAK;AACzB;AAGA,IAAM,iBAA8B,oBAAI,IAA4B;AAAA,EAClE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,CAAC;AAED,SAAS,gBAAgB,OAA2C;AAClE,SAAO,eAAe,IAAI,MAAM,KAAK;AACvC;AASO,IAAM,mBAAN,cAA+B,MAA0B;AAAA,EAG9D,YAAY,GAAgB;AAC1B,UAAM,YAAY,EAAE,KAAK,MAAM,EAAE,KAAK,EAAE;AAH1C;AACA;AAGE,SAAK,OAAO,EAAE;AACd,SAAK,QAAQ,EAAE;AACf,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,iBACX,CAAC,YACD,CACE,WACA,IACA,MACA,UACG;AACH,MAAI,SAAS,QAAQ,YAAY,4BAA4B,CAAC,EAAE,GAAG;AAAA,IACjE,WAAW,CAAC,gBAAgB,WAAW;AACrC,YAAM,OAAO;AAAA,QACX,YAAY;AAAA,QACZ;AAAA,QACA;AAAA,UACE,MAAM,CAAC,UAAU;AACf,gBAAI,gBAAgB,KAAK,GAAG;AAC1B,mBAAK;AACL,uBAASC;AACT,kBAAI,MAAM,UAAU;AAClB,uBAAO,MAAM,IAAI,iBAAiB,KAAK,CAAC;AAAA,YAC5C;AACA,iBAAK,YAAY,KAAK,CAAC;AAAA,UACzB;AAAA,UACA,MAAM,GAAG;AACP,gBAAI,EAAE,aAAa;AAAiB,qBAAO;AAC3C,qBAASA;AACT,kBAAM,CAAC;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,eAAS,MAAM;AACb,aAAK;AACL,gBAAQ,YAAY,qBAAqB,CAAC,cAAc,CAAC;AAAA,MAC3D;AAAA,IACF;AAAA,IACA,SAAS;AAAA,EACX,CAAC;AAED,SAAO,MAAM;AACX,WAAO;AAAA,EACT;AACF;;;AC3FK,IAAM,YAAN,cAAwB,MAAM;AAAA,EACnC,cAAc;AACZ,UAAM,mBAAmB;AACzB,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,gBAAN,cAA4B,MAAM;AAAA,EACvC,cAAc;AACZ,UAAM,sBAAsB;AAC5B,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAC7C,cAAc;AACZ,UAAM,oCAAoC;AAC1C,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,iBAAN,cAA6B,MAAM;AAAA,EACxC,YAAY,OAAe;AACzB,UAAM,KAAK;AACX,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,6BAAN,cAAyC,MAAM;AAAA,EACpD,cAAc;AACZ,UAAM,kCAAkC;AACxC,SAAK,OAAO;AAAA,EACd;AACF;;;ACrBO,IAAM,yBACX,CACE,eACA,YAOF,CACE,YAKA,mBAAyB,CAAC,KAAK,QAAQ,SAAS;AAC9C,QAAM,CAAC,aAAa,OAAO,IAAI,QAAQ,GAAG,IAAI;AAC9C,MAAI,SAAS,QAAQ,eAAe,aAAa;AAAA,IAC/C,WAAW,CAAC,UAAU,uBAAuB;AAC3C,UAAI,SAAS,WAAW,gBAAgB;AACtC,iBAASC;AACT,eAAO,IAAI,IAAI,oBAAoB,CAAC;AAAA,MACtC;AAEA,UAAI,mBAAmB;AACvB,UAAI,OAAOA;AACX,YAAM,OAAO,CAAC,MAAS;AACrB,2BAAmB;AACnB,aAAK;AACL,YAAI,CAAC;AAAA,MACP;AACA,YAAM,OAAO,CAAC,MAAa;AACzB,2BAAmB;AACnB,aAAK;AACL,YAAI,CAAC;AAAA,MACP;AAEA,aAAO,mBAAmB,SAAS,aAAa;AAAA,QAC9C,MAAM,CAAC,MAAM;AACX,gBAAM,KAAK;AACX,cAAI,GAAG,UAAU,kBAAkB;AACjC,gBAAI,IAAI,eAAe,GAAG,KAAK,CAAC;AAAA,UAClC,WAAW,GAAG,UAAU,yBAAyB;AAC/C,gBAAI,IAAI,2BAA2B,CAAC;AAAA,UACtC,OAAO;AACL,oBAAQ,GAAQ,MAAM,IAAI;AAAA,UAC5B;AAAA,QACF;AAAA,QACA,OAAO;AAAA,MACT,CAAC;AAED,eAAS,MAAM;AACb,YAAI,CAAC;AAAkB;AACvB,aAAK;AACL,gBAAQ,oCAAoC,CAAC,SAAS,WAAW,CAAC;AAAA,MACpE;AAAA,IACF;AAAA,IACA,SAAS;AAAA,EACX,CAAC;AAED,SAAO,MAAM;AACX,WAAO;AAAA,EACT;AACF,CAAC;;;ACzEE,IAAM,eAAe;AAAA,EAC1B;AAAA,EACA,CAAC,SAAiB;AAAA,IAChB,CAAC,IAAI;AAAA,IACL,CAAC,GAAyB,QAAoC;AAC5D,UAAI,EAAE,KAAK;AAAA,IACb;AAAA,EACF;AACF;;;ACRO,IAAM,eAAe;AAAA,EAC1B;AAAA,EACA,CAAC,MAAc,QAAgB,mBAA2B;AAAA,IACxD,CAAC,MAAM,QAAQ,cAAc;AAAA,IAC7B,CAAC,GAAyB,QAAkC;AAC1D,UAAI,EAAE,MAAM;AAAA,IACd;AAAA,EACF;AACF;;;ACTO,IAAM,iBACX,CAAC,YAAiD,CAAC,SACjD,IAAI,QAAgB,CAAC,KAAK,QAAQ;AAChC,UAAQ,6BAA6B,CAAC,IAAI,GAAG;AAAA,IAC3C,WAAW;AAAA,IACX,SAAS;AAAA,EACX,CAAC;AACH,CAAC;;;ACTL,SAAS,QAAAC,aAAY;AAiBd,IAAM,kBACX,CACE,YAQF,CAAC,MAAM,QAAQ,WAAW,SAAS,SAAS,QAAQ,qBAAqB;AACvE,MAAI,OAAO,WAAW,GAAG;AACvB,WAAO;AACP,WAAOC;AAAA,EACT;AAEA,MAAI,SAAS;AAAA,IACX;AAAA,IACA,CAAC,MAAM,QAAQ,SAAS;AAAA,IACxB;AAAA,MACE,WAAW,CAAC,UAAU,uBAAuB;AAC3C,YACE,SAAS,WAAW,kBACpB,SAAS,mBAAmB,OAAO;AAEnC,iBAAO,QAAQ,IAAI,oBAAoB,CAAC;AAE1C,cAAM,gBAAgB,mBAAmB,SAAS,aAAa;AAAA,UAC7D,MAAM,CAAC,UAAU;AACf,oBAAQ,MAAM,OAAO;AAAA,cACnB,KAAK,yBAAyB;AAC5B,wBAAQ,MAAM,KAAK;AACnB;AAAA,cACF;AAAA,cACA,KAAK,wBAAwB;AAC3B,wBAAQ;AACR;AAAA,cACF;AAAA,cACA,KAAK,kBAAkB;AACrB,yBAAS,IAAI,eAAe,MAAM,KAAK,CAAC;AACxC;AAAA,cACF;AAAA,cACA,KAAK,yBAAyB;AAC5B,yBAAS,IAAI,2BAA2B,CAAC;AACzC;AAAA,cACF;AAAA,cACA;AACE,wBAAQ,+BAA+B,CAAC,CAAC;AAAA,YAC7C;AAAA,UACF;AAAA,UACA,OAAO;AAAA,QACT,CAAC;AAED,iBAAS,MAAM;AACb,wBAAc;AACd,kBAAQ,oCAAoC,CAAC,SAAS,WAAW,CAAC;AAAA,QACpE;AAEA,cAAM,WAAW,CAAC,MAAa;AAC7B,mBAASA;AACT,wBAAc;AACd,kBAAQ,CAAC;AAAA,QACX;AAEA,cAAM,UAAU,MAAM;AACpB,mBAASA;AACT,wBAAc;AACd,iBAAO;AAAA,QACT;AAEA,yBAAiB,SAAS,cAAc;AAAA,MAC1C;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,SAAO,MAAM;AACX,WAAO;AAAA,EACT;AACF;;;ACpFK,IAAM,kBAAkB,CAC7B,YAO8B;AAC9B,QAAM,UAAU,gBAAgB,OAAO;AACvC,SAAO,mBAAmB,CAAC,SAAS,QAAQ,MAAM,MAAM,KAAK,cAAc;AACzE,UAAM,gBAAgB,KAAK,WAAW,aAAa;AACnD,QAAI,SAAc,gBAAgB,CAAC,IAAI;AAEvC,UAAM,UAAyC,gBAC3C,CAAC,UAAU;AACT,aAAO,KAAK,GAAG,KAAK;AAAA,IACtB,IACA,CAAC,UAAU;AACT,eAAS,MAAM,CAAC,IAAI,IAAe;AAAA,IACrC;AAEJ,UAAM,SAAS;AAAA,MACb;AAAA,MACA,CAAC,EAAE,KAAK,KAAK,CAAC;AAAA,MACd,aAAa;AAAA,MACb;AAAA,MACA;AAAA,MACA,MAAM;AACJ,gBAAQ,MAAM;AAAA,MAChB;AAAA,MACA,CAAC,eAAe;AACd,YAAI,aAAa,GAAG;AAClB,iBAAO;AACP,iBAAO,IAAI,oBAAoB,CAAC;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT,CAAC;AACH;;;AClDO,IAAM,gBACX,CAAC,YAA+C,CAAC,WAC/C,IAAI,QAAc,CAAC,KAAK,QAAQ;AAC9B,UAAQ,4BAA4B,CAAC,MAAM,GAAG;AAAA,IAC5C,YAAY;AACV,UAAI;AAAA,IACN;AAAA,IACA,SAAS;AAAA,EACX,CAAC;AACH,CAAC;;;ACyBL,SAAS,iBAAiB,OAAoD;AAC5E,SAAQ,MAA6B,gBAAgB;AACvD;AAEO,SAAS,aACd,SACW;AACX,SAAO,CACL,aACA,eAGA,kBACmB;AACnB,UAAM,gBAAgB,wBAA4C;AAClE,UAAM,UAAU,IAAI,eAAmC;AAEvD,UAAM,kBAAkB,oBAAI,IAAgB;AAC5C,UAAM,iBAAiB,SAAyB;AAChD,QAAI,qBACF,eAAe;AAEjB,UAAM,wBAAwB,CAAC,UAA0B;AACvD,UAAI,iBAAiB,KAAK,GAAG;AAC3B,YAAI,CAAC,cAAc,IAAI,MAAM,WAAW,GAAG;AACzC,kBAAQ,IAAI,MAAM,aAAa,KAAK;AAAA,QACtC;AACA,eAAO,cAAc,KAAK,MAAM,aAAa,KAAK;AAAA,MACpD;AAEA,UAAI,MAAM,UAAU,QAAQ;AAC1B,YAAI,MAAM,UAAU,eAAe;AACjC,iBAAO,cAAc;AAAA,YACnB,MAAM,MAAM;AAAA,YACZ,sBACE,wBAAwB,QACpB,CAAC,MAAM,kBAAkB,IACzB,MAAM;AAAA,YACZ,uBAAwB,MAAc;AAAA,UACxC,CAAC;AAAA,QACH;AAEA,cAAM,EAAE,OAAO,MAAM,GAAG,KAAK,IAAI;AAEjC,eAAO,cAAc,EAAE,MAAM,GAAG,KAAK,CAAQ;AAAA,MAC/C;AAEA,oBAAc,IAAI,UAAU,CAAC;AAC7B,eAAS,KAAK;AAAA,IAChB;AAEA,UAAM,yBAAyB,CAAC,UAAiB;AAC/C,oBAAc,KAAK;AACnB,eAAS,EAAE,iBAAiB,eAAe;AAAA,IAC7C;AAEA,UAAM,yBAAyB,CAC7B,gBACA,WACG;AACH,YAAM,OAAO,OAAO,kCAAkC,gBAAgB;AAAA,QACpE,MAAM;AAAA,QACN,OAAO;AAAA,MACT,CAAC;AAED,iBAAW,CAAC,eAAe,SAAS;AAClC,6BAAqB;AACrB,mBAAWC;AACX,aAAK;AACL,wBAAgB,QAAQ,+BAA+B,CAAC,cAAc,CAAC;AACvE,sBAAc,SAAS,IAAI,cAAc,CAAC;AAC1C,wBAAgB,QAAQ,CAAC,OAAO;AAC9B,aAAG;AAAA,QACL,CAAC;AACD,wBAAgB,MAAM;AACtB,gBAAQ,MAAM;AAAA,MAChB;AAEA,2BAAqB;AACrB,qBAAe,IAAI,cAAc;AAAA,IACnC;AAEA,UAAM,uBAAuB,CAAC,MAAa;AACzC,UAAI,aAAa,gBAAgB;AAC/B,iBAAS,KAAK;AAAA,MAChB,OAAO;AACL,sBAAc,CAAC;AAAA,MACjB;AACA,2BAAqB;AACrB,qBAAe,IAAI,CAAC;AAAA,IACtB;AAEA,QAAI,WAAyC;AAAA,MAC3C;AAAA,MACA,CAAC,WAAW;AAAA,MACZ,EAAE,WAAW,wBAAwB,SAAS,qBAAqB;AAAA,IACrE;AAEA,UAAM,WAAyC,CAAC,QAAQ,QAAQ,OAAO;AACrE,YAAM,WAAW,MAAM;AACrB,YAAI,QAAQ,IAAI,cAAc,CAAC;AAAA,MACjC;AAEA,UAAI,uBAAuB,MAAM;AAC/B,iBAAS;AACT,eAAOA;AAAA,MACT;AAEA,YAAM,iBAAiB,CAAC,iBAAyB;AAC/C,YAAI,CAAC;AAAI,iBAAO,QAAQ,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC;AAEzD,wBAAgB,IAAI,QAAQ;AAE5B,cAAM,uBAAuB,CAC3B,aACA,eACG;AACH,cAAI,uBAAuB,MAAM;AAC/B,uBAAW,MAAM,IAAI,cAAc,CAAC;AACpC,mBAAOA;AAAA,UACT;AAEA,wBAAc,UAAU,aAAa,UAAU;AAE/C,gBAAM,UAAU,QAAQ,SAAS,WAAW;AAC5C,cAAI,QAAQ,QAAQ;AAClB,oBAAQ,QAAQ,EAAE,KAAK,MAAM;AAC3B,sBAAQ,QAAQ,CAAC,QAAQ;AACvB,8BAAc,KAAK,aAAa,GAAG;AAAA,cACrC,CAAC;AAAA,YACH,CAAC;AAAA,UACH;AAEA,iBAAO,MAAM;AACX,0BAAc,YAAY,WAAW;AAAA,UACvC;AAAA,QACF;AAEA,cAAM,UAAU,QAAQ,QAAQ,CAAC,cAAc,GAAG,MAAM,GAAG;AAAA,UACzD,WAAW,CAAC,aAAa;AACvB,4BAAgB,OAAO,QAAQ;AAC/B,eAAG,UAAU,UAAU,oBAAoB;AAAA,UAC7C;AAAA,UACA,SAAS,CAAC,MAAM;AACd,4BAAgB,OAAO,QAAQ;AAC/B,eAAG,QAAQ,CAAC;AAAA,UACd;AAAA,QACF,CAAC;AAED,eAAO,MAAM;AACX,0BAAgB,OAAO,QAAQ;AAC/B,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,UAAI,OAAO,uBAAuB;AAChC,eAAO,eAAe,kBAAkB;AAE1C,UAAI,WAAWA;AACf,yBAAmB,KAAK,CAAC,MAAM;AAC7B,YAAI,aAAa;AAAO,iBAAO,SAAS;AACxC,YAAI;AAAoB,qBAAW,eAAe,CAAC;AAAA,MACrD,CAAC;AAED,aAAO,MAAM;AACX,iBAAS;AAAA,MACX;AAAA,IACF;AAEA,WAAO;AAAA,MACL,WAAW;AACT,iBAAS;AACT,6BAAqB;AAAA,MACvB;AAAA,MACA,MAAM,aAAa,QAAQ;AAAA,MAC3B,MAAM,aAAa,QAAQ;AAAA,MAC3B,QAAQ,eAAe,QAAQ;AAAA,MAC/B,SAAS,gBAAgB,QAAQ;AAAA,MACjC,qBAAqB,gBAAgB,QAAQ;AAAA,MAC7C,OAAO,cAAc,QAAQ;AAAA,MAC7B,UAAU;AAAA,IACZ;AAAA,EACF;AACF;;;AC5MA,SAAS,QAAAC,aAAY;AAmCd,IAAMC,gBAAe,CAAC,aAA+C;AAC1E,QAAM,SAAS,aAAgB,QAAQ;AAEvC,QAAM,UAAU;AAAA,IACd,CACE,WACA,SACA,QACA,WACG,OAAO,QAAQ,QAAQ,QAAQ,EAAE,WAAW,QAAQ,CAAC;AAAA,EAC5D;AAEA,MAAI,aAAiD,QAEnD,eAAe,CAAC,CAAC,EAAE;AAAA,IACnB,CAAC,MAAO,aAAa,IAAI,IAAI,MAAM,QAAQ,CAAC,IAAI,IAAI,EAAE,OAAO;AAAA,EAC/D;AACA,aAAW,MAAMC,KAAI;AAErB,QAAM,6BAA6B,CAAC,UAClC,MAAM,IAAI,qCAAqC,IAC3C,gBACA;AAEN,QAAM,mBAAmB;AAAA,IACvB,OAAO;AAAA,EACT;AACA,SAAO;AAAA,IACL,WAAW,aAAa,OAAO,OAAkC;AAAA,IACjE,aAAa,CAAC,IAAI,MAAM,QAAQ;AAC9B,UAAI,sBAAsB,SAAS;AACjC,YAAI,UAAUA;AACd,YAAI,YAAY;AAEhB,mBAAW,KAAK,CAAC,WAAW;AAC1B,cAAI,CAAC;AAAW;AAChB,oBAAU;AAAA,YACR,2BAA2B,MAAM;AAAA,YACjC;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAO,MAAM;AACX,sBAAY;AACZ,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,aAAO;AAAA,QACL,2BAA2B,UAAU;AAAA,QACrC;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,IACA,SAAS,MAAM;AACb,aAAO,WAAW;AAAA,IACpB;AAAA,IACA;AAAA,IACA,UAAU,OAAO;AAAA,EACnB;AACF;","names":["fn","noop","key","subscriptionId","noop","noop","noop","noop","noop","noop","createClient","noop"]}