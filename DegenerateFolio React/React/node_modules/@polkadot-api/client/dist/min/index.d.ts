import * as _polkadot_api_substrate_bindings from '@polkadot-api/substrate-bindings';
import { V15, Decoder, Codec, SS58String, Encoder, Enum, Binary, Descriptors, ConstFromDescriptors, QueryFromDescriptors, TxFromDescriptors, EventsFromDescriptors, BlockHeader, HexString, Anonymize, RuntimeDescriptor } from '@polkadot-api/substrate-bindings';
export { AccountId, Binary, Codec, ConstFromDescriptors, Enum, ErrorsFromDescriptors, EventsFromDescriptors, GetEnum, HexString, PlainDescriptor, QueryFromDescriptors, ResultPayload, RuntimeDescriptor, SS58String, StorageDescriptor, TxDescriptor, TxFromDescriptors, _Enum } from '@polkadot-api/substrate-bindings';
import * as rxjs from 'rxjs';
import { Observable } from 'rxjs';
import * as _polkadot_api_substrate_client from '@polkadot-api/substrate-client';
import { ChainHead, FollowEventWithRuntime, StorageResult, StorageItemInput, SubstrateClient, TxValidated, TxBroadcasted, TxBestChainBlockIncluded, TxFinalized } from '@polkadot-api/substrate-client';
export { FollowEventWithRuntime } from '@polkadot-api/substrate-client';
import { getChecksumBuilder, getDynamicBuilder } from '@polkadot-api/metadata-builders';

type SystemEvent$1 = {
    phase: {
        type: "ApplyExtrinsic";
        value: number;
    } | {
        type: "Finalization";
    } | {
        type: "Initialization";
    };
    event: {
        type: string;
        value: {
            type: string;
            value: any;
        };
    };
    topics: Array<any>;
};
interface RuntimeContext {
    metadata: V15;
    checksumBuilder: ReturnType<typeof getChecksumBuilder>;
    dynamicBuilder: ReturnType<typeof getDynamicBuilder>;
    events: {
        key: string;
        dec: Decoder<Array<SystemEvent$1>>;
    };
    accountId: Codec<SS58String>;
    asset: [Encoder<any>, string | null];
}

type BlockInfo = {
    hash: string;
    number: number;
    parent: string;
};
declare const getChainHead$: (chainHead: ChainHead) => {
    follow$: Observable<FollowEventWithRuntime>;
    finalized$: Observable<BlockInfo>;
    bestBlocks$: Observable<BlockInfo[]>;
    runtime$: Observable<RuntimeContext | null>;
    metadata$: Observable<{
        lookup: {
            id: number;
            path: string[];
            params: {
                name: string;
                type: number | undefined;
            }[];
            def: {
                tag: "composite";
                value: {
                    name: string | undefined;
                    type: number;
                    typeName: string | undefined;
                    docs: string[];
                }[];
            } | {
                tag: "variant";
                value: {
                    name: string;
                    fields: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                    index: number;
                    docs: string[];
                }[];
            } | {
                tag: "sequence";
                value: number;
            } | {
                tag: "array";
                value: {
                    len: number;
                    type: number;
                };
            } | {
                tag: "tuple";
                value: number[];
            } | {
                tag: "primitive";
                value: {
                    tag: "bool";
                    value: undefined;
                } | {
                    tag: "char";
                    value: undefined;
                } | {
                    tag: "str";
                    value: undefined;
                } | {
                    tag: "u8";
                    value: undefined;
                } | {
                    tag: "u16";
                    value: undefined;
                } | {
                    tag: "u32";
                    value: undefined;
                } | {
                    tag: "u64";
                    value: undefined;
                } | {
                    tag: "u128";
                    value: undefined;
                } | {
                    tag: "u256";
                    value: undefined;
                } | {
                    tag: "i8";
                    value: undefined;
                } | {
                    tag: "i16";
                    value: undefined;
                } | {
                    tag: "i32";
                    value: undefined;
                } | {
                    tag: "i64";
                    value: undefined;
                } | {
                    tag: "i128";
                    value: undefined;
                } | {
                    tag: "i256";
                    value: undefined;
                };
            } | {
                tag: "compact";
                value: number;
            } | {
                tag: "bitSequence";
                value: {
                    bitStoreType: number;
                    bitOrderType: number;
                };
            };
            docs: string[];
        }[];
        pallets: {
            name: string;
            storage: {
                prefix: string;
                items: {
                    name: string;
                    modifier: number;
                    type: {
                        tag: "map";
                        value: {
                            hashers: ({
                                tag: "Blake2128";
                                value: undefined;
                            } | {
                                tag: "Blake2256";
                                value: undefined;
                            } | {
                                tag: "Blake2128Concat";
                                value: undefined;
                            } | {
                                tag: "Twox128";
                                value: undefined;
                            } | {
                                tag: "Twox256";
                                value: undefined;
                            } | {
                                tag: "Twox64Concat";
                                value: undefined;
                            } | {
                                tag: "Identity";
                                value: undefined;
                            })[];
                            key: number;
                            value: number;
                        };
                    } | {
                        tag: "plain";
                        value: number;
                    };
                    fallback: _polkadot_api_substrate_bindings.HexString;
                    docs: string[];
                }[];
            } | undefined;
            calls: number | undefined;
            events: number | undefined;
            constants: {
                name: string;
                type: number;
                value: _polkadot_api_substrate_bindings.HexString;
                docs: string[];
            }[];
            errors: number | undefined;
            index: number;
            docs: string[];
        }[];
        extrinsic: {
            version: number;
            address: number;
            call: number;
            signature: number;
            extra: number;
            signedExtensions: {
                identifier: string;
                type: number;
                additionalSigned: number;
            }[];
        };
        type: number;
        apis: {
            name: string;
            methods: {
                name: string;
                inputs: {
                    name: string;
                    type: number;
                }[];
                output: number;
                docs: string[];
            }[];
            docs: string[];
        }[];
        outerEnums: {
            call: number;
            event: number;
            error: number;
        };
        custom: [string, {
            type: number;
            value: _polkadot_api_substrate_bindings.HexString;
        }][];
    } | null>;
    header$: (hash: string | null) => Observable<{
        parentHash: _polkadot_api_substrate_bindings.HexString;
        number: number;
        stateRoot: _polkadot_api_substrate_bindings.HexString;
        extrinsicRoot: _polkadot_api_substrate_bindings.HexString;
        digests: _polkadot_api_substrate_bindings.Enum<{
            type: "consensus";
            value: {
                engine: string;
                payload: _polkadot_api_substrate_bindings.HexString;
            };
        } | {
            type: "seal";
            value: {
                engine: string;
                payload: _polkadot_api_substrate_bindings.HexString;
            };
        } | {
            type: "preRuntime";
            value: {
                engine: string;
                payload: _polkadot_api_substrate_bindings.HexString;
            };
        } | {
            type: "runtimeUpdated";
            value: undefined;
        }>[];
    }>;
    body$: (hash: string) => Observable<string[]>;
    call$: (hash: string | null, fnName: string, callParameters: string) => Observable<string>;
    storage$: <Type extends "hash" | "value" | "closestDescendantMerkleValue" | "descendantsValues" | "descendantsHashes", T>(hash: string | null, type: Type, keyMapper: (ctx: RuntimeContext) => string, childTrie?: string | null | undefined, mapper?: ((data: StorageResult<Type>, ctx: RuntimeContext) => T) | undefined) => Observable<unknown extends T ? StorageResult<Type> : T>;
    storageQueries$: (hash: string | null, queries: StorageItemInput[], childTrie?: string | undefined) => Observable<_polkadot_api_substrate_client.StorageItemResponse>;
    eventsAt$: (hash: string | null) => Observable<SystemEvent$1[]>;
    trackTx$: (tx: string) => Observable<_polkadot_api_substrate_client.TxBestChainBlockIncluded | _polkadot_api_substrate_client.TxFinalized>;
    withRuntime: <T_1>(mapper: (x: T_1) => string) => (source$: Observable<T_1>) => Observable<[T_1, RuntimeContext]>;
    getRuntimeContext$: (hash: string | null) => Observable<RuntimeContext>;
    unfollow: () => void;
};

declare class BlockPrunedError extends Error {
    constructor();
}
declare class NotBestBlockError extends Error {
    constructor();
}

declare const getObservableClient: ({ chainHead, transaction, destroy, }: SubstrateClient) => {
    chainHead$: () => {
        follow$: rxjs.Observable<_polkadot_api_substrate_client.FollowEventWithRuntime>;
        finalized$: rxjs.Observable<BlockInfo>;
        bestBlocks$: rxjs.Observable<BlockInfo[]>;
        runtime$: rxjs.Observable<RuntimeContext | null>;
        metadata$: rxjs.Observable<{
            lookup: {
                id: number;
                path: string[];
                params: {
                    name: string;
                    type: number | undefined;
                }[];
                def: {
                    tag: "composite";
                    value: {
                        name: string | undefined;
                        type: number;
                        typeName: string | undefined;
                        docs: string[];
                    }[];
                } | {
                    tag: "variant";
                    value: {
                        name: string;
                        fields: {
                            name: string | undefined;
                            type: number;
                            typeName: string | undefined;
                            docs: string[];
                        }[];
                        index: number;
                        docs: string[];
                    }[];
                } | {
                    tag: "sequence";
                    value: number;
                } | {
                    tag: "array";
                    value: {
                        len: number;
                        type: number;
                    };
                } | {
                    tag: "tuple";
                    value: number[];
                } | {
                    tag: "primitive";
                    value: {
                        tag: "bool";
                        value: undefined;
                    } | {
                        tag: "char";
                        value: undefined;
                    } | {
                        tag: "str";
                        value: undefined;
                    } | {
                        tag: "u8";
                        value: undefined;
                    } | {
                        tag: "u16";
                        value: undefined;
                    } | {
                        tag: "u32";
                        value: undefined;
                    } | {
                        tag: "u64";
                        value: undefined;
                    } | {
                        tag: "u128";
                        value: undefined;
                    } | {
                        tag: "u256";
                        value: undefined;
                    } | {
                        tag: "i8";
                        value: undefined;
                    } | {
                        tag: "i16";
                        value: undefined;
                    } | {
                        tag: "i32";
                        value: undefined;
                    } | {
                        tag: "i64";
                        value: undefined;
                    } | {
                        tag: "i128";
                        value: undefined;
                    } | {
                        tag: "i256";
                        value: undefined;
                    };
                } | {
                    tag: "compact";
                    value: number;
                } | {
                    tag: "bitSequence";
                    value: {
                        bitStoreType: number;
                        bitOrderType: number;
                    };
                };
                docs: string[];
            }[];
            pallets: {
                name: string;
                storage: {
                    prefix: string;
                    items: {
                        name: string;
                        modifier: number;
                        type: {
                            tag: "map";
                            value: {
                                hashers: ({
                                    tag: "Blake2128";
                                    value: undefined;
                                } | {
                                    tag: "Blake2256";
                                    value: undefined;
                                } | {
                                    tag: "Blake2128Concat";
                                    value: undefined;
                                } | {
                                    tag: "Twox128";
                                    value: undefined;
                                } | {
                                    tag: "Twox256";
                                    value: undefined;
                                } | {
                                    tag: "Twox64Concat";
                                    value: undefined;
                                } | {
                                    tag: "Identity";
                                    value: undefined;
                                })[];
                                key: number;
                                value: number;
                            };
                        } | {
                            tag: "plain";
                            value: number;
                        };
                        fallback: _polkadot_api_substrate_bindings.HexString;
                        docs: string[];
                    }[];
                } | undefined;
                calls: number | undefined;
                events: number | undefined;
                constants: {
                    name: string;
                    type: number;
                    value: _polkadot_api_substrate_bindings.HexString;
                    docs: string[];
                }[];
                errors: number | undefined;
                index: number;
                docs: string[];
            }[];
            extrinsic: {
                version: number;
                address: number;
                call: number;
                signature: number;
                extra: number;
                signedExtensions: {
                    identifier: string;
                    type: number;
                    additionalSigned: number;
                }[];
            };
            type: number;
            apis: {
                name: string;
                methods: {
                    name: string;
                    inputs: {
                        name: string;
                        type: number;
                    }[];
                    output: number;
                    docs: string[];
                }[];
                docs: string[];
            }[];
            outerEnums: {
                call: number;
                event: number;
                error: number;
            };
            custom: [string, {
                type: number;
                value: _polkadot_api_substrate_bindings.HexString;
            }][];
        } | null>;
        header$: (hash: string | null) => rxjs.Observable<{
            parentHash: _polkadot_api_substrate_bindings.HexString;
            number: number;
            stateRoot: _polkadot_api_substrate_bindings.HexString;
            extrinsicRoot: _polkadot_api_substrate_bindings.HexString;
            digests: _polkadot_api_substrate_bindings.Enum<{
                type: "consensus";
                value: {
                    engine: string;
                    payload: _polkadot_api_substrate_bindings.HexString;
                };
            } | {
                type: "seal";
                value: {
                    engine: string;
                    payload: _polkadot_api_substrate_bindings.HexString;
                };
            } | {
                type: "preRuntime";
                value: {
                    engine: string;
                    payload: _polkadot_api_substrate_bindings.HexString;
                };
            } | {
                type: "runtimeUpdated";
                value: undefined;
            }>[];
        }>;
        body$: (hash: string) => rxjs.Observable<string[]>;
        call$: (hash: string | null, fnName: string, callParameters: string) => rxjs.Observable<string>;
        storage$: <Type extends "hash" | "value" | "closestDescendantMerkleValue" | "descendantsValues" | "descendantsHashes", T>(hash: string | null, type: Type, keyMapper: (ctx: RuntimeContext) => string, childTrie?: string | null | undefined, mapper?: ((data: _polkadot_api_substrate_client.StorageResult<Type>, ctx: RuntimeContext) => T) | undefined) => rxjs.Observable<unknown extends T ? _polkadot_api_substrate_client.StorageResult<Type> : T>;
        storageQueries$: (hash: string | null, queries: _polkadot_api_substrate_client.StorageItemInput[], childTrie?: string | undefined) => rxjs.Observable<_polkadot_api_substrate_client.StorageItemResponse>;
        eventsAt$: (hash: string | null) => rxjs.Observable<SystemEvent$1[]>;
        trackTx$: (tx: string) => rxjs.Observable<_polkadot_api_substrate_client.TxBestChainBlockIncluded | _polkadot_api_substrate_client.TxFinalized>;
        withRuntime: <T_1>(mapper: (x: T_1) => string) => (source$: rxjs.Observable<T_1>) => rxjs.Observable<[T_1, RuntimeContext]>;
        getRuntimeContext$: (hash: string | null) => rxjs.Observable<RuntimeContext>;
        unfollow: () => void;
    };
    tx$: (transaction: string) => rxjs.Observable<_polkadot_api_substrate_client.TxBestChainBlockIncluded | _polkadot_api_substrate_client.TxFinalized | _polkadot_api_substrate_client.TxValidated | _polkadot_api_substrate_client.TxBroadcasted | _polkadot_api_substrate_client.TxInvalid | _polkadot_api_substrate_client.TxDropped>;
    destroy: _polkadot_api_substrate_client.UnsubscribeFn;
};

type CallOptions$1 = Partial<{
    at: string;
    signal: AbortSignal;
}>;
type WithCallOptions<Args extends Array<any>> = [
    ...args: Args,
    options?: CallOptions$1
];
type PossibleParents<A extends Array<any>> = A extends [...infer Left, any] ? Left | PossibleParents<Left> : [];
type StorageEntryWithoutKeys<Payload> = {
    getValue: (options?: CallOptions$1) => Promise<Payload>;
    watchValue: () => Observable<Payload>;
};
type StorageEntryWithKeys<Args extends Array<any>, Payload> = {
    getValue: (...args: [...WithCallOptions<Args>]) => Promise<Payload>;
    watchValue: (...args: Args) => Observable<Payload>;
    getValues: (keys: Array<[...Args]>, options?: CallOptions$1) => Promise<Array<Payload>>;
    getEntries: (...args: WithCallOptions<PossibleParents<Args>>) => Promise<Array<{
        keyArgs: Args;
        value: NonNullable<Payload>;
    }>>;
};
type StorageEntry<Args extends Array<any>, Payload> = Args extends [] ? StorageEntryWithoutKeys<Payload> : StorageEntryWithKeys<Args, Payload>;

type TxSuccess = {
    ok: boolean;
    events: Array<SystemEvent$1["event"]>;
};
type TxFunction<Asset> = (from: SS58String | Uint8Array, hintedSignExtensions?: Partial<void extends Asset ? {
    tip: bigint;
    mortal: {
        mortal: false;
    } | {
        mortal: true;
        period: number;
    };
} : {
    tip: bigint;
    mortal: {
        mortal: false;
    } | {
        mortal: true;
        period: number;
    };
    asset: Asset;
}>) => Promise<TxSuccess>;
type TxObservable<Asset> = (from: SS58String | Uint8Array, hintedSignExtensions?: Partial<void extends Asset ? {
    tip: bigint;
    mortal: {
        mortal: false;
    } | {
        mortal: true;
        period: number;
    };
} : {
    tip: bigint;
    mortal: {
        mortal: false;
    } | {
        mortal: true;
        period: number;
    };
    asset: Asset;
}>) => Observable<TxValidated | TxBroadcasted | TxBestChainBlockIncluded | (TxFinalized & TxSuccess)>;
type TxCall = () => Promise<Binary>;
type TxSigned<Asset> = (from: SS58String | Uint8Array, hintedSignExtensions?: Partial<void extends Asset ? {
    tip: bigint;
    mortal: {
        mortal: false;
    } | {
        mortal: true;
        period: number;
    };
} : {
    tip: bigint;
    mortal: {
        mortal: false;
    } | {
        mortal: true;
        period: number;
    };
    asset: Asset;
}>) => Promise<string>;
type Transaction<Arg extends {} | undefined, Pallet extends string, Name extends string, Asset> = {
    callData: Enum<{
        type: Pallet;
        value: Enum<{
            type: Name;
            value: Arg;
        }>;
    }>;
    getEncodedData: TxCall;
    getTx: TxSigned<Asset>;
    submit: TxFunction<Asset>;
    submit$: TxObservable<Asset>;
};

type EventPhase = {
    type: "ApplyExtrinsic";
    value: number;
} | {
    type: "Finalization";
} | {
    type: "Initialization";
};
type EvWatch<T> = (filter?: (value: T) => boolean) => Observable<{
    meta: {
        block: BlockInfo;
        phase: EventPhase;
    };
    payload: T;
}>;
type EvPull<T> = () => Promise<Array<{
    meta: {
        block: BlockInfo;
        phase: EventPhase;
    };
    payload: T;
}>>;
type EvFilter<T> = (collection: SystemEvent["event"][]) => Array<T>;
type EvClient<T> = {
    watch: EvWatch<T>;
    pull: EvPull<T>;
    filter: EvFilter<T>;
};
type SystemEvent = {
    phase: EventPhase;
    event: {
        type: string;
        value: {
            type: string;
            value: any;
        };
    };
    topics: Array<any>;
};

type StorageRuntime<A extends Record<string, Record<string, {
    KeyArgs: Array<any>;
    Value: any;
    IsOptional: false | true;
} | unknown>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: boolean;
    };
};
type TxRuntime<A extends Record<string, Record<string, Array<any> | unknown>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: boolean;
    };
};
type PlainRuntime<A extends Record<string, Record<string, any>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: boolean;
    };
};
interface Runtime<D extends Descriptors> {
    constants: ConstFromDescriptors<D>;
    isCompatible: (cb: (api: {
        query: StorageRuntime<QueryFromDescriptors<D>>;
        tx: TxRuntime<TxFromDescriptors<D>>;
        event: PlainRuntime<EventsFromDescriptors<D>>;
        const: PlainRuntime<ConstFromDescriptors<D>>;
    }) => boolean) => boolean;
}
type RuntimeApi<T extends Descriptors> = Observable<Runtime<T>> & {
    latest: () => Promise<Runtime<T>>;
};

type HintedSignedExtensions = Partial<{
    tip: bigint;
    mortality: {
        mortal: false;
    } | {
        mortal: true;
        period: number;
    };
    asset: Uint8Array;
}>;
type CreateTx = (publicKey: Uint8Array, callData: Uint8Array, hintedSignedExtensions?: HintedSignedExtensions) => Promise<Uint8Array>;
interface JsonRpcProvider {
    send: (message: string) => void;
    createTx: CreateTx;
    disconnect: () => void;
}
type Connect = (onMessage: (value: string) => void) => JsonRpcProvider;
type StorageApi<A extends Record<string, Record<string, {
    KeyArgs: Array<any>;
    Value: any;
    IsOptional: false | true;
} | unknown>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: A[K][KK] extends {
            KeyArgs: Array<any>;
            Value: any;
            IsOptional: false | true;
        } ? StorageEntry<A[K][KK]["KeyArgs"], A[K][KK]["IsOptional"] extends true ? A[K][KK]["Value"] | undefined : A[K][KK]["Value"]> : unknown;
    };
};
type CallOptions = Partial<{
    at: string;
    signal: AbortSignal;
}>;
type RuntimeCallsApi<A extends Record<string, Record<string, RuntimeDescriptor<Array<any>, any>>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: A[K][KK] extends RuntimeDescriptor<infer Args, infer Value> ? (...args: Args["length"] extends 0 ? [options?: CallOptions] : [...args: Anonymize<Args>, options?: CallOptions]) => Promise<Anonymize<Value>> : unknown;
    };
};
type TxApi<A extends Record<string, Record<string, any>>, Asset> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: A[K][KK] extends {} | undefined ? (...args: A[K][KK] extends undefined ? [] : [data: A[K][KK]]) => Transaction<A[K][KK], K & string, KK & string, Asset> : unknown;
    };
};
type EvApi<A extends Record<string, Record<string, any>>> = {
    [K in keyof A]: {
        [KK in keyof A[K]]: EvClient<A[K][KK]>;
    };
};
type TypedApi<D extends Descriptors> = {
    query: StorageApi<QueryFromDescriptors<D>>;
    tx: TxApi<TxFromDescriptors<D>, Anonymize<D["asset"]["_type"]>>;
    event: EvApi<EventsFromDescriptors<D>>;
    apis: RuntimeCallsApi<D["apis"]>;
    runtime: RuntimeApi<D>;
};
type CreateClient = (connect: Connect) => {
    finalized$: Observable<BlockInfo>;
    bestBlocks$: Observable<BlockInfo[]>;
    getBlockHeader: (hash?: string) => Promise<BlockHeader>;
    getBlockBody: (hash: string) => Observable<HexString[]>;
    getTypedApi: <D extends Descriptors>(descriptors: D) => TypedApi<D>;
    destroy: () => void;
};

declare const createClient: CreateClient;

export { type BlockInfo, BlockPrunedError, type EventPhase, NotBestBlockError, type RuntimeContext, type SystemEvent$1 as SystemEvent, createClient, getChainHead$, getObservableClient };
