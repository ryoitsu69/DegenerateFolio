{"version":3,"sources":["../../src/index.ts","../../src/hex.ts","../../src/mapObject.ts","../../src/mergeUint8.ts","../../src/noop.ts","../../src/AbortError.ts"],"sourcesContent":["export { fromHex, toHex } from \"./hex\"\nexport { mapObject, mapStringRecord } from \"./mapObject\"\nexport { mergeUint8 } from \"./mergeUint8\"\nexport { noop } from \"./noop\"\nexport { AbortError } from \"./AbortError\"\n","// https://jsben.ch/uWZw3\nconst HEX_STR = \"0123456789abcdef\"\nexport function toHex(bytes: Uint8Array): string {\n  const result = new Array<string>(bytes.length + 1)\n\n  result[0] = \"0x\"\n\n  for (let i = 0; i < bytes.length; ) {\n    const b = bytes[i++]\n    result[i] = HEX_STR[b >> 4] + HEX_STR[b & 15]\n  }\n\n  return result.join(\"\")\n}\n\n// https://jsben.ch/URe1X\nconst HEX_MAP: Record<string, number> = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  a: 10,\n  b: 11,\n  c: 12,\n  d: 13,\n  e: 14,\n  f: 15,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15,\n}\nexport function fromHex(hexString: string): Uint8Array {\n  const isOdd = hexString.length % 2\n  const base = (hexString[1] === \"x\" ? 2 : 0) + isOdd\n  const nBytes = (hexString.length - base) / 2 + isOdd\n  const bytes = new Uint8Array(nBytes)\n\n  if (isOdd) bytes[0] = 0 | HEX_MAP[hexString[2]]\n\n  for (let i = 0; i < nBytes; ) {\n    const idx = base + i * 2\n    const a = HEX_MAP[hexString[idx]]\n    const b = HEX_MAP[hexString[idx + 1]]\n    bytes[isOdd + i++] = (a << 4) | b\n  }\n\n  return bytes\n}\n","export function mapObject<K extends string | number | symbol, I, O>(\n  input: Record<K, I>,\n  mapper: (i: I, k: K) => O,\n): Record<K, O>\n\nexport function mapObject<K extends string | number | symbol, I, O>(\n  input: Record<K, I>,\n  mapper: (i: I, k?: K) => O,\n): Record<K, O> {\n  return Object.fromEntries(\n    Object.entries(input).map(\n      ([key, value]: any) => [key, mapper(value, key)] as const,\n    ),\n  ) as any\n}\n\nexport type StringRecord<T> = {\n  [Sym: symbol]: never\n  [Num: number]: never\n  [Str: string]: T\n}\n\nexport const mapStringRecord = <I, O>(\n  input: StringRecord<I>,\n  mapper: (value: I, key: string) => O,\n): StringRecord<O> =>\n  Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [key, mapper(value, key)]),\n  ) as StringRecord<O>\n","export const mergeUint8 = (...inputs: Array<Uint8Array>): Uint8Array => {\n  const totalLen = inputs.reduce((acc, a) => acc + a.byteLength, 0)\n  const result = new Uint8Array(totalLen)\n\n  for (let idx = 0, at = 0; idx < inputs.length; idx++) {\n    const current = inputs[idx]\n    result.set(current, at)\n    at += current.byteLength\n  }\n\n  return result\n}\n","export const noop: () => void = Function.prototype as any\n","export class AbortError extends Error {\n  constructor() {\n    super(\"Abort Error\")\n    this.name = \"AbortError\"\n  }\n}\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,EAAA,YAAAC,EAAA,cAAAC,EAAA,oBAAAC,EAAA,eAAAC,EAAA,SAAAC,EAAA,UAAAC,IAAA,eAAAC,EAAAT,GCCA,IAAMU,EAAU,mBACT,SAASC,EAAMC,EAA2B,CAC/C,IAAMC,EAAS,IAAI,MAAcD,EAAM,OAAS,CAAC,EAEjDC,EAAO,CAAC,EAAI,KAEZ,QAASC,EAAI,EAAGA,EAAIF,EAAM,QAAU,CAClC,IAAMG,EAAIH,EAAME,GAAG,EACnBD,EAAOC,CAAC,EAAIJ,EAAQK,GAAK,CAAC,EAAIL,EAAQK,EAAI,EAAE,CAC9C,CAEA,OAAOF,EAAO,KAAK,EAAE,CACvB,CAGA,IAAMG,EAAkC,CACtC,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,EACL,EACO,SAASC,EAAQC,EAA+B,CACrD,IAAMC,EAAQD,EAAU,OAAS,EAC3BE,GAAQF,EAAU,CAAC,IAAM,IAAM,EAAI,GAAKC,EACxCE,GAAUH,EAAU,OAASE,GAAQ,EAAID,EACzCP,EAAQ,IAAI,WAAWS,CAAM,EAE/BF,IAAOP,EAAM,CAAC,EAAI,EAAII,EAAQE,EAAU,CAAC,CAAC,GAE9C,QAASJ,EAAI,EAAGA,EAAIO,GAAU,CAC5B,IAAMC,EAAMF,EAAON,EAAI,EACjBS,EAAIP,EAAQE,EAAUI,CAAG,CAAC,EAC1BP,EAAIC,EAAQE,EAAUI,EAAM,CAAC,CAAC,EACpCV,EAAMO,EAAQL,GAAG,EAAKS,GAAK,EAAKR,CAClC,CAEA,OAAOH,CACT,CCnDO,SAASY,EACdC,EACAC,EACc,CACd,OAAO,OAAO,YACZ,OAAO,QAAQD,CAAK,EAAE,IACpB,CAAC,CAACE,EAAKC,CAAK,IAAW,CAACD,EAAKD,EAAOE,EAAOD,CAAG,CAAC,CACjD,CACF,CACF,CAQO,IAAME,EAAkB,CAC7BJ,EACAC,IAEA,OAAO,YACL,OAAO,QAAQD,CAAK,EAAE,IAAI,CAAC,CAACE,EAAKC,CAAK,IAAM,CAACD,EAAKD,EAAOE,EAAOD,CAAG,CAAC,CAAC,CACvE,EC5BK,IAAMG,EAAa,IAAIC,IAA0C,CACtE,IAAMC,EAAWD,EAAO,OAAO,CAACE,EAAKC,IAAMD,EAAMC,EAAE,WAAY,CAAC,EAC1DC,EAAS,IAAI,WAAWH,CAAQ,EAEtC,QAASI,EAAM,EAAGC,EAAK,EAAGD,EAAML,EAAO,OAAQK,IAAO,CACpD,IAAME,EAAUP,EAAOK,CAAG,EAC1BD,EAAO,IAAIG,EAASD,CAAE,EACtBA,GAAMC,EAAQ,UAChB,CAEA,OAAOH,CACT,ECXO,IAAMI,EAAmB,SAAS,UCAlC,IAAMC,EAAN,cAAyB,KAAM,CACpC,aAAc,CACZ,MAAM,aAAa,EACnB,KAAK,KAAO,YACd,CACF","names":["src_exports","__export","AbortError","fromHex","mapObject","mapStringRecord","mergeUint8","noop","toHex","__toCommonJS","HEX_STR","toHex","bytes","result","i","b","HEX_MAP","fromHex","hexString","isOdd","base","nBytes","idx","a","mapObject","input","mapper","key","value","mapStringRecord","mergeUint8","inputs","totalLen","acc","a","result","idx","at","current","noop","AbortError"]}