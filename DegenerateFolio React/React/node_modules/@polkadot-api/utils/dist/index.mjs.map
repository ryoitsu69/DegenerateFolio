{"version":3,"sources":["../src/hex.ts","../src/mapObject.ts","../src/mergeUint8.ts","../src/noop.ts","../src/AbortError.ts"],"sourcesContent":["// https://jsben.ch/uWZw3\nconst HEX_STR = \"0123456789abcdef\"\nexport function toHex(bytes: Uint8Array): string {\n  const result = new Array<string>(bytes.length + 1)\n\n  result[0] = \"0x\"\n\n  for (let i = 0; i < bytes.length; ) {\n    const b = bytes[i++]\n    result[i] = HEX_STR[b >> 4] + HEX_STR[b & 15]\n  }\n\n  return result.join(\"\")\n}\n\n// https://jsben.ch/URe1X\nconst HEX_MAP: Record<string, number> = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  a: 10,\n  b: 11,\n  c: 12,\n  d: 13,\n  e: 14,\n  f: 15,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15,\n}\nexport function fromHex(hexString: string): Uint8Array {\n  const isOdd = hexString.length % 2\n  const base = (hexString[1] === \"x\" ? 2 : 0) + isOdd\n  const nBytes = (hexString.length - base) / 2 + isOdd\n  const bytes = new Uint8Array(nBytes)\n\n  if (isOdd) bytes[0] = 0 | HEX_MAP[hexString[2]]\n\n  for (let i = 0; i < nBytes; ) {\n    const idx = base + i * 2\n    const a = HEX_MAP[hexString[idx]]\n    const b = HEX_MAP[hexString[idx + 1]]\n    bytes[isOdd + i++] = (a << 4) | b\n  }\n\n  return bytes\n}\n","export function mapObject<K extends string | number | symbol, I, O>(\n  input: Record<K, I>,\n  mapper: (i: I, k: K) => O,\n): Record<K, O>\n\nexport function mapObject<K extends string | number | symbol, I, O>(\n  input: Record<K, I>,\n  mapper: (i: I, k?: K) => O,\n): Record<K, O> {\n  return Object.fromEntries(\n    Object.entries(input).map(\n      ([key, value]: any) => [key, mapper(value, key)] as const,\n    ),\n  ) as any\n}\n\nexport type StringRecord<T> = {\n  [Sym: symbol]: never\n  [Num: number]: never\n  [Str: string]: T\n}\n\nexport const mapStringRecord = <I, O>(\n  input: StringRecord<I>,\n  mapper: (value: I, key: string) => O,\n): StringRecord<O> =>\n  Object.fromEntries(\n    Object.entries(input).map(([key, value]) => [key, mapper(value, key)]),\n  ) as StringRecord<O>\n","export const mergeUint8 = (...inputs: Array<Uint8Array>): Uint8Array => {\n  const totalLen = inputs.reduce((acc, a) => acc + a.byteLength, 0)\n  const result = new Uint8Array(totalLen)\n\n  for (let idx = 0, at = 0; idx < inputs.length; idx++) {\n    const current = inputs[idx]\n    result.set(current, at)\n    at += current.byteLength\n  }\n\n  return result\n}\n","export const noop: () => void = Function.prototype as any\n","export class AbortError extends Error {\n  constructor() {\n    super(\"Abort Error\")\n    this.name = \"AbortError\"\n  }\n}\n"],"mappings":";AACA,IAAM,UAAU;AACT,SAAS,MAAM,OAA2B;AAC/C,QAAM,SAAS,IAAI,MAAc,MAAM,SAAS,CAAC;AAEjD,SAAO,CAAC,IAAI;AAEZ,WAAS,IAAI,GAAG,IAAI,MAAM,UAAU;AAClC,UAAM,IAAI,MAAM,GAAG;AACnB,WAAO,CAAC,IAAI,QAAQ,KAAK,CAAC,IAAI,QAAQ,IAAI,EAAE;AAAA,EAC9C;AAEA,SAAO,OAAO,KAAK,EAAE;AACvB;AAGA,IAAM,UAAkC;AAAA,EACtC,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AACL;AACO,SAAS,QAAQ,WAA+B;AACrD,QAAM,QAAQ,UAAU,SAAS;AACjC,QAAM,QAAQ,UAAU,CAAC,MAAM,MAAM,IAAI,KAAK;AAC9C,QAAM,UAAU,UAAU,SAAS,QAAQ,IAAI;AAC/C,QAAM,QAAQ,IAAI,WAAW,MAAM;AAEnC,MAAI;AAAO,UAAM,CAAC,IAAI,IAAI,QAAQ,UAAU,CAAC,CAAC;AAE9C,WAAS,IAAI,GAAG,IAAI,UAAU;AAC5B,UAAM,MAAM,OAAO,IAAI;AACvB,UAAM,IAAI,QAAQ,UAAU,GAAG,CAAC;AAChC,UAAM,IAAI,QAAQ,UAAU,MAAM,CAAC,CAAC;AACpC,UAAM,QAAQ,GAAG,IAAK,KAAK,IAAK;AAAA,EAClC;AAEA,SAAO;AACT;;;ACnDO,SAAS,UACd,OACA,QACc;AACd,SAAO,OAAO;AAAA,IACZ,OAAO,QAAQ,KAAK,EAAE;AAAA,MACpB,CAAC,CAAC,KAAK,KAAK,MAAW,CAAC,KAAK,OAAO,OAAO,GAAG,CAAC;AAAA,IACjD;AAAA,EACF;AACF;AAQO,IAAM,kBAAkB,CAC7B,OACA,WAEA,OAAO;AAAA,EACL,OAAO,QAAQ,KAAK,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,OAAO,OAAO,GAAG,CAAC,CAAC;AACvE;;;AC5BK,IAAM,aAAa,IAAI,WAA0C;AACtE,QAAM,WAAW,OAAO,OAAO,CAAC,KAAK,MAAM,MAAM,EAAE,YAAY,CAAC;AAChE,QAAM,SAAS,IAAI,WAAW,QAAQ;AAEtC,WAAS,MAAM,GAAG,KAAK,GAAG,MAAM,OAAO,QAAQ,OAAO;AACpD,UAAM,UAAU,OAAO,GAAG;AAC1B,WAAO,IAAI,SAAS,EAAE;AACtB,UAAM,QAAQ;AAAA,EAChB;AAEA,SAAO;AACT;;;ACXO,IAAM,OAAmB,SAAS;;;ACAlC,IAAM,aAAN,cAAyB,MAAM;AAAA,EACpC,cAAc;AACZ,UAAM,aAAa;AACnB,SAAK,OAAO;AAAA,EACd;AACF;","names":[]}