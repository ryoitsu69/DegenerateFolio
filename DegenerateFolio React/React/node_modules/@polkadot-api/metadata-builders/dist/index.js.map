{"version":3,"sources":["../src/index.ts","../src/lookups.ts","../src/with-cache.ts","../src/static-builder.ts","../src/dynamic-builder.ts","../src/checksum-builder.ts","../src/view-builder/view-builder.ts","../src/view-builder/shaped-decoders.ts"],"sourcesContent":["export * from \"./lookups\"\nexport * from \"./static-builder\"\nexport * from \"./dynamic-builder\"\nexport * from \"./checksum-builder\"\nexport * from \"./view-builder\"\n","import type { StringRecord, V14Lookup } from \"@polkadot-api/substrate-bindings\"\n\nexport type VoidVar = { type: \"primitive\"; value: \"_void\" }\nconst voidVar: VoidVar = { type: \"primitive\", value: \"_void\" }\n\nexport type MetadataPrimitives =\n  | \"bool\"\n  | \"char\"\n  | \"str\"\n  | \"u8\"\n  | \"u16\"\n  | \"u32\"\n  | \"u64\"\n  | \"u128\"\n  | \"u256\"\n  | \"i8\"\n  | \"i16\"\n  | \"i32\"\n  | \"i64\"\n  | \"i128\"\n  | \"i256\"\n\nexport type PrimitiveVar =\n  | {\n      type: \"primitive\"\n      value: MetadataPrimitives\n    }\n  | VoidVar\n\nexport type CompactVar = { type: \"compact\"; isBig: boolean }\nexport type BitSequenceVar = { type: \"bitSequence\" }\nexport type AccountId32 = { type: \"AccountId32\" }\nexport type TerminalVar =\n  | PrimitiveVar\n  | CompactVar\n  | BitSequenceVar\n  | AccountId32\n\nexport type TupleVar = {\n  type: \"tuple\"\n  value: LookupEntry[]\n  innerDocs: Array<string[]>\n}\nexport type StructVar = {\n  type: \"struct\"\n  value: StringRecord<LookupEntry>\n  innerDocs: StringRecord<string[]>\n}\nexport type EnumVar = {\n  type: \"enum\"\n  value: StringRecord<(TupleVar | StructVar | VoidVar) & { idx: number }>\n  innerDocs: StringRecord<string[]>\n}\nexport type OptionVar = {\n  type: \"option\"\n  value: LookupEntry\n}\nexport type ResultVar = {\n  type: \"result\"\n  value: { ok: LookupEntry; ko: LookupEntry }\n}\nexport type SequenceVar = {\n  type: \"sequence\"\n  value: LookupEntry\n}\nexport type ArrayVar = {\n  type: \"array\"\n  value: LookupEntry\n  len: number\n}\n\nexport type ComposedVar =\n  | TupleVar\n  | StructVar\n  | SequenceVar\n  | ArrayVar\n  | OptionVar\n  | ResultVar\n  | EnumVar\n\nexport type Var = TerminalVar | ComposedVar\n\nexport type LookupEntry = {\n  id: number\n} & Var\n\nexport const getLookupFn = (lookupData: V14Lookup) => {\n  const lookups = new Map<number, LookupEntry>()\n  const from = new Set<number>()\n\n  const withCache = (\n    fn: (id: number) => Var,\n  ): ((id: number) => LookupEntry) => {\n    return (id) => {\n      let entry = lookups.get(id)\n\n      if (entry) return entry\n\n      if (from.has(id)) {\n        const entry = {\n          id,\n        } as LookupEntry\n\n        lookups.set(id, entry)\n        return entry\n      }\n\n      from.add(id)\n      const value = fn(id)\n      entry = lookups.get(id)\n\n      if (entry) {\n        Object.assign(entry, value)\n      } else {\n        entry = {\n          id,\n          ...value,\n        }\n        lookups.set(id, entry!)\n      }\n      from.delete(id)\n      return entry\n    }\n  }\n\n  let isAccountId32SearchOn = true\n  const getLookupEntryDef = withCache((id): Var => {\n    const { def, path, params } = lookupData[id]\n\n    if (def.tag === \"composite\") {\n      if (def.value.length === 0) return voidVar\n\n      // used to be a \"pointer\"\n      if (def.value.length === 1) {\n        if (\n          isAccountId32SearchOn &&\n          path.join(\",\") === \"sp_core,crypto,AccountId32\"\n        ) {\n          isAccountId32SearchOn = false\n          return { type: \"AccountId32\" }\n        }\n        return getLookupEntryDef(def.value[0].type as number)\n      }\n\n      let allKey = true\n\n      const values: Record<string | number, LookupEntry> = {}\n      const innerDocs: Record<string | number, string[]> = {}\n      def.value.forEach((x, idx) => {\n        allKey = allKey && !!x.name\n        const key = x.name || idx\n        values[key] = getLookupEntryDef(x.type)\n        innerDocs[key] = x.docs\n      })\n\n      return allKey\n        ? {\n            type: \"struct\",\n            value: values as StringRecord<LookupEntry>,\n            innerDocs: innerDocs as StringRecord<string[]>,\n          }\n        : {\n            type: \"tuple\",\n            value: Object.values(values),\n            innerDocs: Object.values(innerDocs),\n          }\n    }\n\n    if (def.tag === \"variant\") {\n      if (\n        path.length === 1 &&\n        path[0] === \"Option\" &&\n        params.length === 1 &&\n        params[0].name === \"T\"\n      ) {\n        const value = getLookupEntryDef(params[0].type!)\n        return value.type === \"primitive\" && value.value === \"_void\"\n          ? // Option(_void) would return a Codec<undefined> which makes no sense\n            // Therefore, we better treat it as a bool\n            { type: \"primitive\", value: \"bool\" }\n          : {\n              type: \"option\",\n              value,\n            }\n      }\n\n      if (\n        path.length === 1 &&\n        path[0] === \"Result\" &&\n        params.length === 2 &&\n        params[0].name === \"T\" &&\n        params[1].name === \"E\"\n      ) {\n        return {\n          type: \"result\",\n          value: {\n            ok: getLookupEntryDef(params[0].type as number),\n            ko: getLookupEntryDef(params[1].type as number),\n          },\n        }\n      }\n      if (def.value.length === 0) return voidVar\n\n      const enumValue: StringRecord<EnumVar[\"value\"][keyof EnumVar[\"value\"]]> =\n        {}\n      const enumDocs: StringRecord<string[]> = {}\n\n      def.value.forEach((x) => {\n        const key = x.name\n        enumDocs[key] = x.docs\n\n        if (x.fields.length === 0) {\n          enumValue[key] = { ...voidVar, idx: x.index }\n          return\n        }\n\n        let allKey = true\n\n        const values: Record<string | number, LookupEntry> = {}\n        const innerDocs: Record<string | number, string[]> = {}\n\n        x.fields.forEach((x, idx) => {\n          allKey = allKey && !!x.name\n          const key = x.name || idx\n          values[key] = getLookupEntryDef(x.type as number)\n          innerDocs[key] = x.docs\n        })\n\n        enumValue[key] = allKey\n          ? {\n              type: \"struct\",\n              value: values as StringRecord<LookupEntry>,\n              innerDocs: innerDocs as StringRecord<string[]>,\n              idx: x.index,\n            }\n          : {\n              type: \"tuple\",\n              value: Object.values(values),\n              innerDocs: Object.values(innerDocs),\n              idx: x.index,\n            }\n      })\n\n      return {\n        type: \"enum\",\n        value: enumValue,\n        innerDocs: enumDocs,\n      }\n    }\n\n    if (def.tag === \"sequence\") {\n      const value = getLookupEntryDef(def.value as number)\n      return {\n        type: \"sequence\",\n        value,\n      }\n    }\n\n    if (def.tag === \"array\") {\n      const value = getLookupEntryDef(def.value.type as number)\n      return {\n        type: \"array\",\n        value,\n        len: def.value.len,\n      }\n    }\n\n    if (def.tag === \"tuple\") {\n      if (def.value.length === 0) return voidVar\n\n      // use to be a \"pointer\"\n      if (def.value.length === 1)\n        return getLookupEntryDef(def.value[0] as number)\n\n      const value = def.value.map((x) => getLookupEntryDef(x as number))\n      const innerDocs = def.value.map((x) => lookupData[x].docs)\n\n      return {\n        type: \"tuple\",\n        value,\n        innerDocs,\n      }\n    }\n\n    if (def.tag === \"primitive\") {\n      return {\n        type: \"primitive\",\n        value: def.value.tag,\n      }\n    }\n\n    if (def.tag === \"compact\") {\n      const translated = getLookupEntryDef(def.value as number) as PrimitiveVar\n      const isBig = Number(translated.value.slice(1)) > 32\n\n      return {\n        type: \"compact\",\n        isBig,\n      }\n    }\n\n    // bitSequence\n    return {\n      type: def.tag,\n    }\n  })\n\n  return getLookupEntryDef\n}\n","import { LookupEntry } from \"./lookups\"\n\ntype FnWithStack<Other extends Array<any>, T> = (\n  input: LookupEntry,\n  cache: Map<number, T>,\n  stack: Set<number>,\n  ...rest: Other\n) => T\n\nexport const withCache =\n  <Other extends Array<any>, T>(\n    fn: FnWithStack<Other, T>,\n    onEnterCircular: (\n      cacheGetter: () => T,\n      circular: LookupEntry,\n      ...rest: Other\n    ) => T,\n    onExitCircular: (\n      outter: T,\n      inner: T,\n      circular: LookupEntry,\n      ...rest: Other\n    ) => T,\n  ): FnWithStack<Other, T> =>\n  (input, cache, stack, ...rest) => {\n    const { id } = input\n    if (cache.has(id)) return cache.get(id)!\n\n    if (stack.has(id)) {\n      const res = onEnterCircular(() => cache.get(id)!, input, ...rest)\n      cache.set(id, res)\n      return res\n    }\n\n    stack.add(id)\n    let result = fn(input, cache, stack, ...rest)\n    stack.delete(id)\n\n    if (cache.has(id))\n      result = onExitCircular(result, cache.get(id)!, input, ...rest)\n\n    cache.set(id, result)\n    return result\n  }\n","import { StringRecord, V15 } from \"@polkadot-api/substrate-bindings\"\nimport { LookupEntry, getLookupFn } from \"./lookups\"\nimport { withCache } from \"./with-cache\"\n\ntype MetadataPrimitives =\n  | \"bool\"\n  | \"char\"\n  | \"str\"\n  | \"u8\"\n  | \"u16\"\n  | \"u32\"\n  | \"u64\"\n  | \"u128\"\n  | \"u256\"\n  | \"i8\"\n  | \"i16\"\n  | \"i32\"\n  | \"i64\"\n  | \"i128\"\n  | \"i256\"\n\nexport const primitiveTypes: Record<\n  MetadataPrimitives | \"_void\" | \"compactNumber\" | \"compactBn\" | \"bitSequence\",\n  string\n> = {\n  _void: \"undefined\",\n  bool: \"boolean\",\n  char: \"string\",\n  str: \"string\",\n  u8: \"number\",\n  u16: \"number\",\n  u32: \"number\",\n  u64: \"bigint\",\n  u128: \"bigint\",\n  u256: \"bigint\",\n  i8: \"number\",\n  i16: \"number\",\n  i32: \"number\",\n  i64: \"bigint\",\n  i128: \"bigint\",\n  i256: \"bigint\",\n  compactNumber: \"number\",\n  compactBn: \"bigint\",\n  bitSequence: \"{bitsLen: number, bytes: Uint8Array}\",\n}\n\nexport interface Variable {\n  id: string\n  types: string\n  value: string\n  directDependencies: Set<string>\n}\n\nexport interface CodeDeclarations {\n  imports: Set<string>\n  typeImports: Set<string>\n  enums: Map<string, string>\n  variables: Map<string, Variable>\n}\n\nconst toCamelCase = (...parts: string[]): string =>\n  parts.map((part) => part[0].toUpperCase() + part.slice(1)).join(\"\")\n\nconst getTypes = (varName: string) =>\n  primitiveTypes[varName as keyof typeof primitiveTypes] ?? varName\n\nconst _buildSyntax = (\n  input: LookupEntry,\n  cache: Map<number, string>,\n  stack: Set<number>,\n  declarations: CodeDeclarations,\n  getVarName: (id: number, ...post: string[]) => string,\n): string => {\n  if (input.type === \"primitive\") {\n    declarations.imports.add(input.value)\n    return input.value\n  }\n\n  if (input.type === \"AccountId32\") {\n    declarations.imports.add(\"AccountId\")\n    const id = \"_accountId\"\n    declarations.variables.set(id, {\n      id,\n      value: `AccountId()`,\n      types: \"SS58String\",\n      directDependencies: new Set<string>(),\n    })\n    declarations.typeImports.add(\"SS58String\")\n    return id\n  }\n\n  if (input.type === \"compact\") {\n    const importVal = input.isBig ? \"compactBn\" : \"compactNumber\"\n    declarations.imports.add(importVal)\n    return importVal\n  }\n\n  if (input.type === \"bitSequence\") {\n    declarations.imports.add(input.type)\n    return input.type\n  }\n\n  if (\n    input.type === \"sequence\" &&\n    input.value.type === \"primitive\" &&\n    input.value.value === \"u8\"\n  ) {\n    declarations.imports.add(\"Bin\")\n    declarations.typeImports.add(\"HexString\")\n    declarations.typeImports.add(\"Binary\")\n    const variable = {\n      id: \"_bytesSeq\",\n      value: \"Bin()\",\n      types: \"Binary\",\n      directDependencies: new Set<string>(),\n    }\n\n    if (!declarations.variables.has(variable.id)) {\n      declarations.variables.set(variable.id, variable)\n    }\n\n    return variable.id\n  }\n\n  if (declarations.variables.has(getVarName(input.id, \"circular\")))\n    return getVarName(input.id, \"circular\")\n\n  if (declarations.variables.has(getVarName(input.id)))\n    return getVarName(input.id)\n\n  const buildNextSyntax = (nextInput: LookupEntry): string =>\n    buildSyntax(nextInput, cache, stack, declarations, getVarName)\n\n  const buildVector = (id: string, inner: LookupEntry, len?: number) => {\n    declarations.imports.add(\"Vector\")\n    const dependsVar = buildNextSyntax(inner)\n    const args = len ? [dependsVar, len] : [dependsVar]\n    const variable = {\n      id,\n      value: `Vector(${args.join(\", \")})`,\n      types: `Array<${getTypes(dependsVar)}>`,\n      directDependencies: new Set<string>([dependsVar]),\n    }\n    declarations.variables.set(id, variable)\n    return id\n  }\n\n  const buildTuple = (id: string, value: LookupEntry[]) => {\n    declarations.imports.add(\"Tuple\")\n    const deps = value.map(buildNextSyntax)\n    const variable = {\n      id,\n      value: `Tuple(${deps.join(\", \")})`,\n      types: `[${deps.map(getTypes).join(\", \")}]`,\n      directDependencies: new Set(deps),\n    }\n    declarations.variables.set(id, variable)\n    return id\n  }\n\n  const buildStruct = (id: string, value: StringRecord<LookupEntry>) => {\n    declarations.imports.add(\"Struct\")\n    const deps = Object.values(value).map(buildNextSyntax)\n    const variable = {\n      id,\n      value: `Struct({${Object.keys(value)\n        .map((key, idx) => `${key}: ${deps[idx]}`)\n        .join(\", \")}})`,\n      types: `{${Object.keys(value)\n        .map((key, idx) => `${key}: ${getTypes(deps[idx])}`)\n        .join(\", \")}}`,\n      directDependencies: new Set(deps),\n    }\n    declarations.variables.set(id, variable)\n    return id\n  }\n\n  const varId = getVarName(input.id)\n  if (input.type === \"array\") {\n    // Bytes case\n    if (input.value.type === \"primitive\" && input.value.value === \"u8\") {\n      declarations.imports.add(\"Bin\")\n      declarations.variables.set(varId, {\n        id: varId,\n        value: `Bin(${input.len})`,\n        types: \"Binary\",\n        directDependencies: new Set<string>(),\n      })\n      declarations.typeImports.add(\"HexString\")\n      declarations.typeImports.add(\"Binary\")\n      return varId\n    }\n\n    // non-fixed size Vector case\n    return buildVector(varId, input.value, input.len)\n  }\n\n  if (input.type === \"sequence\") return buildVector(varId, input.value)\n  if (input.type === \"tuple\") return buildTuple(varId, input.value)\n  if (input.type === \"struct\") return buildStruct(varId, input.value)\n\n  if (input.type === \"option\") {\n    declarations.imports.add(\"Option\")\n    const inner = buildNextSyntax(input.value)\n    const id = `_Option_${inner}`\n    const variable = {\n      id,\n      value: `Option(${inner})`,\n      types: `${getTypes(inner)} | undefined`,\n      directDependencies: new Set<string>([inner]),\n    }\n    declarations.variables.set(id, variable)\n    return id\n  }\n\n  if (input.type === \"result\") {\n    declarations.imports.add(\"Result\")\n    declarations.typeImports.add(\"ResultPayload\")\n    const ok = buildNextSyntax(input.value.ok)\n    const ko = buildNextSyntax(input.value.ko)\n    const id = `_Result_${ok}_${ko}`\n    const variable = {\n      id,\n      value: `Result(${ok}, ${ko})`,\n      types: `ResultPayload<${getTypes(ok)}, ${getTypes(ko)}>`,\n      directDependencies: new Set<string>([ok, ko]),\n    }\n    declarations.variables.set(id, variable)\n    return id\n  }\n\n  // it has to be an enum by now\n  declarations.imports.add(\"Variant\")\n  declarations.typeImports.add(\"Enum\")\n  const dependencies = Object.entries(input.value).map(([key, value]) => {\n    if (value.type === \"primitive\") {\n      declarations.imports.add(value.value)\n      return value.value\n    }\n\n    const varName = toCamelCase(varId, key)\n    if (value.type === \"tuple\") {\n      if (value.value.length === 1) {\n        let result: string = buildNextSyntax(value.value[0])\n\n        if (!declarations.variables.has(varName)) {\n          declarations.variables.set(varName, {\n            id: varName,\n            value: result,\n            types: getTypes(result),\n            directDependencies: new Set([result]),\n          })\n        }\n\n        return varName\n      }\n      return buildTuple(varName, value.value)\n    } else {\n      buildStruct(varName, value.value)\n    }\n    return varName\n  })\n\n  const indexes = Object.values(input.value).map((x) => x.idx)\n  const areIndexesSorted = indexes.every((idx, i) => idx === i)\n\n  const innerEnum = `{${Object.keys(input.value).map(\n    (key, idx) => `${key}: ${dependencies[idx]}`,\n  )}}${areIndexesSorted ? \"\" : `, [${indexes.join(\", \")}]`}`\n\n  declarations.enums.set(\n    varId,\n    Object.keys(input.value)\n      .map(\n        (key, idx) => `{type: '${key}', value: ${getTypes(dependencies[idx])}}`,\n      )\n      .join(\" | \"),\n  )\n\n  declarations.variables.set(varId, {\n    id: varId,\n    value: `Variant(${innerEnum})`,\n    types: `Enum<E${varId}>`,\n    directDependencies: new Set<string>(dependencies),\n  })\n  return varId\n}\n\nconst buildSyntax = withCache(\n  _buildSyntax,\n  (_getter, entry, declarations, getVarName) => {\n    declarations.imports.add(\"Self\")\n\n    const nonCircular = getVarName(entry.id)\n    const variable: Variable = {\n      id: getVarName(entry.id, \"circular\"),\n      types: nonCircular,\n      value: `Self(() => ${nonCircular})`,\n      directDependencies: new Set([nonCircular]),\n    }\n    declarations.variables.set(variable.id, variable)\n    return variable.id\n  },\n  (x) => x,\n)\n\nexport const getStaticBuilder = (metadata: V15) => {\n  const declarations: CodeDeclarations = {\n    imports: new Set<string>(),\n    typeImports: new Set<string>([\"Codec\"]),\n    variables: new Map(),\n    enums: new Map(),\n  }\n\n  const lookupData = metadata.lookup\n  const getLookupEntryDef = getLookupFn(lookupData)\n\n  const getVarName = (idx: number, ...post: string[]): string => {\n    const { path } = lookupData[idx]\n    let parts: string[]\n    if (path.length === 0) parts = [\"cdc\" + idx]\n    else if (path[0] === \"sp_runtime\") parts = [path.slice(-1)[0]]\n    else if (\n      // Junctions Junctions, etc\n      path.length > 2 &&\n      path.slice(-2)[0].toUpperCase() === path.slice(-2)[1].toUpperCase()\n    )\n      parts = path.slice(0, -1)\n    else parts = [...path]\n\n    parts.push(...post)\n\n    return toCamelCase(...parts)\n  }\n\n  const cache = new Map()\n  const buildDefinition = (id: number) =>\n    buildSyntax(\n      getLookupEntryDef(id),\n      cache,\n      new Set(),\n      declarations,\n      getVarName,\n    )\n\n  const buildNamedTuple = (\n    params: Array<{ name: string; type: number }>,\n    varName: string,\n  ) => {\n    if (declarations.variables.has(varName)) return varName\n\n    const args = params.map((p) => p.type).map(buildDefinition)\n    const names = params.map((p) => p.name)\n    declarations.imports.add(\"Tuple\")\n\n    const variable: Variable = {\n      id: varName,\n      types: `[${names\n        .map(\n          (name, pIdx) =>\n            `${name[0].toUpperCase() + name.slice(1)}: ${getTypes(args[pIdx])}`,\n        )\n        .join(\", \")}]`,\n      value: `Tuple(${args.join(\", \")})`,\n      directDependencies: new Set(args),\n    }\n    declarations.variables.set(varName, variable)\n\n    return varName\n  }\n\n  const EMPTY_TUPLE_VAR_NAME = \"_emptyTuple\"\n  const getEmptyTuple = () => {\n    if (!declarations.variables.has(EMPTY_TUPLE_VAR_NAME)) {\n      declarations.imports.add(\"Tuple\")\n\n      declarations.variables.set(EMPTY_TUPLE_VAR_NAME, {\n        id: EMPTY_TUPLE_VAR_NAME,\n        types: `[]`,\n        value: `Tuple()`,\n        directDependencies: new Set(),\n      })\n    }\n    return EMPTY_TUPLE_VAR_NAME\n  }\n\n  const buildStorage = (pallet: string, entry: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .storage!.items.find((s) => s.name === entry)!\n\n    if (storageEntry.type.tag === \"plain\")\n      return {\n        key: getEmptyTuple(),\n        val: buildDefinition(storageEntry.type.value),\n      }\n\n    const { key, value } = storageEntry.type.value\n    const val = buildDefinition(value)\n\n    const returnKey =\n      storageEntry.type.value.hashers.length === 1\n        ? buildNamedTuple(\n            [{ name: \"key\", type: key }],\n            getVarName(key, \"Tupled\"),\n          )\n        : buildDefinition(key)\n\n    return { key: returnKey, val }\n  }\n\n  const buildRuntimeCall = (api: string, method: string) => {\n    const entry = metadata.apis\n      .find((x) => x.name === api)\n      ?.methods.find((x) => x.name === method)\n    if (!entry) throw null\n    return {\n      args: buildNamedTuple(entry.inputs, `${api}${method}Args`),\n      value: buildDefinition(entry.output),\n    }\n  }\n\n  const buildVariant =\n    (type: \"errors\" | \"events\" | \"calls\") => (pallet: string, name: string) => {\n      const lookupEntry = getLookupEntryDef(\n        metadata.pallets.find((x) => x.name === pallet)![type]! as number,\n      )\n      if (lookupEntry.type !== \"enum\") throw null\n\n      const returnVar = toCamelCase(buildDefinition(lookupEntry.id), name)\n\n      if (\n        !declarations.variables.has(returnVar) &&\n        lookupEntry.value[name].type === \"primitive\"\n      ) {\n        declarations.variables.set(returnVar, {\n          id: returnVar,\n          value: \"_void\",\n          types: \"undefined\",\n          directDependencies: new Set(),\n        })\n      }\n\n      return returnVar\n    }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildDefinition(storageEntry.type as number)\n  }\n\n  const getCode = (): string => {\n    const typeImports = `import type {${[...declarations.typeImports].join(\n      \", \",\n    )}} from \"@polkadot-api/client\";\\n`\n\n    const varImports = `import {${[...declarations.imports].join(\n      \", \",\n    )}} from \"@polkadot-api/substrate-bindings\";\\n\\n`\n\n    const code = [...declarations.variables.values()]\n      .map((variable) => {\n        const ePrefix = declarations.enums.has(variable.id)\n          ? `type E${variable.id} = ${declarations.enums.get(\n              variable.id,\n            )!};\\nexport `\n          : \"\"\n        return `${ePrefix}type ${variable.id} = ${variable.types};\nconst ${variable.id}: Codec<${variable.id}> = ${variable.value};`\n      })\n      .join(\"\\n\\n\")\n\n    return `${typeImports}${varImports}${code}`\n  }\n\n  const getEnums = () => [...declarations.enums.keys()]\n\n  const getTypeFromVarName = (varName: string) =>\n    primitiveTypes[varName as keyof typeof primitiveTypes] ??\n    declarations.variables.get(varName)?.types ??\n    varName\n\n  return {\n    buildDefinition,\n    buildStorage,\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildCall: buildVariant(\"calls\"),\n    buildRuntimeCall,\n    buildConstant,\n    getTypeFromVarName,\n    getCode,\n    getEnums,\n  }\n}\n","import type { Codec, StringRecord, V15 } from \"@polkadot-api/substrate-bindings\"\nimport type { EnumVar, LookupEntry, TupleVar } from \"./lookups\"\nimport { getLookupFn } from \"./lookups\"\nimport * as scale from \"@polkadot-api/substrate-bindings\"\nimport { withCache } from \"./with-cache\"\nimport { mapObject } from \"@polkadot-api/utils\"\n\nconst _bytes = scale.Bin()\n\nconst _buildCodec = (\n  input: LookupEntry,\n  cache: Map<number, Codec<any>>,\n  stack: Set<number>,\n  _accountId: Codec<scale.SS58String>,\n): Codec<any> => {\n  if (input.type === \"primitive\") return scale[input.value]\n  if (input.type === \"AccountId32\") return _accountId\n  if (input.type === \"compact\") return scale.compact\n  if (input.type === \"bitSequence\") return scale.bitSequence\n\n  if (\n    input.type === \"sequence\" &&\n    input.value.type === \"primitive\" &&\n    input.value.value === \"u8\"\n  ) {\n    return _bytes\n  }\n\n  const buildNextCodec = (nextInput: LookupEntry): Codec<any> =>\n    buildCodec(nextInput, cache, stack, _accountId)\n\n  const buildVector = (inner: LookupEntry, len?: number) => {\n    const innerCodec = buildNextCodec(inner)\n    return len ? scale.Vector(innerCodec, len) : scale.Vector(innerCodec)\n  }\n\n  const buildTuple = (value: LookupEntry[]) =>\n    scale.Tuple(...value.map(buildNextCodec))\n\n  const buildStruct = (value: StringRecord<LookupEntry>) => {\n    const inner = Object.fromEntries(\n      Object.entries(value).map(([key, value]) => [key, buildNextCodec(value)]),\n    ) as StringRecord<Codec<any>>\n    return scale.Struct(inner)\n  }\n\n  if (input.type === \"array\") {\n    // Bytes case\n    if (input.value.type === \"primitive\" && input.value.value === \"u8\")\n      return scale.Bin(input.len)\n\n    return buildVector(input.value, input.len)\n  }\n\n  if (input.type === \"sequence\") return buildVector(input.value)\n  if (input.type === \"tuple\") return buildTuple(input.value)\n  if (input.type === \"struct\") return buildStruct(input.value)\n\n  if (input.type === \"option\") return scale.Option(buildNextCodec(input.value))\n\n  if (input.type === \"result\")\n    return scale.Result(\n      buildNextCodec(input.value.ok),\n      buildNextCodec(input.value.ko),\n    )\n\n  // it has to be an enum by now\n  const dependencies = Object.values(input.value).map((v) => {\n    if (v.type === \"primitive\") return scale._void\n    if (v.type === \"tuple\" && v.value.length === 1)\n      return buildNextCodec(v.value[0])\n\n    return v.type === \"tuple\" ? buildTuple(v.value) : buildStruct(v.value)\n  })\n\n  const inner = Object.fromEntries(\n    Object.keys(input.value).map((key, idx) => {\n      return [key, dependencies[idx]]\n    }),\n  ) as StringRecord<Codec<any>>\n\n  const indexes = Object.values(input.value).map((x) => x.idx)\n  const areIndexesSorted = indexes.every((idx, i) => idx === i)\n\n  return areIndexesSorted\n    ? scale.Variant(inner)\n    : scale.Variant(inner, indexes as any)\n}\nconst buildCodec = withCache(_buildCodec, scale.Self, (res) => res)\n\nexport const getDynamicBuilder = (metadata: V15) => {\n  const lookupData = metadata.lookup\n  const getLookupEntryDef = getLookupFn(lookupData)\n  let _accountId = scale.AccountId()\n\n  const cache = new Map()\n  const buildDefinition = (id: number): Codec<any> =>\n    buildCodec(getLookupEntryDef(id), cache, new Set(), _accountId)\n\n  const prefix = metadata.pallets\n    .find((x) => x.name === \"System\")\n    ?.constants.find((x) => x.name === \"SS58Prefix\")\n\n  let ss58Prefix: number | undefined\n  if (prefix) {\n    try {\n      const prefixVal = buildDefinition(prefix.type).dec(prefix.value)\n      if (typeof prefixVal === \"number\") {\n        ss58Prefix = prefixVal\n        _accountId = scale.AccountId(prefixVal)\n      }\n    } catch (_) {}\n  }\n\n  const storagePallets = new Map<string, ReturnType<typeof scale.Storage>>()\n\n  const buildStorage = (pallet: string, entry: string) => {\n    let storagePallet = storagePallets.get(pallet)\n    if (!storagePallet)\n      storagePallets.set(pallet, (storagePallet = scale.Storage(pallet)))\n\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .storage!.items.find((s) => s.name === entry)!\n\n    const storageWithFallback = (\n      len: number,\n      ...args: Parameters<ReturnType<typeof scale.Storage>>\n    ) => {\n      const result = storagePallet!(...args)\n      return {\n        ...result,\n        len,\n        fallback:\n          storageEntry.modifier === 1\n            ? result.dec(storageEntry.fallback)\n            : undefined,\n      }\n    }\n\n    if (storageEntry.type.tag === \"plain\")\n      return storageWithFallback(\n        0,\n        entry,\n        buildDefinition(storageEntry.type.value).dec,\n      )\n\n    const { key, value, hashers } = storageEntry.type.value\n    const val = buildDefinition(value)\n    const hashes = hashers.map((x) => scale[x.tag])\n\n    const hashArgs: Array<scale.EncoderWithHash<any>> =\n      hashes.length === 1\n        ? [[buildDefinition(key), hashes[0]]]\n        : (getLookupEntryDef(key) as TupleVar).value.map(\n            (x, idx): scale.EncoderWithHash<any> => [\n              buildDefinition(x.id),\n              hashes[idx],\n            ],\n          )\n    return storageWithFallback(hashes.length, entry, val.dec, ...hashArgs)\n  }\n\n  const buildEnumEntry = (\n    entry: EnumVar[\"value\"][keyof EnumVar[\"value\"]],\n  ): Codec<any> => {\n    if (entry.type === \"primitive\") return scale._void\n\n    return entry.type === \"tuple\"\n      ? scale.Tuple(\n          ...Object.values(entry.value).map((l) => buildDefinition(l.id)),\n        )\n      : scale.Struct(\n          mapObject(entry.value, (x) => buildDefinition(x.id)) as StringRecord<\n            Codec<any>\n          >,\n        )\n  }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildDefinition(storageEntry.type as number)\n  }\n\n  const buildVariant =\n    (type: \"errors\" | \"events\") =>\n    (\n      pallet: string,\n      name: string,\n    ): {\n      codec: Codec<any>\n      location: [number, number]\n    } => {\n      const palletEntry = metadata.pallets.find((x) => x.name === pallet)!\n      const lookup = getLookupEntryDef(palletEntry[type]!)\n      if (lookup.type !== \"enum\") throw null\n      const entry = lookup.value[name]\n\n      return {\n        location: [palletEntry.index, entry.idx],\n        codec: buildEnumEntry(lookup.value[name]),\n      }\n    }\n\n  const buildCall = (\n    pallet: string,\n    name: string,\n  ): {\n    args: Codec<any>\n    location: [number, number]\n  } => {\n    const palletEntry = metadata.pallets.find((x) => x.name === pallet)!\n    const lookup = getLookupEntryDef(palletEntry.calls!)\n    if (lookup.type !== \"enum\") throw null\n    const entry = lookup.value[name]\n\n    return {\n      location: [palletEntry.index, entry.idx],\n      args: buildEnumEntry(lookup.value[name]),\n    }\n  }\n\n  const buildRuntimeCall = (api: string, method: string) => {\n    const entry = metadata.apis\n      .find((x) => x.name === api)\n      ?.methods.find((x) => x.name === method)\n    if (!entry) throw null\n\n    return {\n      args: scale.Tuple(...entry.inputs.map((x) => buildDefinition(x.type))),\n      value: buildDefinition(entry.output),\n    }\n  }\n\n  return {\n    buildDefinition,\n    buildStorage,\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildRuntimeCall,\n    buildCall,\n    buildConstant,\n    ss58Prefix,\n  }\n}\n","import type { StringRecord, V15 } from \"@polkadot-api/substrate-bindings\"\nimport { h64 } from \"@polkadot-api/substrate-bindings\"\nimport {\n  LookupEntry,\n  MetadataPrimitives,\n  StructVar,\n  TupleVar,\n  VoidVar,\n  getLookupFn,\n} from \"./lookups\"\nimport { withCache } from \"./with-cache\"\n\nconst textEncoder = new TextEncoder()\nconst encodeText = textEncoder.encode.bind(textEncoder)\n\nconst getChecksum = (values: Array<bigint>) => {\n  const res = new Uint8Array(values.length * 8)\n  const dv = new DataView(res.buffer)\n\n  for (let i = 0; i < values.length; i++) dv.setBigUint64(i * 8, values[i])\n\n  return h64(res)\n}\nconst getStringChecksum = (values: Array<string>) =>\n  getChecksum(values.map((v) => h64(encodeText(v))))\n\ntype Shape =\n  | \"primitive\"\n  | \"vector\"\n  | \"tuple\"\n  | \"struct\"\n  | \"option\"\n  | \"result\"\n  | \"enum\"\nconst shapeIds: Record<Shape, bigint> = {\n  primitive: 0n,\n  vector: 1n,\n  tuple: 2n,\n  struct: 3n,\n  option: 4n,\n  result: 5n,\n  enum: 6n,\n}\n\ntype RuntimePrimitives =\n  | \"undefined\"\n  | \"number\"\n  | \"string\"\n  | \"bigint\"\n  | \"boolean\"\n  | \"bitSequence\"\n  | \"byteSequence\"\n  | \"accountId\"\n\nconst runtimePrimitiveIds: Record<RuntimePrimitives, bigint> = {\n  undefined: 0n,\n  number: 1n,\n  string: 2n,\n  bigint: 3n,\n  boolean: 4n,\n  bitSequence: 5n, // {bitsLen: number, bytes: Uint8Array}\n  byteSequence: 6n, // Binary\n  accountId: 7n, // SS58String\n}\n\nconst metadataPrimitiveIds: Record<MetadataPrimitives | \"_void\", bigint> = {\n  _void: runtimePrimitiveIds.undefined,\n  bool: runtimePrimitiveIds.boolean,\n  char: runtimePrimitiveIds.string,\n  str: runtimePrimitiveIds.string,\n  u8: runtimePrimitiveIds.number,\n  u16: runtimePrimitiveIds.number,\n  u32: runtimePrimitiveIds.number,\n  u64: runtimePrimitiveIds.bigint,\n  u128: runtimePrimitiveIds.bigint,\n  u256: runtimePrimitiveIds.bigint,\n  i8: runtimePrimitiveIds.number,\n  i16: runtimePrimitiveIds.number,\n  i32: runtimePrimitiveIds.number,\n  i64: runtimePrimitiveIds.bigint,\n  i128: runtimePrimitiveIds.bigint,\n  i256: runtimePrimitiveIds.bigint,\n}\n\nconst structLikeBuilder = <T>(\n  shapeId: bigint,\n  input: StringRecord<T>,\n  innerChecksum: (value: T) => bigint,\n) => {\n  const sortedEntries = Object.entries(input).sort(([a], [b]) =>\n    a.localeCompare(b),\n  )\n  const keysChecksum = getStringChecksum(sortedEntries.map(([key]) => key))\n  const valuesChecksum = getChecksum(\n    sortedEntries.map(([, entry]) => innerChecksum(entry)),\n  )\n\n  return getChecksum([shapeId, keysChecksum, valuesChecksum])\n}\n\nconst _buildChecksum = (\n  input: LookupEntry,\n  cache: Map<number, bigint>,\n  stack: Set<number>,\n): bigint => {\n  if (cache.has(input.id)) return cache.get(input.id)!\n\n  if (input.type === \"primitive\")\n    return getChecksum([shapeIds.primitive, metadataPrimitiveIds[input.value]])\n\n  if (input.type === \"compact\")\n    return getChecksum([\n      shapeIds.primitive,\n      runtimePrimitiveIds[input.isBig ? \"bigint\" : \"number\"],\n    ])\n\n  if (input.type === \"bitSequence\")\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.bitSequence])\n\n  if (\n    input.type === \"sequence\" &&\n    input.value.type === \"primitive\" &&\n    input.value.value === \"u8\"\n  ) {\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.byteSequence])\n  }\n\n  if (input.type === \"AccountId32\") {\n    return getChecksum([shapeIds.primitive, runtimePrimitiveIds.accountId])\n  }\n\n  const buildNextChecksum = (nextInput: LookupEntry): bigint =>\n    buildChecksum(nextInput, cache, stack)\n\n  if (input.type === \"array\") {\n    const innerChecksum = buildNextChecksum(input.value)\n    return getChecksum([shapeIds.vector, innerChecksum, BigInt(input.len)])\n  }\n\n  if (input.type === \"sequence\") {\n    const innerChecksum = buildNextChecksum(input.value)\n    return getChecksum([shapeIds.vector, innerChecksum])\n  }\n\n  const buildTuple = (entries: LookupEntry[]) =>\n    getChecksum([shapeIds.tuple, ...entries.map(buildNextChecksum)])\n\n  const buildStruct = (entries: StringRecord<LookupEntry>) =>\n    structLikeBuilder(shapeIds.struct, entries, buildNextChecksum)\n\n  if (input.type === \"tuple\") return buildTuple(input.value)\n\n  if (input.type === \"struct\") return buildStruct(input.value)\n\n  if (input.type === \"option\")\n    return getChecksum([shapeIds.option, buildNextChecksum(input.value)])\n\n  if (input.type === \"result\")\n    return getChecksum([\n      shapeIds.result,\n      buildNextChecksum(input.value.ok),\n      buildNextChecksum(input.value.ko),\n    ])\n\n  return structLikeBuilder(shapeIds.enum, input.value, (entry) => {\n    switch (entry.type) {\n      case \"primitive\":\n        return metadataPrimitiveIds._void\n      case \"tuple\":\n        return buildTuple(entry.value)\n      case \"struct\":\n        return buildStruct(entry.value)\n    }\n  })\n}\nconst buildChecksum = withCache(\n  _buildChecksum,\n  () => 0n,\n  (result) => result,\n)\n\nexport const getChecksumBuilder = (metadata: V15) => {\n  const lookupData = metadata.lookup\n  const getLookupEntryDef = getLookupFn(lookupData)\n\n  const cache = new Map<number, bigint>()\n\n  const buildDefinition = (id: number): bigint =>\n    buildChecksum(getLookupEntryDef(id), cache, new Set())\n\n  const buildStorage = (pallet: string, entry: string): bigint | null => {\n    try {\n      const storageEntry = metadata.pallets\n        .find((x) => x.name === pallet)!\n        .storage!.items.find((s) => s.name === entry)!\n\n      if (storageEntry.type.tag === \"plain\")\n        return buildDefinition(storageEntry.type.value)\n\n      const { key, value } = storageEntry.type.value\n      const val = buildDefinition(value)\n      const returnKey = buildDefinition(key)\n      return getChecksum([val, returnKey])\n    } catch (_) {\n      return null\n    }\n  }\n\n  const buildRuntimeCall = (api: string, method: string): bigint | null => {\n    try {\n      const entry = metadata.apis\n        .find((x) => x.name === api)\n        ?.methods.find((x) => x.name === method)\n      if (!entry) throw null\n\n      const argNamesChecksum = getStringChecksum(\n        entry.inputs.map((x) => x.name),\n      )\n      const argValuesChecksum = getChecksum(\n        entry.inputs.map((x) => buildDefinition(x.type)),\n      )\n      const outputChecksum = buildDefinition(entry.output)\n\n      return getChecksum([argNamesChecksum, argValuesChecksum, outputChecksum])\n    } catch (_) {\n      return null\n    }\n  }\n\n  const buildComposite = (input: TupleVar | StructVar | VoidVar): bigint => {\n    if (input.type === \"primitive\") return getChecksum([0n])\n\n    if (input.type === \"tuple\") {\n      const values = Object.values(input.value).map((entry) =>\n        buildDefinition(entry.id),\n      )\n\n      return getChecksum([shapeIds.tuple, ...values])\n    }\n\n    // Otherwise struct\n    return structLikeBuilder(shapeIds.struct, input.value, (entry) =>\n      buildDefinition(entry.id),\n    )\n  }\n\n  const buildVariant =\n    (variantType: \"errors\" | \"events\" | \"calls\") =>\n    (pallet: string, name: string): bigint | null => {\n      try {\n        const palletEntry = metadata.pallets.find((x) => x.name === pallet)!\n        const callsLookup = getLookupEntryDef(\n          palletEntry[variantType]! as number,\n        )\n\n        if (callsLookup.type !== \"enum\") throw null\n        return buildComposite(callsLookup.value[name])\n      } catch (_) {\n        return null\n      }\n    }\n\n  const buildConstant = (\n    pallet: string,\n    constantName: string,\n  ): bigint | null => {\n    try {\n      const storageEntry = metadata.pallets\n        .find((x) => x.name === pallet)!\n        .constants!.find((s) => s.name === constantName)!\n\n      return buildDefinition(storageEntry.type)\n    } catch (_) {\n      return null\n    }\n  }\n\n  const toStringEnhancer =\n    <Args extends Array<any>>(\n      fn: (...args: Args) => bigint | null,\n    ): ((...args: Args) => string | null) =>\n    (...args) =>\n      fn(...args)?.toString(32) ?? null\n\n  return {\n    buildDefinition: toStringEnhancer(buildDefinition),\n    buildRuntimeCall: toStringEnhancer(buildRuntimeCall),\n    buildStorage: toStringEnhancer(buildStorage),\n    buildCall: toStringEnhancer(buildVariant(\"calls\")),\n    buildEvent: toStringEnhancer(buildVariant(\"events\")),\n    buildError: toStringEnhancer(buildVariant(\"errors\")),\n    buildConstant: toStringEnhancer(buildConstant),\n    buildComposite: toStringEnhancer(buildComposite),\n  }\n}\n","import { mapObject, mapStringRecord } from \"@polkadot-api/utils\"\nimport {\n  Decoder,\n  type StringRecord,\n  type V15,\n  type V14Lookup,\n  createDecoder,\n  u8,\n  HexString,\n  enhanceDecoder,\n} from \"@polkadot-api/substrate-bindings\"\nimport type { EnumVar, LookupEntry } from \"@/lookups\"\nimport { getLookupFn } from \"@/lookups\"\nimport {\n  primitives,\n  complex,\n  WithShapeWithoutExtra,\n  ShapedDecoder,\n  selfDecoder,\n  AccountIdShaped,\n  WithoutExtra,\n} from \"./shaped-decoders\"\nimport {\n  AccountIdDecoded,\n  Decoded,\n  DecodedCall,\n  GetViewBuilder,\n  PrimitiveDecoded,\n  UnshapedDecoder,\n} from \"./types\"\nimport { withCache } from \"@/with-cache\"\n\nconst emptyTuple = complex.Tuple()\n\nconst toUnshapedDecoder =\n  <A extends Array<any>>(\n    fn: (...args: A) => ShapedDecoder,\n  ): ((...args: A) => UnshapedDecoder) =>\n  (...args) => {\n    const value = fn(...args)\n    return {\n      shape: value.shape,\n      decoder: value as Decoder<Decoded>,\n    }\n  }\n\ntype WithProp<\n  T extends Decoder<any> & { shape: any },\n  PropName extends string,\n  PropValue,\n> = T extends Decoder<infer D> & { shape: infer S }\n  ? Decoder<\n      D extends WithoutExtra<PrimitiveDecoded>\n        ? PrimitiveDecoded\n        : D & { [P in PropName]: PropValue }\n    > & { shape: S }\n  : T\n\nconst withProp = <PropName extends string, PropValue>(\n  input: ShapedDecoder,\n  propName: PropName,\n  propValue: PropValue,\n): WithProp<ShapedDecoder, PropName, PropValue> => {\n  const decoder = enhanceDecoder(input as Decoder<{}>, (x) => ({\n    ...x,\n    [propName]: propValue,\n  })) as WithProp<ShapedDecoder, PropName, PropValue>\n  decoder.shape = input.shape\n  return decoder\n}\n\nconst addPath =\n  <Other extends Array<any>>(\n    fn: (\n      input: LookupEntry,\n      cache: Map<number, ShapedDecoder>,\n      stack: Set<number>,\n      lookupData: V14Lookup,\n      ...rest: Other\n    ) => ShapedDecoder,\n  ): ((\n    input: LookupEntry,\n    cache: Map<number, ShapedDecoder>,\n    stack: Set<number>,\n    lookupData: V14Lookup,\n    ...rest: Other\n  ) => ShapedDecoder | WithProp<ShapedDecoder, \"path\", string[]>) =>\n  (input, cache, stack, lookupData, ...rest) => {\n    const { path } = lookupData[input.id]\n    const base = fn(input, cache, stack, lookupData, ...rest)\n    return path.length ? withProp(base, \"path\", path) : base\n  }\n\nconst _buildShapedDecoder = (\n  input: LookupEntry,\n  cache: Map<number, ShapedDecoder>,\n  stack: Set<number>,\n  lookupData: V14Lookup,\n  _accountId: WithShapeWithoutExtra<AccountIdDecoded>,\n): ShapedDecoder => {\n  if (input.type === \"primitive\") return primitives[input.value]\n  if (input.type === \"AccountId32\") return _accountId\n  if (input.type === \"compact\")\n    return input.isBig ? primitives.compactBn : primitives.compactNumber\n  if (input.type === \"bitSequence\") return primitives.bitSequence\n\n  if (\n    input.type === \"sequence\" &&\n    input.value.type === \"primitive\" &&\n    input.value.value === \"u8\"\n  ) {\n    return primitives.Bytes\n  }\n\n  const buildNext = (nextInput: LookupEntry): ShapedDecoder =>\n    buildShapedDecoder(nextInput, cache, stack, lookupData, _accountId)\n\n  const buildVector = (inner: LookupEntry, len?: number) => {\n    const _inner = buildNext(inner)\n    return len ? complex.Array(_inner, len) : complex.Sequence(_inner)\n  }\n\n  const buildTuple = (value: LookupEntry[], innerDocs: string[][]) =>\n    withProp(complex.Tuple(...value.map(buildNext)), \"innerDocs\", innerDocs)\n\n  const buildStruct = (\n    value: StringRecord<LookupEntry>,\n    innerDocs: StringRecord<string[]>,\n  ) =>\n    withProp(\n      complex.Struct(mapStringRecord(value, buildNext)),\n      \"innerDocs\",\n      innerDocs,\n    )\n\n  if (input.type === \"array\") {\n    // Bytes case\n    if (input.value.type === \"primitive\" && input.value.value === \"u8\") {\n      return primitives.BytesArray(input.len)\n    }\n\n    return buildVector(input.value, input.len)\n  }\n\n  if (input.type === \"sequence\") return buildVector(input.value)\n  if (input.type === \"tuple\") return buildTuple(input.value, input.innerDocs)\n  if (input.type === \"struct\") return buildStruct(input.value, input.innerDocs)\n  if (input.type === \"option\") return complex.Option(buildNext(input.value))\n\n  if (input.type === \"result\")\n    return complex.Result(buildNext(input.value.ok), buildNext(input.value.ko))\n\n  // it has to be an enum by now\n  const dependencies = Object.values(input.value).map((v) => {\n    if (v.type === \"primitive\") return primitives._void\n    if (v.type === \"tuple\" && v.value.length === 1) {\n      return buildNext(v.value[0])\n    }\n    return v.type === \"tuple\"\n      ? buildTuple(v.value, v.innerDocs)\n      : buildStruct(v.value, v.innerDocs)\n  })\n\n  const inner = Object.fromEntries(\n    Object.keys(input.value).map((key, idx) => [key, dependencies[idx]]),\n  ) as StringRecord<ShapedDecoder>\n\n  const indexes = Object.values(input.value).map((x) => x.idx)\n  const areIndexesSorted = indexes.every((idx, i) => idx === i)\n\n  const withoutDocs = areIndexesSorted\n    ? complex.Enum(inner)\n    : complex.Enum(inner, indexes as any)\n\n  const withDocs = enhanceDecoder(withoutDocs, (val) => {\n    const docs = input.innerDocs[val.value.type]\n    return {\n      ...val,\n      docs,\n    }\n  }) as unknown as typeof withoutDocs\n  withDocs.shape = withoutDocs.shape\n  return withDocs\n}\n\nconst withPath = addPath(_buildShapedDecoder)\nconst buildShapedDecoder = withCache(withPath, selfDecoder, (outter, inner) => {\n  inner.shape = outter.shape\n  return outter\n})\n\nconst hexStrFromByte = (input: number) =>\n  `0x${input.toString(16).padEnd(2, \"0\")}` as HexString\n\nexport const getViewBuilder: GetViewBuilder = (metadata: V15) => {\n  const lookupData = metadata.lookup\n  const cache = new Map<number, ShapedDecoder>()\n\n  const getDecoder = (id: number) =>\n    buildShapedDecoder(\n      getLookupEntryDef(id),\n      cache,\n      new Set(),\n      lookupData,\n      _accountId,\n    )\n\n  const getLookupEntryDef = getLookupFn(lookupData)\n\n  let _accountId: WithShapeWithoutExtra<AccountIdDecoded> = primitives.AccountId\n\n  const prefix = metadata.pallets\n    .find((x) => x.name === \"System\")\n    ?.constants.find((x) => x.name === \"SS58Prefix\")\n  if (prefix) {\n    try {\n      const prefixVal = getDecoder(prefix.type)(prefix.value).value\n\n      if (typeof prefixVal === \"number\") _accountId = AccountIdShaped(prefixVal)\n    } catch (_) {}\n  }\n\n  const buildDefinition = toUnshapedDecoder(getDecoder)\n\n  const callDecoder: Decoder<DecodedCall> = createDecoder((bytes) => {\n    const palletIdx = u8.dec(bytes)\n\n    const palletEntry = metadata.pallets.find((x) => x.index === palletIdx)\n    if (!palletEntry) throw new Error(\"Invalid Pallet\")\n\n    const pallet = {\n      value: {\n        name: palletEntry.name,\n        idx: palletIdx,\n      },\n      input: hexStrFromByte(bytes[0]),\n    }\n\n    const callsDecoder = getDecoder(palletEntry.calls!)\n\n    const decoded = callsDecoder(bytes)\n\n    if (decoded.codec !== \"Enum\") throw null\n\n    const call = {\n      value: {\n        name: decoded.value.type,\n        idx: bytes[1],\n      },\n      input: hexStrFromByte(bytes[1]),\n      docs: (decoded as any).docs as string[],\n    }\n\n    return {\n      pallet,\n      call,\n      args: { value: decoded.value.value as any, shape: callsDecoder.shape },\n    }\n  })\n\n  const buildEnumEntry = toUnshapedDecoder(\n    (\n      entry: EnumVar[\"value\"][keyof EnumVar[\"value\"]],\n      forceTuple = false,\n    ): ShapedDecoder => {\n      if (entry.type === \"primitive\")\n        return forceTuple ? emptyTuple : primitives._void\n\n      return entry.type === \"tuple\"\n        ? complex.Tuple(\n            ...Object.values(entry.value).map((l) => getDecoder(l.id)),\n          )\n        : complex.Struct(\n            mapObject(entry.value, (x) =>\n              getDecoder(x.id),\n            ) as StringRecord<ShapedDecoder>,\n          )\n    },\n  )\n\n  const buildVariant =\n    (type: \"errors\" | \"events\" | \"calls\") =>\n    (\n      pallet: string,\n      name: string,\n    ): {\n      view: UnshapedDecoder\n      location: [number, number]\n    } => {\n      const palletEntry = metadata.pallets.find((x) => x.name === pallet)!\n\n      const lookup = getLookupEntryDef(palletEntry[type]!)\n      if (lookup.type !== \"enum\") throw null\n\n      const event = lookup.value[name]\n\n      return {\n        location: [palletEntry.index, event.idx],\n        view: buildEnumEntry(event, type === \"calls\"),\n      }\n    }\n\n  const buildConstant = (pallet: string, constantName: string) => {\n    const storageEntry = metadata.pallets\n      .find((x) => x.name === pallet)!\n      .constants!.find((s) => s.name === constantName)!\n\n    return buildDefinition(storageEntry.type as number)\n  }\n\n  return {\n    buildDefinition,\n    callDecoder,\n\n    buildEvent: buildVariant(\"events\"),\n    buildError: buildVariant(\"errors\"),\n    buildCall: buildVariant(\"calls\"),\n    buildConstant,\n  }\n}\n","import { toHex as _toHex, mapStringRecord } from \"@polkadot-api/utils\"\nimport * as scale from \"@polkadot-api/substrate-bindings\"\nimport type {\n  Decoder,\n  HexString,\n  StringRecord,\n} from \"@polkadot-api/substrate-bindings\"\nimport {\n  ArrayDecoded,\n  ArrayShape,\n  BytesArrayDecoded,\n  ComplexDecoded,\n  ComplexShape,\n  Decoded,\n  EnumDecoded,\n  EnumShape,\n  OptionDecoded,\n  OptionShape,\n  PrimitiveDecoded,\n  ResultDecoded,\n  ResultShape,\n  SequenceDecoded,\n  SequenceShape,\n  StructDecoded,\n  StructShape,\n  TupleDecoded,\n  TupleShape,\n} from \"./types\"\n\nconst toHex = _toHex as (input: Uint8Array) => HexString\n\ntype Extras = \"docs\" | \"path\" | \"innerDocs\"\nexport type WithoutExtra<T extends {}> = Omit<T, Extras>\ntype PrimitiveCodec = PrimitiveDecoded[\"codec\"]\ntype ComplexCodec = ComplexDecoded[\"codec\"]\n\nexport type WithShapeWithoutExtra<T extends PrimitiveDecoded> = Decoder<\n  WithoutExtra<T>\n> & {\n  shape: { codec: T[\"codec\"] }\n}\ntype PrimitiveShapeDecoder = WithShapeWithoutExtra<PrimitiveDecoded>\n\ntype SequenceShapedDecoder = Decoder<WithoutExtra<SequenceDecoded>> & {\n  shape: SequenceShape\n}\ntype ArrayShapedDecoder = Decoder<WithoutExtra<ArrayDecoded>> & {\n  shape: ArrayShape\n}\ntype TupleShapedDecoder = Decoder<WithoutExtra<TupleDecoded>> & {\n  shape: TupleShape\n}\ntype StructShapedDecoder = Decoder<WithoutExtra<StructDecoded>> & {\n  shape: StructShape\n}\n\ntype OptionShapedDecoder = Decoder<WithoutExtra<OptionDecoded>> & {\n  shape: OptionShape\n}\n\ntype ResultShapedDecoder = Decoder<WithoutExtra<ResultDecoded>> & {\n  shape: ResultShape\n}\n\ntype EnumShapedDecoder = Decoder<WithoutExtra<EnumDecoded>> & {\n  shape: EnumShape\n}\ntype ComplexShapedDecoder =\n  | SequenceShapedDecoder\n  | ArrayShapedDecoder\n  | TupleShapedDecoder\n  | StructShapedDecoder\n  | OptionShapedDecoder\n  | ResultShapedDecoder\n  | EnumShapedDecoder\n\nexport type ShapedDecoder = PrimitiveShapeDecoder | ComplexShapedDecoder\n\ntype PrimitiveDecodedValue<C extends PrimitiveCodec> = (PrimitiveDecoded & {\n  codec: C\n})[\"value\"]\ntype PrimitiveDecodedRest<C extends PrimitiveCodec> = Omit<\n  PrimitiveDecoded & { codec: C },\n  \"value\" | \"input\" | \"codec\" | Extras\n>\n\ntype ComplexDecodedValue<C extends ComplexCodec> = (ComplexDecoded & {\n  codec: C\n})[\"value\"]\ntype ComplexDecodedRest<C extends ComplexCodec> = Omit<\n  ComplexDecoded & { codec: C },\n  \"value\" | \"input\" | \"codec\" | Extras\n>\n\nconst createInputValueDecoder = <T, Rest extends { codec: Decoded[\"codec\"] }>(\n  dec: Decoder<T>,\n  rest: Rest,\n): Decoder<\n  Rest & {\n    input: HexString\n    value: T\n  }\n> =>\n  scale.createDecoder((_bytes) => {\n    const bytes = _bytes as Uint8Array & { i: number; v: DataView }\n    const start = bytes.i\n    const value = dec(bytes)\n    const input = toHex(new Uint8Array(bytes.buffer.slice(start, bytes.i)))\n    return { ...rest, value, input }\n  })\n\nconst primitiveShapedDecoder = <C extends PrimitiveCodec>(\n  codec: C,\n  input: Decoder<PrimitiveDecodedValue<C>>,\n  rest?: PrimitiveDecodedRest<C>,\n): WithShapeWithoutExtra<\n  PrimitiveDecoded & {\n    codec: C\n  }\n> => {\n  const decoder: Decoder<WithoutExtra<PrimitiveDecoded>> =\n    createInputValueDecoder(input, { codec, ...rest })\n\n  return Object.assign(decoder, {\n    shape: { codec },\n  }) as any\n}\n\nconst complexShapedDecoder = <Shape extends ComplexShape>(\n  shape: Shape,\n  input: Decoder<ComplexDecodedValue<Shape[\"codec\"]>>,\n  rest?: ComplexDecodedRest<Shape[\"codec\"]>,\n): Decoder<\n  WithoutExtra<\n    ComplexDecoded & {\n      codec: Shape[\"codec\"]\n    }\n  >\n> & {\n  shape: Shape\n} => {\n  const decoder: Decoder<WithoutExtra<ComplexDecoded>> =\n    createInputValueDecoder(input, { codec: shape.codec, ...rest })\n\n  return Object.assign(decoder, {\n    shape,\n  })\n}\n\nexport const AccountIdShaped = (ss58Prefix = 42) => {\n  const enhanced = scale.enhanceDecoder(\n    scale.AccountId(ss58Prefix).dec,\n    (address) => ({\n      address,\n      ss58Prefix,\n    }),\n  )\n\n  return primitiveShapedDecoder(\"AccountId\", enhanced, {})\n}\n\nconst BytesArray = (len: number): WithShapeWithoutExtra<BytesArrayDecoded> =>\n  primitiveShapedDecoder(\"BytesArray\", scale.Hex.dec(len), { len })\n\nconst _primitives = [\n  \"_void\",\n  \"bool\",\n  \"char\",\n  \"str\",\n  \"u8\",\n  \"u16\",\n  \"u32\",\n  \"i8\",\n  \"i16\",\n  \"i32\",\n  \"u64\",\n  \"u128\",\n  \"u256\",\n  \"i64\",\n  \"i128\",\n  \"i256\",\n  \"compactNumber\",\n  \"compactBn\",\n  \"bitSequence\",\n] as const\n\ntype PrimitivesList = typeof _primitives\ntype PrimitivesKeys = PrimitivesList[number]\n\nconst corePrimitives: {\n  [P in PrimitivesKeys]: WithShapeWithoutExtra<\n    PrimitiveDecoded & {\n      codec: P\n    }\n  >\n} = Object.fromEntries(\n  _primitives.map((x) => [x, primitiveShapedDecoder(x, scale[x].dec)]),\n) as any\n\nexport const primitives = {\n  ...corePrimitives,\n  Bytes: primitiveShapedDecoder(\"Bytes\", scale.Hex.dec()),\n  BytesArray,\n  AccountId: AccountIdShaped(),\n}\n\nconst Sequence = (input: ShapedDecoder): SequenceShapedDecoder =>\n  complexShapedDecoder(\n    { codec: \"Sequence\", shape: input.shape },\n    scale.Vector.dec(input as any),\n  )\n\nconst ArrayDec = (input: ShapedDecoder, len: number): ArrayShapedDecoder =>\n  complexShapedDecoder(\n    { codec: \"Array\", shape: input.shape, len },\n    scale.Vector.dec(input as any, len),\n  )\n\nconst TupleDec = (...input: Array<ShapedDecoder>): TupleShapedDecoder =>\n  complexShapedDecoder(\n    { codec: \"Tuple\", shape: input.map((x) => x.shape) },\n    scale.Tuple.dec(...(input as Array<Decoder<any>>)),\n  )\n\nconst StructDec = (input: StringRecord<ShapedDecoder>): StructShapedDecoder =>\n  complexShapedDecoder(\n    { codec: \"Struct\", shape: mapStringRecord(input, (x) => x.shape) },\n    scale.Struct.dec(input as {}),\n  )\n\nconst EnumDec = (\n  input: StringRecord<ShapedDecoder>,\n  args?: number[],\n): EnumShapedDecoder =>\n  complexShapedDecoder(\n    { codec: \"Enum\", shape: mapStringRecord(input, (x) => x.shape) },\n    scale.Variant.dec(input as {}, args as any),\n  )\n\nexport const OptionDec = (input: ShapedDecoder): OptionShapedDecoder =>\n  complexShapedDecoder(\n    { codec: \"Option\", shape: input.shape },\n    scale.Option.dec(input as any) as any,\n  )\n\nexport const ResultDec = (\n  ok: ShapedDecoder,\n  ko: ShapedDecoder,\n): ResultShapedDecoder =>\n  complexShapedDecoder(\n    { codec: \"Result\", shape: { ok: ok.shape, ko: ko.shape } },\n    scale.Result.dec(ok as Decoder<any>, ko as Decoder<any>) as any,\n  )\n\nexport const selfDecoder = (value: () => ShapedDecoder): ShapedDecoder => {\n  let cache: Decoder<any> = (x) => {\n    const decoder = value()\n    const result = decoder\n    cache = decoder\n    return result(x)\n  }\n\n  const result = ((x) => cache(x)) as ShapedDecoder\n  result.shape = { codec: \"_void\" }\n  return result\n}\n\nexport const complex = {\n  Sequence,\n  Array: ArrayDec,\n  Tuple: TupleDec,\n  Struct: StructDec,\n  Enum: EnumDec,\n  Option: OptionDec,\n  Result: ResultDec,\n}\n"],"mappings":"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","names":["withCache","entry","x","key","inner","value","import_utils","import_substrate_bindings","import_utils","scale","_toHex","_bytes","result","inner"]}