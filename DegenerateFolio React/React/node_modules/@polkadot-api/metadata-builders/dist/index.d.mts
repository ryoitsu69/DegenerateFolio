import * as scale from '@polkadot-api/substrate-bindings';
import { StringRecord, V15, Codec, Decoder, HexString, ResultPayload } from '@polkadot-api/substrate-bindings';
export { Decoder, HexString, StringRecord, V15 } from '@polkadot-api/substrate-bindings';

type VoidVar = {
    type: "primitive";
    value: "_void";
};
type MetadataPrimitives$1 = "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
type PrimitiveVar = {
    type: "primitive";
    value: MetadataPrimitives$1;
} | VoidVar;
type CompactVar = {
    type: "compact";
    isBig: boolean;
};
type BitSequenceVar = {
    type: "bitSequence";
};
type AccountId32 = {
    type: "AccountId32";
};
type TerminalVar = PrimitiveVar | CompactVar | BitSequenceVar | AccountId32;
type TupleVar = {
    type: "tuple";
    value: LookupEntry[];
    innerDocs: Array<string[]>;
};
type StructVar = {
    type: "struct";
    value: StringRecord<LookupEntry>;
    innerDocs: StringRecord<string[]>;
};
type EnumVar = {
    type: "enum";
    value: StringRecord<(TupleVar | StructVar | VoidVar) & {
        idx: number;
    }>;
    innerDocs: StringRecord<string[]>;
};
type OptionVar = {
    type: "option";
    value: LookupEntry;
};
type ResultVar = {
    type: "result";
    value: {
        ok: LookupEntry;
        ko: LookupEntry;
    };
};
type SequenceVar = {
    type: "sequence";
    value: LookupEntry;
};
type ArrayVar = {
    type: "array";
    value: LookupEntry;
    len: number;
};
type ComposedVar = TupleVar | StructVar | SequenceVar | ArrayVar | OptionVar | ResultVar | EnumVar;
type Var = TerminalVar | ComposedVar;
type LookupEntry = {
    id: number;
} & Var;
declare const getLookupFn: (lookupData: {
    id: number;
    path: string[];
    params: {
        name: string;
        type: number | undefined;
    }[];
    def: {
        tag: "composite";
        value: {
            name: string | undefined;
            type: number;
            typeName: string | undefined;
            docs: string[];
        }[];
    } | {
        tag: "variant";
        value: {
            name: string;
            fields: {
                name: string | undefined;
                type: number;
                typeName: string | undefined;
                docs: string[];
            }[];
            index: number;
            docs: string[];
        }[];
    } | {
        tag: "sequence";
        value: number;
    } | {
        tag: "array";
        value: {
            len: number;
            type: number;
        };
    } | {
        tag: "tuple";
        value: number[];
    } | {
        tag: "primitive";
        value: {
            tag: "bool";
            value: undefined;
        } | {
            tag: "char";
            value: undefined;
        } | {
            tag: "str";
            value: undefined;
        } | {
            tag: "u8";
            value: undefined;
        } | {
            tag: "u16";
            value: undefined;
        } | {
            tag: "u32";
            value: undefined;
        } | {
            tag: "u64";
            value: undefined;
        } | {
            tag: "u128";
            value: undefined;
        } | {
            tag: "u256";
            value: undefined;
        } | {
            tag: "i8";
            value: undefined;
        } | {
            tag: "i16";
            value: undefined;
        } | {
            tag: "i32";
            value: undefined;
        } | {
            tag: "i64";
            value: undefined;
        } | {
            tag: "i128";
            value: undefined;
        } | {
            tag: "i256";
            value: undefined;
        };
    } | {
        tag: "compact";
        value: number;
    } | {
        tag: "bitSequence";
        value: {
            bitStoreType: number;
            bitOrderType: number;
        };
    };
    docs: string[];
}[]) => (id: number) => LookupEntry;

type MetadataPrimitives = "bool" | "char" | "str" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "i8" | "i16" | "i32" | "i64" | "i128" | "i256";
declare const primitiveTypes: Record<MetadataPrimitives | "_void" | "compactNumber" | "compactBn" | "bitSequence", string>;
interface Variable {
    id: string;
    types: string;
    value: string;
    directDependencies: Set<string>;
}
interface CodeDeclarations {
    imports: Set<string>;
    typeImports: Set<string>;
    enums: Map<string, string>;
    variables: Map<string, Variable>;
}
declare const getStaticBuilder: (metadata: V15) => {
    buildDefinition: (id: number) => string;
    buildStorage: (pallet: string, entry: string) => {
        key: string;
        val: string;
    };
    buildEvent: (pallet: string, name: string) => string;
    buildError: (pallet: string, name: string) => string;
    buildCall: (pallet: string, name: string) => string;
    buildRuntimeCall: (api: string, method: string) => {
        args: string;
        value: string;
    };
    buildConstant: (pallet: string, constantName: string) => string;
    getTypeFromVarName: (varName: string) => string;
    getCode: () => string;
    getEnums: () => string[];
};

declare const getDynamicBuilder: (metadata: V15) => {
    buildDefinition: (id: number) => Codec<any>;
    buildStorage: (pallet: string, entry: string) => {
        len: number;
        fallback: unknown;
        enc: (...args: any[]) => string;
        dec: scale.Decoder<unknown>;
        keyDecoder: (value: string) => any[];
    };
    buildEvent: (pallet: string, name: string) => {
        codec: Codec<any>;
        location: [
            number,
            number
        ];
    };
    buildError: (pallet: string, name: string) => {
        codec: Codec<any>;
        location: [
            number,
            number
        ];
    };
    buildRuntimeCall: (api: string, method: string) => {
        args: Codec<any[]>;
        value: Codec<any>;
    };
    buildCall: (pallet: string, name: string) => {
        args: Codec<any>;
        location: [
            number,
            number
        ];
    };
    buildConstant: (pallet: string, constantName: string) => Codec<any>;
    ss58Prefix: number | undefined;
};

declare const getChecksumBuilder: (metadata: V15) => {
    buildDefinition: (id: number) => string | null;
    buildRuntimeCall: (api: string, method: string) => string | null;
    buildStorage: (pallet: string, entry: string) => string | null;
    buildCall: (pallet: string, name: string) => string | null;
    buildEvent: (pallet: string, name: string) => string | null;
    buildError: (pallet: string, name: string) => string | null;
    buildConstant: (pallet: string, constantName: string) => string | null;
    buildComposite: (input: VoidVar | TupleVar | StructVar) => string | null;
};

type UnshapedDecoder = {
    shape: Shape;
    decoder: Decoder<Decoded>;
};
type VariantBasedBuild = (pallet: string, name: string) => {
    view: UnshapedDecoder;
    location: [number, number];
};
type GetViewBuilder = (metadata: V15) => {
    buildDefinition: (idx: number) => {
        shape: Shape;
        decoder: Decoder<Decoded>;
    };
    callDecoder: Decoder<DecodedCall>;
    buildEvent: VariantBasedBuild;
    buildError: VariantBasedBuild;
    buildCall: VariantBasedBuild;
    buildConstant: (pallet: string, name: string) => UnshapedDecoder;
};
interface DecodedCall {
    pallet: {
        value: {
            name: string;
            idx: number;
        };
        input: HexString;
    };
    call: {
        value: {
            name: string;
            idx: number;
        };
        input: HexString;
        docs: string[];
    };
    args: {
        value: StructDecoded;
        shape: Shape;
    };
}
type WithInputAndPath<T> = T & {
    input: HexString;
    path?: string[];
};
type VoidDecoded = WithInputAndPath<{
    codec: "_void";
    value: undefined;
}>;
type BoolDecoded = WithInputAndPath<{
    codec: "bool";
    value: boolean;
}>;
type StringDecoded = WithInputAndPath<{
    codec: "str" | "char";
    value: string;
}>;
type NumberDecoded = WithInputAndPath<{
    codec: "u8" | "u16" | "u32" | "i8" | "i16" | "i32" | "compactNumber";
    value: number;
}>;
type BigNumberDecoded = WithInputAndPath<{
    codec: "u64" | "u128" | "u256" | "i64" | "i128" | "i256" | "compactBn";
    value: bigint;
}>;
type BitSequenceDecoded = WithInputAndPath<{
    codec: "bitSequence";
    value: {
        bitsLen: number;
        bytes: Uint8Array;
    };
}>;
type BytesSequenceDecoded = WithInputAndPath<{
    codec: "Bytes";
    value: HexString;
}>;
type BytesArrayDecoded = WithInputAndPath<{
    codec: "BytesArray";
    value: HexString;
    len: number;
}>;
type AccountIdDecoded = WithInputAndPath<{
    codec: "AccountId";
    value: {
        ss58Prefix: number;
        address: string;
    };
}>;
type PrimitiveDecoded = VoidDecoded | BoolDecoded | StringDecoded | NumberDecoded | BigNumberDecoded | BitSequenceDecoded | BytesSequenceDecoded | BytesArrayDecoded | AccountIdDecoded;
type SequenceDecoded = WithInputAndPath<{
    codec: "Sequence";
    value: Array<Decoded>;
}>;
type ArrayDecoded = WithInputAndPath<{
    codec: "Array";
    value: Array<Decoded>;
}>;
type OptionDecoded = WithInputAndPath<{
    codec: "Option";
    value: Decoded;
}>;
type ResultDecoded = WithInputAndPath<{
    codec: "Result";
    value: ResultPayload<Decoded, Decoded>;
}>;
type TupleDecoded = WithInputAndPath<{
    codec: "Tuple";
    value: Array<Decoded>;
    innerDocs: Array<string[]>;
}>;
type StructDecoded = WithInputAndPath<{
    codec: "Struct";
    value: StringRecord<Decoded>;
    innerDocs: StringRecord<string[]>;
}>;
type EnumDecoded = WithInputAndPath<{
    codec: "Enum";
    value: {
        type: string;
        value: Decoded;
    };
    docs: string[];
}>;
type ComplexDecoded = SequenceDecoded | ArrayDecoded | TupleDecoded | StructDecoded | OptionDecoded | ResultDecoded | EnumDecoded;
type Decoded = PrimitiveDecoded | ComplexDecoded;
interface SequenceShape {
    codec: "Sequence";
    shape: Shape;
}
interface ArrayShape {
    codec: "Array";
    len: number;
    shape: Shape;
}
interface TupleShape {
    codec: "Tuple";
    shape: Array<Shape>;
}
interface StructShape {
    codec: "Struct";
    shape: StringRecord<Shape>;
}
interface OptionShape {
    codec: "Option";
    shape: Shape;
}
interface ResultShape {
    codec: "Result";
    shape: {
        ok: Shape;
        ko: Shape;
    };
}
interface EnumShape {
    codec: "Enum";
    shape: StringRecord<Shape>;
}
type ComplexShape = SequenceShape | ArrayShape | TupleShape | StructShape | OptionShape | ResultShape | EnumShape;
type Shape = {
    codec: PrimitiveDecoded["codec"];
} | ComplexShape;

declare const getViewBuilder: GetViewBuilder;

export { type AccountId32, type AccountIdDecoded, type ArrayDecoded, type ArrayShape, type ArrayVar, type BigNumberDecoded, type BitSequenceDecoded, type BitSequenceVar, type BoolDecoded, type BytesArrayDecoded, type BytesSequenceDecoded, type CodeDeclarations, type CompactVar, type ComplexDecoded, type ComplexShape, type ComposedVar, type Decoded, type DecodedCall, type EnumDecoded, type EnumShape, type EnumVar, type GetViewBuilder, type LookupEntry, type MetadataPrimitives$1 as MetadataPrimitives, type NumberDecoded, type OptionDecoded, type OptionShape, type OptionVar, type PrimitiveDecoded, type PrimitiveVar, type ResultDecoded, type ResultShape, type ResultVar, type SequenceDecoded, type SequenceShape, type SequenceVar, type Shape, type StringDecoded, type StructDecoded, type StructShape, type StructVar, type TerminalVar, type TupleDecoded, type TupleShape, type TupleVar, type UnshapedDecoder, type Var, type Variable, type VoidDecoded, type VoidVar, getChecksumBuilder, getDynamicBuilder, getLookupFn, getStaticBuilder, getViewBuilder, primitiveTypes };
