{"ast":null,"code":"import { map, of, startWith } from 'rxjs';\nimport { memo } from '../util/index.js';\nlet indicesCache = null;\nfunction queryAccounts(api) {\n  return api.query.indices.accounts.entries().pipe(map(entries => entries.reduce((indexes, _ref) => {\n    let [key, idOpt] = _ref;\n    if (idOpt.isSome) {\n      indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);\n    }\n    return indexes;\n  }, {})));\n}\n/**\n * @name indexes\n * @returns Returns all the indexes on the system.\n * @description This is an unwieldly query since it loops through\n * all of the enumsets and returns all of the values found. This could be up to 32k depending\n * on the number of active accounts in the system\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.indexes((indexes) => {\n *   console.log('All existing AccountIndexes', indexes);\n * });\n * ```\n */\nexport function indexes(instanceId, api) {\n  return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map(indices => {\n    indicesCache = indices;\n    return indices;\n  })));\n}","map":{"version":3,"names":["map","of","startWith","memo","indicesCache","queryAccounts","api","query","indices","accounts","entries","pipe","reduce","indexes","_ref","key","idOpt","isSome","unwrap","toString","registry","createType","args","instanceId"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/accounts/indexes.js"],"sourcesContent":["import { map, of, startWith } from 'rxjs';\nimport { memo } from '../util/index.js';\nlet indicesCache = null;\nfunction queryAccounts(api) {\n    return api.query.indices.accounts.entries().pipe(map((entries) => entries.reduce((indexes, [key, idOpt]) => {\n        if (idOpt.isSome) {\n            indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);\n        }\n        return indexes;\n    }, {})));\n}\n/**\n * @name indexes\n * @returns Returns all the indexes on the system.\n * @description This is an unwieldly query since it loops through\n * all of the enumsets and returns all of the values found. This could be up to 32k depending\n * on the number of active accounts in the system\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.indexes((indexes) => {\n *   console.log('All existing AccountIndexes', indexes);\n * });\n * ```\n */\nexport function indexes(instanceId, api) {\n    return memo(instanceId, () => indicesCache\n        ? of(indicesCache)\n        : (api.query.indices\n            ? queryAccounts(api).pipe(startWith({}))\n            : of({})).pipe(map((indices) => {\n            indicesCache = indices;\n            return indices;\n        })));\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACzC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,IAAIC,YAAY,GAAG,IAAI;AACvB,SAASC,aAAaA,CAACC,GAAG,EAAE;EACxB,OAAOA,GAAG,CAACC,KAAK,CAACC,OAAO,CAACC,QAAQ,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAACX,GAAG,CAAEU,OAAO,IAAKA,OAAO,CAACE,MAAM,CAAC,CAACC,OAAO,EAAAC,IAAA,KAAmB;IAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA;IACnG,IAAIE,KAAK,CAACC,MAAM,EAAE;MACdJ,OAAO,CAACG,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAGb,GAAG,CAACc,QAAQ,CAACC,UAAU,CAAC,cAAc,EAAEN,GAAG,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;IAChG;IACA,OAAOT,OAAO;EAClB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,OAAOA,CAACU,UAAU,EAAEjB,GAAG,EAAE;EACrC,OAAOH,IAAI,CAACoB,UAAU,EAAE,MAAMnB,YAAY,GACpCH,EAAE,CAACG,YAAY,CAAC,GAChB,CAACE,GAAG,CAACC,KAAK,CAACC,OAAO,GACdH,aAAa,CAACC,GAAG,CAAC,CAACK,IAAI,CAACT,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GACtCD,EAAE,CAAC,CAAC,CAAC,CAAC,EAAEU,IAAI,CAACX,GAAG,CAAEQ,OAAO,IAAK;IAChCJ,YAAY,GAAGI,OAAO;IACtB,OAAOA,OAAO;EAClB,CAAC,CAAC,CAAC,CAAC;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}