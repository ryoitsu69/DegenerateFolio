{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines types related to user input with the WebDriver API.\n */\nconst {\n  Command,\n  Name\n} = require('./command');\nconst {\n  InvalidArgumentError\n} = require('./error');\n\n/**\n * Enumeration of the buttons used in the advanced interactions API.\n * @enum {number}\n */\nconst Button = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n  BACK: 3,\n  FORWARD: 4\n};\n\n/**\n * Representations of pressable keys that aren't text.  These are stored in\n * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to\n * http://www.google.com.au/search?&q=unicode+pua&btnK=Search\n *\n * @enum {string}\n * @see <https://www.w3.org/TR/webdriver/#keyboard-actions>\n */\nconst Key = {\n  NULL: '\\uE000',\n  CANCEL: '\\uE001',\n  // ^break\n  HELP: '\\uE002',\n  BACK_SPACE: '\\uE003',\n  TAB: '\\uE004',\n  CLEAR: '\\uE005',\n  RETURN: '\\uE006',\n  ENTER: '\\uE007',\n  SHIFT: '\\uE008',\n  CONTROL: '\\uE009',\n  ALT: '\\uE00A',\n  PAUSE: '\\uE00B',\n  ESCAPE: '\\uE00C',\n  SPACE: '\\uE00D',\n  PAGE_UP: '\\uE00E',\n  PAGE_DOWN: '\\uE00F',\n  END: '\\uE010',\n  HOME: '\\uE011',\n  ARROW_LEFT: '\\uE012',\n  LEFT: '\\uE012',\n  ARROW_UP: '\\uE013',\n  UP: '\\uE013',\n  ARROW_RIGHT: '\\uE014',\n  RIGHT: '\\uE014',\n  ARROW_DOWN: '\\uE015',\n  DOWN: '\\uE015',\n  INSERT: '\\uE016',\n  DELETE: '\\uE017',\n  SEMICOLON: '\\uE018',\n  EQUALS: '\\uE019',\n  NUMPAD0: '\\uE01A',\n  // number pad keys\n  NUMPAD1: '\\uE01B',\n  NUMPAD2: '\\uE01C',\n  NUMPAD3: '\\uE01D',\n  NUMPAD4: '\\uE01E',\n  NUMPAD5: '\\uE01F',\n  NUMPAD6: '\\uE020',\n  NUMPAD7: '\\uE021',\n  NUMPAD8: '\\uE022',\n  NUMPAD9: '\\uE023',\n  MULTIPLY: '\\uE024',\n  ADD: '\\uE025',\n  SEPARATOR: '\\uE026',\n  SUBTRACT: '\\uE027',\n  DECIMAL: '\\uE028',\n  DIVIDE: '\\uE029',\n  F1: '\\uE031',\n  // function keys\n  F2: '\\uE032',\n  F3: '\\uE033',\n  F4: '\\uE034',\n  F5: '\\uE035',\n  F6: '\\uE036',\n  F7: '\\uE037',\n  F8: '\\uE038',\n  F9: '\\uE039',\n  F10: '\\uE03A',\n  F11: '\\uE03B',\n  F12: '\\uE03C',\n  COMMAND: '\\uE03D',\n  // Apple command key\n  META: '\\uE03D',\n  // alias for Windows key\n\n  /**\n   * Japanese modifier key for switching between full- and half-width\n   * characters.\n   * @see <https://en.wikipedia.org/wiki/Language_input_keys>\n   */\n  ZENKAKU_HANKAKU: '\\uE040'\n};\n\n/**\n * Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n * {@linkplain Key keys} or strings, appends each of the values to a string,\n * adds the chord termination key ({@link Key.NULL}) and returns the resulting\n * string.\n *\n * Note: when the low-level webdriver key handlers see Keys.NULL, active\n * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n *\n * @param {...string} keys The key sequence to concatenate.\n * @return {string} The null-terminated key sequence.\n */\nKey.chord = function (...keys) {\n  return keys.join('') + Key.NULL;\n};\n\n/**\n * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on\n * file input elements (`<input type=\"file\">`) to detect when the entered key\n * sequence defines the path to a file.\n *\n * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all\n * key sequences exactly as entered. You may set a\n * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the\n * parent WebDriver instance to define custom behavior for handling file\n * elements. Of particular note is the\n * {@link selenium-webdriver/remote.FileDetector}, which should be used when\n * running against a remote\n * [Selenium Server](https://selenium.dev/downloads/).\n */\nclass FileDetector {\n  /**\n   * Handles the file specified by the given path, preparing it for use with\n   * the current browser. If the path does not refer to a valid file, it will\n   * be returned unchanged, otherwise a path suitable for use with the current\n   * browser will be returned.\n   *\n   * This default implementation is a no-op. Subtypes may override this function\n   * for custom tailored file handling.\n   *\n   * @param {!./webdriver.WebDriver} driver The driver for the current browser.\n   * @param {string} path The path to process.\n   * @return {!Promise<string>} A promise for the processed file path.\n   * @package\n   */\n  handleFile(_driver, path) {\n    // eslint-disable-line\n    return Promise.resolve(path);\n  }\n}\n\n/**\n * Generic description of a single action to send to the remote end.\n *\n * @record\n * @package\n */\nclass Action {\n  constructor() {\n    /** @type {!Action.Type} */\n    this.type;\n    /** @type {(number|undefined)} */\n    this.duration;\n    /** @type {(string|undefined)} */\n    this.value;\n    /** @type {(Button|undefined)} */\n    this.button;\n    /** @type {(number|undefined)} */\n    this.x;\n    /** @type {(number|undefined)} */\n    this.y;\n  }\n}\n\n/**\n * @enum {string}\n * @package\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#terminology-0>\n */\nAction.Type = {\n  KEY_DOWN: 'keyDown',\n  KEY_UP: 'keyUp',\n  PAUSE: 'pause',\n  POINTER_DOWN: 'pointerDown',\n  POINTER_UP: 'pointerUp',\n  POINTER_MOVE: 'pointerMove',\n  POINTER_CANCEL: 'pointerCancel',\n  SCROLL: 'scroll'\n};\n\n/**\n * Represents a user input device.\n *\n * @abstract\n */\nclass Device {\n  /**\n   * @param {Device.Type} type the input type.\n   * @param {string} id a unique ID for this device.\n   */\n  constructor(type, id) {\n    /** @private @const */this.type_ = type;\n    /** @private @const */\n    this.id_ = id;\n  }\n\n  /** @return {!Object} the JSON encoding for this device. */\n  toJSON() {\n    return {\n      type: this.type_,\n      id: this.id_\n    };\n  }\n}\n\n/**\n * Device types supported by the WebDriver protocol.\n *\n * @enum {string}\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#input-source-state>\n */\nDevice.Type = {\n  KEY: 'key',\n  NONE: 'none',\n  POINTER: 'pointer',\n  WHEEL: 'wheel'\n};\n\n/**\n * @param {(string|Key|number)} key\n * @return {string}\n * @throws {!(InvalidArgumentError|RangeError)}\n */\nfunction checkCodePoint(key) {\n  if (typeof key === 'number') {\n    return String.fromCodePoint(key);\n  }\n  if (typeof key !== 'string') {\n    throw new InvalidArgumentError(`key is not a string: ${key}`);\n  }\n  key = key.normalize();\n  if (Array.from(key).length !== 1) {\n    throw new InvalidArgumentError(`key input is not a single code point: ${key}`);\n  }\n  return key;\n}\n\n/**\n * Keyboard input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-key-input-source>\n */\nclass Keyboard extends Device {\n  /** @param {string} id the device ID. */\n  constructor(id) {\n    super(Device.Type.KEY, id);\n  }\n\n  /**\n   * Generates a key down action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key down action.\n   * @package\n   */\n  keyDown(key) {\n    return {\n      type: Action.Type.KEY_DOWN,\n      value: checkCodePoint(key)\n    };\n  }\n\n  /**\n   * Generates a key up action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key up action.\n   * @package\n   */\n  keyUp(key) {\n    return {\n      type: Action.Type.KEY_UP,\n      value: checkCodePoint(key)\n    };\n  }\n}\n\n/**\n * Defines the reference point from which to compute offsets for\n * {@linkplain ./input.Pointer#move pointer move} actions.\n *\n * @enum {string}\n */\nconst Origin = {\n  /** Compute offsets relative to the pointer's current position. */\n  POINTER: 'pointer',\n  /** Compute offsets relative to the viewport. */\n  VIEWPORT: 'viewport'\n};\n\n/**\n * Pointer input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-pointer-input-source>\n */\nclass Pointer extends Device {\n  /**\n   * @param {string} id the device ID.\n   * @param {Pointer.Type} type the pointer type.\n   */\n  constructor(id, type) {\n    super(Device.Type.POINTER, id);\n    /** @private @const */\n    this.pointerType_ = type;\n  }\n\n  /** @override */\n  toJSON() {\n    return Object.assign({\n      parameters: {\n        pointerType: this.pointerType_\n      }\n    }, super.toJSON());\n  }\n\n  /**\n   * @return {!Action} An action that cancels this pointer's current input.\n   * @package\n   */\n  cancel() {\n    return {\n      type: Action.Type.POINTER_CANCEL\n    };\n  }\n\n  /**\n   * @param {!Button=} button The button to press.\n   * @param width\n   * @param height\n   * @param pressure\n   * @param tangentialPressure\n   * @param tiltX\n   * @param tiltY\n   * @param twist\n   * @param altitudeAngle\n   * @param azimuthAngle\n   * @return {!Action} An action to press the specified button with this device.\n   * @package\n   */\n  press(button = Button.LEFT, width = 0, height = 0, pressure = 0, tangentialPressure = 0, tiltX = 0, tiltY = 0, twist = 0, altitudeAngle = 0, azimuthAngle = 0) {\n    return {\n      type: Action.Type.POINTER_DOWN,\n      button,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle\n    };\n  }\n\n  /**\n   * @param {!Button=} button The button to release.\n   * @return {!Action} An action to release the specified button with this\n   *     device.\n   * @package\n   */\n  release(button = Button.LEFT) {\n    return {\n      type: Action.Type.POINTER_UP,\n      button\n    };\n  }\n\n  /**\n   * Creates an action for moving the pointer `x` and `y` pixels from the\n   * specified `origin`. The `origin` may be defined as the pointer's\n   * {@linkplain Origin.POINTER current position}, the\n   * {@linkplain Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options the move options.\n   * @return {!Action} The new action.\n   * @package\n   */\n  move({\n    x = 0,\n    y = 0,\n    duration = 100,\n    origin = Origin.VIEWPORT,\n    width = 0,\n    height = 0,\n    pressure = 0,\n    tangentialPressure = 0,\n    tiltX = 0,\n    tiltY = 0,\n    twist = 0,\n    altitudeAngle = 0,\n    azimuthAngle = 0\n  }) {\n    return {\n      type: Action.Type.POINTER_MOVE,\n      origin,\n      duration,\n      x,\n      y,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle\n    };\n  }\n}\n\n/**\n * The supported types of pointers.\n * @enum {string}\n */\nPointer.Type = {\n  MOUSE: 'mouse',\n  PEN: 'pen',\n  TOUCH: 'touch'\n};\nclass Wheel extends Device {\n  /**\n   * @param {string} id the device ID..\n   */\n  constructor(id) {\n    super(Device.Type.WHEEL, id);\n  }\n\n  /**\n   * Scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltaX Delta X to scroll to target\n   * @param {number} deltaY Delta Y to scroll to target\n   * @param {WebElement} origin element origin\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Action} An action to scroll with this device.\n   */\n  scroll(x, y, deltaX, deltaY, origin, duration) {\n    return {\n      type: Action.Type.SCROLL,\n      duration: duration,\n      x: x,\n      y: y,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      origin: origin\n    };\n  }\n}\n\n/**\n * User facing API for generating complex user gestures. This class should not\n * be instantiated directly. Instead, users should create new instances by\n * calling {@link ./webdriver.WebDriver#actions WebDriver.actions()}.\n *\n * ### Action Ticks\n *\n * Action sequences are divided into a series of \"ticks\". At each tick, the\n * WebDriver remote end will perform a single action for each device included\n * in the action sequence. At tick 0, the driver will perform the first action\n * defined for each device, at tick 1 the second action for each device, and\n * so on until all actions have been executed. If an individual device does\n * not have an action defined at a particular tick, it will automatically\n * pause.\n *\n * By default, action sequences will be synchronized so only one device has a\n * define action in each tick. Consider the following code sample:\n *\n *     const actions = driver.actions();\n *\n *     await actions\n *         .keyDown(SHIFT)\n *         .move({origin: el})\n *         .press()\n *         .release()\n *         .keyUp(SHIFT)\n *         .perform();\n *\n * This sample produces the following sequence of ticks:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4    | Tick 5       |\n * | -------- | -------------- | ------------------ | ------- | --------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | pause()   | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release() | pause()      |\n *\n * If you'd like the remote end to execute actions with multiple devices\n * simultaneously, you may pass `{async: true}` when creating the actions\n * builder. With synchronization disabled (`{async: true}`), the ticks from our\n * previous example become:\n *\n * | Device   | Tick 1             | Tick 2       | Tick 3    |\n * | -------- | ------------------ | ------------ | --------- |\n * | Keyboard | keyDown(SHIFT)     | keyUp(SHIFT) |           |\n * | Mouse    | move({origin: el}) | press()      | release() |\n *\n * When synchronization is disabled, it is your responsibility to insert\n * {@linkplain #pause() pauses} for each device, as needed:\n *\n *     const actions = driver.actions({async: true});\n *     const kb = actions.keyboard();\n *     const mouse = actions.mouse();\n *\n *     actions.keyDown(SHIFT).pause(kb).pause(kb).key(SHIFT);\n *     actions.pause(mouse).move({origin: el}).press().release();\n *     actions.perform();\n *\n * With pauses insert for individual devices, we're back to:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4       |\n * | -------- | -------------- | ------------------ | ------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release()    |\n *\n * #### Tick Durations\n *\n * The length of each action tick is however long it takes the remote end to\n * execute the actions for every device in that tick. Most actions are\n * \"instantaneous\", however, {@linkplain #pause pause} and\n * {@linkplain #move pointer move} actions allow you to specify a duration for\n * how long that action should take. The remote end will always wait for all\n * actions within a tick to finish before starting the next tick, so a device\n * may implicitly pause while waiting for other devices to finish.\n *\n * | Device    | Tick 1                | Tick 2  |\n * | --------- | --------------------- | ------- |\n * | Pointer 1 | move({duration: 200}) | press() |\n * | Pointer 2 | move({duration: 300}) | press() |\n *\n * In table above, the move for Pointer 1 should only take 200 ms, but the\n * remote end will wait for the move for Pointer 2 to finish\n * (an additional 100 ms) before proceeding to Tick 2.\n *\n * This implicit waiting also applies to pauses. In the table below, even though\n * the keyboard only defines a pause of 100 ms, the remote end will wait an\n * additional 200 ms for the mouse move to finish before moving to Tick 2.\n *\n * | Device   | Tick 1                | Tick 2         |\n * | -------- | --------------------- | -------------- |\n * | Keyboard | pause(100)            | keyDown(SHIFT) |\n * | Mouse    | move({duration: 300}) |                |\n *\n * [client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\n * [bounding client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#actions>\n */\nclass Actions {\n  /**\n   * @param {!Executor} executor The object to execute the configured\n   *     actions with.\n   * @param {{async: (boolean|undefined)}} options Options for this action\n   *     sequence (see class description for details).\n   */\n  constructor(executor, {\n    async = false\n  } = {}) {\n    /** @private @const */\n    this.executor_ = executor;\n\n    /** @private @const */\n    this.sync_ = !async;\n\n    /** @private @const */\n    this.keyboard_ = new Keyboard('default keyboard');\n\n    /** @private @const */\n    this.mouse_ = new Pointer('default mouse', Pointer.Type.MOUSE);\n\n    /** @private @const */\n    this.wheel_ = new Wheel('default wheel');\n\n    /** @private @const {!Map<!Device, !Array<!Action>>} */\n    this.sequences_ = new Map([[this.keyboard_, []], [this.mouse_, []], [this.wheel_, []]]);\n  }\n\n  /** @return {!Keyboard} the keyboard device handle. */\n  keyboard() {\n    return this.keyboard_;\n  }\n\n  /** @return {!Pointer} the mouse pointer device handle. */\n  mouse() {\n    return this.mouse_;\n  }\n\n  /** @return {!Wheel} the wheel device handle. */\n  wheel() {\n    return this.wheel_;\n  }\n\n  /**\n   * @param {!Device} device\n   * @return {!Array<!Action>}\n   * @private\n   */\n  sequence_(device) {\n    let sequence = this.sequences_.get(device);\n    if (!sequence) {\n      sequence = [];\n      this.sequences_.set(device, sequence);\n    }\n    return sequence;\n  }\n\n  /**\n   * Appends `actions` to the end of the current sequence for the given\n   * `device`. If device synchronization is enabled, after inserting the\n   * actions, pauses will be inserted for all other devices to ensure all action\n   * sequences are the same length.\n   *\n   * @param {!Device} device the device to update.\n   * @param {...!Action} actions the actions to insert.\n   * @return {!Actions} a self reference.\n   */\n  insert(device, ...actions) {\n    this.sequence_(device).push(...actions);\n    return this.sync_ ? this.synchronize() : this;\n  }\n\n  /**\n   * Ensures the action sequence for every device referenced in this action\n   * sequence is the same length. For devices whose sequence is too short,\n   * this will insert {@linkplain #pause pauses} so that every device has an\n   * explicit action defined at each tick.\n   *\n   * @param {...!Device} devices The specific devices to synchronize.\n   *     If unspecified, the action sequences for every device will be\n   *     synchronized.\n   * @return {!Actions} a self reference.\n   */\n  synchronize(...devices) {\n    let sequences;\n    let max = 0;\n    if (devices.length === 0) {\n      for (const s of this.sequences_.values()) {\n        max = Math.max(max, s.length);\n      }\n      sequences = this.sequences_.values();\n    } else {\n      sequences = [];\n      for (const device of devices) {\n        const seq = this.sequence_(device);\n        max = Math.max(max, seq.length);\n        sequences.push(seq);\n      }\n    }\n    const pause = {\n      type: Action.Type.PAUSE,\n      duration: 0\n    };\n    for (const seq of sequences) {\n      while (seq.length < max) {\n        seq.push(pause);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Inserts a pause action for the specified devices, ensuring each device is\n   * idle for a tick. The length of the pause (in milliseconds) may be specified\n   * as the first parameter to this method (defaults to 0). Otherwise, you may\n   * just specify the individual devices that should pause.\n   *\n   * If no devices are specified, a pause action will be created (using the same\n   * duration) for every device.\n   *\n   * When device synchronization is enabled (the default for new {@link Actions}\n   * objects), there is no need to specify devices as pausing one automatically\n   * pauses the others for the same duration. In other words, the following are\n   * all equivalent:\n   *\n   *     let a1 = driver.actions();\n   *     a1.pause(100).perform();\n   *\n   *     let a2 = driver.actions();\n   *     a2.pause(100, a2.keyboard()).perform();\n   *     // Synchronization ensures a2.mouse() is automatically paused too.\n   *\n   *     let a3 = driver.actions();\n   *     a3.pause(100, a3.keyboard(), a3.mouse()).perform();\n   *\n   * When device synchronization is _disabled_, you can cause individual devices\n   * to pause during a tick. For example, to hold the SHIFT key down while\n   * moving the mouse:\n   *\n   *     let actions = driver.actions({async: true});\n   *\n   *     actions.keyDown(Key.SHIFT);\n   *     actions.pause(actions.mouse())  // Pause for shift down\n   *         .press(Button.LEFT)\n   *         .move({x: 10, y: 10})\n   *         .release(Button.LEFT);\n   *     actions\n   *         .pause(\n   *             actions.keyboard(),  // Pause for press left\n   *             actions.keyboard(),  // Pause for move\n   *             actions.keyboard())  // Pause for release left\n   *        .keyUp(Key.SHIFT);\n   *     await actions.perform();\n   *\n   * @param {(number|!Device)=} duration The length of the pause to insert, in\n   *     milliseconds. Alternatively, the duration may be omitted (yielding a\n   *     default 0 ms pause), and the first device to pause may be specified.\n   * @param {...!Device} devices The devices to insert the pause for. If no\n   *     devices are specified, the pause will be inserted for _all_ devices.\n   * @return {!Actions} a self reference.\n   */\n  pause(duration, ...devices) {\n    if (duration instanceof Device) {\n      devices.push(duration);\n      duration = 0;\n    } else if (!duration) {\n      duration = 0;\n    }\n    const action = {\n      type: Action.Type.PAUSE,\n      duration\n    };\n\n    // NB: need a properly typed variable for type checking.\n    /** @type {!Iterable<!Device>} */\n    const iterable = devices.length === 0 ? this.sequences_.keys() : devices;\n    for (const device of iterable) {\n      this.sequence_(device).push(action);\n    }\n    return this.sync_ ? this.synchronize() : this;\n  }\n\n  /**\n   * Inserts an action to press a single key.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyDown(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyDown(key));\n  }\n\n  /**\n   * Inserts an action to release a single key.\n   *\n   * @param {(Key|string|number)} key the key to release. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyUp(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyUp(key));\n  }\n\n  /**\n   * Inserts a sequence of actions to type the provided key sequence.\n   * For each key, this will record a pair of {@linkplain #keyDown keyDown}\n   * and {@linkplain #keyUp keyUp} actions. An implication of this pairing\n   * is that modifier keys (e.g. {@link ./input.Key.SHIFT Key.SHIFT}) will\n   * always be immediately released. In other words, `sendKeys(Key.SHIFT, 'a')`\n   * is the same as typing `sendKeys('a')`, _not_ `sendKeys('A')`.\n   *\n   * @param {...(Key|string|number)} keys the keys to type.\n   * @return {!Actions} a self reference.\n   */\n  sendKeys(...keys) {\n    const {\n      WebElement\n    } = require('./webdriver');\n    const actions = [];\n    if (keys.length > 1 && keys[0] instanceof WebElement) {\n      this.click(keys[0]);\n      keys.shift();\n    }\n    for (const key of keys) {\n      if (typeof key === 'string') {\n        for (const symbol of key) {\n          actions.push(this.keyboard_.keyDown(symbol), this.keyboard_.keyUp(symbol));\n        }\n      } else {\n        actions.push(this.keyboard_.keyDown(key), this.keyboard_.keyUp(key));\n      }\n    }\n    return this.insert(this.keyboard_, ...actions);\n  }\n\n  /**\n   * Inserts an action to press a mouse button at the mouse's current location.\n   *\n   * @param {!Button=} button The button to press; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  press(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.press(button));\n  }\n\n  /**\n   * Inserts an action to release a mouse button at the mouse's current\n   * location.\n   *\n   * @param {!Button=} button The button to release; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  release(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.release(button));\n  }\n\n  /**\n   * scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltax delta x to scroll to target\n   * @param {number} deltay delta y to scroll to target\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Actions} An action to scroll with this device.\n   */\n  scroll(x, y, targetDeltaX, targetDeltaY, origin, duration) {\n    return this.insert(this.wheel_, this.wheel_.scroll(x, y, targetDeltaX, targetDeltaY, origin, duration));\n  }\n\n  /**\n   * Inserts an action for moving the mouse `x` and `y` pixels relative to the\n   * specified `origin`. The `origin` may be defined as the mouse's\n   * {@linkplain ./input.Origin.POINTER current position}, the top-left corner of the\n   * {@linkplain ./input.Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}. Default is top left corner of the view-port if origin is not specified\n   *\n   * You may adjust how long the remote end should take, in milliseconds, to\n   * perform the move using the `duration` parameter (defaults to 100 ms).\n   * The number of incremental move events generated over this duration is an\n   * implementation detail for the remote end.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options The move options. Defaults to moving the mouse to the top-left\n   *     corner of the viewport over 100ms.\n   * @return {!Actions} a self reference.\n   */\n  move({\n    x = 0,\n    y = 0,\n    duration = 100,\n    origin = Origin.VIEWPORT\n  } = {}) {\n    return this.insert(this.mouse_, this.mouse_.move({\n      x,\n      y,\n      duration,\n      origin\n    }));\n  }\n\n  /**\n   * Short-hand for performing a simple left-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  click(element) {\n    if (element) {\n      this.move({\n        origin: element\n      });\n    }\n    return this.press().release();\n  }\n\n  /**\n   * Short-hand for performing a simple right-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  contextClick(element) {\n    if (element) {\n      this.move({\n        origin: element\n      });\n    }\n    return this.press(Button.RIGHT).release(Button.RIGHT);\n  }\n\n  /**\n   * Short-hand for performing a double left-click with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  doubleClick(element) {\n    return this.click(element).press().release();\n  }\n\n  /**\n   * Configures a drag-and-drop action consisting of the following steps:\n   *\n   * 1.  Move to the center of the `from` element (element to be dragged).\n   * 2.  Press the left mouse button.\n   * 3.  If the `to` target is a {@linkplain ./webdriver.WebElement WebElement},\n   *     move the mouse to its center. Otherwise, move the mouse by the\n   *     specified offset.\n   * 4.  Release the left mouse button.\n   *\n   * @param {!./webdriver.WebElement} from The element to press the left mouse\n   *     button on to start the drag.\n   * @param {(!./webdriver.WebElement|{x: number, y: number})} to Either another\n   *     element to drag to (will drag to the center of the element), or an\n   *     object specifying the offset to drag by, in pixels.\n   * @return {!Actions} a self reference.\n   */\n  dragAndDrop(from, to) {\n    // Do not require up top to avoid a cycle that breaks static analysis.\n    const {\n      WebElement\n    } = require('./webdriver');\n    if (!(to instanceof WebElement) && (!to || typeof to.x !== 'number' || typeof to.y !== 'number')) {\n      throw new InvalidArgumentError('Invalid drag target; must specify a WebElement or {x, y} offset');\n    }\n    this.move({\n      origin: from\n    }).press();\n    if (to instanceof WebElement) {\n      this.move({\n        origin: to\n      });\n    } else {\n      this.move({\n        x: to.x,\n        y: to.y,\n        origin: Origin.POINTER\n      });\n    }\n    return this.release();\n  }\n\n  /**\n   * Releases all keys, pointers, and clears internal state.\n   *\n   * @return {!Promise<void>} a promise that will resolve when finished\n   *     clearing all action state.\n   */\n  clear() {\n    for (const s of this.sequences_.values()) {\n      s.length = 0;\n    }\n    return this.executor_.execute(new Command(Name.CLEAR_ACTIONS));\n  }\n\n  /**\n   * Performs the configured action sequence.\n   *\n   * @return {!Promise<void>} a promise that will resolve when all actions have\n   *     been completed.\n   */\n  async perform() {\n    const _actions = [];\n    this.sequences_.forEach((actions, device) => {\n      if (!isIdle(actions)) {\n        actions = actions.concat(); // Defensive copy.\n        _actions.push(Object.assign({\n          actions\n        }, device.toJSON()));\n      }\n    });\n    if (_actions.length === 0) {\n      return Promise.resolve();\n    }\n    await this.executor_.execute(new Command(Name.ACTIONS).setParameter('actions', _actions));\n  }\n  getSequences() {\n    const _actions = [];\n    this.sequences_.forEach((actions, device) => {\n      if (!isIdle(actions)) {\n        actions = actions.concat();\n        _actions.push(Object.assign({\n          actions\n        }, device.toJSON()));\n      }\n    });\n    return _actions;\n  }\n}\n\n/**\n * @param {!Array<!Action>} actions\n * @return {boolean}\n */\nfunction isIdle(actions) {\n  return actions.length === 0 || actions.every(a => a.type === Action.Type.PAUSE && !a.duration);\n}\n\n/**\n * Script used to compute the offset from the center of a DOM element's first\n * client rect from the top-left corner of the element's bounding client rect.\n * The element's center point is computed using the algorithm defined here:\n * <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-center-point>.\n *\n * __This is only exported for use in internal unit tests. DO NOT USE.__\n *\n * @package\n */\nconst INTERNAL_COMPUTE_OFFSET_SCRIPT = `\nfunction computeOffset(el) {\n  var rect = el.getClientRects()[0];\n  var left = Math.max(0, Math.min(rect.x, rect.x + rect.width));\n  var right =\n      Math.min(window.innerWidth, Math.max(rect.x, rect.x + rect.width));\n  var top = Math.max(0, Math.min(rect.y, rect.y + rect.height));\n  var bot =\n      Math.min(window.innerHeight, Math.max(rect.y, rect.y + rect.height));\n  var x = Math.floor(0.5 * (left + right));\n  var y = Math.floor(0.5 * (top + bot));\n\n  var bbox = el.getBoundingClientRect();\n  return [x - bbox.left, y - bbox.top];\n}\nreturn computeOffset(arguments[0]);`;\n\n// PUBLIC API\n\nmodule.exports = {\n  Action,\n  // For documentation only.\n  Actions,\n  Button,\n  Device,\n  Key,\n  Keyboard,\n  FileDetector,\n  Origin,\n  Pointer,\n  INTERNAL_COMPUTE_OFFSET_SCRIPT\n};","map":{"version":3,"names":["Command","Name","require","InvalidArgumentError","Button","LEFT","MIDDLE","RIGHT","BACK","FORWARD","Key","NULL","CANCEL","HELP","BACK_SPACE","TAB","CLEAR","RETURN","ENTER","SHIFT","CONTROL","ALT","PAUSE","ESCAPE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","ARROW_LEFT","ARROW_UP","UP","ARROW_RIGHT","ARROW_DOWN","DOWN","INSERT","DELETE","SEMICOLON","EQUALS","NUMPAD0","NUMPAD1","NUMPAD2","NUMPAD3","NUMPAD4","NUMPAD5","NUMPAD6","NUMPAD7","NUMPAD8","NUMPAD9","MULTIPLY","ADD","SEPARATOR","SUBTRACT","DECIMAL","DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","COMMAND","META","ZENKAKU_HANKAKU","chord","keys","join","FileDetector","handleFile","_driver","path","Promise","resolve","Action","constructor","type","duration","value","button","x","y","Type","KEY_DOWN","KEY_UP","POINTER_DOWN","POINTER_UP","POINTER_MOVE","POINTER_CANCEL","SCROLL","Device","id","type_","id_","toJSON","KEY","NONE","POINTER","WHEEL","checkCodePoint","key","String","fromCodePoint","normalize","Array","from","length","Keyboard","keyDown","keyUp","Origin","VIEWPORT","Pointer","pointerType_","Object","assign","parameters","pointerType","cancel","press","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","altitudeAngle","azimuthAngle","release","move","origin","MOUSE","PEN","TOUCH","Wheel","scroll","deltaX","deltaY","Actions","executor","async","executor_","sync_","keyboard_","mouse_","wheel_","sequences_","Map","keyboard","mouse","wheel","sequence_","device","sequence","get","set","insert","actions","push","synchronize","devices","sequences","max","s","values","Math","seq","pause","action","iterable","sendKeys","WebElement","click","shift","symbol","targetDeltaX","targetDeltaY","element","contextClick","doubleClick","dragAndDrop","to","clear","execute","CLEAR_ACTIONS","perform","_actions","forEach","isIdle","concat","ACTIONS","setParameter","getSequences","every","a","INTERNAL_COMPUTE_OFFSET_SCRIPT","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/lib/input.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\n/**\n * @fileoverview Defines types related to user input with the WebDriver API.\n */\nconst { Command, Name } = require('./command')\nconst { InvalidArgumentError } = require('./error')\n\n/**\n * Enumeration of the buttons used in the advanced interactions API.\n * @enum {number}\n */\nconst Button = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n  BACK: 3,\n  FORWARD: 4,\n}\n\n/**\n * Representations of pressable keys that aren't text.  These are stored in\n * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to\n * http://www.google.com.au/search?&q=unicode+pua&btnK=Search\n *\n * @enum {string}\n * @see <https://www.w3.org/TR/webdriver/#keyboard-actions>\n */\nconst Key = {\n  NULL: '\\uE000',\n  CANCEL: '\\uE001', // ^break\n  HELP: '\\uE002',\n  BACK_SPACE: '\\uE003',\n  TAB: '\\uE004',\n  CLEAR: '\\uE005',\n  RETURN: '\\uE006',\n  ENTER: '\\uE007',\n  SHIFT: '\\uE008',\n  CONTROL: '\\uE009',\n  ALT: '\\uE00A',\n  PAUSE: '\\uE00B',\n  ESCAPE: '\\uE00C',\n  SPACE: '\\uE00D',\n  PAGE_UP: '\\uE00E',\n  PAGE_DOWN: '\\uE00F',\n  END: '\\uE010',\n  HOME: '\\uE011',\n  ARROW_LEFT: '\\uE012',\n  LEFT: '\\uE012',\n  ARROW_UP: '\\uE013',\n  UP: '\\uE013',\n  ARROW_RIGHT: '\\uE014',\n  RIGHT: '\\uE014',\n  ARROW_DOWN: '\\uE015',\n  DOWN: '\\uE015',\n  INSERT: '\\uE016',\n  DELETE: '\\uE017',\n  SEMICOLON: '\\uE018',\n  EQUALS: '\\uE019',\n\n  NUMPAD0: '\\uE01A', // number pad keys\n  NUMPAD1: '\\uE01B',\n  NUMPAD2: '\\uE01C',\n  NUMPAD3: '\\uE01D',\n  NUMPAD4: '\\uE01E',\n  NUMPAD5: '\\uE01F',\n  NUMPAD6: '\\uE020',\n  NUMPAD7: '\\uE021',\n  NUMPAD8: '\\uE022',\n  NUMPAD9: '\\uE023',\n  MULTIPLY: '\\uE024',\n  ADD: '\\uE025',\n  SEPARATOR: '\\uE026',\n  SUBTRACT: '\\uE027',\n  DECIMAL: '\\uE028',\n  DIVIDE: '\\uE029',\n\n  F1: '\\uE031', // function keys\n  F2: '\\uE032',\n  F3: '\\uE033',\n  F4: '\\uE034',\n  F5: '\\uE035',\n  F6: '\\uE036',\n  F7: '\\uE037',\n  F8: '\\uE038',\n  F9: '\\uE039',\n  F10: '\\uE03A',\n  F11: '\\uE03B',\n  F12: '\\uE03C',\n\n  COMMAND: '\\uE03D', // Apple command key\n  META: '\\uE03D', // alias for Windows key\n\n  /**\n   * Japanese modifier key for switching between full- and half-width\n   * characters.\n   * @see <https://en.wikipedia.org/wiki/Language_input_keys>\n   */\n  ZENKAKU_HANKAKU: '\\uE040',\n}\n\n/**\n * Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n * {@linkplain Key keys} or strings, appends each of the values to a string,\n * adds the chord termination key ({@link Key.NULL}) and returns the resulting\n * string.\n *\n * Note: when the low-level webdriver key handlers see Keys.NULL, active\n * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n *\n * @param {...string} keys The key sequence to concatenate.\n * @return {string} The null-terminated key sequence.\n */\nKey.chord = function (...keys) {\n  return keys.join('') + Key.NULL\n}\n\n/**\n * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on\n * file input elements (`<input type=\"file\">`) to detect when the entered key\n * sequence defines the path to a file.\n *\n * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all\n * key sequences exactly as entered. You may set a\n * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the\n * parent WebDriver instance to define custom behavior for handling file\n * elements. Of particular note is the\n * {@link selenium-webdriver/remote.FileDetector}, which should be used when\n * running against a remote\n * [Selenium Server](https://selenium.dev/downloads/).\n */\nclass FileDetector {\n  /**\n   * Handles the file specified by the given path, preparing it for use with\n   * the current browser. If the path does not refer to a valid file, it will\n   * be returned unchanged, otherwise a path suitable for use with the current\n   * browser will be returned.\n   *\n   * This default implementation is a no-op. Subtypes may override this function\n   * for custom tailored file handling.\n   *\n   * @param {!./webdriver.WebDriver} driver The driver for the current browser.\n   * @param {string} path The path to process.\n   * @return {!Promise<string>} A promise for the processed file path.\n   * @package\n   */\n  handleFile(_driver, path) {\n    // eslint-disable-line\n    return Promise.resolve(path)\n  }\n}\n\n/**\n * Generic description of a single action to send to the remote end.\n *\n * @record\n * @package\n */\nclass Action {\n  constructor() {\n    /** @type {!Action.Type} */\n    this.type\n    /** @type {(number|undefined)} */\n    this.duration\n    /** @type {(string|undefined)} */\n    this.value\n    /** @type {(Button|undefined)} */\n    this.button\n    /** @type {(number|undefined)} */\n    this.x\n    /** @type {(number|undefined)} */\n    this.y\n  }\n}\n\n/**\n * @enum {string}\n * @package\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#terminology-0>\n */\nAction.Type = {\n  KEY_DOWN: 'keyDown',\n  KEY_UP: 'keyUp',\n  PAUSE: 'pause',\n  POINTER_DOWN: 'pointerDown',\n  POINTER_UP: 'pointerUp',\n  POINTER_MOVE: 'pointerMove',\n  POINTER_CANCEL: 'pointerCancel',\n  SCROLL: 'scroll',\n}\n\n/**\n * Represents a user input device.\n *\n * @abstract\n */\nclass Device {\n  /**\n   * @param {Device.Type} type the input type.\n   * @param {string} id a unique ID for this device.\n   */\n  constructor(type, id) {\n    /** @private @const */ this.type_ = type\n    /** @private @const */ this.id_ = id\n  }\n\n  /** @return {!Object} the JSON encoding for this device. */\n  toJSON() {\n    return { type: this.type_, id: this.id_ }\n  }\n}\n\n/**\n * Device types supported by the WebDriver protocol.\n *\n * @enum {string}\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#input-source-state>\n */\nDevice.Type = {\n  KEY: 'key',\n  NONE: 'none',\n  POINTER: 'pointer',\n  WHEEL: 'wheel',\n}\n\n/**\n * @param {(string|Key|number)} key\n * @return {string}\n * @throws {!(InvalidArgumentError|RangeError)}\n */\nfunction checkCodePoint(key) {\n  if (typeof key === 'number') {\n    return String.fromCodePoint(key)\n  }\n\n  if (typeof key !== 'string') {\n    throw new InvalidArgumentError(`key is not a string: ${key}`)\n  }\n\n  key = key.normalize()\n  if (Array.from(key).length !== 1) {\n    throw new InvalidArgumentError(`key input is not a single code point: ${key}`)\n  }\n  return key\n}\n\n/**\n * Keyboard input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-key-input-source>\n */\nclass Keyboard extends Device {\n  /** @param {string} id the device ID. */\n  constructor(id) {\n    super(Device.Type.KEY, id)\n  }\n\n  /**\n   * Generates a key down action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key down action.\n   * @package\n   */\n  keyDown(key) {\n    return { type: Action.Type.KEY_DOWN, value: checkCodePoint(key) }\n  }\n\n  /**\n   * Generates a key up action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key up action.\n   * @package\n   */\n  keyUp(key) {\n    return { type: Action.Type.KEY_UP, value: checkCodePoint(key) }\n  }\n}\n\n/**\n * Defines the reference point from which to compute offsets for\n * {@linkplain ./input.Pointer#move pointer move} actions.\n *\n * @enum {string}\n */\nconst Origin = {\n  /** Compute offsets relative to the pointer's current position. */\n  POINTER: 'pointer',\n  /** Compute offsets relative to the viewport. */\n  VIEWPORT: 'viewport',\n}\n\n/**\n * Pointer input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-pointer-input-source>\n */\nclass Pointer extends Device {\n  /**\n   * @param {string} id the device ID.\n   * @param {Pointer.Type} type the pointer type.\n   */\n  constructor(id, type) {\n    super(Device.Type.POINTER, id)\n    /** @private @const */ this.pointerType_ = type\n  }\n\n  /** @override */\n  toJSON() {\n    return Object.assign({ parameters: { pointerType: this.pointerType_ } }, super.toJSON())\n  }\n\n  /**\n   * @return {!Action} An action that cancels this pointer's current input.\n   * @package\n   */\n  cancel() {\n    return { type: Action.Type.POINTER_CANCEL }\n  }\n\n  /**\n   * @param {!Button=} button The button to press.\n   * @param width\n   * @param height\n   * @param pressure\n   * @param tangentialPressure\n   * @param tiltX\n   * @param tiltY\n   * @param twist\n   * @param altitudeAngle\n   * @param azimuthAngle\n   * @return {!Action} An action to press the specified button with this device.\n   * @package\n   */\n  press(\n    button = Button.LEFT,\n    width = 0,\n    height = 0,\n    pressure = 0,\n    tangentialPressure = 0,\n    tiltX = 0,\n    tiltY = 0,\n    twist = 0,\n    altitudeAngle = 0,\n    azimuthAngle = 0,\n  ) {\n    return {\n      type: Action.Type.POINTER_DOWN,\n      button,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle,\n    }\n  }\n\n  /**\n   * @param {!Button=} button The button to release.\n   * @return {!Action} An action to release the specified button with this\n   *     device.\n   * @package\n   */\n  release(button = Button.LEFT) {\n    return { type: Action.Type.POINTER_UP, button }\n  }\n\n  /**\n   * Creates an action for moving the pointer `x` and `y` pixels from the\n   * specified `origin`. The `origin` may be defined as the pointer's\n   * {@linkplain Origin.POINTER current position}, the\n   * {@linkplain Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options the move options.\n   * @return {!Action} The new action.\n   * @package\n   */\n  move({\n    x = 0,\n    y = 0,\n    duration = 100,\n    origin = Origin.VIEWPORT,\n    width = 0,\n    height = 0,\n    pressure = 0,\n    tangentialPressure = 0,\n    tiltX = 0,\n    tiltY = 0,\n    twist = 0,\n    altitudeAngle = 0,\n    azimuthAngle = 0,\n  }) {\n    return {\n      type: Action.Type.POINTER_MOVE,\n      origin,\n      duration,\n      x,\n      y,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle,\n    }\n  }\n}\n\n/**\n * The supported types of pointers.\n * @enum {string}\n */\nPointer.Type = {\n  MOUSE: 'mouse',\n  PEN: 'pen',\n  TOUCH: 'touch',\n}\n\nclass Wheel extends Device {\n  /**\n   * @param {string} id the device ID..\n   */\n  constructor(id) {\n    super(Device.Type.WHEEL, id)\n  }\n\n  /**\n   * Scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltaX Delta X to scroll to target\n   * @param {number} deltaY Delta Y to scroll to target\n   * @param {WebElement} origin element origin\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Action} An action to scroll with this device.\n   */\n  scroll(x, y, deltaX, deltaY, origin, duration) {\n    return {\n      type: Action.Type.SCROLL,\n      duration: duration,\n      x: x,\n      y: y,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      origin: origin,\n    }\n  }\n}\n\n/**\n * User facing API for generating complex user gestures. This class should not\n * be instantiated directly. Instead, users should create new instances by\n * calling {@link ./webdriver.WebDriver#actions WebDriver.actions()}.\n *\n * ### Action Ticks\n *\n * Action sequences are divided into a series of \"ticks\". At each tick, the\n * WebDriver remote end will perform a single action for each device included\n * in the action sequence. At tick 0, the driver will perform the first action\n * defined for each device, at tick 1 the second action for each device, and\n * so on until all actions have been executed. If an individual device does\n * not have an action defined at a particular tick, it will automatically\n * pause.\n *\n * By default, action sequences will be synchronized so only one device has a\n * define action in each tick. Consider the following code sample:\n *\n *     const actions = driver.actions();\n *\n *     await actions\n *         .keyDown(SHIFT)\n *         .move({origin: el})\n *         .press()\n *         .release()\n *         .keyUp(SHIFT)\n *         .perform();\n *\n * This sample produces the following sequence of ticks:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4    | Tick 5       |\n * | -------- | -------------- | ------------------ | ------- | --------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | pause()   | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release() | pause()      |\n *\n * If you'd like the remote end to execute actions with multiple devices\n * simultaneously, you may pass `{async: true}` when creating the actions\n * builder. With synchronization disabled (`{async: true}`), the ticks from our\n * previous example become:\n *\n * | Device   | Tick 1             | Tick 2       | Tick 3    |\n * | -------- | ------------------ | ------------ | --------- |\n * | Keyboard | keyDown(SHIFT)     | keyUp(SHIFT) |           |\n * | Mouse    | move({origin: el}) | press()      | release() |\n *\n * When synchronization is disabled, it is your responsibility to insert\n * {@linkplain #pause() pauses} for each device, as needed:\n *\n *     const actions = driver.actions({async: true});\n *     const kb = actions.keyboard();\n *     const mouse = actions.mouse();\n *\n *     actions.keyDown(SHIFT).pause(kb).pause(kb).key(SHIFT);\n *     actions.pause(mouse).move({origin: el}).press().release();\n *     actions.perform();\n *\n * With pauses insert for individual devices, we're back to:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4       |\n * | -------- | -------------- | ------------------ | ------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release()    |\n *\n * #### Tick Durations\n *\n * The length of each action tick is however long it takes the remote end to\n * execute the actions for every device in that tick. Most actions are\n * \"instantaneous\", however, {@linkplain #pause pause} and\n * {@linkplain #move pointer move} actions allow you to specify a duration for\n * how long that action should take. The remote end will always wait for all\n * actions within a tick to finish before starting the next tick, so a device\n * may implicitly pause while waiting for other devices to finish.\n *\n * | Device    | Tick 1                | Tick 2  |\n * | --------- | --------------------- | ------- |\n * | Pointer 1 | move({duration: 200}) | press() |\n * | Pointer 2 | move({duration: 300}) | press() |\n *\n * In table above, the move for Pointer 1 should only take 200 ms, but the\n * remote end will wait for the move for Pointer 2 to finish\n * (an additional 100 ms) before proceeding to Tick 2.\n *\n * This implicit waiting also applies to pauses. In the table below, even though\n * the keyboard only defines a pause of 100 ms, the remote end will wait an\n * additional 200 ms for the mouse move to finish before moving to Tick 2.\n *\n * | Device   | Tick 1                | Tick 2         |\n * | -------- | --------------------- | -------------- |\n * | Keyboard | pause(100)            | keyDown(SHIFT) |\n * | Mouse    | move({duration: 300}) |                |\n *\n * [client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\n * [bounding client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#actions>\n */\nclass Actions {\n  /**\n   * @param {!Executor} executor The object to execute the configured\n   *     actions with.\n   * @param {{async: (boolean|undefined)}} options Options for this action\n   *     sequence (see class description for details).\n   */\n  constructor(executor, { async = false } = {}) {\n    /** @private @const */\n    this.executor_ = executor\n\n    /** @private @const */\n    this.sync_ = !async\n\n    /** @private @const */\n    this.keyboard_ = new Keyboard('default keyboard')\n\n    /** @private @const */\n    this.mouse_ = new Pointer('default mouse', Pointer.Type.MOUSE)\n\n    /** @private @const */\n    this.wheel_ = new Wheel('default wheel')\n\n    /** @private @const {!Map<!Device, !Array<!Action>>} */\n    this.sequences_ = new Map([\n      [this.keyboard_, []],\n      [this.mouse_, []],\n      [this.wheel_, []],\n    ])\n  }\n\n  /** @return {!Keyboard} the keyboard device handle. */\n  keyboard() {\n    return this.keyboard_\n  }\n\n  /** @return {!Pointer} the mouse pointer device handle. */\n  mouse() {\n    return this.mouse_\n  }\n\n  /** @return {!Wheel} the wheel device handle. */\n  wheel() {\n    return this.wheel_\n  }\n\n  /**\n   * @param {!Device} device\n   * @return {!Array<!Action>}\n   * @private\n   */\n  sequence_(device) {\n    let sequence = this.sequences_.get(device)\n    if (!sequence) {\n      sequence = []\n      this.sequences_.set(device, sequence)\n    }\n    return sequence\n  }\n\n  /**\n   * Appends `actions` to the end of the current sequence for the given\n   * `device`. If device synchronization is enabled, after inserting the\n   * actions, pauses will be inserted for all other devices to ensure all action\n   * sequences are the same length.\n   *\n   * @param {!Device} device the device to update.\n   * @param {...!Action} actions the actions to insert.\n   * @return {!Actions} a self reference.\n   */\n  insert(device, ...actions) {\n    this.sequence_(device).push(...actions)\n    return this.sync_ ? this.synchronize() : this\n  }\n\n  /**\n   * Ensures the action sequence for every device referenced in this action\n   * sequence is the same length. For devices whose sequence is too short,\n   * this will insert {@linkplain #pause pauses} so that every device has an\n   * explicit action defined at each tick.\n   *\n   * @param {...!Device} devices The specific devices to synchronize.\n   *     If unspecified, the action sequences for every device will be\n   *     synchronized.\n   * @return {!Actions} a self reference.\n   */\n  synchronize(...devices) {\n    let sequences\n    let max = 0\n    if (devices.length === 0) {\n      for (const s of this.sequences_.values()) {\n        max = Math.max(max, s.length)\n      }\n      sequences = this.sequences_.values()\n    } else {\n      sequences = []\n      for (const device of devices) {\n        const seq = this.sequence_(device)\n        max = Math.max(max, seq.length)\n        sequences.push(seq)\n      }\n    }\n\n    const pause = { type: Action.Type.PAUSE, duration: 0 }\n    for (const seq of sequences) {\n      while (seq.length < max) {\n        seq.push(pause)\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Inserts a pause action for the specified devices, ensuring each device is\n   * idle for a tick. The length of the pause (in milliseconds) may be specified\n   * as the first parameter to this method (defaults to 0). Otherwise, you may\n   * just specify the individual devices that should pause.\n   *\n   * If no devices are specified, a pause action will be created (using the same\n   * duration) for every device.\n   *\n   * When device synchronization is enabled (the default for new {@link Actions}\n   * objects), there is no need to specify devices as pausing one automatically\n   * pauses the others for the same duration. In other words, the following are\n   * all equivalent:\n   *\n   *     let a1 = driver.actions();\n   *     a1.pause(100).perform();\n   *\n   *     let a2 = driver.actions();\n   *     a2.pause(100, a2.keyboard()).perform();\n   *     // Synchronization ensures a2.mouse() is automatically paused too.\n   *\n   *     let a3 = driver.actions();\n   *     a3.pause(100, a3.keyboard(), a3.mouse()).perform();\n   *\n   * When device synchronization is _disabled_, you can cause individual devices\n   * to pause during a tick. For example, to hold the SHIFT key down while\n   * moving the mouse:\n   *\n   *     let actions = driver.actions({async: true});\n   *\n   *     actions.keyDown(Key.SHIFT);\n   *     actions.pause(actions.mouse())  // Pause for shift down\n   *         .press(Button.LEFT)\n   *         .move({x: 10, y: 10})\n   *         .release(Button.LEFT);\n   *     actions\n   *         .pause(\n   *             actions.keyboard(),  // Pause for press left\n   *             actions.keyboard(),  // Pause for move\n   *             actions.keyboard())  // Pause for release left\n   *        .keyUp(Key.SHIFT);\n   *     await actions.perform();\n   *\n   * @param {(number|!Device)=} duration The length of the pause to insert, in\n   *     milliseconds. Alternatively, the duration may be omitted (yielding a\n   *     default 0 ms pause), and the first device to pause may be specified.\n   * @param {...!Device} devices The devices to insert the pause for. If no\n   *     devices are specified, the pause will be inserted for _all_ devices.\n   * @return {!Actions} a self reference.\n   */\n  pause(duration, ...devices) {\n    if (duration instanceof Device) {\n      devices.push(duration)\n      duration = 0\n    } else if (!duration) {\n      duration = 0\n    }\n\n    const action = { type: Action.Type.PAUSE, duration }\n\n    // NB: need a properly typed variable for type checking.\n    /** @type {!Iterable<!Device>} */\n    const iterable = devices.length === 0 ? this.sequences_.keys() : devices\n    for (const device of iterable) {\n      this.sequence_(device).push(action)\n    }\n    return this.sync_ ? this.synchronize() : this\n  }\n\n  /**\n   * Inserts an action to press a single key.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyDown(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyDown(key))\n  }\n\n  /**\n   * Inserts an action to release a single key.\n   *\n   * @param {(Key|string|number)} key the key to release. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyUp(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyUp(key))\n  }\n\n  /**\n   * Inserts a sequence of actions to type the provided key sequence.\n   * For each key, this will record a pair of {@linkplain #keyDown keyDown}\n   * and {@linkplain #keyUp keyUp} actions. An implication of this pairing\n   * is that modifier keys (e.g. {@link ./input.Key.SHIFT Key.SHIFT}) will\n   * always be immediately released. In other words, `sendKeys(Key.SHIFT, 'a')`\n   * is the same as typing `sendKeys('a')`, _not_ `sendKeys('A')`.\n   *\n   * @param {...(Key|string|number)} keys the keys to type.\n   * @return {!Actions} a self reference.\n   */\n  sendKeys(...keys) {\n    const { WebElement } = require('./webdriver')\n\n    const actions = []\n    if (keys.length > 1 && keys[0] instanceof WebElement) {\n      this.click(keys[0])\n      keys.shift()\n    }\n    for (const key of keys) {\n      if (typeof key === 'string') {\n        for (const symbol of key) {\n          actions.push(this.keyboard_.keyDown(symbol), this.keyboard_.keyUp(symbol))\n        }\n      } else {\n        actions.push(this.keyboard_.keyDown(key), this.keyboard_.keyUp(key))\n      }\n    }\n    return this.insert(this.keyboard_, ...actions)\n  }\n\n  /**\n   * Inserts an action to press a mouse button at the mouse's current location.\n   *\n   * @param {!Button=} button The button to press; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  press(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.press(button))\n  }\n\n  /**\n   * Inserts an action to release a mouse button at the mouse's current\n   * location.\n   *\n   * @param {!Button=} button The button to release; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  release(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.release(button))\n  }\n\n  /**\n   * scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltax delta x to scroll to target\n   * @param {number} deltay delta y to scroll to target\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Actions} An action to scroll with this device.\n   */\n  scroll(x, y, targetDeltaX, targetDeltaY, origin, duration) {\n    return this.insert(this.wheel_, this.wheel_.scroll(x, y, targetDeltaX, targetDeltaY, origin, duration))\n  }\n\n  /**\n   * Inserts an action for moving the mouse `x` and `y` pixels relative to the\n   * specified `origin`. The `origin` may be defined as the mouse's\n   * {@linkplain ./input.Origin.POINTER current position}, the top-left corner of the\n   * {@linkplain ./input.Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}. Default is top left corner of the view-port if origin is not specified\n   *\n   * You may adjust how long the remote end should take, in milliseconds, to\n   * perform the move using the `duration` parameter (defaults to 100 ms).\n   * The number of incremental move events generated over this duration is an\n   * implementation detail for the remote end.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options The move options. Defaults to moving the mouse to the top-left\n   *     corner of the viewport over 100ms.\n   * @return {!Actions} a self reference.\n   */\n  move({ x = 0, y = 0, duration = 100, origin = Origin.VIEWPORT } = {}) {\n    return this.insert(this.mouse_, this.mouse_.move({ x, y, duration, origin }))\n  }\n\n  /**\n   * Short-hand for performing a simple left-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  click(element) {\n    if (element) {\n      this.move({ origin: element })\n    }\n    return this.press().release()\n  }\n\n  /**\n   * Short-hand for performing a simple right-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  contextClick(element) {\n    if (element) {\n      this.move({ origin: element })\n    }\n    return this.press(Button.RIGHT).release(Button.RIGHT)\n  }\n\n  /**\n   * Short-hand for performing a double left-click with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  doubleClick(element) {\n    return this.click(element).press().release()\n  }\n\n  /**\n   * Configures a drag-and-drop action consisting of the following steps:\n   *\n   * 1.  Move to the center of the `from` element (element to be dragged).\n   * 2.  Press the left mouse button.\n   * 3.  If the `to` target is a {@linkplain ./webdriver.WebElement WebElement},\n   *     move the mouse to its center. Otherwise, move the mouse by the\n   *     specified offset.\n   * 4.  Release the left mouse button.\n   *\n   * @param {!./webdriver.WebElement} from The element to press the left mouse\n   *     button on to start the drag.\n   * @param {(!./webdriver.WebElement|{x: number, y: number})} to Either another\n   *     element to drag to (will drag to the center of the element), or an\n   *     object specifying the offset to drag by, in pixels.\n   * @return {!Actions} a self reference.\n   */\n  dragAndDrop(from, to) {\n    // Do not require up top to avoid a cycle that breaks static analysis.\n    const { WebElement } = require('./webdriver')\n    if (!(to instanceof WebElement) && (!to || typeof to.x !== 'number' || typeof to.y !== 'number')) {\n      throw new InvalidArgumentError('Invalid drag target; must specify a WebElement or {x, y} offset')\n    }\n\n    this.move({ origin: from }).press()\n    if (to instanceof WebElement) {\n      this.move({ origin: to })\n    } else {\n      this.move({ x: to.x, y: to.y, origin: Origin.POINTER })\n    }\n    return this.release()\n  }\n\n  /**\n   * Releases all keys, pointers, and clears internal state.\n   *\n   * @return {!Promise<void>} a promise that will resolve when finished\n   *     clearing all action state.\n   */\n  clear() {\n    for (const s of this.sequences_.values()) {\n      s.length = 0\n    }\n    return this.executor_.execute(new Command(Name.CLEAR_ACTIONS))\n  }\n\n  /**\n   * Performs the configured action sequence.\n   *\n   * @return {!Promise<void>} a promise that will resolve when all actions have\n   *     been completed.\n   */\n  async perform() {\n    const _actions = []\n    this.sequences_.forEach((actions, device) => {\n      if (!isIdle(actions)) {\n        actions = actions.concat() // Defensive copy.\n        _actions.push(Object.assign({ actions }, device.toJSON()))\n      }\n    })\n\n    if (_actions.length === 0) {\n      return Promise.resolve()\n    }\n\n    await this.executor_.execute(new Command(Name.ACTIONS).setParameter('actions', _actions))\n  }\n\n  getSequences() {\n    const _actions = []\n    this.sequences_.forEach((actions, device) => {\n      if (!isIdle(actions)) {\n        actions = actions.concat()\n        _actions.push(Object.assign({ actions }, device.toJSON()))\n      }\n    })\n\n    return _actions\n  }\n}\n\n/**\n * @param {!Array<!Action>} actions\n * @return {boolean}\n */\nfunction isIdle(actions) {\n  return actions.length === 0 || actions.every((a) => a.type === Action.Type.PAUSE && !a.duration)\n}\n\n/**\n * Script used to compute the offset from the center of a DOM element's first\n * client rect from the top-left corner of the element's bounding client rect.\n * The element's center point is computed using the algorithm defined here:\n * <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-center-point>.\n *\n * __This is only exported for use in internal unit tests. DO NOT USE.__\n *\n * @package\n */\nconst INTERNAL_COMPUTE_OFFSET_SCRIPT = `\nfunction computeOffset(el) {\n  var rect = el.getClientRects()[0];\n  var left = Math.max(0, Math.min(rect.x, rect.x + rect.width));\n  var right =\n      Math.min(window.innerWidth, Math.max(rect.x, rect.x + rect.width));\n  var top = Math.max(0, Math.min(rect.y, rect.y + rect.height));\n  var bot =\n      Math.min(window.innerHeight, Math.max(rect.y, rect.y + rect.height));\n  var x = Math.floor(0.5 * (left + right));\n  var y = Math.floor(0.5 * (top + bot));\n\n  var bbox = el.getBoundingClientRect();\n  return [x - bbox.left, y - bbox.top];\n}\nreturn computeOffset(arguments[0]);`\n\n// PUBLIC API\n\nmodule.exports = {\n  Action, // For documentation only.\n  Actions,\n  Button,\n  Device,\n  Key,\n  Keyboard,\n  FileDetector,\n  Origin,\n  Pointer,\n  INTERNAL_COMPUTE_OFFSET_SCRIPT,\n}\n"],"mappings":"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K;MACLC,KAAK;MACLC,KAAK;MACLC,aAAa;MACbC;IACF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACAhB,OAAO,CAAC9B,IAAI,GAAG;EACbkD,KAAK,EAAE,OAAO;EACdC,GAAG,EAAE,KAAK;EACVC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,KAAK,SAAS7C,MAAM,CAAC;EACzB;AACF;AACA;EACEf,WAAWA,CAACgB,EAAE,EAAE;IACd,KAAK,CAACD,MAAM,CAACR,IAAI,CAACgB,KAAK,EAAEP,EAAE,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE6C,MAAMA,CAACxD,CAAC,EAAEC,CAAC,EAAEwD,MAAM,EAAEC,MAAM,EAAEP,MAAM,EAAEtD,QAAQ,EAAE;IAC7C,OAAO;MACLD,IAAI,EAAEF,MAAM,CAACQ,IAAI,CAACO,MAAM;MACxBZ,QAAQ,EAAEA,QAAQ;MAClBG,CAAC,EAAEA,CAAC;MACJC,CAAC,EAAEA,CAAC;MACJwD,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM;MACdP,MAAM,EAAEA;IACV,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,OAAO,CAAC;EACZ;AACF;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}