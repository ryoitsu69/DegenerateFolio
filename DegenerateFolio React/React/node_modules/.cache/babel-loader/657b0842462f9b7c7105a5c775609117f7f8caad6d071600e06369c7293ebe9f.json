{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.lastValue = exports.asArray = exports.countStream = exports.Reducer = void 0;\n// Reducer takes a stream of events T and a ReducerFunc, that\n// materializes a state of type U.\nclass Reducer {\n  constructor(stream, reducer, initState) {\n    this.stream = stream;\n    this.reducer = reducer;\n    this.state = initState;\n    this.completed = new Promise((resolve, reject) => {\n      const subscription = this.stream.subscribe({\n        next: evt => {\n          this.state = this.reducer(this.state, evt);\n        },\n        complete: () => {\n          resolve();\n          // this must happen after resolve, to ensure stream.subscribe() has finished\n          subscription.unsubscribe();\n        },\n        error: err => {\n          reject(err);\n          // the stream already closed on error, but unsubscribe to be safe\n          subscription.unsubscribe();\n        }\n      });\n    });\n  }\n  // value returns current materialized state\n  value() {\n    return this.state;\n  }\n  // finished resolves on completed stream, rejects on stream error\n  async finished() {\n    return this.completed;\n  }\n}\nexports.Reducer = Reducer;\nfunction increment(sum, _) {\n  return sum + 1;\n}\n// countStream returns a reducer that contains current count\n// of events on the stream\nfunction countStream(stream) {\n  return new Reducer(stream, increment, 0);\n}\nexports.countStream = countStream;\nfunction append(list, evt) {\n  return [...list, evt];\n}\n// asArray maintains an array containing all events that have\n// occurred on the stream\nfunction asArray(stream) {\n  return new Reducer(stream, append, []);\n}\nexports.asArray = asArray;\nfunction last(_, event) {\n  return event;\n}\n// lastValue returns the last value read from the stream, or undefined if no values sent\nfunction lastValue(stream) {\n  return new Reducer(stream, last, undefined);\n}\nexports.lastValue = lastValue;","map":{"version":3,"names":["Reducer","constructor","stream","reducer","initState","state","completed","Promise","resolve","reject","subscription","subscribe","next","evt","complete","unsubscribe","error","err","value","finished","exports","increment","sum","_","countStream","append","list","asArray","last","event","lastValue","undefined"],"sources":["../src/reducer.ts"],"sourcesContent":[null],"mappings":";;;;;;AAIA;AACA;AACA,MAAaA,OAAO;EAQlBC,YAAmBC,MAAiB,EAAEC,OAA0B,EAAEC,SAAY;IAC5E,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,KAAK,GAAGD,SAAS;IACtB,IAAI,CAACE,SAAS,GAAG,IAAIC,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrD,MAAMC,YAAY,GAAG,IAAI,CAACR,MAAM,CAACS,SAAS,CAAC;QACzCC,IAAI,EAAGC,GAAM,IAAI;UACf,IAAI,CAACR,KAAK,GAAG,IAAI,CAACF,OAAO,CAAC,IAAI,CAACE,KAAK,EAAEQ,GAAG,CAAC;QAC5C,CAAC;QACDC,QAAQ,EAAEA,CAAA,KAAK;UACbN,OAAO,EAAE;UACT;UACAE,YAAY,CAACK,WAAW,EAAE;QAC5B,CAAC;QACDC,KAAK,EAAGC,GAAQ,IAAI;UAClBR,MAAM,CAACQ,GAAG,CAAC;UACX;UACAP,YAAY,CAACK,WAAW,EAAE;QAC5B;OACD,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;EACOG,KAAKA,CAAA;IACV,OAAO,IAAI,CAACb,KAAK;EACnB;EAEA;EACO,MAAMc,QAAQA,CAAA;IACnB,OAAO,IAAI,CAACb,SAAS;EACvB;;AAvCFc,OAAA,CAAApB,OAAA,GAAAA,OAAA;AA0CA,SAASqB,SAASA,CAAIC,GAAW,EAAEC,CAAI;EACrC,OAAOD,GAAG,GAAG,CAAC;AAChB;AAEA;AACA;AACA,SAAgBE,WAAWA,CAAItB,MAAiB;EAC9C,OAAO,IAAIF,OAAO,CAACE,MAAM,EAAEmB,SAAS,EAAE,CAAC,CAAC;AAC1C;AAFAD,OAAA,CAAAI,WAAA,GAAAA,WAAA;AAIA,SAASC,MAAMA,CAAIC,IAAkB,EAAEb,GAAM;EAC3C,OAAO,CAAC,GAAGa,IAAI,EAAEb,GAAG,CAAC;AACvB;AAEA;AACA;AACA,SAAgBc,OAAOA,CAAIzB,MAAiB;EAC1C,OAAO,IAAIF,OAAO,CAAkBE,MAAM,EAAEuB,MAAM,EAAE,EAAE,CAAC;AACzD;AAFAL,OAAA,CAAAO,OAAA,GAAAA,OAAA;AAIA,SAASC,IAAIA,CAAIL,CAAM,EAAEM,KAAQ;EAC/B,OAAOA,KAAK;AACd;AAEA;AACA,SAAgBC,SAASA,CAAI5B,MAAiB;EAC5C,OAAO,IAAIF,OAAO,CAAmBE,MAAM,EAAE0B,IAAI,EAAEG,SAAS,CAAC;AAC/D;AAFAX,OAAA,CAAAU,SAAA,GAAAA,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}