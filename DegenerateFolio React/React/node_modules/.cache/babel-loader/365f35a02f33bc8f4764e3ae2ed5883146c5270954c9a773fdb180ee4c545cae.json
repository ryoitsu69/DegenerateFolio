{"ast":null,"code":"import Nacl from \"tweetnacl\";\nimport { Result } from \"../../helpers/result.js\";\nimport { debug } from \"../../helpers/debug.js\";\nimport { TRANS_BY_HASH, TRANS_BY_VERSION } from \"../../helpers/const.js\";\nconst {\n  sign\n} = Nacl;\nexport const TransactionApi = {\n  lastTransaction: null,\n  async getTransactions(query = {\n    limit: 25,\n    start: 0\n  }) {\n    return await this._exec(`/transactions`, query);\n  },\n  async getTransaction(hash, by = TRANS_BY_HASH) {\n    return await this._exec(`/transactions/${by}/${hash}`);\n  },\n  async getTransactionByHash(hash) {\n    return await this.getTransaction(hash, TRANS_BY_HASH);\n  },\n  async getTransactionByVersion(version) {\n    return await this.getTransaction(version, TRANS_BY_VERSION);\n  },\n  async buildTransaction(senderAddress, payload, exp = 600) {\n    let account,\n      address = this._0x(senderAddress);\n    account = await this._exec(`/accounts/${address}`);\n    if (!account.ok) {\n      return account;\n    }\n    return new Result(true, \"OK\", {\n      \"sender\": address,\n      \"sequence_number\": \"\" + account.payload.sequence_number,\n      \"max_gas_amount\": \"\" + this.gas.max_gas_amount,\n      \"gas_unit_price\": \"\" + this.gas.gas_unit_price,\n      \"gas_currency_code\": \"\" + this.gas.gas_currency_code,\n      \"expiration_timestamp_secs\": (Math.floor(Date.now() / 1000) + exp).toString(),\n      // Unix timestamp, in seconds + 10 minutes ???\n      \"payload\": payload\n    });\n  },\n  async createSigningMessage(txnRequest) {\n    return await this._exec(`/transactions/encode_submission`, null, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(txnRequest)\n    });\n  },\n  async signTransaction(signer, trx = {}) {\n    const signedMessage = await this.createSigningMessage(trx);\n    if (!signedMessage.ok) {\n      return new Result(false, signedMessage.message, signedMessage);\n    }\n    const toSign = Buffer.from(signedMessage.payload.substring(2), \"hex\");\n    const signature = sign(toSign, signer.signingKey.secretKey);\n    const signatureHex = Buffer.from(signature).toString(\"hex\").slice(0, 128);\n    trx[\"signature\"] = {\n      \"type\": \"ed25519_signature\",\n      \"public_key\": `${this._0x(signer.pubKey())}`,\n      \"signature\": `${this._0x(signatureHex)}`\n    };\n    return new Result(true, \"OK\", trx);\n  },\n  async submitTransactionData(data) {\n    return await this._exec(`/transactions`, null, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  },\n  async simulateTransaction(data) {\n    return await this._exec(`/transactions/simulate`, null, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  },\n  async submitTransaction(account, payload) {\n    const transaction = await this.buildTransaction(account.address(), payload);\n    if (!transaction.ok) return new Result(false, transaction.message, transaction);\n    const signedTransaction = await this.signTransaction(account, transaction.payload);\n    if (!signedTransaction.ok) return new Result(false, signedTransaction.message, signedTransaction);\n    const result = await this.submitTransactionData(signedTransaction.payload);\n    if (!result.ok) {\n      return new Result(false, \"Error submitting transaction data\", result.error);\n    }\n    try {\n      await this.waitForTransaction(result.payload.hash);\n      this.lastTransaction = (await this.getTransaction(result.payload.hash)).payload;\n      return new Result(true, \"ok\", this.lastTransaction);\n    } catch (e) {\n      return new Result(false, e.message, e.stack);\n    }\n  },\n  async transactionPending(hash) {\n    const response = await this.getTransaction(hash);\n    if (!response.ok && response.error.code === 404) {\n      return true;\n    }\n    return response.payload.type === \"pending_transaction\";\n  },\n  async waitForTransaction(hash) {\n    let count = 0;\n    while (await this.transactionPending(hash)) {\n      await this.sleep(1000);\n      count += 1;\n      if (count >= 10) {\n        throw new Error(`Waiting for transaction ${hash} timed out!`);\n      }\n    }\n  },\n  getLastTransaction() {\n    return this.lastTransaction;\n  },\n  lastTransactionStatus() {\n    const {\n      type,\n      version,\n      timestamp,\n      hash,\n      success,\n      gas_used,\n      max_gas_amount,\n      gas_unit_price,\n      sequence_number,\n      vm_status\n    } = this.lastTransaction;\n    return {\n      type,\n      hash,\n      version,\n      success,\n      vm_status,\n      timestamp,\n      sequence_number,\n      gas: {\n        gas_used,\n        max_gas_amount,\n        gas_unit_price\n      }\n    };\n  }\n};","map":{"version":3,"names":["Nacl","Result","debug","TRANS_BY_HASH","TRANS_BY_VERSION","sign","TransactionApi","lastTransaction","getTransactions","query","limit","start","_exec","getTransaction","hash","by","getTransactionByHash","getTransactionByVersion","version","buildTransaction","senderAddress","payload","exp","account","address","_0x","ok","sequence_number","gas","max_gas_amount","gas_unit_price","gas_currency_code","Math","floor","Date","now","toString","createSigningMessage","txnRequest","method","headers","body","JSON","stringify","signTransaction","signer","trx","signedMessage","message","toSign","Buffer","from","substring","signature","signingKey","secretKey","signatureHex","slice","pubKey","submitTransactionData","data","simulateTransaction","submitTransaction","transaction","signedTransaction","result","error","waitForTransaction","e","stack","transactionPending","response","code","type","count","sleep","Error","getLastTransaction","lastTransactionStatus","timestamp","success","gas_used","vm_status"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/aptos-api-master/src/api/ext/transactions.js"],"sourcesContent":["import Nacl from \"tweetnacl\"\nimport {Result} from \"../../helpers/result.js\";\nimport {debug} from \"../../helpers/debug.js\";\nimport {TRANS_BY_HASH, TRANS_BY_VERSION} from \"../../helpers/const.js\";\n\nconst {sign} = Nacl\n\nexport const TransactionApi = {\n    lastTransaction: null,\n\n    async getTransactions(query = {limit: 25, start: 0}){\n        return await this._exec(`/transactions`, query)\n    },\n\n    async getTransaction(hash, by = TRANS_BY_HASH){\n        return await this._exec(`/transactions/${by}/${hash}`)\n    },\n\n    async getTransactionByHash(hash){\n        return await this.getTransaction(hash, TRANS_BY_HASH)\n    },\n\n    async getTransactionByVersion(version){\n        return await this.getTransaction(version, TRANS_BY_VERSION)\n    },\n\n    async buildTransaction(senderAddress, payload, exp = 600){\n        let account, address = this._0x(senderAddress)\n\n        account = await this._exec(`/accounts/${address}`)\n\n        if (!account.ok) {\n            return account\n        }\n\n        return new Result(true, \"OK\", {\n            \"sender\": address,\n            \"sequence_number\": \"\"+account.payload.sequence_number,\n            \"max_gas_amount\": \"\"+this.gas.max_gas_amount,\n            \"gas_unit_price\": \"\"+this.gas.gas_unit_price,\n            \"gas_currency_code\": \"\"+this.gas.gas_currency_code,\n            \"expiration_timestamp_secs\": (Math.floor(Date.now() / 1000) + exp).toString(), // Unix timestamp, in seconds + 10 minutes ???\n            \"payload\": payload,\n        })\n    },\n\n    async createSigningMessage(txnRequest){\n        return await this._exec(`/transactions/encode_submission`, null, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(txnRequest)\n        })\n    },\n\n    async signTransaction(signer, trx = {}){\n        const signedMessage = await this.createSigningMessage(trx)\n\n        if (!signedMessage.ok) {\n            return new Result(false, signedMessage.message, signedMessage)\n        }\n\n        const toSign = Buffer.from(signedMessage.payload.substring(2), \"hex\")\n        const signature = sign(toSign, signer.signingKey.secretKey)\n        const signatureHex = Buffer.from(signature).toString(\"hex\").slice(0, 128)\n\n        trx[\"signature\"] = {\n            \"type\": \"ed25519_signature\",\n            \"public_key\": `${this._0x(signer.pubKey())}`,\n            \"signature\": `${this._0x(signatureHex)}`,\n        }\n\n        return new Result(true, \"OK\", trx)\n    },\n\n    async submitTransactionData(data){\n        return await this._exec(`/transactions`, null, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(data)\n        })\n    },\n\n    async simulateTransaction(data){\n        return await this._exec(`/transactions/simulate`, null, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(data)\n        })\n    },\n\n    async submitTransaction(account, payload){\n        const transaction = await this.buildTransaction(account.address(), payload)\n        if (!transaction.ok) return new Result(false, transaction.message, transaction)\n\n        const signedTransaction = await this.signTransaction(account, transaction.payload)\n        if (!signedTransaction.ok) return new Result(false, signedTransaction.message, signedTransaction)\n\n        const result = await this.submitTransactionData(signedTransaction.payload)\n\n        if (!result.ok) {\n            return new Result(false, \"Error submitting transaction data\", result.error)\n        }\n\n        try {\n            await this.waitForTransaction(result.payload.hash)\n            this.lastTransaction = (await this.getTransaction(result.payload.hash)).payload\n            return new Result(true, \"ok\", this.lastTransaction)\n        } catch (e) {\n            return new Result(false, e.message, e.stack)\n        }\n    },\n\n    async transactionPending(hash){\n        const response = await this.getTransaction(hash)\n        if (!response.ok && response.error.code === 404) {\n            return true\n        }\n        return response.payload.type === \"pending_transaction\"\n    },\n\n    async waitForTransaction(hash) {\n        let count = 0\n        while (await this.transactionPending(hash)) {\n            await this.sleep(1000)\n            count += 1\n            if (count >= 10) {\n                throw new Error(`Waiting for transaction ${hash} timed out!`)\n            }\n        }\n    },\n\n    getLastTransaction(){\n        return this.lastTransaction\n    },\n\n    lastTransactionStatus(){\n        const {type, version, timestamp, hash, success, gas_used, max_gas_amount, gas_unit_price, sequence_number, vm_status} = this.lastTransaction\n        return {\n            type,\n            hash,\n            version,\n            success,\n            vm_status,\n            timestamp,\n            sequence_number,\n            gas: {\n                gas_used,\n                max_gas_amount,\n                gas_unit_price\n            }\n        }\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}