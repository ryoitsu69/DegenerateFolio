{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = exports.supportedAlgorithms = exports.executeKdf = exports.cosmjsSalt = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\n/**\n * A fixed salt is chosen to archive a deterministic password to key derivation.\n * This reduces the scope of a potential rainbow attack to all CosmJS users.\n * Must be 16 bytes due to implementation limitations.\n */\nexports.cosmjsSalt = (0, encoding_1.toAscii)(\"The CosmJS salt.\");\nasync function executeKdf(password, configuration) {\n  switch (configuration.algorithm) {\n    case \"argon2id\":\n      {\n        const options = configuration.params;\n        if (!(0, crypto_1.isArgon2idOptions)(options)) throw new Error(\"Invalid format of argon2id params\");\n        return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);\n      }\n    default:\n      throw new Error(\"Unsupported KDF algorithm\");\n  }\n}\nexports.executeKdf = executeKdf;\nexports.supportedAlgorithms = {\n  xchacha20poly1305Ietf: \"xchacha20poly1305-ietf\"\n};\nasync function encrypt(plaintext, encryptionKey, config) {\n  switch (config.algorithm) {\n    case exports.supportedAlgorithms.xchacha20poly1305Ietf:\n      {\n        const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength);\n        // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api\n        return new Uint8Array([...nonce, ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce))]);\n      }\n    default:\n      throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n  }\n}\nexports.encrypt = encrypt;\nasync function decrypt(ciphertext, encryptionKey, config) {\n  switch (config.algorithm) {\n    case exports.supportedAlgorithms.xchacha20poly1305Ietf:\n      {\n        const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);\n        return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);\n      }\n    default:\n      throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n  }\n}\nexports.decrypt = decrypt;","map":{"version":3,"names":["crypto_1","require","encoding_1","exports","cosmjsSalt","toAscii","executeKdf","password","configuration","algorithm","options","params","isArgon2idOptions","Error","Argon2id","execute","supportedAlgorithms","xchacha20poly1305Ietf","encrypt","plaintext","encryptionKey","config","nonce","Random","getBytes","xchacha20NonceLength","Uint8Array","Xchacha20poly1305Ietf","decrypt","ciphertext","slice"],"sources":["../src/wallet.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAOA,MAAAC,UAAA,GAAAD,OAAA;AAEA;;;;;AAKaE,OAAA,CAAAC,UAAU,GAAG,IAAAF,UAAA,CAAAG,OAAO,EAAC,kBAAkB,CAAC;AAW9C,eAAeC,UAAUA,CAACC,QAAgB,EAAEC,aAA+B;EAChF,QAAQA,aAAa,CAACC,SAAS;IAC7B,KAAK,UAAU;MAAE;QACf,MAAMC,OAAO,GAAGF,aAAa,CAACG,MAAM;QACpC,IAAI,CAAC,IAAAX,QAAA,CAAAY,iBAAiB,EAACF,OAAO,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,mCAAmC,CAAC;QACrF,OAAOb,QAAA,CAAAc,QAAQ,CAACC,OAAO,CAACR,QAAQ,EAAEJ,OAAA,CAAAC,UAAU,EAAEM,OAAO,CAAC;;IAExD;MACE,MAAM,IAAIG,KAAK,CAAC,2BAA2B,CAAC;;AAElD;AAVAV,OAAA,CAAAG,UAAA,GAAAA,UAAA;AAyBaH,OAAA,CAAAa,mBAAmB,GAAG;EACjCC,qBAAqB,EAAE;CACxB;AAEM,eAAeC,OAAOA,CAC3BC,SAAqB,EACrBC,aAAyB,EACzBC,MAA+B;EAE/B,QAAQA,MAAM,CAACZ,SAAS;IACtB,KAAKN,OAAA,CAAAa,mBAAmB,CAACC,qBAAqB;MAAE;QAC9C,MAAMK,KAAK,GAAGtB,QAAA,CAAAuB,MAAM,CAACC,QAAQ,CAACxB,QAAA,CAAAyB,oBAAoB,CAAC;QACnD;QACA,OAAO,IAAIC,UAAU,CAAC,CACpB,GAAGJ,KAAK,EACR,IAAI,MAAMtB,QAAA,CAAA2B,qBAAqB,CAACT,OAAO,CAACC,SAAS,EAAEC,aAAa,EAAEE,KAAK,CAAC,CAAC,CAC1E,CAAC;;IAEJ;MACE,MAAM,IAAIT,KAAK,CAAC,sCAAsCQ,MAAM,CAACZ,SAAS,GAAG,CAAC;;AAEhF;AAjBAN,OAAA,CAAAe,OAAA,GAAAA,OAAA;AAmBO,eAAeU,OAAOA,CAC3BC,UAAsB,EACtBT,aAAyB,EACzBC,MAA+B;EAE/B,QAAQA,MAAM,CAACZ,SAAS;IACtB,KAAKN,OAAA,CAAAa,mBAAmB,CAACC,qBAAqB;MAAE;QAC9C,MAAMK,KAAK,GAAGO,UAAU,CAACC,KAAK,CAAC,CAAC,EAAE9B,QAAA,CAAAyB,oBAAoB,CAAC;QACvD,OAAOzB,QAAA,CAAA2B,qBAAqB,CAACC,OAAO,CAACC,UAAU,CAACC,KAAK,CAAC9B,QAAA,CAAAyB,oBAAoB,CAAC,EAAEL,aAAa,EAAEE,KAAK,CAAC;;IAEpG;MACE,MAAM,IAAIT,KAAK,CAAC,sCAAsCQ,MAAM,CAACZ,SAAS,GAAG,CAAC;;AAEhF;AAbAN,OAAA,CAAAyB,OAAA,GAAAA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}