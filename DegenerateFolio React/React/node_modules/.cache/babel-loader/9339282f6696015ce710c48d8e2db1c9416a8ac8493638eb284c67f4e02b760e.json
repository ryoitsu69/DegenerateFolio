{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport { bytesToHex, bytesToNumberLE, ensureBytes, equalBytes, numberToBytesLE } from './abstract/utils.js';\nimport { createHasher, expand_message_xmd } from './abstract/hash-to-curve.js';\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\nconst ED25519_P = BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949');\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10),\n  _20n = BigInt(20),\n  _40n = BigInt(40),\n  _80n = BigInt(80);\nfunction ed25519_pow_2_252_3(x) {\n  const P = ED25519_P;\n  const x2 = x * x % P;\n  const b2 = x2 * x % P; // x^3, 11\n  const b4 = pow2(b2, _2n, P) * b2 % P; // x^15, 1111\n  const b5 = pow2(b4, _1n, P) * x % P; // x^31\n  const b10 = pow2(b5, _5n, P) * b5 % P;\n  const b20 = pow2(b10, _10n, P) * b10 % P;\n  const b40 = pow2(b20, _20n, P) * b20 % P;\n  const b80 = pow2(b40, _40n, P) * b40 % P;\n  const b160 = pow2(b80, _80n, P) * b80 % P;\n  const b240 = pow2(b160, _80n, P) * b80 % P;\n  const b250 = pow2(b240, _10n, P) * b10 % P;\n  const pow_p_5_8 = pow2(b250, _2n, P) * x % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return {\n    pow_p_5_8,\n    b2\n  };\n}\nfunction adjustScalarBytes(bytes) {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n// sqrt(u/v)\nfunction uvRatio(u, v) {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v¬≥\n  const v7 = mod(v3 * v3 * v, P); // v‚Å∑\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv¬≥)(uv‚Å∑)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx¬≤\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx¬≤ = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx¬≤ = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx¬≤ = -u‚àö(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'];\nconst Fp = Field(ED25519_P, undefined, true);\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1),\n  // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field ùîΩp over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/‚àöv\n  uvRatio\n};\nexport const ed25519 = /* @__PURE__ */twistedEdwards(ed25519Defaults);\nfunction ed25519_domain(data, ctx, phflag) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(utf8ToBytes('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n}\nexport const ed25519ctx = /* @__PURE__ */twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain\n});\nexport const ed25519ph = /* @__PURE__ */twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512\n});\nexport const x25519 = /* @__PURE__ */(() => montgomery({\n  P: ED25519_P,\n  a: BigInt(486662),\n  montgomeryBits: 255,\n  // n is 253 bits\n  nByteLength: 32,\n  Gu: BigInt(9),\n  powPminus2: x => {\n    const P = ED25519_P;\n    // x^(p-2) aka x^(2^255-21)\n    const {\n      pow_p_5_8,\n      b2\n    } = ed25519_pow_2_252_3(x);\n    return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n  },\n  adjustScalarBytes,\n  randomBytes\n}))();\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub) {\n  const {\n    y\n  } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv) {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u) {\n  let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return {\n    xMn: xn,\n    xMd: xd,\n    yMn: y,\n    yMd: _1n\n  }; //  39. return (xn, xd, y, 1)\n}\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u) {\n  const {\n    xMn,\n    xMd,\n    yMn,\n    yMd\n  } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return {\n    x: Fp.mul(xn, inv[0]),\n    y: Fp.mul(yn, inv[1])\n  }; //  13. return (xn, xd, yn, yd)\n}\nconst htf = /* @__PURE__ */(() => createHasher(ed25519.ExtendedPoint, scalars => map_to_curve_elligator2_edwards25519(scalars[0]), {\n  DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n  encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n  p: Fp.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha512\n}))();\nexport const hashToCurve = /* @__PURE__ */(() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */(() => htf.encodeToCurve)();\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// ‚àö(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n// 1 / ‚àö(a-d)\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n// 1-d¬≤\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n// (d-1)¬≤\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n// Calculates 1/‚àö(number)\nconst invertSqrt = number => uvRatio(_1n, number);\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = bytes => ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0) {\n  const {\n    d\n  } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let {\n    isValid: Ns_D_is_sq,\n    value: s\n  } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(ep) {\n    this.ep = ep;\n  }\n  static fromAffine(ap) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex) {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex) {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const {\n      a,\n      d\n    } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const {\n      isValid,\n      value: I\n    } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes() {\n    let {\n      ex: x,\n      ey: y,\n      ez: z,\n      et: t\n    } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const {\n      value: invsqrt\n    } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n  toString() {\n    return this.toHex();\n  }\n  // Compare one point to another.\n  equals(other) {\n    assertRstPoint(other);\n    const {\n      ex: X1,\n      ey: Y1\n    } = this.ep;\n    const {\n      ex: X2,\n      ey: Y2\n    } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n  add(other) {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n  subtract(other) {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n  multiply(scalar) {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n  multiplyUnsafe(scalar) {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n  double() {\n    return new RistPoint(this.ep.double());\n  }\n  negate() {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */(() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg, options) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy","map":{"version":3,"names":["sha512","concatBytes","randomBytes","utf8ToBytes","twistedEdwards","montgomery","Field","FpSqrtEven","isNegativeLE","mod","pow2","bytesToHex","bytesToNumberLE","ensureBytes","equalBytes","numberToBytesLE","createHasher","expand_message_xmd","ED25519_P","BigInt","ED25519_SQRT_M1","_0n","_1n","_2n","_5n","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","x","P","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","adjustScalarBytes","bytes","uvRatio","u","v","v3","v7","pow","vx2","root1","root2","useRoot1","useRoot2","noRoot","isValid","value","ED25519_TORSION_SUBGROUP","Fp","undefined","ed25519Defaults","a","d","n","h","Gx","Gy","hash","ed25519","ed25519_domain","data","ctx","phflag","length","Error","Uint8Array","ed25519ctx","domain","ed25519ph","prehash","x25519","montgomeryBits","nByteLength","Gu","powPminus2","edwardsToMontgomeryPub","edwardsPub","y","ExtendedPoint","fromHex","toBytes","create","inv","edwardsToMontgomery","edwardsToMontgomeryPriv","edwardsPriv","hashed","subarray","ELL2_C1","ORDER","ELL2_C2","ELL2_C3","sqrt","neg","ONE","ELL2_C4","ELL2_J","map_to_curve_elligator2_curve25519","tv1","sqr","mul","xd","add","x1n","tv2","gxd","gx1","tv3","y11","y12","e1","eql","y1","cmov","x2n","y21","y22","gx2","e2","y2","e3","xn","e4","isOdd","xMn","xMd","yMn","yMd","ELL2_C1_EDWARDS","map_to_curve_elligator2_edwards25519","yn","sub","yd","e","ZERO","invertBatch","htf","scalars","DST","encodeDST","p","m","k","expand","hashToCurve","encodeToCurve","assertRstPoint","other","RistPoint","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","invertSqrt","number","MAX_255B","bytes255ToNumberLE","CURVE","calcElligatorRistrettoMap","r0","r","Ns","c","D","Ns_D_is_sq","s","s_","Nt","s2","W0","W1","W2","W3","constructor","ep","fromAffine","ap","hex","r1","slice","R1","r2","R2","emsg","u1","u2","u1_2","u2_2","I","Dx","Dy","t","toRawBytes","ex","ey","ez","z","et","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","toString","equals","X1","Y1","X2","Y2","one","two","subtract","multiply","scalar","multiplyUnsafe","double","negate","RistrettoPoint","BASE","hashToRistretto255","msg","options","uniform_bytes","hash_to_ristretto255"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/node_modules/@noble/curves/src/ed25519.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint, Group } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v¬≥\n  const v7 = mod(v3 * v3 * v, P); // v‚Å∑\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv¬≥)(uv‚Å∑)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx¬≤\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx¬≤ = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx¬≤ = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx¬≤ = -u‚àö(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field ùîΩp over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/‚àöv\n  uvRatio,\n} as const;\n\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// ‚àö(-1) aka ‚àö(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// ‚àö(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / ‚àö(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d¬≤\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)¬≤\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/‚àö(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint implements Group<RistPoint> {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n  double(): RistPoint {\n    return new RistPoint(this.ep.double());\n  }\n\n  negate(): RistPoint {\n    return new RistPoint(this.ep.negate());\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}