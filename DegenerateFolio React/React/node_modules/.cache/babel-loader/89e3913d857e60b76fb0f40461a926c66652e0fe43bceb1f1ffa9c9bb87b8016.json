{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport Sketch from \"react-p5\";\nimport * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\nconst fragmentShader = `\n// \"Fractal Cartoon\" - former \"DE edge detection\" by Kali\n\n// There are no lights and no AO, only color by normals and dark edges.\n\n// update: Nyan Cat cameo, thanks to code from mu6k: https://www.shadertoy.com/view/4dXGWH\n\n\n//#define SHOWONLYEDGES\n#define NYAN\n#define WAVES\n#define BORDER\n\n#define RAY_STEPS 150\n\n#define BRIGHTNESS 1.2\n#define GAMMA 1.4\n#define SATURATION .65\n\n\n#define detail .001\n#define t iTime*.5\n\n\nconst vec3 origin=vec3(-1.,.7,0.);\nfloat det=0.0;\n\n\n// 2D rotation function\nmat2 rot(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n// \"Amazing Surface\" fractal\nvec4 formula(vec4 p) {\n    p.xz = abs(p.xz+1.)-abs(p.xz-1.)-p.xz;\n    p.y-=.25;\n    p.xy*=rot(radians(35.));\n    p=p*2./clamp(dot(p.xyz,p.xyz),.2,1.);\n    return p;\n}\n\n// Distance function\nfloat de(vec3 pos) {\n    #ifdef WAVES\n    pos.y+=sin(pos.z-t*6.)*.15; //waves!\n    #endif\n    float hid=0.;\n    vec3 tpos=pos;\n    tpos.z=abs(3.-mod(tpos.z,6.));\n    vec4 p=vec4(tpos,1.);\n    for (int i=0; i<4; i++) {p=formula(p);}\n    float fr=(length(max(vec2(0.),p.yz-1.5))-1.)/p.w;\n    float ro=max(abs(pos.x+1.)-.3,pos.y-.35);\n    ro=max(ro,-max(abs(pos.x+1.)-.1,pos.y-.5));\n    pos.z=abs(.25-mod(pos.z,.5));\n    ro=max(ro,-max(abs(pos.z)-.2,pos.y-.3));\n    ro=max(ro,-max(abs(pos.z)-.01,-pos.y+.32));\n    float d=min(fr,ro);\n    return d;\n}\n\n\n// Camera path\nvec3 path(float ti) {\n    ti*=1.5;\n    vec3  p=vec3(sin(ti),(1.-sin(ti*2.))*.5,-ti*5.)*.5;\n    return p;\n}\n\n// Calc normals, and here is edge detection, set to variable \"edge\"\n\nfloat edge=0.;\nvec3 normal(vec3 p) {\n    vec3 e = vec3(0.0,det*5.,0.0);\n\n    float d1=de(p-e.yxx),d2=de(p+e.yxx);\n    float d3=de(p-e.xyx),d4=de(p+e.xyx);\n    float d5=de(p-e.xxy),d6=de(p+e.xxy);\n    float d=de(p);\n    edge=abs(d-0.5*(d2+d1))+abs(d-0.5*(d4+d3))+abs(d-0.5*(d6+d5));//edge finder\n    edge=min(1.,pow(edge,.55)*15.);\n    return normalize(vec3(d1-d2,d3-d4,d5-d6));\n}\n\n\n// Used Nyan Cat code by mu6k, with some mods\n\nvec4 rainbow(vec2 p)\n{\n    float q = max(p.x,-0.1);\n    float s = sin(p.x*7.0+t*70.0)*0.08;\n    p.y+=s;\n    p.y*=1.1;\n\n    vec4 c;\n    if (p.x>0.0) c=vec4(0,0,0,0); else\n        if (0.0/6.0<p.y&&p.y<1.0/6.0) c= vec4(255,43,14,255)/255.0; else\n            if (1.0/6.0<p.y&&p.y<2.0/6.0) c= vec4(255,168,6,255)/255.0; else\n                if (2.0/6.0<p.y&&p.y<3.0/6.0) c= vec4(255,244,0,255)/255.0; else\n                    if (3.0/6.0<p.y&&p.y<4.0/6.0) c= vec4(51,234,5,255)/255.0; else\n                        if (4.0/6.0<p.y&&p.y<5.0/6.0) c= vec4(8,163,255,255)/255.0; else\n                            if (5.0/6.0<p.y&&p.y<6.0/6.0) c= vec4(122,85,255,255)/255.0; else\n                                if (abs(p.y)-.05<0.0001) c=vec4(0.,0.,0.,1.); else\n                                    if (abs(p.y-1.)-.05<0.0001) c=vec4(0.,0.,0.,1.); else\n                                        c=vec4(0,0,0,0);\n    c.a*=.8-min(.8,abs(p.x*.08));\n    c.xyz=mix(c.xyz,vec3(length(c.xyz)),.15);\n    return c;\n}\n\nvec4 nyan(vec2 p)\n{\n    vec2 uv = p*vec2(0.4,1.0);\n    float ns=3.0;\n    float nt = iTime*ns; nt-=mod(nt,240.0/256.0/6.0); nt = mod(nt,240.0/256.0);\n    float ny = mod(iTime*ns,1.0); ny-=mod(ny,0.75); ny*=-0.05;\n    vec4 color = texture(iChannel1,vec2(uv.x/3.0+210.0/256.0-nt+0.05,.5-uv.y-ny));\n    if (uv.x<-0.3) color.a = 0.0;\n    if (uv.x>0.2) color.a=0.0;\n    return color;\n}\n\n\n// Raymarching and 2D graphics\n\nvec3 raymarch(in vec3 from, in vec3 dir)\n\n{\n    edge=0.;\n    vec3 p, norm;\n    float d=100.;\n    float totdist=0.;\n    for (int i=0; i<RAY_STEPS; i++) {\n        if (d>det && totdist<25.0) {\n            p=from+totdist*dir;\n            d=de(p);\n            det=detail*exp(.13*totdist);\n            totdist+=d;\n        }\n    }\n    vec3 col=vec3(0.);\n    p-=(det-d)*dir;\n    norm=normal(p);\n    #ifdef SHOWONLYEDGES\n    col=1.-vec3(edge); // show wireframe version\n    #else\n    col=(1.-abs(norm))*max(0.,1.-edge*.8); // set normal as color with dark edges\n    #endif\n    totdist=clamp(totdist,0.,26.);\n    dir.y-=.02;\n    float sunsize=7.-max(0.,texture(iChannel0,vec2(.6,.2)).x)*5.; // responsive sun size\n    float an=atan(dir.x,dir.y)+iTime*1.5; // angle for drawing and rotating sun\n    float s=pow(clamp(1.0-length(dir.xy)*sunsize-abs(.2-mod(an,.4)),0.,1.),.1); // sun\n    float sb=pow(clamp(1.0-length(dir.xy)*(sunsize-.2)-abs(.2-mod(an,.4)),0.,1.),.1); // sun border\n    float sg=pow(clamp(1.0-length(dir.xy)*(sunsize-4.5)-.5*abs(.2-mod(an,.4)),0.,1.),3.); // sun rays\n    float y=mix(.45,1.2,pow(smoothstep(0.,1.,.75-dir.y),2.))*(1.-sb*.5); // gradient sky\n\n    // set up background with sky and sun\n    vec3 backg=vec3(0.5,0.,1.)*((1.-s)*(1.-sg)*y+(1.-sb)*sg*vec3(1.,.8,0.15)*3.);\n    backg+=vec3(1.,.9,.1)*s;\n    backg=max(backg,sg*vec3(1.,.9,.5));\n\n    col=mix(vec3(1.,.9,.3),col,exp(-.004*totdist*totdist));// distant fading to sun color\n    if (totdist>25.) col=backg; // hit background\n    col=pow(col,vec3(GAMMA))*BRIGHTNESS;\n    col=mix(vec3(length(col)),col,SATURATION);\n    #ifdef SHOWONLYEDGES\n    col=1.-vec3(length(col));\n    #else\n    col*=vec3(1.,.9,.85);\n    #ifdef NYAN\n    dir.yx*=rot(dir.x);\n    vec2 ncatpos=(dir.xy+vec2(-3.+mod(-t,6.),-.27));\n    vec4 ncat=nyan(ncatpos*5.);\n    vec4 rain=rainbow(ncatpos*10.+vec2(.8,.5));\n    if (totdist>8.) col=mix(col,max(vec3(.2),rain.xyz),rain.a*.9);\n    if (totdist>8.) col=mix(col,max(vec3(.2),ncat.xyz),ncat.a*.9);\n    #endif\n    #endif\n    return col;\n}\n\n// get camera position\nvec3 move(inout vec3 dir) {\n    vec3 go=path(t);\n    vec3 adv=path(t+.7);\n    float hd=de(adv);\n    vec3 advec=normalize(adv-go);\n    float an=adv.x-go.x; an*=min(1.,abs(adv.z-go.z))*sign(adv.z-go.z)*.7;\n    dir.xy*=mat2(cos(an),sin(an),-sin(an),cos(an));\n    an=advec.y*1.7;\n    dir.yz*=mat2(cos(an),sin(an),-sin(an),cos(an));\n    an=atan(advec.x,advec.z);\n    dir.xz*=mat2(cos(an),sin(an),-sin(an),cos(an));\n    return go;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy*2.-1.;\n    vec2 oriuv=uv;\n    uv.y*=iResolution.y/iResolution.x;\n    vec2 mouse=(iMouse.xy/iResolution.xy-.5)*3.;\n    if (iMouse.z<1.) mouse=vec2(0.,-0.05);\n    float fov=.9-max(0.,.7-iTime*.3);\n    vec3 dir=normalize(vec3(uv*fov,1.));\n    dir.yz*=rot(mouse.y);\n    dir.xz*=rot(mouse.x);\n    vec3 from=origin+move(dir);\n    vec3 color=raymarch(from,dir);\n    #ifdef BORDER\n    color=mix(vec3(0.),color,pow(max(0.,.95-length(oriuv*oriuv*oriuv*vec2(1.05,1.1))),.3));\n    #endif\n    fragColor = vec4(color,1.);\n}\n   `;\nconst scene = new THREE.Scene();\nconst camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\nconst superman = {\n  origin: new THREE.Vector3(0, 3.5, 0),\n  speed: 10.0,\n  roll: Math.PI,\n  heading: 0,\n  pitch: Math.PI\n};\nconst uniforms = {\n  iTime: {\n    value: 0\n  },\n  iResolution: {\n    value: new THREE.Vector3(window.innerWidth, window.innerHeight, 1)\n  },\n  origin: {\n    value: superman.origin\n  },\n  roll: {\n    value: superman.roll\n  },\n  yaw: {\n    value: superman.heading\n  },\n  pitch: {\n    value: superman.pitch\n  },\n  amplitude: {\n    value: 0.5\n  },\n  frequency: {\n    value: 0.24\n  },\n  choppy: {\n    value: 3.0\n  },\n  night: {\n    value: false\n  }\n};\nconst plane = new THREE.PlaneGeometry(2, 2);\nconst material = new THREE.ShaderMaterial({\n  vertexShader,\n  fragmentShader,\n  uniforms\n});\nscene.add(new THREE.Mesh(plane, material));\nwindow.addEventListener('resize', onWindowResize, false);\nfunction onWindowResize() {\n  camera.updateProjectionMatrix();\n  uniforms.iResolution.value.set(window.innerWidth, window.innerHeight, 1);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\nconst stats = Stats();\ndocument.body.appendChild(stats.dom);\nconst clock = new THREE.Clock();\nlet delta = 0;\nlet alt = 0;\nfunction animate() {\n  requestAnimationFrame(animate);\n  delta = clock.getDelta();\n  superman.heading += (superman.roll - Math.PI) / 75;\n  superman.origin.x += -Math.sin(superman.heading) * superman.speed * delta;\n  superman.origin.z += Math.cos(superman.heading) * superman.speed * delta;\n  alt = superman.origin.y + (superman.pitch - Math.PI) / 10;\n  if (alt > 1) superman.origin.y = alt;\n  uniforms.iTime.value = clock.getElapsedTime();\n  uniforms.roll.value = superman.roll;\n  uniforms.yaw.value = superman.heading;\n  uniforms.pitch.value = superman.pitch;\n  uniforms.origin.value.copy(superman.origin);\n  render();\n  stats.update();\n}\nfunction render() {\n  renderer.render(scene, camera);\n}\nanimate();\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","TodoApp","reportWebVitals","Sketch","THREE","Stats","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","vertexShader","fragmentShader","scene","Scene","camera","OrthographicCamera","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","body","appendChild","domElement","superman","origin","Vector3","speed","roll","Math","PI","heading","pitch","uniforms","iTime","value","iResolution","yaw","amplitude","frequency","choppy","night","plane","PlaneGeometry","material","ShaderMaterial","add","Mesh","addEventListener","onWindowResize","updateProjectionMatrix","set","stats","dom","clock","Clock","delta","alt","animate","requestAnimationFrame","getDelta","x","sin","z","cos","y","getElapsedTime","copy","render","update","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport Sketch from \"react-p5\";\nimport * as THREE from 'three'\nimport Stats from 'three/examples/jsm/libs/stats.module'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\nconst vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\n// \"Fractal Cartoon\" - former \"DE edge detection\" by Kali\n\n// There are no lights and no AO, only color by normals and dark edges.\n\n// update: Nyan Cat cameo, thanks to code from mu6k: https://www.shadertoy.com/view/4dXGWH\n\n\n//#define SHOWONLYEDGES\n#define NYAN\n#define WAVES\n#define BORDER\n\n#define RAY_STEPS 150\n\n#define BRIGHTNESS 1.2\n#define GAMMA 1.4\n#define SATURATION .65\n\n\n#define detail .001\n#define t iTime*.5\n\n\nconst vec3 origin=vec3(-1.,.7,0.);\nfloat det=0.0;\n\n\n// 2D rotation function\nmat2 rot(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n// \"Amazing Surface\" fractal\nvec4 formula(vec4 p) {\n    p.xz = abs(p.xz+1.)-abs(p.xz-1.)-p.xz;\n    p.y-=.25;\n    p.xy*=rot(radians(35.));\n    p=p*2./clamp(dot(p.xyz,p.xyz),.2,1.);\n    return p;\n}\n\n// Distance function\nfloat de(vec3 pos) {\n    #ifdef WAVES\n    pos.y+=sin(pos.z-t*6.)*.15; //waves!\n    #endif\n    float hid=0.;\n    vec3 tpos=pos;\n    tpos.z=abs(3.-mod(tpos.z,6.));\n    vec4 p=vec4(tpos,1.);\n    for (int i=0; i<4; i++) {p=formula(p);}\n    float fr=(length(max(vec2(0.),p.yz-1.5))-1.)/p.w;\n    float ro=max(abs(pos.x+1.)-.3,pos.y-.35);\n    ro=max(ro,-max(abs(pos.x+1.)-.1,pos.y-.5));\n    pos.z=abs(.25-mod(pos.z,.5));\n    ro=max(ro,-max(abs(pos.z)-.2,pos.y-.3));\n    ro=max(ro,-max(abs(pos.z)-.01,-pos.y+.32));\n    float d=min(fr,ro);\n    return d;\n}\n\n\n// Camera path\nvec3 path(float ti) {\n    ti*=1.5;\n    vec3  p=vec3(sin(ti),(1.-sin(ti*2.))*.5,-ti*5.)*.5;\n    return p;\n}\n\n// Calc normals, and here is edge detection, set to variable \"edge\"\n\nfloat edge=0.;\nvec3 normal(vec3 p) {\n    vec3 e = vec3(0.0,det*5.,0.0);\n\n    float d1=de(p-e.yxx),d2=de(p+e.yxx);\n    float d3=de(p-e.xyx),d4=de(p+e.xyx);\n    float d5=de(p-e.xxy),d6=de(p+e.xxy);\n    float d=de(p);\n    edge=abs(d-0.5*(d2+d1))+abs(d-0.5*(d4+d3))+abs(d-0.5*(d6+d5));//edge finder\n    edge=min(1.,pow(edge,.55)*15.);\n    return normalize(vec3(d1-d2,d3-d4,d5-d6));\n}\n\n\n// Used Nyan Cat code by mu6k, with some mods\n\nvec4 rainbow(vec2 p)\n{\n    float q = max(p.x,-0.1);\n    float s = sin(p.x*7.0+t*70.0)*0.08;\n    p.y+=s;\n    p.y*=1.1;\n\n    vec4 c;\n    if (p.x>0.0) c=vec4(0,0,0,0); else\n        if (0.0/6.0<p.y&&p.y<1.0/6.0) c= vec4(255,43,14,255)/255.0; else\n            if (1.0/6.0<p.y&&p.y<2.0/6.0) c= vec4(255,168,6,255)/255.0; else\n                if (2.0/6.0<p.y&&p.y<3.0/6.0) c= vec4(255,244,0,255)/255.0; else\n                    if (3.0/6.0<p.y&&p.y<4.0/6.0) c= vec4(51,234,5,255)/255.0; else\n                        if (4.0/6.0<p.y&&p.y<5.0/6.0) c= vec4(8,163,255,255)/255.0; else\n                            if (5.0/6.0<p.y&&p.y<6.0/6.0) c= vec4(122,85,255,255)/255.0; else\n                                if (abs(p.y)-.05<0.0001) c=vec4(0.,0.,0.,1.); else\n                                    if (abs(p.y-1.)-.05<0.0001) c=vec4(0.,0.,0.,1.); else\n                                        c=vec4(0,0,0,0);\n    c.a*=.8-min(.8,abs(p.x*.08));\n    c.xyz=mix(c.xyz,vec3(length(c.xyz)),.15);\n    return c;\n}\n\nvec4 nyan(vec2 p)\n{\n    vec2 uv = p*vec2(0.4,1.0);\n    float ns=3.0;\n    float nt = iTime*ns; nt-=mod(nt,240.0/256.0/6.0); nt = mod(nt,240.0/256.0);\n    float ny = mod(iTime*ns,1.0); ny-=mod(ny,0.75); ny*=-0.05;\n    vec4 color = texture(iChannel1,vec2(uv.x/3.0+210.0/256.0-nt+0.05,.5-uv.y-ny));\n    if (uv.x<-0.3) color.a = 0.0;\n    if (uv.x>0.2) color.a=0.0;\n    return color;\n}\n\n\n// Raymarching and 2D graphics\n\nvec3 raymarch(in vec3 from, in vec3 dir)\n\n{\n    edge=0.;\n    vec3 p, norm;\n    float d=100.;\n    float totdist=0.;\n    for (int i=0; i<RAY_STEPS; i++) {\n        if (d>det && totdist<25.0) {\n            p=from+totdist*dir;\n            d=de(p);\n            det=detail*exp(.13*totdist);\n            totdist+=d;\n        }\n    }\n    vec3 col=vec3(0.);\n    p-=(det-d)*dir;\n    norm=normal(p);\n    #ifdef SHOWONLYEDGES\n    col=1.-vec3(edge); // show wireframe version\n    #else\n    col=(1.-abs(norm))*max(0.,1.-edge*.8); // set normal as color with dark edges\n    #endif\n    totdist=clamp(totdist,0.,26.);\n    dir.y-=.02;\n    float sunsize=7.-max(0.,texture(iChannel0,vec2(.6,.2)).x)*5.; // responsive sun size\n    float an=atan(dir.x,dir.y)+iTime*1.5; // angle for drawing and rotating sun\n    float s=pow(clamp(1.0-length(dir.xy)*sunsize-abs(.2-mod(an,.4)),0.,1.),.1); // sun\n    float sb=pow(clamp(1.0-length(dir.xy)*(sunsize-.2)-abs(.2-mod(an,.4)),0.,1.),.1); // sun border\n    float sg=pow(clamp(1.0-length(dir.xy)*(sunsize-4.5)-.5*abs(.2-mod(an,.4)),0.,1.),3.); // sun rays\n    float y=mix(.45,1.2,pow(smoothstep(0.,1.,.75-dir.y),2.))*(1.-sb*.5); // gradient sky\n\n    // set up background with sky and sun\n    vec3 backg=vec3(0.5,0.,1.)*((1.-s)*(1.-sg)*y+(1.-sb)*sg*vec3(1.,.8,0.15)*3.);\n    backg+=vec3(1.,.9,.1)*s;\n    backg=max(backg,sg*vec3(1.,.9,.5));\n\n    col=mix(vec3(1.,.9,.3),col,exp(-.004*totdist*totdist));// distant fading to sun color\n    if (totdist>25.) col=backg; // hit background\n    col=pow(col,vec3(GAMMA))*BRIGHTNESS;\n    col=mix(vec3(length(col)),col,SATURATION);\n    #ifdef SHOWONLYEDGES\n    col=1.-vec3(length(col));\n    #else\n    col*=vec3(1.,.9,.85);\n    #ifdef NYAN\n    dir.yx*=rot(dir.x);\n    vec2 ncatpos=(dir.xy+vec2(-3.+mod(-t,6.),-.27));\n    vec4 ncat=nyan(ncatpos*5.);\n    vec4 rain=rainbow(ncatpos*10.+vec2(.8,.5));\n    if (totdist>8.) col=mix(col,max(vec3(.2),rain.xyz),rain.a*.9);\n    if (totdist>8.) col=mix(col,max(vec3(.2),ncat.xyz),ncat.a*.9);\n    #endif\n    #endif\n    return col;\n}\n\n// get camera position\nvec3 move(inout vec3 dir) {\n    vec3 go=path(t);\n    vec3 adv=path(t+.7);\n    float hd=de(adv);\n    vec3 advec=normalize(adv-go);\n    float an=adv.x-go.x; an*=min(1.,abs(adv.z-go.z))*sign(adv.z-go.z)*.7;\n    dir.xy*=mat2(cos(an),sin(an),-sin(an),cos(an));\n    an=advec.y*1.7;\n    dir.yz*=mat2(cos(an),sin(an),-sin(an),cos(an));\n    an=atan(advec.x,advec.z);\n    dir.xz*=mat2(cos(an),sin(an),-sin(an),cos(an));\n    return go;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy*2.-1.;\n    vec2 oriuv=uv;\n    uv.y*=iResolution.y/iResolution.x;\n    vec2 mouse=(iMouse.xy/iResolution.xy-.5)*3.;\n    if (iMouse.z<1.) mouse=vec2(0.,-0.05);\n    float fov=.9-max(0.,.7-iTime*.3);\n    vec3 dir=normalize(vec3(uv*fov,1.));\n    dir.yz*=rot(mouse.y);\n    dir.xz*=rot(mouse.x);\n    vec3 from=origin+move(dir);\n    vec3 color=raymarch(from,dir);\n    #ifdef BORDER\n    color=mix(vec3(0.),color,pow(max(0.,.95-length(oriuv*oriuv*oriuv*vec2(1.05,1.1))),.3));\n    #endif\n    fragColor = vec4(color,1.);\n}\n   `\n\nconst scene = new THREE.Scene()\n\nconst camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1)\n\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setSize(window.innerWidth, window.innerHeight)\ndocument.body.appendChild(renderer.domElement)\n\nconst superman = {\n    origin: new THREE.Vector3(0, 3.5, 0),\n    speed: 10.0,\n    roll: Math.PI,\n    heading: 0,\n    pitch: Math.PI,\n}\n\nconst uniforms = {\n    iTime: { value: 0 },\n    iResolution: { value: new THREE.Vector3(window.innerWidth, window.innerHeight, 1) },\n    origin: { value: superman.origin },\n    roll: { value: superman.roll },\n    yaw: { value: superman.heading },\n    pitch: { value: superman.pitch },\n    amplitude: { value: 0.5 },\n    frequency: { value: 0.24 },\n    choppy: { value: 3.0 },\n    night: { value: false },\n}\n\nconst plane = new THREE.PlaneGeometry(2, 2)\nconst material = new THREE.ShaderMaterial({\n    vertexShader,\n    fragmentShader,\n    uniforms,\n})\nscene.add(new THREE.Mesh(plane, material))\n\nwindow.addEventListener('resize', onWindowResize, false)\nfunction onWindowResize() {\n    camera.updateProjectionMatrix()\n    uniforms.iResolution.value.set(window.innerWidth, window.innerHeight, 1)\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\nconst stats = Stats()\ndocument.body.appendChild(stats.dom)\n\n\n\nconst clock = new THREE.Clock()\nlet delta = 0\nlet alt = 0\n\nfunction animate() {\n    requestAnimationFrame(animate)\n\n    delta = clock.getDelta()\n\n    superman.heading += (superman.roll - Math.PI) / 75\n    superman.origin.x += -Math.sin(superman.heading) * superman.speed * delta\n    superman.origin.z += Math.cos(superman.heading) * superman.speed * delta\n    alt = superman.origin.y + (superman.pitch - Math.PI) / 10\n    if (alt > 1) superman.origin.y = alt\n\n        uniforms.iTime.value = clock.getElapsedTime()\n        uniforms.roll.value = superman.roll\n        uniforms.yaw.value = superman.heading\n        uniforms.pitch.value = superman.pitch\n        uniforms.origin.value.copy(superman.origin)\n\n        render()\n\n        stats.update()\n}\n\nfunction render() {\n    renderer.render(scene, camera)\n}\n\nanimate()\n\n\nroot.render(\n    <>\n<TodoApp />\n<footer>©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}