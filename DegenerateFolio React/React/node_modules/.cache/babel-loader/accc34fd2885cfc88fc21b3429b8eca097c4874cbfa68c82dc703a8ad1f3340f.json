{"ast":null,"code":"\"use strict\";\n\nfunction mapWebGLBlendModesToPixi(gl) {\n  const blendMap = {};\n  blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.add = [gl.ONE, gl.ONE];\n  blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.none = [0, 0];\n  blendMap[\"normal-npm\"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap[\"add-npm\"] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n  blendMap[\"screen-npm\"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n  return blendMap;\n}\nexport { mapWebGLBlendModesToPixi };","map":{"version":3,"names":["mapWebGLBlendModesToPixi","gl","blendMap","normal","ONE","ONE_MINUS_SRC_ALPHA","add","multiply","DST_COLOR","screen","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","erase","ZERO"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.ts"],"sourcesContent":["import type { BLEND_MODES } from '../../shared/state/const';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @param gl\n * @returns {object} Map of gl blend combinations to WebGL.\n */\nexport function mapWebGLBlendModesToPixi(gl: GlRenderingContext): Record<BLEND_MODES, number[]>\n{\n    const blendMap: Partial<Record<BLEND_MODES, number[]>> = {};\n\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.add = [gl.ONE, gl.ONE];\n    blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.none = [0, 0];\n\n    // not-premultiplied blend modes\n    blendMap['normal-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap['add-npm'] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    blendMap['screen-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // TODO - implement if requested!\n    // composite operations\n    // array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    // array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    // array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    // array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // SUBTRACT from flash\n    // array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return blendMap as Record<BLEND_MODES, number[]>;\n}\n"],"mappings":";;AAQO,SAASA,yBAAyBC,EACzC;EACI,MAAMC,QAAA,GAAmD,EAAC;EAI1DA,QAAA,CAASC,MAAS,IAACF,EAAG,CAAAG,GAAA,EAAKH,EAAA,CAAGI,mBAAmB;EACjDH,QAAA,CAASI,GAAM,IAACL,EAAG,CAAAG,GAAA,EAAKH,EAAA,CAAGG,GAAG;EACrBF,QAAA,CAAAK,QAAA,GAAW,CAACN,EAAG,CAAAO,SAAA,EAAWP,EAAA,CAAGI,mBAAqB,EAAAJ,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EAChFH,QAAA,CAAAO,MAAA,GAAS,CAACR,EAAG,CAAAG,GAAA,EAAKH,EAAA,CAAGS,mBAAqB,EAAAT,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EACxEH,QAAA,CAAAS,IAAA,GAAO,CAAC,GAAG,CAAC;EAGZT,QAAA,aAAY,CAAI,IAACD,EAAG,CAAAW,SAAA,EAAWX,EAAA,CAAGI,mBAAqB,EAAAJ,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EACrFH,QAAA,UAAS,CAAI,IAACD,EAAG,CAAAW,SAAA,EAAWX,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGG,GAAG;EAClDF,QAAA,aAAY,CAAI,IAACD,EAAG,CAAAW,SAAA,EAAWX,EAAA,CAAGS,mBAAqB,EAAAT,EAAA,CAAGG,GAAK,EAAAH,EAAA,CAAGI,mBAAmB;EAE9FH,QAAA,CAASW,KAAQ,IAACZ,EAAG,CAAAa,IAAA,EAAMb,EAAA,CAAGI,mBAAmB;EAc1C,OAAAH,QAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}