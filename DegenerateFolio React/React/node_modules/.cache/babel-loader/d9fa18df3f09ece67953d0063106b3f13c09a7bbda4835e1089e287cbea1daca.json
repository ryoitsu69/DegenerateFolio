{"ast":null,"code":"import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(this.texture.source.width, this.texture.source.height, value);\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.multiView = !!options.multiView;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${this.texture.width}px`;\n      this.canvas.style.height = `${this.texture.height}px`;\n    }\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n    if (this.autoDensity) {\n      this.canvas.style.width = `${desiredScreenWidth}px`;\n      this.canvas.style.height = `${desiredScreenHeight}px`;\n    }\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem, ExtensionType.CanvasSystem],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\nexport { ViewSystem };","map":{"version":3,"names":["_ViewSystem","resolution","texture","source","_resolution","value","resize","width","height","init","options","defaultOptions","view","deprecation","v8_0_0","canvas","screen","Rectangle","DOMAdapter","get","createCanvas","antialias","getCanvasTexture","renderTarget","RenderTarget","colorTextures","depth","isRoot","transparent","backgroundAlpha","multiView","autoDensity","style","desiredScreenWidth","desiredScreenHeight","frame","destroy","removeView","parentNode","removeChild","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","priority","ViewSystem"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/view/ViewSystem.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource, CanvasSourceOptions } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n    /**\n     * TODO: multiView\n     * @memberof rendering.SharedRendererOptions\n     */\n    multiView?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    public multiView: boolean;\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public autoDensity: boolean;\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options as CanvasSourceOptions);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        (this.texture.source as CanvasSource).transparent = options.backgroundAlpha < 1;\n        this.multiView = !!options.multiView;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${this.texture.width}px`;\n            this.canvas.style.height = `${this.texture.height}px`;\n        }\n\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${desiredScreenWidth}px`;\n            this.canvas.style.height = `${desiredScreenHeight}px`;\n        }\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}