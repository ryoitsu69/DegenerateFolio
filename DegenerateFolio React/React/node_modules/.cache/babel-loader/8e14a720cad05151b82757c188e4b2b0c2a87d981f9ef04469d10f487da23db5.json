{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeCosmosSdkDecFromProto = exports.longify = exports.createProtobufRpcClient = exports.createPagination = exports.toAccAddress = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst pagination_1 = require(\"cosmjs-types/cosmos/base/query/v1beta1/pagination\");\n/**\n * Takes a bech32 encoded address and returns the data part. The prefix is ignored and discarded.\n * This is called AccAddress in Cosmos SDK, which is basically an alias for raw binary data.\n * The result is typically 20 bytes long but not restricted to that.\n */\nfunction toAccAddress(address) {\n  return (0, encoding_1.fromBech32)(address).data;\n}\nexports.toAccAddress = toAccAddress;\n/**\n * If paginationKey is set, return a `PageRequest` with the given key.\n * If paginationKey is unset, return `undefined`.\n *\n * Use this with a query response's pagination next key to\n * request the next page.\n */\nfunction createPagination(paginationKey) {\n  return paginationKey ? pagination_1.PageRequest.fromPartial({\n    key: paginationKey\n  }) : pagination_1.PageRequest.fromPartial({});\n}\nexports.createPagination = createPagination;\nfunction createProtobufRpcClient(base) {\n  return {\n    request: async (service, method, data) => {\n      const path = `/${service}/${method}`;\n      const response = await base.queryAbci(path, data, undefined);\n      return response.value;\n    }\n  };\n}\nexports.createProtobufRpcClient = createProtobufRpcClient;\n/**\n * Takes a uint64 value as string, number, BigInt or Uint64 and returns a BigInt\n * of it.\n */\nfunction longify(value) {\n  const checkedValue = math_1.Uint64.fromString(value.toString());\n  return BigInt(checkedValue.toString());\n}\nexports.longify = longify;\n/**\n * Takes a string or binary encoded `github.com/cosmos/cosmos-sdk/types.Dec` from the\n * protobuf API and converts it into a `Decimal` with 18 fractional digits.\n *\n * See https://github.com/cosmos/cosmos-sdk/issues/10863 for more context why this is needed.\n */\nfunction decodeCosmosSdkDecFromProto(input) {\n  const asString = typeof input === \"string\" ? input : (0, encoding_1.fromAscii)(input);\n  return math_1.Decimal.fromAtomics(asString, 18);\n}\nexports.decodeCosmosSdkDecFromProto = decodeCosmosSdkDecFromProto;","map":{"version":3,"names":["encoding_1","require","math_1","pagination_1","toAccAddress","address","fromBech32","data","exports","createPagination","paginationKey","PageRequest","fromPartial","key","createProtobufRpcClient","base","request","service","method","path","response","queryAbci","undefined","value","longify","checkedValue","Uint64","fromString","toString","BigInt","decodeCosmosSdkDecFromProto","input","asString","fromAscii","Decimal","fromAtomics"],"sources":["../../src/queryclient/utils.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAIA;;;;;AAKA,SAAgBG,YAAYA,CAACC,OAAe;EAC1C,OAAO,IAAAL,UAAA,CAAAM,UAAU,EAACD,OAAO,CAAC,CAACE,IAAI;AACjC;AAFAC,OAAA,CAAAJ,YAAA,GAAAA,YAAA;AAIA;;;;;;;AAOA,SAAgBK,gBAAgBA,CAACC,aAA0B;EACzD,OAAOA,aAAa,GAAGP,YAAA,CAAAQ,WAAW,CAACC,WAAW,CAAC;IAAEC,GAAG,EAAEH;EAAa,CAAE,CAAC,GAAGP,YAAA,CAAAQ,WAAW,CAACC,WAAW,CAAC,EAAE,CAAC;AACtG;AAFAJ,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AAQA,SAAgBK,uBAAuBA,CAACC,IAAiB;EACvD,OAAO;IACLC,OAAO,EAAE,MAAAA,CAAOC,OAAe,EAAEC,MAAc,EAAEX,IAAgB,KAAyB;MACxF,MAAMY,IAAI,GAAG,IAAIF,OAAO,IAAIC,MAAM,EAAE;MACpC,MAAME,QAAQ,GAAG,MAAML,IAAI,CAACM,SAAS,CAACF,IAAI,EAAEZ,IAAI,EAAEe,SAAS,CAAC;MAC5D,OAAOF,QAAQ,CAACG,KAAK;IACvB;GACD;AACH;AARAf,OAAA,CAAAM,uBAAA,GAAAA,uBAAA;AAUA;;;;AAIA,SAAgBU,OAAOA,CAACD,KAA+B;EACrD,MAAME,YAAY,GAAGvB,MAAA,CAAAwB,MAAM,CAACC,UAAU,CAACJ,KAAK,CAACK,QAAQ,EAAE,CAAC;EACxD,OAAOC,MAAM,CAACJ,YAAY,CAACG,QAAQ,EAAE,CAAC;AACxC;AAHApB,OAAA,CAAAgB,OAAA,GAAAA,OAAA;AAKA;;;;;;AAMA,SAAgBM,2BAA2BA,CAACC,KAA0B;EACpE,MAAMC,QAAQ,GAAG,OAAOD,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,IAAA/B,UAAA,CAAAiC,SAAS,EAACF,KAAK,CAAC;EACrE,OAAO7B,MAAA,CAAAgC,OAAO,CAACC,WAAW,CAACH,QAAQ,EAAE,EAAE,CAAC;AAC1C;AAHAxB,OAAA,CAAAsB,2BAAA,GAAAA,2BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}