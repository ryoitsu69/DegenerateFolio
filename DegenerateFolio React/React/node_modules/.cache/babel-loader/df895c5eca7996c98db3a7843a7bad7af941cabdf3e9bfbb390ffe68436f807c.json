{"ast":null,"code":"import { isCodec, isU8a, lazyMethod, stringCamelCase } from '@polkadot/util';\nimport { lazyVariants } from '../../../create/lazy.js';\nimport { variantToMeta } from '../errors/index.js';\nimport { objectNameToString } from '../util.js';\nexport function filterEventsSome({\n  events\n}) {\n  return events.isSome;\n}\n/** @internal */\nexport function decorateEvents(registry, {\n  lookup,\n  pallets\n}, version) {\n  const result = {};\n  const filtered = pallets.filter(filterEventsSome);\n  for (let i = 0, count = filtered.length; i < count; i++) {\n    const {\n      events,\n      index,\n      name\n    } = filtered[i];\n    const sectionIndex = version >= 12 ? index.toNumber() : i;\n    lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events.unwrap(), objectNameToString, variant => ({\n      // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects\n      is: eventRecord => isCodec(eventRecord) && isU8a(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),\n      meta: registry.createTypeUnsafe('EventMetadataLatest', [variantToMeta(lookup, variant)])\n    })));\n  }\n  return result;\n}","map":{"version":3,"names":["isCodec","isU8a","lazyMethod","stringCamelCase","lazyVariants","variantToMeta","objectNameToString","filterEventsSome","events","isSome","decorateEvents","registry","lookup","pallets","version","result","filtered","filter","i","count","length","index","name","sectionIndex","toNumber","unwrap","variant","is","eventRecord","eq","meta","createTypeUnsafe"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/metadata/decorate/events/index.js"],"sourcesContent":["import { isCodec, isU8a, lazyMethod, stringCamelCase } from '@polkadot/util';\nimport { lazyVariants } from '../../../create/lazy.js';\nimport { variantToMeta } from '../errors/index.js';\nimport { objectNameToString } from '../util.js';\nexport function filterEventsSome({ events }) {\n    return events.isSome;\n}\n/** @internal */\nexport function decorateEvents(registry, { lookup, pallets }, version) {\n    const result = {};\n    const filtered = pallets.filter(filterEventsSome);\n    for (let i = 0, count = filtered.length; i < count; i++) {\n        const { events, index, name } = filtered[i];\n        const sectionIndex = version >= 12 ? index.toNumber() : i;\n        lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events.unwrap(), objectNameToString, (variant) => ({\n            // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects\n            is: (eventRecord) => isCodec(eventRecord) &&\n                isU8a(eventRecord.index) &&\n                sectionIndex === eventRecord.index[0] &&\n                variant.index.eq(eventRecord.index[1]),\n            meta: registry.createTypeUnsafe('EventMetadataLatest', [variantToMeta(lookup, variant)])\n        })));\n    }\n    return result;\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEC,eAAe,QAAQ,gBAAgB;AAC5E,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,kBAAkB,QAAQ,YAAY;AAC/C,OAAO,SAASC,gBAAgBA,CAAC;EAAEC;AAAO,CAAC,EAAE;EACzC,OAAOA,MAAM,CAACC,MAAM;AACxB;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,QAAQ,EAAE;EAAEC,MAAM;EAAEC;AAAQ,CAAC,EAAEC,OAAO,EAAE;EACnE,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,QAAQ,GAAGH,OAAO,CAACI,MAAM,CAACV,gBAAgB,CAAC;EACjD,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAGH,QAAQ,CAACI,MAAM,EAAEF,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;IACrD,MAAM;MAAEV,MAAM;MAAEa,KAAK;MAAEC;IAAK,CAAC,GAAGN,QAAQ,CAACE,CAAC,CAAC;IAC3C,MAAMK,YAAY,GAAGT,OAAO,IAAI,EAAE,GAAGO,KAAK,CAACG,QAAQ,CAAC,CAAC,GAAGN,CAAC;IACzDhB,UAAU,CAACa,MAAM,EAAEZ,eAAe,CAACmB,IAAI,CAAC,EAAE,MAAMlB,YAAY,CAACQ,MAAM,EAAEJ,MAAM,CAACiB,MAAM,CAAC,CAAC,EAAEnB,kBAAkB,EAAGoB,OAAO,KAAM;MACpH;MACAC,EAAE,EAAGC,WAAW,IAAK5B,OAAO,CAAC4B,WAAW,CAAC,IACrC3B,KAAK,CAAC2B,WAAW,CAACP,KAAK,CAAC,IACxBE,YAAY,KAAKK,WAAW,CAACP,KAAK,CAAC,CAAC,CAAC,IACrCK,OAAO,CAACL,KAAK,CAACQ,EAAE,CAACD,WAAW,CAACP,KAAK,CAAC,CAAC,CAAC,CAAC;MAC1CS,IAAI,EAAEnB,QAAQ,CAACoB,gBAAgB,CAAC,qBAAqB,EAAE,CAAC1B,aAAa,CAACO,MAAM,EAAEc,OAAO,CAAC,CAAC;IAC3F,CAAC,CAAC,CAAC,CAAC;EACR;EACA,OAAOX,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}