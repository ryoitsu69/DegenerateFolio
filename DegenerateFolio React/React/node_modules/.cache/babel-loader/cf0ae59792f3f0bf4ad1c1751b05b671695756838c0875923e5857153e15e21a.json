{"ast":null,"code":"\"use strict\";\n\nfunction pointInTriangle(px, py, x1, y1, x2, y2, x3, y3) {\n  const v2x = x3 - x1;\n  const v2y = y3 - y1;\n  const v1x = x2 - x1;\n  const v1y = y2 - y1;\n  const v0x = px - x1;\n  const v0y = py - y1;\n  const dot00 = v2x * v2x + v2y * v2y;\n  const dot01 = v2x * v1x + v2y * v1y;\n  const dot02 = v2x * v0x + v2y * v0y;\n  const dot11 = v1x * v1x + v1y * v1y;\n  const dot12 = v1x * v0x + v1y * v0y;\n  const invDenom = 1 / (dot00 * dot11 - dot01 * dot01);\n  const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n  const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n  return u >= 0 && v >= 0 && u + v < 1;\n}\nexport { pointInTriangle };","map":{"version":3,"names":["pointInTriangle","px","py","x1","y1","x2","y2","x3","y3","v2x","v2y","v1x","v1y","v0x","v0y","dot00","dot01","dot02","dot11","dot12","invDenom","u","v"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/point/pointInTriangle.ts"],"sourcesContent":["/**\n * Check if a point is inside a triangle.\n * @param px - x coordinate of the point\n * @param py - y coordinate of the point\n * @param x1 - x coordinate of the first vertex of the triangle\n * @param y1 - y coordinate of the first vertex of the triangle\n * @param x2 - x coordinate of the second vertex of the triangle\n * @param y2 - y coordinate of the second vertex of the triangle\n * @param x3 - x coordinate of the third vertex of the triangle\n * @param y3 - y coordinate of the third vertex of the triangle\n * @returns `true` if the point is inside the triangle, `false` otherwise\n */\nexport function pointInTriangle(\n    px: number, py: number,\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number\n)\n{\n    // Calculate vectors from point p to each vertex of the triangle\n    const v2x = x3 - x1;\n    const v2y = y3 - y1;\n    const v1x = x2 - x1;\n    const v1y = y2 - y1;\n    const v0x = px - x1;\n    const v0y = py - y1;\n\n    // Compute dot products\n    const dot00 = (v2x * v2x) + (v2y * v2y);\n    const dot01 = (v2x * v1x) + (v2y * v1y);\n    const dot02 = (v2x * v0x) + (v2y * v0y);\n    const dot11 = (v1x * v1x) + (v1y * v1y);\n    const dot12 = (v1x * v0x) + (v1y * v0y);\n\n    // Calculate barycentric coordinates\n    const invDenom = 1 / ((dot00 * dot11) - (dot01 * dot01));\n    const u = ((dot11 * dot02) - (dot01 * dot12)) * invDenom;\n    const v = ((dot00 * dot12) - (dot01 * dot02)) * invDenom;\n\n    // Check if point is in triangle\n    return (u >= 0) && (v >= 0) && (u + v < 1);\n}\n"],"mappings":";;AAYgB,SAAAA,gBACZC,EAAA,EAAYC,EACZ,EAAAC,EAAA,EAAYC,EAAA,EACZC,EAAY,EAAAC,EAAA,EACZC,EAAA,EAAYC,EAEhB;EAEI,MAAMC,GAAA,GAAMF,EAAK,GAAAJ,EAAA;EACjB,MAAMO,GAAA,GAAMF,EAAK,GAAAJ,EAAA;EACjB,MAAMO,GAAA,GAAMN,EAAK,GAAAF,EAAA;EACjB,MAAMS,GAAA,GAAMN,EAAK,GAAAF,EAAA;EACjB,MAAMS,GAAA,GAAMZ,EAAK,GAAAE,EAAA;EACjB,MAAMW,GAAA,GAAMZ,EAAK,GAAAE,EAAA;EAGX,MAAAW,KAAA,GAASN,GAAM,GAAAA,GAAA,GAAQC,GAAM,GAAAA,GAAA;EAC7B,MAAAM,KAAA,GAASP,GAAM,GAAAE,GAAA,GAAQD,GAAM,GAAAE,GAAA;EAC7B,MAAAK,KAAA,GAASR,GAAM,GAAAI,GAAA,GAAQH,GAAM,GAAAI,GAAA;EAC7B,MAAAI,KAAA,GAASP,GAAM,GAAAA,GAAA,GAAQC,GAAM,GAAAA,GAAA;EAC7B,MAAAO,KAAA,GAASR,GAAM,GAAAE,GAAA,GAAQD,GAAM,GAAAE,GAAA;EAGnC,MAAMM,QAAW,QAAML,KAAQ,GAAAG,KAAA,GAAUF,KAAQ,GAAAA,KAAA;EACjD,MAAMK,CAAM,IAAAH,KAAA,GAAQD,KAAU,GAAAD,KAAA,GAAQG,KAAU,IAAAC,QAAA;EAChD,MAAME,CAAM,IAAAP,KAAA,GAAQI,KAAU,GAAAH,KAAA,GAAQC,KAAU,IAAAG,QAAA;EAGhD,OAAQC,CAAK,SAAOC,CAAK,SAAOD,CAAA,GAAIC,CAAI;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}