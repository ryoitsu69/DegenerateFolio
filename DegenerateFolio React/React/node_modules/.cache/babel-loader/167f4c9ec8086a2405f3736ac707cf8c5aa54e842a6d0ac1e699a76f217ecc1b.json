{"ast":null,"code":"const recordIdentity = record => record;\nfunction filterAndApply(events, section, methods, onFound) {\n  return events.filter(({\n    event\n  }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));\n}\nfunction getDispatchError({\n  event: {\n    data: [dispatchError]\n  }\n}) {\n  return dispatchError;\n}\nfunction getDispatchInfo({\n  event: {\n    data,\n    method\n  }\n}) {\n  return method === 'ExtrinsicSuccess' ? data[0] : data[1];\n}\nfunction extractError(events = []) {\n  return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];\n}\nfunction extractInfo(events = []) {\n  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];\n}\nexport class SubmittableResult {\n  dispatchError;\n  dispatchInfo;\n  internalError;\n  events;\n  status;\n  txHash;\n  txIndex;\n  blockNumber;\n  constructor({\n    blockNumber,\n    dispatchError,\n    dispatchInfo,\n    events,\n    internalError,\n    status,\n    txHash,\n    txIndex\n  }) {\n    this.dispatchError = dispatchError || extractError(events);\n    this.dispatchInfo = dispatchInfo || extractInfo(events);\n    this.events = events || [];\n    this.internalError = internalError;\n    this.status = status;\n    this.txHash = txHash;\n    this.txIndex = txIndex;\n    this.blockNumber = blockNumber;\n  }\n  get isCompleted() {\n    return this.isError || this.status.isInBlock || this.status.isFinalized;\n  }\n  get isError() {\n    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n  }\n  get isFinalized() {\n    return this.status.isFinalized;\n  }\n  get isInBlock() {\n    return this.status.isInBlock;\n  }\n  get isWarning() {\n    return this.status.isRetracted;\n  }\n  /**\n   * @description Filters EventRecords for the specified method & section (there could be multiple)\n   */\n  filterRecords(section, method) {\n    return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);\n  }\n  /**\n   * @description Finds an EventRecord for the specified method & section\n   */\n  findRecord(section, method) {\n    return this.filterRecords(section, method)[0];\n  }\n  /**\n   * @description Creates a human representation of the output\n   */\n  toHuman(isExtended) {\n    return {\n      dispatchError: this.dispatchError?.toHuman(),\n      dispatchInfo: this.dispatchInfo?.toHuman(),\n      events: this.events.map(e => e.toHuman(isExtended)),\n      internalError: this.internalError?.message.toString(),\n      status: this.status.toHuman(isExtended)\n    };\n  }\n}","map":{"version":3,"names":["recordIdentity","record","filterAndApply","events","section","methods","onFound","filter","event","includes","method","map","getDispatchError","data","dispatchError","getDispatchInfo","extractError","extractInfo","SubmittableResult","dispatchInfo","internalError","status","txHash","txIndex","blockNumber","constructor","isCompleted","isError","isInBlock","isFinalized","isDropped","isFinalityTimeout","isInvalid","isUsurped","isWarning","isRetracted","filterRecords","Array","isArray","findRecord","toHuman","isExtended","e","message","toString"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api/submittable/Result.js"],"sourcesContent":["const recordIdentity = (record) => record;\nfunction filterAndApply(events, section, methods, onFound) {\n    return events\n        .filter(({ event }) => section === event.section &&\n        methods.includes(event.method))\n        .map((record) => onFound(record));\n}\nfunction getDispatchError({ event: { data: [dispatchError] } }) {\n    return dispatchError;\n}\nfunction getDispatchInfo({ event: { data, method } }) {\n    return method === 'ExtrinsicSuccess'\n        ? data[0]\n        : data[1];\n}\nfunction extractError(events = []) {\n    return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];\n}\nfunction extractInfo(events = []) {\n    return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];\n}\nexport class SubmittableResult {\n    dispatchError;\n    dispatchInfo;\n    internalError;\n    events;\n    status;\n    txHash;\n    txIndex;\n    blockNumber;\n    constructor({ blockNumber, dispatchError, dispatchInfo, events, internalError, status, txHash, txIndex }) {\n        this.dispatchError = dispatchError || extractError(events);\n        this.dispatchInfo = dispatchInfo || extractInfo(events);\n        this.events = events || [];\n        this.internalError = internalError;\n        this.status = status;\n        this.txHash = txHash;\n        this.txIndex = txIndex;\n        this.blockNumber = blockNumber;\n    }\n    get isCompleted() {\n        return this.isError || this.status.isInBlock || this.status.isFinalized;\n    }\n    get isError() {\n        return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;\n    }\n    get isFinalized() {\n        return this.status.isFinalized;\n    }\n    get isInBlock() {\n        return this.status.isInBlock;\n    }\n    get isWarning() {\n        return this.status.isRetracted;\n    }\n    /**\n     * @description Filters EventRecords for the specified method & section (there could be multiple)\n     */\n    filterRecords(section, method) {\n        return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);\n    }\n    /**\n     * @description Finds an EventRecord for the specified method & section\n     */\n    findRecord(section, method) {\n        return this.filterRecords(section, method)[0];\n    }\n    /**\n     * @description Creates a human representation of the output\n     */\n    toHuman(isExtended) {\n        return {\n            dispatchError: this.dispatchError?.toHuman(),\n            dispatchInfo: this.dispatchInfo?.toHuman(),\n            events: this.events.map((e) => e.toHuman(isExtended)),\n            internalError: this.internalError?.message.toString(),\n            status: this.status.toHuman(isExtended)\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}