{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.http = void 0;\nconst axios_1 = __importDefault(require(\"axios\"));\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(`Bad status on response: ${res.status}`);\n  }\n  return res;\n}\n/**\n * Node.js 18 comes with exprimental fetch support (https://nodejs.org/de/blog/announcements/v18-release-announce/).\n * This is nice, but the implementation does not yet work wekk for us. We\n * can just stick with axios on those systems for now.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isExperimental(nodeJsFunc) {\n  // This works because we get this info in node 18:\n  //\n  // > fetch.toString()\n  // 'async function fetch(input, init = undefined) {\\n' +\n  // \"    emitExperimentalWarning('The Fetch API');\\n\" +\n  // '    return lazyUndici().fetch(input, init);\\n' +\n  // '  }'\n  return nodeJsFunc.toString().includes(\"emitExperimentalWarning\");\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nasync function http(method, url, headers, request) {\n  if (typeof fetch === \"function\" && !isExperimental(fetch)) {\n    const settings = {\n      method: method,\n      body: request ? JSON.stringify(request) : undefined,\n      headers: {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        \"Content-Type\": \"application/json\",\n        ...headers\n      }\n    };\n    return fetch(url, settings).then(filterBadStatus).then(res => res.json());\n  } else {\n    return axios_1.default.request({\n      url: url,\n      method: method,\n      data: request,\n      headers: headers\n    }).then(res => res.data);\n  }\n}\nexports.http = http;","map":{"version":3,"names":["axios_1","__importDefault","require","filterBadStatus","res","status","Error","isExperimental","nodeJsFunc","toString","includes","http","method","url","headers","request","fetch","settings","body","JSON","stringify","undefined","then","json","default","data","exports"],"sources":["../../src/rpcclients/http.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAMA,SAASC,eAAeA,CAACC,GAAQ;EAC/B,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,2BAA2BF,GAAG,CAACC,MAAM,EAAE,CAAC;;EAE1D,OAAOD,GAAG;AACZ;AAEA;;;;;AAKA;AACA,SAASG,cAAcA,CAACC,UAAoB;EAC1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOA,UAAU,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAAC,yBAAyB,CAAC;AAClE;AAEA;;;;;AAKA;AACO,eAAeC,IAAIA,CACxBC,MAAc,EACdC,GAAW,EACXC,OAA2C,EAC3CC,OAAa;EAEb,IAAI,OAAOC,KAAK,KAAK,UAAU,IAAI,CAACT,cAAc,CAACS,KAAK,CAAC,EAAE;IACzD,MAAMC,QAAQ,GAAG;MACfL,MAAM,EAAEA,MAAM;MACdM,IAAI,EAAEH,OAAO,GAAGI,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,GAAGM,SAAS;MACnDP,OAAO,EAAE;QACP;QACA,cAAc,EAAE,kBAAkB;QAClC,GAAGA;;KAEN;IACD,OAAOE,KAAK,CAACH,GAAG,EAAEI,QAAQ,CAAC,CACxBK,IAAI,CAACnB,eAAe,CAAC,CACrBmB,IAAI,CAAElB,GAAQ,IAAKA,GAAG,CAACmB,IAAI,EAAE,CAAC;GAClC,MAAM;IACL,OAAOvB,OAAA,CAAAwB,OAAK,CACTT,OAAO,CAAC;MAAEF,GAAG,EAAEA,GAAG;MAAED,MAAM,EAAEA,MAAM;MAAEa,IAAI,EAAEV,OAAO;MAAED,OAAO,EAAEA;IAAO,CAAE,CAAC,CACtEQ,IAAI,CAAElB,GAAG,IAAKA,GAAG,CAACqB,IAAI,CAAC;;AAE9B;AAxBAC,OAAA,CAAAf,IAAA,GAAAA,IAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}