{"ast":null,"code":"import { Enum } from '@polkadot/types-codec';\nimport { isBn, isNumber, isString, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { GenericAccountId } from './AccountId.js';\nimport { GenericAccountIndex } from './AccountIndex.js';\nfunction decodeU8a(registry, u8a) {\n  if ([0, 32].includes(u8a.length)) {\n    return {\n      Id: u8a\n    };\n  } else if (u8a.length === 20) {\n    return {\n      Address20: u8a\n    };\n  } else if (u8a.length <= 8) {\n    return {\n      Index: registry.createTypeUnsafe('AccountIndex', [u8a]).toNumber()\n    };\n  }\n  return u8a;\n}\nfunction decodeMultiAny(registry, value) {\n  if (value instanceof GenericAccountId) {\n    return {\n      Id: value\n    };\n  } else if (isU8a(value)) {\n    // NOTE This is after the AccountId check (which is U8a)\n    return decodeU8a(registry, value);\n  } else if (value instanceof GenericMultiAddress) {\n    return value;\n  } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {\n    return {\n      Index: isNumber(value) ? value : value.toNumber()\n    };\n  } else if (isString(value)) {\n    return decodeU8a(registry, decodeAddress(value.toString()));\n  }\n  return value;\n}\nexport class GenericMultiAddress extends Enum {\n  constructor(registry, value) {\n    super(registry, {\n      Id: 'AccountId',\n      Index: 'Compact<AccountIndex>',\n      Raw: 'Bytes',\n      // eslint-disable-next-line sort-keys\n      Address32: 'H256',\n      // eslint-disable-next-line sort-keys\n      Address20: 'H160'\n    }, decodeMultiAny(registry, value));\n  }\n  /**\n   * @description Returns a breakdown of the hex encoding for this Codec\n   */\n  inspect() {\n    const {\n      inner,\n      outer = []\n    } = this.inner.inspect();\n    return {\n      inner,\n      outer: [new Uint8Array([this.index]), ...outer]\n    };\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    return this.value.toString();\n  }\n}","map":{"version":3,"names":["Enum","isBn","isNumber","isString","isU8a","decodeAddress","GenericAccountId","GenericAccountIndex","decodeU8a","registry","u8a","includes","length","Id","Address20","Index","createTypeUnsafe","toNumber","decodeMultiAny","value","GenericMultiAddress","toString","constructor","Raw","Address32","inspect","inner","outer","Uint8Array","index"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/generic/MultiAddress.js"],"sourcesContent":["import { Enum } from '@polkadot/types-codec';\nimport { isBn, isNumber, isString, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { GenericAccountId } from './AccountId.js';\nimport { GenericAccountIndex } from './AccountIndex.js';\nfunction decodeU8a(registry, u8a) {\n    if ([0, 32].includes(u8a.length)) {\n        return { Id: u8a };\n    }\n    else if (u8a.length === 20) {\n        return { Address20: u8a };\n    }\n    else if (u8a.length <= 8) {\n        return { Index: registry.createTypeUnsafe('AccountIndex', [u8a]).toNumber() };\n    }\n    return u8a;\n}\nfunction decodeMultiAny(registry, value) {\n    if (value instanceof GenericAccountId) {\n        return { Id: value };\n    }\n    else if (isU8a(value)) {\n        // NOTE This is after the AccountId check (which is U8a)\n        return decodeU8a(registry, value);\n    }\n    else if (value instanceof GenericMultiAddress) {\n        return value;\n    }\n    else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {\n        return { Index: isNumber(value) ? value : value.toNumber() };\n    }\n    else if (isString(value)) {\n        return decodeU8a(registry, decodeAddress(value.toString()));\n    }\n    return value;\n}\nexport class GenericMultiAddress extends Enum {\n    constructor(registry, value) {\n        super(registry, {\n            Id: 'AccountId',\n            Index: 'Compact<AccountIndex>',\n            Raw: 'Bytes',\n            // eslint-disable-next-line sort-keys\n            Address32: 'H256',\n            // eslint-disable-next-line sort-keys\n            Address20: 'H160'\n        }, decodeMultiAny(registry, value));\n    }\n    /**\n     * @description Returns a breakdown of the hex encoding for this Codec\n     */\n    inspect() {\n        const { inner, outer = [] } = this.inner.inspect();\n        return {\n            inner,\n            outer: [new Uint8Array([this.index]), ...outer]\n        };\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n    toString() {\n        return this.value.toString();\n    }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAChE,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,gBAAgB,QAAQ,gBAAgB;AACjD,SAASC,mBAAmB,QAAQ,mBAAmB;AACvD,SAASC,SAASA,CAACC,QAAQ,EAAEC,GAAG,EAAE;EAC9B,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACD,GAAG,CAACE,MAAM,CAAC,EAAE;IAC9B,OAAO;MAAEC,EAAE,EAAEH;IAAI,CAAC;EACtB,CAAC,MACI,IAAIA,GAAG,CAACE,MAAM,KAAK,EAAE,EAAE;IACxB,OAAO;MAAEE,SAAS,EAAEJ;IAAI,CAAC;EAC7B,CAAC,MACI,IAAIA,GAAG,CAACE,MAAM,IAAI,CAAC,EAAE;IACtB,OAAO;MAAEG,KAAK,EAAEN,QAAQ,CAACO,gBAAgB,CAAC,cAAc,EAAE,CAACN,GAAG,CAAC,CAAC,CAACO,QAAQ,CAAC;IAAE,CAAC;EACjF;EACA,OAAOP,GAAG;AACd;AACA,SAASQ,cAAcA,CAACT,QAAQ,EAAEU,KAAK,EAAE;EACrC,IAAIA,KAAK,YAAYb,gBAAgB,EAAE;IACnC,OAAO;MAAEO,EAAE,EAAEM;IAAM,CAAC;EACxB,CAAC,MACI,IAAIf,KAAK,CAACe,KAAK,CAAC,EAAE;IACnB;IACA,OAAOX,SAAS,CAACC,QAAQ,EAAEU,KAAK,CAAC;EACrC,CAAC,MACI,IAAIA,KAAK,YAAYC,mBAAmB,EAAE;IAC3C,OAAOD,KAAK;EAChB,CAAC,MACI,IAAIA,KAAK,YAAYZ,mBAAmB,IAAIN,IAAI,CAACkB,KAAK,CAAC,IAAIjB,QAAQ,CAACiB,KAAK,CAAC,EAAE;IAC7E,OAAO;MAAEJ,KAAK,EAAEb,QAAQ,CAACiB,KAAK,CAAC,GAAGA,KAAK,GAAGA,KAAK,CAACF,QAAQ,CAAC;IAAE,CAAC;EAChE,CAAC,MACI,IAAId,QAAQ,CAACgB,KAAK,CAAC,EAAE;IACtB,OAAOX,SAAS,CAACC,QAAQ,EAAEJ,aAAa,CAACc,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC/D;EACA,OAAOF,KAAK;AAChB;AACA,OAAO,MAAMC,mBAAmB,SAASpB,IAAI,CAAC;EAC1CsB,WAAWA,CAACb,QAAQ,EAAEU,KAAK,EAAE;IACzB,KAAK,CAACV,QAAQ,EAAE;MACZI,EAAE,EAAE,WAAW;MACfE,KAAK,EAAE,uBAAuB;MAC9BQ,GAAG,EAAE,OAAO;MACZ;MACAC,SAAS,EAAE,MAAM;MACjB;MACAV,SAAS,EAAE;IACf,CAAC,EAAEI,cAAc,CAACT,QAAQ,EAAEU,KAAK,CAAC,CAAC;EACvC;EACA;AACJ;AACA;EACIM,OAAOA,CAAA,EAAG;IACN,MAAM;MAAEC,KAAK;MAAEC,KAAK,GAAG;IAAG,CAAC,GAAG,IAAI,CAACD,KAAK,CAACD,OAAO,CAAC,CAAC;IAClD,OAAO;MACHC,KAAK;MACLC,KAAK,EAAE,CAAC,IAAIC,UAAU,CAAC,CAAC,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,GAAGF,KAAK;IAClD,CAAC;EACL;EACA;AACJ;AACA;EACIN,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACF,KAAK,CAACE,QAAQ,CAAC,CAAC;EAChC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}