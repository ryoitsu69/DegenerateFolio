{"ast":null,"code":"import { Rectangle } from './Rectangle.mjs';\n\"use strict\";\nconst isCornerWithinStroke = (pX, pY, cornerX, cornerY, radius, halfStrokeWidth) => {\n  const dx = pX - cornerX;\n  const dy = pY - cornerY;\n  const distance = Math.sqrt(dx * dx + dy * dy);\n  return distance >= radius - halfStrokeWidth && distance <= radius + halfStrokeWidth;\n};\nclass RoundedRectangle {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  constructor(x = 0, y = 0, width = 0, height = 0, radius = 20) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    this.type = \"roundedRectangle\";\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n  }\n  /**\n   * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    out.x = this.x;\n    out.y = this.y;\n    out.width = this.width;\n    out.height = this.height;\n    return out;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   * @returns - A copy of the rounded rectangle.\n   */\n  clone() {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  }\n  /**\n   * Copies another rectangle to this one.\n   * @param rectangle - The rectangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  }\n  /**\n   * Copies this rectangle to another one.\n   * @param rectangle - The rectangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(rectangle) {\n    rectangle.copyFrom(this);\n    return rectangle;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n  contains(x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n        let dx = x - (this.x + radius);\n        let dy = y - (this.y + radius);\n        const radius2 = radius * radius;\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + this.width - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dy = y - (this.y + this.height - radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n        dx = x - (this.x + radius);\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n   * @param pX - The X coordinate of the point to test\n   * @param pY - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @returns Whether the x/y coordinates are within this rectangle\n   */\n  strokeContains(pX, pY, strokeWidth) {\n    const {\n      x,\n      y,\n      width,\n      height,\n      radius\n    } = this;\n    const halfStrokeWidth = strokeWidth / 2;\n    const innerX = x + radius;\n    const innerY = y + radius;\n    const innerWidth = width - radius * 2;\n    const innerHeight = height - radius * 2;\n    const rightBound = x + width;\n    const bottomBound = y + height;\n    if ((pX >= x - halfStrokeWidth && pX <= x + halfStrokeWidth || pX >= rightBound - halfStrokeWidth && pX <= rightBound + halfStrokeWidth) && pY >= innerY && pY <= innerY + innerHeight) {\n      return true;\n    }\n    if ((pY >= y - halfStrokeWidth && pY <= y + halfStrokeWidth || pY >= bottomBound - halfStrokeWidth && pY <= bottomBound + halfStrokeWidth) && pX >= innerX && pX <= innerX + innerWidth) {\n      return true;\n    }\n    return (\n      // Top-left\n      pX < innerX && pY < innerY && isCornerWithinStroke(pX, pY, innerX, innerY, radius, halfStrokeWidth) || pX > rightBound - radius && pY < innerY && isCornerWithinStroke(pX, pY, rightBound - radius, innerY, radius, halfStrokeWidth) || pX > rightBound - radius && pY > bottomBound - radius && isCornerWithinStroke(pX, pY, rightBound - radius, bottomBound - radius, radius, halfStrokeWidth) || pX < innerX && pY > bottomBound - radius && isCornerWithinStroke(pX, pY, innerX, bottomBound - radius, radius, halfStrokeWidth)\n    );\n  }\n  toString() {\n    return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}width=${this.width} height=${this.height} radius=${this.radius}]`;\n  }\n}\nexport { RoundedRectangle };","map":{"version":3,"names":["isCornerWithinStroke","pX","pY","cornerX","cornerY","radius","halfStrokeWidth","dx","dy","distance","Math","sqrt","RoundedRectangle","constructor","x","y","width","height","type","getBounds","out","Rectangle","clone","copyFrom","rectangle","copyTo","contains","max","min","radius2","strokeContains","strokeWidth","innerX","innerY","innerWidth","innerHeight","rightBound","bottomBound","toString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/shapes/RoundedRectangle.ts"],"sourcesContent":["import { Rectangle } from './Rectangle';\n\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n// Check corner within stroke width\nconst isCornerWithinStroke = (\n    pX: number,\n    pY: number,\n    cornerX: number,\n    cornerY: number,\n    radius: number,\n    halfStrokeWidth: number\n) =>\n{\n    const dx = pX - cornerX;\n    const dy = pY - cornerY;\n    const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n    return distance >= radius - halfStrokeWidth && distance <= radius + halfStrokeWidth;\n};\n\n/**\n * The `RoundedRectangle` object is an area defined by its position, as indicated by its top-left corner\n * point (`x`, `y`) and by its `width` and its `height`, including a `radius` property that\n * defines the radius of the rounded corners.\n * @memberof maths\n */\nexport class RoundedRectangle implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the upper-left corner of the rounded rectangle\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the upper-left corner of the rounded rectangle\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The overall width of this rounded rectangle\n     * @default 0\n     */\n    public width: number;\n\n    /**\n     * The overall height of this rounded rectangle\n     * @default 0\n     */\n    public height: number;\n\n    /**\n     * Controls the radius of the rounded corners\n     * @default 20\n     */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'roundedRectangle'\n     */\n    public readonly type = 'roundedRectangle';\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n    }\n\n    /**\n     * Returns the framing rectangle of the rounded rectangle as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n\n        out.x = this.x;\n        out.y = this.y;\n        out.width = this.width;\n        out.height = this.height;\n\n        return out;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    public clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(rectangle: RoundedRectangle): this\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(rectangle: RoundedRectangle): RoundedRectangle\n    {\n        rectangle.copyFrom(this);\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this rectangle including the stroke.\n     * @param pX - The X coordinate of the point to test\n     * @param pY - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this rectangle\n     */\n    public strokeContains(pX: number, pY: number, strokeWidth: number): boolean\n    {\n        const { x, y, width, height, radius } = this;\n\n        const halfStrokeWidth = strokeWidth / 2;\n        const innerX = x + radius;\n        const innerY = y + radius;\n        const innerWidth = width - (radius * 2);\n        const innerHeight = height - (radius * 2);\n        const rightBound = x + width;\n        const bottomBound = y + height;\n\n        // Check if point is within the vertical edges (excluding corners)\n        if (((pX >= x - halfStrokeWidth && pX <= x + halfStrokeWidth)\n             || (pX >= rightBound - halfStrokeWidth && pX <= rightBound + halfStrokeWidth))\n            && pY >= innerY && pY <= innerY + innerHeight)\n        {\n            return true;\n        }\n\n        // Check if point is within the horizontal edges (excluding corners)\n        if (((pY >= y - halfStrokeWidth && pY <= y + halfStrokeWidth)\n             || (pY >= bottomBound - halfStrokeWidth && pY <= bottomBound + halfStrokeWidth))\n            && pX >= innerX && pX <= innerX + innerWidth)\n        {\n            return true;\n        }\n\n        // Top-left, top-right, bottom-right, bottom-left corners\n        return (\n            // Top-left\n            (pX < innerX && pY < innerY\n                && isCornerWithinStroke(pX, pY, innerX, innerY, radius, halfStrokeWidth))\n            //  top-right\n            || (pX > rightBound - radius && pY < innerY\n                && isCornerWithinStroke(pX, pY, rightBound - radius, innerY, radius, halfStrokeWidth))\n            // bottom-right\n            || (pX > rightBound - radius && pY > bottomBound - radius\n                && isCornerWithinStroke(pX, pY, rightBound - radius, bottomBound - radius, radius, halfStrokeWidth))\n            // bottom-left\n            || (pX < innerX && pY > bottomBound - radius\n                && isCornerWithinStroke(pX, pY, innerX, bottomBound - radius, radius, halfStrokeWidth)));\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}