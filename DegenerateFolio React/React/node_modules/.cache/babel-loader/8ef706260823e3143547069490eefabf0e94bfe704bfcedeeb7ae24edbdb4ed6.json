{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a WebDriver client for Safari.\n */\n\n'use strict';\n\nconst http = require('./http');\nconst remote = require('./remote');\nconst webdriver = require('./lib/webdriver');\nconst {\n  Browser,\n  Capabilities\n} = require('./lib/capabilities');\nconst {\n  getPath\n} = require('./common/driverFinder');\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [safaridriver] server in a child process.\n *\n * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the safaridriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe);\n    this.setLoopback(true); // Required.\n  }\n}\nconst OPTIONS_CAPABILITY_KEY = 'safari:options';\nconst TECHNOLOGY_PREVIEW_OPTIONS_KEY = 'technologyPreview';\n\n/**\n * Configuration options specific to the {@link Driver SafariDriver}.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    super(other);\n\n    /** @private {!Object} */\n    this.options_ = this.get(OPTIONS_CAPABILITY_KEY) || {};\n    this.set(OPTIONS_CAPABILITY_KEY, this.options_);\n    this.setBrowserName(Browser.SAFARI);\n  }\n\n  /**\n   * Instruct the SafariDriver to use the Safari Technology Preview if true.\n   * Otherwise, use the release version of Safari. Defaults to using the release version of Safari.\n   *\n   * @param {boolean} useTechnologyPreview\n   * @return {!Options} A self reference.\n   */\n  setTechnologyPreview(useTechnologyPreview) {\n    this.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY] = !!useTechnologyPreview;\n    return this;\n  }\n}\n\n/**\n * @param  {(Capabilities|Object<string, *>)=} o The options object\n * @return {boolean}\n */\nfunction useTechnologyPreview(o) {\n  if (o instanceof Capabilities) {\n    let options = o.get(OPTIONS_CAPABILITY_KEY);\n    return !!(options && options[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);\n  }\n  if (o && typeof o === 'object') {\n    return !!o[TECHNOLOGY_PREVIEW_OPTIONS_KEY];\n  }\n  return false;\n}\nconst SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE = '/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver';\n\n/**\n * A WebDriver client for Safari. This class should never be instantiated\n * directly; instead, use the {@linkplain ./builder.Builder Builder}:\n *\n *     var driver = new Builder()\n *         .forBrowser('safari')\n *         .build();\n *\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Safari session.\n   *\n   * @param {(Options|Capabilities)=} options The configuration options.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(options) {\n    let caps = options || new Options();\n    let exe;\n    if (useTechnologyPreview(caps.get(OPTIONS_CAPABILITY_KEY))) {\n      exe = SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE;\n    }\n    let service = new ServiceBuilder(exe).build();\n    if (!service.getExecutable()) {\n      service.setExecutable(getPath(caps).driverPath);\n    }\n    let executor = new http.Executor(service.start().then(url => new http.HttpClient(url)));\n    return /** @type {!Driver} */super.createSession(executor, caps, () => service.kill());\n  }\n}\n\n// Public API\n\nexports.Driver = Driver;\nexports.Options = Options;\nexports.ServiceBuilder = ServiceBuilder;","map":{"version":3,"names":["http","require","remote","webdriver","Browser","Capabilities","getPath","ServiceBuilder","DriverService","Builder","constructor","opt_exe","setLoopback","OPTIONS_CAPABILITY_KEY","TECHNOLOGY_PREVIEW_OPTIONS_KEY","Options","other","undefined","options_","get","set","setBrowserName","SAFARI","setTechnologyPreview","useTechnologyPreview","o","options","SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE","Driver","WebDriver","createSession","caps","exe","service","build","getExecutable","setExecutable","driverPath","executor","Executor","start","then","url","HttpClient","kill","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/safari.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a WebDriver client for Safari.\n */\n\n'use strict'\n\nconst http = require('./http')\nconst remote = require('./remote')\nconst webdriver = require('./lib/webdriver')\nconst { Browser, Capabilities } = require('./lib/capabilities')\nconst { getPath } = require('./common/driverFinder')\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [safaridriver] server in a child process.\n *\n * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the safaridriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe)\n    this.setLoopback(true) // Required.\n  }\n}\n\nconst OPTIONS_CAPABILITY_KEY = 'safari:options'\nconst TECHNOLOGY_PREVIEW_OPTIONS_KEY = 'technologyPreview'\n\n/**\n * Configuration options specific to the {@link Driver SafariDriver}.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    super(other)\n\n    /** @private {!Object} */\n    this.options_ = this.get(OPTIONS_CAPABILITY_KEY) || {}\n\n    this.set(OPTIONS_CAPABILITY_KEY, this.options_)\n    this.setBrowserName(Browser.SAFARI)\n  }\n\n  /**\n   * Instruct the SafariDriver to use the Safari Technology Preview if true.\n   * Otherwise, use the release version of Safari. Defaults to using the release version of Safari.\n   *\n   * @param {boolean} useTechnologyPreview\n   * @return {!Options} A self reference.\n   */\n  setTechnologyPreview(useTechnologyPreview) {\n    this.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY] = !!useTechnologyPreview\n    return this\n  }\n}\n\n/**\n * @param  {(Capabilities|Object<string, *>)=} o The options object\n * @return {boolean}\n */\nfunction useTechnologyPreview(o) {\n  if (o instanceof Capabilities) {\n    let options = o.get(OPTIONS_CAPABILITY_KEY)\n    return !!(options && options[TECHNOLOGY_PREVIEW_OPTIONS_KEY])\n  }\n\n  if (o && typeof o === 'object') {\n    return !!o[TECHNOLOGY_PREVIEW_OPTIONS_KEY]\n  }\n\n  return false\n}\n\nconst SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE = '/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver'\n\n/**\n * A WebDriver client for Safari. This class should never be instantiated\n * directly; instead, use the {@linkplain ./builder.Builder Builder}:\n *\n *     var driver = new Builder()\n *         .forBrowser('safari')\n *         .build();\n *\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Safari session.\n   *\n   * @param {(Options|Capabilities)=} options The configuration options.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(options) {\n    let caps = options || new Options()\n\n    let exe\n    if (useTechnologyPreview(caps.get(OPTIONS_CAPABILITY_KEY))) {\n      exe = SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE\n    }\n\n    let service = new ServiceBuilder(exe).build()\n    if (!service.getExecutable()) {\n      service.setExecutable(getPath(caps).driverPath)\n    }\n    let executor = new http.Executor(service.start().then((url) => new http.HttpClient(url)))\n\n    return /** @type {!Driver} */ (super.createSession(executor, caps, () => service.kill()))\n  }\n}\n\n// Public API\n\nexports.Driver = Driver\nexports.Options = Options\nexports.ServiceBuilder = ServiceBuilder\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}