{"ast":null,"code":"\"use strict\";\n\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach(match => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\nexport { extractFontFamilies };","map":{"version":3,"names":["extractFontFamilies","text","style","fontFamily","fontFamilies","dedupe","regex","matches","match","addFontFamily","fontFamily2","push","Array","isArray","i","length","forEach","split","trim","tagStyles"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts"],"sourcesContent":["import type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n"],"mappings":";;AASgB,SAAAA,oBAAoBC,IAAA,EAAcC,KAClD;EACI,MAAMC,UAAA,GAAaD,KAAM,CAAAC,UAAA;EACzB,MAAMC,YAAA,GAAyB,EAAC;EAChC,MAAMC,MAAA,GAAkC,EAAC;EAIzC,MAAMC,KAAQ;EAER,MAAAC,OAAA,GAAUN,IAAK,CAAAO,KAAA,CAAMF,KAAK;EAEhC,SAASG,cAAcC,WACvB;IACQ,KAACL,MAAO,CAAAK,WAAU,CACtB;MACIN,YAAA,CAAaO,IAAA,CAAKD,WAAU;MAE5BL,MAAA,CAAOK,WAAU,CAAI;IAAA;EACzB;EAGA,IAAAE,KAAA,CAAMC,OAAQ,CAAAV,UAAU,CAC5B;IACI,SAASW,CAAI,MAAGA,CAAI,GAAAX,UAAA,CAAWY,MAAA,EAAQD,CACvC;MACkBL,aAAA,CAAAN,UAAA,CAAWW,CAAC,CAAC;IAAA;EAC/B,CAGJ;IACIL,aAAA,CAAcN,UAAU;EAAA;EAG5B,IAAII,OACJ;IACYA,OAAA,CAAAS,OAAA,CAASR,KACjB;MACI,MAAME,WAAA,GAAaF,KAAM,CAAAS,KAAA,CAAM,GAAG,CAAE,EAAC,EAAEC,IAAK;MAE5CT,aAAA,CAAcC,WAAU;IAAA,CAC3B;EAAA;EAGM,WAAAI,CAAA,IAAKZ,KAAA,CAAMiB,SACtB;IACI,MAAMT,WAAa,GAAAR,KAAA,CAAMiB,SAAU,CAAAL,CAAC,CAAE,CAAAX,UAAA;IAEtCM,aAAA,CAAcC,WAAoB;EAAA;EAG/B,OAAAN,YAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}