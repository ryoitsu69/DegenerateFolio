{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNullish = exports.isContractInitOptions = exports.compareBlockNumbers = exports.isTopicInBloom = exports.isTopic = exports.isContractAddressInBloom = exports.isUserEthereumAddressInBloom = exports.isInBloom = exports.isBloom = exports.isAddress = exports.checkAddressCheckSum = exports.isHex = exports.isHexStrict = void 0;\n/**\n * @module Utils\n */\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_types_1 = require(\"web3-types\");\n/**\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isHexStrict = web3_validator_1.isHexStrict;\n/**\n * returns true if input is a hexstring, number or bigint\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isHex = web3_validator_1.isHex;\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.checkAddressCheckSum = web3_validator_1.checkAddressCheckSum;\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isAddress = web3_validator_1.isAddress;\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isBloom = web3_validator_1.isBloom;\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isInBloom = web3_validator_1.isInBloom;\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isUserEthereumAddressInBloom = web3_validator_1.isUserEthereumAddressInBloom;\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isContractAddressInBloom = web3_validator_1.isContractAddressInBloom;\n/**\n * Checks if its a valid topic\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isTopic = web3_validator_1.isTopic;\n/**\n * Returns true if the topic is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexports.isTopicInBloom = web3_validator_1.isTopicInBloom;\n/**\n * Compares between block A and block B\n * @param blockA - Block number or string\n * @param blockB - Block number or string\n *\n * @returns - Returns -1 if a \\< b, returns 1 if a \\> b and returns 0 if a == b\n *\n * @example\n * ```ts\n * console.log(web3.utils.compareBlockNumbers('latest', 'pending'));\n * > -1\n *\n * console.log(web3.utils.compareBlockNumbers(12, 11));\n * > 1\n * ```\n */\nconst compareBlockNumbers = (blockA, blockB) => {\n  const isABlockTag = typeof blockA === 'string' && (0, web3_validator_1.isBlockTag)(blockA);\n  const isBBlockTag = typeof blockB === 'string' && (0, web3_validator_1.isBlockTag)(blockB);\n  if (blockA === blockB || (blockA === 'earliest' || blockA === 0) && (blockB === 'earliest' || blockB === 0) // only exception compare blocktag with number\n  ) {\n    return 0;\n  }\n  if (blockA === 'earliest' && blockB > 0) {\n    return -1;\n  }\n  if (blockB === 'earliest' && blockA > 0) {\n    return 1;\n  }\n  if (isABlockTag && isBBlockTag) {\n    // Increasing order:  earliest, finalized , safe, latest, pending\n    const tagsOrder = {\n      [web3_types_1.BlockTags.EARLIEST]: 1,\n      [web3_types_1.BlockTags.FINALIZED]: 2,\n      [web3_types_1.BlockTags.SAFE]: 3,\n      [web3_types_1.BlockTags.LATEST]: 4,\n      [web3_types_1.BlockTags.PENDING]: 5\n    };\n    if (tagsOrder[blockA] < tagsOrder[blockB]) {\n      return -1;\n    }\n    return 1;\n  }\n  if (isABlockTag && !isBBlockTag || !isABlockTag && isBBlockTag) {\n    throw new web3_errors_1.InvalidBlockError('Cannot compare blocktag with provided non-blocktag input.');\n  }\n  const bigIntA = BigInt(blockA);\n  const bigIntB = BigInt(blockB);\n  if (bigIntA < bigIntB) {\n    return -1;\n  }\n  if (bigIntA === bigIntB) {\n    return 0;\n  }\n  return 1;\n};\nexports.compareBlockNumbers = compareBlockNumbers;\nconst isContractInitOptions = options => typeof options === 'object' && !(0, web3_validator_1.isNullish)(options) && Object.keys(options).length !== 0 && ['input', 'data', 'from', 'gas', 'gasPrice', 'gasLimit', 'address', 'jsonInterface', 'syncWithContext', 'dataInputFill'].some(key => key in options);\nexports.isContractInitOptions = isContractInitOptions;\nexports.isNullish = web3_validator_1.isNullish;","map":{"version":3,"names":["web3_errors_1","require","web3_validator_1","web3_types_1","exports","isHexStrict","isHex","checkAddressCheckSum","isAddress","isBloom","isInBloom","isUserEthereumAddressInBloom","isContractAddressInBloom","isTopic","isTopicInBloom","compareBlockNumbers","blockA","blockB","isABlockTag","isBlockTag","isBBlockTag","tagsOrder","BlockTags","EARLIEST","FINALIZED","SAFE","LATEST","PENDING","InvalidBlockError","bigIntA","BigInt","bigIntB","isContractInitOptions","options","isNullish","Object","keys","length","some","key"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-utils/src/validation.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @module Utils\n */\n\nimport { InvalidBlockError } from 'web3-errors';\nimport {\n\tcheckAddressCheckSum as checkAddressCheckSumValidator,\n\tisAddress as isAddressValidator,\n\tisBlockTag,\n\tisBloom as isBloomValidator,\n\tisContractAddressInBloom as isContractAddressInBloomValidator,\n\tisHex as isHexValidator,\n\tisHexStrict as isHexStrictValidator,\n\tisInBloom as isInBloomValidator,\n\tisNullish as isNullishValidator,\n\tisTopic as isTopicValidator,\n\tisTopicInBloom as isTopicInBloomValidator,\n\tisUserEthereumAddressInBloom as isUserEthereumAddressInBloomValidator,\n} from 'web3-validator';\nimport { BlockNumberOrTag, BlockTags, ContractInitOptions } from 'web3-types';\n\n/**\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isHexStrict = isHexStrictValidator;\n\n/**\n * returns true if input is a hexstring, number or bigint\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isHex = isHexValidator;\n\n/**\n * Checks the checksum of a given address. Will also return false on non-checksum addresses.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const checkAddressCheckSum = checkAddressCheckSumValidator;\n\n/**\n * Checks if a given string is a valid Ethereum address. It will also check the checksum, if the address has upper and lowercase letters.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isAddress = isAddressValidator;\n\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isBloom = isBloomValidator;\n\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isInBloom = isInBloomValidator;\n\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isUserEthereumAddressInBloom = isUserEthereumAddressInBloomValidator;\n\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isContractAddressInBloom = isContractAddressInBloomValidator;\n\n/**\n * Checks if its a valid topic\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isTopic = isTopicValidator;\n\n/**\n * Returns true if the topic is part of the given bloom.\n * note: false positives are possible.\n *\n * @deprecated Will be removed in next release. Please use `web3-validator` package instead.\n */\nexport const isTopicInBloom = isTopicInBloomValidator;\n\n/**\n * Compares between block A and block B\n * @param blockA - Block number or string\n * @param blockB - Block number or string\n *\n * @returns - Returns -1 if a \\< b, returns 1 if a \\> b and returns 0 if a == b\n *\n * @example\n * ```ts\n * console.log(web3.utils.compareBlockNumbers('latest', 'pending'));\n * > -1\n *\n * console.log(web3.utils.compareBlockNumbers(12, 11));\n * > 1\n * ```\n */\nexport const compareBlockNumbers = (blockA: BlockNumberOrTag, blockB: BlockNumberOrTag) => {\n\tconst isABlockTag = typeof blockA === 'string' && isBlockTag(blockA);\n\tconst isBBlockTag = typeof blockB === 'string' && isBlockTag(blockB);\n\n\tif (\n\t\tblockA === blockB ||\n\t\t((blockA === 'earliest' || blockA === 0) && (blockB === 'earliest' || blockB === 0)) // only exception compare blocktag with number\n\t) {\n\t\treturn 0;\n\t}\n\tif (blockA === 'earliest' && blockB > 0) {\n\t\treturn -1;\n\t}\n\tif (blockB === 'earliest' && blockA > 0) {\n\t\treturn 1;\n\t}\n\n\tif (isABlockTag && isBBlockTag) {\n\t\t// Increasing order:  earliest, finalized , safe, latest, pending\n\t\tconst tagsOrder = {\n\t\t\t[BlockTags.EARLIEST as string]: 1,\n\t\t\t[BlockTags.FINALIZED as string]: 2,\n\t\t\t[BlockTags.SAFE as string]: 3,\n\t\t\t[BlockTags.LATEST as string]: 4,\n\t\t\t[BlockTags.PENDING as string]: 5,\n\t\t};\n\n\t\tif (tagsOrder[blockA] < tagsOrder[blockB]) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 1;\n\t}\n\tif ((isABlockTag && !isBBlockTag) || (!isABlockTag && isBBlockTag)) {\n\t\tthrow new InvalidBlockError('Cannot compare blocktag with provided non-blocktag input.');\n\t}\n\n\tconst bigIntA = BigInt(blockA);\n\tconst bigIntB = BigInt(blockB);\n\n\tif (bigIntA < bigIntB) {\n\t\treturn -1;\n\t}\n\tif (bigIntA === bigIntB) {\n\t\treturn 0;\n\t}\n\treturn 1;\n};\n\n\nexport const isContractInitOptions = (options: unknown): options is ContractInitOptions =>\n\ttypeof options === 'object' &&\n\t!isNullishValidator(options) &&\n\tObject.keys(options).length !== 0 &&\n\t[\n\t\t'input',\n\t\t'data',\n\t\t'from',\n\t\t'gas',\n\t\t'gasPrice',\n\t\t'gasLimit',\n\t\t'address',\n\t\t'jsonInterface',\n\t\t'syncWithContext',\n\t\t'dataInputFill',\n\t].some(key => key in options);\n\nexport const isNullish = isNullishValidator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}