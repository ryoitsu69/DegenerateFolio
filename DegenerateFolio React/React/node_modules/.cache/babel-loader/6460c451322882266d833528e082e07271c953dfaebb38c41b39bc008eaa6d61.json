{"ast":null,"code":"class AbstractMaskSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.maskStack = [], this.glConst = 0;\n  }\n  /** Gets count of masks of certain type. */\n  getStackLength() {\n    return this.maskStack.length;\n  }\n  /**\n   * Changes the mask stack that is used by this System.\n   * @param {PIXI.MaskData[]} maskStack - The mask stack\n   */\n  setMaskStack(maskStack) {\n    const {\n        gl\n      } = this.renderer,\n      curStackLen = this.getStackLength();\n    this.maskStack = maskStack;\n    const newStackLen = this.getStackLength();\n    newStackLen !== curStackLen && (newStackLen === 0 ? gl.disable(this.glConst) : (gl.enable(this.glConst), this._useCurrent()));\n  }\n  /**\n   * Setup renderer to use the current mask data.\n   * @private\n   */\n  _useCurrent() {}\n  /** Destroys the mask stack. */\n  destroy() {\n    this.renderer = null, this.maskStack = null;\n  }\n}\nexport { AbstractMaskSystem };","map":{"version":3,"names":["AbstractMaskSystem","constructor","renderer","maskStack","glConst","getStackLength","length","setMaskStack","gl","curStackLen","newStackLen","disable","enable","_useCurrent","destroy"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/mask/AbstractMaskSystem.ts"],"sourcesContent":["import type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { MaskData } from './MaskData';\n\n/**\n * System plugin to the renderer to manage specific types of masking operations.\n * @memberof PIXI\n */\nexport class AbstractMaskSystem implements ISystem\n{\n    /**\n     * The mask stack\n     * @member {PIXI.MaskData[]}\n     */\n    protected maskStack: Array<MaskData>;\n\n    /**\n     * Constant for gl.enable\n     * @private\n     */\n    protected glConst: number;\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.maskStack = [];\n        this.glConst = 0;\n    }\n\n    /** Gets count of masks of certain type. */\n    getStackLength(): number\n    {\n        return this.maskStack.length;\n    }\n\n    /**\n     * Changes the mask stack that is used by this System.\n     * @param {PIXI.MaskData[]} maskStack - The mask stack\n     */\n    setMaskStack(maskStack: Array<MaskData>): void\n    {\n        const { gl } = this.renderer;\n        const curStackLen = this.getStackLength();\n\n        this.maskStack = maskStack;\n\n        const newStackLen = this.getStackLength();\n\n        if (newStackLen !== curStackLen)\n        {\n            if (newStackLen === 0)\n            {\n                gl.disable(this.glConst);\n            }\n            else\n            {\n                gl.enable(this.glConst);\n                this._useCurrent();\n            }\n        }\n    }\n\n    /**\n     * Setup renderer to use the current mask data.\n     * @private\n     */\n    protected _useCurrent(): void\n    {\n        // OVERWRITE;\n    }\n\n    /** Destroys the mask stack. */\n    destroy(): void\n    {\n        this.renderer = null;\n        this.maskStack = null;\n    }\n}\n"],"mappings":"AAQO,MAAMA,kBAAA,CACb;EAAA;AAAA;AAAA;EAiBIC,YAAYC,QAAA,EACZ;IACI,KAAKA,QAAA,GAAWA,QAAA,EAEhB,KAAKC,SAAA,GAAY,IACjB,KAAKC,OAAA,GAAU;EACnB;EAAA;EAGAC,eAAA,EACA;IACI,OAAO,KAAKF,SAAA,CAAUG,MAAA;EAC1B;EAAA;AAAA;AAAA;AAAA;EAMAC,aAAaJ,SAAA,EACb;IACI,MAAM;QAAEK;MAAG,IAAI,KAAKN,QAAA;MACdO,WAAA,GAAc,KAAKJ,cAAA;IAEzB,KAAKF,SAAA,GAAYA,SAAA;IAEX,MAAAO,WAAA,GAAc,KAAKL,cAAA;IAErBK,WAAA,KAAgBD,WAAA,KAEZC,WAAA,KAAgB,IAEhBF,EAAA,CAAGG,OAAA,CAAQ,KAAKP,OAAO,KAIvBI,EAAA,CAAGI,MAAA,CAAO,KAAKR,OAAO,GACtB,KAAKS,WAAA,CAAY;EAG7B;EAAA;AAAA;AAAA;AAAA;EAMUA,YAAA,EACV,CAEA;EAAA;EAGAC,QAAA,EACA;IACS,KAAAZ,QAAA,GAAW,MAChB,KAAKC,SAAA,GAAY;EACrB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}