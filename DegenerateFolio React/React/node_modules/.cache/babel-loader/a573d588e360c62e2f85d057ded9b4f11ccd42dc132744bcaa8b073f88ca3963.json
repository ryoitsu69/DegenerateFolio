{"ast":null,"code":"import { AbstractText, ensureOptions } from '../text/AbstractText.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\n\"use strict\";\nclass BitmapText extends AbstractText {\n  constructor(...args) {\n    var _a;\n    const options = ensureOptions(args, \"BitmapText\");\n    options.style ?? (options.style = options.style || {});\n    (_a = options.style).fill ?? (_a.fill = 16777215);\n    super(options, TextStyle);\n    this.renderPipeId = \"bitmapText\";\n  }\n  _updateBounds() {\n    const bounds = this._bounds;\n    const padding = this._style.padding;\n    const anchor = this._anchor;\n    const bitmapMeasurement = BitmapFontManager.measureText(this.text, this._style);\n    const scale = bitmapMeasurement.scale;\n    const offset = bitmapMeasurement.offsetY * scale;\n    const width = bitmapMeasurement.width * scale;\n    const height = bitmapMeasurement.height * scale;\n    bounds.minX = -anchor._x * width - padding;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * (height + offset) - padding;\n    bounds.maxY = bounds.minY + height;\n  }\n}\nexport { BitmapText };","map":{"version":3,"names":["BitmapText","AbstractText","constructor","args","_a","options","ensureOptions","style","fill","TextStyle","renderPipeId","_updateBounds","bounds","_bounds","padding","_style","anchor","_anchor","bitmapMeasurement","BitmapFontManager","measureText","text","scale","offset","offsetY","width","height","minX","_x","maxX","minY","_y","maxY"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-bitmap/BitmapText.ts"],"sourcesContent":["import { AbstractText, ensureOptions } from '../text/AbstractText';\nimport { TextStyle } from '../text/TextStyle';\nimport { BitmapFontManager } from './BitmapFontManager';\n\nimport type { View } from '../../rendering/renderers/shared/view/View';\nimport type { TextOptions, TextString } from '../text/AbstractText';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * A BitmapText Object will create a line or multiple lines of text.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * The text is created using a bitmap font (a sprite sheet of characters).\n *\n * The primary advantage of this render mode over `text` is that all of your textures are pre-generated and loaded,\n * meaning that rendering is fast, and changing text is much faster than Text.\n *\n * The primary disadvantage is that supporting character sets other than latin, such as CJK languages,\n * may be impractical due to the number of characters.\n *\n * <b>Pre-loaded BitmapFonts:</b>\n *\n *\n * PixiJS enables the loading of BitmapFonts through its Asset Manager, supporting both XML and FNT formats.\n * Additionally, PixiJS is compatible with MSDF (Multi-channel Signed Distance Field) and SDF (Signed Distance Field) fonts.\n * These advanced font types allow for scaling without quality degradation and must be created with specific tools,\n * such as the one available at https://msdf-bmfont.donmccurdy.com/.\n *\n * <b>Dynamically Generated BitmapFonts:</b>\n *\n *\n * PixiJS also offers the capability to generate BitmapFonts dynamically. This means that fonts are created in real-time\n * based on specified styles, eliminating the need for pre-loading. This process is initiated simply by assigning a style\n * to a BitmapText object, which then automatically generates the required font.\n *\n * However, dynamically generating a large number of fonts may lead to significant memory use. To prevent this,\n * PixiJS smartly attempts to reuse fonts that closely match the desired style parameters. For instance, if a text style\n * requires a font size of 80 but a similar font of size 100 has already been generated, PixiJS will scale the existing\n * font to fit the new requirement, rather than creating a new font from scratch.\n *\n * For those who prefer to manage BitmapFonts manually, PixiJS provides the BitmapFont.install method. This method\n * allows for the pre-generation and preparation of fonts, making them readily available for use by specifying the\n * fontFamily in your text styling.\n *\n * This approach ensures efficient font management within PixiJS, balancing between dynamic generation for flexibility\n * and manual management for optimized performance.\n * @example\n * import { BitmapText, BitmapFont } from 'pixi.js';\n *\n * // generate a dynamic font behind the scenes:\n * const text = new BitmapText({\n *     text: 'Hello Pixi!',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 24,\n *         fill: 0xff1010,\n *         align: 'center',\n *     }\n * });\n *\n * // pre install\n * BitmapFont.install({\n *    name: 'myFont',\n *    style:{\n *        fontFamily: 'Arial',\n *    }\n * })\n *\n * // new bitmap text with preinstalled font\n * const text = new BitmapText({\n *     text: 'Hello Pixi!',\n *     style: {\n *        fontFamily: 'myFont',\n *        fontSize: 24,\n *        fill: 0xff1010,\n *        align: 'center',\n *     }\n * }\n *\n * // load a font from an xml file\n * const font = await Assets.load('path/to/myLoadedFont.fnt');\n *\n * // new bitmap text with loaded font\n * const text = new BitmapText({\n *     text: 'Hello Pixi!',\n *     style: {\n *        fontFamily: 'myLoadedFont', // the name of the font in the fnt file\n *        fontSize: 24,\n *        fill: 0xff1010,\n *        align: 'center',\n *     }\n * }\n * @memberof scene\n */\nexport class BitmapText extends AbstractText<TextStyle, TextStyleOptions> implements View\n{\n    public readonly renderPipeId: string = 'bitmapText';\n\n    /**\n     * **Note:** Our docs parser struggles to properly understand the constructor signature.\n     * This is the correct signature.\n     * ```ts\n     * new BitmapText(options?: TextOptions);\n     * ```\n     * @param { text.TextOptions } options - The options of the bitmap text.\n     */\n    constructor(options?: TextOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(text?: TextString, options?: Partial<TextStyle>);\n    constructor(...args: [TextOptions?] | [TextString, Partial<TextStyle>])\n    {\n        const options = ensureOptions(args, 'BitmapText');\n\n        options.style ??= options.style || {};\n        options.style.fill ??= 0xffffff;\n\n        super(options, TextStyle);\n    }\n\n    protected _updateBounds()\n    {\n        const bounds = this._bounds;\n        const padding = this._style.padding;\n        const anchor = this._anchor;\n\n        const bitmapMeasurement = BitmapFontManager.measureText(this.text, this._style);\n        const scale = bitmapMeasurement.scale;\n        const offset = bitmapMeasurement.offsetY * scale;\n\n        const width = bitmapMeasurement.width * scale;\n        const height = bitmapMeasurement.height * scale;\n\n        bounds.minX = (-anchor._x * width) - padding;\n        bounds.maxX = bounds.minX + width;\n        bounds.minY = (-anchor._y * (height + offset)) - padding;\n        bounds.maxY = bounds.minY + height;\n    }\n}\n"],"mappings":";;;;AAgGO,MAAMA,UAAA,SAAmBC,YAChC;EAcIC,YAAA,GAAeC,IACf;IAhHJ,IAAAC,EAAA;IAiHc,MAAAC,OAAA,GAAUC,aAAc,CAAAH,IAAA,EAAM,YAAY;IAEhDE,OAAA,CAAQE,KAAR,KAAAF,OAAA,CAAQE,KAAU,GAAAF,OAAA,CAAQE,KAAA,IAAS,EAAC;IAC5B,CAAAH,EAAA,GAAAC,OAAA,CAAAE,KAAA,EAAMC,IAAd,KAAAJ,EAAA,CAAcI,IAAS;IAEvB,MAAMH,OAAA,EAASI,SAAS;IApB5B,KAAgBC,YAAuB;EAAA;EAuB7BC,aACVA,CAAA;IACI,MAAMC,MAAA,GAAS,IAAK,CAAAC,OAAA;IACd,MAAAC,OAAA,GAAU,KAAKC,MAAO,CAAAD,OAAA;IAC5B,MAAME,MAAA,GAAS,IAAK,CAAAC,OAAA;IAEpB,MAAMC,iBAAA,GAAoBC,iBAAkB,CAAAC,WAAA,CAAY,IAAK,CAAAC,IAAA,EAAM,KAAKN,MAAM;IAC9E,MAAMO,KAAA,GAAQJ,iBAAkB,CAAAI,KAAA;IAC1B,MAAAC,MAAA,GAASL,iBAAA,CAAkBM,OAAU,GAAAF,KAAA;IAErC,MAAAG,KAAA,GAAQP,iBAAA,CAAkBO,KAAQ,GAAAH,KAAA;IAClC,MAAAI,MAAA,GAASR,iBAAA,CAAkBQ,MAAS,GAAAJ,KAAA;IAE1CV,MAAA,CAAOe,IAAQ,IAACX,MAAO,CAAAY,EAAA,GAAKH,KAAS,GAAAX,OAAA;IAC9BF,MAAA,CAAAiB,IAAA,GAAOjB,MAAA,CAAOe,IAAO,GAAAF,KAAA;IAC5Bb,MAAA,CAAOkB,IAAQ,IAACd,MAAO,CAAAe,EAAA,IAAML,MAAA,GAASH,MAAW,IAAAT,OAAA;IAC1CF,MAAA,CAAAoB,IAAA,GAAOpB,MAAA,CAAOkB,IAAO,GAAAJ,MAAA;EAAA;AAEpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}