{"ast":null,"code":"import { ed25519 } from '@noble/curves/ed25519';\nimport { hasBigInt, u8aToU8a } from '@polkadot/util';\nimport { ed25519Sign as wasmSign, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name ed25519Sign\n * @summary Signs a message using the supplied secretKey\n * @description\n * Returns message signature of `message`, using the `secretKey`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { ed25519Sign } from '@polkadot/util-crypto';\n *\n * ed25519Sign([...], [...]); // => [...]\n * ```\n */\nexport function ed25519Sign(message, _ref, onlyJs) {\n  let {\n    publicKey,\n    secretKey\n  } = _ref;\n  if (!secretKey) {\n    throw new Error('Expected a valid secretKey');\n  } else if (!publicKey) {\n    throw new Error('Expected a valid publicKey');\n  }\n  const messageU8a = u8aToU8a(message);\n  const privateU8a = secretKey.subarray(0, 32);\n  return !hasBigInt || !onlyJs && isReady() ? wasmSign(publicKey, privateU8a, messageU8a) : ed25519.sign(messageU8a, privateU8a);\n}","map":{"version":3,"names":["ed25519","hasBigInt","u8aToU8a","ed25519Sign","wasmSign","isReady","message","_ref","onlyJs","publicKey","secretKey","Error","messageU8a","privateU8a","subarray","sign"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/ed25519/sign.js"],"sourcesContent":["import { ed25519 } from '@noble/curves/ed25519';\nimport { hasBigInt, u8aToU8a } from '@polkadot/util';\nimport { ed25519Sign as wasmSign, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name ed25519Sign\n * @summary Signs a message using the supplied secretKey\n * @description\n * Returns message signature of `message`, using the `secretKey`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { ed25519Sign } from '@polkadot/util-crypto';\n *\n * ed25519Sign([...], [...]); // => [...]\n * ```\n */\nexport function ed25519Sign(message, { publicKey, secretKey }, onlyJs) {\n    if (!secretKey) {\n        throw new Error('Expected a valid secretKey');\n    }\n    else if (!publicKey) {\n        throw new Error('Expected a valid publicKey');\n    }\n    const messageU8a = u8aToU8a(message);\n    const privateU8a = secretKey.subarray(0, 32);\n    return !hasBigInt || (!onlyJs && isReady())\n        ? wasmSign(publicKey, privateU8a, messageU8a)\n        : ed25519.sign(messageU8a, privateU8a);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,gBAAgB;AACpD,SAASC,WAAW,IAAIC,QAAQ,EAAEC,OAAO,QAAQ,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,WAAWA,CAACG,OAAO,EAAAC,IAAA,EAA4BC,MAAM,EAAE;EAAA,IAAlC;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAAH,IAAA;EACzD,IAAI,CAACG,SAAS,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EACjD,CAAC,MACI,IAAI,CAACF,SAAS,EAAE;IACjB,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;EACjD;EACA,MAAMC,UAAU,GAAGV,QAAQ,CAACI,OAAO,CAAC;EACpC,MAAMO,UAAU,GAAGH,SAAS,CAACI,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EAC5C,OAAO,CAACb,SAAS,IAAK,CAACO,MAAM,IAAIH,OAAO,CAAC,CAAE,GACrCD,QAAQ,CAACK,SAAS,EAAEI,UAAU,EAAED,UAAU,CAAC,GAC3CZ,OAAO,CAACe,IAAI,CAACH,UAAU,EAAEC,UAAU,CAAC;AAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}