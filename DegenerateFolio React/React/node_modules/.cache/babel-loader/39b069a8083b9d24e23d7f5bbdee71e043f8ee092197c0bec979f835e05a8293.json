{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { BN, BN_ZERO, bnMax, bnMin, isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nconst VESTING_ID = '0x76657374696e6720';\nfunction calcLocked(api, bestNumber, locks) {\n  let lockedBalance = api.registry.createType('Balance');\n  let lockedBreakdown = [];\n  let vestingLocked = api.registry.createType('Balance');\n  let allLocked = false;\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(({\n      until\n    }) => !until || bestNumber && until.gt(bestNumber));\n    allLocked = lockedBreakdown.some(({\n      amount\n    }) => amount && amount.isMax());\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({\n      id\n    }) => id.eq(VESTING_ID)).reduce((result, {\n      amount\n    }) => result.iadd(amount), new BN(0)));\n    // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n    const notAll = lockedBreakdown.filter(({\n      amount\n    }) => amount && !amount.isMax());\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({\n        amount\n      }) => amount)));\n    }\n  }\n  return {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  };\n}\nfunction calcShared(api, bestNumber, data, locks) {\n  const {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  } = calcLocked(api, bestNumber, locks);\n  return objectSpread({}, data, {\n    availableBalance: api.registry.createType('Balance', allLocked ? 0 : bnMax(new BN(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new BN(0))),\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  });\n}\nfunction calcVesting(bestNumber, shared, _vesting) {\n  // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n  const vesting = _vesting || [];\n  const isVesting = !shared.vestingLocked.isZero();\n  const vestedBalances = vesting.map(({\n    locked,\n    perBlock,\n    startingBlock\n  }) => bestNumber.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber.sub(startingBlock))) : BN_ZERO);\n  const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new BN(0));\n  const vestingTotal = vesting.reduce((all, {\n    locked\n  }) => all.iadd(locked), new BN(0));\n  return {\n    isVesting,\n    vestedBalance,\n    vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,\n    vesting: vesting.map(({\n      locked,\n      perBlock,\n      startingBlock\n    }, index) => ({\n      endBlock: locked.div(perBlock).iadd(startingBlock),\n      locked,\n      perBlock,\n      startingBlock,\n      vested: vestedBalances[index]\n    })).filter(({\n      locked\n    }) => !locked.isZero()),\n    vestingTotal\n  };\n}\nfunction calcBalances(api, result) {\n  const [data, [vesting, allLocks, namedReserves], bestNumber] = result;\n  const shared = calcShared(api, bestNumber, data, allLocks[0]);\n  return objectSpread(shared, calcVesting(bestNumber, shared, vesting), {\n    accountId: data.accountId,\n    accountNonce: data.accountNonce,\n    additional: allLocks.slice(1).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),\n    namedReserves\n  });\n}\nfunction queryOld(api, accountId) {\n  return combineLatest([api.query.balances.locks(accountId), api.query.balances['vesting'](accountId)]).pipe(map(([locks, optVesting]) => {\n    let vestingNew = null;\n    if (optVesting.isSome) {\n      const {\n        offset: locked,\n        perBlock,\n        startingBlock\n      } = optVesting.unwrap();\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked,\n        perBlock,\n        startingBlock\n      });\n    }\n    return [vestingNew ? [vestingNew] : null, [locks], []];\n  }));\n}\nconst isNonNullable = nullable => !!nullable;\nfunction createCalls(calls) {\n  return [calls.map(c => !c), calls.filter(isNonNullable)];\n}\nfunction queryCurrent(api, accountId, balanceInstances = ['balances']) {\n  const [lockEmpty, lockQueries] = createCalls(balanceInstances.map(m => api.derive[m]?.customLocks || api.query[m]?.locks));\n  const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map(m => api.query[m]?.reserves));\n  return combineLatest([api.query.vesting?.vesting ? api.query.vesting.vesting(accountId) : of(api.registry.createType('Option<VestingInfo>')), lockQueries.length ? combineLatest(lockQueries.map(c => c(accountId))) : of([]), reserveQueries.length ? combineLatest(reserveQueries.map(c => c(accountId))) : of([])]).pipe(map(([opt, locks, reserves]) => {\n    let offsetLock = -1;\n    let offsetReserve = -1;\n    const vesting = opt.unwrapOr(null);\n    return [vesting ? Array.isArray(vesting) ? vesting : [vesting] : null, lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]), reserveEmpty.map(e => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])];\n  }));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\nexport function all(instanceId, api) {\n  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');\n  return memo(instanceId, address => combineLatest([api.derive.balances.account(address), isFunction(api.query.system?.account) || isFunction(api.query.balances?.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)]).pipe(switchMap(([account, locks]) => combineLatest([of(account), of(locks), api.derive.chain.bestNumber()])), map(result => calcBalances(api, result))));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","BN","BN_ZERO","bnMax","bnMin","isFunction","objectSpread","memo","VESTING_ID","calcLocked","api","bestNumber","locks","lockedBalance","registry","createType","lockedBreakdown","vestingLocked","allLocked","Array","isArray","filter","until","gt","some","amount","isMax","id","eq","reduce","result","iadd","notAll","length","calcShared","data","availableBalance","freeBalance","sub","calcVesting","shared","_vesting","vesting","isVesting","isZero","vestedBalances","locked","perBlock","startingBlock","mul","vestedBalance","all","value","vestingTotal","vestedClaimable","index","endBlock","div","vested","calcBalances","allLocks","namedReserves","accountId","accountNonce","additional","slice","l","queryOld","query","balances","pipe","optVesting","vestingNew","isSome","offset","unwrap","isNonNullable","nullable","createCalls","calls","c","queryCurrent","balanceInstances","lockEmpty","lockQueries","m","derive","customLocks","reserveEmpty","reserveQueries","reserves","opt","offsetLock","offsetReserve","unwrapOr","e","instanceId","getModuleInstances","runtimeVersion","specName","address","account","system","chain"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/balances/all.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { BN, BN_ZERO, bnMax, bnMin, isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nconst VESTING_ID = '0x76657374696e6720';\nfunction calcLocked(api, bestNumber, locks) {\n    let lockedBalance = api.registry.createType('Balance');\n    let lockedBreakdown = [];\n    let vestingLocked = api.registry.createType('Balance');\n    let allLocked = false;\n    if (Array.isArray(locks)) {\n        // only get the locks that are valid until passed the current block\n        lockedBreakdown = locks.filter(({ until }) => !until || (bestNumber && until.gt(bestNumber)));\n        allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());\n        vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new BN(0)));\n        // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n        const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());\n        if (notAll.length) {\n            lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({ amount }) => amount)));\n        }\n    }\n    return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };\n}\nfunction calcShared(api, bestNumber, data, locks) {\n    const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber, locks);\n    return objectSpread({}, data, {\n        availableBalance: api.registry.createType('Balance', allLocked ? 0 : bnMax(new BN(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new BN(0))),\n        lockedBalance,\n        lockedBreakdown,\n        vestingLocked\n    });\n}\nfunction calcVesting(bestNumber, shared, _vesting) {\n    // Calculate the vesting balances,\n    //  - offset = balance locked at startingBlock\n    //  - perBlock is the unlock amount\n    const vesting = _vesting || [];\n    const isVesting = !shared.vestingLocked.isZero();\n    const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber.gt(startingBlock)\n        ? bnMin(locked, perBlock.mul(bestNumber.sub(startingBlock)))\n        : BN_ZERO);\n    const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new BN(0));\n    const vestingTotal = vesting.reduce((all, { locked }) => all.iadd(locked), new BN(0));\n    return {\n        isVesting,\n        vestedBalance,\n        vestedClaimable: isVesting\n            ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance))\n            : BN_ZERO,\n        vesting: vesting\n            .map(({ locked, perBlock, startingBlock }, index) => ({\n            endBlock: locked.div(perBlock).iadd(startingBlock),\n            locked,\n            perBlock,\n            startingBlock,\n            vested: vestedBalances[index]\n        }))\n            .filter(({ locked }) => !locked.isZero()),\n        vestingTotal\n    };\n}\nfunction calcBalances(api, result) {\n    const [data, [vesting, allLocks, namedReserves], bestNumber] = result;\n    const shared = calcShared(api, bestNumber, data, allLocks[0]);\n    return objectSpread(shared, calcVesting(bestNumber, shared, vesting), {\n        accountId: data.accountId,\n        accountNonce: data.accountNonce,\n        additional: allLocks\n            .slice(1)\n            .map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),\n        namedReserves\n    });\n}\nfunction queryOld(api, accountId) {\n    return combineLatest([\n        api.query.balances.locks(accountId),\n        api.query.balances['vesting'](accountId)\n    ]).pipe(map(([locks, optVesting]) => {\n        let vestingNew = null;\n        if (optVesting.isSome) {\n            const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();\n            vestingNew = api.registry.createType('VestingInfo', { locked, perBlock, startingBlock });\n        }\n        return [\n            vestingNew\n                ? [vestingNew]\n                : null,\n            [locks],\n            []\n        ];\n    }));\n}\nconst isNonNullable = (nullable) => !!nullable;\nfunction createCalls(calls) {\n    return [\n        calls.map((c) => !c),\n        calls.filter(isNonNullable)\n    ];\n}\nfunction queryCurrent(api, accountId, balanceInstances = ['balances']) {\n    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => api.derive[m]?.customLocks || api.query[m]?.locks));\n    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => api.query[m]?.reserves));\n    return combineLatest([\n        api.query.vesting?.vesting\n            ? api.query.vesting.vesting(accountId)\n            : of(api.registry.createType('Option<VestingInfo>')),\n        lockQueries.length\n            ? combineLatest(lockQueries.map((c) => c(accountId)))\n            : of([]),\n        reserveQueries.length\n            ? combineLatest(reserveQueries.map((c) => c(accountId)))\n            : of([])\n    ]).pipe(map(([opt, locks, reserves]) => {\n        let offsetLock = -1;\n        let offsetReserve = -1;\n        const vesting = opt.unwrapOr(null);\n        return [\n            vesting\n                ? Array.isArray(vesting)\n                    ? vesting\n                    : [vesting]\n                : null,\n            lockEmpty.map((e) => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]),\n            reserveEmpty.map((e) => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])\n        ];\n    }));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\nexport function all(instanceId, api) {\n    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');\n    return memo(instanceId, (address) => combineLatest([\n        api.derive.balances.account(address),\n        isFunction(api.query.system?.account) || isFunction(api.query.balances?.account)\n            ? queryCurrent(api, address, balanceInstances)\n            : queryOld(api, address)\n    ]).pipe(switchMap(([account, locks]) => combineLatest([\n        of(account),\n        of(locks),\n        api.derive.chain.bestNumber()\n    ])), map((result) => calcBalances(api, result))));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}