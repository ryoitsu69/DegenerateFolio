{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * Protocol for virtual authenticators\n * @enum {string}\n */\nconst Protocol = {\n  CTAP2: 'ctap2',\n  U2F: 'ctap1/u2f'\n};\n\n/**\n * AuthenticatorTransport values\n * @enum {string}\n */\nconst Transport = {\n  BLE: 'ble',\n  USB: 'usb',\n  NFC: 'nfc',\n  INTERNAL: 'internal'\n};\n\n/**\n * Options for the creation of virtual authenticators.\n * @see http://w3c.github.io/webauthn/#sctn-automation\n */\nclass VirtualAuthenticatorOptions {\n  /**\n   * Constructor to initialise VirtualAuthenticatorOptions object.\n   */\n  constructor() {\n    this._protocol = Protocol['CTAP2'];\n    this._transport = Transport['USB'];\n    this._hasResidentKey = false;\n    this._hasUserVerification = false;\n    this._isUserConsenting = true;\n    this._isUserVerified = false;\n  }\n  getProtocol() {\n    return this._protocol;\n  }\n  setProtocol(protocol) {\n    this._protocol = protocol;\n  }\n  getTransport() {\n    return this._transport;\n  }\n  setTransport(transport) {\n    this._transport = transport;\n  }\n  getHasResidentKey() {\n    return this._hasResidentKey;\n  }\n  setHasResidentKey(value) {\n    this._hasResidentKey = value;\n  }\n  getHasUserVerification() {\n    return this._hasUserVerification;\n  }\n  setHasUserVerification(value) {\n    this._hasUserVerification = value;\n  }\n  getIsUserConsenting() {\n    return this._isUserConsenting;\n  }\n  setIsUserConsenting(value) {\n    this._isUserConsenting = value;\n  }\n  getIsUserVerified() {\n    return this._isUserVerified;\n  }\n  setIsUserVerified(value) {\n    this._isUserVerified = value;\n  }\n  toDict() {\n    return {\n      protocol: this.getProtocol(),\n      transport: this.getTransport(),\n      hasResidentKey: this.getHasResidentKey(),\n      hasUserVerification: this.getHasUserVerification(),\n      isUserConsenting: this.getIsUserConsenting(),\n      isUserVerified: this.getIsUserVerified()\n    };\n  }\n}\n\n/**\n * A credential stored in a virtual authenticator.\n * @see https://w3c.github.io/webauthn/#credential-parameters\n */\nclass Credential {\n  constructor(credentialId, isResidentCredential, rpId, userHandle, privateKey, signCount) {\n    this._id = credentialId;\n    this._isResidentCredential = isResidentCredential;\n    this._rpId = rpId;\n    this._userHandle = userHandle;\n    this._privateKey = privateKey;\n    this._signCount = signCount;\n  }\n  static createResidentCredential(id, rpId, userHandle, privateKey, signCount) {\n    return new Credential(id, true, rpId, userHandle, privateKey, signCount);\n  }\n  static createNonResidentCredential(id, rpId, privateKey, signCount) {\n    return new Credential(id, false, rpId, null, privateKey, signCount);\n  }\n  id() {\n    return this._id;\n  }\n  isResidentCredential() {\n    return this._isResidentCredential;\n  }\n  rpId() {\n    return this._rpId;\n  }\n  userHandle() {\n    if (this._userHandle != null) {\n      return this._userHandle;\n    }\n    return null;\n  }\n  privateKey() {\n    return this._privateKey;\n  }\n  signCount() {\n    return this._signCount;\n  }\n\n  /**\n   * Creates a resident (i.e. stateless) credential.\n   * @param id Unique base64 encoded string.\n   * @param rpId Relying party identifier.\n   * @param userHandle userHandle associated to the credential. Must be Base64 encoded string.\n   * @param privateKey Base64 encoded PKCS\n   * @param signCount initial value for a signature counter.\n   * @deprecated This method has been made static. Call it with class name. Example, Credential.createResidentCredential()\n   * @returns A resident credential\n   */\n  createResidentCredential(id, rpId, userHandle, privateKey, signCount) {\n    return new Credential(id, true, rpId, userHandle, privateKey, signCount);\n  }\n\n  /**\n   * Creates a non-resident (i.e. stateless) credential.\n   * @param id Unique base64 encoded string.\n   * @param rpId Relying party identifier.\n   * @param privateKey Base64 encoded PKCS\n   * @param signCount initial value for a signature counter.\n   * @deprecated This method has been made static. Call it with class name. Example, Credential.createNonResidentCredential()\n   * @returns A non-resident credential\n   */\n  createNonResidentCredential(id, rpId, privateKey, signCount) {\n    return new Credential(id, false, rpId, null, privateKey, signCount);\n  }\n  toDict() {\n    let credentialData = {\n      credentialId: Buffer.from(this._id).toString('base64url'),\n      isResidentCredential: this._isResidentCredential,\n      rpId: this._rpId,\n      privateKey: Buffer.from(this._privateKey, 'binary').toString('base64url'),\n      signCount: this._signCount\n    };\n    if (this.userHandle() != null) {\n      credentialData['userHandle'] = Buffer.from(this._userHandle).toString('base64url');\n    }\n    return credentialData;\n  }\n\n  /**\n   * Creates a credential from a map.\n   */\n  fromDict(data) {\n    let id = new Uint8Array(Buffer.from(data['credentialId'], 'base64url'));\n    let isResidentCredential = data['isResidentCredential'];\n    let rpId = data['rpId'];\n    let privateKey = Buffer.from(data['privateKey'], 'base64url').toString('binary');\n    let signCount = data['signCount'];\n    let userHandle;\n    if ('userHandle' in data) {\n      userHandle = new Uint8Array(Buffer.from(data['userHandle'], 'base64url'));\n    } else {\n      userHandle = null;\n    }\n    return new Credential(id, isResidentCredential, rpId, userHandle, privateKey, signCount);\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Credential,\n  VirtualAuthenticatorOptions,\n  Transport,\n  Protocol\n};","map":{"version":3,"names":["Protocol","CTAP2","U2F","Transport","BLE","USB","NFC","INTERNAL","VirtualAuthenticatorOptions","constructor","_protocol","_transport","_hasResidentKey","_hasUserVerification","_isUserConsenting","_isUserVerified","getProtocol","setProtocol","protocol","getTransport","setTransport","transport","getHasResidentKey","setHasResidentKey","value","getHasUserVerification","setHasUserVerification","getIsUserConsenting","setIsUserConsenting","getIsUserVerified","setIsUserVerified","toDict","hasResidentKey","hasUserVerification","isUserConsenting","isUserVerified","Credential","credentialId","isResidentCredential","rpId","userHandle","privateKey","signCount","_id","_isResidentCredential","_rpId","_userHandle","_privateKey","_signCount","createResidentCredential","id","createNonResidentCredential","credentialData","Buffer","from","toString","fromDict","data","Uint8Array","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/lib/virtual_authenticator.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\n/**\n * Protocol for virtual authenticators\n * @enum {string}\n */\nconst Protocol = {\n  CTAP2: 'ctap2',\n  U2F: 'ctap1/u2f',\n}\n\n/**\n * AuthenticatorTransport values\n * @enum {string}\n */\nconst Transport = {\n  BLE: 'ble',\n  USB: 'usb',\n  NFC: 'nfc',\n  INTERNAL: 'internal',\n}\n\n/**\n * Options for the creation of virtual authenticators.\n * @see http://w3c.github.io/webauthn/#sctn-automation\n */\nclass VirtualAuthenticatorOptions {\n  /**\n   * Constructor to initialise VirtualAuthenticatorOptions object.\n   */\n  constructor() {\n    this._protocol = Protocol['CTAP2']\n    this._transport = Transport['USB']\n    this._hasResidentKey = false\n    this._hasUserVerification = false\n    this._isUserConsenting = true\n    this._isUserVerified = false\n  }\n\n  getProtocol() {\n    return this._protocol\n  }\n\n  setProtocol(protocol) {\n    this._protocol = protocol\n  }\n\n  getTransport() {\n    return this._transport\n  }\n\n  setTransport(transport) {\n    this._transport = transport\n  }\n\n  getHasResidentKey() {\n    return this._hasResidentKey\n  }\n\n  setHasResidentKey(value) {\n    this._hasResidentKey = value\n  }\n\n  getHasUserVerification() {\n    return this._hasUserVerification\n  }\n\n  setHasUserVerification(value) {\n    this._hasUserVerification = value\n  }\n\n  getIsUserConsenting() {\n    return this._isUserConsenting\n  }\n\n  setIsUserConsenting(value) {\n    this._isUserConsenting = value\n  }\n\n  getIsUserVerified() {\n    return this._isUserVerified\n  }\n\n  setIsUserVerified(value) {\n    this._isUserVerified = value\n  }\n\n  toDict() {\n    return {\n      protocol: this.getProtocol(),\n      transport: this.getTransport(),\n      hasResidentKey: this.getHasResidentKey(),\n      hasUserVerification: this.getHasUserVerification(),\n      isUserConsenting: this.getIsUserConsenting(),\n      isUserVerified: this.getIsUserVerified(),\n    }\n  }\n}\n\n/**\n * A credential stored in a virtual authenticator.\n * @see https://w3c.github.io/webauthn/#credential-parameters\n */\nclass Credential {\n  constructor(credentialId, isResidentCredential, rpId, userHandle, privateKey, signCount) {\n    this._id = credentialId\n    this._isResidentCredential = isResidentCredential\n    this._rpId = rpId\n    this._userHandle = userHandle\n    this._privateKey = privateKey\n    this._signCount = signCount\n  }\n\n  static createResidentCredential(id, rpId, userHandle, privateKey, signCount) {\n    return new Credential(id, true, rpId, userHandle, privateKey, signCount)\n  }\n\n  static createNonResidentCredential(id, rpId, privateKey, signCount) {\n    return new Credential(id, false, rpId, null, privateKey, signCount)\n  }\n\n  id() {\n    return this._id\n  }\n\n  isResidentCredential() {\n    return this._isResidentCredential\n  }\n\n  rpId() {\n    return this._rpId\n  }\n\n  userHandle() {\n    if (this._userHandle != null) {\n      return this._userHandle\n    }\n    return null\n  }\n\n  privateKey() {\n    return this._privateKey\n  }\n\n  signCount() {\n    return this._signCount\n  }\n\n  /**\n   * Creates a resident (i.e. stateless) credential.\n   * @param id Unique base64 encoded string.\n   * @param rpId Relying party identifier.\n   * @param userHandle userHandle associated to the credential. Must be Base64 encoded string.\n   * @param privateKey Base64 encoded PKCS\n   * @param signCount initial value for a signature counter.\n   * @deprecated This method has been made static. Call it with class name. Example, Credential.createResidentCredential()\n   * @returns A resident credential\n   */\n  createResidentCredential(id, rpId, userHandle, privateKey, signCount) {\n    return new Credential(id, true, rpId, userHandle, privateKey, signCount)\n  }\n\n  /**\n   * Creates a non-resident (i.e. stateless) credential.\n   * @param id Unique base64 encoded string.\n   * @param rpId Relying party identifier.\n   * @param privateKey Base64 encoded PKCS\n   * @param signCount initial value for a signature counter.\n   * @deprecated This method has been made static. Call it with class name. Example, Credential.createNonResidentCredential()\n   * @returns A non-resident credential\n   */\n  createNonResidentCredential(id, rpId, privateKey, signCount) {\n    return new Credential(id, false, rpId, null, privateKey, signCount)\n  }\n\n  toDict() {\n    let credentialData = {\n      credentialId: Buffer.from(this._id).toString('base64url'),\n      isResidentCredential: this._isResidentCredential,\n      rpId: this._rpId,\n      privateKey: Buffer.from(this._privateKey, 'binary').toString('base64url'),\n      signCount: this._signCount,\n    }\n\n    if (this.userHandle() != null) {\n      credentialData['userHandle'] = Buffer.from(this._userHandle).toString('base64url')\n    }\n\n    return credentialData\n  }\n\n  /**\n   * Creates a credential from a map.\n   */\n  fromDict(data) {\n    let id = new Uint8Array(Buffer.from(data['credentialId'], 'base64url'))\n    let isResidentCredential = data['isResidentCredential']\n    let rpId = data['rpId']\n    let privateKey = Buffer.from(data['privateKey'], 'base64url').toString('binary')\n    let signCount = data['signCount']\n    let userHandle\n\n    if ('userHandle' in data) {\n      userHandle = new Uint8Array(Buffer.from(data['userHandle'], 'base64url'))\n    } else {\n      userHandle = null\n    }\n    return new Credential(id, isResidentCredential, rpId, userHandle, privateKey, signCount)\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Credential,\n  VirtualAuthenticatorOptions,\n  Transport,\n  Protocol,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}