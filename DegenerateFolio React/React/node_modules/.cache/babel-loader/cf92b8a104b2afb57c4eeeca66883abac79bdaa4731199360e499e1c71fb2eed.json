{"ast":null,"code":"/**\n * @name createWasmFn\n * @description\n * Create a WASM (or ASM.js) creator interface based on the supplied information.\n *\n * It will attempt to create a WASM interface first and if this fails or is not available in\n * the environment, will fallback to attempting to create an ASM.js interface.\n */\nexport function createWasmFn(root, wasmBytes, asmFn) {\n  return async wbg => {\n    const result = {\n      error: null,\n      type: 'none',\n      wasm: null\n    };\n    try {\n      if (!wasmBytes?.length) {\n        throw new Error('No WebAssembly provided for initialization');\n      } else if (typeof WebAssembly !== 'object' || typeof WebAssembly.instantiate !== 'function') {\n        throw new Error('WebAssembly is not available in your environment');\n      }\n      const source = await WebAssembly.instantiate(wasmBytes, {\n        wbg\n      });\n      result.wasm = source.instance.exports;\n      result.type = 'wasm';\n    } catch (error) {\n      // if we have a valid supplied asm.js, return that\n      if (typeof asmFn === 'function') {\n        result.wasm = asmFn(wbg);\n        result.type = 'asm';\n      } else {\n        result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;\n        console.error(result.error);\n      }\n    }\n    return result;\n  };\n}","map":{"version":3,"names":["createWasmFn","root","wasmBytes","asmFn","wbg","result","error","type","wasm","length","Error","WebAssembly","instantiate","source","instance","exports","message","console"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/wasm-bridge/init.js"],"sourcesContent":["/**\n * @name createWasmFn\n * @description\n * Create a WASM (or ASM.js) creator interface based on the supplied information.\n *\n * It will attempt to create a WASM interface first and if this fails or is not available in\n * the environment, will fallback to attempting to create an ASM.js interface.\n */\nexport function createWasmFn(root, wasmBytes, asmFn) {\n    return async (wbg) => {\n        const result = {\n            error: null,\n            type: 'none',\n            wasm: null\n        };\n        try {\n            if (!wasmBytes?.length) {\n                throw new Error('No WebAssembly provided for initialization');\n            }\n            else if (typeof WebAssembly !== 'object' || typeof WebAssembly.instantiate !== 'function') {\n                throw new Error('WebAssembly is not available in your environment');\n            }\n            const source = await WebAssembly.instantiate(wasmBytes, { wbg });\n            result.wasm = source.instance.exports;\n            result.type = 'wasm';\n        }\n        catch (error) {\n            // if we have a valid supplied asm.js, return that\n            if (typeof asmFn === 'function') {\n                result.wasm = asmFn(wbg);\n                result.type = 'asm';\n            }\n            else {\n                result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;\n                console.error(result.error);\n            }\n        }\n        return result;\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,YAAYA,CAACC,IAAI,EAAEC,SAAS,EAAEC,KAAK,EAAE;EACjD,OAAO,MAAOC,GAAG,IAAK;IAClB,MAAMC,MAAM,GAAG;MACXC,KAAK,EAAE,IAAI;MACXC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;IACV,CAAC;IACD,IAAI;MACA,IAAI,CAACN,SAAS,EAAEO,MAAM,EAAE;QACpB,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;MACjE,CAAC,MACI,IAAI,OAAOC,WAAW,KAAK,QAAQ,IAAI,OAAOA,WAAW,CAACC,WAAW,KAAK,UAAU,EAAE;QACvF,MAAM,IAAIF,KAAK,CAAC,kDAAkD,CAAC;MACvE;MACA,MAAMG,MAAM,GAAG,MAAMF,WAAW,CAACC,WAAW,CAACV,SAAS,EAAE;QAAEE;MAAI,CAAC,CAAC;MAChEC,MAAM,CAACG,IAAI,GAAGK,MAAM,CAACC,QAAQ,CAACC,OAAO;MACrCV,MAAM,CAACE,IAAI,GAAG,MAAM;IACxB,CAAC,CACD,OAAOD,KAAK,EAAE;MACV;MACA,IAAI,OAAOH,KAAK,KAAK,UAAU,EAAE;QAC7BE,MAAM,CAACG,IAAI,GAAGL,KAAK,CAACC,GAAG,CAAC;QACxBC,MAAM,CAACE,IAAI,GAAG,KAAK;MACvB,CAAC,MACI;QACDF,MAAM,CAACC,KAAK,GAAI,8CAA6CL,IAAK,MAAKK,KAAK,CAACU,OAAQ,EAAC;QACtFC,OAAO,CAACX,KAAK,CAACD,MAAM,CAACC,KAAK,CAAC;MAC/B;IACJ;IACA,OAAOD,MAAM;EACjB,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}