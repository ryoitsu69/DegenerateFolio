{"ast":null,"code":"\"use strict\";\n\nfunction checkChildrenDidChange(container, previousData) {\n  const children = container.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    const changeId = (child.uid & 255) << 24 | child._didChangeId & 16777215;\n    if (previousData.data[previousData.index] !== changeId) {\n      previousData.data[previousData.index] = changeId;\n      previousData.didChange = true;\n    }\n    previousData.index++;\n    if (child.children.length) {\n      checkChildrenDidChange(child, previousData);\n    }\n  }\n  return previousData.didChange;\n}\nexport { checkChildrenDidChange };","map":{"version":3,"names":["checkChildrenDidChange","container","previousData","children","i","length","child","changeId","uid","_didChangeId","data","index","didChange"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/container/utils/checkChildrenDidChange.ts"],"sourcesContent":["import type { Container } from '../Container';\n\n/**\n * This function will crawl through the container essentially check if the children have changed.\n *\n * This function checkChildrenDidChange recursively checks if any child in a Container\n * or its children has changed. It does this by comparing a generated changeId for each\n * child against a stored value in previousData.\n * The changeId is a combination of the child's uid and _didChangeId, bitwise manipulated for uniqueness.\n * If a change is detected, it updates previousData and sets didChange to true.\n * The function returns a boolean indicating if any change was detected in the entire hierarchy of children.\n * @param container - the container to check for changes\n * @param previousData - the previous data from the last check made\n * @param previousData.data - the data array\n * @param previousData.index - the index of the data array\n * @param previousData.didChange - did the data change\n */\nexport function checkChildrenDidChange(\n    container: Container,\n    previousData: {\n        data: number[];\n        index: number;\n        didChange: boolean;\n    })\n{\n    const children = container.children;\n\n    for (let i = 0; i < children.length; i++)\n    {\n        const child = children[i];\n\n        const changeId = ((child.uid & 255) << 24)\n            | (child._didChangeId & 16777215);\n\n        if (previousData.data[previousData.index] !== changeId)\n        {\n            previousData.data[previousData.index] = changeId;\n\n            previousData.didChange = true;\n        }\n\n        previousData.index++;\n\n        if (child.children.length)\n        {\n            checkChildrenDidChange(child, previousData);\n        }\n    }\n\n    return previousData.didChange;\n}\n"],"mappings":";;AAiBgB,SAAAA,uBACZC,SAAA,EACAC,YAKJ;EACI,MAAMC,QAAA,GAAWF,SAAU,CAAAE,QAAA;EAE3B,SAASC,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASE,MAAA,EAAQD,CACrC;IACU,MAAAE,KAAA,GAAQH,QAAA,CAASC,CAAC;IAExB,MAAMG,QAAA,IAAaD,KAAM,CAAAE,GAAA,GAAM,GAAQ,UAChCF,KAAA,CAAMG,YAAe;IAE5B,IAAIP,YAAa,CAAAQ,IAAA,CAAKR,YAAa,CAAAS,KAAK,MAAMJ,QAC9C;MACiBL,YAAA,CAAAQ,IAAA,CAAKR,YAAa,CAAAS,KAAK,CAAI,GAAAJ,QAAA;MAExCL,YAAA,CAAaU,SAAY;IAAA;IAGhBV,YAAA,CAAAS,KAAA;IAET,IAAAL,KAAA,CAAMH,QAAA,CAASE,MACnB;MACIL,sBAAA,CAAuBM,KAAA,EAAOJ,YAAY;IAAA;EAC9C;EAGJ,OAAOA,YAAa,CAAAU,SAAA;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}