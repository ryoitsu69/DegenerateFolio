{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction _membersPrev(api, accountIds) {\n  return combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society['strikes'].multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society['vouching'].multi(accountIds)]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({\n    accountId,\n    isDefenderVoter: defenderVotes[index].isSome,\n    isSuspended: suspended[index].isTrue,\n    payouts: payouts[index],\n    strikes: strikes[index],\n    vote: defenderVotes[index].unwrapOr(undefined),\n    vouching: vouching[index].unwrapOr(undefined)\n  }))));\n}\nfunction _membersCurr(api, accountIds) {\n  return combineLatest([of(accountIds), api.query.society.members.multi(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.challengeRoundCount().pipe(switchMap(round => api.query.society.defenderVotes.multi(accountIds.map(accountId => [round, accountId])))), api.query.society.suspendedMembers.multi(accountIds)]).pipe(map(([accountIds, members, payouts, defenderVotes, suspendedMembers]) => accountIds.map((accountId, index) => members[index].isSome ? {\n    accountId,\n    isDefenderVoter: defenderVotes[index].isSome,\n    isSuspended: suspendedMembers[index].isSome,\n    member: members[index].unwrap(),\n    payouts: payouts[index].payouts\n  } : null).filter(m => !!m).map(({\n    accountId,\n    isDefenderVoter,\n    isSuspended,\n    member,\n    payouts\n  }) => ({\n    accountId,\n    isDefenderVoter,\n    isSuspended,\n    payouts,\n    strikes: member.strikes,\n    vouching: member.vouching.unwrapOr(undefined)\n  }))));\n}\nexport function _members(instanceId, api) {\n  return memo(instanceId, accountIds => api.query.society.members.creator.meta.type.isMap ? _membersCurr(api, accountIds) : _membersPrev(api, accountIds));\n}\n/**\n * @description Get the member info for a society\n */\nexport function members(instanceId, api) {\n  return memo(instanceId, () => api.query.society.members.creator.meta.type.isMap ? api.query.society.members.keys().pipe(switchMap(keys => api.derive.society._members(keys.map(({\n    args: [accountId]\n  }) => accountId)))) : api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","memo","_membersPrev","api","accountIds","query","society","payouts","multi","defenderVotes","suspendedMembers","pipe","strikes","suspended","vouching","accountId","index","isDefenderVoter","isSome","isSuspended","isTrue","vote","unwrapOr","undefined","_membersCurr","members","challengeRoundCount","round","member","unwrap","filter","m","_members","instanceId","creator","meta","type","isMap","keys","derive","args"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/society/members.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction _membersPrev(api, accountIds) {\n    return combineLatest([\n        of(accountIds),\n        api.query.society.payouts.multi(accountIds),\n        api.query.society['strikes'].multi(accountIds),\n        api.query.society.defenderVotes.multi(accountIds),\n        api.query.society.suspendedMembers.multi(accountIds),\n        api.query.society['vouching'].multi(accountIds)\n    ]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({\n        accountId,\n        isDefenderVoter: defenderVotes[index].isSome,\n        isSuspended: suspended[index].isTrue,\n        payouts: payouts[index],\n        strikes: strikes[index],\n        vote: defenderVotes[index].unwrapOr(undefined),\n        vouching: vouching[index].unwrapOr(undefined)\n    }))));\n}\nfunction _membersCurr(api, accountIds) {\n    return combineLatest([\n        of(accountIds),\n        api.query.society.members.multi(accountIds),\n        api.query.society.payouts.multi(accountIds),\n        api.query.society.challengeRoundCount().pipe(switchMap((round) => api.query.society.defenderVotes.multi(accountIds.map((accountId) => [round, accountId])))),\n        api.query.society.suspendedMembers.multi(accountIds)\n    ]).pipe(map(([accountIds, members, payouts, defenderVotes, suspendedMembers]) => accountIds\n        .map((accountId, index) => members[index].isSome\n        ? {\n            accountId,\n            isDefenderVoter: defenderVotes[index].isSome,\n            isSuspended: suspendedMembers[index].isSome,\n            member: members[index].unwrap(),\n            payouts: payouts[index].payouts\n        }\n        : null)\n        .filter((m) => !!m)\n        .map(({ accountId, isDefenderVoter, isSuspended, member, payouts }) => ({\n        accountId,\n        isDefenderVoter,\n        isSuspended,\n        payouts,\n        strikes: member.strikes,\n        vouching: member.vouching.unwrapOr(undefined)\n    }))));\n}\nexport function _members(instanceId, api) {\n    return memo(instanceId, (accountIds) => api.query.society.members.creator.meta.type.isMap\n        ? _membersCurr(api, accountIds)\n        : _membersPrev(api, accountIds));\n}\n/**\n * @description Get the member info for a society\n */\nexport function members(instanceId, api) {\n    return memo(instanceId, () => api.query.society.members.creator.meta.type.isMap\n        ? api.query.society.members.keys().pipe(switchMap((keys) => api.derive.society._members(keys.map(({ args: [accountId] }) => accountId))))\n        : api.query.society.members().pipe(switchMap((members) => api.derive.society._members(members))));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}