{"ast":null,"code":"import { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\"use strict\";\nconst canvasCache = /* @__PURE__ */new Map();\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\nexport { getCanvasTexture, hasCachedCanvasTexture };","map":{"version":3,"names":["canvasCache","Map","getCanvasTexture","canvas","options","has","texture","Texture","source","CanvasSource","resource","onDestroy","get","delete","once","set","hasCachedCanvasTexture"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts"],"sourcesContent":["import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n"],"mappings":";;;AAMA,MAAMA,WAAA,sBAAyCC,GAAI;AAEnC,SAAAC,iBAAiBC,MAAA,EAAiBC,OAClD;EACI,IAAI,CAACJ,WAAA,CAAYK,GAAI,CAAAF,MAAM,CAC3B;IACU,MAAAG,OAAA,GAAU,IAAIC,OAAQ;MACxBC,MAAA,EAAQ,IAAIC,YAAa;QACrBC,QAAU,EAAAP,MAAA;QACV,GAAGC;MAAA,CACN;IAAA,CACJ;IAED,MAAMO,SAAA,GAAYA,CAAA,KAClB;MACI,IAAIX,WAAY,CAAAY,GAAA,CAAIT,MAAM,MAAMG,OAChC;QACIN,WAAA,CAAYa,MAAA,CAAOV,MAAM;MAAA;IAC7B,CACJ;IAEQG,OAAA,CAAAQ,IAAA,CAAK,WAAWH,SAAS;IACzBL,OAAA,CAAAE,MAAA,CAAOM,IAAK,YAAWH,SAAS;IAE5BX,WAAA,CAAAe,GAAA,CAAIZ,MAAA,EAAQG,OAAO;EAAA;EAG5B,OAAAN,WAAA,CAAYY,GAAA,CAAIT,MAAM;AACjC;AAEO,SAASa,uBAAuBb,MACvC;EACW,OAAAH,WAAA,CAAYK,GAAA,CAAIF,MAAM;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}