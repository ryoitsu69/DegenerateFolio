{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;\nconst util_1 = require(\"./helpers/util\");\nexports.ZodIssueCode = util_1.util.arrayToEnum([\"invalid_type\", \"invalid_literal\", \"custom\", \"invalid_union\", \"invalid_union_discriminator\", \"invalid_enum_value\", \"unrecognized_keys\", \"invalid_arguments\", \"invalid_return_type\", \"invalid_date\", \"invalid_string\", \"too_small\", \"too_big\", \"invalid_intersection_types\", \"not_multiple_of\", \"not_finite\"]);\nconst quotelessJson = obj => {\n  const json = JSON.stringify(obj, null, 2);\n  return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nexports.quotelessJson = quotelessJson;\nclass ZodError extends Error {\n  constructor(issues) {\n    var _this;\n    super();\n    _this = this;\n    this.issues = [];\n    this.addIssue = sub => {\n      this.issues = [...this.issues, sub];\n    };\n    this.addIssues = function () {\n      let subs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      _this.issues = [..._this.issues, ...subs];\n    };\n    const actualProto = new.target.prototype;\n    if (Object.setPrototypeOf) {\n      // eslint-disable-next-line ban/ban\n      Object.setPrototypeOf(this, actualProto);\n    } else {\n      this.__proto__ = actualProto;\n    }\n    this.name = \"ZodError\";\n    this.issues = issues;\n  }\n  get errors() {\n    return this.issues;\n  }\n  format(_mapper) {\n    const mapper = _mapper || function (issue) {\n      return issue.message;\n    };\n    const fieldErrors = {\n      _errors: []\n    };\n    const processError = error => {\n      for (const issue of error.issues) {\n        if (issue.code === \"invalid_union\") {\n          issue.unionErrors.map(processError);\n        } else if (issue.code === \"invalid_return_type\") {\n          processError(issue.returnTypeError);\n        } else if (issue.code === \"invalid_arguments\") {\n          processError(issue.argumentsError);\n        } else if (issue.path.length === 0) {\n          fieldErrors._errors.push(mapper(issue));\n        } else {\n          let curr = fieldErrors;\n          let i = 0;\n          while (i < issue.path.length) {\n            const el = issue.path[i];\n            const terminal = i === issue.path.length - 1;\n            if (!terminal) {\n              curr[el] = curr[el] || {\n                _errors: []\n              };\n              // if (typeof el === \"string\") {\n              //   curr[el] = curr[el] || { _errors: [] };\n              // } else if (typeof el === \"number\") {\n              //   const errorArray: any = [];\n              //   errorArray._errors = [];\n              //   curr[el] = curr[el] || errorArray;\n              // }\n            } else {\n              curr[el] = curr[el] || {\n                _errors: []\n              };\n              curr[el]._errors.push(mapper(issue));\n            }\n            curr = curr[el];\n            i++;\n          }\n        }\n      }\n    };\n    processError(this);\n    return fieldErrors;\n  }\n  static assert(value) {\n    if (!(value instanceof ZodError)) {\n      throw new Error(\"Not a ZodError: \".concat(value));\n    }\n  }\n  toString() {\n    return this.message;\n  }\n  get message() {\n    return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);\n  }\n  get isEmpty() {\n    return this.issues.length === 0;\n  }\n  flatten() {\n    let mapper = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : issue => issue.message;\n    const fieldErrors = {};\n    const formErrors = [];\n    for (const sub of this.issues) {\n      if (sub.path.length > 0) {\n        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n        fieldErrors[sub.path[0]].push(mapper(sub));\n      } else {\n        formErrors.push(mapper(sub));\n      }\n    }\n    return {\n      formErrors,\n      fieldErrors\n    };\n  }\n  get formErrors() {\n    return this.flatten();\n  }\n}\nexports.ZodError = ZodError;\nZodError.create = issues => {\n  const error = new ZodError(issues);\n  return error;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","ZodError","quotelessJson","ZodIssueCode","util_1","require","util","arrayToEnum","obj","json","JSON","stringify","replace","Error","constructor","issues","_this","this","addIssue","sub","addIssues","subs","arguments","length","undefined","actualProto","new","target","prototype","setPrototypeOf","__proto__","name","errors","format","_mapper","mapper","issue","message","fieldErrors","_errors","processError","error","code","unionErrors","map","returnTypeError","argumentsError","path","push","curr","i","el","terminal","assert","concat","toString","jsonStringifyReplacer","isEmpty","flatten","formErrors","create"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/zod/lib/ZodError.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;\nconst util_1 = require(\"./helpers/util\");\nexports.ZodIssueCode = util_1.util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nexports.quotelessJson = quotelessJson;\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nexports.ZodError = ZodError;\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}