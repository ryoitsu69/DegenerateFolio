{"ast":null,"code":"import { u8aToU8a } from '../u8a/toU8a.js';\nimport { isHex } from './hex.js';\nimport { isString } from './string.js';\n/** @internal */\nfunction isAsciiStr(str) {\n  for (let i = 0, count = str.length; i < count; i++) {\n    const b = str.charCodeAt(i);\n    // check is inlined here, it is faster than making a call\n    if (b < 32 || b > 126) {\n      return false;\n    }\n  }\n  return true;\n}\n/** @internal */\nfunction isAsciiBytes(u8a) {\n  for (let i = 0, count = u8a.length; i < count; i++) {\n    const b = u8a[i] | 0;\n    // check is inlined here, it is faster than making a call\n    if (b < 32 || b > 126) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * @name isAscii\n * @summary Tests if the input is printable ASCII\n * @description\n * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters\n */\nexport function isAscii(value) {\n  return isString(value) ? isHex(value) ? isAsciiBytes(u8aToU8a(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;\n}","map":{"version":3,"names":["u8aToU8a","isHex","isString","isAsciiStr","str","i","count","length","b","charCodeAt","isAsciiBytes","u8a","isAscii","value"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/is/ascii.js"],"sourcesContent":["import { u8aToU8a } from '../u8a/toU8a.js';\nimport { isHex } from './hex.js';\nimport { isString } from './string.js';\n/** @internal */\nfunction isAsciiStr(str) {\n    for (let i = 0, count = str.length; i < count; i++) {\n        const b = str.charCodeAt(i);\n        // check is inlined here, it is faster than making a call\n        if (b < 32 || b > 126) {\n            return false;\n        }\n    }\n    return true;\n}\n/** @internal */\nfunction isAsciiBytes(u8a) {\n    for (let i = 0, count = u8a.length; i < count; i++) {\n        const b = u8a[i] | 0;\n        // check is inlined here, it is faster than making a call\n        if (b < 32 || b > 126) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @name isAscii\n * @summary Tests if the input is printable ASCII\n * @description\n * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters\n */\nexport function isAscii(value) {\n    return isString(value)\n        ? isHex(value)\n            ? isAsciiBytes(u8aToU8a(value))\n            : isAsciiStr(value)\n        : value\n            ? isAsciiBytes(value)\n            : false;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,QAAQ,QAAQ,aAAa;AACtC;AACA,SAASC,UAAUA,CAACC,GAAG,EAAE;EACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAGF,GAAG,CAACG,MAAM,EAAEF,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;IAChD,MAAMG,CAAC,GAAGJ,GAAG,CAACK,UAAU,CAACJ,CAAC,CAAC;IAC3B;IACA,IAAIG,CAAC,GAAG,EAAE,IAAIA,CAAC,GAAG,GAAG,EAAE;MACnB,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA,SAASE,YAAYA,CAACC,GAAG,EAAE;EACvB,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAGK,GAAG,CAACJ,MAAM,EAAEF,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;IAChD,MAAMG,CAAC,GAAGG,GAAG,CAACN,CAAC,CAAC,GAAG,CAAC;IACpB;IACA,IAAIG,CAAC,GAAG,EAAE,IAAIA,CAAC,GAAG,GAAG,EAAE;MACnB,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,OAAOA,CAACC,KAAK,EAAE;EAC3B,OAAOX,QAAQ,CAACW,KAAK,CAAC,GAChBZ,KAAK,CAACY,KAAK,CAAC,GACRH,YAAY,CAACV,QAAQ,CAACa,KAAK,CAAC,CAAC,GAC7BV,UAAU,CAACU,KAAK,CAAC,GACrBA,KAAK,GACDH,YAAY,CAACG,KAAK,CAAC,GACnB,KAAK;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}