{"ast":null,"code":"import { ExtensionType, extensions } from \"@pixi/extensions\";\nimport \"./utils/index.mjs\";\nimport { generateProgram } from \"./utils/generateProgram.mjs\";\nimport { generateUniformBufferSync } from \"./utils/generateUniformBufferSync.mjs\";\nimport { unsafeEvalSupported } from \"./utils/unsafeEvalSupported.mjs\";\nimport { generateUniformsSync } from \"./utils/generateUniformsSync.mjs\";\nlet UID = 0;\nconst defaultSyncData = {\n  textureCount: 0,\n  uboCount: 0\n};\nclass ShaderSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this.destroyed = !1, this.renderer = renderer, this.systemCheck(), this.gl = null, this.shader = null, this.program = null, this.cache = {}, this._uboCache = {}, this.id = UID++;\n  }\n  /**\n   * Overrideable function by `@pixi/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  systemCheck() {\n    if (!unsafeEvalSupported()) throw new Error(\"Current environment does not allow unsafe-eval, please use @pixi/unsafe-eval module to enable support.\");\n  }\n  contextChange(gl) {\n    this.gl = gl, this.reset();\n  }\n  /**\n   * Changes the current shader to the one given in parameter.\n   * @param shader - the new shader\n   * @param dontSync - false if the shader should automatically sync its uniforms.\n   * @returns the glProgram that belongs to the shader.\n   */\n  bind(shader, dontSync) {\n    shader.disposeRunner.add(this), shader.uniforms.globals = this.renderer.globalUniforms;\n    const program = shader.program,\n      glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n    return this.shader = shader, this.program !== program && (this.program = program, this.gl.useProgram(glProgram.program)), dontSync || (defaultSyncData.textureCount = 0, defaultSyncData.uboCount = 0, this.syncUniformGroup(shader.uniformGroup, defaultSyncData)), glProgram;\n  }\n  /**\n   * Uploads the uniforms values to the currently bound shader.\n   * @param uniforms - the uniforms values that be applied to the current shader\n   */\n  setUniforms(uniforms) {\n    const shader = this.shader.program,\n      glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n    shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n  }\n  /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n  /**\n   * Syncs uniforms on the group\n   * @param group - the uniform group to sync\n   * @param syncData - this is data that is passed to the sync function and any nested sync functions\n   */\n  syncUniformGroup(group, syncData) {\n    const glProgram = this.getGlProgram();\n    (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id]) && (glProgram.uniformDirtyGroups[group.id] = group.dirtyId, this.syncUniforms(group, glProgram, syncData));\n  }\n  /**\n   * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n   * @param group\n   * @param glProgram\n   * @param syncData\n   */\n  syncUniforms(group, glProgram, syncData) {\n    (group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group))(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n  }\n  createSyncGroups(group) {\n    const id = this.getSignature(group, this.shader.program.uniformData, \"u\");\n    return this.cache[id] || (this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData)), group.syncUniforms[this.shader.program.id] = this.cache[id], group.syncUniforms[this.shader.program.id];\n  }\n  /**\n   * Syncs uniform buffers\n   * @param group - the uniform buffer group to sync\n   * @param name - the name of the uniform buffer\n   */\n  syncUniformBufferGroup(group, name) {\n    const glProgram = this.getGlProgram();\n    if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id]) {\n      group.dirtyId = 0;\n      const syncFunc = glProgram.uniformGroups[group.id] || this.createSyncBufferGroup(group, glProgram, name);\n      group.buffer.update(), syncFunc(glProgram.uniformData, group.uniforms, this.renderer, defaultSyncData, group.buffer);\n    }\n    this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n  }\n  /**\n   * Will create a function that uploads a uniform buffer using the STD140 standard.\n   * The upload function will then be cached for future calls\n   * If a group is manually managed, then a simple upload function is generated\n   * @param group - the uniform buffer group to sync\n   * @param glProgram - the gl program to attach the uniform bindings to\n   * @param name - the name of the uniform buffer (must exist on the shader)\n   */\n  createSyncBufferGroup(group, glProgram, name) {\n    const {\n      gl\n    } = this.renderer;\n    this.renderer.buffer.bind(group.buffer);\n    const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n    glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount, gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount), this.shader.uniformBindCount++;\n    const id = this.getSignature(group, this.shader.program.uniformData, \"ubo\");\n    let uboData = this._uboCache[id];\n    if (uboData || (uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData)), group.autoManage) {\n      const data = new Float32Array(uboData.size / 4);\n      group.buffer.update(data);\n    }\n    return glProgram.uniformGroups[group.id] = uboData.syncFunc, glProgram.uniformGroups[group.id];\n  }\n  /**\n   * Takes a uniform group and data and generates a unique signature for them.\n   * @param group - The uniform group to get signature of\n   * @param group.uniforms\n   * @param uniformData - Uniform information generated by the shader\n   * @param preFix\n   * @returns Unique signature of the uniform group\n   */\n  getSignature(group, uniformData, preFix) {\n    const uniforms = group.uniforms,\n      strings = [`${preFix}-`];\n    for (const i in uniforms) strings.push(i), uniformData[i] && strings.push(uniformData[i].type);\n    return strings.join(\"-\");\n  }\n  /**\n   * Returns the underlying GLShade rof the currently bound shader.\n   *\n   * This can be handy for when you to have a little more control over the setting of your uniforms.\n   * @returns The glProgram for the currently bound Shader for this context\n   */\n  getGlProgram() {\n    return this.shader ? this.shader.program.glPrograms[this.renderer.CONTEXT_UID] : null;\n  }\n  /**\n   * Generates a glProgram version of the Shader provided.\n   * @param shader - The shader that the glProgram will be based on.\n   * @returns A shiny new glProgram!\n   */\n  generateProgram(shader) {\n    const gl = this.gl,\n      program = shader.program,\n      glProgram = generateProgram(gl, program);\n    return program.glPrograms[this.renderer.CONTEXT_UID] = glProgram, glProgram;\n  }\n  /** Resets ShaderSystem state, does not affect WebGL state. */\n  reset() {\n    this.program = null, this.shader = null;\n  }\n  /**\n   * Disposes shader.\n   * If disposing one equals with current shader, set current as null.\n   * @param shader - Shader object\n   */\n  disposeShader(shader) {\n    this.shader === shader && (this.shader = null);\n  }\n  /** Destroys this System and removes all its textures. */\n  destroy() {\n    this.renderer = null, this.destroyed = !0;\n  }\n}\nShaderSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"shader\"\n};\nextensions.add(ShaderSystem);\nexport { ShaderSystem };","map":{"version":3,"names":["UID","defaultSyncData","textureCount","uboCount","ShaderSystem","constructor","renderer","destroyed","systemCheck","gl","shader","program","cache","_uboCache","id","unsafeEvalSupported","Error","contextChange","reset","bind","dontSync","disposeRunner","add","uniforms","globals","globalUniforms","glProgram","glPrograms","CONTEXT_UID","generateProgram","useProgram","syncUniformGroup","uniformGroup","setUniforms","syncUniforms","uniformData","group","syncData","getGlProgram","static","dirtyId","uniformDirtyGroups","createSyncGroups","getSignature","generateUniformsSync","syncUniformBufferGroup","name","uniformGroups","syncFunc","createSyncBufferGroup","buffer","update","bindBufferBase","uniformBufferBindings","uniformBlockIndex","getUniformBlockIndex","uniformBindCount","uniformBlockBinding","uboData","generateUniformBufferSync","autoManage","data","Float32Array","size","preFix","strings","i","push","type","join","disposeShader","destroy","extension","ExtensionType","RendererSystem","extensions"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/shader/ShaderSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\nimport { generateUniformsSync, unsafeEvalSupported } from './utils';\nimport { generateProgram } from './utils/generateProgram';\nimport { generateUniformBufferSync } from './utils/generateUniformBufferSync';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Dict } from '@pixi/utils';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { GLProgram } from './GLProgram';\nimport type { Program } from './Program';\nimport type { Shader } from './Shader';\nimport type { UniformGroup } from './UniformGroup';\nimport type { UniformsSyncCallback } from './utils';\n\nlet UID = 0;\n// default sync data so we don't create a new one each time!\nconst defaultSyncData = { textureCount: 0, uboCount: 0 };\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof PIXI\n */\nexport class ShaderSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'shader',\n    };\n\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: IRenderingContext;\n\n    public shader: Shader;\n    public program: Program;\n    public id: number;\n    public destroyed = false;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private cache: Dict<UniformsSyncCallback>;\n    private _uboCache: Dict<{size: number, syncFunc: UniformsSyncCallback}>;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        // Validation check that this environment support `new Function`\n        this.systemCheck();\n\n        this.gl = null;\n\n        this.shader = null;\n        this.program = null;\n\n        this.cache = {};\n        this._uboCache = {};\n\n        this.id = UID++;\n    }\n\n    /**\n     * Overrideable function by `@pixi/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                + 'please use @pixi/unsafe-eval module to enable support.');\n        }\n    }\n\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param dontSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    bind(shader: Shader, dontSync?: boolean): GLProgram\n    {\n        shader.disposeRunner.add(this);\n\n        shader.uniforms.globals = this.renderer.globalUniforms;\n\n        const program = shader.program;\n        const glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n\n        this.shader = shader;\n\n        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..\n        if (this.program !== program)\n        {\n            this.program = program;\n            this.gl.useProgram(glProgram.program);\n        }\n\n        if (!dontSync)\n        {\n            defaultSyncData.textureCount = 0;\n            defaultSyncData.uboCount = 0;\n\n            this.syncUniformGroup(shader.uniformGroup, defaultSyncData);\n        }\n\n        return glProgram;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param uniforms - the uniforms values that be applied to the current shader\n     */\n    setUniforms(uniforms: Dict<any>): void\n    {\n        const shader = this.shader.program;\n        const glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n\n        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n    }\n\n    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n    /**\n     * Syncs uniforms on the group\n     * @param group - the uniform group to sync\n     * @param syncData - this is data that is passed to the sync function and any nested sync functions\n     */\n    syncUniformGroup(group: UniformGroup, syncData?: any): void\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id])\n        {\n            glProgram.uniformDirtyGroups[group.id] = group.dirtyId;\n\n            this.syncUniforms(group, glProgram, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param glProgram\n     * @param syncData\n     */\n    syncUniforms(group: UniformGroup, glProgram: GLProgram, syncData: any): void\n    {\n        const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n\n        syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n    }\n\n    createSyncGroups(group: UniformGroup): UniformsSyncCallback\n    {\n        const id = this.getSignature(group, this.shader.program.uniformData, 'u');\n\n        if (!this.cache[id])\n        {\n            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n        }\n\n        group.syncUniforms[this.shader.program.id] = this.cache[id];\n\n        return group.syncUniforms[this.shader.program.id];\n    }\n\n    /**\n     * Syncs uniform buffers\n     * @param group - the uniform buffer group to sync\n     * @param name - the name of the uniform buffer\n     */\n    syncUniformBufferGroup(group: UniformGroup, name?: string)\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id])\n        {\n            group.dirtyId = 0;\n\n            const syncFunc = glProgram.uniformGroups[group.id]\n                || this.createSyncBufferGroup(group, glProgram, name);\n\n            // TODO wrap update in a cache??\n            group.buffer.update();\n\n            syncFunc(glProgram.uniformData,\n                group.uniforms,\n                this.renderer,\n                defaultSyncData,\n                group.buffer\n            );\n        }\n\n        this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n    }\n\n    /**\n     * Will create a function that uploads a uniform buffer using the STD140 standard.\n     * The upload function will then be cached for future calls\n     * If a group is manually managed, then a simple upload function is generated\n     * @param group - the uniform buffer group to sync\n     * @param glProgram - the gl program to attach the uniform bindings to\n     * @param name - the name of the uniform buffer (must exist on the shader)\n     */\n    protected createSyncBufferGroup(group: UniformGroup, glProgram: GLProgram, name: string): UniformsSyncCallback\n    {\n        const { gl } = this.renderer;\n\n        this.renderer.buffer.bind(group.buffer);\n\n        // bind them...\n        const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n\n        glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;\n\n        gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);\n\n        this.shader.uniformBindCount++;\n\n        const id = this.getSignature(group, this.shader.program.uniformData, 'ubo');\n\n        let uboData = this._uboCache[id];\n\n        if (!uboData)\n        {\n            uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);\n        }\n\n        if (group.autoManage)\n        {\n            const data = new Float32Array(uboData.size / 4);\n\n            group.buffer.update(data);\n        }\n\n        glProgram.uniformGroups[group.id] = uboData.syncFunc;\n\n        return glProgram.uniformGroups[group.id];\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private getSignature(group: {uniforms: Dict<any>}, uniformData: Dict<any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Returns the underlying GLShade rof the currently bound shader.\n     *\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     * @returns The glProgram for the currently bound Shader for this context\n     */\n    getGlProgram(): GLProgram\n    {\n        if (this.shader)\n        {\n            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates a glProgram version of the Shader provided.\n     * @param shader - The shader that the glProgram will be based on.\n     * @returns A shiny new glProgram!\n     */\n    generateProgram(shader: Shader): GLProgram\n    {\n        const gl = this.gl;\n        const program = shader.program;\n\n        const glProgram = generateProgram(gl, program);\n\n        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n\n        return glProgram;\n    }\n\n    /** Resets ShaderSystem state, does not affect WebGL state. */\n    reset(): void\n    {\n        this.program = null;\n        this.shader = null;\n    }\n\n    /**\n     * Disposes shader.\n     * If disposing one equals with current shader, set current as null.\n     * @param shader - Shader object\n     */\n    disposeShader(shader: Shader): void\n    {\n        if (this.shader === shader)\n        {\n            this.shader = null;\n        }\n    }\n\n    /** Destroys this System and removes all its textures. */\n    destroy(): void\n    {\n        this.renderer = null;\n        // TODO implement destroy method for ShaderSystem\n        this.destroyed = true;\n    }\n}\n\nextensions.add(ShaderSystem);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}