{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { hasBigInt, u8aEmpty } from '@polkadot/util';\nimport { isReady, secp256k1FromSeed } from '@polkadot/wasm-crypto';\n/**\n * @name secp256k1PairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\nexport function secp256k1PairFromSeed(seed, onlyJs) {\n  if (seed.length !== 32) {\n    throw new Error('Expected valid 32-byte private key as a seed');\n  }\n  if (!hasBigInt || !onlyJs && isReady()) {\n    const full = secp256k1FromSeed(seed);\n    const publicKey = full.slice(32);\n    // There is an issue with the secp256k1 when running in an ASM.js environment where\n    // it seems that the lazy static section yields invalid results on the _first_ run.\n    // If this happens, fail outright, we cannot allow invalid return values\n    // https://github.com/polkadot-js/wasm/issues/307\n    if (u8aEmpty(publicKey)) {\n      throw new Error('Invalid publicKey generated from WASM interface');\n    }\n    return {\n      publicKey,\n      secretKey: full.slice(0, 32)\n    };\n  }\n  return {\n    publicKey: secp256k1.getPublicKey(seed, true),\n    secretKey: seed\n  };\n}","map":{"version":3,"names":["secp256k1","hasBigInt","u8aEmpty","isReady","secp256k1FromSeed","secp256k1PairFromSeed","seed","onlyJs","length","Error","full","publicKey","slice","secretKey","getPublicKey"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1';\nimport { hasBigInt, u8aEmpty } from '@polkadot/util';\nimport { isReady, secp256k1FromSeed } from '@polkadot/wasm-crypto';\n/**\n * @name secp256k1PairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\nexport function secp256k1PairFromSeed(seed, onlyJs) {\n    if (seed.length !== 32) {\n        throw new Error('Expected valid 32-byte private key as a seed');\n    }\n    if (!hasBigInt || (!onlyJs && isReady())) {\n        const full = secp256k1FromSeed(seed);\n        const publicKey = full.slice(32);\n        // There is an issue with the secp256k1 when running in an ASM.js environment where\n        // it seems that the lazy static section yields invalid results on the _first_ run.\n        // If this happens, fail outright, we cannot allow invalid return values\n        // https://github.com/polkadot-js/wasm/issues/307\n        if (u8aEmpty(publicKey)) {\n            throw new Error('Invalid publicKey generated from WASM interface');\n        }\n        return {\n            publicKey,\n            secretKey: full.slice(0, 32)\n        };\n    }\n    return {\n        publicKey: secp256k1.getPublicKey(seed, true),\n        secretKey: seed\n    };\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,gBAAgB;AACpD,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,uBAAuB;AAClE;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,IAAI,EAAEC,MAAM,EAAE;EAChD,IAAID,IAAI,CAACE,MAAM,KAAK,EAAE,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACnE;EACA,IAAI,CAACR,SAAS,IAAK,CAACM,MAAM,IAAIJ,OAAO,CAAC,CAAE,EAAE;IACtC,MAAMO,IAAI,GAAGN,iBAAiB,CAACE,IAAI,CAAC;IACpC,MAAMK,SAAS,GAAGD,IAAI,CAACE,KAAK,CAAC,EAAE,CAAC;IAChC;IACA;IACA;IACA;IACA,IAAIV,QAAQ,CAACS,SAAS,CAAC,EAAE;MACrB,MAAM,IAAIF,KAAK,CAAC,iDAAiD,CAAC;IACtE;IACA,OAAO;MACHE,SAAS;MACTE,SAAS,EAAEH,IAAI,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE;IAC/B,CAAC;EACL;EACA,OAAO;IACHD,SAAS,EAAEX,SAAS,CAACc,YAAY,CAACR,IAAI,EAAE,IAAI,CAAC;IAC7CO,SAAS,EAAEP;EACf,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}