{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateFee = exports.GasPrice = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n/**\n * Denom checker for the Cosmos SDK 0.42 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n *\n * This is like a regexp but with helpful error messages.\n */\nfunction checkDenom(denom) {\n  if (denom.length < 3 || denom.length > 128) {\n    throw new Error(\"Denom must be between 3 and 128 characters\");\n  }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n */\nclass GasPrice {\n  constructor(amount, denom) {\n    this.amount = amount;\n    this.denom = denom;\n  }\n  /**\n   * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n   *\n   * The denom must match the Cosmos SDK 0.42 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/types/coin.go#L599-L601).\n   * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n   *\n   * Separators are not yet supported.\n   */\n  static fromString(gasPrice) {\n    // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n    const matchResult = gasPrice.match(/^([0-9.]+)([a-zA-Z][a-zA-Z0-9/:._-]*)$/);\n    if (!matchResult) {\n      throw new Error(\"Invalid gas price string\");\n    }\n    const [_, amount, denom] = matchResult;\n    checkDenom(denom);\n    const fractionalDigits = 18;\n    const decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n    return new GasPrice(decimalAmount, denom);\n  }\n  /**\n   * Returns a string representation of this gas price, e.g. \"0.025uatom\".\n   * This can be used as an input to `GasPrice.fromString`.\n   */\n  toString() {\n    return this.amount.toString() + this.denom;\n  }\n}\nexports.GasPrice = GasPrice;\nfunction calculateFee(gasLimit, gasPrice) {\n  const processedGasPrice = typeof gasPrice === \"string\" ? GasPrice.fromString(gasPrice) : gasPrice;\n  const {\n    denom,\n    amount: gasPriceAmount\n  } = processedGasPrice;\n  // Note: Amount can exceed the safe integer range (https://github.com/cosmos/cosmjs/issues/1134),\n  // which we handle by converting from Decimal to string without going through number.\n  const amount = gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).ceil().toString();\n  return {\n    amount: (0, proto_signing_1.coins)(amount, denom),\n    gas: gasLimit.toString()\n  };\n}\nexports.calculateFee = calculateFee;","map":{"version":3,"names":["math_1","require","proto_signing_1","checkDenom","denom","length","Error","GasPrice","constructor","amount","fromString","gasPrice","matchResult","match","_","fractionalDigits","decimalAmount","Decimal","fromUserInput","toString","exports","calculateFee","gasLimit","processedGasPrice","gasPriceAmount","multiply","Uint53","ceil","coins","gas"],"sources":["../src/fee.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,eAAA,GAAAD,OAAA;AAEA;;;;;;AAMA,SAASE,UAAUA,CAACC,KAAa;EAC/B,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,IAAID,KAAK,CAACC,MAAM,GAAG,GAAG,EAAE;IAC1C,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;;AAEjE;AAEA;;;;AAIA,MAAaC,QAAQ;EAInBC,YAAmBC,MAAe,EAAEL,KAAa;IAC/C,IAAI,CAACK,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACL,KAAK,GAAGA,KAAK;EACpB;EAEA;;;;;;;;EAQO,OAAOM,UAAUA,CAACC,QAAgB;IACvC;IACA,MAAMC,WAAW,GAAGD,QAAQ,CAACE,KAAK,CAAC,wCAAwC,CAAC;IAC5E,IAAI,CAACD,WAAW,EAAE;MAChB,MAAM,IAAIN,KAAK,CAAC,0BAA0B,CAAC;;IAE7C,MAAM,CAACQ,CAAC,EAAEL,MAAM,EAAEL,KAAK,CAAC,GAAGQ,WAAW;IACtCT,UAAU,CAACC,KAAK,CAAC;IACjB,MAAMW,gBAAgB,GAAG,EAAE;IAC3B,MAAMC,aAAa,GAAGhB,MAAA,CAAAiB,OAAO,CAACC,aAAa,CAACT,MAAM,EAAEM,gBAAgB,CAAC;IACrE,OAAO,IAAIR,QAAQ,CAACS,aAAa,EAAEZ,KAAK,CAAC;EAC3C;EAEA;;;;EAIOe,QAAQA,CAAA;IACb,OAAO,IAAI,CAACV,MAAM,CAACU,QAAQ,EAAE,GAAG,IAAI,CAACf,KAAK;EAC5C;;AApCFgB,OAAA,CAAAb,QAAA,GAAAA,QAAA;AAuCA,SAAgBc,YAAYA,CAACC,QAAgB,EAAEX,QAA2B;EACxE,MAAMY,iBAAiB,GAAG,OAAOZ,QAAQ,KAAK,QAAQ,GAAGJ,QAAQ,CAACG,UAAU,CAACC,QAAQ,CAAC,GAAGA,QAAQ;EACjG,MAAM;IAAEP,KAAK;IAAEK,MAAM,EAAEe;EAAc,CAAE,GAAGD,iBAAiB;EAC3D;EACA;EACA,MAAMd,MAAM,GAAGe,cAAc,CAACC,QAAQ,CAAC,IAAIzB,MAAA,CAAA0B,MAAM,CAACJ,QAAQ,CAAC,CAAC,CAACK,IAAI,EAAE,CAACR,QAAQ,EAAE;EAC9E,OAAO;IACLV,MAAM,EAAE,IAAAP,eAAA,CAAA0B,KAAK,EAACnB,MAAM,EAAEL,KAAK,CAAC;IAC5ByB,GAAG,EAAEP,QAAQ,CAACH,QAAQ;GACvB;AACH;AAVAC,OAAA,CAAAC,YAAA,GAAAA,YAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}