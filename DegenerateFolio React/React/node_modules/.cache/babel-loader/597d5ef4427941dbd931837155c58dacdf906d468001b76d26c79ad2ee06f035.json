{"ast":null,"code":"import { PRECISION } from \"@pixi/constants\";\nfunction setPrecision(src, requestedPrecision, maxSupportedPrecision) {\n  if (src.substring(0, 9) !== \"precision\") {\n    let precision = requestedPrecision;\n    return requestedPrecision === PRECISION.HIGH && maxSupportedPrecision !== PRECISION.HIGH && (precision = PRECISION.MEDIUM), `precision ${precision} float;\n${src}`;\n  } else if (maxSupportedPrecision !== PRECISION.HIGH && src.substring(0, 15) === \"precision highp\") return src.replace(\"precision highp\", \"precision mediump\");\n  return src;\n}\nexport { setPrecision };","map":{"version":3,"names":["setPrecision","src","requestedPrecision","maxSupportedPrecision","substring","precision","PRECISION","HIGH","MEDIUM","replace"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/shader/utils/setPrecision.ts"],"sourcesContent":["import { PRECISION } from '@pixi/constants';\n\n/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n * @private\n * @param {string} src - The shader source\n * @param {PIXI.PRECISION} requestedPrecision - The request float precision of the shader.\n * @param {PIXI.PRECISION} maxSupportedPrecision - The maximum precision the shader supports.\n * @returns {string} modified shader source\n */\nexport function setPrecision(src: string, requestedPrecision: PRECISION, maxSupportedPrecision: PRECISION): string\n{\n    if (src.substring(0, 9) !== 'precision')\n    {\n        // no precision supplied, so PixiJS will add the requested level.\n        let precision = requestedPrecision;\n\n        // If highp is requested but not supported, downgrade precision to a level all devices support.\n        if (requestedPrecision === PRECISION.HIGH && maxSupportedPrecision !== PRECISION.HIGH)\n        {\n            precision = PRECISION.MEDIUM;\n        }\n\n        return `precision ${precision} float;\\n${src}`;\n    }\n    else if (maxSupportedPrecision !== PRECISION.HIGH && src.substring(0, 15) === 'precision highp')\n    {\n        // precision was supplied, but at a level this device does not support, so downgrading to mediump.\n        return src.replace('precision highp', 'precision mediump');\n    }\n\n    return src;\n}\n"],"mappings":";AAWgB,SAAAA,aAAaC,GAAA,EAAaC,kBAAA,EAA+BC,qBAAA,EACzE;EACI,IAAIF,GAAA,CAAIG,SAAA,CAAU,GAAG,CAAC,MAAM,aAC5B;IAEI,IAAIC,SAAA,GAAYH,kBAAA;IAGZ,OAAAA,kBAAA,KAAuBI,SAAA,CAAUC,IAAA,IAAQJ,qBAAA,KAA0BG,SAAA,CAAUC,IAAA,KAE7EF,SAAA,GAAYC,SAAA,CAAUE,MAAA,GAGnB,aAAaH,SAAS;AAAA,EAAYJ,GAAG;EAAA,WAEvCE,qBAAA,KAA0BG,SAAA,CAAUC,IAAA,IAAQN,GAAA,CAAIG,SAAA,CAAU,GAAG,EAAE,MAAM,mBAGnE,OAAAH,GAAA,CAAIQ,OAAA,CAAQ,mBAAmB,mBAAmB;EAGtD,OAAAR,GAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}