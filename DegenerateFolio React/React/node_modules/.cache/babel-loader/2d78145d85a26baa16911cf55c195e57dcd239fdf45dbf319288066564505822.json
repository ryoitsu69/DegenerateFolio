{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtendedSecp256k1Signature = exports.Secp256k1Signature = void 0;\nfunction trimLeadingNullBytes(inData) {\n  let numberOfLeadingNullBytes = 0;\n  for (const byte of inData) {\n    if (byte === 0x00) {\n      numberOfLeadingNullBytes++;\n    } else {\n      break;\n    }\n  }\n  return inData.slice(numberOfLeadingNullBytes);\n}\nconst derTagInteger = 0x02;\nclass Secp256k1Signature {\n  /**\n   * Takes the pair of integers (r, s) as 2x32 byte of binary data.\n   *\n   * Note: This is the format Cosmos SDK uses natively.\n   *\n   * @param data a 64 byte value containing integers r and s.\n   */\n  static fromFixedLength(data) {\n    if (data.length !== 64) {\n      throw new Error(`Got invalid data length: ${data.length}. Expected 2x 32 bytes for the pair (r, s)`);\n    }\n    return new Secp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)));\n  }\n  static fromDer(data) {\n    let pos = 0;\n    if (data[pos++] !== 0x30) {\n      throw new Error(\"Prefix 0x30 expected\");\n    }\n    const bodyLength = data[pos++];\n    if (data.length - pos !== bodyLength) {\n      throw new Error(\"Data length mismatch detected\");\n    }\n    // r\n    const rTag = data[pos++];\n    if (rTag !== derTagInteger) {\n      throw new Error(\"INTEGER tag expected\");\n    }\n    const rLength = data[pos++];\n    if (rLength >= 0x80) {\n      throw new Error(\"Decoding length values above 127 not supported\");\n    }\n    const rData = data.slice(pos, pos + rLength);\n    pos += rLength;\n    // s\n    const sTag = data[pos++];\n    if (sTag !== derTagInteger) {\n      throw new Error(\"INTEGER tag expected\");\n    }\n    const sLength = data[pos++];\n    if (sLength >= 0x80) {\n      throw new Error(\"Decoding length values above 127 not supported\");\n    }\n    const sData = data.slice(pos, pos + sLength);\n    pos += sLength;\n    return new Secp256k1Signature(\n    // r/s data can contain leading 0 bytes to express integers being non-negative in DER\n    trimLeadingNullBytes(rData), trimLeadingNullBytes(sData));\n  }\n  constructor(r, s) {\n    if (r.length > 32 || r.length === 0 || r[0] === 0x00) {\n      throw new Error(\"Unsigned integer r must be encoded as unpadded big endian.\");\n    }\n    if (s.length > 32 || s.length === 0 || s[0] === 0x00) {\n      throw new Error(\"Unsigned integer s must be encoded as unpadded big endian.\");\n    }\n    this.data = {\n      r: r,\n      s: s\n    };\n  }\n  r(length) {\n    if (length === undefined) {\n      return this.data.r;\n    } else {\n      const paddingLength = length - this.data.r.length;\n      if (paddingLength < 0) {\n        throw new Error(\"Length too small to hold parameter r\");\n      }\n      const padding = new Uint8Array(paddingLength);\n      return new Uint8Array([...padding, ...this.data.r]);\n    }\n  }\n  s(length) {\n    if (length === undefined) {\n      return this.data.s;\n    } else {\n      const paddingLength = length - this.data.s.length;\n      if (paddingLength < 0) {\n        throw new Error(\"Length too small to hold parameter s\");\n      }\n      const padding = new Uint8Array(paddingLength);\n      return new Uint8Array([...padding, ...this.data.s]);\n    }\n  }\n  toFixedLength() {\n    return new Uint8Array([...this.r(32), ...this.s(32)]);\n  }\n  toDer() {\n    // DER supports negative integers but our data is unsigned. Thus we need to prepend\n    // a leading 0 byte when the higest bit is set to differentiate nagative values\n    const rEncoded = this.data.r[0] >= 0x80 ? new Uint8Array([0, ...this.data.r]) : this.data.r;\n    const sEncoded = this.data.s[0] >= 0x80 ? new Uint8Array([0, ...this.data.s]) : this.data.s;\n    const rLength = rEncoded.length;\n    const sLength = sEncoded.length;\n    const data = new Uint8Array([derTagInteger, rLength, ...rEncoded, derTagInteger, sLength, ...sEncoded]);\n    return new Uint8Array([0x30, data.length, ...data]);\n  }\n}\nexports.Secp256k1Signature = Secp256k1Signature;\n/**\n * A Secp256k1Signature plus the recovery parameter\n */\nclass ExtendedSecp256k1Signature extends Secp256k1Signature {\n  /**\n   * Decode extended signature from the simple fixed length encoding\n   * described in toFixedLength().\n   */\n  static fromFixedLength(data) {\n    if (data.length !== 65) {\n      throw new Error(`Got invalid data length ${data.length}. Expected 32 + 32 + 1`);\n    }\n    return new ExtendedSecp256k1Signature(trimLeadingNullBytes(data.slice(0, 32)), trimLeadingNullBytes(data.slice(32, 64)), data[64]);\n  }\n  constructor(r, s, recovery) {\n    super(r, s);\n    if (!Number.isInteger(recovery)) {\n      throw new Error(\"The recovery parameter must be an integer.\");\n    }\n    if (recovery < 0 || recovery > 4) {\n      throw new Error(\"The recovery parameter must be one of 0, 1, 2, 3.\");\n    }\n    this.recovery = recovery;\n  }\n  /**\n   * A simple custom encoding that encodes the extended signature as\n   * r (32 bytes) | s (32 bytes) | recovery param (1 byte)\n   * where | denotes concatenation of bonary data.\n   */\n  toFixedLength() {\n    return new Uint8Array([...this.r(32), ...this.s(32), this.recovery]);\n  }\n}\nexports.ExtendedSecp256k1Signature = ExtendedSecp256k1Signature;","map":{"version":3,"names":["trimLeadingNullBytes","inData","numberOfLeadingNullBytes","byte","slice","derTagInteger","Secp256k1Signature","fromFixedLength","data","length","Error","fromDer","pos","bodyLength","rTag","rLength","rData","sTag","sLength","sData","constructor","r","s","undefined","paddingLength","padding","Uint8Array","toFixedLength","toDer","rEncoded","sEncoded","exports","ExtendedSecp256k1Signature","recovery","Number","isInteger"],"sources":["../src/secp256k1signature.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}