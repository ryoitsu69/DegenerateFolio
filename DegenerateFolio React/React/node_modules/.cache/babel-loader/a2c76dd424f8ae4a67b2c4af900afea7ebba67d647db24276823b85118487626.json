{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCoins = exports.parseCoins = exports.coins = exports.coin = void 0;\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Creates a coin.\n *\n * If your values do not exceed the safe integer range of JS numbers (53 bit),\n * you can use the number type here. This is the case for all typical Cosmos SDK\n * chains that use the default 6 decimals.\n *\n * In case you need to supportr larger values, use unsigned integer strings instead.\n */\nfunction coin(amount, denom) {\n  let outAmount;\n  if (typeof amount === \"number\") {\n    try {\n      outAmount = new math_1.Uint53(amount).toString();\n    } catch (_err) {\n      throw new Error(\"Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.\");\n    }\n  } else {\n    if (!amount.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid unsigned integer string format\");\n    }\n    outAmount = amount.replace(/^0*/, \"\") || \"0\";\n  }\n  return {\n    amount: outAmount,\n    denom: denom\n  };\n}\nexports.coin = coin;\n/**\n * Creates a list of coins with one element.\n */\nfunction coins(amount, denom) {\n  return [coin(amount, denom)];\n}\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * Starting with CosmJS 0.32.3, the following imports are all synonym and support\n * a variety of denom types such as IBC denoms or tokenfactory. If you need to\n * restrict the denom to something very minimal, this needs to be implemented\n * separately in the caller.\n *\n * ```\n * import { parseCoins } from \"@cosmjs/proto-signing\";\n * // equals\n * import { parseCoins } from \"@cosmjs/stargate\";\n * // equals\n * import { parseCoins } from \"@cosmjs/amino\";\n * ```\n *\n * This function is not made for supporting decimal amounts and does not support\n * parsing gas prices.\n */\nfunction parseCoins(input) {\n  return input.replace(/\\s/g, \"\").split(\",\").filter(Boolean).map(part => {\n    // Denom regex from Stargate (https://github.com/cosmos/cosmos-sdk/blob/v0.42.7/types/coin.go#L599-L601)\n    const match = part.match(/^([0-9]+)([a-zA-Z][a-zA-Z0-9/]{2,127})$/);\n    if (!match) throw new Error(\"Got an invalid coin string\");\n    return {\n      amount: match[1].replace(/^0+/, \"\") || \"0\",\n      denom: match[2]\n    };\n  });\n}\nexports.parseCoins = parseCoins;\n/**\n * Function to sum up coins with type Coin\n */\nfunction addCoins(lhs, rhs) {\n  if (lhs.denom !== rhs.denom) throw new Error(\"Trying to add two coins with different denoms\");\n  return {\n    amount: math_1.Decimal.fromAtomics(lhs.amount, 0).plus(math_1.Decimal.fromAtomics(rhs.amount, 0)).atomics,\n    denom: lhs.denom\n  };\n}\nexports.addCoins = addCoins;","map":{"version":3,"names":["math_1","require","coin","amount","denom","outAmount","Uint53","toString","_err","Error","match","replace","exports","coins","parseCoins","input","split","filter","Boolean","map","part","addCoins","lhs","rhs","Decimal","fromAtomics","plus","atomics"],"sources":["../src/coins.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AAOA;;;;;;;;;AASA,SAAgBC,IAAIA,CAACC,MAAuB,EAAEC,KAAa;EACzD,IAAIC,SAAiB;EACrB,IAAI,OAAOF,MAAM,KAAK,QAAQ,EAAE;IAC9B,IAAI;MACFE,SAAS,GAAG,IAAIL,MAAA,CAAAM,MAAM,CAACH,MAAM,CAAC,CAACI,QAAQ,EAAE;KAC1C,CAAC,OAAOC,IAAI,EAAE;MACb,MAAM,IAAIC,KAAK,CACb,gHAAgH,CACjH;;GAEJ,MAAM;IACL,IAAI,CAACN,MAAM,CAACO,KAAK,CAAC,UAAU,CAAC,EAAE;MAC7B,MAAM,IAAID,KAAK,CAAC,wCAAwC,CAAC;;IAE3DJ,SAAS,GAAGF,MAAM,CAACQ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG;;EAE9C,OAAO;IACLR,MAAM,EAAEE,SAAS;IACjBD,KAAK,EAAEA;GACR;AACH;AApBAQ,OAAA,CAAAV,IAAA,GAAAA,IAAA;AAsBA;;;AAGA,SAAgBW,KAAKA,CAACV,MAAuB,EAAEC,KAAa;EAC1D,OAAO,CAACF,IAAI,CAACC,MAAM,EAAEC,KAAK,CAAC,CAAC;AAC9B;AAFAQ,OAAA,CAAAC,KAAA,GAAAA,KAAA;AAIA;;;;;;;;;;;;;;;;;;;AAmBA,SAAgBC,UAAUA,CAACC,KAAa;EACtC,OAAOA,KAAK,CACTJ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBK,KAAK,CAAC,GAAG,CAAC,CACVC,MAAM,CAACC,OAAO,CAAC,CACfC,GAAG,CAAEC,IAAI,IAAI;IACZ;IACA,MAAMV,KAAK,GAAGU,IAAI,CAACV,KAAK,CAAC,yCAAyC,CAAC;IACnE,IAAI,CAACA,KAAK,EAAE,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;IACzD,OAAO;MACLN,MAAM,EAAEO,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,GAAG;MAC1CP,KAAK,EAAEM,KAAK,CAAC,CAAC;KACf;EACH,CAAC,CAAC;AACN;AAdAE,OAAA,CAAAE,UAAA,GAAAA,UAAA;AAgBA;;;AAGA,SAAgBO,QAAQA,CAACC,GAAS,EAAEC,GAAS;EAC3C,IAAID,GAAG,CAAClB,KAAK,KAAKmB,GAAG,CAACnB,KAAK,EAAE,MAAM,IAAIK,KAAK,CAAC,+CAA+C,CAAC;EAC7F,OAAO;IACLN,MAAM,EAAEH,MAAA,CAAAwB,OAAO,CAACC,WAAW,CAACH,GAAG,CAACnB,MAAM,EAAE,CAAC,CAAC,CAACuB,IAAI,CAAC1B,MAAA,CAAAwB,OAAO,CAACC,WAAW,CAACF,GAAG,CAACpB,MAAM,EAAE,CAAC,CAAC,CAAC,CAACwB,OAAO;IAC3FvB,KAAK,EAAEkB,GAAG,CAAClB;GACZ;AACH;AANAQ,OAAA,CAAAS,QAAA,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}