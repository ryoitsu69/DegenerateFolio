{"ast":null,"code":"import { xglobal } from '@polkadot/x-global';\nimport { formatDate } from './format/formatDate.js';\nimport { isBn } from './is/bn.js';\nimport { isBuffer } from './is/buffer.js';\nimport { isFunction } from './is/function.js';\nimport { isObject } from './is/object.js';\nimport { isU8a } from './is/u8a.js';\nimport { u8aToHex } from './u8a/toHex.js';\nimport { u8aToU8a } from './u8a/toU8a.js';\nimport { noop } from './noop.js';\nconst logTo = {\n  debug: 'log',\n  error: 'error',\n  log: 'log',\n  warn: 'warn'\n};\nfunction formatOther(value) {\n  if (value && isObject(value) && value.constructor === Object) {\n    const result = {};\n    for (const [k, v] of Object.entries(value)) {\n      result[k] = loggerFormat(v);\n    }\n    return result;\n  }\n  return value;\n}\nexport function loggerFormat(value) {\n  if (Array.isArray(value)) {\n    return value.map(loggerFormat);\n  } else if (isBn(value)) {\n    return value.toString();\n  } else if (isU8a(value) || isBuffer(value)) {\n    return u8aToHex(u8aToU8a(value));\n  }\n  return formatOther(value);\n}\nfunction formatWithLength(maxLength) {\n  return v => {\n    if (maxLength <= 0) {\n      return v;\n    }\n    const r = \"\".concat(v);\n    return r.length < maxLength ? v : \"\".concat(r.substring(0, maxLength), \" ...\");\n  };\n}\nfunction apply(log, type, values) {\n  let maxSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n  if (values.length === 1 && isFunction(values[0])) {\n    const fnResult = values[0]();\n    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);\n  }\n  console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));\n}\nfunction isDebugOn(e, type) {\n  return !!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)));\n}\nfunction isDebugOff(e, type) {\n  return !!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)));\n}\nfunction getDebugFlag(env, type) {\n  let flag = false;\n  for (const e of env) {\n    if (isDebugOn(e, type)) {\n      flag = true;\n    } else if (isDebugOff(e, type)) {\n      flag = false;\n    }\n  }\n  return flag;\n}\nfunction parseEnv(type) {\n  var _xglobal$process, _xglobal$process2;\n  const maxSize = parseInt(((_xglobal$process = xglobal.process) === null || _xglobal$process === void 0 || (_xglobal$process = _xglobal$process.env) === null || _xglobal$process === void 0 ? void 0 : _xglobal$process['DEBUG_MAX']) || '-1', 10);\n  return [getDebugFlag((((_xglobal$process2 = xglobal.process) === null || _xglobal$process2 === void 0 || (_xglobal$process2 = _xglobal$process2.env) === null || _xglobal$process2 === void 0 ? void 0 : _xglobal$process2['DEBUG']) || '').toLowerCase().split(','), type), isNaN(maxSize) ? -1 : maxSize];\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * import { logger } from '@polkadot/util';\n *\n * const l = logger('test');\n * ```\n */\nexport function logger(origin) {\n  const type = \"\".concat(origin.toUpperCase(), \":\").padStart(16);\n  const [isDebug, maxSize] = parseEnv(origin.toLowerCase());\n  return {\n    debug: isDebug ? function () {\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n      return apply('debug', type, values, maxSize);\n    } : noop,\n    error: function () {\n      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        values[_key2] = arguments[_key2];\n      }\n      return apply('error', type, values);\n    },\n    log: function () {\n      for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        values[_key3] = arguments[_key3];\n      }\n      return apply('log', type, values);\n    },\n    noop,\n    warn: function () {\n      for (var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        values[_key4] = arguments[_key4];\n      }\n      return apply('warn', type, values);\n    }\n  };\n}","map":{"version":3,"names":["xglobal","formatDate","isBn","isBuffer","isFunction","isObject","isU8a","u8aToHex","u8aToU8a","noop","logTo","debug","error","log","warn","formatOther","value","constructor","Object","result","k","v","entries","loggerFormat","Array","isArray","map","toString","formatWithLength","maxLength","r","concat","length","substring","apply","type","values","maxSize","arguments","undefined","fnResult","console","Date","isDebugOn","e","endsWith","startsWith","slice","isDebugOff","getDebugFlag","env","flag","parseEnv","_xglobal$process","_xglobal$process2","parseInt","process","toLowerCase","split","isNaN","logger","origin","toUpperCase","padStart","isDebug","_len","_key","_len2","_key2","_len3","_key3","_len4","_key4"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/logger.js"],"sourcesContent":["import { xglobal } from '@polkadot/x-global';\nimport { formatDate } from './format/formatDate.js';\nimport { isBn } from './is/bn.js';\nimport { isBuffer } from './is/buffer.js';\nimport { isFunction } from './is/function.js';\nimport { isObject } from './is/object.js';\nimport { isU8a } from './is/u8a.js';\nimport { u8aToHex } from './u8a/toHex.js';\nimport { u8aToU8a } from './u8a/toU8a.js';\nimport { noop } from './noop.js';\nconst logTo = {\n    debug: 'log',\n    error: 'error',\n    log: 'log',\n    warn: 'warn'\n};\nfunction formatOther(value) {\n    if (value && isObject(value) && value.constructor === Object) {\n        const result = {};\n        for (const [k, v] of Object.entries(value)) {\n            result[k] = loggerFormat(v);\n        }\n        return result;\n    }\n    return value;\n}\nexport function loggerFormat(value) {\n    if (Array.isArray(value)) {\n        return value.map(loggerFormat);\n    }\n    else if (isBn(value)) {\n        return value.toString();\n    }\n    else if (isU8a(value) || isBuffer(value)) {\n        return u8aToHex(u8aToU8a(value));\n    }\n    return formatOther(value);\n}\nfunction formatWithLength(maxLength) {\n    return (v) => {\n        if (maxLength <= 0) {\n            return v;\n        }\n        const r = `${v}`;\n        return r.length < maxLength\n            ? v\n            : `${r.substring(0, maxLength)} ...`;\n    };\n}\nfunction apply(log, type, values, maxSize = -1) {\n    if (values.length === 1 && isFunction(values[0])) {\n        const fnResult = values[0]();\n        return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);\n    }\n    console[logTo[log]](formatDate(new Date()), type, ...values\n        .map(loggerFormat)\n        .map(formatWithLength(maxSize)));\n}\nfunction isDebugOn(e, type) {\n    return !!e && (e === '*' ||\n        type === e ||\n        (e.endsWith('*') &&\n            type.startsWith(e.slice(0, -1))));\n}\nfunction isDebugOff(e, type) {\n    return !!e && (e.startsWith('-') &&\n        (type === e.slice(1) ||\n            (e.endsWith('*') &&\n                type.startsWith(e.slice(1, -1)))));\n}\nfunction getDebugFlag(env, type) {\n    let flag = false;\n    for (const e of env) {\n        if (isDebugOn(e, type)) {\n            flag = true;\n        }\n        else if (isDebugOff(e, type)) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nfunction parseEnv(type) {\n    const maxSize = parseInt(xglobal.process?.env?.['DEBUG_MAX'] || '-1', 10);\n    return [\n        getDebugFlag((xglobal.process?.env?.['DEBUG'] || '').toLowerCase().split(','), type),\n        isNaN(maxSize)\n            ? -1\n            : maxSize\n    ];\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * import { logger } from '@polkadot/util';\n *\n * const l = logger('test');\n * ```\n */\nexport function logger(origin) {\n    const type = `${origin.toUpperCase()}:`.padStart(16);\n    const [isDebug, maxSize] = parseEnv(origin.toLowerCase());\n    return {\n        debug: isDebug\n            ? (...values) => apply('debug', type, values, maxSize)\n            : noop,\n        error: (...values) => apply('error', type, values),\n        log: (...values) => apply('log', type, values),\n        noop,\n        warn: (...values) => apply('warn', type, values)\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}