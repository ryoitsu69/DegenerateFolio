{"ast":null,"code":"import { bytesRegex, execTyped, integerRegex, isTupleRegex } from \"./chunk-WP7KDV47.mjs\";\nimport { __publicField } from \"./chunk-NHABU752.mjs\";\n\n// package.json\nvar name = \"abitype\";\nvar version = \"0.7.1\";\n\n// src/errors.ts\nvar BaseError = class extends Error {\n  constructor(shortMessage) {\n    var _args$cause;\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const details = args.cause instanceof BaseError ? args.cause.details : (_args$cause = args.cause) !== null && _args$cause !== void 0 && _args$cause.message ? args.cause.message : args.details;\n    const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;\n    const message = [shortMessage || \"An error occurred.\", \"\", ...(args.metaMessages ? [...args.metaMessages, \"\"] : []), ...(docsPath ? [\"Docs: https://abitype.dev\".concat(docsPath)] : []), ...(details ? [\"Details: \".concat(details)] : []), \"Version: \".concat(name, \"@\").concat(version)].join(\"\\n\");\n    super(message);\n    __publicField(this, \"details\");\n    __publicField(this, \"docsPath\");\n    __publicField(this, \"metaMessages\");\n    __publicField(this, \"shortMessage\");\n    __publicField(this, \"name\", \"AbiTypeError\");\n    if (args.cause) this.cause = args.cause;\n    this.details = details;\n    this.docsPath = docsPath;\n    this.metaMessages = args.metaMessages;\n    this.shortMessage = shortMessage;\n  }\n};\n\n// src/narrow.ts\nfunction narrow(value) {\n  return value;\n}\n\n// src/human-readable/runtime/signatures.ts\nvar errorSignatureRegex = /^error (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isErrorSignature(signature) {\n  return errorSignatureRegex.test(signature);\n}\nfunction execErrorSignature(signature) {\n  return execTyped(errorSignatureRegex, signature);\n}\nvar eventSignatureRegex = /^event (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isEventSignature(signature) {\n  return eventSignatureRegex.test(signature);\n}\nfunction execEventSignature(signature) {\n  return execTyped(eventSignatureRegex, signature);\n}\nvar functionSignatureRegex = /^function (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns \\((?<returns>.*?)\\))?$/;\nfunction isFunctionSignature(signature) {\n  return functionSignatureRegex.test(signature);\n}\nfunction execFunctionSignature(signature) {\n  return execTyped(functionSignatureRegex, signature);\n}\nvar structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \\{(?<properties>.*?)\\}$/;\nfunction isStructSignature(signature) {\n  return structSignatureRegex.test(signature);\n}\nfunction execStructSignature(signature) {\n  return execTyped(structSignatureRegex, signature);\n}\nvar constructorSignatureRegex = /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isConstructorSignature(signature) {\n  return constructorSignatureRegex.test(signature);\n}\nfunction execConstructorSignature(signature) {\n  return execTyped(constructorSignatureRegex, signature);\n}\nvar fallbackSignatureRegex = /^fallback\\(\\)$/;\nfunction isFallbackSignature(signature) {\n  return fallbackSignatureRegex.test(signature);\n}\nvar receiveSignatureRegex = /^receive\\(\\) external payable$/;\nfunction isReceiveSignature(signature) {\n  return receiveSignatureRegex.test(signature);\n}\nvar modifiers = /* @__PURE__ */new Set([\"memory\", \"indexed\", \"storage\", \"calldata\"]);\nvar eventModifiers = /* @__PURE__ */new Set([\"indexed\"]);\nvar functionModifiers = /* @__PURE__ */new Set([\"calldata\", \"memory\", \"storage\"]);\n\n// src/human-readable/runtime/cache.ts\nfunction getParameterCacheKey(param, type) {\n  if (type) return \"\".concat(type, \":\").concat(param);\n  return param;\n}\nvar parameterCache = /* @__PURE__ */new Map([\n// Unnamed\n[\"address\", {\n  type: \"address\"\n}], [\"bool\", {\n  type: \"bool\"\n}], [\"bytes\", {\n  type: \"bytes\"\n}], [\"bytes32\", {\n  type: \"bytes32\"\n}], [\"int\", {\n  type: \"int256\"\n}], [\"int256\", {\n  type: \"int256\"\n}], [\"string\", {\n  type: \"string\"\n}], [\"uint\", {\n  type: \"uint256\"\n}], [\"uint8\", {\n  type: \"uint8\"\n}], [\"uint16\", {\n  type: \"uint16\"\n}], [\"uint24\", {\n  type: \"uint24\"\n}], [\"uint32\", {\n  type: \"uint32\"\n}], [\"uint64\", {\n  type: \"uint64\"\n}], [\"uint96\", {\n  type: \"uint96\"\n}], [\"uint112\", {\n  type: \"uint112\"\n}], [\"uint160\", {\n  type: \"uint160\"\n}], [\"uint192\", {\n  type: \"uint192\"\n}], [\"uint256\", {\n  type: \"uint256\"\n}],\n// Named\n[\"address owner\", {\n  type: \"address\",\n  name: \"owner\"\n}], [\"address to\", {\n  type: \"address\",\n  name: \"to\"\n}], [\"bool approved\", {\n  type: \"bool\",\n  name: \"approved\"\n}], [\"bytes _data\", {\n  type: \"bytes\",\n  name: \"_data\"\n}], [\"bytes data\", {\n  type: \"bytes\",\n  name: \"data\"\n}], [\"bytes signature\", {\n  type: \"bytes\",\n  name: \"signature\"\n}], [\"bytes32 hash\", {\n  type: \"bytes32\",\n  name: \"hash\"\n}], [\"bytes32 r\", {\n  type: \"bytes32\",\n  name: \"r\"\n}], [\"bytes32 root\", {\n  type: \"bytes32\",\n  name: \"root\"\n}], [\"bytes32 s\", {\n  type: \"bytes32\",\n  name: \"s\"\n}], [\"string name\", {\n  type: \"string\",\n  name: \"name\"\n}], [\"string symbol\", {\n  type: \"string\",\n  name: \"symbol\"\n}], [\"string tokenURI\", {\n  type: \"string\",\n  name: \"tokenURI\"\n}], [\"uint tokenId\", {\n  type: \"uint256\",\n  name: \"tokenId\"\n}], [\"uint8 v\", {\n  type: \"uint8\",\n  name: \"v\"\n}], [\"uint256 balance\", {\n  type: \"uint256\",\n  name: \"balance\"\n}], [\"uint256 tokenId\", {\n  type: \"uint256\",\n  name: \"tokenId\"\n}], [\"uint256 value\", {\n  type: \"uint256\",\n  name: \"value\"\n}],\n// Indexed\n[\"event:address indexed from\", {\n  type: \"address\",\n  name: \"from\",\n  indexed: true\n}], [\"event:address indexed to\", {\n  type: \"address\",\n  name: \"to\",\n  indexed: true\n}], [\"event:uint indexed tokenId\", {\n  type: \"uint256\",\n  name: \"tokenId\",\n  indexed: true\n}], [\"event:uint256 indexed tokenId\", {\n  type: \"uint256\",\n  name: \"tokenId\",\n  indexed: true\n}]]);\n\n// src/human-readable/runtime/utils.ts\nfunction parseSignature(signature) {\n  let structs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (isFunctionSignature(signature)) {\n    var _match$stateMutabilit;\n    const match = execFunctionSignature(signature);\n    if (!match) throw new BaseError(\"Invalid function signature.\", {\n      details: signature\n    });\n    const inputParams = splitParameters(match.parameters);\n    const inputs = [];\n    const inputLength = inputParams.length;\n    for (let i = 0; i < inputLength; i++) {\n      inputs.push(parseAbiParameter(inputParams[i], {\n        modifiers: functionModifiers,\n        structs,\n        type: \"function\"\n      }));\n    }\n    const outputs = [];\n    if (match.returns) {\n      const outputParams = splitParameters(match.returns);\n      const outputLength = outputParams.length;\n      for (let i = 0; i < outputLength; i++) {\n        outputs.push(parseAbiParameter(outputParams[i], {\n          modifiers: functionModifiers,\n          structs,\n          type: \"function\"\n        }));\n      }\n    }\n    return {\n      name: match.name,\n      type: \"function\",\n      stateMutability: (_match$stateMutabilit = match.stateMutability) !== null && _match$stateMutabilit !== void 0 ? _match$stateMutabilit : \"nonpayable\",\n      inputs,\n      outputs\n    };\n  }\n  if (isEventSignature(signature)) {\n    const match = execEventSignature(signature);\n    if (!match) throw new BaseError(\"Invalid event signature.\", {\n      details: signature\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], {\n        modifiers: eventModifiers,\n        structs,\n        type: \"event\"\n      }));\n    }\n    return {\n      name: match.name,\n      type: \"event\",\n      inputs: abiParameters\n    };\n  }\n  if (isErrorSignature(signature)) {\n    const match = execErrorSignature(signature);\n    if (!match) throw new BaseError(\"Invalid error signature.\", {\n      details: signature\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], {\n        structs,\n        type: \"error\"\n      }));\n    }\n    return {\n      name: match.name,\n      type: \"error\",\n      inputs: abiParameters\n    };\n  }\n  if (isConstructorSignature(signature)) {\n    var _match$stateMutabilit2;\n    const match = execConstructorSignature(signature);\n    if (!match) throw new BaseError(\"Invalid constructor signature.\", {\n      details: signature\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(params[i], {\n        structs,\n        type: \"constructor\"\n      }));\n    }\n    return {\n      type: \"constructor\",\n      stateMutability: (_match$stateMutabilit2 = match.stateMutability) !== null && _match$stateMutabilit2 !== void 0 ? _match$stateMutabilit2 : \"nonpayable\",\n      inputs: abiParameters\n    };\n  }\n  if (isFallbackSignature(signature)) return {\n    type: \"fallback\"\n  };\n  if (isReceiveSignature(signature)) return {\n    type: \"receive\",\n    stateMutability: \"payable\"\n  };\n  throw new BaseError(\"Unknown signature.\", {\n    details: signature\n  });\n}\nvar abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar dynamicIntegerRegex = /^u?int$/;\nfunction parseAbiParameter(param, options) {\n  var _options$structs, _match$array;\n  const parameterCacheKey = getParameterCacheKey(param, options === null || options === void 0 ? void 0 : options.type);\n  if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);\n  const isTuple = isTupleRegex.test(param);\n  const match = execTyped(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n  if (!match) throw new BaseError(\"Invalid ABI parameter.\", {\n    details: param\n  });\n  if (match.name && isSolidityKeyword(match.name)) throw new BaseError(\"Invalid ABI parameter.\", {\n    details: param,\n    metaMessages: [\"\\\"\".concat(match.name, \"\\\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html\")]\n  });\n  const name2 = match.name ? {\n    name: match.name\n  } : {};\n  const indexed = match.modifier === \"indexed\" ? {\n    indexed: true\n  } : {};\n  const structs = (_options$structs = options === null || options === void 0 ? void 0 : options.structs) !== null && _options$structs !== void 0 ? _options$structs : {};\n  let type;\n  let components = {};\n  if (isTuple) {\n    type = \"tuple\";\n    const params = splitParameters(match.type);\n    const components_ = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      components_.push(parseAbiParameter(params[i], {\n        structs\n      }));\n    }\n    components = {\n      components: components_\n    };\n  } else if (match.type in structs) {\n    type = \"tuple\";\n    components = {\n      components: structs[match.type]\n    };\n  } else if (dynamicIntegerRegex.test(match.type)) {\n    type = \"\".concat(match.type, \"256\");\n  } else {\n    type = match.type;\n    if (!((options === null || options === void 0 ? void 0 : options.type) === \"struct\") && !isSolidityType(type)) throw new BaseError(\"Unknown type.\", {\n      metaMessages: [\"Type \\\"\".concat(type, \"\\\" is not a valid ABI type.\")]\n    });\n  }\n  if (match.modifier) {\n    var _options$modifiers, _options$modifiers$ha;\n    if (!(options !== null && options !== void 0 && (_options$modifiers = options.modifiers) !== null && _options$modifiers !== void 0 && (_options$modifiers$ha = _options$modifiers.has) !== null && _options$modifiers$ha !== void 0 && _options$modifiers$ha.call(_options$modifiers, match.modifier))) throw new BaseError(\"Invalid ABI parameter.\", {\n      details: param,\n      metaMessages: [\"Modifier \\\"\".concat(match.modifier, \"\\\" not allowed\").concat(options !== null && options !== void 0 && options.type ? \" in \\\"\".concat(options.type, \"\\\" type\") : \"\", \".\")]\n    });\n    if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new BaseError(\"Invalid ABI parameter.\", {\n      details: param,\n      metaMessages: [\"Modifier \\\"\".concat(match.modifier, \"\\\" not allowed\").concat(options !== null && options !== void 0 && options.type ? \" in \\\"\".concat(options.type, \"\\\" type\") : \"\", \".\"), \"Data location can only be specified for array, struct, or mapping types, but \\\"\".concat(match.modifier, \"\\\" was given.\")]\n    });\n  }\n  const abiParameter = {\n    type: \"\".concat(type).concat((_match$array = match.array) !== null && _match$array !== void 0 ? _match$array : \"\"),\n    ...name2,\n    ...indexed,\n    ...components\n  };\n  parameterCache.set(parameterCacheKey, abiParameter);\n  return abiParameter;\n}\nfunction splitParameters(params) {\n  let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let current = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  let depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (params === \"\") {\n    if (current === \"\") return result;\n    if (depth !== 0) throw new BaseError(\"Unbalanced parentheses.\", {\n      metaMessages: [\"\\\"\".concat(current.trim(), \"\\\" has too many \").concat(depth > 0 ? \"opening\" : \"closing\", \" parentheses.\")],\n      details: \"Depth \\\"\".concat(depth, \"\\\"\")\n    });\n    return [...result, current.trim()];\n  }\n  const length = params.length;\n  for (let i = 0; i < length; i++) {\n    const char = params[i];\n    const tail = params.slice(i + 1);\n    switch (char) {\n      case \",\":\n        return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, \"\".concat(current).concat(char), depth);\n      case \"(\":\n        return splitParameters(tail, result, \"\".concat(current).concat(char), depth + 1);\n      case \")\":\n        return splitParameters(tail, result, \"\".concat(current).concat(char), depth - 1);\n      default:\n        return splitParameters(tail, result, \"\".concat(current).concat(char), depth);\n    }\n  }\n  return [];\n}\nfunction isSolidityType(type) {\n  return type === \"address\" || type === \"bool\" || type === \"function\" || type === \"string\" || bytesRegex.test(type) || integerRegex.test(type);\n}\nvar protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\nfunction isSolidityKeyword(name2) {\n  return name2 === \"address\" || name2 === \"bool\" || name2 === \"function\" || name2 === \"string\" || name2 === \"tuple\" || bytesRegex.test(name2) || integerRegex.test(name2) || protectedKeywordsRegex.test(name2);\n}\nfunction isValidDataLocation(type, isArray) {\n  return isArray || type === \"bytes\" || type === \"string\" || type === \"tuple\";\n}\n\n// src/human-readable/runtime/structs.ts\nfunction parseStructs(signatures) {\n  const shallowStructs = {};\n  const signaturesLength = signatures.length;\n  for (let i = 0; i < signaturesLength; i++) {\n    const signature = signatures[i];\n    if (!isStructSignature(signature)) continue;\n    const match = execStructSignature(signature);\n    if (!match) throw new BaseError(\"Invalid struct signature.\", {\n      details: signature\n    });\n    const properties = match.properties.split(\";\");\n    const components = [];\n    const propertiesLength = properties.length;\n    for (let k = 0; k < propertiesLength; k++) {\n      const property = properties[k];\n      const trimmed = property.trim();\n      if (!trimmed) continue;\n      const abiParameter = parseAbiParameter(trimmed, {\n        type: \"struct\"\n      });\n      components.push(abiParameter);\n    }\n    if (!components.length) throw new BaseError(\"Invalid struct signature.\", {\n      details: signature,\n      metaMessages: [\"No properties exist.\"]\n    });\n    shallowStructs[match.name] = components;\n  }\n  const resolvedStructs = {};\n  const entries = Object.entries(shallowStructs);\n  const entriesLength = entries.length;\n  for (let i = 0; i < entriesLength; i++) {\n    const [name2, parameters] = entries[i];\n    resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);\n  }\n  return resolvedStructs;\n}\nvar typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?$/;\nfunction resolveStructs(abiParameters, structs) {\n  let ancestors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : /* @__PURE__ */new Set();\n  const components = [];\n  const length = abiParameters.length;\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i];\n    const isTuple = isTupleRegex.test(abiParameter.type);\n    if (isTuple) components.push(abiParameter);else {\n      const match = execTyped(typeWithoutTupleRegex, abiParameter.type);\n      if (!(match !== null && match !== void 0 && match.type)) throw new BaseError(\"Invalid ABI parameter.\", {\n        details: JSON.stringify(abiParameter, null, 2),\n        metaMessages: [\"ABI parameter type is invalid.\"]\n      });\n      const {\n        array,\n        type\n      } = match;\n      if (type in structs) {\n        var _structs$type;\n        if (ancestors.has(type)) throw new BaseError(\"Circular reference detected.\", {\n          metaMessages: [\"Struct \\\"\".concat(type, \"\\\" is a circular reference.\")]\n        });\n        components.push({\n          ...abiParameter,\n          type: \"tuple\".concat(array !== null && array !== void 0 ? array : \"\"),\n          components: resolveStructs((_structs$type = structs[type]) !== null && _structs$type !== void 0 ? _structs$type : [], structs, /* @__PURE__ */new Set([...ancestors, type]))\n        });\n      } else {\n        if (isSolidityType(type)) components.push(abiParameter);else throw new BaseError(\"Unknown type.\", {\n          metaMessages: [\"Type \\\"\".concat(type, \"\\\" is not a valid ABI type. Perhaps you forgot to include a struct signature?\")]\n        });\n      }\n    }\n  }\n  return components;\n}\n\n// src/human-readable/parseAbi.ts\nfunction parseAbi(signatures) {\n  const structs = parseStructs(signatures);\n  const abi = [];\n  const length = signatures.length;\n  for (let i = 0; i < length; i++) {\n    const signature = signatures[i];\n    if (isStructSignature(signature)) continue;\n    abi.push(parseSignature(signature, structs));\n  }\n  return abi;\n}\n\n// src/human-readable/parseAbiItem.ts\nfunction parseAbiItem(signature) {\n  let abiItem;\n  if (typeof signature === \"string\") abiItem = parseSignature(signature);else {\n    const structs = parseStructs(signature);\n    const length = signature.length;\n    for (let i = 0; i < length; i++) {\n      const signature_ = signature[i];\n      if (isStructSignature(signature_)) continue;\n      abiItem = parseSignature(signature_, structs);\n      break;\n    }\n  }\n  if (!abiItem) throw new BaseError(\"Failed to parse ABI item.\", {\n    details: \"parseAbiItem(\".concat(JSON.stringify(signature, null, 2), \")\"),\n    docsPath: \"/api/human.html#parseabiitem-1\"\n  });\n  return abiItem;\n}\n\n// src/human-readable/parseAbiParameter.ts\nfunction parseAbiParameter2(param) {\n  let abiParameter;\n  if (typeof param === \"string\") abiParameter = parseAbiParameter(param, {\n    modifiers\n  });else {\n    const structs = parseStructs(param);\n    const length = param.length;\n    for (let i = 0; i < length; i++) {\n      const signature = param[i];\n      if (isStructSignature(signature)) continue;\n      abiParameter = parseAbiParameter(signature, {\n        modifiers,\n        structs\n      });\n      break;\n    }\n  }\n  if (!abiParameter) throw new BaseError(\"Failed to parse ABI parameter.\", {\n    details: \"parseAbiParameter(\".concat(JSON.stringify(param, null, 2), \")\"),\n    docsPath: \"/api/human.html#parseabiparameter-1\"\n  });\n  return abiParameter;\n}\n\n// src/human-readable/parseAbiParameters.ts\nfunction parseAbiParameters(params) {\n  const abiParameters = [];\n  if (typeof params === \"string\") {\n    const parameters = splitParameters(params);\n    const length = parameters.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(parameters[i], {\n        modifiers\n      }));\n    }\n  } else {\n    const structs = parseStructs(params);\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      const signature = params[i];\n      if (isStructSignature(signature)) continue;\n      const parameters = splitParameters(signature);\n      const length2 = parameters.length;\n      for (let k = 0; k < length2; k++) {\n        abiParameters.push(parseAbiParameter(parameters[k], {\n          modifiers,\n          structs\n        }));\n      }\n    }\n  }\n  if (abiParameters.length === 0) throw new BaseError(\"Failed to parse ABI parameters.\", {\n    details: \"parseAbiParameters(\".concat(JSON.stringify(params, null, 2), \")\"),\n    docsPath: \"/api/human.html#parseabiparameters-1\"\n  });\n  return abiParameters;\n}\nexport { BaseError, narrow, parseAbi, parseAbiItem, parseAbiParameter2 as parseAbiParameter, parseAbiParameters };","map":{"version":3,"names":["bytesRegex","execTyped","integerRegex","isTupleRegex","__publicField","name","version","BaseError","Error","constructor","shortMessage","_args$cause","args","arguments","length","undefined","details","cause","message","docsPath","metaMessages","concat","join","narrow","value","errorSignatureRegex","isErrorSignature","signature","test","execErrorSignature","eventSignatureRegex","isEventSignature","execEventSignature","functionSignatureRegex","isFunctionSignature","execFunctionSignature","structSignatureRegex","isStructSignature","execStructSignature","constructorSignatureRegex","isConstructorSignature","execConstructorSignature","fallbackSignatureRegex","isFallbackSignature","receiveSignatureRegex","isReceiveSignature","modifiers","Set","eventModifiers","functionModifiers","getParameterCacheKey","param","type","parameterCache","Map","indexed","parseSignature","structs","_match$stateMutabilit","match","inputParams","splitParameters","parameters","inputs","inputLength","i","push","parseAbiParameter","outputs","returns","outputParams","outputLength","stateMutability","params","abiParameters","_match$stateMutabilit2","abiParameterWithoutTupleRegex","abiParameterWithTupleRegex","dynamicIntegerRegex","options","_options$structs","_match$array","parameterCacheKey","has","get","isTuple","isSolidityKeyword","name2","modifier","components","components_","isSolidityType","_options$modifiers","_options$modifiers$ha","call","isValidDataLocation","array","abiParameter","set","result","current","depth","trim","char","tail","slice","protectedKeywordsRegex","isArray","parseStructs","signatures","shallowStructs","signaturesLength","properties","split","propertiesLength","k","property","trimmed","resolvedStructs","entries","Object","entriesLength","resolveStructs","typeWithoutTupleRegex","ancestors","JSON","stringify","_structs$type","parseAbi","abi","parseAbiItem","abiItem","signature_","parseAbiParameter2","parseAbiParameters","length2"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/abitype/dist/index.mjs"],"sourcesContent":["import {\n  bytesRegex,\n  execTyped,\n  integerRegex,\n  isTupleRegex\n} from \"./chunk-WP7KDV47.mjs\";\nimport {\n  __publicField\n} from \"./chunk-NHABU752.mjs\";\n\n// package.json\nvar name = \"abitype\";\nvar version = \"0.7.1\";\n\n// src/errors.ts\nvar BaseError = class extends Error {\n  constructor(shortMessage, args = {}) {\n    const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;\n    const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;\n    const message = [\n      shortMessage || \"An error occurred.\",\n      \"\",\n      ...args.metaMessages ? [...args.metaMessages, \"\"] : [],\n      ...docsPath ? [`Docs: https://abitype.dev${docsPath}`] : [],\n      ...details ? [`Details: ${details}`] : [],\n      `Version: ${name}@${version}`\n    ].join(\"\\n\");\n    super(message);\n    __publicField(this, \"details\");\n    __publicField(this, \"docsPath\");\n    __publicField(this, \"metaMessages\");\n    __publicField(this, \"shortMessage\");\n    __publicField(this, \"name\", \"AbiTypeError\");\n    if (args.cause)\n      this.cause = args.cause;\n    this.details = details;\n    this.docsPath = docsPath;\n    this.metaMessages = args.metaMessages;\n    this.shortMessage = shortMessage;\n  }\n};\n\n// src/narrow.ts\nfunction narrow(value) {\n  return value;\n}\n\n// src/human-readable/runtime/signatures.ts\nvar errorSignatureRegex = /^error (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isErrorSignature(signature) {\n  return errorSignatureRegex.test(signature);\n}\nfunction execErrorSignature(signature) {\n  return execTyped(\n    errorSignatureRegex,\n    signature\n  );\n}\nvar eventSignatureRegex = /^event (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)$/;\nfunction isEventSignature(signature) {\n  return eventSignatureRegex.test(signature);\n}\nfunction execEventSignature(signature) {\n  return execTyped(\n    eventSignatureRegex,\n    signature\n  );\n}\nvar functionSignatureRegex = /^function (?<name>[a-zA-Z0-9_]+)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns \\((?<returns>.*?)\\))?$/;\nfunction isFunctionSignature(signature) {\n  return functionSignatureRegex.test(signature);\n}\nfunction execFunctionSignature(signature) {\n  return execTyped(functionSignatureRegex, signature);\n}\nvar structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \\{(?<properties>.*?)\\}$/;\nfunction isStructSignature(signature) {\n  return structSignatureRegex.test(signature);\n}\nfunction execStructSignature(signature) {\n  return execTyped(\n    structSignatureRegex,\n    signature\n  );\n}\nvar constructorSignatureRegex = /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isConstructorSignature(signature) {\n  return constructorSignatureRegex.test(signature);\n}\nfunction execConstructorSignature(signature) {\n  return execTyped(constructorSignatureRegex, signature);\n}\nvar fallbackSignatureRegex = /^fallback\\(\\)$/;\nfunction isFallbackSignature(signature) {\n  return fallbackSignatureRegex.test(signature);\n}\nvar receiveSignatureRegex = /^receive\\(\\) external payable$/;\nfunction isReceiveSignature(signature) {\n  return receiveSignatureRegex.test(signature);\n}\nvar modifiers = /* @__PURE__ */ new Set([\n  \"memory\",\n  \"indexed\",\n  \"storage\",\n  \"calldata\"\n]);\nvar eventModifiers = /* @__PURE__ */ new Set([\"indexed\"]);\nvar functionModifiers = /* @__PURE__ */ new Set([\n  \"calldata\",\n  \"memory\",\n  \"storage\"\n]);\n\n// src/human-readable/runtime/cache.ts\nfunction getParameterCacheKey(param, type) {\n  if (type)\n    return `${type}:${param}`;\n  return param;\n}\nvar parameterCache = /* @__PURE__ */ new Map([\n  // Unnamed\n  [\"address\", { type: \"address\" }],\n  [\"bool\", { type: \"bool\" }],\n  [\"bytes\", { type: \"bytes\" }],\n  [\"bytes32\", { type: \"bytes32\" }],\n  [\"int\", { type: \"int256\" }],\n  [\"int256\", { type: \"int256\" }],\n  [\"string\", { type: \"string\" }],\n  [\"uint\", { type: \"uint256\" }],\n  [\"uint8\", { type: \"uint8\" }],\n  [\"uint16\", { type: \"uint16\" }],\n  [\"uint24\", { type: \"uint24\" }],\n  [\"uint32\", { type: \"uint32\" }],\n  [\"uint64\", { type: \"uint64\" }],\n  [\"uint96\", { type: \"uint96\" }],\n  [\"uint112\", { type: \"uint112\" }],\n  [\"uint160\", { type: \"uint160\" }],\n  [\"uint192\", { type: \"uint192\" }],\n  [\"uint256\", { type: \"uint256\" }],\n  // Named\n  [\"address owner\", { type: \"address\", name: \"owner\" }],\n  [\"address to\", { type: \"address\", name: \"to\" }],\n  [\"bool approved\", { type: \"bool\", name: \"approved\" }],\n  [\"bytes _data\", { type: \"bytes\", name: \"_data\" }],\n  [\"bytes data\", { type: \"bytes\", name: \"data\" }],\n  [\"bytes signature\", { type: \"bytes\", name: \"signature\" }],\n  [\"bytes32 hash\", { type: \"bytes32\", name: \"hash\" }],\n  [\"bytes32 r\", { type: \"bytes32\", name: \"r\" }],\n  [\"bytes32 root\", { type: \"bytes32\", name: \"root\" }],\n  [\"bytes32 s\", { type: \"bytes32\", name: \"s\" }],\n  [\"string name\", { type: \"string\", name: \"name\" }],\n  [\"string symbol\", { type: \"string\", name: \"symbol\" }],\n  [\"string tokenURI\", { type: \"string\", name: \"tokenURI\" }],\n  [\"uint tokenId\", { type: \"uint256\", name: \"tokenId\" }],\n  [\"uint8 v\", { type: \"uint8\", name: \"v\" }],\n  [\"uint256 balance\", { type: \"uint256\", name: \"balance\" }],\n  [\"uint256 tokenId\", { type: \"uint256\", name: \"tokenId\" }],\n  [\"uint256 value\", { type: \"uint256\", name: \"value\" }],\n  // Indexed\n  [\n    \"event:address indexed from\",\n    { type: \"address\", name: \"from\", indexed: true }\n  ],\n  [\"event:address indexed to\", { type: \"address\", name: \"to\", indexed: true }],\n  [\n    \"event:uint indexed tokenId\",\n    { type: \"uint256\", name: \"tokenId\", indexed: true }\n  ],\n  [\n    \"event:uint256 indexed tokenId\",\n    { type: \"uint256\", name: \"tokenId\", indexed: true }\n  ]\n]);\n\n// src/human-readable/runtime/utils.ts\nfunction parseSignature(signature, structs = {}) {\n  if (isFunctionSignature(signature)) {\n    const match = execFunctionSignature(signature);\n    if (!match)\n      throw new BaseError(\"Invalid function signature.\", {\n        details: signature\n      });\n    const inputParams = splitParameters(match.parameters);\n    const inputs = [];\n    const inputLength = inputParams.length;\n    for (let i = 0; i < inputLength; i++) {\n      inputs.push(\n        parseAbiParameter(inputParams[i], {\n          modifiers: functionModifiers,\n          structs,\n          type: \"function\"\n        })\n      );\n    }\n    const outputs = [];\n    if (match.returns) {\n      const outputParams = splitParameters(match.returns);\n      const outputLength = outputParams.length;\n      for (let i = 0; i < outputLength; i++) {\n        outputs.push(\n          parseAbiParameter(outputParams[i], {\n            modifiers: functionModifiers,\n            structs,\n            type: \"function\"\n          })\n        );\n      }\n    }\n    return {\n      name: match.name,\n      type: \"function\",\n      stateMutability: match.stateMutability ?? \"nonpayable\",\n      inputs,\n      outputs\n    };\n  }\n  if (isEventSignature(signature)) {\n    const match = execEventSignature(signature);\n    if (!match)\n      throw new BaseError(\"Invalid event signature.\", {\n        details: signature\n      });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(\n        parseAbiParameter(params[i], {\n          modifiers: eventModifiers,\n          structs,\n          type: \"event\"\n        })\n      );\n    }\n    return { name: match.name, type: \"event\", inputs: abiParameters };\n  }\n  if (isErrorSignature(signature)) {\n    const match = execErrorSignature(signature);\n    if (!match)\n      throw new BaseError(\"Invalid error signature.\", {\n        details: signature\n      });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(\n        parseAbiParameter(params[i], { structs, type: \"error\" })\n      );\n    }\n    return { name: match.name, type: \"error\", inputs: abiParameters };\n  }\n  if (isConstructorSignature(signature)) {\n    const match = execConstructorSignature(signature);\n    if (!match)\n      throw new BaseError(\"Invalid constructor signature.\", {\n        details: signature\n      });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(\n        parseAbiParameter(params[i], { structs, type: \"constructor\" })\n      );\n    }\n    return {\n      type: \"constructor\",\n      stateMutability: match.stateMutability ?? \"nonpayable\",\n      inputs: abiParameters\n    };\n  }\n  if (isFallbackSignature(signature))\n    return { type: \"fallback\" };\n  if (isReceiveSignature(signature))\n    return {\n      type: \"receive\",\n      stateMutability: \"payable\"\n    };\n  throw new BaseError(\"Unknown signature.\", {\n    details: signature\n  });\n}\nvar abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z0-9_]+))?$/;\nvar dynamicIntegerRegex = /^u?int$/;\nfunction parseAbiParameter(param, options) {\n  const parameterCacheKey = getParameterCacheKey(param, options?.type);\n  if (parameterCache.has(parameterCacheKey))\n    return parameterCache.get(parameterCacheKey);\n  const isTuple = isTupleRegex.test(param);\n  const match = execTyped(\n    isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex,\n    param\n  );\n  if (!match)\n    throw new BaseError(\"Invalid ABI parameter.\", {\n      details: param\n    });\n  if (match.name && isSolidityKeyword(match.name))\n    throw new BaseError(\"Invalid ABI parameter.\", {\n      details: param,\n      metaMessages: [\n        `\"${match.name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`\n      ]\n    });\n  const name2 = match.name ? { name: match.name } : {};\n  const indexed = match.modifier === \"indexed\" ? { indexed: true } : {};\n  const structs = options?.structs ?? {};\n  let type;\n  let components = {};\n  if (isTuple) {\n    type = \"tuple\";\n    const params = splitParameters(match.type);\n    const components_ = [];\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      components_.push(parseAbiParameter(params[i], { structs }));\n    }\n    components = { components: components_ };\n  } else if (match.type in structs) {\n    type = \"tuple\";\n    components = { components: structs[match.type] };\n  } else if (dynamicIntegerRegex.test(match.type)) {\n    type = `${match.type}256`;\n  } else {\n    type = match.type;\n    if (!(options?.type === \"struct\") && !isSolidityType(type))\n      throw new BaseError(\"Unknown type.\", {\n        metaMessages: [`Type \"${type}\" is not a valid ABI type.`]\n      });\n  }\n  if (match.modifier) {\n    if (!options?.modifiers?.has?.(match.modifier))\n      throw new BaseError(\"Invalid ABI parameter.\", {\n        details: param,\n        metaMessages: [\n          `Modifier \"${match.modifier}\" not allowed${options?.type ? ` in \"${options.type}\" type` : \"\"}.`\n        ]\n      });\n    if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))\n      throw new BaseError(\"Invalid ABI parameter.\", {\n        details: param,\n        metaMessages: [\n          `Modifier \"${match.modifier}\" not allowed${options?.type ? ` in \"${options.type}\" type` : \"\"}.`,\n          `Data location can only be specified for array, struct, or mapping types, but \"${match.modifier}\" was given.`\n        ]\n      });\n  }\n  const abiParameter = {\n    type: `${type}${match.array ?? \"\"}`,\n    ...name2,\n    ...indexed,\n    ...components\n  };\n  parameterCache.set(parameterCacheKey, abiParameter);\n  return abiParameter;\n}\nfunction splitParameters(params, result = [], current = \"\", depth = 0) {\n  if (params === \"\") {\n    if (current === \"\")\n      return result;\n    if (depth !== 0)\n      throw new BaseError(\"Unbalanced parentheses.\", {\n        metaMessages: [\n          `\"${current.trim()}\" has too many ${depth > 0 ? \"opening\" : \"closing\"} parentheses.`\n        ],\n        details: `Depth \"${depth}\"`\n      });\n    return [...result, current.trim()];\n  }\n  const length = params.length;\n  for (let i = 0; i < length; i++) {\n    const char = params[i];\n    const tail = params.slice(i + 1);\n    switch (char) {\n      case \",\":\n        return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);\n      case \"(\":\n        return splitParameters(tail, result, `${current}${char}`, depth + 1);\n      case \")\":\n        return splitParameters(tail, result, `${current}${char}`, depth - 1);\n      default:\n        return splitParameters(tail, result, `${current}${char}`, depth);\n    }\n  }\n  return [];\n}\nfunction isSolidityType(type) {\n  return type === \"address\" || type === \"bool\" || type === \"function\" || type === \"string\" || bytesRegex.test(type) || integerRegex.test(type);\n}\nvar protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\nfunction isSolidityKeyword(name2) {\n  return name2 === \"address\" || name2 === \"bool\" || name2 === \"function\" || name2 === \"string\" || name2 === \"tuple\" || bytesRegex.test(name2) || integerRegex.test(name2) || protectedKeywordsRegex.test(name2);\n}\nfunction isValidDataLocation(type, isArray) {\n  return isArray || type === \"bytes\" || type === \"string\" || type === \"tuple\";\n}\n\n// src/human-readable/runtime/structs.ts\nfunction parseStructs(signatures) {\n  const shallowStructs = {};\n  const signaturesLength = signatures.length;\n  for (let i = 0; i < signaturesLength; i++) {\n    const signature = signatures[i];\n    if (!isStructSignature(signature))\n      continue;\n    const match = execStructSignature(signature);\n    if (!match)\n      throw new BaseError(\"Invalid struct signature.\", {\n        details: signature\n      });\n    const properties = match.properties.split(\";\");\n    const components = [];\n    const propertiesLength = properties.length;\n    for (let k = 0; k < propertiesLength; k++) {\n      const property = properties[k];\n      const trimmed = property.trim();\n      if (!trimmed)\n        continue;\n      const abiParameter = parseAbiParameter(trimmed, {\n        type: \"struct\"\n      });\n      components.push(abiParameter);\n    }\n    if (!components.length)\n      throw new BaseError(\"Invalid struct signature.\", {\n        details: signature,\n        metaMessages: [\"No properties exist.\"]\n      });\n    shallowStructs[match.name] = components;\n  }\n  const resolvedStructs = {};\n  const entries = Object.entries(shallowStructs);\n  const entriesLength = entries.length;\n  for (let i = 0; i < entriesLength; i++) {\n    const [name2, parameters] = entries[i];\n    resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);\n  }\n  return resolvedStructs;\n}\nvar typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\\[\\d*?\\])+?)?$/;\nfunction resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {\n  const components = [];\n  const length = abiParameters.length;\n  for (let i = 0; i < length; i++) {\n    const abiParameter = abiParameters[i];\n    const isTuple = isTupleRegex.test(abiParameter.type);\n    if (isTuple)\n      components.push(abiParameter);\n    else {\n      const match = execTyped(\n        typeWithoutTupleRegex,\n        abiParameter.type\n      );\n      if (!match?.type)\n        throw new BaseError(\"Invalid ABI parameter.\", {\n          details: JSON.stringify(abiParameter, null, 2),\n          metaMessages: [\"ABI parameter type is invalid.\"]\n        });\n      const { array, type } = match;\n      if (type in structs) {\n        if (ancestors.has(type))\n          throw new BaseError(\"Circular reference detected.\", {\n            metaMessages: [`Struct \"${type}\" is a circular reference.`]\n          });\n        components.push({\n          ...abiParameter,\n          type: `tuple${array ?? \"\"}`,\n          components: resolveStructs(\n            structs[type] ?? [],\n            structs,\n            /* @__PURE__ */ new Set([...ancestors, type])\n          )\n        });\n      } else {\n        if (isSolidityType(type))\n          components.push(abiParameter);\n        else\n          throw new BaseError(\"Unknown type.\", {\n            metaMessages: [\n              `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`\n            ]\n          });\n      }\n    }\n  }\n  return components;\n}\n\n// src/human-readable/parseAbi.ts\nfunction parseAbi(signatures) {\n  const structs = parseStructs(signatures);\n  const abi = [];\n  const length = signatures.length;\n  for (let i = 0; i < length; i++) {\n    const signature = signatures[i];\n    if (isStructSignature(signature))\n      continue;\n    abi.push(parseSignature(signature, structs));\n  }\n  return abi;\n}\n\n// src/human-readable/parseAbiItem.ts\nfunction parseAbiItem(signature) {\n  let abiItem;\n  if (typeof signature === \"string\")\n    abiItem = parseSignature(signature);\n  else {\n    const structs = parseStructs(signature);\n    const length = signature.length;\n    for (let i = 0; i < length; i++) {\n      const signature_ = signature[i];\n      if (isStructSignature(signature_))\n        continue;\n      abiItem = parseSignature(signature_, structs);\n      break;\n    }\n  }\n  if (!abiItem)\n    throw new BaseError(\"Failed to parse ABI item.\", {\n      details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,\n      docsPath: \"/api/human.html#parseabiitem-1\"\n    });\n  return abiItem;\n}\n\n// src/human-readable/parseAbiParameter.ts\nfunction parseAbiParameter2(param) {\n  let abiParameter;\n  if (typeof param === \"string\")\n    abiParameter = parseAbiParameter(param, {\n      modifiers\n    });\n  else {\n    const structs = parseStructs(param);\n    const length = param.length;\n    for (let i = 0; i < length; i++) {\n      const signature = param[i];\n      if (isStructSignature(signature))\n        continue;\n      abiParameter = parseAbiParameter(signature, { modifiers, structs });\n      break;\n    }\n  }\n  if (!abiParameter)\n    throw new BaseError(\"Failed to parse ABI parameter.\", {\n      details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n      docsPath: \"/api/human.html#parseabiparameter-1\"\n    });\n  return abiParameter;\n}\n\n// src/human-readable/parseAbiParameters.ts\nfunction parseAbiParameters(params) {\n  const abiParameters = [];\n  if (typeof params === \"string\") {\n    const parameters = splitParameters(params);\n    const length = parameters.length;\n    for (let i = 0; i < length; i++) {\n      abiParameters.push(parseAbiParameter(parameters[i], { modifiers }));\n    }\n  } else {\n    const structs = parseStructs(params);\n    const length = params.length;\n    for (let i = 0; i < length; i++) {\n      const signature = params[i];\n      if (isStructSignature(signature))\n        continue;\n      const parameters = splitParameters(signature);\n      const length2 = parameters.length;\n      for (let k = 0; k < length2; k++) {\n        abiParameters.push(\n          parseAbiParameter(parameters[k], { modifiers, structs })\n        );\n      }\n    }\n  }\n  if (abiParameters.length === 0)\n    throw new BaseError(\"Failed to parse ABI parameters.\", {\n      details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n      docsPath: \"/api/human.html#parseabiparameters-1\"\n    });\n  return abiParameters;\n}\nexport {\n  BaseError,\n  narrow,\n  parseAbi,\n  parseAbiItem,\n  parseAbiParameter2 as parseAbiParameter,\n  parseAbiParameters\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}