{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseJsonRpcResponse = exports.parseJsonRpcSuccessResponse = exports.parseJsonRpcErrorResponse = exports.parseJsonRpcRequest = exports.parseJsonRpcId = void 0;\nconst compatibility_1 = require(\"./compatibility\");\n/**\n * Extracts ID field from request or response object.\n *\n * Returns `null` when no valid ID was found.\n */\nfunction parseJsonRpcId(data) {\n  if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n  const id = data.id;\n  if (typeof id !== \"number\" && typeof id !== \"string\") {\n    return null;\n  }\n  return id;\n}\nexports.parseJsonRpcId = parseJsonRpcId;\nfunction parseJsonRpcRequest(data) {\n  if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(`Got unexpected jsonrpc version: ${data.jsonrpc}`);\n  }\n  const id = parseJsonRpcId(data);\n  if (id === null) {\n    throw new Error(\"Invalid id field\");\n  }\n  const method = data.method;\n  if (typeof method !== \"string\") {\n    throw new Error(\"Invalid method field\");\n  }\n  if (!(0, compatibility_1.isJsonCompatibleArray)(data.params) && !(0, compatibility_1.isJsonCompatibleDictionary)(data.params)) {\n    throw new Error(\"Invalid params field\");\n  }\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    method: method,\n    params: data.params\n  };\n}\nexports.parseJsonRpcRequest = parseJsonRpcRequest;\nfunction parseError(error) {\n  if (typeof error.code !== \"number\") {\n    throw new Error(\"Error property 'code' is not a number\");\n  }\n  if (typeof error.message !== \"string\") {\n    throw new Error(\"Error property 'message' is not a string\");\n  }\n  let maybeUndefinedData;\n  if (error.data === undefined) {\n    maybeUndefinedData = undefined;\n  } else if ((0, compatibility_1.isJsonCompatibleValue)(error.data)) {\n    maybeUndefinedData = error.data;\n  } else {\n    throw new Error(\"Error property 'data' is defined but not a JSON compatible value.\");\n  }\n  return {\n    code: error.code,\n    message: error.message,\n    ...(maybeUndefinedData !== undefined ? {\n      data: maybeUndefinedData\n    } : {})\n  };\n}\n/** Throws if data is not a JsonRpcErrorResponse */\nfunction parseJsonRpcErrorResponse(data) {\n  if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(`Got unexpected jsonrpc version: ${JSON.stringify(data)}`);\n  }\n  const id = data.id;\n  if (typeof id !== \"number\" && typeof id !== \"string\" && id !== null) {\n    throw new Error(\"Invalid id field\");\n  }\n  if (typeof data.error === \"undefined\" || !(0, compatibility_1.isJsonCompatibleDictionary)(data.error)) {\n    throw new Error(\"Invalid error field\");\n  }\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    error: parseError(data.error)\n  };\n}\nexports.parseJsonRpcErrorResponse = parseJsonRpcErrorResponse;\n/** Throws if data is not a JsonRpcSuccessResponse */\nfunction parseJsonRpcSuccessResponse(data) {\n  if (!(0, compatibility_1.isJsonCompatibleDictionary)(data)) {\n    throw new Error(\"Data must be JSON compatible dictionary\");\n  }\n  if (data.jsonrpc !== \"2.0\") {\n    throw new Error(`Got unexpected jsonrpc version: ${JSON.stringify(data)}`);\n  }\n  const id = data.id;\n  if (typeof id !== \"number\" && typeof id !== \"string\") {\n    throw new Error(\"Invalid id field\");\n  }\n  if (typeof data.result === \"undefined\") {\n    throw new Error(\"Invalid result field\");\n  }\n  const result = data.result;\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}\nexports.parseJsonRpcSuccessResponse = parseJsonRpcSuccessResponse;\n/**\n * Returns a JsonRpcErrorResponse if input can be parsed as a JSON-RPC error. Otherwise parses\n * input as JsonRpcSuccessResponse. Throws if input is neither a valid error nor success response.\n */\nfunction parseJsonRpcResponse(data) {\n  let response;\n  try {\n    response = parseJsonRpcErrorResponse(data);\n  } catch (_) {\n    response = parseJsonRpcSuccessResponse(data);\n  }\n  return response;\n}\nexports.parseJsonRpcResponse = parseJsonRpcResponse;","map":{"version":3,"names":["compatibility_1","require","parseJsonRpcId","data","isJsonCompatibleDictionary","Error","id","exports","parseJsonRpcRequest","jsonrpc","method","isJsonCompatibleArray","params","parseError","error","code","message","maybeUndefinedData","undefined","isJsonCompatibleValue","parseJsonRpcErrorResponse","JSON","stringify","parseJsonRpcSuccessResponse","result","parseJsonRpcResponse","response","_"],"sources":["../src/parse.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}