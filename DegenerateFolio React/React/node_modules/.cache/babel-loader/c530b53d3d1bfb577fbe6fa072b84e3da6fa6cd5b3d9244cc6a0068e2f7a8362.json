{"ast":null,"code":"import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL.mjs';\n\"use strict\";\nfunction generateArraySyncWGSL(uboElement, offsetToAdd) {\n  const {\n    size,\n    align\n  } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n  const remainder = (align - size) / 4;\n  return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : \"\"}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 data[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : \"\"}\n         }\n     `;\n}\nexport { generateArraySyncWGSL };","map":{"version":3,"names":["generateArraySyncWGSL","uboElement","offsetToAdd","size","align","WGSL_ALIGN_SIZE_DATA","data","type","remainder","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.ts"],"sourcesContent":["import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the wgsl layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncWGSL(uboElement: UboElement, offsetToAdd: number): string\n{\n    // this is in byte..\n    const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n\n    const remainder = (align - size) / 4;\n\n    return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : ''}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 data[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n         }\n     `;\n}\n"],"mappings":";;AAWgB,SAAAA,sBAAsBC,UAAA,EAAwBC,WAC9D;EAEI,MAAM;IAAEC,IAAM;IAAAC;EAAA,IAAUC,oBAAqB,CAAAJ,UAAA,CAAWK,IAAA,CAAKC,IAAI;EAE3D,MAAAC,SAAA,IAAaJ,KAAA,GAAQD,IAAQ;EAE5B;AAAA,kBACOF,UAAA,CAAWK,IAAA,CAAKG,IAAI;AAAA,WAC3BP,WAAgB,SAAiB,aAAAA,WAAW,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAMnCD,UAAW,CAAAK,IAAA,CAAKH,IAAQ,IAAAA,IAAA,GAAO,CAAE;AAAA;AAAA,kCAE3BA,IAAA,GAAO,CAAC;AAAA;AAAA;AAAA;AAAA,eAI3BK,SAAc,SAAsB,kBAAAA,SAAS,MAAM,EAAE;AAAA;AAAA;AAGpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}