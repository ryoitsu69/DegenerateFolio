{"ast":null,"code":"import { isCompact } from '@polkadot/util';\nimport { l } from './logging.js';\nexport function filterEvents(txHash, _ref, allEvents, status) {\n  let {\n    block: {\n      extrinsics,\n      header\n    }\n  } = _ref;\n  // extrinsics to hashes\n  for (const [txIndex, x] of extrinsics.entries()) {\n    if (x.hash.eq(txHash)) {\n      return {\n        blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,\n        events: allEvents.filter(_ref2 => {\n          let {\n            phase\n          } = _ref2;\n          return phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex);\n        }),\n        txIndex\n      };\n    }\n  }\n  // if we do get the block after finalized, it _should_ be there\n  // only warn on filtering with isInBlock (finalization finalizes after)\n  if (status.isInBlock) {\n    const allHashes = extrinsics.map(x => x.hash.toHex());\n    l.warn(\"block \".concat(header.hash.toHex(), \": Unable to find extrinsic \").concat(txHash.toHex(), \" inside \").concat(allHashes.join(', ')));\n  }\n  return {};\n}","map":{"version":3,"names":["isCompact","l","filterEvents","txHash","_ref","allEvents","status","block","extrinsics","header","txIndex","x","entries","hash","eq","blockNumber","number","unwrap","events","filter","_ref2","phase","isApplyExtrinsic","asApplyExtrinsic","eqn","isInBlock","allHashes","map","toHex","warn","concat","join"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api/util/filterEvents.js"],"sourcesContent":["import { isCompact } from '@polkadot/util';\nimport { l } from './logging.js';\nexport function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {\n    // extrinsics to hashes\n    for (const [txIndex, x] of extrinsics.entries()) {\n        if (x.hash.eq(txHash)) {\n            return {\n                blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,\n                events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic &&\n                    phase.asApplyExtrinsic.eqn(txIndex)),\n                txIndex\n            };\n        }\n    }\n    // if we do get the block after finalized, it _should_ be there\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n        const allHashes = extrinsics.map((x) => x.hash.toHex());\n        l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);\n    }\n    return {};\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,CAAC,QAAQ,cAAc;AAChC,OAAO,SAASC,YAAYA,CAACC,MAAM,EAAAC,IAAA,EAAqCC,SAAS,EAAEC,MAAM,EAAE;EAAA,IAAtD;IAAEC,KAAK,EAAE;MAAEC,UAAU;MAAEC;IAAO;EAAE,CAAC,GAAAL,IAAA;EAClE;EACA,KAAK,MAAM,CAACM,OAAO,EAAEC,CAAC,CAAC,IAAIH,UAAU,CAACI,OAAO,CAAC,CAAC,EAAE;IAC7C,IAAID,CAAC,CAACE,IAAI,CAACC,EAAE,CAACX,MAAM,CAAC,EAAE;MACnB,OAAO;QACHY,WAAW,EAAEf,SAAS,CAACS,MAAM,CAACO,MAAM,CAAC,GAAGP,MAAM,CAACO,MAAM,CAACC,MAAM,CAAC,CAAC,GAAGR,MAAM,CAACO,MAAM;QAC9EE,MAAM,EAAEb,SAAS,CAACc,MAAM,CAACC,KAAA;UAAA,IAAC;YAAEC;UAAM,CAAC,GAAAD,KAAA;UAAA,OAAKC,KAAK,CAACC,gBAAgB,IAC1DD,KAAK,CAACE,gBAAgB,CAACC,GAAG,CAACd,OAAO,CAAC;QAAA,EAAC;QACxCA;MACJ,CAAC;IACL;EACJ;EACA;EACA;EACA,IAAIJ,MAAM,CAACmB,SAAS,EAAE;IAClB,MAAMC,SAAS,GAAGlB,UAAU,CAACmB,GAAG,CAAEhB,CAAC,IAAKA,CAAC,CAACE,IAAI,CAACe,KAAK,CAAC,CAAC,CAAC;IACvD3B,CAAC,CAAC4B,IAAI,UAAAC,MAAA,CAAUrB,MAAM,CAACI,IAAI,CAACe,KAAK,CAAC,CAAC,iCAAAE,MAAA,CAA8B3B,MAAM,CAACyB,KAAK,CAAC,CAAC,cAAAE,MAAA,CAAWJ,SAAS,CAACK,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC;EACrH;EACA,OAAO,CAAC,CAAC;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}