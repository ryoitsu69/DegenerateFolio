{"ast":null,"code":"import { objectSpread } from '@polkadot/util';\n/**\n * Convert the Metadata to v15\n * @internal\n **/\nexport function toV15(registry, v14, _) {\n  var _v14$lookup$paramType;\n  // V15 is mostly equivalent to v14 however it does add\n  //\n  // 1. The top-level apis entry - it is assumed that in usage we would\n  //    just check for all-empty (like this would construct)\n  // 2. A docs param on the pallet itself\n  // 3. Additional extrinsic parameters\n  //\n  // A straight conversion with createTypeUndafe magic fills in details\n  // We need the UncheckedExtrinsic to extract the types, at least for v14\n  // which does have these details embedded (previous-gen won't populate)\n  const unchecked = v14.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;\n  return registry.createTypeUnsafe('MetadataV15', [objectSpread({}, v14, {\n    extrinsic: registry.createTypeUnsafe('ExtrinsicMetadataV15', [objectSpread({}, v14.extrinsic, {\n      addressType: unchecked === null || unchecked === void 0 ? void 0 : unchecked[0].type.unwrapOr(0),\n      callType: unchecked === null || unchecked === void 0 ? void 0 : unchecked[1].type.unwrapOr(0),\n      extraType: unchecked === null || unchecked === void 0 ? void 0 : unchecked[3].type.unwrapOr(0),\n      signatureType: unchecked === null || unchecked === void 0 ? void 0 : unchecked[2].type.unwrapOr(0)\n    })]),\n    outerEnums: registry.createTypeUnsafe('OuterEnums15', [{\n      // FIXME We need to extract & add the errorType in here\n      // (these doesn't seem to be an esay way to detect & extract it)\n      callType: unchecked === null || unchecked === void 0 ? void 0 : unchecked[1].type.unwrapOr(0),\n      eventType: (_v14$lookup$paramType = v14.lookup.paramTypes.FrameSystemEventRecord) === null || _v14$lookup$paramType === void 0 ? void 0 : _v14$lookup$paramType[0].type.unwrapOr(0)\n    }])\n  })]);\n}","map":{"version":3,"names":["objectSpread","toV15","registry","v14","_","_v14$lookup$paramType","unchecked","lookup","paramTypes","SpRuntimeUncheckedExtrinsic","createTypeUnsafe","extrinsic","addressType","type","unwrapOr","callType","extraType","signatureType","outerEnums","eventType","FrameSystemEventRecord"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/metadata/v14/toV15.js"],"sourcesContent":["import { objectSpread } from '@polkadot/util';\n/**\n * Convert the Metadata to v15\n * @internal\n **/\nexport function toV15(registry, v14, _) {\n    // V15 is mostly equivalent to v14 however it does add\n    //\n    // 1. The top-level apis entry - it is assumed that in usage we would\n    //    just check for all-empty (like this would construct)\n    // 2. A docs param on the pallet itself\n    // 3. Additional extrinsic parameters\n    //\n    // A straight conversion with createTypeUndafe magic fills in details\n    // We need the UncheckedExtrinsic to extract the types, at least for v14\n    // which does have these details embedded (previous-gen won't populate)\n    const unchecked = v14.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;\n    return registry.createTypeUnsafe('MetadataV15', [\n        objectSpread({}, v14, {\n            extrinsic: registry.createTypeUnsafe('ExtrinsicMetadataV15', [\n                objectSpread({}, v14.extrinsic, {\n                    addressType: unchecked?.[0].type.unwrapOr(0),\n                    callType: unchecked?.[1].type.unwrapOr(0),\n                    extraType: unchecked?.[3].type.unwrapOr(0),\n                    signatureType: unchecked?.[2].type.unwrapOr(0)\n                })\n            ]),\n            outerEnums: registry.createTypeUnsafe('OuterEnums15', [{\n                    // FIXME We need to extract & add the errorType in here\n                    // (these doesn't seem to be an esay way to detect & extract it)\n                    callType: unchecked?.[1].type.unwrapOr(0),\n                    eventType: v14.lookup.paramTypes.FrameSystemEventRecord?.[0].type.unwrapOr(0)\n                }])\n        })\n    ]);\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAC7C;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAKA,CAACC,QAAQ,EAAEC,GAAG,EAAEC,CAAC,EAAE;EAAA,IAAAC,qBAAA;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,SAAS,GAAGH,GAAG,CAACI,MAAM,CAACC,UAAU,CAACC,2BAA2B;EACnE,OAAOP,QAAQ,CAACQ,gBAAgB,CAAC,aAAa,EAAE,CAC5CV,YAAY,CAAC,CAAC,CAAC,EAAEG,GAAG,EAAE;IAClBQ,SAAS,EAAET,QAAQ,CAACQ,gBAAgB,CAAC,sBAAsB,EAAE,CACzDV,YAAY,CAAC,CAAC,CAAC,EAAEG,GAAG,CAACQ,SAAS,EAAE;MAC5BC,WAAW,EAAEN,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,CAAC,CAAC,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MAC5CC,QAAQ,EAAET,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,CAAC,CAAC,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MACzCE,SAAS,EAAEV,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,CAAC,CAAC,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MAC1CG,aAAa,EAAEX,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,CAAC,CAAC,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC;IACjD,CAAC,CAAC,CACL,CAAC;IACFI,UAAU,EAAEhB,QAAQ,CAACQ,gBAAgB,CAAC,cAAc,EAAE,CAAC;MAC/C;MACA;MACAK,QAAQ,EAAET,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAG,CAAC,CAAC,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MACzCK,SAAS,GAAAd,qBAAA,GAAEF,GAAG,CAACI,MAAM,CAACC,UAAU,CAACY,sBAAsB,cAAAf,qBAAA,uBAA5CA,qBAAA,CAA+C,CAAC,CAAC,CAACQ,IAAI,CAACC,QAAQ,CAAC,CAAC;IAChF,CAAC,CAAC;EACV,CAAC,CAAC,CACL,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}