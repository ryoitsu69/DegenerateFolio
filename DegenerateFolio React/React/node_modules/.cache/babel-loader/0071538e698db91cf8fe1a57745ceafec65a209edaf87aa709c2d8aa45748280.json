{"ast":null,"code":"import { BindGroup } from '../../renderers/gpu/shader/BindGroup.mjs';\nimport { Texture } from '../../renderers/shared/texture/Texture.mjs';\nimport { MAX_TEXTURES } from '../shared/const.mjs';\n\"use strict\";\nconst cachedGroups = {};\nfunction getTextureBatchBindGroup(textures, size) {\n  let uid = 0;\n  for (let i = 0; i < size; i++) {\n    uid = uid * 31 + textures[i].uid >>> 0;\n  }\n  return cachedGroups[uid] || generateTextureBatchBindGroup(textures, uid);\n}\nfunction generateTextureBatchBindGroup(textures, key) {\n  const bindGroupResources = {};\n  let bindIndex = 0;\n  for (let i = 0; i < MAX_TEXTURES; i++) {\n    const texture = i < textures.length ? textures[i] : Texture.EMPTY.source;\n    bindGroupResources[bindIndex++] = texture.source;\n    bindGroupResources[bindIndex++] = texture.style;\n  }\n  const bindGroup = new BindGroup(bindGroupResources);\n  cachedGroups[key] = bindGroup;\n  return bindGroup;\n}\nexport { getTextureBatchBindGroup };","map":{"version":3,"names":["cachedGroups","getTextureBatchBindGroup","textures","size","uid","i","generateTextureBatchBindGroup","key","bindGroupResources","bindIndex","MAX_TEXTURES","texture","length","Texture","EMPTY","source","style","bindGroup","BindGroup"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/batcher/gpu/getTextureBatchBindGroup.ts"],"sourcesContent":["import { BindGroup } from '../../renderers/gpu/shader/BindGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { MAX_TEXTURES } from '../shared/const';\n\nimport type { TextureSource } from '../../renderers/shared/texture/sources/TextureSource';\n\nconst cachedGroups: Record<number, BindGroup> = {};\n\nexport function getTextureBatchBindGroup(textures: TextureSource[], size: number)\n{\n    let uid = 0;\n\n    for (let i = 0; i < size; i++)\n    {\n        uid = ((uid * 31) + textures[i].uid) >>> 0;\n    }\n\n    return cachedGroups[uid] || generateTextureBatchBindGroup(textures, uid);\n}\n\nfunction generateTextureBatchBindGroup(textures: TextureSource[], key: number): BindGroup\n{\n    const bindGroupResources: Record<string, any> = {};\n\n    let bindIndex = 0;\n\n    for (let i = 0; i < MAX_TEXTURES; i++)\n    {\n        const texture = i < textures.length ? textures[i] : Texture.EMPTY.source;\n\n        bindGroupResources[bindIndex++] = texture.source;\n        bindGroupResources[bindIndex++] = texture.style;\n    }\n\n    // pad out with empty textures\n    const bindGroup = new BindGroup(bindGroupResources);\n\n    cachedGroups[key] = bindGroup;\n\n    return bindGroup;\n}\n\n"],"mappings":";;;;AAMA,MAAMA,YAAA,GAA0C,EAAC;AAEjC,SAAAC,yBAAyBC,QAAA,EAA2BC,IACpE;EACI,IAAIC,GAAM;EAEV,SAASC,CAAI,MAAGA,CAAI,GAAAF,IAAA,EAAME,CAC1B;IACID,GAAA,GAAQA,GAAM,QAAMF,QAAS,CAAAG,CAAC,EAAED,GAAS;EAAA;EAG7C,OAAOJ,YAAa,CAAAI,GAAG,CAAK,IAAAE,6BAAA,CAA8BJ,QAAA,EAAUE,GAAG;AAC3E;AAEA,SAASE,8BAA8BJ,QAAA,EAA2BK,GAClE;EACI,MAAMC,kBAAA,GAA0C,EAAC;EAEjD,IAAIC,SAAY;EAEhB,SAASJ,CAAI,MAAGA,CAAI,GAAAK,YAAA,EAAcL,CAClC;IACU,MAAAM,OAAA,GAAUN,CAAA,GAAIH,QAAS,CAAAU,MAAA,GAASV,QAAA,CAASG,CAAC,IAAIQ,OAAA,CAAQC,KAAM,CAAAC,MAAA;IAE/CP,kBAAA,CAAAC,SAAA,EAAW,IAAIE,OAAQ,CAAAI,MAAA;IACvBP,kBAAA,CAAAC,SAAA,EAAW,IAAIE,OAAQ,CAAAK,KAAA;EAAA;EAIxC,MAAAC,SAAA,GAAY,IAAIC,SAAA,CAAUV,kBAAkB;EAElDR,YAAA,CAAaO,GAAG,CAAI,GAAAU,SAAA;EAEb,OAAAA,SAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}