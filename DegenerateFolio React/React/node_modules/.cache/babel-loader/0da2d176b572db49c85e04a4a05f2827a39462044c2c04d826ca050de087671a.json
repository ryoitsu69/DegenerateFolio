{"ast":null,"code":"const buildRectangle = {\n  build(graphicsData) {\n    const rectData = graphicsData.shape,\n      x = rectData.x,\n      y = rectData.y,\n      width = rectData.width,\n      height = rectData.height,\n      points = graphicsData.points;\n    points.length = 0, width >= 0 && height >= 0 && points.push(x, y, x + width, y, x + width, y + height, x, y + height);\n  },\n  triangulate(graphicsData, graphicsGeometry) {\n    const points = graphicsData.points,\n      verts = graphicsGeometry.points;\n    if (points.length === 0) return;\n    const vertPos = verts.length / 2;\n    verts.push(points[0], points[1], points[2], points[3], points[6], points[7], points[4], points[5]), graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2, vertPos + 1, vertPos + 2, vertPos + 3);\n  }\n};\nexport { buildRectangle };","map":{"version":3,"names":["buildRectangle","build","graphicsData","rectData","shape","x","y","width","height","points","length","push","triangulate","graphicsGeometry","verts","vertPos","indices"],"sources":["/home/ryoitsu/node_modules/@pixi/graphics/src/utils/buildRectangle.ts"],"sourcesContent":["import type { Rectangle } from '@pixi/core';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape as Rectangle;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        if (!(width >= 0 && height >= 0))\n        {\n            return;\n        }\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n"],"mappings":"AAaO,MAAMA,cAAA,GAAqC;EAE9CC,MAAMC,YAAA,EACN;IAII,MAAMC,QAAA,GAAWD,YAAA,CAAaE,KAAA;MACxBC,CAAA,GAAIF,QAAA,CAASE,CAAA;MACbC,CAAA,GAAIH,QAAA,CAASG,CAAA;MACbC,KAAA,GAAQJ,QAAA,CAASI,KAAA;MACjBC,MAAA,GAASL,QAAA,CAASK,MAAA;MAElBC,MAAA,GAASP,YAAA,CAAaO,MAAA;IAE5BA,MAAA,CAAOC,MAAA,GAAS,GAEVH,KAAA,IAAS,KAAKC,MAAA,IAAU,KAK9BC,MAAA,CAAOE,IAAA,CAAKN,CAAA,EAAGC,CAAA,EACXD,CAAA,GAAIE,KAAA,EAAOD,CAAA,EACXD,CAAA,GAAIE,KAAA,EAAOD,CAAA,GAAIE,MAAA,EACfH,CAAA,EAAGC,CAAA,GAAIE,MAAA;EACf;EAEAI,YAAYV,YAAA,EAAcW,gBAAA,EAC1B;IACI,MAAMJ,MAAA,GAASP,YAAA,CAAaO,MAAA;MACtBK,KAAA,GAAQD,gBAAA,CAAiBJ,MAAA;IAE/B,IAAIA,MAAA,CAAOC,MAAA,KAAW,GAElB;IAGE,MAAAK,OAAA,GAAUD,KAAA,CAAMJ,MAAA,GAAS;IAEzBI,KAAA,CAAAH,IAAA,CAAKF,MAAA,CAAO,CAAC,GAAGA,MAAA,CAAO,CAAC,GAC1BA,MAAA,CAAO,CAAC,GAAGA,MAAA,CAAO,CAAC,GACnBA,MAAA,CAAO,CAAC,GAAGA,MAAA,CAAO,CAAC,GACnBA,MAAA,CAAO,CAAC,GAAGA,MAAA,CAAO,CAAC,IAEvBI,gBAAA,CAAiBG,OAAA,CAAQL,IAAA,CAAKI,OAAA,EAASA,OAAA,GAAU,GAAGA,OAAA,GAAU,GAC1DA,OAAA,GAAU,GAAGA,OAAA,GAAU,GAAGA,OAAA,GAAU;EAC5C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}