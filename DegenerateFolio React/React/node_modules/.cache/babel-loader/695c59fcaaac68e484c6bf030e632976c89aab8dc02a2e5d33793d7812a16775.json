{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { GlProgram } from '../../gl/shader/GlProgram.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { GpuProgram } from '../../gpu/shader/GpuProgram.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from './UniformGroup.mjs';\n\"use strict\";\nclass Shader extends EventEmitter {\n  constructor(options) {\n    super();\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    this._uniformBindMap = /* @__PURE__ */Object.create(null);\n    this._ownedBindGroups = [];\n    let {\n      gpuProgram,\n      glProgram,\n      groups,\n      resources,\n      compatibleRenderers,\n      groupMap\n    } = options;\n    this.gpuProgram = gpuProgram;\n    this.glProgram = glProgram;\n    if (compatibleRenderers === void 0) {\n      compatibleRenderers = 0;\n      if (gpuProgram) compatibleRenderers |= RendererType.WEBGPU;\n      if (glProgram) compatibleRenderers |= RendererType.WEBGL;\n    }\n    this.compatibleRenderers = compatibleRenderers;\n    const nameHash = {};\n    if (!resources && !groups) {\n      resources = {};\n    }\n    if (resources && groups) {\n      throw new Error(\"[Shader] Cannot have both resources and groups\");\n    } else if (!gpuProgram && groups && !groupMap) {\n      throw new Error(\"[Shader] No group map or WebGPU shader provided - consider using resources instead.\");\n    } else if (!gpuProgram && groups && groupMap) {\n      for (const i in groupMap) {\n        for (const j in groupMap[i]) {\n          const uniformName = groupMap[i][j];\n          nameHash[uniformName] = {\n            group: i,\n            binding: j,\n            name: uniformName\n          };\n        }\n      }\n    } else if (gpuProgram && groups && !groupMap) {\n      const groupData = gpuProgram.structsAndGroups.groups;\n      groupMap = {};\n      groupData.forEach(data => {\n        groupMap[data.group] = groupMap[data.group] || {};\n        groupMap[data.group][data.binding] = data.name;\n        nameHash[data.name] = data;\n      });\n    } else if (resources) {\n      if (!gpuProgram) {\n        groupMap = {};\n        groups = {\n          99: new BindGroup()\n        };\n        this._ownedBindGroups.push(groups[99]);\n        let bindTick = 0;\n        for (const i in resources) {\n          nameHash[i] = {\n            group: 99,\n            binding: bindTick,\n            name: i\n          };\n          groupMap[99] = groupMap[99] || {};\n          groupMap[99][bindTick] = i;\n          bindTick++;\n        }\n      } else {\n        const groupData = gpuProgram.structsAndGroups.groups;\n        groupMap = {};\n        groupData.forEach(data => {\n          groupMap[data.group] = groupMap[data.group] || {};\n          groupMap[data.group][data.binding] = data.name;\n          nameHash[data.name] = data;\n        });\n      }\n      groups = {};\n      for (const i in resources) {\n        const name = i;\n        let value = resources[i];\n        if (!value.source && !value._resourceType) {\n          value = new UniformGroup(value);\n        }\n        const data = nameHash[name];\n        if (data) {\n          if (!groups[data.group]) {\n            groups[data.group] = new BindGroup();\n            this._ownedBindGroups.push(groups[data.group]);\n          }\n          groups[data.group].setResource(value, data.binding);\n        }\n      }\n    }\n    this.groups = groups;\n    this._uniformBindMap = groupMap;\n    this.resources = this._buildResourceAccessor(groups, nameHash);\n  }\n  /**\n   * Sometimes a resource group will be provided later (for example global uniforms)\n   * In such cases, this method can be used to let the shader know about the group.\n   * @param name - the name of the resource group\n   * @param groupIndex - the index of the group (should match the webGPU shader group location)\n   * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n   */\n  addResource(name, groupIndex, bindIndex) {\n    var _a, _b;\n    (_a = this._uniformBindMap)[groupIndex] || (_a[groupIndex] = {});\n    (_b = this._uniformBindMap[groupIndex])[bindIndex] || (_b[bindIndex] = name);\n    if (!this.groups[groupIndex]) {\n      this.groups[groupIndex] = new BindGroup();\n      this._ownedBindGroups.push(this.groups[groupIndex]);\n    }\n  }\n  _buildResourceAccessor(groups, nameHash) {\n    const uniformsOut = {};\n    for (const i in nameHash) {\n      const data = nameHash[i];\n      Object.defineProperty(uniformsOut, data.name, {\n        get() {\n          return groups[data.group].getResource(data.binding);\n        },\n        set(value) {\n          groups[data.group].setResource(value, data.binding);\n        }\n      });\n    }\n    return uniformsOut;\n  }\n  /**\n   * Use to destroy the shader when its not longer needed.\n   * It will destroy the resources and remove listeners.\n   * @param destroyPrograms - if the programs should be destroyed as well.\n   * Make sure its not being used by other shaders!\n   */\n  destroy(destroyPrograms = false) {\n    this.emit(\"destroy\", this);\n    if (destroyPrograms) {\n      this.gpuProgram?.destroy();\n      this.glProgram?.destroy();\n    }\n    this.gpuProgram = null;\n    this.glProgram = null;\n    this.removeAllListeners();\n    this._uniformBindMap = null;\n    this._ownedBindGroups.forEach(bindGroup => {\n      bindGroup.destroy();\n    });\n    this._ownedBindGroups = null;\n    this.resources = null;\n    this.groups = null;\n  }\n  static from(options) {\n    const {\n      gpu,\n      gl,\n      ...rest\n    } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new Shader({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n}\nexport { Shader };","map":{"version":3,"names":["Shader","EventEmitter","constructor","options","_uniformBindMap","Object","create","_ownedBindGroups","gpuProgram","glProgram","groups","resources","compatibleRenderers","groupMap","RendererType","WEBGPU","WEBGL","nameHash","Error","i","j","uniformName","group","binding","name","groupData","structsAndGroups","forEach","data","BindGroup","push","bindTick","value","source","_resourceType","UniformGroup","setResource","_buildResourceAccessor","addResource","groupIndex","bindIndex","_a","_b","uniformsOut","defineProperty","get","getResource","set","destroy","destroyPrograms","emit","removeAllListeners","bindGroup","from","gpu","gl","rest","GpuProgram","GlProgram"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/shader/Shader.ts"],"sourcesContent":["/* eslint-disable no-new */\nimport EventEmitter from 'eventemitter3';\nimport { GlProgram } from '../../gl/shader/GlProgram';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { GpuProgram } from '../../gpu/shader/GpuProgram';\nimport { RendererType } from '../../types';\nimport { UniformGroup } from './UniformGroup';\n\nimport type { GlProgramOptions } from '../../gl/shader/GlProgram';\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { GpuProgramOptions } from '../../gpu/shader/GpuProgram';\n\n/**\n * A record of {@link BindGroup}'s used by the shader.\n *\n * `Record<number, BindGroup>`\n * @memberof rendering\n */\nexport type ShaderGroups = Record<number, BindGroup>;\n\ninterface ShaderBase\n{\n    /** The WebGL program used by the WebGL renderer. */\n    glProgram?: GlProgram\n    /** The WebGPU program used by the WebGPU renderer. */\n    gpuProgram?: GpuProgram\n    /**\n     * A number that uses two bits on whether the shader is compatible with the WebGL renderer and/or the WebGPU renderer.\n     * 0b00 - not compatible with either\n     * 0b01 - compatible with WebGL\n     * 0b10 - compatible with WebGPU\n     * This is automatically set based on if a {@link GlProgram} or {@link GpuProgram} is provided.\n     */\n    compatibleRenderers?: number\n}\n\ninterface GlShaderWith extends ShaderBase\n{\n    /** The WebGL program used by the WebGL renderer. */\n    glProgram: GlProgram\n}\n\ninterface GpuShaderWith extends ShaderBase\n{\n    /** The WebGPU program used by the WebGPU renderer. */\n    gpuProgram: GpuProgram\n}\n\ninterface ShaderWithGroupsDescriptor\n{\n    /** A record of {@link BindGroup}'s used by the shader. */\n    groups: ShaderGroups;\n    /** an optional map of how to bind the groups. This is automatically generated by reading the WebGPU program */\n    groupMap?: Record<string, Record<string, any>>;\n}\n\ninterface ShaderWithResourcesDescriptor\n{\n    /**\n     * A key value of uniform resources used by the shader.\n     * Under the hood pixi will look at the provided shaders and figure out where\n     * the resources are mapped. Its up to you to make sure the resource key\n     * matches the uniform name in the webGPU program. WebGL is a little more forgiving!\n     */\n    resources?: Record<string, any>;\n}\n\ninterface GroupsData\n{\n    group: number\n    binding: number\n    name: string\n}\n\n/**\n * A descriptor for a shader\n * @memberof rendering\n */\nexport type ShaderWith = GlShaderWith | GpuShaderWith;\n\n/**\n * A descriptor for a shader with groups.\n * @memberof rendering\n */\nexport type ShaderWithGroups = ShaderWithGroupsDescriptor & ShaderWith;\nexport interface IShaderWithGroups extends ShaderWithGroupsDescriptor, ShaderBase {}\n\n/**\n * A descriptor for a shader with resources. This is an easier way to work with uniforms.\n * especially when you are not working with bind groups\n * @memberof rendering\n */\nexport type ShaderWithResources = ShaderWithResourcesDescriptor & ShaderWith;\nexport interface IShaderWithResources extends ShaderWithResourcesDescriptor, ShaderBase {}\n\nexport type ShaderDescriptor = ShaderWithGroups & ShaderWithResources;\n\ntype GlShaderFromWith = {\n    gpu?: GpuProgramOptions,\n    gl: GlProgramOptions\n};\ntype GpuShaderFromWith = {\n    gpu: GpuProgramOptions,\n    gl?: GlProgramOptions\n};\nexport type ShaderFromGroups = (GlShaderFromWith | GpuShaderFromWith) & Omit<ShaderWithGroups, 'glProgram' | 'gpuProgram'>;\nexport type ShaderFromResources = (GlShaderFromWith | GpuShaderFromWith)\n& Omit<ShaderWithResources, 'glProgram' | 'gpuProgram'>;\n\n/**\n * The Shader class is an integral part of the PixiJS graphics pipeline.\n * Central to rendering in PixiJS are two key elements: A [shader] and a [geometry].\n * The shader incorporates a {@link GlProgram} for WebGL or a {@link GpuProgram} for WebGPU,\n * instructing the respective technology on how to render the geometry.\n *\n * The primary goal of the Shader class is to offer a unified interface compatible with both WebGL and WebGPU.\n * When constructing a shader, you need to provide both a WebGL program and a WebGPU program due to the distinctions\n * between the two rendering engines. If only one is provided, the shader won't function with the omitted renderer.\n *\n * Both WebGL and WebGPU utilize the same resource object when passed into the shader.\n * Post-creation, the shader's interface remains consistent across both WebGL and WebGPU.\n * The sole distinction lies in whether a glProgram or a gpuProgram is employed.\n *\n * Modifying shader uniforms, which can encompass:\n *  - TextureSampler {@link TextureStyle}\n *  - TextureSource {@link TextureSource}\n *  - UniformsGroups {@link UniformGroup}\n * @example\n *\n * const shader = new Shader({\n *     glProgram: glProgram,\n *     gpuProgram: gpuProgram,\n *     resources: {\n *         uTexture: texture.source,\n *         uSampler: texture.sampler,\n *         uColor: [1, 0, 0, 1],\n *     },\n * });\n *\n * // update the uniforms\n * shader.resources.uColor[1] = 1;\n * shader.resources.uTexture = texture2.source;\n * @class\n * @memberof rendering\n */\nexport class Shader extends EventEmitter<{'destroy': Shader}>\n{\n    /** An instance of the GPU program used by the WebGPU renderer */\n    public gpuProgram: GpuProgram;\n    /** An instance of the GL program used by the WebGL renderer */\n    public glProgram: GlProgram;\n    /**\n     * A number that uses two bits on whether the shader is compatible with the WebGL renderer and/or the WebGPU renderer.\n     * 0b00 - not compatible with either\n     * 0b01 - compatible with WebGL\n     * 0b10 - compatible with WebGPU\n     * This is automatically set based on if a {@link GlProgram} or {@link GpuProgram} is provided.\n     */\n    public readonly compatibleRenderers: number;\n    /** */\n    public groups: Record<number, BindGroup>;\n    /** A record of the resources used by the shader. */\n    public resources: Record<string, any>;\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     * @ignore\n     */\n    public _uniformBindMap: Record<number, Record<number, string>> = Object.create(null);\n    private readonly _ownedBindGroups: BindGroup[] = [];\n\n    /**\n     * Fired after rendering finishes.\n     * @event rendering.Shader#destroy\n     */\n\n    /**\n     * There are two ways to create a shader.\n     * one is to pass in resources which is a record of uniform groups and resources.\n     * another is to pass in groups which is a record of {@link BindGroup}s.\n     * this second method is really to make use of shared {@link BindGroup}s.\n     * For most cases you will want to use resources as they are easier to work with.\n     * USe Groups if you want to share {@link BindGroup}s between shaders.\n     * you cannot mix and match - either use resources or groups.\n     * @param {ShaderWithResourcesDescriptor} options - The options for the shader using ShaderWithResourcesDescriptor.\n     */\n    constructor(options: ShaderWithResources);\n    constructor(options: ShaderWithGroups);\n    constructor(options: ShaderDescriptor)\n    {\n        super();\n\n        /* eslint-disable prefer-const */\n        let {\n            gpuProgram,\n            glProgram,\n            groups,\n            resources,\n            compatibleRenderers,\n            groupMap\n        } = options;\n        /* eslint-enable prefer-const */\n\n        this.gpuProgram = gpuProgram;\n        this.glProgram = glProgram;\n\n        if (compatibleRenderers === undefined)\n        {\n            compatibleRenderers = 0;\n\n            if (gpuProgram)compatibleRenderers |= RendererType.WEBGPU;\n            if (glProgram)compatibleRenderers |= RendererType.WEBGL;\n        }\n\n        this.compatibleRenderers = compatibleRenderers;\n\n        const nameHash: Record<string, GroupsData> = {};\n\n        if (!resources && !groups)\n        {\n            resources = {};\n        }\n\n        if (resources && groups)\n        {\n            throw new Error('[Shader] Cannot have both resources and groups');\n        }\n        else if (!gpuProgram && groups && !groupMap)\n        {\n            throw new Error('[Shader] No group map or WebGPU shader provided - consider using resources instead.');\n        }\n        else if (!gpuProgram && groups && groupMap)\n        {\n            for (const i in groupMap)\n            {\n                for (const j in groupMap[i])\n                {\n                    const uniformName = groupMap[i][j];\n\n                    nameHash[uniformName] = {\n                        group: i as unknown as number,\n                        binding: j as unknown as number,\n                        name: uniformName\n                    };\n                }\n            }\n        }\n        else if (gpuProgram && groups && !groupMap)\n        {\n            const groupData = gpuProgram.structsAndGroups.groups;\n\n            groupMap = {};\n\n            groupData.forEach((data) =>\n            {\n                groupMap[data.group] = groupMap[data.group] || {};\n                groupMap[data.group][data.binding] = data.name;\n\n                nameHash[data.name] = data;\n            });\n        }\n        else if (resources)\n        {\n            if (!gpuProgram)\n            {\n                // build out a dummy bind group..\n                groupMap = {};\n                groups = {\n                    99: new BindGroup(),\n                };\n\n                this._ownedBindGroups.push(groups[99]);\n\n                let bindTick = 0;\n\n                for (const i in resources)\n                {\n                    // Yes i know this is a little strange, but wil line up the shaders neatly\n                    // basically we want to be driven by how webGPU does things.\n                    // so making a fake group will work and not affect gpu as it means no gpu shader was provided..\n                    nameHash[i] = { group: 99, binding: bindTick, name: i };\n\n                    groupMap[99] = groupMap[99] || {};\n                    groupMap[99][bindTick] = i;\n\n                    bindTick++;\n                }\n            }\n            else\n            {\n                const groupData = gpuProgram.structsAndGroups.groups;\n\n                groupMap = {};\n\n                groupData.forEach((data) =>\n                {\n                    groupMap[data.group] = groupMap[data.group] || {};\n                    groupMap[data.group][data.binding] = data.name;\n\n                    nameHash[data.name] = data;\n                });\n            }\n\n            groups = {};\n\n            for (const i in resources)\n            {\n                const name = i;\n                let value = resources[i];\n\n                if (!(value.source) && !(value as BindResource)._resourceType)\n                {\n                    value = new UniformGroup(value);\n                }\n\n                const data = nameHash[name];\n\n                if (data)\n                {\n                    if (!groups[data.group])\n                    {\n                        groups[data.group] = new BindGroup();\n\n                        this._ownedBindGroups.push(groups[data.group]);\n                    }\n\n                    groups[data.group].setResource(value, data.binding);\n                }\n            }\n        }\n\n        this.groups = groups;\n        this._uniformBindMap = groupMap;\n\n        this.resources = this._buildResourceAccessor(groups, nameHash);\n    }\n\n    /**\n     * Sometimes a resource group will be provided later (for example global uniforms)\n     * In such cases, this method can be used to let the shader know about the group.\n     * @param name - the name of the resource group\n     * @param groupIndex - the index of the group (should match the webGPU shader group location)\n     * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n     */\n    public addResource(name: string, groupIndex: number, bindIndex: number): void\n    {\n        this._uniformBindMap[groupIndex] ||= {};\n\n        this._uniformBindMap[groupIndex][bindIndex] ||= name;\n\n        if (!this.groups[groupIndex])\n        {\n            this.groups[groupIndex] = new BindGroup();\n            this._ownedBindGroups.push(this.groups[groupIndex]);\n        }\n    }\n\n    private _buildResourceAccessor(groups: ShaderGroups, nameHash: Record<string, GroupsData>)\n    {\n        const uniformsOut = {};\n\n        for (const i in nameHash)\n        {\n            const data = nameHash[i];\n\n            // add getter setter for uniforms\n            Object.defineProperty(uniformsOut, data.name, {\n                get()\n                {\n                    return groups[data.group].getResource(data.binding);\n                },\n                set(value)\n                {\n                    groups[data.group].setResource(value, data.binding);\n                }\n            });\n        }\n\n        return uniformsOut;\n    }\n\n    /**\n     * Use to destroy the shader when its not longer needed.\n     * It will destroy the resources and remove listeners.\n     * @param destroyPrograms - if the programs should be destroyed as well.\n     * Make sure its not being used by other shaders!\n     */\n    public destroy(destroyPrograms = false): void\n    {\n        this.emit('destroy', this);\n\n        if (destroyPrograms)\n        {\n            this.gpuProgram?.destroy();\n            this.glProgram?.destroy();\n        }\n\n        this.gpuProgram = null;\n        this.glProgram = null;\n\n        this.removeAllListeners();\n\n        this._uniformBindMap = null;\n\n        this._ownedBindGroups.forEach((bindGroup) =>\n        {\n            bindGroup.destroy();\n        });\n\n        (this._ownedBindGroups as null) = null;\n\n        this.resources = null;\n        this.groups = null;\n    }\n\n    /**\n     * A short hand function to create a shader based of a vertex and fragment shader.\n     * @param options\n     * @returns A shiny new PixiJS shader!\n     */\n    public static from(options: ShaderFromGroups): Shader;\n    public static from(options: ShaderFromResources): Shader;\n    public static from(options: ShaderFromGroups & ShaderFromResources): Shader\n    {\n        const { gpu, gl, ...rest } = options;\n\n        let gpuProgram: GpuProgram;\n        let glProgram: GlProgram;\n\n        if (gpu)\n        {\n            gpuProgram = GpuProgram.from(gpu);\n        }\n\n        if (gl)\n        {\n            glProgram = GlProgram.from(gl);\n        }\n\n        return new Shader({\n            gpuProgram,\n            glProgram,\n            ...rest\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}