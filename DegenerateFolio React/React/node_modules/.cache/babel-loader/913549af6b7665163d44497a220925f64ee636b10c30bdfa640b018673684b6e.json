{"ast":null,"code":"import { u8aConcat } from '@polkadot/util';\nimport { hasher } from '../secp256k1/hasher.js';\nimport { encodeAddress } from './encode.js';\n/**\n * @name evmToAddress\n * @summary Converts an EVM address to its corresponding SS58 address.\n */\nexport function evmToAddress(evmAddress, ss58Format) {\n  let hashType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'blake2';\n  const message = u8aConcat('evm:', evmAddress);\n  if (message.length !== 24) {\n    throw new Error(\"Converting \".concat(evmAddress, \": Invalid evm address length\"));\n  }\n  return encodeAddress(hasher(hashType, message), ss58Format);\n}","map":{"version":3,"names":["u8aConcat","hasher","encodeAddress","evmToAddress","evmAddress","ss58Format","hashType","arguments","length","undefined","message","Error","concat"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/address/evmToAddress.js"],"sourcesContent":["import { u8aConcat } from '@polkadot/util';\nimport { hasher } from '../secp256k1/hasher.js';\nimport { encodeAddress } from './encode.js';\n/**\n * @name evmToAddress\n * @summary Converts an EVM address to its corresponding SS58 address.\n */\nexport function evmToAddress(evmAddress, ss58Format, hashType = 'blake2') {\n    const message = u8aConcat('evm:', evmAddress);\n    if (message.length !== 24) {\n        throw new Error(`Converting ${evmAddress}: Invalid evm address length`);\n    }\n    return encodeAddress(hasher(hashType, message), ss58Format);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,aAAa,QAAQ,aAAa;AAC3C;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,UAAU,EAAEC,UAAU,EAAuB;EAAA,IAArBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,QAAQ;EACpE,MAAMG,OAAO,GAAGV,SAAS,CAAC,MAAM,EAAEI,UAAU,CAAC;EAC7C,IAAIM,OAAO,CAACF,MAAM,KAAK,EAAE,EAAE;IACvB,MAAM,IAAIG,KAAK,eAAAC,MAAA,CAAeR,UAAU,iCAA8B,CAAC;EAC3E;EACA,OAAOF,aAAa,CAACD,MAAM,CAACK,QAAQ,EAAEI,OAAO,CAAC,EAAEL,UAAU,CAAC;AAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}