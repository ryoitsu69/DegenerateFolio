{"ast":null,"code":"import parse from 'parse-svg-path';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\"use strict\";\nfunction SVGToGraphicsPath(svgPath, path) {\n  const commands = parse(svgPath);\n  const subpaths = [];\n  let currentSubPath = null;\n  let lastX = 0;\n  let lastY = 0;\n  for (let i = 0; i < commands.length; i++) {\n    const command = commands[i];\n    const type = command[0];\n    const data = command;\n    switch (type) {\n      case \"M\":\n        lastX = data[1];\n        lastY = data[2];\n        path.moveTo(lastX, lastY);\n        break;\n      case \"m\":\n        lastX += data[1];\n        lastY += data[2];\n        path.moveTo(lastX, lastY);\n        break;\n      case \"H\":\n        lastX = data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"h\":\n        lastX += data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"V\":\n        lastY = data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"v\":\n        lastY += data[1];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"L\":\n        lastX = data[1];\n        lastY = data[2];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"l\":\n        lastX += data[1];\n        lastY += data[2];\n        path.lineTo(lastX, lastY);\n        break;\n      case \"C\":\n        lastX = data[5];\n        lastY = data[6];\n        path.bezierCurveTo(data[1], data[2], data[3], data[4], lastX, lastY);\n        break;\n      case \"c\":\n        path.bezierCurveTo(lastX + data[1], lastY + data[2], lastX + data[3], lastY + data[4], lastX + data[5], lastY + data[6]);\n        lastX += data[5];\n        lastY += data[6];\n        break;\n      case \"S\":\n        lastX = data[3];\n        lastY = data[4];\n        path.bezierCurveToShort(data[1], data[2], lastX, lastY);\n        break;\n      case \"s\":\n        path.bezierCurveToShort(lastX + data[1], lastY + data[2], lastX + data[3], lastY + data[4]);\n        lastX += data[3];\n        lastY += data[4];\n        break;\n      case \"Q\":\n        lastX = data[3];\n        lastY = data[4];\n        path.quadraticCurveTo(data[1], data[2], lastX, lastY);\n        break;\n      case \"q\":\n        path.quadraticCurveTo(lastX + data[1], lastY + data[2], lastX + data[3], lastY + data[4]);\n        lastX += data[3];\n        lastY += data[4];\n        break;\n      case \"T\":\n        lastX = data[1];\n        lastY = data[2];\n        path.quadraticCurveToShort(lastX, lastY);\n        break;\n      case \"t\":\n        lastX += data[1];\n        lastY += data[2];\n        path.quadraticCurveToShort(lastX, lastY);\n        break;\n      case \"A\":\n        lastX = data[6];\n        lastY = data[7];\n        path.arcToSvg(data[1], data[2], data[3], data[4], data[5], lastX, lastY);\n        break;\n      case \"a\":\n        lastX += data[6];\n        lastY += data[7];\n        path.arcToSvg(data[1], data[2], data[3], data[4], data[5], lastX, lastY);\n        break;\n      case \"Z\":\n      case \"z\":\n        path.closePath();\n        if (subpaths.length > 0) {\n          currentSubPath = subpaths.pop();\n          if (currentSubPath) {\n            lastX = currentSubPath.startX;\n            lastY = currentSubPath.startY;\n          } else {\n            lastX = 0;\n            lastY = 0;\n          }\n        }\n        currentSubPath = null;\n        break;\n      default:\n        warn(`Unknown SVG path command: ${type}`);\n    }\n    if (type !== \"Z\" && type !== \"z\") {\n      if (currentSubPath === null) {\n        currentSubPath = {\n          startX: lastX,\n          startY: lastY\n        };\n        subpaths.push(currentSubPath);\n      }\n    }\n  }\n  return path;\n}\nexport { SVGToGraphicsPath };","map":{"version":3,"names":["SVGToGraphicsPath","svgPath","path","commands","parse","subpaths","currentSubPath","lastX","lastY","i","length","command","type","data","moveTo","lineTo","bezierCurveTo","bezierCurveToShort","quadraticCurveTo","quadraticCurveToShort","arcToSvg","closePath","pop","startX","startY","warn","push"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/graphics/shared/svg/SVGToGraphicsPath.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport parse from 'parse-svg-path';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { GraphicsPath } from '../path/GraphicsPath';\n\ninterface SubPath\n{\n    startX: number;\n    startY: number;\n}\n\n// TODO optimise and cache the paths?\nexport function SVGToGraphicsPath(svgPath: string, path: GraphicsPath): GraphicsPath\n{\n    const commands = parse(svgPath);\n\n    const subpaths: SubPath[] = [];\n    let currentSubPath: SubPath | null = null;\n\n    let lastX = 0;\n    let lastY = 0;\n\n    for (let i = 0; i < commands.length; i++)\n    {\n        const command = commands[i];\n        const type = command[0];\n        const data = command; // alias for 1-based referencing\n\n        switch (type)\n        {\n            case 'M':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'm':\n\n                lastX += data[1];\n                lastY += data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'H':\n                lastX = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'h':\n                lastX += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'V':\n                lastY = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'v':\n                lastY += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'L':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'l':\n                lastX += data[1];\n                lastY += data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'C':\n\n                lastX = data[5];\n                lastY = data[6];\n\n                path.bezierCurveTo(\n                    data[1], data[2],\n                    data[3], data[4],\n                    lastX, lastY\n                );\n                break;\n            case 'c':\n                path.bezierCurveTo(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4],\n                    lastX + data[5], lastY + data[6]\n                );\n\n                lastX += data[5];\n                lastY += data[6];\n                break;\n            case 'S':\n                lastX = data[3];\n                lastY = data[4];\n\n                path.bezierCurveToShort(\n                    data[1], data[2],\n                    lastX, lastY\n                );\n                break;\n            case 's':\n                path.bezierCurveToShort(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4],\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'Q':\n                lastX = data[3];\n                lastY = data[4];\n\n                path.quadraticCurveTo(\n                    data[1], data[2],\n                    lastX, lastY\n                );\n                break;\n            case 'q':\n                path.quadraticCurveTo(\n                    lastX + data[1], lastY + data[2],\n                    lastX + data[3], lastY + data[4]\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'T':\n                lastX = data[1];\n                lastY = data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n                break;\n            case 't':\n                lastX += data[1];\n                lastY += data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY\n                );\n                break;\n            case 'A':\n                lastX = data[6];\n                lastY = data[7];\n\n                path.arcToSvg(\n                    data[1],\n                    data[2],\n                    data[3],\n                    data[4],\n                    data[5],\n                    lastX, lastY\n                );\n                break;\n            case 'a':\n                lastX += data[6];\n                lastY += data[7];\n\n                path.arcToSvg(\n                    data[1],\n                    data[2],\n                    data[3],\n                    data[4],\n                    data[5],\n                    lastX, lastY\n                );\n                break;\n            case 'Z':\n            case 'z':\n                path.closePath();\n                if (subpaths.length > 0)\n                {\n                    currentSubPath = subpaths.pop();\n                    if (currentSubPath)\n                    {\n                        lastX = currentSubPath.startX;\n                        lastY = currentSubPath.startY;\n                    }\n                    else\n                    {\n                        lastX = 0;\n                        lastY = 0;\n                    }\n                }\n                currentSubPath = null;\n                break;\n            default:\n                // #if _DEBUG\n                warn(`Unknown SVG path command: ${type}`);\n                // #endif\n        }\n\n        if (type !== 'Z' && type !== 'z')\n        {\n            if (currentSubPath === null)\n            {\n                currentSubPath = { startX: lastX, startY: lastY };\n                subpaths.push(currentSubPath);\n            }\n        }\n    }\n\n    return path;\n}\n"],"mappings":";;;AAagB,SAAAA,kBAAkBC,OAAA,EAAiBC,IACnD;EACU,MAAAC,QAAA,GAAWC,KAAA,CAAMH,OAAO;EAE9B,MAAMI,QAAA,GAAsB,EAAC;EAC7B,IAAIC,cAAiC;EAErC,IAAIC,KAAQ;EACZ,IAAIC,KAAQ;EAEZ,SAASC,CAAI,MAAGA,CAAI,GAAAN,QAAA,CAASO,MAAA,EAAQD,CACrC;IACU,MAAAE,OAAA,GAAUR,QAAA,CAASM,CAAC;IACpB,MAAAG,IAAA,GAAOD,OAAA,CAAQ,CAAC;IACtB,MAAME,IAAO,GAAAF,OAAA;IAEb,QAAQC,IACR;MACI,KAAK;QACDL,KAAA,GAAQM,IAAA,CAAK,CAAC;QACdL,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAY,MAAA,CAAOP,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QAEDD,KAAA,IAASM,IAAA,CAAK,CAAC;QACfL,KAAA,IAASK,IAAA,CAAK,CAAC;QAEVX,IAAA,CAAAY,MAAA,CAAOP,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QACDD,KAAA,GAAQM,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAa,MAAA,CAAOR,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QACDD,KAAA,IAASM,IAAA,CAAK,CAAC;QAEVX,IAAA,CAAAa,MAAA,CAAOR,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QACDA,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAa,MAAA,CAAOR,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QACDA,KAAA,IAASK,IAAA,CAAK,CAAC;QAEVX,IAAA,CAAAa,MAAA,CAAOR,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QACDD,KAAA,GAAQM,IAAA,CAAK,CAAC;QACdL,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAa,MAAA,CAAOR,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QACDD,KAAA,IAASM,IAAA,CAAK,CAAC;QACfL,KAAA,IAASK,IAAA,CAAK,CAAC;QAEVX,IAAA,CAAAa,MAAA,CAAOR,KAAA,EAAOC,KAAK;QACxB;MACJ,KAAK;QAEDD,KAAA,GAAQM,IAAA,CAAK,CAAC;QACdL,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAc,aAAA,CACDH,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,GACfA,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,GACfN,KAAA,EAAOC,KAAA,CACX;QACA;MACJ,KAAK;QACIN,IAAA,CAAAc,aAAA,CACDT,KAAA,GAAQM,IAAA,CAAK,CAAC,GAAGL,KAAA,GAAQK,IAAA,CAAK,CAAC,GAC/BN,KAAA,GAAQM,IAAA,CAAK,CAAC,GAAGL,KAAA,GAAQK,IAAA,CAAK,CAAC,GAC/BN,KAAA,GAAQM,IAAA,CAAK,CAAC,GAAGL,KAAA,GAAQK,IAAA,CAAK,CAAC,EACnC;QAEAN,KAAA,IAASM,IAAA,CAAK,CAAC;QACfL,KAAA,IAASK,IAAA,CAAK,CAAC;QACf;MACJ,KAAK;QACDN,KAAA,GAAQM,IAAA,CAAK,CAAC;QACdL,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAe,kBAAA,CACDJ,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,GACfN,KAAA,EAAOC,KAAA,CACX;QACA;MACJ,KAAK;QACIN,IAAA,CAAAe,kBAAA,CACDV,KAAA,GAAQM,IAAA,CAAK,CAAC,GAAGL,KAAA,GAAQK,IAAA,CAAK,CAAC,GAC/BN,KAAA,GAAQM,IAAA,CAAK,CAAC,GAAGL,KAAA,GAAQK,IAAA,CAAK,CAAC,EACnC;QAEAN,KAAA,IAASM,IAAA,CAAK,CAAC;QACfL,KAAA,IAASK,IAAA,CAAK,CAAC;QACf;MACJ,KAAK;QACDN,KAAA,GAAQM,IAAA,CAAK,CAAC;QACdL,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAgB,gBAAA,CACDL,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,GACfN,KAAA,EAAOC,KAAA,CACX;QACA;MACJ,KAAK;QACIN,IAAA,CAAAgB,gBAAA,CACDX,KAAA,GAAQM,IAAA,CAAK,CAAC,GAAGL,KAAA,GAAQK,IAAA,CAAK,CAAC,GAC/BN,KAAA,GAAQM,IAAA,CAAK,CAAC,GAAGL,KAAA,GAAQK,IAAA,CAAK,CAAC,EACnC;QAEAN,KAAA,IAASM,IAAA,CAAK,CAAC;QACfL,KAAA,IAASK,IAAA,CAAK,CAAC;QACf;MACJ,KAAK;QACDN,KAAA,GAAQM,IAAA,CAAK,CAAC;QACdL,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAiB,qBAAA,CACDZ,KAAA,EAAOC,KAAA,CACX;QACA;MACJ,KAAK;QACDD,KAAA,IAASM,IAAA,CAAK,CAAC;QACfL,KAAA,IAASK,IAAA,CAAK,CAAC;QAEVX,IAAA,CAAAiB,qBAAA,CACDZ,KAAA,EAAOC,KAAA,CACX;QACA;MACJ,KAAK;QACDD,KAAA,GAAQM,IAAA,CAAK,CAAC;QACdL,KAAA,GAAQK,IAAA,CAAK,CAAC;QAETX,IAAA,CAAAkB,QAAA,CACDP,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNN,KAAA,EAAOC,KAAA,CACX;QACA;MACJ,KAAK;QACDD,KAAA,IAASM,IAAA,CAAK,CAAC;QACfL,KAAA,IAASK,IAAA,CAAK,CAAC;QAEVX,IAAA,CAAAkB,QAAA,CACDP,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNA,IAAA,CAAK,CAAC,GACNN,KAAA,EAAOC,KAAA,CACX;QACA;MACJ,KAAK;MACL,KAAK;QACDN,IAAA,CAAKmB,SAAU;QACX,IAAAhB,QAAA,CAASK,MAAA,GAAS,CACtB;UACIJ,cAAA,GAAiBD,QAAA,CAASiB,GAAI;UAC9B,IAAIhB,cACJ;YACIC,KAAA,GAAQD,cAAe,CAAAiB,MAAA;YACvBf,KAAA,GAAQF,cAAe,CAAAkB,MAAA;UAAA,CAG3B;YACYjB,KAAA;YACAC,KAAA;UAAA;QACZ;QAEaF,cAAA;QACjB;MACJ;QAESmB,IAAA,8BAA6Bb,IAAM;IAAA;IAI5C,IAAAA,IAAA,KAAS,GAAO,IAAAA,IAAA,KAAS,GAC7B;MACI,IAAIN,cAAA,KAAmB,IACvB;QACIA,cAAA,GAAiB;UAAEiB,MAAA,EAAQhB,KAAO;UAAAiB,MAAA,EAAQhB;QAAM;QAChDH,QAAA,CAASqB,IAAA,CAAKpB,cAAc;MAAA;IAChC;EACJ;EAGG,OAAAJ,IAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}