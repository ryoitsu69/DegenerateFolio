{"ast":null,"code":"import { definedProps } from '../container/utils/definedProps.mjs';\nimport { Mesh } from '../mesh/shared/Mesh.mjs';\nimport { RopeGeometry } from './RopeGeometry.mjs';\n\"use strict\";\nconst _MeshRope = class _MeshRope extends Mesh {\n  /**\n   * Note: The wrap mode of the texture is set to REPEAT if `textureScale` is positive.\n   * @param options\n   * @param options.texture - The texture to use on the rope.\n   * @param options.points - An array of {@link math.Point} objects to construct this rope.\n   * @param {number} options.textureScale - Optional. Positive values scale rope texture\n   * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n   * and downsampling here. If set to zero, texture will be stretched instead.\n   */\n  constructor(options) {\n    const {\n      texture,\n      points,\n      textureScale,\n      ...rest\n    } = {\n      ..._MeshRope.defaultOptions,\n      ...options\n    };\n    const ropeGeometry = new RopeGeometry(definedProps({\n      width: texture.height,\n      points,\n      textureScale\n    }));\n    if (textureScale > 0) {\n      texture.source.style.addressMode = \"repeat\";\n    }\n    super(definedProps({\n      ...rest,\n      texture,\n      geometry: ropeGeometry\n    }));\n    this.autoUpdate = true;\n    this.onRender = this._render;\n  }\n  _render() {\n    const geometry = this.geometry;\n    if (this.autoUpdate || geometry._width !== this.texture.height) {\n      geometry._width = this.texture.height;\n      geometry.update();\n    }\n  }\n};\n_MeshRope.defaultOptions = {\n  textureScale: 0\n};\nlet MeshRope = _MeshRope;\nexport { MeshRope };","map":{"version":3,"names":["_MeshRope","Mesh","constructor","options","texture","points","textureScale","rest","defaultOptions","ropeGeometry","RopeGeometry","definedProps","width","height","source","style","addressMode","geometry","autoUpdate","onRender","_render","_width","update","MeshRope"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/mesh-simple/MeshRope.ts"],"sourcesContent":["import { definedProps } from '../container/utils/definedProps';\nimport { Mesh } from '../mesh/shared/Mesh';\nimport { RopeGeometry } from './RopeGeometry';\n\nimport type { PointData } from '../../maths/point/PointData';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { MeshOptions } from '../mesh/shared/Mesh';\n\n/**\n * Constructor options used for `MeshRope` instances.\n * ```js\n * const meshRope = new MeshRope({\n *    texture: Texture.from('snake.png'),\n *    points: [new Point(0, 0), new Point(100, 0)],\n *    textureScale: 0,\n * });\n * ```\n * @see {@link scene.MeshRope}\n * @memberof scene\n */\nexport interface MeshRopeOptions extends Omit<MeshOptions, 'geometry'>\n{\n    /** The texture to use on the rope. */\n    texture: Texture;\n    /** An array of points that determine the rope. */\n    points: PointData[];\n    /**\n     * Rope texture scale, if zero then the rope texture is stretched.\n     * Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be stretched instead.\n     */\n    textureScale?: number;\n}\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n * @example\n * import { Point, MeshRope, Texture } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * };\n * const rope = new MeshRope(Texture.from('snake.png'), points);\n * @memberof scene\n */\nexport class MeshRope extends Mesh\n{\n    public static defaultOptions: Partial<MeshRopeOptions> = {\n        textureScale: 0,\n    };\n\n    /** re-calculate vertices by rope points each frame */\n    public autoUpdate: boolean;\n\n    /**\n     * Note: The wrap mode of the texture is set to REPEAT if `textureScale` is positive.\n     * @param options\n     * @param options.texture - The texture to use on the rope.\n     * @param options.points - An array of {@link math.Point} objects to construct this rope.\n     * @param {number} options.textureScale - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be stretched instead.\n     */\n    constructor(options: MeshRopeOptions)\n    {\n        const { texture, points, textureScale, ...rest } = { ...MeshRope.defaultOptions, ...options };\n        const ropeGeometry = new RopeGeometry(definedProps({ width: texture.height, points, textureScale }));\n\n        if (textureScale > 0)\n        {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.source.style.addressMode = 'repeat';\n        }\n        super(definedProps({\n            ...rest,\n            texture,\n            geometry: ropeGeometry,\n        }));\n\n        this.autoUpdate = true;\n\n        this.onRender = this._render;\n    }\n\n    private _render(): void\n    {\n        const geometry: RopeGeometry = this.geometry as any;\n\n        if (this.autoUpdate || geometry._width !== this.texture.height)\n        {\n            geometry._width = this.texture.height;\n            geometry.update();\n        }\n    }\n}\n"],"mappings":";;;;AA8CO,MAAMA,SAAA,GAAN,MAAMA,SAAA,SAAiBC,IAC9B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAiBIC,YAAYC,OACZ;IACI,MAAM;MAAEC,OAAA;MAASC,MAAQ;MAAAC,YAAA;MAAc,GAAGC;IAAA,CAAS;MAAE,GAAGP,SAAA,CAASQ,cAAgB;MAAA,GAAGL;IAAQ;IACtF,MAAAM,YAAA,GAAe,IAAIC,YAAA,CAAaC,YAAa;MAAEC,KAAO,EAAAR,OAAA,CAAQS,MAAQ;MAAAR,MAAA;MAAQC;IAAa,CAAC,CAAC;IAEnG,IAAIA,YAAA,GAAe,CACnB;MAEYF,OAAA,CAAAU,MAAA,CAAOC,KAAA,CAAMC,WAAc;IAAA;IAEvC,MAAML,YAAa;MACf,GAAGJ,IAAA;MACHH,OAAA;MACAa,QAAU,EAAAR;IAAA,CACb,CAAC;IAEF,KAAKS,UAAa;IAElB,KAAKC,QAAA,GAAW,IAAK,CAAAC,OAAA;EAAA;EAGjBA,OACRA,CAAA;IACI,MAAMH,QAAA,GAAyB,IAAK,CAAAA,QAAA;IAEpC,IAAI,KAAKC,UAAc,IAAAD,QAAA,CAASI,MAAW,UAAKjB,OAAA,CAAQS,MACxD;MACaI,QAAA,CAAAI,MAAA,GAAS,KAAKjB,OAAQ,CAAAS,MAAA;MAC/BI,QAAA,CAASK,MAAO;IAAA;EACpB;AAER;AAjDatB,SAAA,CAEKQ,cAA2C;EACrDF,YAAc;AAClB;AAJG,IAAMiB,QAAN,GAAAvB,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}