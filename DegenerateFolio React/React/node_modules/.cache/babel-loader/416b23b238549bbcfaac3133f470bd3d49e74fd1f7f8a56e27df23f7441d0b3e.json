{"ast":null,"code":"\"use strict\";\n\nconst compressedFormatMap = {\n  \"bc1-rgba-unorm\": true,\n  \"bc1-rgba-unorm-srgb\": true,\n  \"bc2-rgba-unorm\": true,\n  \"bc2-rgba-unorm-srgb\": true,\n  \"bc3-rgba-unorm\": true,\n  \"bc3-rgba-unorm-srgb\": true,\n  \"bc4-r-unorm\": true,\n  \"bc4-r-snorm\": true,\n  \"bc5-rg-unorm\": true,\n  \"bc5-rg-snorm\": true,\n  \"bc6h-rgb-ufloat\": true,\n  \"bc6h-rgb-float\": true,\n  \"bc7-rgba-unorm\": true,\n  \"bc7-rgba-unorm-srgb\": true,\n  // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  \"etc2-rgb8unorm\": true,\n  \"etc2-rgb8unorm-srgb\": true,\n  \"etc2-rgb8a1unorm\": true,\n  \"etc2-rgb8a1unorm-srgb\": true,\n  \"etc2-rgba8unorm\": true,\n  \"etc2-rgba8unorm-srgb\": true,\n  \"eac-r11unorm\": true,\n  \"eac-r11snorm\": true,\n  \"eac-rg11unorm\": true,\n  \"eac-rg11snorm\": true,\n  // ASTC compressed formats usable if \"texture-compression-astc\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  \"astc-4x4-unorm\": true,\n  \"astc-4x4-unorm-srgb\": true,\n  \"astc-5x4-unorm\": true,\n  \"astc-5x4-unorm-srgb\": true,\n  \"astc-5x5-unorm\": true,\n  \"astc-5x5-unorm-srgb\": true,\n  \"astc-6x5-unorm\": true,\n  \"astc-6x5-unorm-srgb\": true,\n  \"astc-6x6-unorm\": true,\n  \"astc-6x6-unorm-srgb\": true,\n  \"astc-8x5-unorm\": true,\n  \"astc-8x5-unorm-srgb\": true,\n  \"astc-8x6-unorm\": true,\n  \"astc-8x6-unorm-srgb\": true,\n  \"astc-8x8-unorm\": true,\n  \"astc-8x8-unorm-srgb\": true,\n  \"astc-10x5-unorm\": true,\n  \"astc-10x5-unorm-srgb\": true,\n  \"astc-10x6-unorm\": true,\n  \"astc-10x6-unorm-srgb\": true,\n  \"astc-10x8-unorm\": true,\n  \"astc-10x8-unorm-srgb\": true,\n  \"astc-10x10-unorm\": true,\n  \"astc-10x10-unorm-srgb\": true,\n  \"astc-12x10-unorm\": true,\n  \"astc-12x10-unorm-srgb\": true,\n  \"astc-12x12-unorm\": true,\n  \"astc-12x12-unorm-srgb\": true\n};\nconst glUploadCompressedTextureResource = {\n  id: \"compressed\",\n  upload(source, glTexture, gl) {\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const compressed = !!compressedFormatMap[source.format];\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      if (compressed) {\n        gl.compressedTexImage2D(gl.TEXTURE_2D, i, glTexture.internalFormat, mipWidth, mipHeight, 0, levelBuffer);\n      } else {\n        gl.texImage2D(gl.TEXTURE_2D, i, glTexture.internalFormat, mipWidth, mipHeight, 0, glTexture.format, glTexture.type, levelBuffer);\n      }\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\nexport { glUploadCompressedTextureResource };","map":{"version":3,"names":["compressedFormatMap","glUploadCompressedTextureResource","id","upload","source","glTexture","gl","pixelStorei","UNPACK_ALIGNMENT","mipWidth","pixelWidth","mipHeight","pixelHeight","compressed","format","i","resource","length","levelBuffer","compressedTexImage2D","TEXTURE_2D","internalFormat","texImage2D","type","Math","max"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.ts"],"sourcesContent":["import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nconst compressedFormatMap: Record<string, boolean> = {\n    'bc1-rgba-unorm': true,\n    'bc1-rgba-unorm-srgb': true,\n    'bc2-rgba-unorm': true,\n    'bc2-rgba-unorm-srgb': true,\n    'bc3-rgba-unorm': true,\n    'bc3-rgba-unorm-srgb': true,\n    'bc4-r-unorm': true,\n    'bc4-r-snorm': true,\n    'bc5-rg-unorm': true,\n    'bc5-rg-snorm': true,\n    'bc6h-rgb-ufloat': true,\n    'bc6h-rgb-float': true,\n    'bc7-rgba-unorm': true,\n    'bc7-rgba-unorm-srgb': true,\n\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'etc2-rgb8unorm': true,\n    'etc2-rgb8unorm-srgb': true,\n    'etc2-rgb8a1unorm': true,\n    'etc2-rgb8a1unorm-srgb': true,\n    'etc2-rgba8unorm': true,\n    'etc2-rgba8unorm-srgb': true,\n    'eac-r11unorm': true,\n    'eac-r11snorm': true,\n    'eac-rg11unorm': true,\n    'eac-rg11snorm': true,\n\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'astc-4x4-unorm': true,\n    'astc-4x4-unorm-srgb': true,\n    'astc-5x4-unorm': true,\n    'astc-5x4-unorm-srgb': true,\n    'astc-5x5-unorm': true,\n    'astc-5x5-unorm-srgb': true,\n    'astc-6x5-unorm': true,\n    'astc-6x5-unorm-srgb': true,\n    'astc-6x6-unorm': true,\n    'astc-6x6-unorm-srgb': true,\n    'astc-8x5-unorm': true,\n    'astc-8x5-unorm-srgb': true,\n    'astc-8x6-unorm': true,\n    'astc-8x6-unorm-srgb': true,\n    'astc-8x8-unorm': true,\n    'astc-8x8-unorm-srgb': true,\n    'astc-10x5-unorm': true,\n    'astc-10x5-unorm-srgb': true,\n    'astc-10x6-unorm': true,\n    'astc-10x6-unorm-srgb': true,\n    'astc-10x8-unorm': true,\n    'astc-10x8-unorm-srgb': true,\n    'astc-10x10-unorm': true,\n    'astc-10x10-unorm-srgb': true,\n    'astc-12x10-unorm': true,\n    'astc-12x10-unorm-srgb': true,\n    'astc-12x12-unorm': true,\n    'astc-12x12-unorm-srgb': true,\n};\n\nexport const glUploadCompressedTextureResource = {\n\n    id: 'compressed',\n\n    upload(source: CompressedSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const compressed = !!compressedFormatMap[source.format];\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            if (compressed)\n            {\n                gl.compressedTexImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    levelBuffer\n                );\n            }\n            else\n            {\n                gl.texImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    glTexture.format, glTexture.type,\n                    levelBuffer);\n            }\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GLTextureUploader;\n\n"],"mappings":";;AAKA,MAAMA,mBAA+C;EACjD,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,aAAe;EACf,aAAe;EACf,cAAgB;EAChB,cAAgB;EAChB,iBAAmB;EACnB,gBAAkB;EAClB,gBAAkB;EAClB,qBAAuB;EAAA;EAAA;EAIvB,gBAAkB;EAClB,qBAAuB;EACvB,kBAAoB;EACpB,uBAAyB;EACzB,iBAAmB;EACnB,sBAAwB;EACxB,cAAgB;EAChB,cAAgB;EAChB,eAAiB;EACjB,eAAiB;EAAA;EAAA;EAIjB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,gBAAkB;EAClB,qBAAuB;EACvB,iBAAmB;EACnB,sBAAwB;EACxB,iBAAmB;EACnB,sBAAwB;EACxB,iBAAmB;EACnB,sBAAwB;EACxB,kBAAoB;EACpB,uBAAyB;EACzB,kBAAoB;EACpB,uBAAyB;EACzB,kBAAoB;EACpB,uBAAyB;AAC7B;AAEO,MAAMC,iCAAoC;EAE7CC,EAAI;EAEJC,OAAOC,MAA0B,EAAAC,SAAA,EAAsBC,EACvD;IACOA,EAAA,CAAAC,WAAA,CAAYD,EAAG,CAAAE,gBAAA,EAAkB,CAAC;IAErC,IAAIC,QAAA,GAAWL,MAAO,CAAAM,UAAA;IACtB,IAAIC,SAAA,GAAYP,MAAO,CAAAQ,WAAA;IAEvB,MAAMC,UAAa,IAAC,CAACb,mBAAA,CAAoBI,MAAA,CAAOU,MAAM;IAEtD,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIX,MAAO,CAAAY,QAAA,CAASC,MAAA,EAAQF,CAC5C;MACU,MAAAG,WAAA,GAAcd,MAAO,CAAAY,QAAA,CAASD,CAAC;MAErC,IAAIF,UACJ;QACOP,EAAA,CAAAa,oBAAA,CACCb,EAAG,CAAAc,UAAA,EAAYL,CAAA,EAAGV,SAAU,CAAAgB,cAAA,EAC5BZ,QAAA,EAAUE,SAAA,EAAW,GACrBO,WAAA,CACJ;MAAA,CAGJ;QACOZ,EAAA,CAAAgB,UAAA,CACChB,EAAG,CAAAc,UAAA,EAAYL,CAAA,EAAGV,SAAU,CAAAgB,cAAA,EAC5BZ,QAAA,EAAUE,SAAA,EAAW,GACrBN,SAAU,CAAAS,MAAA,EAAQT,SAAU,CAAAkB,IAAA,EAC5BL,WAAA,CAAW;MAAA;MAGnBT,QAAA,GAAWe,IAAK,CAAAC,GAAA,CAAIhB,QAAY,OAAG,CAAC;MACpCE,SAAA,GAAYa,IAAK,CAAAC,GAAA,CAAId,SAAa,OAAG,CAAC;IAAA;EAC1C;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}