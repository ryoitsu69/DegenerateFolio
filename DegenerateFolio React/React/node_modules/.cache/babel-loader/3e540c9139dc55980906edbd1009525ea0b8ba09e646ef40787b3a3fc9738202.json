{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBatchRequest = exports.toBatchPayload = exports.toPayload = exports.setRequestIdStart = exports.isBatchResponse = exports.isValidResponse = exports.validateResponse = exports.isSubscriptionResult = exports.isResponseWithNotification = exports.isResponseWithError = exports.isResponseWithResult = exports.isResponseRpcError = void 0;\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst uuid_js_1 = require(\"./uuid.js\");\n// check if code is a valid rpc server error code\nconst isResponseRpcError = rpcError => {\n  const errorCode = rpcError.error.code;\n  return web3_errors_1.rpcErrorsMap.has(errorCode) || errorCode >= -32099 && errorCode <= -32000;\n};\nexports.isResponseRpcError = isResponseRpcError;\nconst isResponseWithResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' &&\n// JSON RPC consider \"null\" as valid response\n'result' in response && (0, web3_validator_1.isNullish)(response.error) && (typeof response.id === 'number' || typeof response.id === 'string');\nexports.isResponseWithResult = isResponseWithResult;\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\nconst isResponseWithError = response => !Array.isArray(response) && response.jsonrpc === '2.0' && !!response && (0, web3_validator_1.isNullish)(response.result) &&\n// JSON RPC consider \"null\" as valid response\n'error' in response && (typeof response.id === 'number' || typeof response.id === 'string');\nexports.isResponseWithError = isResponseWithError;\nconst isResponseWithNotification = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && !(0, web3_validator_1.isNullish)(response.params) && !(0, web3_validator_1.isNullish)(response.method);\nexports.isResponseWithNotification = isResponseWithNotification;\nconst isSubscriptionResult = response => !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && 'id' in response &&\n// JSON RPC consider \"null\" as valid response\n'result' in response;\nexports.isSubscriptionResult = isSubscriptionResult;\nconst validateResponse = response => (0, exports.isResponseWithResult)(response) || (0, exports.isResponseWithError)(response);\nexports.validateResponse = validateResponse;\nconst isValidResponse = response => Array.isArray(response) ? response.every(exports.validateResponse) : (0, exports.validateResponse)(response);\nexports.isValidResponse = isValidResponse;\nconst isBatchResponse = response => Array.isArray(response) && response.length > 0 && (0, exports.isValidResponse)(response);\nexports.isBatchResponse = isBatchResponse;\n// internal optional variable to increment and use for the jsonrpc `id`\nlet requestIdSeed;\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\nconst setRequestIdStart = start => {\n  requestIdSeed = start;\n};\nexports.setRequestIdStart = setRequestIdStart;\nconst toPayload = request => {\n  var _a, _b, _c, _d;\n  if (typeof requestIdSeed !== 'undefined') {\n    requestIdSeed += 1;\n  }\n  return {\n    jsonrpc: (_a = request.jsonrpc) !== null && _a !== void 0 ? _a : '2.0',\n    id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : (0, uuid_js_1.uuidV4)(),\n    method: request.method,\n    params: (_d = request.params) !== null && _d !== void 0 ? _d : undefined\n  };\n};\nexports.toPayload = toPayload;\nconst toBatchPayload = requests => requests.map(request => (0, exports.toPayload)(request));\nexports.toBatchPayload = toBatchPayload;\nconst isBatchRequest = request => Array.isArray(request) && request.length > 0;\nexports.isBatchRequest = isBatchRequest;","map":{"version":3,"names":["web3_validator_1","require","web3_errors_1","uuid_js_1","isResponseRpcError","rpcError","errorCode","error","code","rpcErrorsMap","has","exports","isResponseWithResult","response","Array","isArray","jsonrpc","isNullish","id","isResponseWithError","result","isResponseWithNotification","params","method","isSubscriptionResult","validateResponse","isValidResponse","every","isBatchResponse","length","requestIdSeed","setRequestIdStart","start","toPayload","request","_a","_c","_b","uuidV4","_d","undefined","toBatchPayload","requests","map","isBatchRequest"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-utils/src/json_rpc.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { isNullish } from 'web3-validator';\nimport {\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResponseWithError,\n\tJsonRpcOptionalRequest,\n\tJsonRpcBatchRequest,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcSubscriptionResult,\n} from 'web3-types';\nimport { rpcErrorsMap } from 'web3-errors';\nimport { uuidV4 } from './uuid.js';\n\n// check if code is a valid rpc server error code\nexport const isResponseRpcError = (rpcError: JsonRpcResponseWithError) => {\n\tconst errorCode = rpcError.error.code;\n\treturn rpcErrorsMap.has(errorCode) || (errorCode >= -32099 && errorCode <= -32000);\n};\n\nexport const isResponseWithResult = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithResult<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response &&\n\tisNullish(response.error) &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\nexport const isResponseWithError = <Error = unknown, Result = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithError<Error> =>\n\t!Array.isArray(response) &&\n\tresponse.jsonrpc === '2.0' &&\n\t!!response &&\n\tisNullish(response.result) &&\n\t// JSON RPC consider \"null\" as valid response\n\t'error' in response &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\nexport const isResponseWithNotification = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcNotification<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t!isNullish(response.params) &&\n\t!isNullish(response.method);\n\nexport const isSubscriptionResult = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcSubscriptionResult =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t'id' in response &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response;\n\nexport const validateResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean => isResponseWithResult<Result>(response) || isResponseWithError<Error>(response);\n\nexport const isValidResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean =>\n\tArray.isArray(response) ? response.every(validateResponse) : validateResponse(response);\n\nexport const isBatchResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcBatchResponse<Result, Error> =>\n\tArray.isArray(response) && response.length > 0 && isValidResponse(response);\n\n// internal optional variable to increment and use for the jsonrpc `id`\nlet requestIdSeed: number | undefined;\n\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\nexport const setRequestIdStart = (start: number | undefined) => {\n\trequestIdSeed = start;\n};\n\nexport const toPayload = <ParamType = unknown[]>(\n\trequest: JsonRpcOptionalRequest<ParamType>,\n): JsonRpcPayload<ParamType> => {\n\tif (typeof requestIdSeed !== 'undefined') {\n\t\trequestIdSeed += 1;\n\t}\n\treturn {\n\t\tjsonrpc: request.jsonrpc ?? '2.0',\n\t\tid: request.id ?? requestIdSeed ?? uuidV4(),\n\t\tmethod: request.method,\n\t\tparams: request.params ?? undefined,\n\t};\n};\n\nexport const toBatchPayload = (requests: JsonRpcOptionalRequest<unknown>[]): JsonRpcBatchRequest =>\n\trequests.map(request => toPayload<unknown>(request)) as JsonRpcBatchRequest;\n\nexport const isBatchRequest = (\n\trequest: JsonRpcBatchRequest | JsonRpcRequest<unknown> | JsonRpcOptionalRequest<unknown>,\n): request is JsonRpcBatchRequest => Array.isArray(request) && request.length > 0;\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA,MAAAA,gBAAA,GAAAC,OAAA;AAaA,MAAAC,aAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AAEA;AACO,MAAMG,kBAAkB,GAAIC,QAAkC,IAAI;EACxE,MAAMC,SAAS,GAAGD,QAAQ,CAACE,KAAK,CAACC,IAAI;EACrC,OAAON,aAAA,CAAAO,YAAY,CAACC,GAAG,CAACJ,SAAS,CAAC,IAAKA,SAAS,IAAI,CAAC,KAAK,IAAIA,SAAS,IAAI,CAAC,KAAM;AACnF,CAAC;AAHYK,OAAA,CAAAP,kBAAkB,GAAAA,kBAAA;AAKxB,MAAMQ,oBAAoB,GAChCC,QAAwC,IAExC,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IACxB,CAAC,CAACA,QAAQ,IACVA,QAAQ,CAACG,OAAO,KAAK,KAAK;AAC1B;AACA,QAAQ,IAAIH,QAAQ,IACpB,IAAAb,gBAAA,CAAAiB,SAAS,EAACJ,QAAQ,CAACN,KAAK,CAAC,KACxB,OAAOM,QAAQ,CAACK,EAAE,KAAK,QAAQ,IAAI,OAAOL,QAAQ,CAACK,EAAE,KAAK,QAAQ,CAAC;AATxDP,OAAA,CAAAC,oBAAoB,GAAAA,oBAAA;AAWjC;AACO,MAAMO,mBAAmB,GAC/BN,QAAwC,IAExC,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IACxBA,QAAQ,CAACG,OAAO,KAAK,KAAK,IAC1B,CAAC,CAACH,QAAQ,IACV,IAAAb,gBAAA,CAAAiB,SAAS,EAACJ,QAAQ,CAACO,MAAM,CAAC;AAC1B;AACA,OAAO,IAAIP,QAAQ,KAClB,OAAOA,QAAQ,CAACK,EAAE,KAAK,QAAQ,IAAI,OAAOL,QAAQ,CAACK,EAAE,KAAK,QAAQ,CAAC;AATxDP,OAAA,CAAAQ,mBAAmB,GAAAA,mBAAA;AAWzB,MAAME,0BAA0B,GACtCR,QAAiE,IAEjE,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IACxB,CAAC,CAACA,QAAQ,IACVA,QAAQ,CAACG,OAAO,KAAK,KAAK,IAC1B,CAAC,IAAAhB,gBAAA,CAAAiB,SAAS,EAACJ,QAAQ,CAACS,MAAM,CAAC,IAC3B,CAAC,IAAAtB,gBAAA,CAAAiB,SAAS,EAACJ,QAAQ,CAACU,MAAM,CAAC;AAPfZ,OAAA,CAAAU,0BAA0B,GAAAA,0BAAA;AAShC,MAAMG,oBAAoB,GAChCX,QAAiE,IAEjE,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IACxB,CAAC,CAACA,QAAQ,IACVA,QAAQ,CAACG,OAAO,KAAK,KAAK,IAC1B,IAAI,IAAIH,QAAQ;AAChB;AACA,QAAQ,IAAIA,QAAQ;AARRF,OAAA,CAAAa,oBAAoB,GAAAA,oBAAA;AAU1B,MAAMC,gBAAgB,GAC5BZ,QAAwC,IAC3B,IAAAF,OAAA,CAAAC,oBAAoB,EAASC,QAAQ,CAAC,IAAI,IAAAF,OAAA,CAAAQ,mBAAmB,EAAQN,QAAQ,CAAC;AAF/EF,OAAA,CAAAc,gBAAgB,GAAAA,gBAAA;AAItB,MAAMC,eAAe,GAC3Bb,QAAwC,IAExCC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAACc,KAAK,CAAChB,OAAA,CAAAc,gBAAgB,CAAC,GAAG,IAAAd,OAAA,CAAAc,gBAAgB,EAACZ,QAAQ,CAAC;AAH3EF,OAAA,CAAAe,eAAe,GAAAA,eAAA;AAKrB,MAAME,eAAe,GAC3Bf,QAAwC,IAExCC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,IAAIA,QAAQ,CAACgB,MAAM,GAAG,CAAC,IAAI,IAAAlB,OAAA,CAAAe,eAAe,EAACb,QAAQ,CAAC;AAH/DF,OAAA,CAAAiB,eAAe,GAAAA,eAAA;AAK5B;AACA,IAAIE,aAAiC;AAErC;;;;;;;;AAQO,MAAMC,iBAAiB,GAAIC,KAAyB,IAAI;EAC9DF,aAAa,GAAGE,KAAK;AACtB,CAAC;AAFYrB,OAAA,CAAAoB,iBAAiB,GAAAA,iBAAA;AAIvB,MAAME,SAAS,GACrBC,OAA0C,IACZ;;EAC9B,IAAI,OAAOJ,aAAa,KAAK,WAAW,EAAE;IACzCA,aAAa,IAAI,CAAC;;EAEnB,OAAO;IACNd,OAAO,EAAE,CAAAmB,EAAA,GAAAD,OAAO,CAAClB,OAAO,cAAAmB,EAAA,cAAAA,EAAA,GAAI,KAAK;IACjCjB,EAAE,EAAE,CAAAkB,EAAA,IAAAC,EAAA,GAAAH,OAAO,CAAChB,EAAE,cAAAmB,EAAA,cAAAA,EAAA,GAAIP,aAAa,cAAAM,EAAA,cAAAA,EAAA,GAAI,IAAAjC,SAAA,CAAAmC,MAAM,GAAE;IAC3Cf,MAAM,EAAEW,OAAO,CAACX,MAAM;IACtBD,MAAM,EAAE,CAAAiB,EAAA,GAAAL,OAAO,CAACZ,MAAM,cAAAiB,EAAA,cAAAA,EAAA,GAAIC;GAC1B;AACF,CAAC;AAZY7B,OAAA,CAAAsB,SAAS,GAAAA,SAAA;AAcf,MAAMQ,cAAc,GAAIC,QAA2C,IACzEA,QAAQ,CAACC,GAAG,CAACT,OAAO,IAAI,IAAAvB,OAAA,CAAAsB,SAAS,EAAUC,OAAO,CAAC,CAAwB;AAD/DvB,OAAA,CAAA8B,cAAc,GAAAA,cAAA;AAGpB,MAAMG,cAAc,GAC1BV,OAAwF,IACpDpB,KAAK,CAACC,OAAO,CAACmB,OAAO,CAAC,IAAIA,OAAO,CAACL,MAAM,GAAG,CAAC;AAFpElB,OAAA,CAAAiC,cAAc,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}