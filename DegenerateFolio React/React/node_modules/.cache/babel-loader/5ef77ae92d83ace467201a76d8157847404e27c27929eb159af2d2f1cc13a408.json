{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n // Star Nest by Pablo Roman Andrioli\n // License: MIT\n\n #define iterations 17\n #define formuparam 0.53\n\n #define volsteps 20\n #define stepsize 0.1\n\n #define zoom   0.800\n #define tile   0.850\n #define speed  0.010\n\n #define brightness 0.0015\n #define darkmatter 0.300\n #define distfading 0.730\n #define saturation 0.850\n\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     //get coords and direction\n     vec2 uv=fragCoord.xy/iResolution.xy-.5;\n     uv.y*=iResolution.y/iResolution.x;\n     vec3 dir=vec3(uv*zoom,1.);\n     float time=iTime*speed+.25;\n\n     //mouse rotation\n     float a1=.5+1/iResolution.x*2.;\n     float a2=.8+1/iResolution.y*2.;\n     mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n     mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n     dir.xz*=rot1;\n     dir.xy*=rot2;\n     vec3 from=vec3(1.,.5,0.5);\n     from+=vec3(time*2.,time,-2.);\n     from.xz*=rot1;\n     from.xy*=rot2;\n\n     //volumetric rendering\n     float s=0.1,fade=1.;\n     vec3 v=vec3(0.);\n     for (int r=0; r<volsteps; r++) {\n         vec3 p=from+s*dir*.5;\n         p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n         float pa,a=pa=0.;\n         for (int i=0; i<iterations; i++) {\n             p=abs(p)/dot(p,p)-formuparam; // the magic formula\n             a+=abs(length(p)-pa); // absolute sum of average change\n             pa=length(p);\n         }\n         float dm=max(0.,darkmatter-a*a*.001); //dark matter\n         a*=a*a; // add contrast\n         if (r>6) fade*=1.-dm; // dark matter, don't render near\n         //v+=vec3(dm,dm*.5,0.);\n         v+=fade;\n         v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n         fade*=distfading; // distance fading\n         s+=stepsize;\n     }\n     v=mix(vec3(length(v)),v,saturation); //color adjust\n     fragColor = vec4(v*.01,1.);\n\n }\n\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n // Star Nest by Pablo Roman Andrioli\n // License: MIT\n\n #define iterations 17\n #define formuparam 0.53\n\n #define volsteps 20\n #define stepsize 0.1\n\n #define zoom   0.800\n #define tile   0.850\n #define speed  0.010\n\n #define brightness 0.0015\n #define darkmatter 0.300\n #define distfading 0.730\n #define saturation 0.850\n\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     //get coords and direction\n     vec2 uv=fragCoord.xy/iResolution.xy-.5;\n     uv.y*=iResolution.y/iResolution.x;\n     vec3 dir=vec3(uv*zoom,1.);\n     float time=iTime*speed+.25;\n\n     //mouse rotation\n     float a1=.5+1/iResolution.x*2.;\n     float a2=.8+1/iResolution.y*2.;\n     mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n     mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n     dir.xz*=rot1;\n     dir.xy*=rot2;\n     vec3 from=vec3(1.,.5,0.5);\n     from+=vec3(time*2.,time,-2.);\n     from.xz*=rot1;\n     from.xy*=rot2;\n\n     //volumetric rendering\n     float s=0.1,fade=1.;\n     vec3 v=vec3(0.);\n     for (int r=0; r<volsteps; r++) {\n         vec3 p=from+s*dir*.5;\n         p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n         float pa,a=pa=0.;\n         for (int i=0; i<iterations; i++) {\n             p=abs(p)/dot(p,p)-formuparam; // the magic formula\n             a+=abs(length(p)-pa); // absolute sum of average change\n             pa=length(p);\n         }\n         float dm=max(0.,darkmatter-a*a*.001); //dark matter\n         a*=a*a; // add contrast\n         if (r>6) fade*=1.-dm; // dark matter, don't render near\n         //v+=vec3(dm,dm*.5,0.);\n         v+=fade;\n         v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n         fade*=distfading; // distance fading\n         s+=stepsize;\n     }\n     v=mix(vec3(length(v)),v,saturation); //color adjust\n     fragColor = vec4(v*.01,1.);\n\n }\n\n `;\n\nroot.render(\n    <>\n<ShadertoyReact fs={fragmentShader} />\n<TodoApp />\n<footer>Â©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEFJ,IAAI,CAACK,MAAM,eACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACJT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH;EAAe;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACtCd,OAAA,CAACL,OAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXd,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAlB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}