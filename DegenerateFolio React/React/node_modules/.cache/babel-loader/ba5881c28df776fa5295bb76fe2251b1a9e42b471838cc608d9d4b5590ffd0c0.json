{"ast":null,"code":"import { MeshGeometry } from \"@pixi/mesh\";\nclass PlaneGeometry extends MeshGeometry {\n  /**\n   * @param width - The width of the plane.\n   * @param height - The height of the plane.\n   * @param segWidth - Number of horizontal segments.\n   * @param segHeight - Number of vertical segments.\n   */\n  constructor(width = 100, height = 100, segWidth = 10, segHeight = 10) {\n    super(), this.segWidth = segWidth, this.segHeight = segHeight, this.width = width, this.height = height, this.build();\n  }\n  /**\n   * Refreshes plane coordinates\n   * @private\n   */\n  build() {\n    const total = this.segWidth * this.segHeight,\n      verts = [],\n      uvs = [],\n      indices = [],\n      segmentsX = this.segWidth - 1,\n      segmentsY = this.segHeight - 1,\n      sizeX = this.width / segmentsX,\n      sizeY = this.height / segmentsY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.segWidth,\n        y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY), uvs.push(x / segmentsX, y / segmentsY);\n    }\n    const totalSub = segmentsX * segmentsY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % segmentsX,\n        ypos = i / segmentsX | 0,\n        value = ypos * this.segWidth + xpos,\n        value2 = ypos * this.segWidth + xpos + 1,\n        value3 = (ypos + 1) * this.segWidth + xpos,\n        value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n    this.buffers[0].data = new Float32Array(verts), this.buffers[1].data = new Float32Array(uvs), this.indexBuffer.data = new Uint16Array(indices), this.buffers[0].update(), this.buffers[1].update(), this.indexBuffer.update();\n  }\n}\nexport { PlaneGeometry };","map":{"version":3,"names":["PlaneGeometry","MeshGeometry","constructor","width","height","segWidth","segHeight","build","total","verts","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint16Array","update"],"sources":["/home/ryoitsu/node_modules/@pixi/mesh-extras/src/geometry/PlaneGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param width - The width of the plane.\n     * @param height - The height of the plane.\n     * @param segWidth - Number of horizontal segments.\n     * @param segHeight - Number of vertical segments.\n     */\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n"],"mappings":";AAKO,MAAMA,aAAA,SAAsBC,YAAA,CACnC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYIC,YAAYC,KAAA,GAAQ,KAAKC,MAAA,GAAS,KAAKC,QAAA,GAAW,IAAIC,SAAA,GAAY,IAClE;IACU,SAEN,KAAKD,QAAA,GAAWA,QAAA,EAChB,KAAKC,SAAA,GAAYA,SAAA,EAEjB,KAAKH,KAAA,GAAQA,KAAA,EACb,KAAKC,MAAA,GAASA,MAAA,EAEd,KAAKG,KAAA,CAAM;EACf;EAAA;AAAA;AAAA;AAAA;EAMAA,MAAA,EACA;IACI,MAAMC,KAAA,GAAQ,KAAKH,QAAA,GAAW,KAAKC,SAAA;MAC7BG,KAAA,GAAQ,EAAC;MACTC,GAAA,GAAM,EACN;MAAAC,OAAA,GAAU,EAAC;MAEXC,SAAA,GAAY,KAAKP,QAAA,GAAW;MAC5BQ,SAAA,GAAY,KAAKP,SAAA,GAAY;MAE7BQ,KAAA,GAAS,KAAKX,KAAA,GAASS,SAAA;MACvBG,KAAA,GAAS,KAAKX,MAAA,GAAUS,SAAA;IAE9B,SAASG,CAAA,GAAI,GAAGA,CAAA,GAAIR,KAAA,EAAOQ,CAAA,IAC3B;MACI,MAAMC,CAAA,GAAKD,CAAA,GAAI,KAAKX,QAAA;QACda,CAAA,GAAMF,CAAA,GAAI,KAAKX,QAAA,GAAY;MAE3BI,KAAA,CAAAU,IAAA,CAAKF,CAAA,GAAIH,KAAA,EAAOI,CAAA,GAAIH,KAAK,GAC/BL,GAAA,CAAIS,IAAA,CAAKF,CAAA,GAAIL,SAAA,EAAWM,CAAA,GAAIL,SAAS;IACzC;IAEA,MAAMO,QAAA,GAAWR,SAAA,GAAYC,SAAA;IAE7B,SAASG,CAAA,GAAI,GAAGA,CAAA,GAAII,QAAA,EAAUJ,CAAA,IAC9B;MACI,MAAMK,IAAA,GAAOL,CAAA,GAAIJ,SAAA;QACXU,IAAA,GAAQN,CAAA,GAAIJ,SAAA,GAAa;QAEzBW,KAAA,GAASD,IAAA,GAAO,KAAKjB,QAAA,GAAYgB,IAAA;QACjCG,MAAA,GAAUF,IAAA,GAAO,KAAKjB,QAAA,GAAYgB,IAAA,GAAO;QACzCI,MAAA,IAAWH,IAAA,GAAO,KAAK,KAAKjB,QAAA,GAAYgB,IAAA;QACxCK,MAAA,IAAWJ,IAAA,GAAO,KAAK,KAAKjB,QAAA,GAAYgB,IAAA,GAAO;MAE7CV,OAAA,CAAAQ,IAAA,CAAKI,KAAA,EAAOC,MAAA,EAAQC,MAAA,EACxBD,MAAA,EAAQE,MAAA,EAAQD,MAAA;IACxB;IAEA,KAAKE,OAAA,CAAQ,CAAC,EAAEC,IAAA,GAAO,IAAIC,YAAA,CAAapB,KAAK,GAC7C,KAAKkB,OAAA,CAAQ,CAAC,EAAEC,IAAA,GAAO,IAAIC,YAAA,CAAanB,GAAG,GAC3C,KAAKoB,WAAA,CAAYF,IAAA,GAAO,IAAIG,WAAA,CAAYpB,OAAO,GAG/C,KAAKgB,OAAA,CAAQ,CAAC,EAAEK,MAAA,CAChB,QAAKL,OAAA,CAAQ,CAAC,EAAEK,MAAA,IAChB,KAAKF,WAAA,CAAYE,MAAA;EACrB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}