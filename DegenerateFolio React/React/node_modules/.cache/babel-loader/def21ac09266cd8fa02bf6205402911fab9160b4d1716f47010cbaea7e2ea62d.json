{"ast":null,"code":"import { PI_2 } from '../misc/const.mjs';\nimport { Point } from '../point/Point.mjs';\n\"use strict\";\nclass Matrix {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\n    /** An array of the current matrix. Only populated when `toArray` is called */\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   * @param array - The array that the matrix will be populated from.\n   */\n  fromArray(array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  }\n  /**\n   * Sets the matrix properties.\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @returns This matrix. Good for chaining method calls.\n   */\n  set(a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  }\n  /**\n   * Creates an array from the current Matrix object.\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @returns The newly created array which contains the matrix\n   */\n  toArray(transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n    const array = out || this.array;\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n    return array;\n  }\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, transformed through this matrix\n   */\n  apply(pos, newPos) {\n    newPos = newPos || new Point();\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  }\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   * @param pos - The origin\n   * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @returns {Point} The new point, inverse-transformed through this matrix\n   */\n  applyInverse(pos, newPos) {\n    newPos = newPos || new Point();\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const tx = this.tx;\n    const ty = this.ty;\n    const id = 1 / (a * d + c * -b);\n    const x = pos.x;\n    const y = pos.y;\n    newPos.x = d * id * x + -c * id * y + (ty * c - tx * d) * id;\n    newPos.y = a * id * y + -b * id * x + (-ty * a + tx * b) * id;\n    return newPos;\n  }\n  /**\n   * Translates the matrix on the x and y.\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @returns This matrix. Good for chaining method calls.\n   */\n  translate(x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  }\n  /**\n   * Applies a scale transformation to the matrix.\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @returns This matrix. Good for chaining method calls.\n   */\n  scale(x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  }\n  /**\n   * Applies a rotation transformation to the matrix.\n   * @param angle - The angle in radians.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  rotate(angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const a1 = this.a;\n    const c1 = this.c;\n    const tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  }\n  /**\n   * Appends the given Matrix to this Matrix.\n   * @param matrix - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  append(matrix) {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  }\n  /**\n   * Appends two matrix's and sets the result to this matrix. AB = A * B\n   * @param a - The matrix to append.\n   * @param b - The matrix to append.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  appendFrom(a, b) {\n    const a1 = a.a;\n    const b1 = a.b;\n    const c1 = a.c;\n    const d1 = a.d;\n    const tx = a.tx;\n    const ty = a.ty;\n    const a2 = b.a;\n    const b2 = b.b;\n    const c2 = b.c;\n    const d2 = b.d;\n    this.a = a1 * a2 + b1 * c2;\n    this.b = a1 * b2 + b1 * d2;\n    this.c = c1 * a2 + d1 * c2;\n    this.d = c1 * b2 + d1 * d2;\n    this.tx = tx * a2 + ty * c2 + b.tx;\n    this.ty = tx * b2 + ty * d2 + b.ty;\n    return this;\n  }\n  /**\n   * Sets the matrix based on all the available properties\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @returns This matrix. Good for chaining method calls.\n   */\n  setTransform(x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  }\n  /**\n   * Prepends the given Matrix to this Matrix.\n   * @param matrix - The matrix to prepend\n   * @returns This matrix. Good for chaining method calls.\n   */\n  prepend(matrix) {\n    const tx1 = this.tx;\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      const a1 = this.a;\n      const c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  }\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   * @param transform - The transform to apply the properties to.\n   * @returns The transform with the newly applied properties\n   */\n  decompose(transform) {\n    const a = this.a;\n    const b = this.b;\n    const c = this.c;\n    const d = this.d;\n    const pivot = transform.pivot;\n    const skewX = -Math.atan2(-c, d);\n    const skewY = Math.atan2(b, a);\n    const delta = Math.abs(skewX + skewY);\n    if (delta < 1e-5 || Math.abs(PI_2 - delta) < 1e-5) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    }\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d);\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  }\n  /**\n   * Inverts this matrix\n   * @returns This matrix. Good for chaining method calls.\n   */\n  invert() {\n    const a1 = this.a;\n    const b1 = this.b;\n    const c1 = this.c;\n    const d1 = this.d;\n    const tx1 = this.tx;\n    const n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  }\n  /** Checks if this matrix is an identity matrix */\n  isIdentity() {\n    return this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.tx === 0 && this.ty === 0;\n  }\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   * @returns This matrix. Good for chaining method calls.\n   */\n  identity() {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  }\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   * @returns A copy of this matrix. Good for chaining method calls.\n   */\n  clone() {\n    const matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   * @param matrix - The matrix to copy to.\n   * @returns The matrix given in parameter with its values updated.\n   */\n  copyTo(matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  }\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   * @param matrix - The matrix to copy from.\n   * @returns this\n   */\n  copyFrom(matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  }\n  /**\n   * check to see if two matrices are the same\n   * @param matrix - The matrix to compare to.\n   */\n  equals(matrix) {\n    return matrix.a === this.a && matrix.b === this.b && matrix.c === this.c && matrix.d === this.d && matrix.tx === this.tx && matrix.ty === this.ty;\n  }\n  toString() {\n    return `[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n  }\n  /**\n   * A default (identity) matrix.\n   *\n   * This is a shared object, if you want to modify it consider creating a new `Matrix`\n   * @readonly\n   */\n  static get IDENTITY() {\n    return identityMatrix.identity();\n  }\n  /**\n   * A static Matrix that can be used to avoid creating new objects.\n   * Will always ensure the matrix is reset to identity when requested.\n   * Use this object for fast but temporary calculations, as it may be mutated later on.\n   * This is a different object to the `IDENTITY` object and so can be modified without changing `IDENTITY`.\n   * @readonly\n   */\n  static get shared() {\n    return tempMatrix.identity();\n  }\n}\nconst tempMatrix = new Matrix();\nconst identityMatrix = new Matrix();\nexport { Matrix };","map":{"version":3,"names":["Matrix","constructor","a","b","c","d","tx","ty","array","fromArray","set","toArray","transpose","out","Float32Array","apply","pos","newPos","Point","x","y","applyInverse","id","translate","scale","rotate","angle","cos","Math","sin","a1","c1","tx1","append","matrix","b1","d1","appendFrom","a2","b2","c2","d2","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","pivot","atan2","delta","abs","PI_2","skew","sqrt","position","invert","n","isIdentity","identity","clone","copyTo","copyFrom","equals","toString","IDENTITY","identityMatrix","shared","tempMatrix"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/matrix/Matrix.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { PI_2 } from '../misc/const';\nimport { Point } from '../point/Point';\n\nimport type { PointData } from '../point/PointData';\n\ninterface TransformableObject\n{\n    position: PointData;\n    scale: PointData;\n    pivot: PointData;\n    skew: PointData;\n    rotation: number;\n}\n\n/**\n * A fast matrix for 2D transformations.\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof maths\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    /** An array of the current matrix. Only populated when `toArray` is called */\n    public array: Float32Array | null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    public fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    public toArray(transpose?: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {Point} The new point, transformed through this matrix\n     */\n    public apply<P extends PointData = Point>(pos: PointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {Point} The new point, inverse-transformed through this matrix\n     */\n    public applyInverse<P extends PointData = Point>(pos: PointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const tx = this.tx;\n        const ty = this.ty;\n\n        const id = 1 / ((a * d) + (c * -b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (d * id * x) + (-c * id * y) + (((ty * c) - (tx * d)) * id);\n        newPos.y = (a * id * y) + (-b * id * x) + (((-ty * a) + (tx * b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Appends two matrix's and sets the result to this matrix. AB = A * B\n     * @param a - The matrix to append.\n     * @param b - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public appendFrom(a: Matrix, b: Matrix): this\n    {\n        const a1 = a.a;\n        const b1 = a.b;\n        const c1 = a.c;\n        const d1 = a.d;\n        const tx = a.tx;\n        const ty = a.ty;\n\n        const a2 = b.a;\n        const b2 = b.b;\n        const c2 = b.c;\n        const d2 = b.d;\n\n        this.a = (a1 * a2) + (b1 * c2);\n        this.b = (a1 * b2) + (b1 * d2);\n        this.c = (c1 * a2) + (d1 * c2);\n        this.d = (c1 * b2) + (d1 * d2);\n        this.tx = (tx * a2) + (ty * c2) + b.tx;\n        this.ty = (tx * b2) + (ty * d2) + b.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    public decompose(transform: TransformableObject): TransformableObject\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /** Checks if this matrix is an identity matrix */\n    public isIdentity(): boolean\n    {\n        return this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1 && this.tx === 0 && this.ty === 0;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    public identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    public clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    public copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param matrix - The matrix to copy from.\n     * @returns this\n     */\n    public copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * check to see if two matrices are the same\n     * @param matrix - The matrix to compare to.\n     */\n    public equals(matrix: Matrix)\n    {\n        return matrix.a === this.a && matrix.b === this.b\n            && matrix.c === this.c && matrix.d === this.d\n            && matrix.tx === this.tx && matrix.ty === this.ty;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix.\n     *\n     * This is a shared object, if you want to modify it consider creating a new `Matrix`\n     * @readonly\n     */\n    static get IDENTITY(): Readonly<Matrix>\n    {\n        return identityMatrix.identity();\n    }\n\n    /**\n     * A static Matrix that can be used to avoid creating new objects.\n     * Will always ensure the matrix is reset to identity when requested.\n     * Use this object for fast but temporary calculations, as it may be mutated later on.\n     * This is a different object to the `IDENTITY` object and so can be modified without changing `IDENTITY`.\n     * @readonly\n     */\n    static get shared(): Matrix\n    {\n        return tempMatrix.identity();\n    }\n}\n\nconst tempMatrix = new Matrix();\nconst identityMatrix = new Matrix();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}