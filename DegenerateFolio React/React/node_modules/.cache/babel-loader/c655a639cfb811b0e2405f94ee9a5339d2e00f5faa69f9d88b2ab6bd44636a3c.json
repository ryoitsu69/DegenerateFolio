{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { bnToU8a, hasBigInt, u8aConcat } from '@polkadot/util';\nimport { isReady, secp256k1Sign as wasm } from '@polkadot/wasm-crypto';\nimport { BN_BE_256_OPTS } from '../bn.js';\nimport { hasher } from './hasher.js';\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\nexport function secp256k1Sign(message, {\n  secretKey\n}, hashType = 'blake2', onlyJs) {\n  if (secretKey?.length !== 32) {\n    throw new Error('Expected valid secp256k1 secretKey, 32-bytes');\n  }\n  const data = hasher(hashType, message, onlyJs);\n  if (!hasBigInt || !onlyJs && isReady()) {\n    return wasm(data, secretKey);\n  }\n  const signature = secp256k1.sign(data, secretKey, {\n    lowS: true\n  });\n  return u8aConcat(bnToU8a(signature.r, BN_BE_256_OPTS), bnToU8a(signature.s, BN_BE_256_OPTS), new Uint8Array([signature.recovery || 0]));\n}","map":{"version":3,"names":["secp256k1","bnToU8a","hasBigInt","u8aConcat","isReady","secp256k1Sign","wasm","BN_BE_256_OPTS","hasher","message","secretKey","hashType","onlyJs","length","Error","data","signature","sign","lowS","r","s","Uint8Array","recovery"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/secp256k1/sign.js"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1';\nimport { bnToU8a, hasBigInt, u8aConcat } from '@polkadot/util';\nimport { isReady, secp256k1Sign as wasm } from '@polkadot/wasm-crypto';\nimport { BN_BE_256_OPTS } from '../bn.js';\nimport { hasher } from './hasher.js';\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\nexport function secp256k1Sign(message, { secretKey }, hashType = 'blake2', onlyJs) {\n    if (secretKey?.length !== 32) {\n        throw new Error('Expected valid secp256k1 secretKey, 32-bytes');\n    }\n    const data = hasher(hashType, message, onlyJs);\n    if (!hasBigInt || (!onlyJs && isReady())) {\n        return wasm(data, secretKey);\n    }\n    const signature = secp256k1.sign(data, secretKey, { lowS: true });\n    return u8aConcat(bnToU8a(signature.r, BN_BE_256_OPTS), bnToU8a(signature.s, BN_BE_256_OPTS), new Uint8Array([signature.recovery || 0]));\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,OAAO,EAAEC,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AAC9D,SAASC,OAAO,EAAEC,aAAa,IAAIC,IAAI,QAAQ,uBAAuB;AACtE,SAASC,cAAc,QAAQ,UAAU;AACzC,SAASC,MAAM,QAAQ,aAAa;AACpC;AACA;AACA;AACA;AACA,OAAO,SAASH,aAAaA,CAACI,OAAO,EAAE;EAAEC;AAAU,CAAC,EAAEC,QAAQ,GAAG,QAAQ,EAAEC,MAAM,EAAE;EAC/E,IAAIF,SAAS,EAAEG,MAAM,KAAK,EAAE,EAAE;IAC1B,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACnE;EACA,MAAMC,IAAI,GAAGP,MAAM,CAACG,QAAQ,EAAEF,OAAO,EAAEG,MAAM,CAAC;EAC9C,IAAI,CAACV,SAAS,IAAK,CAACU,MAAM,IAAIR,OAAO,CAAC,CAAE,EAAE;IACtC,OAAOE,IAAI,CAACS,IAAI,EAAEL,SAAS,CAAC;EAChC;EACA,MAAMM,SAAS,GAAGhB,SAAS,CAACiB,IAAI,CAACF,IAAI,EAAEL,SAAS,EAAE;IAAEQ,IAAI,EAAE;EAAK,CAAC,CAAC;EACjE,OAAOf,SAAS,CAACF,OAAO,CAACe,SAAS,CAACG,CAAC,EAAEZ,cAAc,CAAC,EAAEN,OAAO,CAACe,SAAS,CAACI,CAAC,EAAEb,cAAc,CAAC,EAAE,IAAIc,UAAU,CAAC,CAACL,SAAS,CAACM,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3I","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}