{"ast":null,"code":"\"use strict\";\n\nconst converters = {\n  rgb8unorm: {\n    convertedFormat: \"rgba8unorm\",\n    convertFunction: convertRGBtoRGBA\n  },\n  \"rgb8unorm-srgb\": {\n    convertedFormat: \"rgba8unorm-srgb\",\n    convertFunction: convertRGBtoRGBA\n  }\n};\nfunction convertFormatIfRequired(textureOptions) {\n  const format = textureOptions.format;\n  if (converters[format]) {\n    const convertFunction = converters[format].convertFunction;\n    const levelBuffers = textureOptions.resource;\n    for (let i = 0; i < levelBuffers.length; i++) {\n      levelBuffers[i] = convertFunction(levelBuffers[i]);\n    }\n    textureOptions.format = converters[format].convertedFormat;\n  }\n}\nfunction convertRGBtoRGBA(levelBuffer) {\n  const pixelCount = levelBuffer.byteLength / 3;\n  const levelBufferWithAlpha = new Uint32Array(pixelCount);\n  for (let i = 0; i < pixelCount; ++i) {\n    levelBufferWithAlpha[i] = levelBuffer[i * 3] + (levelBuffer[i * 3 + 1] << 8) + (levelBuffer[i * 3 + 2] << 16) + 4278190080;\n  }\n  return new Uint8Array(levelBufferWithAlpha.buffer);\n}\nexport { convertFormatIfRequired };","map":{"version":3,"names":["converters","rgb8unorm","convertedFormat","convertFunction","convertRGBtoRGBA","convertFormatIfRequired","textureOptions","format","levelBuffers","resource","i","length","levelBuffer","pixelCount","byteLength","levelBufferWithAlpha","Uint32Array","Uint8Array","buffer"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/compressed-textures/ktx2/utils/convertFormatIfRequired.ts"],"sourcesContent":["import type { TEXTURE_FORMATS } from '../../../rendering/renderers/shared/texture/const';\nimport type { TextureSourceOptions } from '../../../rendering/renderers/shared/texture/sources/TextureSource';\n\ninterface ColorConverter\n{\n    convertedFormat: TEXTURE_FORMATS,\n    convertFunction: (levelBuffer: Uint8Array) => Uint8Array\n}\n\nconst converters: Record<string, ColorConverter> = {\n    rgb8unorm: {\n        convertedFormat: 'rgba8unorm',\n        convertFunction: convertRGBtoRGBA,\n    },\n    'rgb8unorm-srgb': {\n        convertedFormat: 'rgba8unorm-srgb',\n        convertFunction: convertRGBtoRGBA,\n    }\n};\n\nexport function convertFormatIfRequired(textureOptions: TextureSourceOptions)\n{\n    const format = textureOptions.format;\n\n    if (converters[format])\n    {\n        const convertFunction = converters[format].convertFunction;\n\n        const levelBuffers = textureOptions.resource;\n\n        for (let i = 0; i < levelBuffers.length; i++)\n        {\n            levelBuffers[i] = convertFunction(levelBuffers[i]);\n        }\n\n        textureOptions.format = converters[format].convertedFormat;\n    }\n}\n\nfunction convertRGBtoRGBA(levelBuffer: Uint8Array): Uint8Array\n{\n    const pixelCount = levelBuffer.byteLength / 3;\n\n    const levelBufferWithAlpha = new Uint32Array(pixelCount);\n\n    for (let i = 0; i < pixelCount; ++i)\n    {\n        levelBufferWithAlpha[i] = (levelBuffer[i * 3]) // R\n               + (levelBuffer[(i * 3) + 1] << 8) // G\n               + (levelBuffer[(i * 3) + 2] << 16) // B\n               + 0xff000000; // A (255)\n    }\n\n    return new Uint8Array(levelBufferWithAlpha.buffer);\n}\n"],"mappings":";;AASA,MAAMA,UAA6C;EAC/CC,SAAW;IACPC,eAAiB;IACjBC,eAAiB,EAAAC;EAAA,CACrB;EACA,gBAAkB;IACdF,eAAiB;IACjBC,eAAiB,EAAAC;EAAA;AAEzB;AAEO,SAASC,wBAAwBC,cACxC;EACI,MAAMC,MAAA,GAASD,cAAe,CAAAC,MAAA;EAE1B,IAAAP,UAAA,CAAWO,MAAM,CACrB;IACU,MAAAJ,eAAA,GAAkBH,UAAW,CAAAO,MAAM,CAAE,CAAAJ,eAAA;IAE3C,MAAMK,YAAA,GAAeF,cAAe,CAAAG,QAAA;IAEpC,SAASC,CAAI,MAAGA,CAAI,GAAAF,YAAA,CAAaG,MAAA,EAAQD,CACzC;MACIF,YAAA,CAAaE,CAAC,IAAIP,eAAgB,CAAAK,YAAA,CAAaE,CAAC,CAAC;IAAA;IAGtCJ,cAAA,CAAAC,MAAA,GAASP,UAAW,CAAAO,MAAM,CAAE,CAAAL,eAAA;EAAA;AAEnD;AAEA,SAASE,iBAAiBQ,WAC1B;EACU,MAAAC,UAAA,GAAaD,WAAA,CAAYE,UAAa;EAEtC,MAAAC,oBAAA,GAAuB,IAAIC,WAAA,CAAYH,UAAU;EAEvD,SAASH,CAAI,MAAGA,CAAI,GAAAG,UAAA,EAAY,EAAEH,CAClC;IACIK,oBAAA,CAAqBL,CAAC,CAAK,GAAAE,WAAA,CAAYF,CAAI,IAAC,KAClCE,WAAa,CAAAF,CAAA,GAAI,CAAK,IAAC,KAAK,CAC5B,KAAAE,WAAA,CAAaF,CAAA,GAAI,CAAK,IAAC,KAAK,EAC7B;EAAA;EAGN,WAAIO,UAAW,CAAAF,oBAAA,CAAqBG,MAAM;AACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}