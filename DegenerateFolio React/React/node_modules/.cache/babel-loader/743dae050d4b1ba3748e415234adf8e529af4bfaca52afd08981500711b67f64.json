{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transactionBuilder = exports.defaultTransactionBuilder = exports.getTransactionType = exports.getTransactionNonce = exports.getTransactionFromOrToAttr = void 0;\nconst web3_types_1 = require(\"web3-types\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\nconst web3_net_1 = require(\"web3-net\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst constants_js_1 = require(\"../constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = require(\"../rpc_method_wrappers.js\");\nconst detect_transaction_type_js_1 = require(\"./detect_transaction_type.js\");\nconst schemas_js_1 = require(\"../schemas.js\");\n// eslint-disable-next-line import/no-cycle\nconst get_transaction_gas_pricing_js_1 = require(\"./get_transaction_gas_pricing.js\");\nconst getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {\n  if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n    if (typeof transaction[attr] === 'string' && (0, web3_validator_1.isAddress)(transaction[attr])) {\n      return transaction[attr];\n    }\n    if (!(0, web3_validator_1.isHexStrict)(transaction[attr]) && (0, web3_validator_1.isNumber)(transaction[attr])) {\n      if (web3Context.wallet) {\n        const account = web3Context.wallet.get((0, web3_utils_1.format)({\n          format: 'uint'\n        }, transaction[attr], constants_js_1.NUMBER_DATA_FORMAT));\n        if (!(0, web3_validator_1.isNullish)(account)) {\n          return account.address;\n        }\n        throw new web3_errors_1.LocalWalletNotAvailableError();\n      }\n      throw new web3_errors_1.LocalWalletNotAvailableError();\n    } else {\n      throw attr === 'from' ? new web3_errors_1.InvalidTransactionWithSender(transaction.from) :\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      new web3_errors_1.InvalidTransactionWithReceiver(transaction.to);\n    }\n  }\n  if (attr === 'from') {\n    if (!(0, web3_validator_1.isNullish)(privateKey)) return (0, web3_eth_accounts_1.privateKeyToAddress)(privateKey);\n    if (!(0, web3_validator_1.isNullish)(web3Context.defaultAccount)) return web3Context.defaultAccount;\n  }\n  return undefined;\n};\nexports.getTransactionFromOrToAttr = getTransactionFromOrToAttr;\nconst getTransactionNonce = (web3Context, address, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) => __awaiter(void 0, void 0, void 0, function* () {\n  if ((0, web3_validator_1.isNullish)(address)) {\n    // TODO if (web3.eth.accounts.wallet) use address from local wallet\n    throw new web3_errors_1.UnableToPopulateNonceError();\n  }\n  return (0, rpc_method_wrappers_js_1.getTransactionCount)(web3Context, address, web3Context.defaultBlock, returnFormat);\n});\nexports.getTransactionNonce = getTransactionNonce;\nconst getTransactionType = (transaction, web3Context) => {\n  const inferredType = (0, detect_transaction_type_js_1.detectTransactionType)(transaction, web3Context);\n  if (!(0, web3_validator_1.isNullish)(inferredType)) return inferredType;\n  if (!(0, web3_validator_1.isNullish)(web3Context.defaultTransactionType)) return (0, web3_utils_1.format)({\n    format: 'uint'\n  }, web3Context.defaultTransactionType, web3_types_1.ETH_DATA_FORMAT);\n  return undefined;\n};\nexports.getTransactionType = getTransactionType;\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nfunction defaultTransactionBuilder(options) {\n  var _a, _b;\n  return __awaiter(this, void 0, void 0, function* () {\n    let populatedTransaction = (0, web3_utils_1.format)(schemas_js_1.transactionSchema, options.transaction, web3_types_1.DEFAULT_RETURN_FORMAT);\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.from)) {\n      populatedTransaction.from = (0, exports.getTransactionFromOrToAttr)('from', options.web3Context, undefined, options.privateKey);\n    }\n    // TODO: Debug why need to typecase getTransactionNonce\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.nonce)) {\n      populatedTransaction.nonce = yield (0, exports.getTransactionNonce)(options.web3Context, populatedTransaction.from, web3_types_1.ETH_DATA_FORMAT);\n    }\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.value)) {\n      populatedTransaction.value = '0x0';\n    }\n    if (!(0, web3_validator_1.isNullish)(populatedTransaction.data)) {\n      if (!(0, web3_validator_1.isNullish)(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input) throw new web3_errors_1.TransactionDataAndInputError({\n        data: (0, web3_utils_1.bytesToHex)(populatedTransaction.data),\n        input: (0, web3_utils_1.bytesToHex)(populatedTransaction.input)\n      });\n      if (!populatedTransaction.data.startsWith('0x')) populatedTransaction.data = `0x${populatedTransaction.data}`;\n    } else if (!(0, web3_validator_1.isNullish)(populatedTransaction.input)) {\n      if (!populatedTransaction.input.startsWith('0x')) populatedTransaction.input = `0x${populatedTransaction.input}`;\n    } else {\n      populatedTransaction.input = '0x';\n    }\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.common)) {\n      if (options.web3Context.defaultCommon) {\n        const common = options.web3Context.defaultCommon;\n        const chainId = common.customChain.chainId;\n        const networkId = common.customChain.networkId;\n        const name = common.customChain.name;\n        populatedTransaction.common = Object.assign(Object.assign({}, common), {\n          customChain: {\n            chainId,\n            networkId,\n            name\n          }\n        });\n      }\n      if ((0, web3_validator_1.isNullish)(populatedTransaction.chain)) {\n        populatedTransaction.chain = options.web3Context.defaultChain;\n      }\n      if ((0, web3_validator_1.isNullish)(populatedTransaction.hardfork)) {\n        populatedTransaction.hardfork = options.web3Context.defaultHardfork;\n      }\n    }\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.chainId) && (0, web3_validator_1.isNullish)((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId)) {\n      populatedTransaction.chainId = yield (0, rpc_method_wrappers_js_1.getChainId)(options.web3Context, web3_types_1.ETH_DATA_FORMAT);\n    }\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.networkId)) {\n      populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield (0, web3_net_1.getId)(options.web3Context, web3_types_1.ETH_DATA_FORMAT);\n    }\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.gasLimit) && !(0, web3_validator_1.isNullish)(populatedTransaction.gas)) {\n      populatedTransaction.gasLimit = populatedTransaction.gas;\n    }\n    populatedTransaction.type = (0, exports.getTransactionType)(populatedTransaction, options.web3Context);\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.accessList) && (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {\n      populatedTransaction.accessList = [];\n    }\n    if (options.fillGasPrice) populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), yield (0, get_transaction_gas_pricing_js_1.getTransactionGasPricing)(populatedTransaction, options.web3Context, web3_types_1.ETH_DATA_FORMAT));\n    if ((0, web3_validator_1.isNullish)(populatedTransaction.gas) && (0, web3_validator_1.isNullish)(populatedTransaction.gasLimit) && options.fillGasLimit) {\n      const fillGasLimit = yield (0, rpc_method_wrappers_js_1.estimateGas)(options.web3Context, populatedTransaction, 'latest', web3_types_1.ETH_DATA_FORMAT);\n      populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), {\n        gas: (0, web3_utils_1.format)({\n          format: 'uint'\n        }, fillGasLimit, web3_types_1.ETH_DATA_FORMAT)\n      });\n    }\n    return populatedTransaction;\n  });\n}\nexports.defaultTransactionBuilder = defaultTransactionBuilder;\nconst transactionBuilder = options => __awaiter(void 0, void 0, void 0, function* () {\n  var _a;\n  return ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), {\n    transaction: options.transaction\n  }));\n});\nexports.transactionBuilder = transactionBuilder;","map":{"version":3,"names":["web3_types_1","require","web3_eth_accounts_1","web3_net_1","web3_validator_1","web3_errors_1","web3_utils_1","constants_js_1","rpc_method_wrappers_js_1","detect_transaction_type_js_1","schemas_js_1","get_transaction_gas_pricing_js_1","getTransactionFromOrToAttr","attr","web3Context","transaction","privateKey","undefined","isAddress","isHexStrict","isNumber","wallet","account","get","format","NUMBER_DATA_FORMAT","isNullish","address","LocalWalletNotAvailableError","InvalidTransactionWithSender","from","InvalidTransactionWithReceiver","to","privateKeyToAddress","defaultAccount","exports","getTransactionNonce","returnFormat","DEFAULT_RETURN_FORMAT","__awaiter","UnableToPopulateNonceError","getTransactionCount","defaultBlock","getTransactionType","inferredType","detectTransactionType","defaultTransactionType","ETH_DATA_FORMAT","defaultTransactionBuilder","options","populatedTransaction","transactionSchema","nonce","value","data","input","TransactionDataAndInputError","bytesToHex","startsWith","common","defaultCommon","chainId","customChain","networkId","name","Object","assign","chain","defaultChain","hardfork","defaultHardfork","_a","getChainId","_b","defaultNetworkId","getId","gasLimit","gas","type","accessList","fillGasPrice","getTransactionGasPricing","fillGasLimit","estimateGas","transactionBuilder"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth/src/utils/transaction_builder.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tAddress,\n\tHexString,\n\tValidChains,\n\tHardfork,\n\tTransaction,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tCommon,\n\tWeb3NetAPI,\n\tNumbers,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport {\n\tInvalidTransactionWithSender,\n\tInvalidTransactionWithReceiver,\n\tLocalWalletNotAvailableError,\n\tTransactionDataAndInputError,\n\tUnableToPopulateNonceError,\n} from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n\nexport const getTransactionFromOrToAttr = (\n\tattr: 'from' | 'to',\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction?:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\tprivateKey?: HexString | Uint8Array,\n): Address | undefined => {\n\tif (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n\t\tif (typeof transaction[attr] === 'string' && isAddress(transaction[attr] as string)) {\n\t\t\treturn transaction[attr] as Address;\n\t\t}\n\t\tif (!isHexStrict(transaction[attr] as string) && isNumber(transaction[attr] as Numbers)) {\n\t\t\tif (web3Context.wallet) {\n\t\t\t\tconst account = web3Context.wallet.get(\n\t\t\t\t\tformat({ format: 'uint' }, transaction[attr] as Numbers, NUMBER_DATA_FORMAT),\n\t\t\t\t);\n\n\t\t\t\tif (!isNullish(account)) {\n\t\t\t\t\treturn account.address;\n\t\t\t\t}\n\n\t\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t\t}\n\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t} else {\n\t\t\tthrow attr === 'from'\n\t\t\t\t? new InvalidTransactionWithSender(transaction.from)\n\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\t  new InvalidTransactionWithReceiver(transaction.to);\n\t\t}\n\t}\n\tif (attr === 'from') {\n\t\tif (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n\t\tif (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n\t}\n\n\treturn undefined;\n};\n\nexport const getTransactionNonce = async <ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress?: Address,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n) => {\n\tif (isNullish(address)) {\n\t\t// TODO if (web3.eth.accounts.wallet) use address from local wallet\n\t\tthrow new UnableToPopulateNonceError();\n\t}\n\n\treturn getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n};\n\nexport const getTransactionType = (\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst inferredType = detectTransactionType(transaction, web3Context);\n\tif (!isNullish(inferredType)) return inferredType;\n\tif (!isNullish(web3Context.defaultTransactionType))\n\t\treturn format({ format: 'uint' }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n\n\treturn undefined;\n};\n\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport async function defaultTransactionBuilder<ReturnType = Transaction>(options: {\n\ttransaction: Transaction;\n\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\tprivateKey?: HexString | Uint8Array;\n\tfillGasPrice?: boolean;\n\tfillGasLimit?: boolean;\n}): Promise<ReturnType> {\n\tlet populatedTransaction = format(\n\t\ttransactionSchema,\n\t\toptions.transaction,\n\t\tDEFAULT_RETURN_FORMAT,\n\t) as InternalTransaction;\n\n\tif (isNullish(populatedTransaction.from)) {\n\t\tpopulatedTransaction.from = getTransactionFromOrToAttr(\n\t\t\t'from',\n\t\t\toptions.web3Context,\n\t\t\tundefined,\n\t\t\toptions.privateKey,\n\t\t);\n\t}\n\n\t// TODO: Debug why need to typecase getTransactionNonce\n\tif (isNullish(populatedTransaction.nonce)) {\n\t\tpopulatedTransaction.nonce = await getTransactionNonce(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction.from,\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t}\n\n\tif (isNullish(populatedTransaction.value)) {\n\t\tpopulatedTransaction.value = '0x0';\n\t}\n\n\tif (!isNullish(populatedTransaction.data)) {\n\t\tif (\n\t\t\t!isNullish(populatedTransaction.input) &&\n\t\t\tpopulatedTransaction.data !== populatedTransaction.input\n\t\t)\n\t\t\tthrow new TransactionDataAndInputError({\n\t\t\t\tdata: bytesToHex(populatedTransaction.data),\n\t\t\t\tinput: bytesToHex(populatedTransaction.input),\n\t\t\t});\n\n\t\tif (!populatedTransaction.data.startsWith('0x'))\n\t\t\tpopulatedTransaction.data = `0x${populatedTransaction.data}`;\n\t} else if (!isNullish(populatedTransaction.input)) {\n\t\tif (!populatedTransaction.input.startsWith('0x'))\n\t\t\tpopulatedTransaction.input = `0x${populatedTransaction.input}`;\n\t} else {\n\t\tpopulatedTransaction.input = '0x';\n\t}\n\n\tif (isNullish(populatedTransaction.common)) {\n\t\tif (options.web3Context.defaultCommon) {\n\t\t\tconst common = options.web3Context.defaultCommon as unknown as Common;\n\t\t\tconst chainId = common.customChain.chainId as string;\n\t\t\tconst networkId = common.customChain.networkId as string;\n\t\t\tconst name = common.customChain.name as string;\n\t\t\tpopulatedTransaction.common = {\n\t\t\t\t...common,\n\t\t\t\tcustomChain: { chainId, networkId, name },\n\t\t\t};\n\t\t}\n\n\t\tif (isNullish(populatedTransaction.chain)) {\n\t\t\tpopulatedTransaction.chain = options.web3Context.defaultChain as ValidChains;\n\t\t}\n\t\tif (isNullish(populatedTransaction.hardfork)) {\n\t\t\tpopulatedTransaction.hardfork = options.web3Context.defaultHardfork as Hardfork;\n\t\t}\n\t}\n\n\tif (\n\t\tisNullish(populatedTransaction.chainId) &&\n\t\tisNullish(populatedTransaction.common?.customChain.chainId)\n\t) {\n\t\tpopulatedTransaction.chainId = await getChainId(options.web3Context, ETH_DATA_FORMAT);\n\t}\n\n\tif (isNullish(populatedTransaction.networkId)) {\n\t\tpopulatedTransaction.networkId =\n\t\t\t(options.web3Context.defaultNetworkId as string) ??\n\t\t\t(await getId(options.web3Context, ETH_DATA_FORMAT));\n\t}\n\n\tif (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n\t\tpopulatedTransaction.gasLimit = populatedTransaction.gas;\n\t}\n\n\tpopulatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n\tif (\n\t\tisNullish(populatedTransaction.accessList) &&\n\t\t(populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')\n\t) {\n\t\tpopulatedTransaction.accessList = [];\n\t}\n\tif (options.fillGasPrice)\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\t...(await getTransactionGasPricing(\n\t\t\t\tpopulatedTransaction,\n\t\t\t\toptions.web3Context,\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t)),\n\t\t};\n\tif (\n\t\tisNullish(populatedTransaction.gas) &&\n\t\tisNullish(populatedTransaction.gasLimit) &&\n\t\toptions.fillGasLimit\n\t) {\n\t\tconst fillGasLimit = await estimateGas(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction,\n\t\t\t'latest',\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\tgas: format({ format: 'uint' }, fillGasLimit as Numbers, ETH_DATA_FORMAT),\n\t\t};\n\t}\n\treturn populatedTransaction as ReturnType;\n}\n\nexport const transactionBuilder = async <ReturnType = Transaction>(\n\toptions: {\n\t\ttransaction: Transaction;\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\tprivateKey?: HexString | Uint8Array;\n\t\tfillGasPrice?: boolean;\n\t\tfillGasLimit?: boolean;\n\t},\n\t// eslint-disable-next-line @typescript-eslint/require-await\n) =>\n\t(options.web3Context.transactionBuilder ?? defaultTransactionBuilder)({\n\t\t...options,\n\t\ttransaction: options.transaction,\n\t}) as unknown as ReturnType;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}