{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst {\n  isObject\n} = require('./util');\n\n/**\n * @fileoverview Defines some common methods used for WebElements.\n */\n\nconst LEGACY_ELEMENT_ID_KEY = 'ELEMENT';\nconst ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf';\n\n/**\n * Contains logic about WebElements.\n */\n/**\n * @param {?} obj the object to test.\n * @return {boolean} whether the object is a valid encoded WebElement ID.\n */\nfunction isId(obj) {\n  return isObject(obj) && (typeof obj[ELEMENT_ID_KEY] === 'string' || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string');\n}\n\n/**\n * Extracts the encoded WebElement ID from the object.\n *\n * @param {?} obj The object to extract the ID from.\n * @return {string} the extracted ID.\n * @throws {TypeError} if the object is not a valid encoded ID.\n */\nfunction extractId(obj) {\n  if (isObject(obj)) {\n    if (typeof obj[ELEMENT_ID_KEY] === 'string') {\n      return obj[ELEMENT_ID_KEY];\n    } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {\n      return obj[LEGACY_ELEMENT_ID_KEY];\n    }\n  }\n  throw new TypeError('object is not a WebElement ID');\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  isId,\n  extractId\n};","map":{"version":3,"names":["isObject","require","LEGACY_ELEMENT_ID_KEY","ELEMENT_ID_KEY","isId","obj","extractId","TypeError","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/lib/webelement.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\nconst { isObject } = require('./util')\n\n/**\n * @fileoverview Defines some common methods used for WebElements.\n */\n\nconst LEGACY_ELEMENT_ID_KEY = 'ELEMENT'\nconst ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf'\n\n/**\n * Contains logic about WebElements.\n */\n/**\n * @param {?} obj the object to test.\n * @return {boolean} whether the object is a valid encoded WebElement ID.\n */\nfunction isId(obj) {\n  return isObject(obj) && (typeof obj[ELEMENT_ID_KEY] === 'string' || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string')\n}\n\n/**\n * Extracts the encoded WebElement ID from the object.\n *\n * @param {?} obj The object to extract the ID from.\n * @return {string} the extracted ID.\n * @throws {TypeError} if the object is not a valid encoded ID.\n */\nfunction extractId(obj) {\n  if (isObject(obj)) {\n    if (typeof obj[ELEMENT_ID_KEY] === 'string') {\n      return obj[ELEMENT_ID_KEY]\n    } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {\n      return obj[LEGACY_ELEMENT_ID_KEY]\n    }\n  }\n  throw new TypeError('object is not a WebElement ID')\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  isId,\n  extractId,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AACZ,MAAM;EAAEA;AAAS,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEtC;AACA;AACA;;AAEA,MAAMC,qBAAqB,GAAG,SAAS;AACvC,MAAMC,cAAc,GAAG,qCAAqC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,GAAG,EAAE;EACjB,OAAOL,QAAQ,CAACK,GAAG,CAAC,KAAK,OAAOA,GAAG,CAACF,cAAc,CAAC,KAAK,QAAQ,IAAI,OAAOE,GAAG,CAACH,qBAAqB,CAAC,KAAK,QAAQ,CAAC;AACrH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,SAASA,CAACD,GAAG,EAAE;EACtB,IAAIL,QAAQ,CAACK,GAAG,CAAC,EAAE;IACjB,IAAI,OAAOA,GAAG,CAACF,cAAc,CAAC,KAAK,QAAQ,EAAE;MAC3C,OAAOE,GAAG,CAACF,cAAc,CAAC;IAC5B,CAAC,MAAM,IAAI,OAAOE,GAAG,CAACH,qBAAqB,CAAC,KAAK,QAAQ,EAAE;MACzD,OAAOG,GAAG,CAACH,qBAAqB,CAAC;IACnC;EACF;EACA,MAAM,IAAIK,SAAS,CAAC,+BAA+B,CAAC;AACtD;;AAEA;;AAEAC,MAAM,CAACC,OAAO,GAAG;EACfL,IAAI;EACJE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}