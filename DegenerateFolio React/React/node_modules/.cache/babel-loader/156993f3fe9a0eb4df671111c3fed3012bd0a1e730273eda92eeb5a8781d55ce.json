{"ast":null,"code":"\"use strict\";\n\nfunction formatShader(shader) {\n  const spl = shader.split(/([\\n{}])/g).map(a => a.trim()).filter(a => a.length);\n  let indent = \"\";\n  const formatted = spl.map(a => {\n    let indentedLine = indent + a;\n    if (a === \"{\") {\n      indent += \"    \";\n    } else if (a === \"}\") {\n      indent = indent.substr(0, indent.length - 4);\n      indentedLine = indent + a;\n    }\n    return indentedLine;\n  }).join(\"\\n\");\n  return formatted;\n}\nexport { formatShader };","map":{"version":3,"names":["formatShader","shader","spl","split","map","a","trim","filter","length","indent","formatted","indentedLine","substr","join"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/formatShader.ts"],"sourcesContent":["/**\n * formats a shader so its more pleasant to read!\n * @param shader - a glsl shader program source\n */\nexport function formatShader(shader: string): string\n{\n    const spl = shader.split(/([\\n{}])/g)\n        .map((a) => a.trim())\n        .filter((a) => a.length);\n\n    let indent = '';\n\n    const formatted = spl.map((a) =>\n    {\n        let indentedLine = indent + a;\n\n        if (a === '{')\n        {\n            indent += '    ';\n        }\n        else if (a === '}')\n        {\n            indent = indent.substr(0, indent.length - 4);\n\n            indentedLine = indent + a;\n        }\n\n        return indentedLine;\n    }).join('\\n');\n\n    return formatted;\n}\n\n"],"mappings":";;AAIO,SAASA,aAAaC,MAC7B;EACI,MAAMC,GAAA,GAAMD,MAAO,CAAAE,KAAA,CAAM,WAAW,EAC/BC,GAAA,CAAKC,CAAA,IAAMA,CAAE,CAAAC,IAAA,EAAM,CACnB,CAAAC,MAAA,CAAQF,CAAA,IAAMA,CAAA,CAAEG,MAAM;EAE3B,IAAIC,MAAS;EAEb,MAAMC,SAAY,GAAAR,GAAA,CAAIE,GAAI,CAACC,CAC3B;IACI,IAAIM,YAAA,GAAeF,MAAS,GAAAJ,CAAA;IAE5B,IAAIA,CAAA,KAAM,GACV;MACcI,MAAA;IAAA,CACd,UACSJ,CAAA,KAAM,GACf;MACII,MAAA,GAASA,MAAO,CAAAG,MAAA,CAAO,CAAG,EAAAH,MAAA,CAAOD,MAAA,GAAS,CAAC;MAE3CG,YAAA,GAAeF,MAAS,GAAAJ,CAAA;IAAA;IAGrB,OAAAM,YAAA;EAAA,CACV,CAAE,CAAAE,IAAA,CAAK,IAAI;EAEL,OAAAH,SAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}