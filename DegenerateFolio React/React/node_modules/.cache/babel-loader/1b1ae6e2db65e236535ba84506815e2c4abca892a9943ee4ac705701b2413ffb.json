{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://chromedriver.chromium.org/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\nclass Level {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  constructor(name, level) {\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0');\n    }\n\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {number} */\n    this.value_ = level;\n  }\n\n  /** This logger's name. */\n  get name() {\n    return this.name_;\n  }\n\n  /** The numeric log level. */\n  get value() {\n    return this.value_;\n  }\n\n  /** @override */\n  toString() {\n    return this.name;\n  }\n}\n\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\nLevel.OFF = new Level('OFF', Infinity);\n\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\nLevel.SEVERE = new Level('SEVERE', 1000);\n\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\nLevel.WARNING = new Level('WARNING', 900);\n\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\nLevel.INFO = new Level('INFO', 800);\n\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\nLevel.DEBUG = new Level('DEBUG', 700);\n\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\nLevel.FINE = new Level('FINE', 500);\n\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\nLevel.FINER = new Level('FINER', 400);\n\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\nLevel.FINEST = new Level('FINEST', 300);\n\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\nLevel.ALL = new Level('ALL', 0);\nconst ALL_LEVELS = /** !Set<Level> */new Set([Level.OFF, Level.SEVERE, Level.WARNING, Level.INFO, Level.DEBUG, Level.FINE, Level.FINER, Level.FINEST, Level.ALL]);\nconst LEVELS_BY_NAME = /** !Map<string, !Level> */new Map([[Level.OFF.name, Level.OFF], [Level.SEVERE.name, Level.SEVERE], [Level.WARNING.name, Level.WARNING], [Level.INFO.name, Level.INFO], [Level.DEBUG.name, Level.DEBUG], [Level.FINE.name, Level.FINE], [Level.FINER.name, Level.FINER], [Level.FINEST.name, Level.FINEST], [Level.ALL.name, Level.ALL]]);\n\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;\n  }\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number');\n  }\n  for (let level of ALL_LEVELS) {\n    if (nameOrValue >= level.value) {\n      return level;\n    }\n  }\n  return Level.ALL;\n}\n\n/**\n * Describes a single log entry.\n *\n * @final\n */\nclass Entry {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  constructor(level, message, opt_timestamp, opt_type) {\n    this.level = level instanceof Level ? level : getLevel(level);\n    this.message = message;\n    this.timestamp = typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();\n    this.type = opt_type || '';\n  }\n\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n  toJSON() {\n    return {\n      level: this.level.name,\n      message: this.message,\n      timestamp: this.timestamp,\n      type: this.type\n    };\n  }\n}\n\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\nclass Logger {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  constructor(name, opt_level) {\n    /** @private {string} */\n    this.name_ = name;\n\n    /** @private {Level} */\n    this.level_ = opt_level || null;\n\n    /** @private {Logger} */\n    this.parent_ = null;\n\n    /** @private {Set<function(!Entry)>} */\n    this.handlers_ = null;\n  }\n\n  /** @return {string} the name of this logger. */\n  getName() {\n    return this.name_;\n  }\n\n  /**\n   * @param {Level} level the new level for this logger, or `null` if the logger\n   *     should inherit its level from its parent logger.\n   */\n  setLevel(level) {\n    this.level_ = level;\n  }\n\n  /** @return {Level} the log level for this logger. */\n  getLevel() {\n    return this.level_;\n  }\n\n  /**\n   * @return {!Level} the effective level for this logger.\n   */\n  getEffectiveLevel() {\n    let logger = this;\n    let level;\n    do {\n      level = logger.level_;\n      logger = logger.parent_;\n    } while (logger && !level);\n    return level || Level.OFF;\n  }\n\n  /**\n   * @param {!Level} level the level to check.\n   * @return {boolean} whether messages recorded at the given level are loggable\n   *     by this instance.\n   */\n  isLoggable(level) {\n    return level.value !== Level.OFF.value && level.value >= this.getEffectiveLevel().value;\n  }\n\n  /**\n   * Adds a handler to this logger. The handler will be invoked for each message\n   * logged with this instance, or any of its descendants.\n   *\n   * @param {function(!Entry)} handler the handler to add.\n   */\n  addHandler(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = new Set();\n    }\n    this.handlers_.add(handler);\n  }\n\n  /**\n   * Removes a handler from this logger.\n   *\n   * @param {function(!Entry)} handler the handler to remove.\n   * @return {boolean} whether a handler was successfully removed.\n   */\n  removeHandler(handler) {\n    if (!this.handlers_) {\n      return false;\n    }\n    return this.handlers_.delete(handler);\n  }\n\n  /**\n   * Logs a message at the given level. The message may be defined as a string\n   * or as a function that will return the message. If a function is provided,\n   * it will only be invoked if this logger's\n   * {@linkplain #getEffectiveLevel() effective log level} includes the given\n   * `level`.\n   *\n   * @param {!Level} level the level at which to log the message.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  log(level, loggable) {\n    if (!this.isLoggable(level)) {\n      return;\n    }\n    let message = '[' + this.name_ + '] ' + (typeof loggable === 'function' ? loggable() : loggable);\n    let entry = new Entry(level, message, Date.now());\n    for (let logger = this; logger; logger = logger.parent_) {\n      if (logger.handlers_) {\n        for (let handler of logger.handlers_) {\n          handler(entry);\n        }\n      }\n    }\n  }\n\n  /**\n   * Logs a message at the {@link Level.SEVERE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  severe(loggable) {\n    this.log(Level.SEVERE, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.WARNING} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  warning(loggable) {\n    this.log(Level.WARNING, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.INFO} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  info(loggable) {\n    this.log(Level.INFO, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.DEBUG} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  debug(loggable) {\n    this.log(Level.DEBUG, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  fine(loggable) {\n    this.log(Level.FINE, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINER} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finer(loggable) {\n    this.log(Level.FINER, loggable);\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINEST} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finest(loggable) {\n    this.log(Level.FINEST, loggable);\n  }\n}\n\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\nclass LogManager {\n  constructor() {\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map();\n    this.root_ = new Logger('', Level.OFF);\n  }\n\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n  getLogger(name) {\n    if (!name) {\n      return this.root_;\n    }\n    let parent = this.root_;\n    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n      let parentName = name.substr(0, i);\n      parent = this.createLogger_(parentName, parent);\n    }\n    return this.createLogger_(name, parent);\n  }\n\n  /**\n   * Creates a new logger.\n   *\n   * @param {string} name the logger's name.\n   * @param {!Logger} parent the logger's parent.\n   * @return {!Logger} the new logger.\n   * @private\n   */\n  createLogger_(name, parent) {\n    if (this.loggers_.has(name)) {\n      return /** @type {!Logger} */this.loggers_.get(name);\n    }\n    let logger = new Logger(name, null);\n    logger.parent_ = parent;\n    this.loggers_.set(name, logger);\n    return logger;\n  }\n}\nconst logManager = new LogManager();\n\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\nfunction getLogger(name) {\n  return logManager.getLogger(name);\n}\n\n/**\n * Pads a number to ensure it has a minimum of two digits.\n *\n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n;\n  } else {\n    return '0' + n;\n  }\n}\n\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return;\n  }\n  var timestamp = new Date(entry.timestamp);\n  var msg = '[' + timestamp.getUTCFullYear() + '-' + pad(timestamp.getUTCMonth() + 1) + '-' + pad(timestamp.getUTCDate()) + 'T' + pad(timestamp.getUTCHours()) + ':' + pad(timestamp.getUTCMinutes()) + ':' + pad(timestamp.getUTCSeconds()) + 'Z] ' + '[' + entry.level.name + '] ' + entry.message;\n  var level = entry.level.value;\n  if (level >= Level.SEVERE.value) {\n    console.error(msg);\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg);\n  } else {\n    console.log(msg);\n  }\n}\n\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\nfunction addConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.addHandler(consoleHandler);\n}\n\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\nfunction removeConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_;\n  logger.removeHandler(consoleHandler);\n}\n\n/**\n * Installs the console log handler on the root logger.\n */\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_);\n}\n\n/**\n * Common log types.\n * @enum {string}\n */\nconst Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n  /** Logs from the remote server. */\n  SERVER: 'server'\n};\n\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\nclass Preferences {\n  constructor() {\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map();\n  }\n\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n  setLevel(type, level) {\n    if (typeof type !== 'string') {\n      throw TypeError('specified log type is not a string: ' + typeof type);\n    }\n    this.prefs_.set(type, level instanceof Level ? level : getLevel(level));\n  }\n\n  /**\n   * Converts this instance to its JSON representation.\n   * @return {!Object<string, string>} The JSON representation of this set of\n   *     preferences.\n   */\n  toJSON() {\n    let json = {};\n    for (let key of this.prefs_.keys()) {\n      json[key] = this.prefs_.get(key).name;\n    }\n    return json;\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler\n};","map":{"version":3,"names":["Level","constructor","name","level","TypeError","name_","value_","value","toString","OFF","Infinity","SEVERE","WARNING","INFO","DEBUG","FINE","FINER","FINEST","ALL","ALL_LEVELS","Set","LEVELS_BY_NAME","Map","getLevel","nameOrValue","get","Entry","message","opt_timestamp","opt_type","timestamp","Date","now","type","toJSON","Logger","opt_level","level_","parent_","handlers_","getName","setLevel","getEffectiveLevel","logger","isLoggable","addHandler","handler","add","removeHandler","delete","log","loggable","entry","severe","warning","info","debug","fine","finer","finest","LogManager","loggers_","root_","getLogger","parent","i","indexOf","parentName","substr","createLogger_","has","set","logManager","pad","n","consoleHandler","console","msg","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","error","warn","addConsoleHandler","opt_logger","removeConsoleHandler","installConsoleHandler","Type","BROWSER","CLIENT","DRIVER","PERFORMANCE","SERVER","Preferences","prefs_","json","key","keys","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/lib/logging.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://chromedriver.chromium.org/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\nclass Level {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  constructor(name, level) {\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0')\n    }\n\n    /** @private {string} */\n    this.name_ = name\n\n    /** @private {number} */\n    this.value_ = level\n  }\n\n  /** This logger's name. */\n  get name() {\n    return this.name_\n  }\n\n  /** The numeric log level. */\n  get value() {\n    return this.value_\n  }\n\n  /** @override */\n  toString() {\n    return this.name\n  }\n}\n\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\nLevel.OFF = new Level('OFF', Infinity)\n\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\nLevel.SEVERE = new Level('SEVERE', 1000)\n\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\nLevel.WARNING = new Level('WARNING', 900)\n\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\nLevel.INFO = new Level('INFO', 800)\n\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\nLevel.DEBUG = new Level('DEBUG', 700)\n\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\nLevel.FINE = new Level('FINE', 500)\n\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\nLevel.FINER = new Level('FINER', 400)\n\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\nLevel.FINEST = new Level('FINEST', 300)\n\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\nLevel.ALL = new Level('ALL', 0)\n\nconst ALL_LEVELS = /** !Set<Level> */ new Set([\n  Level.OFF,\n  Level.SEVERE,\n  Level.WARNING,\n  Level.INFO,\n  Level.DEBUG,\n  Level.FINE,\n  Level.FINER,\n  Level.FINEST,\n  Level.ALL,\n])\n\nconst LEVELS_BY_NAME = /** !Map<string, !Level> */ new Map([\n  [Level.OFF.name, Level.OFF],\n  [Level.SEVERE.name, Level.SEVERE],\n  [Level.WARNING.name, Level.WARNING],\n  [Level.INFO.name, Level.INFO],\n  [Level.DEBUG.name, Level.DEBUG],\n  [Level.FINE.name, Level.FINE],\n  [Level.FINER.name, Level.FINER],\n  [Level.FINEST.name, Level.FINEST],\n  [Level.ALL.name, Level.ALL],\n])\n\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL\n  }\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number')\n  }\n  for (let level of ALL_LEVELS) {\n    if (nameOrValue >= level.value) {\n      return level\n    }\n  }\n  return Level.ALL\n}\n\n/**\n * Describes a single log entry.\n *\n * @final\n */\nclass Entry {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  constructor(level, message, opt_timestamp, opt_type) {\n    this.level = level instanceof Level ? level : getLevel(level)\n    this.message = message\n    this.timestamp = typeof opt_timestamp === 'number' ? opt_timestamp : Date.now()\n    this.type = opt_type || ''\n  }\n\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n  toJSON() {\n    return {\n      level: this.level.name,\n      message: this.message,\n      timestamp: this.timestamp,\n      type: this.type,\n    }\n  }\n}\n\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\nclass Logger {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  constructor(name, opt_level) {\n    /** @private {string} */\n    this.name_ = name\n\n    /** @private {Level} */\n    this.level_ = opt_level || null\n\n    /** @private {Logger} */\n    this.parent_ = null\n\n    /** @private {Set<function(!Entry)>} */\n    this.handlers_ = null\n  }\n\n  /** @return {string} the name of this logger. */\n  getName() {\n    return this.name_\n  }\n\n  /**\n   * @param {Level} level the new level for this logger, or `null` if the logger\n   *     should inherit its level from its parent logger.\n   */\n  setLevel(level) {\n    this.level_ = level\n  }\n\n  /** @return {Level} the log level for this logger. */\n  getLevel() {\n    return this.level_\n  }\n\n  /**\n   * @return {!Level} the effective level for this logger.\n   */\n  getEffectiveLevel() {\n    let logger = this\n    let level\n    do {\n      level = logger.level_\n      logger = logger.parent_\n    } while (logger && !level)\n    return level || Level.OFF\n  }\n\n  /**\n   * @param {!Level} level the level to check.\n   * @return {boolean} whether messages recorded at the given level are loggable\n   *     by this instance.\n   */\n  isLoggable(level) {\n    return level.value !== Level.OFF.value && level.value >= this.getEffectiveLevel().value\n  }\n\n  /**\n   * Adds a handler to this logger. The handler will be invoked for each message\n   * logged with this instance, or any of its descendants.\n   *\n   * @param {function(!Entry)} handler the handler to add.\n   */\n  addHandler(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = new Set()\n    }\n    this.handlers_.add(handler)\n  }\n\n  /**\n   * Removes a handler from this logger.\n   *\n   * @param {function(!Entry)} handler the handler to remove.\n   * @return {boolean} whether a handler was successfully removed.\n   */\n  removeHandler(handler) {\n    if (!this.handlers_) {\n      return false\n    }\n    return this.handlers_.delete(handler)\n  }\n\n  /**\n   * Logs a message at the given level. The message may be defined as a string\n   * or as a function that will return the message. If a function is provided,\n   * it will only be invoked if this logger's\n   * {@linkplain #getEffectiveLevel() effective log level} includes the given\n   * `level`.\n   *\n   * @param {!Level} level the level at which to log the message.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  log(level, loggable) {\n    if (!this.isLoggable(level)) {\n      return\n    }\n    let message = '[' + this.name_ + '] ' + (typeof loggable === 'function' ? loggable() : loggable)\n    let entry = new Entry(level, message, Date.now())\n    for (let logger = this; logger; logger = logger.parent_) {\n      if (logger.handlers_) {\n        for (let handler of logger.handlers_) {\n          handler(entry)\n        }\n      }\n    }\n  }\n\n  /**\n   * Logs a message at the {@link Level.SEVERE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  severe(loggable) {\n    this.log(Level.SEVERE, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.WARNING} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  warning(loggable) {\n    this.log(Level.WARNING, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.INFO} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  info(loggable) {\n    this.log(Level.INFO, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.DEBUG} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  debug(loggable) {\n    this.log(Level.DEBUG, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  fine(loggable) {\n    this.log(Level.FINE, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINER} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finer(loggable) {\n    this.log(Level.FINER, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINEST} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finest(loggable) {\n    this.log(Level.FINEST, loggable)\n  }\n}\n\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\nclass LogManager {\n  constructor() {\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map()\n    this.root_ = new Logger('', Level.OFF)\n  }\n\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n  getLogger(name) {\n    if (!name) {\n      return this.root_\n    }\n    let parent = this.root_\n    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n      let parentName = name.substr(0, i)\n      parent = this.createLogger_(parentName, parent)\n    }\n    return this.createLogger_(name, parent)\n  }\n\n  /**\n   * Creates a new logger.\n   *\n   * @param {string} name the logger's name.\n   * @param {!Logger} parent the logger's parent.\n   * @return {!Logger} the new logger.\n   * @private\n   */\n  createLogger_(name, parent) {\n    if (this.loggers_.has(name)) {\n      return /** @type {!Logger} */ (this.loggers_.get(name))\n    }\n    let logger = new Logger(name, null)\n    logger.parent_ = parent\n    this.loggers_.set(name, logger)\n    return logger\n  }\n}\n\nconst logManager = new LogManager()\n\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\nfunction getLogger(name) {\n  return logManager.getLogger(name)\n}\n\n/**\n * Pads a number to ensure it has a minimum of two digits.\n *\n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n\n  } else {\n    return '0' + n\n  }\n}\n\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return\n  }\n\n  var timestamp = new Date(entry.timestamp)\n  var msg =\n    '[' +\n    timestamp.getUTCFullYear() +\n    '-' +\n    pad(timestamp.getUTCMonth() + 1) +\n    '-' +\n    pad(timestamp.getUTCDate()) +\n    'T' +\n    pad(timestamp.getUTCHours()) +\n    ':' +\n    pad(timestamp.getUTCMinutes()) +\n    ':' +\n    pad(timestamp.getUTCSeconds()) +\n    'Z] ' +\n    '[' +\n    entry.level.name +\n    '] ' +\n    entry.message\n\n  var level = entry.level.value\n  if (level >= Level.SEVERE.value) {\n    console.error(msg)\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg)\n  } else {\n    console.log(msg)\n  }\n}\n\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\nfunction addConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_\n  logger.addHandler(consoleHandler)\n}\n\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\nfunction removeConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_\n  logger.removeHandler(consoleHandler)\n}\n\n/**\n * Installs the console log handler on the root logger.\n */\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_)\n}\n\n/**\n * Common log types.\n * @enum {string}\n */\nconst Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n  /** Logs from the remote server. */\n  SERVER: 'server',\n}\n\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\nclass Preferences {\n  constructor() {\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map()\n  }\n\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n  setLevel(type, level) {\n    if (typeof type !== 'string') {\n      throw TypeError('specified log type is not a string: ' + typeof type)\n    }\n    this.prefs_.set(type, level instanceof Level ? level : getLevel(level))\n  }\n\n  /**\n   * Converts this instance to its JSON representation.\n   * @return {!Object<string, string>} The JSON representation of this set of\n   *     preferences.\n   */\n  toJSON() {\n    let json = {}\n    for (let key of this.prefs_.keys()) {\n      json[key] = this.prefs_.get(key).name\n    }\n    return json\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,KAAK,CAAC;EACV;AACF;AACA;AACA;EACEC,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACvB,IAAIA,KAAK,GAAG,CAAC,EAAE;MACb,MAAM,IAAIC,SAAS,CAAC,oBAAoB,CAAC;IAC3C;;IAEA;IACA,IAAI,CAACC,KAAK,GAAGH,IAAI;;IAEjB;IACA,IAAI,CAACI,MAAM,GAAGH,KAAK;EACrB;;EAEA;EACA,IAAID,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACG,KAAK;EACnB;;EAEA;EACA,IAAIE,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACD,MAAM;EACpB;;EAEA;EACAE,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACN,IAAI;EAClB;AACF;;AAEA;AACA;AACA;AACA;AACAF,KAAK,CAACS,GAAG,GAAG,IAAIT,KAAK,CAAC,KAAK,EAAEU,QAAQ,CAAC;;AAEtC;AACA;AACA;AACA;AACAV,KAAK,CAACW,MAAM,GAAG,IAAIX,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC;;AAExC;AACA;AACA;AACA;AACAA,KAAK,CAACY,OAAO,GAAG,IAAIZ,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC;;AAEzC;AACA;AACA;AACA;AACAA,KAAK,CAACa,IAAI,GAAG,IAAIb,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC;;AAEnC;AACA;AACA;AACA;AACAA,KAAK,CAACc,KAAK,GAAG,IAAId,KAAK,CAAC,OAAO,EAAE,GAA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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}