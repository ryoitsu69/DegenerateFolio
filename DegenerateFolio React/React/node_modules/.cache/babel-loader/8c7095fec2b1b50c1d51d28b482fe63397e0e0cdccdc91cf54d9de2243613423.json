{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = {\n      fontSize: 0,\n      ascent: 0,\n      descent: 0\n    };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = {\n      type: \"none\",\n      range: 0\n    };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation(v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation(v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach(page => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\nexport { AbstractBitmapFont };","map":{"version":3,"names":["AbstractBitmapFont","EventEmitter","constructor","arguments","chars","Object","create","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","type","range","pages","baseMeasurementFontSize","baseRenderedFontSize","font","deprecation","v8_0_0","pageTextures","size","distanceFieldRange","distanceFieldType","destroy","destroyTextures","emit","removeAllListeners","i","texture","forEach","page"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @memberof text */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @memberof text\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @memberof text\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @memberof text\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            this.chars[i].texture.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n"],"mappings":";;;AAoFO,MAAeA,kBAAA,SACVC,YAEZ;EAHOC,YAAA;IAAA,SAAAC,SAAA;IAKH;IAAgB,KAAAC,KAAA,kBAAyCC,MAAA,CAAAC,MAAA,CAAO,IAAI;IAMpE;AAAA;AAAA;AAAA;IAAA,KAAgBC,UAA2C;IAM3D;AAAA;AAAA;AAAA;IAAA,KAAgBC,UAA2C;IAE3D;IAAA,KAAgBC,WAAA,GAA2B;MAAEC,QAAA,EAAU;MAAGC,MAAQ;MAAGC,OAAA,EAAS;IAAE;IAKhF;AAAA;AAAA;AAAA;IAAA,KAAgBC,cAAmD;IAEnE;IAAA,KAAgBC,aAAiD;MAAEC,IAAM;MAAQC,KAAA,EAAO;IAAE;IAE1F;IAAA,KAAgBC,KAAA,GAAgC,EAAC;IAGjD;IAAA,KAAgBC,uBAAkC;IAClD,KAAUC,oBAAuB;EAAA;EAAA;AAAA;AAAA;AAAA;EAMjC,IAAWC,IACXA,CAAA;IAEIC,WAAA,CAAYC,MAAA,EAAQ,0EAA0E;IAG9F,OAAO,IAAK,CAAAd,UAAA;EAAA;EAChB;AAAA;AAAA;AAAA;EAMA,IAAWe,YACXA,CAAA;IAEIF,WAAA,CAAYC,MAAA,EAAQ,6EAA6E;IAGjG,OAAO,IAAK,CAAAL,KAAA;EAAA;EAChB;AAAA;AAAA;AAAA;EAMA,IAAWO,IACXA,CAAA;IAEIH,WAAA,CAAYC,MAAA,EAAQ,oFAAoF;IAGxG,OAAO,KAAKb,WAAY,CAAAC,QAAA;EAAA;EAC5B;AAAA;AAAA;AAAA;EAMA,IAAWe,kBACXA,CAAA;IAGIJ,WAAA,CAAYC,MAAA,EAAQ,iGAAiG;IAGrH,OAAO,KAAKR,aAAc,CAAAE,KAAA;EAAA;EAC9B;AAAA;AAAA;AAAA;EAMA,IAAWU,iBACXA,CAAA;IAGIL,WAAA,CAAYC,MAAA,EAAQ,+FAA+F;IAGnH,OAAO,KAAKR,aAAc,CAAAC,IAAA;EAAA;EAGvBY,QAAQC,eAAA,GAAkB,KACjC;IACS,KAAAC,IAAA,CAAK,WAAW,IAA2B;IAEhD,KAAKC,kBAAmB;IAEb,WAAAC,CAAA,IAAK,KAAK3B,KACrB;MACI,KAAKA,KAAM,CAAA2B,CAAC,CAAE,CAAAC,OAAA,CAAQL,OAAQ;IAAA;IAGjC,KAAKvB,KAAiB;IAEvB,IAAIwB,eACJ;MACS,KAAAX,KAAA,CAAMgB,OAAA,CAASC,IAAA,IAASA,IAAA,CAAKF,OAAQ,CAAAL,OAAA,CAAQ,IAAI,CAAC;MACtD,KAAKV,KAAgB;IAAA;EAC1B;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}