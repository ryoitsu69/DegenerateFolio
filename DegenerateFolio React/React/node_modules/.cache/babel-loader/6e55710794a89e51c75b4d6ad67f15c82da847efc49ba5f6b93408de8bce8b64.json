{"ast":null,"code":"import { hexToU8a, isHex } from '@polkadot/util';\nimport { base64Decode } from '../base64/index.js';\nimport { jsonDecryptData } from './decryptData.js';\nexport function jsonDecrypt({\n  encoded,\n  encoding\n}, passphrase) {\n  if (!encoded) {\n    throw new Error('No encrypted data available to decode');\n  }\n  return jsonDecryptData(isHex(encoded) ? hexToU8a(encoded) : base64Decode(encoded), passphrase, Array.isArray(encoding.type) ? encoding.type : [encoding.type]);\n}","map":{"version":3,"names":["hexToU8a","isHex","base64Decode","jsonDecryptData","jsonDecrypt","encoded","encoding","passphrase","Error","Array","isArray","type"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/json/decrypt.js"],"sourcesContent":["import { hexToU8a, isHex } from '@polkadot/util';\nimport { base64Decode } from '../base64/index.js';\nimport { jsonDecryptData } from './decryptData.js';\nexport function jsonDecrypt({ encoded, encoding }, passphrase) {\n    if (!encoded) {\n        throw new Error('No encrypted data available to decode');\n    }\n    return jsonDecryptData(isHex(encoded)\n        ? hexToU8a(encoded)\n        : base64Decode(encoded), passphrase, Array.isArray(encoding.type)\n        ? encoding.type\n        : [encoding.type]);\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAChD,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAO,SAASC,WAAWA,CAAC;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAEC,UAAU,EAAE;EAC3D,IAAI,CAACF,OAAO,EAAE;IACV,MAAM,IAAIG,KAAK,CAAC,uCAAuC,CAAC;EAC5D;EACA,OAAOL,eAAe,CAACF,KAAK,CAACI,OAAO,CAAC,GAC/BL,QAAQ,CAACK,OAAO,CAAC,GACjBH,YAAY,CAACG,OAAO,CAAC,EAAEE,UAAU,EAAEE,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACK,IAAI,CAAC,GAC/DL,QAAQ,CAACK,IAAI,GACb,CAACL,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}