{"ast":null,"code":"import { Texture } from \"@pixi/core\";\nimport { SimplePlane } from \"./SimplePlane.mjs\";\nconst DEFAULT_BORDER_SIZE = 10;\nclass NineSlicePlane extends SimplePlane {\n  /**\n   * @param texture - The texture to use on the NineSlicePlane.\n   * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n   * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n   * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n   * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n   */\n  constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    super(Texture.WHITE, 4, 4), this._origWidth = texture.orig.width, this._origHeight = texture.orig.height, this._width = this._origWidth, this._height = this._origHeight, this._leftWidth = leftWidth ?? texture.defaultBorders?.left ?? DEFAULT_BORDER_SIZE, this._rightWidth = rightWidth ?? texture.defaultBorders?.right ?? DEFAULT_BORDER_SIZE, this._topHeight = topHeight ?? texture.defaultBorders?.top ?? DEFAULT_BORDER_SIZE, this._bottomHeight = bottomHeight ?? texture.defaultBorders?.bottom ?? DEFAULT_BORDER_SIZE, this.texture = texture;\n  }\n  textureUpdated() {\n    this._textureID = this.shader.texture._updateID, this._refresh();\n  }\n  get vertices() {\n    return this.geometry.getBuffer(\"aVertexPosition\").data;\n  }\n  set vertices(value) {\n    this.geometry.getBuffer(\"aVertexPosition\").data = value;\n  }\n  /** Updates the horizontal vertices. */\n  updateHorizontalVertices() {\n    const vertices = this.vertices,\n      scale = this._getMinScale();\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale, vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale, vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  }\n  /** Updates the vertical vertices. */\n  updateVerticalVertices() {\n    const vertices = this.vertices,\n      scale = this._getMinScale();\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale, vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale, vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  }\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   * @returns Smaller number of vertical and horizontal scale.\n   */\n  _getMinScale() {\n    const w = this._leftWidth + this._rightWidth,\n      scaleW = this._width > w ? 1 : this._width / w,\n      h = this._topHeight + this._bottomHeight,\n      scaleH = this._height > h ? 1 : this._height / h;\n    return Math.min(scaleW, scaleH);\n  }\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this._width = value, this._refresh();\n  }\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this._height = value, this._refresh();\n  }\n  /** The width of the left column. */\n  get leftWidth() {\n    return this._leftWidth;\n  }\n  set leftWidth(value) {\n    this._leftWidth = value, this._refresh();\n  }\n  /** The width of the right column. */\n  get rightWidth() {\n    return this._rightWidth;\n  }\n  set rightWidth(value) {\n    this._rightWidth = value, this._refresh();\n  }\n  /** The height of the top row. */\n  get topHeight() {\n    return this._topHeight;\n  }\n  set topHeight(value) {\n    this._topHeight = value, this._refresh();\n  }\n  /** The height of the bottom row. */\n  get bottomHeight() {\n    return this._bottomHeight;\n  }\n  set bottomHeight(value) {\n    this._bottomHeight = value, this._refresh();\n  }\n  /** Refreshes NineSlicePlane coords. All of them. */\n  _refresh() {\n    const texture = this.texture,\n      uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width, this._origHeight = texture.orig.height;\n    const _uvw = 1 / this._origWidth,\n      _uvh = 1 / this._origHeight;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0, uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0, uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1, uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1, uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth, uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth, uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight, uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight, this.updateHorizontalVertices(), this.updateVerticalVertices(), this.geometry.buffers[0].update(), this.geometry.buffers[1].update();\n  }\n}\nexport { NineSlicePlane };","map":{"version":3,"names":["DEFAULT_BORDER_SIZE","NineSlicePlane","SimplePlane","constructor","texture","leftWidth","topHeight","rightWidth","bottomHeight","Texture","WHITE","_origWidth","orig","width","_origHeight","height","_width","_height","_leftWidth","defaultBorders","left","_rightWidth","right","_topHeight","top","_bottomHeight","bottom","textureUpdated","_textureID","shader","_updateID","_refresh","vertices","geometry","getBuffer","data","value","updateHorizontalVertices","scale","_getMinScale","updateVerticalVertices","w","scaleW","h","scaleH","Math","min","uvs","buffers","_uvw","_uvh","update"],"sources":["/home/ryoitsu/node_modules/@pixi/mesh-extras/src/NineSlicePlane.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nimport type { ITypedArray } from '@pixi/core';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NineSlicePlane extends GlobalMixins.NineSlicePlane {}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n * @example\n * import { NineSlicePlane, Texture } from 'pixi.js';\n *\n * const plane9 = new NineSlicePlane(Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n * @memberof PIXI\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    private _origWidth: number;\n    private _origHeight: number;\n\n    /**\n     * The width of the left column (a).\n     * @private\n     */\n    _leftWidth: number;\n\n    /**\n     * The width of the right column (b)\n     * @private\n     */\n    _rightWidth: number;\n\n    /**\n     * The height of the top row (c)\n     * @private\n     */\n    _topHeight: number;\n\n    /**\n     * The height of the bottom row (d)\n     * @private\n     */\n    _bottomHeight: number;\n\n    /**\n     * @param texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    constructor(\n        texture: Texture,\n        leftWidth?: number,\n        topHeight?: number,\n        rightWidth?: number,\n        bottomHeight?: number\n    )\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._width = this._origWidth;\n\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._height = this._origHeight;\n\n        this._leftWidth = leftWidth ?? texture.defaultBorders?.left ?? DEFAULT_BORDER_SIZE;\n        this._rightWidth = rightWidth ?? texture.defaultBorders?.right ?? DEFAULT_BORDER_SIZE;\n        this._topHeight = topHeight ?? texture.defaultBorders?.top ?? DEFAULT_BORDER_SIZE;\n        this._bottomHeight = bottomHeight ?? texture.defaultBorders?.bottom ?? DEFAULT_BORDER_SIZE;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /** Updates the horizontal vertices. */\n    public updateHorizontalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /** Updates the vertical vertices. */\n    public updateVerticalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     * @returns Smaller number of vertical and horizontal scale.\n     */\n    private _getMinScale(): number\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /** The width of the left column. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /** The width of the right column. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /** The height of the top row. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /** The height of the bottom row. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /** Refreshes NineSlicePlane coords. All of them. */\n    private _refresh(): void\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}