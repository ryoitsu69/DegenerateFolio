{"ast":null,"code":"\"use strict\";\n\nconst buildTriangle = {\n  build(shape, points) {\n    points[0] = shape.x;\n    points[1] = shape.y;\n    points[2] = shape.x2;\n    points[3] = shape.y2;\n    points[4] = shape.x3;\n    points[5] = shape.y3;\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    let count = 0;\n    verticesOffset *= verticesStride;\n    vertices[verticesOffset + count] = points[0];\n    vertices[verticesOffset + count + 1] = points[1];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[2];\n    vertices[verticesOffset + count + 1] = points[3];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[4];\n    vertices[verticesOffset + count + 1] = points[5];\n    const verticesIndex = verticesOffset / verticesStride;\n    indices[indicesOffset++] = verticesIndex;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 2;\n  }\n};\nexport { buildTriangle };","map":{"version":3,"names":["buildTriangle","build","shape","points","x","y","x2","y2","x3","y3","triangulate","vertices","verticesStride","verticesOffset","indices","indicesOffset","count","verticesIndex"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildTriangle.ts"],"sourcesContent":["import type { Triangle } from '../../../../maths/shapes/Triangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a triangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildTriangle: ShapeBuildCommand<Triangle> = {\n\n    build(shape: Triangle, points: number[]): number[]\n    {\n        points[0] = shape.x;\n        points[1] = shape.y;\n        points[2] = shape.x2;\n        points[3] = shape.y2;\n        points[4] = shape.x3;\n        points[5] = shape.y3;\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n"],"mappings":";;AAUO,MAAMA,aAA6C;EAEtDC,MAAMC,KAAA,EAAiBC,MACvB;IACWA,MAAA,EAAC,IAAID,KAAM,CAAAE,CAAA;IACXD,MAAA,EAAC,IAAID,KAAM,CAAAG,CAAA;IACXF,MAAA,EAAC,IAAID,KAAM,CAAAI,EAAA;IACXH,MAAA,EAAC,IAAID,KAAM,CAAAK,EAAA;IACXJ,MAAA,EAAC,IAAID,KAAM,CAAAM,EAAA;IACXL,MAAA,EAAC,IAAID,KAAM,CAAAO,EAAA;IAEX,OAAAN,MAAA;EAAA,CACX;EAEAO,YACIP,MAEA,EAAAQ,QAAA,EACAC,cACA,EAAAC,cAAA,EAEAC,OAAA,EACAC,aAEJ;IACI,IAAIC,KAAQ;IAEMH,cAAA,IAAAD,cAAA;IAElBD,QAAA,CAASE,cAAiB,GAAAG,KAAK,CAAI,GAAAb,MAAA,CAAO,CAAC;IAC3CQ,QAAA,CAASE,cAAiB,GAAAG,KAAA,GAAQ,CAAC,IAAIb,MAAA,CAAO,CAAC;IAEtCa,KAAA,IAAAJ,cAAA;IAETD,QAAA,CAASE,cAAiB,GAAAG,KAAK,CAAI,GAAAb,MAAA,CAAO,CAAC;IAC3CQ,QAAA,CAASE,cAAiB,GAAAG,KAAA,GAAQ,CAAC,IAAIb,MAAA,CAAO,CAAC;IAEtCa,KAAA,IAAAJ,cAAA;IAETD,QAAA,CAASE,cAAiB,GAAAG,KAAK,CAAI,GAAAb,MAAA,CAAO,CAAC;IAC3CQ,QAAA,CAASE,cAAiB,GAAAG,KAAA,GAAQ,CAAC,IAAIb,MAAA,CAAO,CAAC;IAE/C,MAAMc,aAAA,GAAgBJ,cAAiB,GAAAD,cAAA;IAGvCE,OAAA,CAAQC,aAAA,EAAe,CAAI,GAAAE,aAAA;IACnBH,OAAA,CAAAC,aAAA,EAAe,IAAIE,aAAgB;IACnCH,OAAA,CAAAC,aAAA,EAAe,IAAIE,aAAgB;EAAA;AAEnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}