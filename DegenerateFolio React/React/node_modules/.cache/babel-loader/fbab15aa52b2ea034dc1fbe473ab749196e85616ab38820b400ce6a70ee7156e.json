{"ast":null,"code":"export const runtime = {\n  MixnetApi: [{\n    methods: {\n      current_mixnodes: {\n        description: 'Get the index and phase of the current session.',\n        params: [],\n        type: 'Result<Mixnode, MixnodesErr>'\n      },\n      maybe_register: {\n        description: 'Try to register a mixnode for the next session.',\n        params: [{\n          name: 'session_index',\n          type: 'u32'\n        }, {\n          name: 'mixnode',\n          type: 'Mixnode'\n        }],\n        type: 'bool'\n      },\n      prev_mixnodes: {\n        description: 'Get the index and phase of the current session.',\n        params: [],\n        type: 'Result<Mixnode, MixnodesErr>'\n      },\n      session_status: {\n        description: 'Get the index and phase of the current session.',\n        params: [],\n        type: 'SessionStatus'\n      }\n    },\n    version: 1\n  }]\n};","map":{"version":3,"names":["runtime","MixnetApi","methods","current_mixnodes","description","params","type","maybe_register","name","prev_mixnodes","session_status","version"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/interfaces/mixnet/runtime.js"],"sourcesContent":["export const runtime = {\n    MixnetApi: [\n        {\n            methods: {\n                current_mixnodes: {\n                    description: 'Get the index and phase of the current session.',\n                    params: [],\n                    type: 'Result<Mixnode, MixnodesErr>'\n                },\n                maybe_register: {\n                    description: 'Try to register a mixnode for the next session.',\n                    params: [\n                        {\n                            name: 'session_index',\n                            type: 'u32'\n                        },\n                        {\n                            name: 'mixnode',\n                            type: 'Mixnode'\n                        }\n                    ],\n                    type: 'bool'\n                },\n                prev_mixnodes: {\n                    description: 'Get the index and phase of the current session.',\n                    params: [],\n                    type: 'Result<Mixnode, MixnodesErr>'\n                },\n                session_status: {\n                    description: 'Get the index and phase of the current session.',\n                    params: [],\n                    type: 'SessionStatus'\n                }\n            },\n            version: 1\n        }\n    ]\n};\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACnBC,SAAS,EAAE,CACP;IACIC,OAAO,EAAE;MACLC,gBAAgB,EAAE;QACdC,WAAW,EAAE,iDAAiD;QAC9DC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE;MACV,CAAC;MACDC,cAAc,EAAE;QACZH,WAAW,EAAE,iDAAiD;QAC9DC,MAAM,EAAE,CACJ;UACIG,IAAI,EAAE,eAAe;UACrBF,IAAI,EAAE;QACV,CAAC,EACD;UACIE,IAAI,EAAE,SAAS;UACfF,IAAI,EAAE;QACV,CAAC,CACJ;QACDA,IAAI,EAAE;MACV,CAAC;MACDG,aAAa,EAAE;QACXL,WAAW,EAAE,iDAAiD;QAC9DC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE;MACV,CAAC;MACDI,cAAc,EAAE;QACZN,WAAW,EAAE,iDAAiD;QAC9DC,MAAM,EAAE,EAAE;QACVC,IAAI,EAAE;MACV;IACJ,CAAC;IACDK,OAAO,EAAE;EACb,CAAC;AAET,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}