{"ast":null,"code":"\"use strict\";\n\nconst blockDataMap = {\n  \"bc1-rgba-unorm\": {\n    blockBytes: 8,\n    blockWidth: 4,\n    blockHeight: 4\n  },\n  \"bc2-rgba-unorm\": {\n    blockBytes: 16,\n    blockWidth: 4,\n    blockHeight: 4\n  },\n  \"bc3-rgba-unorm\": {\n    blockBytes: 16,\n    blockWidth: 4,\n    blockHeight: 4\n  },\n  \"bc7-rgba-unorm\": {\n    blockBytes: 16,\n    blockWidth: 4,\n    blockHeight: 4\n  },\n  \"etc1-rgb-unorm\": {\n    blockBytes: 8,\n    blockWidth: 4,\n    blockHeight: 4\n  },\n  \"etc2-rgba8unorm\": {\n    blockBytes: 16,\n    blockWidth: 4,\n    blockHeight: 4\n  },\n  \"astc-4x4-unorm\": {\n    blockBytes: 16,\n    blockWidth: 4,\n    blockHeight: 4\n  }\n};\nconst defaultBlockData = {\n  blockBytes: 4,\n  blockWidth: 1,\n  blockHeight: 1\n};\nconst gpuUploadCompressedTextureResource = {\n  type: \"compressed\",\n  upload(source, gpuTexture, gpu) {\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const blockData = blockDataMap[source.format] || defaultBlockData;\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n      gpu.device.queue.writeTexture({\n        texture: gpuTexture,\n        mipLevel: i\n      }, levelBuffer, {\n        offset: 0,\n        bytesPerRow\n      }, {\n        width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n        height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n        depthOrArrayLayers: 1\n      });\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\nexport { blockDataMap, gpuUploadCompressedTextureResource };","map":{"version":3,"names":["blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","type","upload","source","gpuTexture","gpu","mipWidth","pixelWidth","mipHeight","pixelHeight","blockData","format","i","resource","length","levelBuffer","bytesPerRow","Math","ceil","device","queue","writeTexture","texture","mipLevel","offset","width","height","depthOrArrayLayers","max"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.ts"],"sourcesContent":["import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GPU } from '../../GpuDeviceSystem';\nimport type { GpuTextureUploader } from './GpuTextureUploader';\n\nexport const blockDataMap: Record<string, {blockBytes: number, blockWidth: number, blockHeight: number}> = {\n    'bc1-rgba-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'bc2-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc3-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'bc7-rgba-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'etc1-rgb-unorm': { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n    'etc2-rgba8unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n    'astc-4x4-unorm': { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n};\n\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n\nexport const gpuUploadCompressedTextureResource = {\n\n    type: 'compressed',\n\n    upload(source: CompressedSource, gpuTexture: GPUTexture, gpu: GPU)\n    {\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const blockData = blockDataMap[source.format] || defaultBlockData;\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n\n            gpu.device.queue.writeTexture(\n                {\n                    texture: gpuTexture,\n                    mipLevel: i\n                },\n                levelBuffer,\n                {\n                    offset: 0,\n                    bytesPerRow,\n                },\n                {\n                    width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n                    height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n                    depthOrArrayLayers: 1,\n                }\n            );\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GpuTextureUploader<CompressedSource>;\n\n"],"mappings":";;AAIO,MAAMA,YAA8F;EACvG,kBAAkB;IAAEC,UAAA,EAAY;IAAGC,UAAY;IAAGC,WAAA,EAAa;EAAE;EACjE,kBAAkB;IAAEF,UAAA,EAAY;IAAIC,UAAY;IAAGC,WAAA,EAAa;EAAE;EAClE,kBAAkB;IAAEF,UAAA,EAAY;IAAIC,UAAY;IAAGC,WAAA,EAAa;EAAE;EAClE,kBAAkB;IAAEF,UAAA,EAAY;IAAIC,UAAY;IAAGC,WAAA,EAAa;EAAE;EAClE,kBAAkB;IAAEF,UAAA,EAAY;IAAGC,UAAY;IAAGC,WAAA,EAAa;EAAE;EACjE,mBAAmB;IAAEF,UAAA,EAAY;IAAIC,UAAY;IAAGC,WAAA,EAAa;EAAE;EACnE,kBAAkB;IAAEF,UAAA,EAAY;IAAIC,UAAY;IAAGC,WAAA,EAAa;EAAE;AACtE;AAEA,MAAMC,gBAAA,GAAmB;EAAEH,UAAA,EAAY;EAAGC,UAAY;EAAGC,WAAA,EAAa;AAAE;AAEjE,MAAME,kCAAqC;EAE9CC,IAAM;EAENC,OAAOC,MAA0B,EAAAC,UAAA,EAAwBC,GACzD;IACI,IAAIC,QAAA,GAAWH,MAAO,CAAAI,UAAA;IACtB,IAAIC,SAAA,GAAYL,MAAO,CAAAM,WAAA;IAEvB,MAAMC,SAAY,GAAAf,YAAA,CAAaQ,MAAO,CAAAQ,MAAM,CAAK,IAAAZ,gBAAA;IAEjD,SAASa,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIT,MAAO,CAAAU,QAAA,CAASC,MAAA,EAAQF,CAC5C;MACU,MAAAG,WAAA,GAAcZ,MAAO,CAAAU,QAAA,CAASD,CAAC;MAErC,MAAMI,WAAA,GAAcC,IAAK,CAAAC,IAAA,CAAKZ,QAAA,GAAWI,SAAU,CAAAb,UAAU,IAAIa,SAAU,CAAAd,UAAA;MAE3ES,GAAA,CAAIc,MAAA,CAAOC,KAAM,CAAAC,YAAA,CACb;QACIC,OAAS,EAAAlB,UAAA;QACTmB,QAAU,EAAAX;MAAA,CACd,EACAG,WAAA,EACA;QACIS,MAAQ;QACRR;MAAA,CACJ,EACA;QACIS,KAAA,EAAOR,IAAK,CAAAC,IAAA,CAAKZ,QAAA,GAAWI,SAAU,CAAAb,UAAU,IAAIa,SAAU,CAAAb,UAAA;QAC9D6B,MAAA,EAAQT,IAAK,CAAAC,IAAA,CAAKV,SAAA,GAAYE,SAAU,CAAAZ,WAAW,IAAIY,SAAU,CAAAZ,WAAA;QACjE6B,kBAAoB;MAAA,CACxB,CACJ;MAEArB,QAAA,GAAWW,IAAK,CAAAW,GAAA,CAAItB,QAAY,OAAG,CAAC;MACpCE,SAAA,GAAYS,IAAK,CAAAW,GAAA,CAAIpB,SAAa,OAAG,CAAC;IAAA;EAC1C;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}