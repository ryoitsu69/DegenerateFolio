{"ast":null,"code":"import _defineProperty from \"/home/ryoitsu/Documents/test/react-todo-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Buffer } from 'buffer';\nexport class HexString {\n  constructor(hexString) {\n    _defineProperty(this, \"hexString\", \"\");\n    if (hexString.startsWith(\"0x\")) {\n      this.hexString = hexString;\n    } else {\n      this.hexString = \"0x\".concat(hexString);\n    }\n  }\n  hex() {\n    return this.hexString;\n  }\n  noPrefix() {\n    return this.hexString.startsWith(\"0x\") ? this.hexString.slice(2) : this.hexString;\n  }\n  toString() {\n    return this.hex();\n  }\n  toBuffer() {\n    return Buffer.from(this.noPrefix(), \"hex\");\n  }\n  toUint8Array() {\n    return Uint8Array.from(this.toBuffer());\n  }\n}\nHexString.fromBuffer = buffer => new HexString(Buffer.from(buffer).toString(\"hex\"));\nHexString.fromUnit8Array = arr => new HexString.fromBuffer(Buffer.from(arr));\nHexString.toHex = s => new HexString(s).toString();\nexport const hexstr = s => new HexString(s);\nexport const str2hex = s => Buffer.from(s).toString(\"hex\");\nexport const hex2str = s => Buffer.from(s, 'hex').toString(\"utf8\");","map":{"version":3,"names":["Buffer","HexString","constructor","hexString","_defineProperty","startsWith","concat","hex","noPrefix","slice","toString","toBuffer","from","toUint8Array","Uint8Array","fromBuffer","buffer","fromUnit8Array","arr","toHex","s","hexstr","str2hex","hex2str"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/aptos-api-master/src/helpers/hex-string.js"],"sourcesContent":["import {Buffer} from 'buffer'\n\nexport class HexString {\n    hexString = \"\"\n\n    constructor(hexString) {\n        if (hexString.startsWith(\"0x\")) {\n            this.hexString = hexString\n        } else {\n            this.hexString = `0x${hexString}`\n        }\n    }\n\n    hex() {\n        return this.hexString\n    }\n\n    noPrefix() {\n        return (this.hexString.startsWith(\"0x\")) ? this.hexString.slice(2) : this.hexString\n    }\n\n    toString() {\n        return this.hex()\n    }\n\n    toBuffer() {\n        return Buffer.from(this.noPrefix(), \"hex\")\n    }\n\n    toUint8Array() {\n        return Uint8Array.from(this.toBuffer())\n    }\n}\n\nHexString.fromBuffer = buffer => new HexString(Buffer.from(buffer).toString(\"hex\"))\nHexString.fromUnit8Array = arr => new HexString.fromBuffer(Buffer.from(arr))\nHexString.toHex = s => new HexString(s).toString()\n\nexport const hexstr = s => new HexString(s)\n\nexport const str2hex = s => Buffer.from(s).toString(\"hex\")\nexport const hex2str = s => Buffer.from(s, 'hex').toString(\"utf8\")"],"mappings":";AAAA,SAAQA,MAAM,QAAO,QAAQ;AAE7B,OAAO,MAAMC,SAAS,CAAC;EAGnBC,WAAWA,CAACC,SAAS,EAAE;IAAAC,eAAA,oBAFX,EAAE;IAGV,IAAID,SAAS,CAACE,UAAU,CAAC,IAAI,CAAC,EAAE;MAC5B,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC9B,CAAC,MAAM;MACH,IAAI,CAACA,SAAS,QAAAG,MAAA,CAAQH,SAAS,CAAE;IACrC;EACJ;EAEAI,GAAGA,CAAA,EAAG;IACF,OAAO,IAAI,CAACJ,SAAS;EACzB;EAEAK,QAAQA,CAAA,EAAG;IACP,OAAQ,IAAI,CAACL,SAAS,CAACE,UAAU,CAAC,IAAI,CAAC,GAAI,IAAI,CAACF,SAAS,CAACM,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAACN,SAAS;EACvF;EAEAO,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACH,GAAG,CAAC,CAAC;EACrB;EAEAI,QAAQA,CAAA,EAAG;IACP,OAAOX,MAAM,CAACY,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC;EAC9C;EAEAK,YAAYA,CAAA,EAAG;IACX,OAAOC,UAAU,CAACF,IAAI,CAAC,IAAI,CAACD,QAAQ,CAAC,CAAC,CAAC;EAC3C;AACJ;AAEAV,SAAS,CAACc,UAAU,GAAGC,MAAM,IAAI,IAAIf,SAAS,CAACD,MAAM,CAACY,IAAI,CAACI,MAAM,CAAC,CAACN,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnFT,SAAS,CAACgB,cAAc,GAAGC,GAAG,IAAI,IAAIjB,SAAS,CAACc,UAAU,CAACf,MAAM,CAACY,IAAI,CAACM,GAAG,CAAC,CAAC;AAC5EjB,SAAS,CAACkB,KAAK,GAAGC,CAAC,IAAI,IAAInB,SAAS,CAACmB,CAAC,CAAC,CAACV,QAAQ,CAAC,CAAC;AAElD,OAAO,MAAMW,MAAM,GAAGD,CAAC,IAAI,IAAInB,SAAS,CAACmB,CAAC,CAAC;AAE3C,OAAO,MAAME,OAAO,GAAGF,CAAC,IAAIpB,MAAM,CAACY,IAAI,CAACQ,CAAC,CAAC,CAACV,QAAQ,CAAC,KAAK,CAAC;AAC1D,OAAO,MAAMa,OAAO,GAAGH,CAAC,IAAIpB,MAAM,CAACY,IAAI,CAACQ,CAAC,EAAE,KAAK,CAAC,CAACV,QAAQ,CAAC,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}