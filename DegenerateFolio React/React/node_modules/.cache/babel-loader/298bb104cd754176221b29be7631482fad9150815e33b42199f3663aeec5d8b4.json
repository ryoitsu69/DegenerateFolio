{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { compileHighShaderGlProgram } from '../../high-shader/compileHighShaderToProgram.mjs';\nimport { colorBitGl } from '../../high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBitGl } from '../../high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBitGl } from '../../high-shader/shader-bits/roundPixelsBit.mjs';\nimport { batchSamplersUniformGroup } from '../../renderers/gl/shader/batchSamplersUniformGroup.mjs';\nimport { Shader } from '../../renderers/shared/shader/Shader.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { MAX_TEXTURES } from '../shared/const.mjs';\n\"use strict\";\nclass GlBatchAdaptor {\n  constructor() {\n    this._didUpload = false;\n    this._tempState = State.for2d();\n  }\n  init(batcherPipe) {\n    const glProgram = compileHighShaderGlProgram({\n      name: \"batch\",\n      bits: [colorBitGl, generateTextureBatchBitGl(MAX_TEXTURES), roundPixelsBitGl]\n    });\n    this._shader = new Shader({\n      glProgram,\n      resources: {\n        batchSamplers: batchSamplersUniformGroup\n      }\n    });\n    batcherPipe.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._didUpload = false;\n  }\n  start(batchPipe, geometry) {\n    const renderer = batchPipe.renderer;\n    renderer.shader.bind(this._shader, this._didUpload);\n    renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n    renderer.geometry.bind(geometry, this._shader.glProgram);\n  }\n  execute(batchPipe, batch) {\n    const renderer = batchPipe.renderer;\n    this._didUpload = true;\n    this._tempState.blendMode = batch.blendMode;\n    renderer.state.set(this._tempState);\n    const textures = batch.textures.textures;\n    for (let i = 0; i < textures.length; i++) {\n      renderer.texture.bind(textures[i], i);\n    }\n    renderer.geometry.draw(\"triangle-list\", batch.size, batch.start);\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\n/** @ignore */\nGlBatchAdaptor.extension = {\n  type: [ExtensionType.WebGLPipesAdaptor],\n  name: \"batch\"\n};\nexport { GlBatchAdaptor };","map":{"version":3,"names":["GlBatchAdaptor","constructor","_didUpload","_tempState","State","for2d","init","batcherPipe","glProgram","compileHighShaderGlProgram","name","bits","colorBitGl","generateTextureBatchBitGl","MAX_TEXTURES","roundPixelsBitGl","_shader","Shader","resources","batchSamplers","batchSamplersUniformGroup","renderer","runners","contextChange","add","start","batchPipe","geometry","shader","bind","updateUniformGroup","globalUniforms","uniformGroup","execute","batch","blendMode","state","set","textures","i","length","texture","draw","size","destroy","extension","type","ExtensionType","WebGLPipesAdaptor"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/batcher/gl/GlBatchAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGlProgram } from '../../high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBitGl } from '../../high-shader/shader-bits/roundPixelsBit';\nimport { batchSamplersUniformGroup } from '../../renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { State } from '../../renderers/shared/state/State';\nimport { MAX_TEXTURES } from '../shared/const';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\n/**\n * A BatcherAdaptor that uses WebGL to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _didUpload = false;\n    private readonly _tempState = State.for2d();\n\n    public init(batcherPipe: BatcherPipe): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'batch',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(MAX_TEXTURES),\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n\n        batcherPipe.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._didUpload = false;\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        renderer.shader.bind(this._shader, this._didUpload);\n\n        renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n\n        renderer.geometry.bind(geometry, this._shader.glProgram);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        this._didUpload = true;\n\n        this._tempState.blendMode = batch.blendMode;\n\n        renderer.state.set(this._tempState);\n\n        const textures = batch.textures.textures;\n\n        for (let i = 0; i < textures.length; i++)\n        {\n            renderer.texture.bind(textures[i], i);\n        }\n\n        renderer.geometry.draw('triangle-list', batch.size, batch.start);\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n"],"mappings":";;;;;;;;;;AAoBO,MAAMA,cACb;EADOC,YAAA;IAWH,KAAQC,UAAa;IACJ,KAAAC,UAAA,GAAaC,KAAA,CAAMC,KAAM;EAAA;EAEnCC,KAAKC,WACZ;IACI,MAAMC,SAAA,GAAYC,0BAA2B;MACzCC,IAAM;MACNC,IAAM,GACFC,UAAA,EACAC,yBAAA,CAA0BC,YAAY,GACtCC,gBAAA;IACJ,CACH;IAEI,KAAAC,OAAA,GAAU,IAAIC,MAAO;MACtBT,SAAA;MACAU,SAAW;QACPC,aAAe,EAAAC;MAAA;IACnB,CACH;IAEDb,WAAA,CAAYc,QAAS,CAAAC,OAAA,CAAQC,aAAc,CAAAC,GAAA,CAAI,IAAI;EAAA;EAGhDD,aACPA,CAAA;IACI,KAAKrB,UAAa;EAAA;EAGfuB,MAAMC,SAAA,EAAwBC,QACrC;IACI,MAAMN,QAAA,GAAWK,SAAU,CAAAL,QAAA;IAE3BA,QAAA,CAASO,MAAO,CAAAC,IAAA,CAAK,IAAK,CAAAb,OAAA,EAAS,KAAKd,UAAU;IAElDmB,QAAA,CAASO,MAAO,CAAAE,kBAAA,CAAmBT,QAAS,CAAAU,cAAA,CAAeC,YAAY;IAEvEX,QAAA,CAASM,QAAS,CAAAE,IAAA,CAAKF,QAAU,OAAKX,OAAA,CAAQR,SAAS;EAAA;EAGpDyB,QAAQP,SAAA,EAAwBQ,KACvC;IACI,MAAMb,QAAA,GAAWK,SAAU,CAAAL,QAAA;IAE3B,KAAKnB,UAAa;IAEb,KAAAC,UAAA,CAAWgC,SAAA,GAAYD,KAAM,CAAAC,SAAA;IAEzBd,QAAA,CAAAe,KAAA,CAAMC,GAAI,MAAKlC,UAAU;IAE5B,MAAAmC,QAAA,GAAWJ,KAAA,CAAMI,QAAS,CAAAA,QAAA;IAEhC,SAASC,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASE,MAAA,EAAQD,CACrC;MACIlB,QAAA,CAASoB,OAAQ,CAAAZ,IAAA,CAAKS,QAAS,CAAAC,CAAC,GAAGA,CAAC;IAAA;IAGxClB,QAAA,CAASM,QAAA,CAASe,IAAK,kBAAiBR,KAAM,CAAAS,IAAA,EAAMT,KAAA,CAAMT,KAAK;EAAA;EAG5DmB,OACPA,CAAA;IACS,KAAA5B,OAAA,CAAQ4B,OAAA,CAAQ,IAAI;IACzB,KAAK5B,OAAU;EAAA;AAEvB;AAAA;AA5EahB,cAAA,CAGK6C,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,iBAAA,CAClB;EACAtC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}