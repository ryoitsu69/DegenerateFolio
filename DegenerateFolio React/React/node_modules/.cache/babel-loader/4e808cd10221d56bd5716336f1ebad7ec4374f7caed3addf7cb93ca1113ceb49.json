{"ast":null,"code":"\"use strict\";\n\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: ( /* wgsl */\n    `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `),\n    main: ( /* wgsl */\n    `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `),\n    end: ( /* wgsl */\n    `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `)\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: ( /* glsl */\n    `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `),\n    main: ( /* glsl */\n    `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `),\n    end: ( /* glsl */\n    `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `)\n  }\n};\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };","map":{"version":3,"names":["localUniformBit","name","vertex","header","main","end","localUniformBitGroup2","replace","localUniformBitGl"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts"],"sourcesContent":["export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n"],"mappings":";;AAAO,MAAMA,eAAkB;EAC3BC,IAAM;EACNC,MAAQ;IACJC,MAAA;IAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAUlBC,IAAA;IAAgB;AAAA;AAAA;AAAA;IAIhBC,GAAA;IAAe;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;AAOvB;AAGO,MAAMC,qBAAwB;EACjC,GAAGN,eAAA;EACHE,MAAQ;IACJ,GAAGF,eAAgB,CAAAE,MAAA;IAAA;IAEnBC,MAAA,EAAQH,eAAgB,CAAAE,MAAA,CAAOC,MAAO,CAAAI,OAAA,CAAQ,YAAY,UAAU;EAAA;AAE5E;AAEO,MAAMC,iBAAoB;EAC7BP,IAAM;EACNC,MAAQ;IACJC,MAAA;IAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;IAMlBC,IAAA;IAAgB;AAAA;AAAA;AAAA;IAIhBC,GAAA;IAAe;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;AAOvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}