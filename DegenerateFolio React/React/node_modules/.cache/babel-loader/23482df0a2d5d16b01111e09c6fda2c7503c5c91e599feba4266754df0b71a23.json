{"ast":null,"code":"import { ENV } from \"@pixi/constants\";\nimport { settings } from \"@pixi/settings\";\nconst unknownContext = {};\nlet context = unknownContext;\nfunction getTestContext() {\n  if (context === unknownContext || context?.isContextLost()) {\n    const canvas = settings.ADAPTER.createCanvas();\n    let gl;\n    settings.PREFER_ENV >= ENV.WEBGL2 && (gl = canvas.getContext(\"webgl2\", {})), gl || (gl = canvas.getContext(\"webgl\", {}) || canvas.getContext(\"experimental-webgl\", {}), gl ? gl.getExtension(\"WEBGL_draw_buffers\") : gl = null), context = gl;\n  }\n  return context;\n}\nexport { getTestContext };","map":{"version":3,"names":["unknownContext","context","getTestContext","isContextLost","canvas","settings","ADAPTER","createCanvas","gl","PREFER_ENV","ENV","WEBGL2","getContext","getExtension"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/shader/utils/getTestContext.ts"],"sourcesContent":["import { ENV } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\nconst unknownContext = {};\nlet context: WebGLRenderingContext | WebGL2RenderingContext = unknownContext as any;\n\n/**\n * returns a little WebGL context to use for program inspection.\n * @static\n * @private\n * @returns {WebGLRenderingContext} a gl context to test with\n */\nexport function getTestContext(): WebGLRenderingContext | WebGL2RenderingContext\n{\n    if (context === unknownContext || context?.isContextLost())\n    {\n        const canvas = settings.ADAPTER.createCanvas();\n\n        let gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', {});\n        }\n\n        if (!gl)\n        {\n            gl = (canvas.getContext('webgl', {})\n                || (canvas.getContext('experimental-webgl', {}) as WebGLRenderingContext));\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                gl = null;\n            }\n            else\n            {\n                // for shader testing..\n                gl.getExtension('WEBGL_draw_buffers');\n            }\n        }\n\n        context = gl;\n    }\n\n    return context;\n}\n"],"mappings":";;AAGA,MAAMA,cAAA,GAAiB;AACvB,IAAIC,OAAA,GAA0DD,cAAA;AAQvD,SAASE,eAAA,EAChB;EACI,IAAID,OAAA,KAAYD,cAAA,IAAkBC,OAAA,EAASE,aAAA,IAC3C;IACU,MAAAC,MAAA,GAASC,QAAA,CAASC,OAAA,CAAQC,YAAA,CAAa;IAEzC,IAAAC,EAAA;IAEAH,QAAA,CAASI,UAAA,IAAcC,GAAA,CAAIC,MAAA,KAE3BH,EAAA,GAAKJ,MAAA,CAAOQ,UAAA,CAAW,UAAU,EAAE,IAGlCJ,EAAA,KAEDA,EAAA,GAAMJ,MAAA,CAAOQ,UAAA,CAAW,SAAS,EAAE,KAC3BR,MAAA,CAAOQ,UAAA,CAAW,sBAAsB,CAAE,IAE7CJ,EAAA,GAQDA,EAAA,CAAGK,YAAA,CAAa,oBAAoB,IALpCL,EAAA,GAAK,OASbP,OAAA,GAAUO,EAAA;EACd;EAEO,OAAAP,OAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}