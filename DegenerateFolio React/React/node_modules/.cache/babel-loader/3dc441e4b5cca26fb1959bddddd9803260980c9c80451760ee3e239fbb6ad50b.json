{"ast":null,"code":"\"use strict\";\n\nclass SystemRunner {\n  /**\n   * @param name - The function name that will be executed on the listeners added to this Runner.\n   */\n  constructor(name) {\n    this.items = [];\n    this._name = name;\n  }\n  /* eslint-disable jsdoc/require-param, jsdoc/check-param-names */\n  /**\n   * Dispatch/Broadcast Runner to all listeners added to the queue.\n   * @param {...any} params - (optional) parameters to pass to each listener\n   */\n  /*  eslint-enable jsdoc/require-param, jsdoc/check-param-names */\n  emit(a0, a1, a2, a3, a4, a5, a6, a7) {\n    const {\n      name,\n      items\n    } = this;\n    for (let i = 0, len = items.length; i < len; i++) {\n      items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n    }\n    return this;\n  }\n  /**\n   * Add a listener to the Runner\n   *\n   * Runners do not need to have scope or functions passed to them.\n   * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n   * as the name provided to the Runner when it was created.\n   *\n   * Eg A listener passed to this Runner will require a 'complete' function.\n   *\n   * ```\n   * import { Runner } from 'pixi.js';\n   *\n   * const complete = new Runner('complete');\n   * ```\n   *\n   * The scope used will be the object itself.\n   * @param {any} item - The object that will be listening.\n   */\n  add(item) {\n    if (item[this._name]) {\n      this.remove(item);\n      this.items.push(item);\n    }\n    return this;\n  }\n  /**\n   * Remove a single listener from the dispatch queue.\n   * @param {any} item - The listener that you would like to remove.\n   */\n  remove(item) {\n    const index = this.items.indexOf(item);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n    }\n    return this;\n  }\n  /**\n   * Check to see if the listener is already in the Runner\n   * @param {any} item - The listener that you would like to check.\n   */\n  contains(item) {\n    return this.items.indexOf(item) !== -1;\n  }\n  /** Remove all listeners from the Runner */\n  removeAll() {\n    this.items.length = 0;\n    return this;\n  }\n  /** Remove all references, don't use after this. */\n  destroy() {\n    this.removeAll();\n    this.items = null;\n    this._name = null;\n  }\n  /**\n   * `true` if there are no this Runner contains no listeners\n   * @readonly\n   */\n  get empty() {\n    return this.items.length === 0;\n  }\n  /**\n   * The name of the runner.\n   * @readonly\n   */\n  get name() {\n    return this._name;\n  }\n}\nexport { SystemRunner };","map":{"version":3,"names":["SystemRunner","constructor","name","items","_name","emit","a0","a1","a2","a3","a4","a5","a6","a7","i","len","length","add","item","remove","push","index","indexOf","splice","contains","removeAll","destroy","empty"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/system/SystemRunner.ts"],"sourcesContent":["/**\n * SystemRunner is used internally by the renderers as an efficient way for systems to\n * be notified about what the renderer is up to during the rendering phase.\n *\n * ```\n * import { SystemRunner } from 'pixi.js';\n *\n * const myObject = {\n *     loaded: new SystemRunner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { SystemRunner } from 'pixi.js';\n *\n * const myGame = {\n *     update: new SystemRunner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n * @memberof rendering\n */\nexport class SystemRunner\n{\n    public items: any[];\n    private _name: string;\n\n    /**\n     * @param name - The function name that will be executed on the listeners added to this Runner.\n     */\n    constructor(name: string)\n    {\n        this.items = [];\n        this._name = name;\n    }\n\n    /* eslint-disable jsdoc/require-param, jsdoc/check-param-names */\n    /**\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\n     * @param {...any} params - (optional) parameters to pass to each listener\n     */\n    /*  eslint-enable jsdoc/require-param, jsdoc/check-param-names */\n    public emit(a0?: unknown, a1?: unknown, a2?: unknown, a3?: unknown,\n        a4?: unknown, a5?: unknown, a6?: unknown, a7?: unknown): this\n    {\n        const { name, items } = this;\n\n        for (let i = 0, len = items.length; i < len; i++)\n        {\n            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a listener to the Runner\n     *\n     * Runners do not need to have scope or functions passed to them.\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n     * as the name provided to the Runner when it was created.\n     *\n     * Eg A listener passed to this Runner will require a 'complete' function.\n     *\n     * ```\n     * import { Runner } from 'pixi.js';\n     *\n     * const complete = new Runner('complete');\n     * ```\n     *\n     * The scope used will be the object itself.\n     * @param {any} item - The object that will be listening.\n     */\n    public add(item: unknown): this\n    {\n        if ((item as any)[this._name])\n        {\n            this.remove(item);\n            this.items.push(item);\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     * @param {any} item - The listener that you would like to remove.\n     */\n    public remove(item: unknown): this\n    {\n        const index = this.items.indexOf(item);\n\n        if (index !== -1)\n        {\n            this.items.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Check to see if the listener is already in the Runner\n     * @param {any} item - The listener that you would like to check.\n     */\n    public contains(item: unknown): boolean\n    {\n        return this.items.indexOf(item) !== -1;\n    }\n\n    /** Remove all listeners from the Runner */\n    public removeAll(): this\n    {\n        this.items.length = 0;\n\n        return this;\n    }\n\n    /** Remove all references, don't use after this. */\n    public destroy(): void\n    {\n        this.removeAll();\n        this.items = null;\n        this._name = null;\n    }\n\n    /**\n     * `true` if there are no this Runner contains no listeners\n     * @readonly\n     */\n    public get empty(): boolean\n    {\n        return this.items.length === 0;\n    }\n\n    /**\n     * The name of the runner.\n     * @readonly\n     */\n    public get name(): string\n    {\n        return this._name;\n    }\n}\n"],"mappings":";;AA0CO,MAAMA,YACb;EAAA;AAAA;AAAA;EAOIC,YAAYC,IACZ;IACI,KAAKC,KAAA,GAAQ,EAAC;IACd,KAAKC,KAAQ,GAAAF,IAAA;EAAA;EACjB;EAAA;AAAA;AAAA;AAAA;EAAA;EAQOG,KAAKC,EAAA,EAAcC,EAAc,EAAAC,EAAA,EAAcC,EAAA,EAClDC,EAAc,EAAAC,EAAA,EAAcC,EAAA,EAAcC,EAC9C;IACU;MAAEX,IAAM;MAAAC;IAAA,CAAU;IAExB,SAASW,CAAA,GAAI,CAAG,EAAAC,GAAA,GAAMZ,KAAA,CAAMa,MAAQ,EAAAF,CAAA,GAAIC,GAAA,EAAKD,CAC7C;MACUX,KAAA,CAAAW,CAAC,CAAE,CAAAZ,IAAI,CAAE,CAAAI,EAAA,EAAIC,EAAI,EAAAC,EAAA,EAAIC,EAAI,EAAAC,EAAA,EAAIC,EAAI,EAAAC,EAAA,EAAIC,EAAE;IAAA;IAG1C;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAoBOI,IAAIC,IACX;IACS,IAAAA,IAAA,CAAa,IAAK,CAAAd,KAAK,CAC5B;MACI,KAAKe,MAAA,CAAOD,IAAI;MACX,KAAAf,KAAA,CAAMiB,IAAA,CAAKF,IAAI;IAAA;IAGjB;EAAA;EACX;AAAA;AAAA;AAAA;EAMOC,OAAOD,IACd;IACI,MAAMG,KAAQ,QAAKlB,KAAM,CAAAmB,OAAA,CAAQJ,IAAI;IAErC,IAAIG,KAAA,KAAU,CACd;MACS,KAAAlB,KAAA,CAAMoB,MAAO,CAAAF,KAAA,EAAO,CAAC;IAAA;IAGvB;EAAA;EACX;AAAA;AAAA;AAAA;EAMOG,SAASN,IAChB;IACI,OAAO,IAAK,CAAAf,KAAA,CAAMmB,OAAQ,CAAAJ,IAAI,CAAM;EAAA;EACxC;EAGOO,SACPA,CAAA;IACI,KAAKtB,KAAA,CAAMa,MAAS;IAEb;EAAA;EACX;EAGOU,OACPA,CAAA;IACI,KAAKD,SAAU;IACf,KAAKtB,KAAQ;IACb,KAAKC,KAAQ;EAAA;EACjB;AAAA;AAAA;AAAA;EAMA,IAAWuB,KACXA,CAAA;IACW,YAAKxB,KAAA,CAAMa,MAAW;EAAA;EACjC;AAAA;AAAA;AAAA;EAMA,IAAWd,IACXA,CAAA;IACI,OAAO,IAAK,CAAAE,KAAA;EAAA;AAEpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}