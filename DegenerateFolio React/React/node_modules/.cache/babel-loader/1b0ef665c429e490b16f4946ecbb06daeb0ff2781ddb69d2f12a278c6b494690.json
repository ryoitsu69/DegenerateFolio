{"ast":null,"code":"import { utils } from \"@pixi/core\";\nimport \"../utils/index.mjs\";\nimport { isSingleItem } from \"../utils/isSingleItem.mjs\";\nimport { convertToList } from \"../utils/convertToList.mjs\";\nclass Loader {\n  constructor() {\n    this._parsers = [], this._parsersValidated = !1, this.parsers = new Proxy(this._parsers, {\n      set: (target, key, value) => (this._parsersValidated = !1, target[key] = value, !0)\n    }), this.promiseCache = {};\n  }\n  /** function used for testing */\n  reset() {\n    this._parsersValidated = !1, this.promiseCache = {};\n  }\n  /**\n   * Used internally to generate a promise for the asset to be loaded.\n   * @param url - The URL to be loaded\n   * @param data - any custom additional information relevant to the asset being loaded\n   * @returns - a promise that will resolve to an Asset for example a Texture of a JSON object\n   */\n  _getLoadPromiseAndParser(url, data) {\n    const result = {\n      promise: null,\n      parser: null\n    };\n    return result.promise = (async () => {\n      let asset = null,\n        parser = null;\n      if (data.loadParser && (parser = this._parserHash[data.loadParser], parser || console.warn(`[Assets] specified load parser \"${data.loadParser}\" not found while loading ${url}`)), !parser) {\n        for (let i = 0; i < this.parsers.length; i++) {\n          const parserX = this.parsers[i];\n          if (parserX.load && parserX.test?.(url, data, this)) {\n            parser = parserX;\n            break;\n          }\n        }\n        if (!parser) return console.warn(`[Assets] ${url} could not be loaded as we don't know how to parse it, ensure the correct parser has been added`), null;\n      }\n      asset = await parser.load(url, data, this), result.parser = parser;\n      for (let i = 0; i < this.parsers.length; i++) {\n        const parser2 = this.parsers[i];\n        parser2.parse && parser2.parse && (await parser2.testParse?.(asset, data, this)) && (asset = (await parser2.parse(asset, data, this)) || asset, result.parser = parser2);\n      }\n      return asset;\n    })(), result;\n  }\n  async load(assetsToLoadIn, onProgress) {\n    this._parsersValidated || this._validateParsers();\n    let count = 0;\n    const assets = {},\n      singleAsset = isSingleItem(assetsToLoadIn),\n      assetsToLoad = convertToList(assetsToLoadIn, item => ({\n        alias: [item],\n        src: item\n      })),\n      total = assetsToLoad.length,\n      promises = assetsToLoad.map(async asset => {\n        const url = utils.path.toAbsolute(asset.src);\n        if (!assets[asset.src]) try {\n          this.promiseCache[url] || (this.promiseCache[url] = this._getLoadPromiseAndParser(url, asset)), assets[asset.src] = await this.promiseCache[url].promise, onProgress && onProgress(++count / total);\n        } catch (e) {\n          throw delete this.promiseCache[url], delete assets[asset.src], new Error(`[Loader.load] Failed to load ${url}.\n${e}`);\n        }\n      });\n    return await Promise.all(promises), singleAsset ? assets[assetsToLoad[0].src] : assets;\n  }\n  /**\n   * Unloads one or more assets. Any unloaded assets will be destroyed, freeing up memory for your app.\n   * The parser that created the asset, will be the one that unloads it.\n   * @example\n   * // Single asset:\n   * const asset = await Loader.load('cool.png');\n   *\n   * await Loader.unload('cool.png');\n   *\n   * console.log(asset.destroyed); // true\n   * @param assetsToUnloadIn - urls that you want to unload, or a single one!\n   */\n  async unload(assetsToUnloadIn) {\n    const promises = convertToList(assetsToUnloadIn, item => ({\n      alias: [item],\n      src: item\n    })).map(async asset => {\n      const url = utils.path.toAbsolute(asset.src),\n        loadPromise = this.promiseCache[url];\n      if (loadPromise) {\n        const loadedAsset = await loadPromise.promise;\n        delete this.promiseCache[url], loadPromise.parser?.unload?.(loadedAsset, asset, this);\n      }\n    });\n    await Promise.all(promises);\n  }\n  /** validates our parsers, right now it only checks for name conflicts but we can add more here as required! */\n  _validateParsers() {\n    this._parsersValidated = !0, this._parserHash = this._parsers.filter(parser => parser.name).reduce((hash, parser) => (hash[parser.name] && console.warn(`[Assets] loadParser name conflict \"${parser.name}\"`), {\n      ...hash,\n      [parser.name]: parser\n    }), {});\n  }\n}\nexport { Loader };","map":{"version":3,"names":["Loader","constructor","_parsers","_parsersValidated","parsers","Proxy","set","target","key","value","promiseCache","reset","_getLoadPromiseAndParser","url","data","result","promise","parser","asset","loadParser","_parserHash","console","warn","i","length","parserX","load","test","parser2","parse","testParse","assetsToLoadIn","onProgress","_validateParsers","count","assets","singleAsset","isSingleItem","assetsToLoad","convertToList","item","alias","src","total","promises","map","utils","path","toAbsolute","e","Error","Promise","all","unload","assetsToUnloadIn","loadPromise","loadedAsset","filter","name","reduce","hash"],"sources":["/home/ryoitsu/node_modules/@pixi/assets/src/loader/Loader.ts"],"sourcesContent":["import { utils } from '@pixi/core';\nimport { convertToList, isSingleItem } from '../utils';\n\nimport type { ResolvedAsset } from '../types';\nimport type { LoaderParser } from './parsers/LoaderParser';\nimport type { PromiseAndParser } from './types';\n\n/**\n * The Loader is responsible for loading all assets, such as images, spritesheets, audio files, etc.\n * It does not do anything clever with URLs - it just loads stuff!\n * Behind the scenes all things are cached using promises. This means it's impossible to load an asset more than once.\n * Through the use of LoaderParsers, the loader can understand how to load any kind of file!\n *\n * It is not intended that this class is created by developers - its part of the Asset class\n * This is the second major system of PixiJS' main Assets class\n * @memberof PIXI\n * @class AssetLoader\n */\nexport class Loader\n{\n    private _parsers: LoaderParser[] = [];\n    private _parserHash: Record<string, LoaderParser>;\n\n    private _parsersValidated = false;\n\n    /** All loader parsers registered */\n    public parsers = new Proxy(this._parsers, {\n        set: (target, key, value) =>\n        {\n            this._parsersValidated = false;\n\n            target[key as any as number] = value;\n\n            return true;\n        }\n    });\n\n    /** Cache loading promises that ae currently active */\n    public promiseCache: Record<string, PromiseAndParser> = {};\n\n    /** function used for testing */\n    public reset(): void\n    {\n        this._parsersValidated = false;\n        this.promiseCache = {};\n    }\n\n    /**\n     * Used internally to generate a promise for the asset to be loaded.\n     * @param url - The URL to be loaded\n     * @param data - any custom additional information relevant to the asset being loaded\n     * @returns - a promise that will resolve to an Asset for example a Texture of a JSON object\n     */\n    private _getLoadPromiseAndParser(url: string, data?: ResolvedAsset): PromiseAndParser\n    {\n        const result: PromiseAndParser = {\n            promise: null,\n            parser: null\n        };\n\n        result.promise = (async () =>\n        {\n            let asset = null;\n\n            let parser: LoaderParser = null;\n\n            // first check to see if the user has specified a parser\n            if (data.loadParser)\n            {\n                // they have? lovely, lets use it\n                parser = this._parserHash[data.loadParser];\n\n                if (!parser)\n                {\n                    if (process.env.DEBUG)\n                    {\n                        // eslint-disable-next-line max-len\n                        console.warn(`[Assets] specified load parser \"${data.loadParser}\" not found while loading ${url}`);\n                    }\n                }\n            }\n\n            // no parser specified, so lets try and find one using the tests\n            if (!parser)\n            {\n                for (let i = 0; i < this.parsers.length; i++)\n                {\n                    const parserX = this.parsers[i];\n\n                    if (parserX.load && parserX.test?.(url, data, this))\n                    {\n                        parser = parserX;\n                        break;\n                    }\n                }\n\n                if (!parser)\n                {\n                    if (process.env.DEBUG)\n                    {\n                        // eslint-disable-next-line max-len\n                        console.warn(`[Assets] ${url} could not be loaded as we don't know how to parse it, ensure the correct parser has been added`);\n                    }\n\n                    return null;\n                }\n            }\n\n            asset = await parser.load(url, data, this);\n            result.parser = parser;\n\n            for (let i = 0; i < this.parsers.length; i++)\n            {\n                const parser = this.parsers[i];\n\n                if (parser.parse)\n                {\n                    if (parser.parse && await parser.testParse?.(asset, data, this))\n                    {\n                        // transform the asset..\n                        asset = await parser.parse(asset, data, this) || asset;\n\n                        result.parser = parser;\n                    }\n                }\n            }\n\n            return asset;\n        })();\n\n        return result;\n    }\n\n    /**\n     * Loads one or more assets using the parsers added to the Loader.\n     * @example\n     * // Single asset:\n     * const asset = await Loader.load('cool.png');\n     * console.log(asset);\n     *\n     * // Multiple assets:\n     * const assets = await Loader.load(['cool.png', 'cooler.png']);\n     * console.log(assets);\n     * @param assetsToLoadIn - urls that you want to load, or a single one!\n     * @param onProgress - For multiple asset loading only, an optional function that is called\n     * when progress on asset loading is made. The function is passed a single parameter, `progress`,\n     * which represents the percentage (0.0 - 1.0) of the assets loaded. Do not use this function\n     * to detect when assets are complete and available, instead use the Promise returned by this function.\n     */\n    public async load<T = any>(\n        assetsToLoadIn: string | ResolvedAsset,\n        onProgress?: (progress: number) => void,\n    ): Promise<T>;\n    public async load<T = any>(\n        assetsToLoadIn: string[] | ResolvedAsset[],\n        onProgress?: (progress: number) => void,\n    ): Promise<Record<string, T>>;\n    public async load<T = any>(\n        assetsToLoadIn: string | string[] | ResolvedAsset | ResolvedAsset[],\n        onProgress?: (progress: number) => void,\n    ): Promise<T | Record<string, T>>\n    {\n        if (!this._parsersValidated)\n        {\n            this._validateParsers();\n        }\n\n        let count = 0;\n\n        const assets: Record<string, Promise<any>> = {};\n\n        const singleAsset = isSingleItem(assetsToLoadIn);\n\n        const assetsToLoad = convertToList<ResolvedAsset>(assetsToLoadIn, (item) => ({\n            alias: [item],\n            src: item,\n        }));\n\n        const total = assetsToLoad.length;\n\n        const promises: Promise<void>[] = assetsToLoad.map(async (asset: ResolvedAsset) =>\n        {\n            const url = utils.path.toAbsolute(asset.src);\n\n            if (!assets[asset.src])\n            {\n                try\n                {\n                    if (!this.promiseCache[url])\n                    {\n                        this.promiseCache[url] = this._getLoadPromiseAndParser(url, asset);\n                    }\n\n                    assets[asset.src] = await this.promiseCache[url].promise;\n\n                    // Only progress if nothing goes wrong\n                    if (onProgress) onProgress(++count / total);\n                }\n                catch (e)\n                {\n                    // Delete eventually registered file and promises from internal cache\n                    // so they can be eligible for another loading attempt\n                    delete this.promiseCache[url];\n                    delete assets[asset.src];\n\n                    // Stop further execution\n                    throw new Error(`[Loader.load] Failed to load ${url}.\\n${e}`);\n                }\n            }\n        });\n\n        await Promise.all(promises);\n\n        return singleAsset ? assets[assetsToLoad[0].src] : assets;\n    }\n\n    /**\n     * Unloads one or more assets. Any unloaded assets will be destroyed, freeing up memory for your app.\n     * The parser that created the asset, will be the one that unloads it.\n     * @example\n     * // Single asset:\n     * const asset = await Loader.load('cool.png');\n     *\n     * await Loader.unload('cool.png');\n     *\n     * console.log(asset.destroyed); // true\n     * @param assetsToUnloadIn - urls that you want to unload, or a single one!\n     */\n    public async unload(\n        assetsToUnloadIn: string | string[] | ResolvedAsset | ResolvedAsset[],\n    ): Promise<void>\n    {\n        const assetsToUnload = convertToList<ResolvedAsset>(assetsToUnloadIn, (item) => ({\n            alias: [item],\n            src: item,\n        }));\n\n        const promises: Promise<void>[] = assetsToUnload.map(async (asset: ResolvedAsset) =>\n        {\n            const url = utils.path.toAbsolute(asset.src);\n\n            const loadPromise = this.promiseCache[url];\n\n            if (loadPromise)\n            {\n                const loadedAsset = await loadPromise.promise;\n\n                delete this.promiseCache[url];\n\n                loadPromise.parser?.unload?.(loadedAsset, asset, this);\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    /** validates our parsers, right now it only checks for name conflicts but we can add more here as required! */\n    private _validateParsers()\n    {\n        this._parsersValidated = true;\n\n        this._parserHash = this._parsers\n            .filter((parser) => parser.name)\n            .reduce((hash, parser) =>\n            {\n                if (hash[parser.name])\n                {\n                    if (process.env.DEBUG)\n                    {\n                        console.warn(`[Assets] loadParser name conflict \"${parser.name}\"`);\n                    }\n                }\n\n                return { ...hash, [parser.name]: parser };\n            }, {} as Record<string, LoaderParser>);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}