{"ast":null,"code":"import { _0n, _1n } from '@polkadot/util';\nimport { BigInt } from '@polkadot/x-bigint';\nconst P64_1 = BigInt('11400714785074694791');\nconst P64_2 = BigInt('14029467366897019727');\nconst P64_3 = BigInt('1609587929392839161');\nconst P64_4 = BigInt('9650029242287828579');\nconst P64_5 = BigInt('2870177450012600261');\nconst U64 = BigInt('0xffffffffffffffff');\nconst _7n = BigInt(7);\nconst _11n = BigInt(11);\nconst _12n = BigInt(12);\nconst _16n = BigInt(16);\nconst _18n = BigInt(18);\nconst _23n = BigInt(23);\nconst _27n = BigInt(27);\nconst _29n = BigInt(29);\nconst _31n = BigInt(31);\nconst _32n = BigInt(32);\nconst _33n = BigInt(33);\nconst _64n = BigInt(64);\nconst _256n = BigInt(256);\nfunction rotl(a, b) {\n  const c = a & U64;\n  return (c << b | c >> _64n - b) & U64;\n}\nfunction fromU8a(u8a, p, count) {\n  const bigints = new Array(count);\n  let offset = 0;\n  for (let i = 0; i < count; i++, offset += 2) {\n    bigints[i] = BigInt(u8a[p + offset] | u8a[p + 1 + offset] << 8);\n  }\n  let result = _0n;\n  for (let i = count - 1; i >= 0; i--) {\n    result = (result << _16n) + bigints[i];\n  }\n  return result;\n}\nfunction init(seed, input) {\n  const state = {\n    seed,\n    u8a: new Uint8Array(32),\n    u8asize: 0,\n    v1: seed + P64_1 + P64_2,\n    v2: seed + P64_2,\n    v3: seed,\n    v4: seed - P64_1\n  };\n  if (input.length < 32) {\n    state.u8a.set(input);\n    state.u8asize = input.length;\n    return state;\n  }\n  const limit = input.length - 32;\n  let p = 0;\n  if (limit >= 0) {\n    const adjustV = v => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);\n    do {\n      state.v1 = adjustV(state.v1);\n      p += 8;\n      state.v2 = adjustV(state.v2);\n      p += 8;\n      state.v3 = adjustV(state.v3);\n      p += 8;\n      state.v4 = adjustV(state.v4);\n      p += 8;\n    } while (p <= limit);\n  }\n  if (p < input.length) {\n    state.u8a.set(input.subarray(p, input.length));\n    state.u8asize = input.length - p;\n  }\n  return state;\n}\nexport function xxhash64(input, initSeed) {\n  const {\n    seed,\n    u8a,\n    u8asize,\n    v1,\n    v2,\n    v3,\n    v4\n  } = init(BigInt(initSeed), input);\n  let p = 0;\n  let h64 = U64 & BigInt(input.length) + (input.length >= 32 ? ((((rotl(v1, _1n) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v4, _18n) ^ P64_1 * rotl(v1 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v2 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v4 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);\n  while (p <= u8asize - 8) {\n    h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);\n    p += 8;\n  }\n  if (p + 4 <= u8asize) {\n    h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);\n    p += 4;\n  }\n  while (p < u8asize) {\n    h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * BigInt(u8a[p++]), _11n);\n  }\n  h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);\n  h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);\n  h64 = U64 & (h64 ^ h64 >> _32n);\n  const result = new Uint8Array(8);\n  for (let i = 7; i >= 0; i--) {\n    result[i] = Number(h64 % _256n);\n    h64 = h64 / _256n;\n  }\n  return result;\n}","map":{"version":3,"names":["_0n","_1n","BigInt","P64_1","P64_2","P64_3","P64_4","P64_5","U64","_7n","_11n","_12n","_16n","_18n","_23n","_27n","_29n","_31n","_32n","_33n","_64n","_256n","rotl","a","b","c","fromU8a","u8a","p","count","bigints","Array","offset","i","result","init","seed","input","state","Uint8Array","u8asize","v1","v2","v3","v4","length","set","limit","adjustV","v","subarray","xxhash64","initSeed","h64","Number"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/xxhash/xxhash64.js"],"sourcesContent":["import { _0n, _1n } from '@polkadot/util';\nimport { BigInt } from '@polkadot/x-bigint';\nconst P64_1 = BigInt('11400714785074694791');\nconst P64_2 = BigInt('14029467366897019727');\nconst P64_3 = BigInt('1609587929392839161');\nconst P64_4 = BigInt('9650029242287828579');\nconst P64_5 = BigInt('2870177450012600261');\nconst U64 = BigInt('0xffffffffffffffff');\nconst _7n = BigInt(7);\nconst _11n = BigInt(11);\nconst _12n = BigInt(12);\nconst _16n = BigInt(16);\nconst _18n = BigInt(18);\nconst _23n = BigInt(23);\nconst _27n = BigInt(27);\nconst _29n = BigInt(29);\nconst _31n = BigInt(31);\nconst _32n = BigInt(32);\nconst _33n = BigInt(33);\nconst _64n = BigInt(64);\nconst _256n = BigInt(256);\nfunction rotl(a, b) {\n    const c = a & U64;\n    return ((c << b) | (c >> (_64n - b))) & U64;\n}\nfunction fromU8a(u8a, p, count) {\n    const bigints = new Array(count);\n    let offset = 0;\n    for (let i = 0; i < count; i++, offset += 2) {\n        bigints[i] = BigInt(u8a[p + offset] | (u8a[p + 1 + offset] << 8));\n    }\n    let result = _0n;\n    for (let i = count - 1; i >= 0; i--) {\n        result = (result << _16n) + bigints[i];\n    }\n    return result;\n}\nfunction init(seed, input) {\n    const state = {\n        seed,\n        u8a: new Uint8Array(32),\n        u8asize: 0,\n        v1: seed + P64_1 + P64_2,\n        v2: seed + P64_2,\n        v3: seed,\n        v4: seed - P64_1\n    };\n    if (input.length < 32) {\n        state.u8a.set(input);\n        state.u8asize = input.length;\n        return state;\n    }\n    const limit = input.length - 32;\n    let p = 0;\n    if (limit >= 0) {\n        const adjustV = (v) => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);\n        do {\n            state.v1 = adjustV(state.v1);\n            p += 8;\n            state.v2 = adjustV(state.v2);\n            p += 8;\n            state.v3 = adjustV(state.v3);\n            p += 8;\n            state.v4 = adjustV(state.v4);\n            p += 8;\n        } while (p <= limit);\n    }\n    if (p < input.length) {\n        state.u8a.set(input.subarray(p, input.length));\n        state.u8asize = input.length - p;\n    }\n    return state;\n}\nexport function xxhash64(input, initSeed) {\n    const { seed, u8a, u8asize, v1, v2, v3, v4 } = init(BigInt(initSeed), input);\n    let p = 0;\n    let h64 = U64 & (BigInt(input.length) + (input.length >= 32\n        ? (((((((((rotl(v1, _1n) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v4, _18n)) ^ (P64_1 * rotl(v1 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v2 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v3 * P64_2, _31n))) * P64_1 + P64_4) ^ (P64_1 * rotl(v4 * P64_2, _31n))) * P64_1 + P64_4)\n        : (seed + P64_5)));\n    while (p <= (u8asize - 8)) {\n        h64 = U64 & (P64_4 + P64_1 * rotl(h64 ^ (P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n)), _27n));\n        p += 8;\n    }\n    if ((p + 4) <= u8asize) {\n        h64 = U64 & (P64_3 + P64_2 * rotl(h64 ^ (P64_1 * fromU8a(u8a, p, 2)), _23n));\n        p += 4;\n    }\n    while (p < u8asize) {\n        h64 = U64 & (P64_1 * rotl(h64 ^ (P64_5 * BigInt(u8a[p++])), _11n));\n    }\n    h64 = U64 & (P64_2 * (h64 ^ (h64 >> _33n)));\n    h64 = U64 & (P64_3 * (h64 ^ (h64 >> _29n)));\n    h64 = U64 & (h64 ^ (h64 >> _32n));\n    const result = new Uint8Array(8);\n    for (let i = 7; i >= 0; i--) {\n        result[i] = Number(h64 % _256n);\n        h64 = h64 / _256n;\n    }\n    return result;\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;AACzC,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,MAAMC,KAAK,GAAGD,MAAM,CAAC,sBAAsB,CAAC;AAC5C,MAAME,KAAK,GAAGF,MAAM,CAAC,sBAAsB,CAAC;AAC5C,MAAMG,KAAK,GAAGH,MAAM,CAAC,qBAAqB,CAAC;AAC3C,MAAMI,KAAK,GAAGJ,MAAM,CAAC,qBAAqB,CAAC;AAC3C,MAAMK,KAAK,GAAGL,MAAM,CAAC,qBAAqB,CAAC;AAC3C,MAAMM,GAAG,GAAGN,MAAM,CAAC,oBAAoB,CAAC;AACxC,MAAMO,GAAG,GAAGP,MAAM,CAAC,CAAC,CAAC;AACrB,MAAMQ,IAAI,GAAGR,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMS,IAAI,GAAGT,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMU,IAAI,GAAGV,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMW,IAAI,GAAGX,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMY,IAAI,GAAGZ,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMa,IAAI,GAAGb,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMc,IAAI,GAAGd,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMe,IAAI,GAAGf,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMgB,IAAI,GAAGhB,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMiB,IAAI,GAAGjB,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMkB,IAAI,GAAGlB,MAAM,CAAC,EAAE,CAAC;AACvB,MAAMmB,KAAK,GAAGnB,MAAM,CAAC,GAAG,CAAC;AACzB,SAASoB,IAAIA,CAACC,CAAC,EAAEC,CAAC,EAAE;EAChB,MAAMC,CAAC,GAAGF,CAAC,GAAGf,GAAG;EACjB,OAAO,CAAEiB,CAAC,IAAID,CAAC,GAAKC,CAAC,IAAKL,IAAI,GAAGI,CAAG,IAAIhB,GAAG;AAC/C;AACA,SAASkB,OAAOA,CAACC,GAAG,EAAEC,CAAC,EAAEC,KAAK,EAAE;EAC5B,MAAMC,OAAO,GAAG,IAAIC,KAAK,CAACF,KAAK,CAAC;EAChC,IAAIG,MAAM,GAAG,CAAC;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAED,MAAM,IAAI,CAAC,EAAE;IACzCF,OAAO,CAACG,CAAC,CAAC,GAAG/B,MAAM,CAACyB,GAAG,CAACC,CAAC,GAAGI,MAAM,CAAC,GAAIL,GAAG,CAACC,CAAC,GAAG,CAAC,GAAGI,MAAM,CAAC,IAAI,CAAE,CAAC;EACrE;EACA,IAAIE,MAAM,GAAGlC,GAAG;EAChB,KAAK,IAAIiC,CAAC,GAAGJ,KAAK,GAAG,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjCC,MAAM,GAAG,CAACA,MAAM,IAAItB,IAAI,IAAIkB,OAAO,CAACG,CAAC,CAAC;EAC1C;EACA,OAAOC,MAAM;AACjB;AACA,SAASC,IAAIA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACvB,MAAMC,KAAK,GAAG;IACVF,IAAI;IACJT,GAAG,EAAE,IAAIY,UAAU,CAAC,EAAE,CAAC;IACvBC,OAAO,EAAE,CAAC;IACVC,EAAE,EAAEL,IAAI,GAAGjC,KAAK,GAAGC,KAAK;IACxBsC,EAAE,EAAEN,IAAI,GAAGhC,KAAK;IAChBuC,EAAE,EAAEP,IAAI;IACRQ,EAAE,EAAER,IAAI,GAAGjC;EACf,CAAC;EACD,IAAIkC,KAAK,CAACQ,MAAM,GAAG,EAAE,EAAE;IACnBP,KAAK,CAACX,GAAG,CAACmB,GAAG,CAACT,KAAK,CAAC;IACpBC,KAAK,CAACE,OAAO,GAAGH,KAAK,CAACQ,MAAM;IAC5B,OAAOP,KAAK;EAChB;EACA,MAAMS,KAAK,GAAGV,KAAK,CAACQ,MAAM,GAAG,EAAE;EAC/B,IAAIjB,CAAC,GAAG,CAAC;EACT,IAAImB,KAAK,IAAI,CAAC,EAAE;IACZ,MAAMC,OAAO,GAAIC,CAAC,IAAK9C,KAAK,GAAGmB,IAAI,CAAC2B,CAAC,GAAG7C,KAAK,GAAGsB,OAAO,CAACW,KAAK,EAAET,CAAC,EAAE,CAAC,CAAC,EAAEX,IAAI,CAAC;IAC3E,GAAG;MACCqB,KAAK,CAACG,EAAE,GAAGO,OAAO,CAACV,KAAK,CAACG,EAAE,CAAC;MAC5Bb,CAAC,IAAI,CAAC;MACNU,KAAK,CAACI,EAAE,GAAGM,OAAO,CAACV,KAAK,CAACI,EAAE,CAAC;MAC5Bd,CAAC,IAAI,CAAC;MACNU,KAAK,CAACK,EAAE,GAAGK,OAAO,CAACV,KAAK,CAACK,EAAE,CAAC;MAC5Bf,CAAC,IAAI,CAAC;MACNU,KAAK,CAACM,EAAE,GAAGI,OAAO,CAACV,KAAK,CAACM,EAAE,CAAC;MAC5BhB,CAAC,IAAI,CAAC;IACV,CAAC,QAAQA,CAAC,IAAImB,KAAK;EACvB;EACA,IAAInB,CAAC,GAAGS,KAAK,CAACQ,MAAM,EAAE;IAClBP,KAAK,CAACX,GAAG,CAACmB,GAAG,CAACT,KAAK,CAACa,QAAQ,CAACtB,CAAC,EAAES,KAAK,CAACQ,MAAM,CAAC,CAAC;IAC9CP,KAAK,CAACE,OAAO,GAAGH,KAAK,CAACQ,MAAM,GAAGjB,CAAC;EACpC;EACA,OAAOU,KAAK;AAChB;AACA,OAAO,SAASa,QAAQA,CAACd,KAAK,EAAEe,QAAQ,EAAE;EACtC,MAAM;IAAEhB,IAAI;IAAET,GAAG;IAAEa,OAAO;IAAEC,EAAE;IAAEC,EAAE;IAAEC,EAAE;IAAEC;EAAG,CAAC,GAAGT,IAAI,CAACjC,MAAM,CAACkD,QAAQ,CAAC,EAAEf,KAAK,CAAC;EAC5E,IAAIT,CAAC,GAAG,CAAC;EACT,IAAIyB,GAAG,GAAG7C,GAAG,GAAIN,MAAM,CAACmC,KAAK,CAACQ,MAAM,CAAC,IAAIR,KAAK,CAACQ,MAAM,IAAI,EAAE,GACpD,CAAE,CAAE,CAAE,CAAEvB,IAAI,CAACmB,EAAE,EAAExC,GAAG,CAAC,GAAGqB,IAAI,CAACoB,EAAE,EAAEjC,GAAG,CAAC,GAAGa,IAAI,CAACqB,EAAE,EAAEhC,IAAI,CAAC,GAAGW,IAAI,CAACsB,EAAE,EAAE/B,IAAI,CAAC,GAAKV,KAAK,GAAGmB,IAAI,CAACmB,EAAE,GAAGrC,KAAK,EAAEa,IAAI,CAAE,IAAId,KAAK,GAAGG,KAAK,GAAKH,KAAK,GAAGmB,IAAI,CAACoB,EAAE,GAAGtC,KAAK,EAAEa,IAAI,CAAE,IAAId,KAAK,GAAGG,KAAK,GAAKH,KAAK,GAAGmB,IAAI,CAACqB,EAAE,GAAGvC,KAAK,EAAEa,IAAI,CAAE,IAAId,KAAK,GAAGG,KAAK,GAAKH,KAAK,GAAGmB,IAAI,CAACsB,EAAE,GAAGxC,KAAK,EAAEa,IAAI,CAAE,IAAId,KAAK,GAAGG,KAAK,GAC3R8B,IAAI,GAAG7B,KAAM,CAAE;EACtB,OAAOqB,CAAC,IAAKY,OAAO,GAAG,CAAE,EAAE;IACvBa,GAAG,GAAG7C,GAAG,GAAIF,KAAK,GAAGH,KAAK,GAAGmB,IAAI,CAAC+B,GAAG,GAAIlD,KAAK,GAAGmB,IAAI,CAAClB,KAAK,GAAGsB,OAAO,CAACC,GAAG,EAAEC,CAAC,EAAE,CAAC,CAAC,EAAEX,IAAI,CAAE,EAAEF,IAAI,CAAE;IAChGa,CAAC,IAAI,CAAC;EACV;EACA,IAAKA,CAAC,GAAG,CAAC,IAAKY,OAAO,EAAE;IACpBa,GAAG,GAAG7C,GAAG,GAAIH,KAAK,GAAGD,KAAK,GAAGkB,IAAI,CAAC+B,GAAG,GAAIlD,KAAK,GAAGuB,OAAO,CAACC,GAAG,EAAEC,CAAC,EAAE,CAAC,CAAE,EAAEd,IAAI,CAAE;IAC5Ec,CAAC,IAAI,CAAC;EACV;EACA,OAAOA,CAAC,GAAGY,OAAO,EAAE;IAChBa,GAAG,GAAG7C,GAAG,GAAIL,KAAK,GAAGmB,IAAI,CAAC+B,GAAG,GAAI9C,KAAK,GAAGL,MAAM,CAACyB,GAAG,CAACC,CAAC,EAAE,CAAC,CAAE,EAAElB,IAAI,CAAE;EACtE;EACA2C,GAAG,GAAG7C,GAAG,GAAIJ,KAAK,IAAIiD,GAAG,GAAIA,GAAG,IAAIlC,IAAK,CAAE;EAC3CkC,GAAG,GAAG7C,GAAG,GAAIH,KAAK,IAAIgD,GAAG,GAAIA,GAAG,IAAIrC,IAAK,CAAE;EAC3CqC,GAAG,GAAG7C,GAAG,IAAI6C,GAAG,GAAIA,GAAG,IAAInC,IAAK,CAAC;EACjC,MAAMgB,MAAM,GAAG,IAAIK,UAAU,CAAC,CAAC,CAAC;EAChC,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzBC,MAAM,CAACD,CAAC,CAAC,GAAGqB,MAAM,CAACD,GAAG,GAAGhC,KAAK,CAAC;IAC/BgC,GAAG,GAAGA,GAAG,GAAGhC,KAAK;EACrB;EACA,OAAOa,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}