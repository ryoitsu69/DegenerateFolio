{"ast":null,"code":"import { u32 } from '@polkadot/types-codec';\nimport { BN, bnToBn, isBigInt, isBn, isHex, isNumber, isU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nconst PREFIX_1BYTE = 0xef;\nconst PREFIX_2BYTE = 0xfc;\nconst PREFIX_4BYTE = 0xfd;\nconst PREFIX_8BYTE = 0xfe;\nconst MAX_1BYTE = new BN(PREFIX_1BYTE);\nconst MAX_2BYTE = new BN(1).shln(16);\nconst MAX_4BYTE = new BN(1).shln(32);\n/** @internal */\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof GenericAccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {\n    return value;\n  }\n  return decodeAccountIndex(decodeAddress(value));\n}\n/**\n * @name GenericAccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\nexport class GenericAccountIndex extends u32 {\n  constructor(registry, value = new BN(0)) {\n    super(registry, decodeAccountIndex(value));\n  }\n  static calcLength(_value) {\n    const value = bnToBn(_value);\n    if (value.lte(MAX_1BYTE)) {\n      return 1;\n    } else if (value.lt(MAX_2BYTE)) {\n      return 2;\n    } else if (value.lt(MAX_4BYTE)) {\n      return 4;\n    }\n    return 8;\n  }\n  static readLength(input) {\n    const first = input[0];\n    if (first === PREFIX_2BYTE) {\n      return [1, 2];\n    } else if (first === PREFIX_4BYTE) {\n      return [1, 4];\n    } else if (first === PREFIX_8BYTE) {\n      return [1, 8];\n    }\n    return [0, 1];\n  }\n  static writeLength(input) {\n    switch (input.length) {\n      case 2:\n        return new Uint8Array([PREFIX_2BYTE]);\n      case 4:\n        return new Uint8Array([PREFIX_4BYTE]);\n      case 8:\n        return new Uint8Array([PREFIX_8BYTE]);\n      default:\n        return new Uint8Array([]);\n    }\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    // shortcut for BN or Number, don't create an object\n    if (isBn(other) || isNumber(other)) {\n      return super.eq(other);\n    }\n    // convert and compare\n    return super.eq(this.registry.createTypeUnsafe('AccountIndex', [other]));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Converts the value in a best-fit primitive form\n   */\n  toPrimitive() {\n    return this.toJSON();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    const length = GenericAccountIndex.calcLength(this);\n    return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType() {\n    return 'AccountIndex';\n  }\n}","map":{"version":3,"names":["u32","BN","bnToBn","isBigInt","isBn","isHex","isNumber","isU8a","decodeAddress","encodeAddress","PREFIX_1BYTE","PREFIX_2BYTE","PREFIX_4BYTE","PREFIX_8BYTE","MAX_1BYTE","MAX_2BYTE","shln","MAX_4BYTE","decodeAccountIndex","value","GenericAccountIndex","toBn","constructor","registry","calcLength","_value","lte","lt","readLength","input","first","writeLength","length","Uint8Array","eq","other","createTypeUnsafe","toHuman","toJSON","toString","toPrimitive","toU8a","subarray","chainSS58","toRawType"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/generic/AccountIndex.js"],"sourcesContent":["import { u32 } from '@polkadot/types-codec';\nimport { BN, bnToBn, isBigInt, isBn, isHex, isNumber, isU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nconst PREFIX_1BYTE = 0xef;\nconst PREFIX_2BYTE = 0xfc;\nconst PREFIX_4BYTE = 0xfd;\nconst PREFIX_8BYTE = 0xfe;\nconst MAX_1BYTE = new BN(PREFIX_1BYTE);\nconst MAX_2BYTE = new BN(1).shln(16);\nconst MAX_4BYTE = new BN(1).shln(32);\n/** @internal */\nfunction decodeAccountIndex(value) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    if (value instanceof GenericAccountIndex) {\n        // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n        // AccountIndex), which has the initial `toString()` implementation.\n        return value.toBn();\n    }\n    else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {\n        return value;\n    }\n    return decodeAccountIndex(decodeAddress(value));\n}\n/**\n * @name GenericAccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\nexport class GenericAccountIndex extends u32 {\n    constructor(registry, value = new BN(0)) {\n        super(registry, decodeAccountIndex(value));\n    }\n    static calcLength(_value) {\n        const value = bnToBn(_value);\n        if (value.lte(MAX_1BYTE)) {\n            return 1;\n        }\n        else if (value.lt(MAX_2BYTE)) {\n            return 2;\n        }\n        else if (value.lt(MAX_4BYTE)) {\n            return 4;\n        }\n        return 8;\n    }\n    static readLength(input) {\n        const first = input[0];\n        if (first === PREFIX_2BYTE) {\n            return [1, 2];\n        }\n        else if (first === PREFIX_4BYTE) {\n            return [1, 4];\n        }\n        else if (first === PREFIX_8BYTE) {\n            return [1, 8];\n        }\n        return [0, 1];\n    }\n    static writeLength(input) {\n        switch (input.length) {\n            case 2: return new Uint8Array([PREFIX_2BYTE]);\n            case 4: return new Uint8Array([PREFIX_4BYTE]);\n            case 8: return new Uint8Array([PREFIX_8BYTE]);\n            default: return new Uint8Array([]);\n        }\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    eq(other) {\n        // shortcut for BN or Number, don't create an object\n        if (isBn(other) || isNumber(other)) {\n            return super.eq(other);\n        }\n        // convert and compare\n        return super.eq(this.registry.createTypeUnsafe('AccountIndex', [other]));\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    toHuman() {\n        return this.toJSON();\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * @description Converts the value in a best-fit primitive form\n     */\n    toPrimitive() {\n        return this.toJSON();\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n    toString() {\n        const length = GenericAccountIndex.calcLength(this);\n        return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    toRawType() {\n        return 'AccountIndex';\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}