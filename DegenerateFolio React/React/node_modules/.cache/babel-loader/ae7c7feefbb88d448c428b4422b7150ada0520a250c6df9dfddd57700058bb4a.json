{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n const float tmax = 20.0;\n\n float hash(float n) {\n     return fract(sin(n)*43758.5453);\n }\n\n vec3 hash(vec3 p){\n\n     float n = sin(dot(p, vec3(7, 157, 113)));\n     return fract(vec3(2097152, 262144, 32768)*n);\n }\n\n float noise(float g) {\n     float p = floor(g);\n     float f = fract(g);\n\n     return mix(hash(p), hash(p + 1.0), f);\n }\n\n float voronoi(vec3 x) {\n     vec3 p = floor(x);\n     vec3 f = fract(x);\n\n     vec2 res = vec2(8.0);\n\n     for(int i = -1; i <= 1; i++)\n         for(int j = -1; j <= 1; j++)\n             for(int k = -1; k <= 1; k++) {\n                 vec3 g = vec3(float(i), float(j), float(k));\n                 vec3 r = g + hash(p + g) - f;\n\n                 float d = max(abs(r.x), max(abs(r.y), abs(r.z)));\n\n                 if(d < res.x) {\n                     res.y = res.x;\n                     res.x = d;\n                 } else if(d < res.y) {\n                     res.y = d;\n                 }\n             }\n\n             return res.y - res.x;\n }\n\n vec2 path(float z) {\n     return vec2(cos(z/8.0)*sin(z/12.0)*12.0, 0.0);\n }\n\n float map(vec3 p) {\n     vec4 q = vec4(p, 1.0);\n     q.x += 1.0;\n\n     for(int i = 0; i < 6; i++) {\n         q.xyz = -1.0 + 2.0*fract(0.5 + 0.5*q.xyz);\n         q = 1.2*q/max(dot(q.xyz, q.xyz), 0.1);\n     }\n\n     vec2 tun = abs(p.xy - path(p.z))*vec2(0.6, 0.5);\n\n     return min(0.25*abs(q.y)/q.w, 1.0 - max(tun.x, tun.y));\n }\n\n float march(vec3 ro, vec3 rd, float mx) {\n     float t = 0.0;\n\n     for(int i = 0; i < 200; i++) {\n         float d = map(ro + rd*t);\n         if(d < 0.001 || t >= mx) break;\n         t += d*0.75;\n     }\n\n     return t;\n }\n\n vec3 normal(vec3 p) {\n     vec2 h = vec2(0.001, 0.0);\n     vec3 n = vec3(\n         map(p + h.xyy) - map(p - h.xyy),\n                   map(p + h.yxy) - map(p - h.yxy),\n                   map(p + h.yyx) - map(p - h.yyx)\n     );\n     return normalize(n);\n }\n\n float ao(vec3 p, vec3 n) {\n     float o = 0.0, s = 0.005;\n     for(int i = 0; i< 15; i++) {\n         float d = map(p + n*s);\n         o += (s - d);\n         s += s/float(i + 1);\n     }\n\n     return 1.0 - clamp(o, 0.0, 1.0);\n }\n\n vec3 material(vec3 p) {\n     float v = 0.0;\n     float a = 0.7, f = 1.0;\n\n     for(int i = 0; i < 4; i++) {\n         float v1 = voronoi(p*f + 5.0);\n         float v2 = 0.0;\n\n         if(i > 0) {\n             v2 = voronoi(p*f*0.1 + 50.0 + 0.15*iTime);\n\n             float va = 0.0, vb = 0.0;\n             va = 1.0 - smoothstep(0.0, 0.1, v1);\n             vb = 1.0 - smoothstep(0.0, 0.08, v2);\n             v += a*pow(va*(0.5 + vb), 4.0);\n         }\n\n         v1 = 1.0 - smoothstep(0.0, 0.3, v1);\n         v2 =  a*noise(v1*5.5 + 0.1);\n\n         v += v2;\n\n         f *= 3.0;\n         a *= 0.5;\n     }\n\n     return vec3(pow(v, 6.0), pow(v, 4.0), pow(v, 2.0))*2.0;\n }\n\n mat3 camera(vec3 eye, vec3 lat) {\n     vec3 ww = normalize(lat - eye);\n     vec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n     vec3 vv = normalize(cross(ww, uu));\n\n     return mat3(uu, vv, ww);\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n     uv.x *= iResolution.x/iResolution.y;\n\n     vec3 col = vec3(0);\n\n     vec3 ro = vec3(0.63*cos(iTime*0.1), 0.67, iTime*0.5);\n     vec3 la = ro + vec3(0, 0, 0.3);\n\n     ro.xy += path(ro.z);\n     la.xy += path(la.z);\n     vec3 rd = normalize(camera(ro, la)*vec3(uv, 1.97));\n\n     float i = march(ro, rd, tmax);\n     if(i < tmax) {\n         vec3 pos = ro + rd*i;\n         vec3 nor = normal(pos);\n\n         vec3 rig = ro + vec3(0, 0, 3);\n         rig.xy += path(rig.z);\n         vec3 key = normalize(pos - rig);\n\n         col  = 0.1*vec3(0, 0, 1);\n         col += 0.9*clamp(dot(key, nor), 0.0, 1.0)*vec3(1.0/max(1.0, i), 1, 1);\n         col += 0.4*clamp(dot(-key, nor), 0.0, 1.0)*vec3(1.0/max(1.0, i), 1, 1);\n\n         col *= material(pos);\n     }\n\n     col = mix(col, vec3(0), 1.0 - exp(-0.6*i));\n\n     col = 1.0 - exp(-0.5*col);\n     col = pow(abs(col), vec3(1.0/2.2));\n\n     fragColor = vec4(col, 1);\n }\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader,\n    textures: [{\n      url: 'https://i.pinimg.com/originals/70/e4/99/70e4996995d61b098838e542f2a3ce44.png'\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","textures","url","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n const float tmax = 20.0;\n\n float hash(float n) {\n     return fract(sin(n)*43758.5453);\n }\n\n vec3 hash(vec3 p){\n\n     float n = sin(dot(p, vec3(7, 157, 113)));\n     return fract(vec3(2097152, 262144, 32768)*n);\n }\n\n float noise(float g) {\n     float p = floor(g);\n     float f = fract(g);\n\n     return mix(hash(p), hash(p + 1.0), f);\n }\n\n float voronoi(vec3 x) {\n     vec3 p = floor(x);\n     vec3 f = fract(x);\n\n     vec2 res = vec2(8.0);\n\n     for(int i = -1; i <= 1; i++)\n         for(int j = -1; j <= 1; j++)\n             for(int k = -1; k <= 1; k++) {\n                 vec3 g = vec3(float(i), float(j), float(k));\n                 vec3 r = g + hash(p + g) - f;\n\n                 float d = max(abs(r.x), max(abs(r.y), abs(r.z)));\n\n                 if(d < res.x) {\n                     res.y = res.x;\n                     res.x = d;\n                 } else if(d < res.y) {\n                     res.y = d;\n                 }\n             }\n\n             return res.y - res.x;\n }\n\n vec2 path(float z) {\n     return vec2(cos(z/8.0)*sin(z/12.0)*12.0, 0.0);\n }\n\n float map(vec3 p) {\n     vec4 q = vec4(p, 1.0);\n     q.x += 1.0;\n\n     for(int i = 0; i < 6; i++) {\n         q.xyz = -1.0 + 2.0*fract(0.5 + 0.5*q.xyz);\n         q = 1.2*q/max(dot(q.xyz, q.xyz), 0.1);\n     }\n\n     vec2 tun = abs(p.xy - path(p.z))*vec2(0.6, 0.5);\n\n     return min(0.25*abs(q.y)/q.w, 1.0 - max(tun.x, tun.y));\n }\n\n float march(vec3 ro, vec3 rd, float mx) {\n     float t = 0.0;\n\n     for(int i = 0; i < 200; i++) {\n         float d = map(ro + rd*t);\n         if(d < 0.001 || t >= mx) break;\n         t += d*0.75;\n     }\n\n     return t;\n }\n\n vec3 normal(vec3 p) {\n     vec2 h = vec2(0.001, 0.0);\n     vec3 n = vec3(\n         map(p + h.xyy) - map(p - h.xyy),\n                   map(p + h.yxy) - map(p - h.yxy),\n                   map(p + h.yyx) - map(p - h.yyx)\n     );\n     return normalize(n);\n }\n\n float ao(vec3 p, vec3 n) {\n     float o = 0.0, s = 0.005;\n     for(int i = 0; i< 15; i++) {\n         float d = map(p + n*s);\n         o += (s - d);\n         s += s/float(i + 1);\n     }\n\n     return 1.0 - clamp(o, 0.0, 1.0);\n }\n\n vec3 material(vec3 p) {\n     float v = 0.0;\n     float a = 0.7, f = 1.0;\n\n     for(int i = 0; i < 4; i++) {\n         float v1 = voronoi(p*f + 5.0);\n         float v2 = 0.0;\n\n         if(i > 0) {\n             v2 = voronoi(p*f*0.1 + 50.0 + 0.15*iTime);\n\n             float va = 0.0, vb = 0.0;\n             va = 1.0 - smoothstep(0.0, 0.1, v1);\n             vb = 1.0 - smoothstep(0.0, 0.08, v2);\n             v += a*pow(va*(0.5 + vb), 4.0);\n         }\n\n         v1 = 1.0 - smoothstep(0.0, 0.3, v1);\n         v2 =  a*noise(v1*5.5 + 0.1);\n\n         v += v2;\n\n         f *= 3.0;\n         a *= 0.5;\n     }\n\n     return vec3(pow(v, 6.0), pow(v, 4.0), pow(v, 2.0))*2.0;\n }\n\n mat3 camera(vec3 eye, vec3 lat) {\n     vec3 ww = normalize(lat - eye);\n     vec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n     vec3 vv = normalize(cross(ww, uu));\n\n     return mat3(uu, vv, ww);\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n     uv.x *= iResolution.x/iResolution.y;\n\n     vec3 col = vec3(0);\n\n     vec3 ro = vec3(0.63*cos(iTime*0.1), 0.67, iTime*0.5);\n     vec3 la = ro + vec3(0, 0, 0.3);\n\n     ro.xy += path(ro.z);\n     la.xy += path(la.z);\n     vec3 rd = normalize(camera(ro, la)*vec3(uv, 1.97));\n\n     float i = march(ro, rd, tmax);\n     if(i < tmax) {\n         vec3 pos = ro + rd*i;\n         vec3 nor = normal(pos);\n\n         vec3 rig = ro + vec3(0, 0, 3);\n         rig.xy += path(rig.z);\n         vec3 key = normalize(pos - rig);\n\n         col  = 0.1*vec3(0, 0, 1);\n         col += 0.9*clamp(dot(key, nor), 0.0, 1.0)*vec3(1.0/max(1.0, i), 1, 1);\n         col += 0.4*clamp(dot(-key, nor), 0.0, 1.0)*vec3(1.0/max(1.0, i), 1, 1);\n\n         col *= material(pos);\n     }\n\n     col = mix(col, vec3(0), 1.0 - exp(-0.6*i));\n\n     col = 1.0 - exp(-0.5*col);\n     col = pow(abs(col), vec3(1.0/2.2));\n\n     fragColor = vec4(col, 1);\n }\n `;\n\nroot.render(\n    <>\n    <ShadertoyReact fs={fragmentShader} textures={[\n        { url: 'https://i.pinimg.com/originals/70/e4/99/70e4996995d61b098838e542f2a3ce44.png' },\n    ]} />\n<TodoApp />\n<footer>©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzeACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACAT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH,cAAe;IAACI,QAAQ,EAAE,CAC1C;MAAEC,GAAG,EAAE;IAA+E,CAAC;EACzF;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACThB,OAAA,CAACL,OAAO;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXhB,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACApB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}