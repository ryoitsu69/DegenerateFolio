{"ast":null,"code":"import { settings } from \"@pixi/settings\";\nclass CanvasRenderTarget {\n  /**\n   * @param width - the width for the newly created canvas\n   * @param height - the height for the newly created canvas\n   * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n   */\n  constructor(width, height, resolution) {\n    this._canvas = settings.ADAPTER.createCanvas(), this._context = this._canvas.getContext(\"2d\"), this.resolution = resolution || settings.RESOLUTION, this.resize(width, height);\n  }\n  /**\n   * Clears the canvas that was created by the CanvasRenderTarget class.\n   * @private\n   */\n  clear() {\n    this._checkDestroyed(), this._context.setTransform(1, 0, 0, 1, 0, 0), this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n  }\n  /**\n   * Resizes the canvas to the specified width and height.\n   * @param desiredWidth - the desired width of the canvas\n   * @param desiredHeight - the desired height of the canvas\n   */\n  resize(desiredWidth, desiredHeight) {\n    this._checkDestroyed(), this._canvas.width = Math.round(desiredWidth * this.resolution), this._canvas.height = Math.round(desiredHeight * this.resolution);\n  }\n  /** Destroys this canvas. */\n  destroy() {\n    this._context = null, this._canvas = null;\n  }\n  /**\n   * The width of the canvas buffer in pixels.\n   * @member {number}\n   */\n  get width() {\n    return this._checkDestroyed(), this._canvas.width;\n  }\n  set width(val) {\n    this._checkDestroyed(), this._canvas.width = Math.round(val);\n  }\n  /**\n   * The height of the canvas buffer in pixels.\n   * @member {number}\n   */\n  get height() {\n    return this._checkDestroyed(), this._canvas.height;\n  }\n  set height(val) {\n    this._checkDestroyed(), this._canvas.height = Math.round(val);\n  }\n  /** The Canvas object that belongs to this CanvasRenderTarget. */\n  get canvas() {\n    return this._checkDestroyed(), this._canvas;\n  }\n  /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n  get context() {\n    return this._checkDestroyed(), this._context;\n  }\n  _checkDestroyed() {\n    if (this._canvas === null) throw new TypeError(\"The CanvasRenderTarget has already been destroyed\");\n  }\n}\nexport { CanvasRenderTarget };","map":{"version":3,"names":["CanvasRenderTarget","constructor","width","height","resolution","_canvas","settings","ADAPTER","createCanvas","_context","getContext","RESOLUTION","resize","clear","_checkDestroyed","setTransform","clearRect","desiredWidth","desiredHeight","Math","round","destroy","val","canvas","context","TypeError"],"sources":["/home/ryoitsu/node_modules/@pixi/utils/src/media/CanvasRenderTarget.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\nimport type { ICanvas, ICanvasRenderingContext2D } from '@pixi/settings';\n\n/**\n * Creates a Canvas element of the given size to be used as a target for rendering to.\n * @class\n * @memberof PIXI.utils\n */\nexport class CanvasRenderTarget\n{\n    protected _canvas: ICanvas | null;\n\n    protected _context: ICanvasRenderingContext2D | null;\n\n    /**\n     * The resolution / device pixel ratio of the canvas\n     * @default 1\n     */\n    public resolution: number;\n\n    /**\n     * @param width - the width for the newly created canvas\n     * @param height - the height for the newly created canvas\n     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width: number, height: number, resolution?: number)\n    {\n        this._canvas = settings.ADAPTER.createCanvas();\n\n        this._context = this._canvas.getContext('2d');\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     * @private\n     */\n    clear(): void\n    {\n        this._checkDestroyed();\n\n        this._context.setTransform(1, 0, 0, 1, 0, 0);\n        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     * @param desiredWidth - the desired width of the canvas\n     * @param desiredHeight - the desired height of the canvas\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this._checkDestroyed();\n\n        this._canvas.width = Math.round(desiredWidth * this.resolution);\n        this._canvas.height = Math.round(desiredHeight * this.resolution);\n    }\n\n    /** Destroys this canvas. */\n    destroy(): void\n    {\n        this._context = null;\n        this._canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get width(): number\n    {\n        this._checkDestroyed();\n\n        return this._canvas.width;\n    }\n\n    set width(val: number)\n    {\n        this._checkDestroyed();\n\n        this._canvas.width = Math.round(val);\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get height(): number\n    {\n        this._checkDestroyed();\n\n        return this._canvas.height;\n    }\n\n    set height(val: number)\n    {\n        this._checkDestroyed();\n\n        this._canvas.height = Math.round(val);\n    }\n\n    /** The Canvas object that belongs to this CanvasRenderTarget. */\n    public get canvas(): ICanvas\n    {\n        this._checkDestroyed();\n\n        return this._canvas;\n    }\n\n    /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n    public get context(): ICanvasRenderingContext2D\n    {\n        this._checkDestroyed();\n\n        return this._context;\n    }\n\n    private _checkDestroyed(): asserts this is this & { _canvas: ICanvas; _context: ICanvasRenderingContext2D }\n    {\n        if (this._canvas === null)\n        {\n            if (process.env.DEBUG)\n            {\n                throw new TypeError('The CanvasRenderTarget has already been destroyed');\n            }\n        }\n    }\n}\n"],"mappings":";AASO,MAAMA,kBAAA,CACb;EAAA;AAAA;AAAA;AAAA;AAAA;EAgBIC,YAAYC,KAAA,EAAeC,MAAA,EAAgBC,UAAA,EAC3C;IACS,KAAAC,OAAA,GAAUC,QAAA,CAASC,OAAA,CAAQC,YAAA,IAEhC,KAAKC,QAAA,GAAW,KAAKJ,OAAA,CAAQK,UAAA,CAAW,IAAI,GAE5C,KAAKN,UAAA,GAAaA,UAAA,IAAcE,QAAA,CAASK,UAAA,EAEzC,KAAKC,MAAA,CAAOV,KAAA,EAAOC,MAAM;EAC7B;EAAA;AAAA;AAAA;AAAA;EAMAU,MAAA,EACA;IACS,KAAAC,eAAA,IAEL,KAAKL,QAAA,CAASM,YAAA,CAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAC3C,KAAKN,QAAA,CAASO,SAAA,CAAU,GAAG,GAAG,KAAKX,OAAA,CAAQH,KAAA,EAAO,KAAKG,OAAA,CAAQF,MAAM;EACzE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAS,OAAOK,YAAA,EAAsBC,aAAA,EAC7B;IACI,KAAKJ,eAAA,CAEL,QAAKT,OAAA,CAAQH,KAAA,GAAQiB,IAAA,CAAKC,KAAA,CAAMH,YAAA,GAAe,KAAKb,UAAU,GAC9D,KAAKC,OAAA,CAAQF,MAAA,GAASgB,IAAA,CAAKC,KAAA,CAAMF,aAAA,GAAgB,KAAKd,UAAU;EACpE;EAAA;EAGAiB,QAAA,EACA;IACS,KAAAZ,QAAA,GAAW,MAChB,KAAKJ,OAAA,GAAU;EACnB;EAAA;AAAA;AAAA;AAAA;EAMA,IAAIH,MAAA,EACJ;IACS,YAAAY,eAAA,IAEE,KAAKT,OAAA,CAAQH,KAAA;EACxB;EAEA,IAAIA,MAAMoB,GAAA,EACV;IACI,KAAKR,eAAA,CAEL,QAAKT,OAAA,CAAQH,KAAA,GAAQiB,IAAA,CAAKC,KAAA,CAAME,GAAG;EACvC;EAAA;AAAA;AAAA;AAAA;EAMA,IAAInB,OAAA,EACJ;IACS,YAAAW,eAAA,IAEE,KAAKT,OAAA,CAAQF,MAAA;EACxB;EAEA,IAAIA,OAAOmB,GAAA,EACX;IACI,KAAKR,eAAA,CAEL,QAAKT,OAAA,CAAQF,MAAA,GAASgB,IAAA,CAAKC,KAAA,CAAME,GAAG;EACxC;EAAA;EAGA,IAAWC,OAAA,EACX;IACS,YAAAT,eAAA,IAEE,KAAKT,OAAA;EAChB;EAAA;EAGA,IAAWmB,QAAA,EACX;IACS,YAAAV,eAAA,IAEE,KAAKL,QAAA;EAChB;EAEQK,gBAAA,EACR;IACI,IAAI,KAAKT,OAAA,KAAY,MAIP,UAAIoB,SAAA,CAAU,mDAAmD;EAGnF;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}