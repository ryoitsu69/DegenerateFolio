{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { addMaskBounds } from '../utils/addMaskBounds.mjs';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds.mjs';\n\"use strict\";\nclass AlphaMask {\n  constructor(options) {\n    this.priority = 0;\n    this.pipe = \"alphaMask\";\n    if (options?.mask) {\n      this.init(options.mask);\n    }\n  }\n  init(mask) {\n    this.mask = mask;\n    this.renderMaskToTexture = !(mask instanceof Sprite);\n    this.mask.renderable = this.renderMaskToTexture;\n    this.mask.includeInBuild = !this.renderMaskToTexture;\n    this.mask.measurable = false;\n  }\n  reset() {\n    this.mask.measurable = true;\n    this.mask = null;\n  }\n  addBounds(bounds, skipUpdateTransform) {\n    addMaskBounds(this.mask, bounds, skipUpdateTransform);\n  }\n  addLocalBounds(bounds, localRoot) {\n    addMaskLocalBounds(this.mask, bounds, localRoot);\n  }\n  containsPoint(point, hitTestFn) {\n    const mask = this.mask;\n    return hitTestFn(mask, point);\n  }\n  destroy() {\n    this.reset();\n  }\n  static test(mask) {\n    return mask instanceof Sprite;\n  }\n}\nAlphaMask.extension = ExtensionType.MaskEffect;\nexport { AlphaMask };","map":{"version":3,"names":["AlphaMask","constructor","options","priority","pipe","mask","init","renderMaskToTexture","Sprite","renderable","includeInBuild","measurable","reset","addBounds","bounds","skipUpdateTransform","addMaskBounds","addLocalBounds","localRoot","addMaskLocalBounds","containsPoint","point","hitTestFn","destroy","test","extension","ExtensionType","MaskEffect"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/mask/alpha/AlphaMask.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { addMaskBounds } from '../utils/addMaskBounds';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds';\n\nimport type { ExtensionMetadata } from '../../../extensions/Extensions';\nimport type { Point } from '../../../maths/point/Point';\nimport type { Bounds } from '../../../scene/container/bounds/Bounds';\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\n\nexport class AlphaMask implements Effect, PoolItem\n{\n    public static extension: ExtensionMetadata = ExtensionType.MaskEffect;\n\n    public priority = 0;\n    public mask: Container;\n    public pipe = 'alphaMask';\n    public renderMaskToTexture: boolean;\n\n    constructor(options?: {mask: Container})\n    {\n        if (options?.mask)\n        {\n            this.init(options.mask);\n        }\n    }\n\n    public init(mask: Container): void\n    {\n        this.mask = mask;\n\n        // TODO - might want to change this to adjust on the fly\n        // user may add children to the sprite..\n        this.renderMaskToTexture = !(mask instanceof Sprite);\n\n        this.mask.renderable = this.renderMaskToTexture;\n        this.mask.includeInBuild = !this.renderMaskToTexture;\n\n        this.mask.measurable = false;\n    }\n\n    public reset()\n    {\n        this.mask.measurable = true;\n        this.mask = null;\n    }\n\n    public addBounds(bounds: Bounds, skipUpdateTransform?: boolean): void\n    {\n        addMaskBounds(this.mask, bounds, skipUpdateTransform);\n    }\n\n    public addLocalBounds(bounds: Bounds, localRoot: Container): void\n    {\n        addMaskLocalBounds(this.mask, bounds, localRoot);\n    }\n\n    public containsPoint(point: Point, hitTestFn: (container: Container, point: Point) => boolean): boolean\n    {\n        const mask = this.mask as any;\n\n        // if the point is in the mask, yay!\n        return hitTestFn(mask, point);\n    }\n\n    public destroy(): void\n    {\n        this.reset();\n    }\n\n    public static test(mask: any): boolean\n    {\n        return mask instanceof Sprite;\n    }\n}\n"],"mappings":";;;;;AAYO,MAAMA,SACb;EAQIC,YAAYC,OACZ;IANA,KAAOC,QAAW;IAElB,KAAOC,IAAO;IAKV,IAAIF,OAAA,EAASG,IACb;MACS,KAAAC,IAAA,CAAKJ,OAAA,CAAQG,IAAI;IAAA;EAC1B;EAGGC,KAAKD,IACZ;IACI,KAAKA,IAAO,GAAAA,IAAA;IAIP,KAAAE,mBAAA,GAAsB,EAAEF,IAAgB,YAAAG,MAAA;IAExC,KAAAH,IAAA,CAAKI,UAAA,GAAa,IAAK,CAAAF,mBAAA;IACvB,KAAAF,IAAA,CAAKK,cAAiB,IAAC,IAAK,CAAAH,mBAAA;IAEjC,KAAKF,IAAA,CAAKM,UAAa;EAAA;EAGpBC,KACPA,CAAA;IACI,KAAKP,IAAA,CAAKM,UAAa;IACvB,KAAKN,IAAO;EAAA;EAGTQ,UAAUC,MAAA,EAAgBC,mBACjC;IACkBC,aAAA,MAAKX,IAAM,EAAAS,MAAA,EAAQC,mBAAmB;EAAA;EAGjDE,eAAeH,MAAA,EAAgBI,SACtC;IACuBC,kBAAA,MAAKd,IAAM,EAAAS,MAAA,EAAQI,SAAS;EAAA;EAG5CE,cAAcC,KAAA,EAAcC,SACnC;IACI,MAAMjB,IAAA,GAAO,IAAK,CAAAA,IAAA;IAGX,OAAAiB,SAAA,CAAUjB,IAAA,EAAMgB,KAAK;EAAA;EAGzBE,OACPA,CAAA;IACI,KAAKX,KAAM;EAAA;EAGf,OAAcY,KAAKnB,IACnB;IACI,OAAOA,IAAgB,YAAAG,MAAA;EAAA;AAE/B;AAhEaR,SAAA,CAEKyB,SAAA,GAA+BC,aAAc,CAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}