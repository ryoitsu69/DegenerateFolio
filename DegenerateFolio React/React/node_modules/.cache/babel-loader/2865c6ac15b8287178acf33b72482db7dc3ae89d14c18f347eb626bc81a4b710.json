{"ast":null,"code":"import { Result } from \"../../helpers/result.js\";\nimport { APTOS_TOKEN } from \"../../helpers/const.js\";\nexport const CoinApi = {\n  /**\n   * Create right coin structured name -> 0xCoinHolderAddress::CoinPrefix::CoinSuffix, 0x1::TestCoin::TestCoin\n   * @param coinHolder\n   * @param moduleName\n   * @param structName\n   * @returns {string}\n   */\n  coinStruct(coinHolder, moduleName, structName) {\n    return \"\".concat(this._0x(coinHolder), \"::\").concat(moduleName, \"::\").concat(structName);\n  },\n  /**\n   * Initialization coin\n   * @param signer\n   * @param {String} coinStruct, to create it, use method coinStruct(...)\n   * @param coinName\n   * @param coinSymbol\n   * @param coinDec\n   * @returns {Promise<Result|undefined>}\n   */\n  async initCoin(signer, coinStruct, coinName, coinSymbol) {\n    let coinDec = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    const payload = {\n      type: \"script_function_payload\",\n      function: \"0x1::ManagedCoin::initialize\",\n      type_arguments: [\"\".concat(coinStruct)],\n      arguments: [Buffer.from(coinName, \"utf-8\").toString(\"hex\"), Buffer.from(coinSymbol.toUpperCase(), \"utf-8\").toString(\"hex\"), coinDec.toString(), false]\n    };\n    return await this.submitTransaction(signer, payload);\n  },\n  async registerCoin(signer, coinStruct) {\n    const payload = {\n      \"type\": \"script_function_payload\",\n      \"function\": \"0x1::coin::register\",\n      \"type_arguments\": [\"\".concat(coinStruct)],\n      \"arguments\": []\n    };\n    return await this.submitTransaction(signer, payload);\n  },\n  async createCoin(signer, coinStruct, coinName, coinSymbol) {\n    let coinDec = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n    const initialization = await this.initCoin(signer, coinStruct, coinName, coinSymbol, coinDec);\n    if (!initialization.ok) {\n      return new Result(false, \"Can't init coin!\", initialization.error);\n    }\n    if (!initialization.payload.success) {\n      return new Result(false, \"Coin initialization error! \".concat(initialization.payload.vm_status), initialization.payload);\n    }\n    const registration = await this.registerCoin(signer, coinStruct);\n    if (!registration.ok) {\n      return new Result(false, \"Can't register coin!\", initialization.error);\n    }\n    if (!registration.payload.success) {\n      return new Result(false, \"Coin registration error! \".concat(registration.payload.vm_status), registration.payload);\n    }\n    return new Result(true, {\n      initialization,\n      registration\n    });\n  },\n  async mintCoin(signer, receiver, coinStruct, amount) {\n    const payload = {\n      type: \"script_function_payload\",\n      function: \"0x1::ManagedCoin::mint\",\n      type_arguments: [coinStruct],\n      arguments: [receiver, amount.toString()]\n    };\n    return await this.submitTransaction(signer, payload);\n  },\n  async sendCoins(signer, receiver) {\n    let amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let coin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : APTOS_TOKEN;\n    const payload = {\n      type: 'script_function_payload',\n      function: '0x1::coin::transfer',\n      type_arguments: [coin],\n      arguments: [this._0x(receiver), amount.toString()]\n    };\n    return await this.submitTransaction(signer, payload);\n  },\n  async getDepositedCoins(address, coinStruct) {\n    return await this.getEventsByHandle(this._0x(address), \"0x1::coin::CoinStore<\".concat(coinStruct, \">\"), \"deposit_events\");\n  },\n  async getWithdrawCoins(address, coinStruct) {\n    return await this.getEventsByHandle(this._0x(address), \"0x1::coin::CoinStore<\".concat(coinStruct, \">\"), \"withdraw_events\");\n  },\n  async delegateCoins() {}\n};","map":{"version":3,"names":["Result","APTOS_TOKEN","CoinApi","coinStruct","coinHolder","moduleName","structName","concat","_0x","initCoin","signer","coinName","coinSymbol","coinDec","arguments","length","undefined","payload","type","function","type_arguments","Buffer","from","toString","toUpperCase","submitTransaction","registerCoin","createCoin","initialization","ok","error","success","vm_status","registration","mintCoin","receiver","amount","sendCoins","coin","getDepositedCoins","address","getEventsByHandle","getWithdrawCoins","delegateCoins"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/aptos-api-master/src/api/ext/coins.js"],"sourcesContent":["import {Result} from \"../../helpers/result.js\";\nimport {APTOS_TOKEN} from \"../../helpers/const.js\";\n\nexport const CoinApi = {\n    /**\n     * Create right coin structured name -> 0xCoinHolderAddress::CoinPrefix::CoinSuffix, 0x1::TestCoin::TestCoin\n     * @param coinHolder\n     * @param moduleName\n     * @param structName\n     * @returns {string}\n     */\n    coinStruct(coinHolder, moduleName, structName){\n        return `${this._0x(coinHolder)}::${moduleName}::${structName}`\n    },\n\n    /**\n     * Initialization coin\n     * @param signer\n     * @param {String} coinStruct, to create it, use method coinStruct(...)\n     * @param coinName\n     * @param coinSymbol\n     * @param coinDec\n     * @returns {Promise<Result|undefined>}\n     */\n    async initCoin(signer, coinStruct, coinName, coinSymbol, coinDec = 0){\n        const payload = {\n            type: \"script_function_payload\",\n            function: `0x1::ManagedCoin::initialize`,\n            type_arguments: [`${coinStruct}`],\n            arguments: [\n                Buffer.from(coinName, \"utf-8\").toString(\"hex\"),\n                Buffer.from(coinSymbol.toUpperCase(), \"utf-8\").toString(\"hex\"),\n                coinDec.toString(),\n                false,\n            ],\n        }\n\n        return await this.submitTransaction(signer, payload)\n    },\n\n    async registerCoin(signer, coinStruct){\n        const payload = {\n            \"type\": \"script_function_payload\",\n            \"function\": \"0x1::coin::register\",\n            \"type_arguments\": [`${coinStruct}`],\n            \"arguments\": []\n        }\n\n        return await this.submitTransaction(signer, payload)\n    },\n\n    async createCoin(signer, coinStruct, coinName, coinSymbol, coinDec = 0){\n        const initialization = await this.initCoin(signer, coinStruct, coinName, coinSymbol, coinDec)\n\n        if (!initialization.ok) {\n            return new Result(false, \"Can't init coin!\", initialization.error)\n        }\n\n        if (!initialization.payload.success) {\n            return new Result(false, `Coin initialization error! ${initialization.payload.vm_status}`, initialization.payload)\n        }\n\n        const registration = await this.registerCoin(signer, coinStruct)\n\n        if (!registration.ok) {\n            return new Result(false, \"Can't register coin!\", initialization.error)\n        }\n\n        if (!registration.payload.success) {\n            return new Result(false, `Coin registration error! ${registration.payload.vm_status}`, registration.payload)\n        }\n\n        return new Result(true, {initialization, registration})\n    },\n\n    async mintCoin(signer, receiver, coinStruct, amount){\n        const payload = {\n            type: \"script_function_payload\",\n            function: `0x1::ManagedCoin::mint`,\n            type_arguments: [coinStruct],\n            arguments: [\n                receiver,\n                amount.toString()\n            ],\n        }\n\n        return await this.submitTransaction(signer, payload)\n    },\n\n    async sendCoins(signer, receiver, amount = 0, coin = APTOS_TOKEN){\n        const payload = {\n            type: 'script_function_payload',\n            function: '0x1::coin::transfer',\n            type_arguments: [coin],\n            arguments: [this._0x(receiver), amount.toString()],\n        }\n        return await this.submitTransaction(signer, payload)\n    },\n\n    async getDepositedCoins(address, coinStruct){\n        return await this.getEventsByHandle(\n            this._0x(address),\n            `0x1::coin::CoinStore<${coinStruct}>`,\n            \"deposit_events\"\n        )\n    },\n\n    async getWithdrawCoins(address, coinStruct){\n        return await this.getEventsByHandle(\n            this._0x(address),\n            `0x1::coin::CoinStore<${coinStruct}>`,\n            \"withdraw_events\"\n        )\n    },\n\n    async delegateCoins(){},\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}