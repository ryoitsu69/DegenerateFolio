{"ast":null,"code":"import { BigInt } from '@polkadot/x-bigint';\n/**\n * @name _0n\n * @summary BigInt constant for 0.\n */\nexport const _0n = /*#__PURE__*/BigInt(0);\n/**\n * @name _1n\n * @summary BigInt constant for 1.\n */\nexport const _1n = /*#__PURE__*/BigInt(1);\n/**\n * @name _2n\n * @summary BigInt constant for 2.\n */\nexport const _2n = /*#__PURE__*/BigInt(2);\n/**\n * @name _3n\n * @summary BigInt constant for 3.\n */\nexport const _3n = /*#__PURE__*/BigInt(3);\n/**\n * @name _4n\n * @summary BigInt constant for 4.\n */\nexport const _4n = /*#__PURE__*/BigInt(4);\n/**\n * @name _5n\n * @summary BigInt constant for 5.\n */\nexport const _5n = /*#__PURE__*/BigInt(5);\n/**\n * @name _6n\n * @summary BigInt constant for 6.\n */\nexport const _6n = /*#__PURE__*/BigInt(6);\n/**\n * @name _7n\n * @summary BigInt constant for 7.\n */\nexport const _7n = /*#__PURE__*/BigInt(7);\n/**\n * @name _8n\n * @summary BigInt constant for 8.\n */\nexport const _8n = /*#__PURE__*/BigInt(8);\n/**\n * @name _9n\n * @summary BigInt constant for 9.\n */\nexport const _9n = /*#__PURE__*/BigInt(9);\n/**\n * @name _10n\n * @summary BigInt constant for 10.\n */\nexport const _10n = /*#__PURE__*/BigInt(10);\n/**\n * @name _100n\n * @summary BigInt constant for 100.\n */\nexport const _100n = /*#__PURE__*/BigInt(100);\n/**\n * @name _1000n\n * @summary BigInt constant for 1000.\n */\nexport const _1000n = /*#__PURE__*/BigInt(1000);\n/**\n * @name _1Mn\n * @summary BigInt constant for 1,000,000 (million).\n */\nexport const _1Mn = /*#__PURE__*/BigInt(1000000);\n/**\n* @name _1Bn\n* @summary BigInt constant for 1,000,000,000 (billion).\n*/\nexport const _1Bn = /*#__PURE__*/BigInt(1000000000);\n/**\n* @name _1Qn\n* @summary BigInt constant for 1,000,000,000,000,000,000 (quitillion).\n*/\nexport const _1Qn = _1Bn * _1Bn;\n/**\n* @name _2pow53n\n* @summary BigInt constant for MAX_SAFE_INTEGER\n*/\nexport const _2pow53n = /*#__PURE__*/BigInt(Number.MAX_SAFE_INTEGER);\n/**\n * @name _sqrt2pow53n\n * @summary BigInt constant for Math.sqrt(MAX_SAFE_INTEGER)\n */\nexport const _sqrt2pow53n = /*#__PURE__*/BigInt(94906265);","map":{"version":3,"names":["BigInt","_0n","_1n","_2n","_3n","_4n","_5n","_6n","_7n","_8n","_9n","_10n","_100n","_1000n","_1Mn","_1Bn","_1Qn","_2pow53n","Number","MAX_SAFE_INTEGER","_sqrt2pow53n"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/bi/consts.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\n/**\n * @name _0n\n * @summary BigInt constant for 0.\n */\nexport const _0n = /*#__PURE__*/ BigInt(0);\n/**\n * @name _1n\n * @summary BigInt constant for 1.\n */\nexport const _1n = /*#__PURE__*/ BigInt(1);\n/**\n * @name _2n\n * @summary BigInt constant for 2.\n */\nexport const _2n = /*#__PURE__*/ BigInt(2);\n/**\n * @name _3n\n * @summary BigInt constant for 3.\n */\nexport const _3n = /*#__PURE__*/ BigInt(3);\n/**\n * @name _4n\n * @summary BigInt constant for 4.\n */\nexport const _4n = /*#__PURE__*/ BigInt(4);\n/**\n * @name _5n\n * @summary BigInt constant for 5.\n */\nexport const _5n = /*#__PURE__*/ BigInt(5);\n/**\n * @name _6n\n * @summary BigInt constant for 6.\n */\nexport const _6n = /*#__PURE__*/ BigInt(6);\n/**\n * @name _7n\n * @summary BigInt constant for 7.\n */\nexport const _7n = /*#__PURE__*/ BigInt(7);\n/**\n * @name _8n\n * @summary BigInt constant for 8.\n */\nexport const _8n = /*#__PURE__*/ BigInt(8);\n/**\n * @name _9n\n * @summary BigInt constant for 9.\n */\nexport const _9n = /*#__PURE__*/ BigInt(9);\n/**\n * @name _10n\n * @summary BigInt constant for 10.\n */\nexport const _10n = /*#__PURE__*/ BigInt(10);\n/**\n * @name _100n\n * @summary BigInt constant for 100.\n */\nexport const _100n = /*#__PURE__*/ BigInt(100);\n/**\n * @name _1000n\n * @summary BigInt constant for 1000.\n */\nexport const _1000n = /*#__PURE__*/ BigInt(1000);\n/**\n * @name _1Mn\n * @summary BigInt constant for 1,000,000 (million).\n */\nexport const _1Mn = /*#__PURE__*/ BigInt(1000000);\n/**\n* @name _1Bn\n* @summary BigInt constant for 1,000,000,000 (billion).\n*/\nexport const _1Bn = /*#__PURE__*/ BigInt(1000000000);\n/**\n* @name _1Qn\n* @summary BigInt constant for 1,000,000,000,000,000,000 (quitillion).\n*/\nexport const _1Qn = _1Bn * _1Bn;\n/**\n* @name _2pow53n\n* @summary BigInt constant for MAX_SAFE_INTEGER\n*/\nexport const _2pow53n = /*#__PURE__*/ BigInt(Number.MAX_SAFE_INTEGER);\n/**\n * @name _sqrt2pow53n\n * @summary BigInt constant for Math.sqrt(MAX_SAFE_INTEGER)\n */\nexport const _sqrt2pow53n = /*#__PURE__*/ BigInt(94906265);\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,oBAAoB;AAC3C;AACA;AACA;AACA;AACA,OAAO,MAAMC,GAAG,GAAG,aAAcD,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAME,GAAG,GAAG,aAAcF,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMG,GAAG,GAAG,aAAcH,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMI,GAAG,GAAG,aAAcJ,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMK,GAAG,GAAG,aAAcL,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMM,GAAG,GAAG,aAAcN,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMO,GAAG,GAAG,aAAcP,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMQ,GAAG,GAAG,aAAcR,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMS,GAAG,GAAG,aAAcT,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMU,GAAG,GAAG,aAAcV,MAAM,CAAC,CAAC,CAAC;AAC1C;AACA;AACA;AACA;AACA,OAAO,MAAMW,IAAI,GAAG,aAAcX,MAAM,CAAC,EAAE,CAAC;AAC5C;AACA;AACA;AACA;AACA,OAAO,MAAMY,KAAK,GAAG,aAAcZ,MAAM,CAAC,GAAG,CAAC;AAC9C;AACA;AACA;AACA;AACA,OAAO,MAAMa,MAAM,GAAG,aAAcb,MAAM,CAAC,IAAI,CAAC;AAChD;AACA;AACA;AACA;AACA,OAAO,MAAMc,IAAI,GAAG,aAAcd,MAAM,CAAC,OAAO,CAAC;AACjD;AACA;AACA;AACA;AACA,OAAO,MAAMe,IAAI,GAAG,aAAcf,MAAM,CAAC,UAAU,CAAC;AACpD;AACA;AACA;AACA;AACA,OAAO,MAAMgB,IAAI,GAAGD,IAAI,GAAGA,IAAI;AAC/B;AACA;AACA;AACA;AACA,OAAO,MAAME,QAAQ,GAAG,aAAcjB,MAAM,CAACkB,MAAM,CAACC,gBAAgB,CAAC;AACrE;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,aAAcpB,MAAM,CAAC,QAAQ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}