{"ast":null,"code":"import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../../rendering/renderers/types.mjs';\nimport { Filter } from '../../Filter.mjs';\nimport { generateBlurGlProgram } from './gl/generateBlurGlProgram.mjs';\nimport { generateBlurProgram } from './gpu/generateBlurProgram.mjs';\n\"use strict\";\nconst _BlurFilterPass = class _BlurFilterPass extends Filter {\n  /**\n   * @param options\n   * @param options.horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n   * @param options.strength - The strength of the blur filter.\n   * @param options.quality - The quality of the blur filter.\n   * @param options.kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n   */\n  constructor(options) {\n    options = {\n      ..._BlurFilterPass.defaultOptions,\n      ...options\n    };\n    const glProgram = generateBlurGlProgram(options.horizontal, options.kernelSize);\n    const gpuProgram = generateBlurProgram(options.horizontal, options.kernelSize);\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        blurUniforms: {\n          uStrength: {\n            value: 0,\n            type: \"f32\"\n          }\n        }\n      },\n      ...options\n    });\n    this.horizontal = options.horizontal;\n    this._quality = 0;\n    this.quality = options.quality;\n    this.blur = options.strength;\n    this._uniforms = this.resources.blurUniforms.uniforms;\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - How to clear\n   */\n  apply(filterManager, input, output, clearMode) {\n    this._uniforms.uStrength = this.strength / this.passes;\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clearMode);\n    } else {\n      const tempTexture = TexturePool.getSameSizeTexture(input);\n      let flip = input;\n      let flop = tempTexture;\n      this._state.blend = false;\n      for (let i = 0; i < this.passes - 1; i++) {\n        filterManager.applyFilter(this, flip, flop, filterManager.renderer.type === RendererType.WEBGPU);\n        const temp = flop;\n        flop = flip;\n        flip = temp;\n      }\n      this._state.blend = true;\n      filterManager.applyFilter(this, flip, output, clearMode);\n      TexturePool.returnTexture(tempTexture);\n    }\n  }\n  /**\n   * Sets the strength of both the blur.\n   * @default 16\n   */\n  get blur() {\n    return this.strength;\n  }\n  set blur(value) {\n    this.padding = 1 + Math.abs(value) * 2;\n    this.strength = value;\n  }\n  /**\n   * Sets the quality of the blur by modifying the number of passes. More passes means higher\n   * quality blurring but the lower the performance.\n   * @default 4\n   */\n  get quality() {\n    return this._quality;\n  }\n  set quality(value) {\n    this._quality = value;\n    this.passes = value;\n  }\n};\n/** Default blur filter pass options */\n_BlurFilterPass.defaultOptions = {\n  /** The strength of the blur filter. */\n  strength: 8,\n  /** The quality of the blur filter. */\n  quality: 4,\n  /** The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15. */\n  kernelSize: 5\n};\nlet BlurFilterPass = _BlurFilterPass;\nexport { BlurFilterPass };","map":{"version":3,"names":["_BlurFilterPass","Filter","constructor","options","defaultOptions","glProgram","generateBlurGlProgram","horizontal","kernelSize","gpuProgram","generateBlurProgram","resources","blurUniforms","uStrength","value","type","_quality","quality","blur","strength","_uniforms","uniforms","apply","filterManager","input","output","clearMode","passes","applyFilter","tempTexture","TexturePool","getSameSizeTexture","flip","flop","_state","blend","i","renderer","RendererType","WEBGPU","temp","returnTexture","padding","Math","abs","BlurFilterPass"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/filters/defaults/blur/BlurFilterPass.ts"],"sourcesContent":["import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../../rendering/renderers/types';\nimport { Filter } from '../../Filter';\nimport { generateBlurGlProgram } from './gl/generateBlurGlProgram';\nimport { generateBlurProgram } from './gpu/generateBlurProgram';\n\nimport type { RenderSurface } from '../../../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { FilterSystem } from '../../FilterSystem';\nimport type { BlurFilterOptions } from './BlurFilter';\n\n/**\n * Options for BlurFilterPass\n * @memberof filters\n */\nexport interface BlurFilterPassOptions extends BlurFilterOptions\n{\n    /** Do pass along the x-axis (`true`) or y-axis (`false`). */\n    horizontal: boolean;\n}\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n * @memberof filters\n */\nexport class BlurFilterPass extends Filter\n{\n    /** Default blur filter pass options */\n    public static defaultOptions: Partial<BlurFilterPassOptions> = {\n        /** The strength of the blur filter. */\n        strength: 8,\n        /** The quality of the blur filter. */\n        quality: 4,\n        /** The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15. */\n        kernelSize: 5,\n    };\n\n    /** Do pass along the x-axis (`true`) or y-axis (`false`). */\n    public horizontal: boolean;\n    /** The number of passes to run the filter. */\n    public passes!: number;\n    /** The strength of the blur filter. */\n    public strength!: number;\n\n    private _quality: number;\n    private readonly _uniforms: any;\n\n    /**\n     * @param options\n     * @param options.horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param options.strength - The strength of the blur filter.\n     * @param options.quality - The quality of the blur filter.\n     * @param options.kernelSize - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(options: BlurFilterPassOptions)\n    {\n        options = { ...BlurFilterPass.defaultOptions, ...options };\n\n        const glProgram = generateBlurGlProgram(options.horizontal, options.kernelSize);\n        const gpuProgram = generateBlurProgram(options.horizontal, options.kernelSize);\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                blurUniforms: {\n                    uStrength: { value: 0, type: 'f32' },\n                }\n            },\n            ...options\n        });\n\n        this.horizontal = options.horizontal;\n\n        this._quality = 0;\n\n        this.quality = options.quality;\n\n        this.blur = options.strength;\n\n        this._uniforms = this.resources.blurUniforms.uniforms;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        this._uniforms.uStrength = this.strength / this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clearMode);\n        }\n        else\n        {\n            const tempTexture = TexturePool.getSameSizeTexture(input);\n\n            let flip = input;\n            let flop = tempTexture;\n\n            this._state.blend = false;\n\n            for (let i = 0; i < this.passes - 1; i++)\n            {\n                filterManager.applyFilter(this, flip, flop, filterManager.renderer.type === RendererType.WEBGPU);\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n            }\n\n            this._state.blend = true;\n            filterManager.applyFilter(this, flip, output, clearMode);\n            TexturePool.returnTexture(tempTexture);\n        }\n    }\n\n    /**\n     * Sets the strength of both the blur.\n     * @default 16\n     */\n    get blur(): number\n    {\n        return this.strength;\n    }\n\n    set blur(value: number)\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quality blurring but the lower the performance.\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._quality;\n    }\n\n    set quality(value: number)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"],"mappings":";;;;;;AAyBO,MAAMA,eAAA,GAAN,MAAMA,eAAA,SAAuBC,MACpC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA4BIC,YAAYC,OACZ;IACIA,OAAA,GAAU;MAAE,GAAGH,eAAe,CAAAI,cAAA;MAAgB,GAAGD;IAAQ;IAEzD,MAAME,SAAY,GAAAC,qBAAA,CAAsBH,OAAQ,CAAAI,UAAA,EAAYJ,OAAA,CAAQK,UAAU;IAC9E,MAAMC,UAAa,GAAAC,mBAAA,CAAoBP,OAAQ,CAAAI,UAAA,EAAYJ,OAAA,CAAQK,UAAU;IAEvE;MACFH,SAAA;MACAI,UAAA;MACAE,SAAW;QACPC,YAAc;UACVC,SAAW;YAAEC,KAAO;YAAGC,IAAA,EAAM;UAAM;QAAA;MACvC,CACJ;MACA,GAAGZ;IAAA,CACN;IAED,KAAKI,UAAA,GAAaJ,OAAQ,CAAAI,UAAA;IAE1B,KAAKS,QAAW;IAEhB,KAAKC,OAAA,GAAUd,OAAQ,CAAAc,OAAA;IAEvB,KAAKC,IAAA,GAAOf,OAAQ,CAAAgB,QAAA;IAEf,KAAAC,SAAA,GAAY,IAAK,CAAAT,SAAA,CAAUC,YAAa,CAAAS,QAAA;EAAA;EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOC,KACHA,CAAAC,aAAA,EACAC,KACA,EAAAC,MAAA,EACAC,SAEJ;IACI,KAAKN,SAAU,CAAAP,SAAA,GAAY,IAAK,CAAAM,QAAA,GAAW,IAAK,CAAAQ,MAAA;IAE5C,SAAKA,MAAA,KAAW,CACpB;MACIJ,aAAA,CAAcK,WAAY,OAAMJ,KAAO,EAAAC,MAAA,EAAQC,SAAS;IAAA,CAG5D;MACU,MAAAG,WAAA,GAAcC,WAAY,CAAAC,kBAAA,CAAmBP,KAAK;MAExD,IAAIQ,IAAO,GAAAR,KAAA;MACX,IAAIS,IAAO,GAAAJ,WAAA;MAEX,KAAKK,MAAA,CAAOC,KAAQ;MAEpB,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAI,IAAK,CAAAT,MAAA,GAAS,GAAGS,CACrC;QACkBb,aAAA,CAAAK,WAAA,CAAY,MAAMI,IAAM,EAAAC,IAAA,EAAMV,aAAA,CAAcc,QAAS,CAAAtB,IAAA,KAASuB,YAAA,CAAaC,MAAM;QAE/F,MAAMC,IAAO,GAAAP,IAAA;QAENA,IAAA,GAAAD,IAAA;QACAA,IAAA,GAAAQ,IAAA;MAAA;MAGX,KAAKN,MAAA,CAAOC,KAAQ;MACpBZ,aAAA,CAAcK,WAAY,OAAMI,IAAM,EAAAP,MAAA,EAAQC,SAAS;MACvDI,WAAA,CAAYW,aAAA,CAAcZ,WAAW;IAAA;EACzC;EACJ;AAAA;AAAA;AAAA;EAMA,IAAIX,IACJA,CAAA;IACI,OAAO,IAAK,CAAAC,QAAA;EAAA;EAGhB,IAAID,KAAKJ,KACT;IACI,KAAK4B,OAAU,OAAKC,IAAK,CAAAC,GAAA,CAAI9B,KAAK,CAAI;IACtC,KAAKK,QAAW,GAAAL,KAAA;EAAA;EACpB;AAAA;AAAA;AAAA;AAAA;EAOA,IAAIG,OACJA,CAAA;IACI,OAAO,IAAK,CAAAD,QAAA;EAAA;EAGhB,IAAIC,QAAQH,KACZ;IACI,KAAKE,QAAW,GAAAF,KAAA;IAChB,KAAKa,MAAS,GAAAb,KAAA;EAAA;AAEtB;AAAA;AArIad,eAAA,CAGKI,cAAiD;EAAA;EAE3De,QAAU;EAAA;EAEVF,OAAS;EAAA;EAETT,UAAY;AAChB;AAVG,IAAMqC,cAAN,GAAA7C,eAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}