{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst address_js_1 = require(\"./validation/address.js\");\nconst block_js_1 = require(\"./validation/block.js\");\nconst bloom_js_1 = require(\"./validation/bloom.js\");\nconst boolean_js_1 = require(\"./validation/boolean.js\");\nconst bytes_js_1 = require(\"./validation/bytes.js\");\nconst filter_js_1 = require(\"./validation/filter.js\");\nconst string_js_1 = require(\"./validation/string.js\");\nconst numbers_js_1 = require(\"./validation/numbers.js\");\nconst formats = {\n  address: data => (0, address_js_1.isAddress)(data),\n  bloom: data => (0, bloom_js_1.isBloom)(data),\n  blockNumber: data => (0, block_js_1.isBlockNumber)(data),\n  blockTag: data => (0, block_js_1.isBlockTag)(data),\n  blockNumberOrTag: data => (0, block_js_1.isBlockNumberOrTag)(data),\n  bool: data => (0, boolean_js_1.isBoolean)(data),\n  bytes: data => (0, bytes_js_1.isBytes)(data),\n  filter: data => (0, filter_js_1.isFilterObject)(data),\n  hex: data => (0, string_js_1.isHexStrict)(data),\n  uint: data => (0, numbers_js_1.isUInt)(data),\n  int: data => (0, numbers_js_1.isInt)(data),\n  number: data => (0, numbers_js_1.isNumber)(data),\n  string: data => (0, string_js_1.isString)(data)\n};\n// generate formats for all numbers types\nfor (let bitSize = 8; bitSize <= 256; bitSize += 8) {\n  formats[`int${bitSize}`] = data => (0, numbers_js_1.isInt)(data, {\n    bitSize\n  });\n  formats[`uint${bitSize}`] = data => (0, numbers_js_1.isUInt)(data, {\n    bitSize\n  });\n}\n// generate bytes\nfor (let size = 1; size <= 32; size += 1) {\n  formats[`bytes${size}`] = data => (0, bytes_js_1.isBytes)(data, {\n    size\n  });\n}\nformats.bytes256 = formats.bytes;\nexports.default = formats;","map":{"version":3,"names":["address_js_1","require","block_js_1","bloom_js_1","boolean_js_1","bytes_js_1","filter_js_1","string_js_1","numbers_js_1","formats","address","data","isAddress","bloom","isBloom","blockNumber","isBlockNumber","blockTag","isBlockTag","blockNumberOrTag","isBlockNumberOrTag","bool","isBoolean","bytes","isBytes","filter","isFilterObject","hex","isHexStrict","uint","isUInt","int","isInt","number","isNumber","string","isString","bitSize","size","bytes256","exports","default"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-validator/src/formats.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Filter } from 'web3-types';\nimport { ValidInputTypes } from './types.js';\nimport { isAddress } from './validation/address.js';\nimport { isBlockNumber, isBlockNumberOrTag, isBlockTag } from './validation/block.js';\nimport { isBloom } from './validation/bloom.js';\nimport { isBoolean } from './validation/boolean.js';\nimport { isBytes } from './validation/bytes.js';\nimport { isFilterObject } from './validation/filter.js';\nimport { isHexStrict, isString } from './validation/string.js';\nimport { isNumber, isInt, isUInt } from './validation/numbers.js';\n\nconst formats: { [key: string]: (data: unknown) => boolean } = {\n\taddress: (data: unknown) => isAddress(data as ValidInputTypes),\n\tbloom: (data: unknown) => isBloom(data as ValidInputTypes),\n\tblockNumber: (data: unknown) => isBlockNumber(data as string | number | bigint),\n\tblockTag: (data: unknown) => isBlockTag(data as string),\n\tblockNumberOrTag: (data: unknown) => isBlockNumberOrTag(data as string | number | bigint),\n\tbool: (data: unknown) => isBoolean(data as ValidInputTypes),\n\tbytes: (data: unknown) => isBytes(data as ValidInputTypes | Uint8Array | number[]),\n\tfilter: (data: unknown) => isFilterObject(data as Filter),\n\thex: (data: unknown) => isHexStrict(data as ValidInputTypes),\n\tuint: (data: unknown) => isUInt(data as ValidInputTypes),\n\tint: (data: unknown) => isInt(data as ValidInputTypes),\n\tnumber: (data: unknown) => isNumber(data as ValidInputTypes),\n\tstring: (data: unknown) => isString(data as ValidInputTypes),\n};\n// generate formats for all numbers types\nfor (let bitSize = 8; bitSize <= 256; bitSize += 8) {\n\tformats[`int${bitSize}`] = data => isInt(data as ValidInputTypes, { bitSize });\n\tformats[`uint${bitSize}`] = data => isUInt(data as ValidInputTypes, { bitSize });\n}\n// generate bytes\nfor (let size = 1; size <= 32; size += 1) {\n\tformats[`bytes${size}`] = data =>\n\t\tisBytes(data as ValidInputTypes | Uint8Array | number[], { size });\n}\nformats.bytes256 = formats.bytes;\n\nexport default formats;\n"],"mappings":";;;;;AAkBA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AACA,MAAAK,WAAA,GAAAL,OAAA;AACA,MAAAM,WAAA,GAAAN,OAAA;AACA,MAAAO,YAAA,GAAAP,OAAA;AAEA,MAAMQ,OAAO,GAAkD;EAC9DC,OAAO,EAAGC,IAAa,IAAK,IAAAX,YAAA,CAAAY,SAAS,EAACD,IAAuB,CAAC;EAC9DE,KAAK,EAAGF,IAAa,IAAK,IAAAR,UAAA,CAAAW,OAAO,EAACH,IAAuB,CAAC;EAC1DI,WAAW,EAAGJ,IAAa,IAAK,IAAAT,UAAA,CAAAc,aAAa,EAACL,IAAgC,CAAC;EAC/EM,QAAQ,EAAGN,IAAa,IAAK,IAAAT,UAAA,CAAAgB,UAAU,EAACP,IAAc,CAAC;EACvDQ,gBAAgB,EAAGR,IAAa,IAAK,IAAAT,UAAA,CAAAkB,kBAAkB,EAACT,IAAgC,CAAC;EACzFU,IAAI,EAAGV,IAAa,IAAK,IAAAP,YAAA,CAAAkB,SAAS,EAACX,IAAuB,CAAC;EAC3DY,KAAK,EAAGZ,IAAa,IAAK,IAAAN,UAAA,CAAAmB,OAAO,EAACb,IAA+C,CAAC;EAClFc,MAAM,EAAGd,IAAa,IAAK,IAAAL,WAAA,CAAAoB,cAAc,EAACf,IAAc,CAAC;EACzDgB,GAAG,EAAGhB,IAAa,IAAK,IAAAJ,WAAA,CAAAqB,WAAW,EAACjB,IAAuB,CAAC;EAC5DkB,IAAI,EAAGlB,IAAa,IAAK,IAAAH,YAAA,CAAAsB,MAAM,EAACnB,IAAuB,CAAC;EACxDoB,GAAG,EAAGpB,IAAa,IAAK,IAAAH,YAAA,CAAAwB,KAAK,EAACrB,IAAuB,CAAC;EACtDsB,MAAM,EAAGtB,IAAa,IAAK,IAAAH,YAAA,CAAA0B,QAAQ,EAACvB,IAAuB,CAAC;EAC5DwB,MAAM,EAAGxB,IAAa,IAAK,IAAAJ,WAAA,CAAA6B,QAAQ,EAACzB,IAAuB;CAC3D;AACD;AACA,KAAK,IAAI0B,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAI,GAAG,EAAEA,OAAO,IAAI,CAAC,EAAE;EACnD5B,OAAO,CAAC,MAAM4B,OAAO,EAAE,CAAC,GAAG1B,IAAI,IAAI,IAAAH,YAAA,CAAAwB,KAAK,EAACrB,IAAuB,EAAE;IAAE0B;EAAO,CAAE,CAAC;EAC9E5B,OAAO,CAAC,OAAO4B,OAAO,EAAE,CAAC,GAAG1B,IAAI,IAAI,IAAAH,YAAA,CAAAsB,MAAM,EAACnB,IAAuB,EAAE;IAAE0B;EAAO,CAAE,CAAC;;AAEjF;AACA,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,EAAE,EAAEA,IAAI,IAAI,CAAC,EAAE;EACzC7B,OAAO,CAAC,QAAQ6B,IAAI,EAAE,CAAC,GAAG3B,IAAI,IAC7B,IAAAN,UAAA,CAAAmB,OAAO,EAACb,IAA+C,EAAE;IAAE2B;EAAI,CAAE,CAAC;;AAEpE7B,OAAO,CAAC8B,QAAQ,GAAG9B,OAAO,CAACc,KAAK;AAEhCiB,OAAA,CAAAC,OAAA,GAAehC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}