{"ast":null,"code":"import _defineProperty from \"/home/ryoitsu/Documents/test/react-todo-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { hexToU8a, isHex, stringToU8a } from '@polkadot/util';\nimport { base64Decode, decodeAddress, ed25519PairFromSeed as ed25519FromSeed, encodeAddress, ethereumEncode, hdEthereum, keyExtractSuri, keyFromPath, mnemonicToLegacySeed, mnemonicToMiniSecret, secp256k1PairFromSeed as secp256k1FromSeed, sr25519PairFromSeed as sr25519FromSeed } from '@polkadot/util-crypto';\nimport { createPair } from './pair/index.js';\nimport { DEV_PHRASE } from './defaults.js';\nimport { Pairs } from './pairs.js';\nconst PairFromSeed = {\n  ecdsa: seed => secp256k1FromSeed(seed),\n  ed25519: seed => ed25519FromSeed(seed),\n  ethereum: seed => secp256k1FromSeed(seed),\n  sr25519: seed => sr25519FromSeed(seed)\n};\nfunction pairToPublic(_ref) {\n  let {\n    publicKey\n  } = _ref;\n  return publicKey;\n}\n/**\n * # @polkadot/keyring\n *\n * ## Overview\n *\n * @name Keyring\n * @summary Keyring management of user accounts\n * @description Allows generation of keyring pairs from a variety of input combinations, such as\n * json object containing account address or public key, account metadata, and account encoded using\n * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,\n * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.\n * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair\n * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform\n * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with\n * an account may be obtained using `toJson` accompanied by the account passphrase.\n */\nexport class Keyring {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _defineProperty(this, \"__internal__pairs\", void 0);\n    _defineProperty(this, \"__internal__type\", void 0);\n    _defineProperty(this, \"__internal__ss58\", void 0);\n    _defineProperty(this, \"decodeAddress\", decodeAddress);\n    /**\n     * @name encodeAddress\n     * @description Encodes the input into an ss58 representation\n     */\n    _defineProperty(this, \"encodeAddress\", (address, ss58Format) => {\n      return this.type === 'ethereum' ? ethereumEncode(address) : encodeAddress(address, ss58Format !== null && ss58Format !== void 0 ? ss58Format : this.__internal__ss58);\n    });\n    options.type = options.type || 'ed25519';\n    if (!['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined')) {\n      throw new Error(\"Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '\".concat(options.type || 'unknown'));\n    }\n    this.__internal__pairs = new Pairs();\n    this.__internal__ss58 = options.ss58Format;\n    this.__internal__type = options.type;\n  }\n  /**\n   * @description retrieve the pairs (alias for getPairs)\n   */\n  get pairs() {\n    return this.getPairs();\n  }\n  /**\n   * @description retrieve the publicKeys (alias for getPublicKeys)\n   */\n  get publicKeys() {\n    return this.getPublicKeys();\n  }\n  /**\n   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa\n   */\n  get type() {\n    return this.__internal__type;\n  }\n  /**\n   * @name addPair\n   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   */\n  addPair(pair) {\n    return this.__internal__pairs.add(pair);\n  }\n  /**\n   * @name addFromAddress\n   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally\n   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from them that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n  addFromAddress(address) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let encoded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.type;\n    let ignoreChecksum = arguments.length > 4 ? arguments[4] : undefined;\n    let encType = arguments.length > 5 ? arguments[5] : undefined;\n    const publicKey = this.decodeAddress(address, ignoreChecksum);\n    return this.addPair(createPair({\n      toSS58: this.encodeAddress,\n      type\n    }, {\n      publicKey,\n      secretKey: new Uint8Array()\n    }, meta, encoded, encType));\n  }\n  /**\n   * @name addFromJson\n   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from it that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n  addFromJson(json, ignoreChecksum) {\n    return this.addPair(this.createFromJson(json, ignoreChecksum));\n  }\n  /**\n   * @name addFromMnemonic\n   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)\n   * argument and a metadata argument that contains account information (that may be obtained from the json file\n   * of an account backup), and then generates a keyring pair from it that it passes to\n   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n  addFromMnemonic(mnemonic) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n    return this.addFromUri(mnemonic, meta, type);\n  }\n  /**\n   * @name addFromPair\n   * @summary Stores an account created from an explicit publicKey/secreteKey combination\n   */\n  addFromPair(pair) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n    return this.addPair(this.createFromPair(pair, meta, type));\n  }\n  /**\n   * @name addFromSeed\n   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.\n   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to\n   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n   */\n  addFromSeed(seed) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n    return this.addPair(createPair({\n      toSS58: this.encodeAddress,\n      type\n    }, PairFromSeed[type](seed), meta, null));\n  }\n  /**\n   * @name addFromUri\n   * @summary Creates an account via an suri\n   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)\n   */\n  addFromUri(suri) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n    return this.addPair(this.createFromUri(suri, meta, type));\n  }\n  /**\n   * @name createFromJson\n   * @description Creates a pair from a JSON keyfile\n   */\n  createFromJson(_ref2, ignoreChecksum) {\n    let {\n      address,\n      encoded,\n      encoding: {\n        content,\n        type,\n        version\n      },\n      meta\n    } = _ref2;\n    if (version === '3' && content[0] !== 'pkcs8') {\n      throw new Error(\"Unable to decode non-pkcs8 type, [\".concat(content.join(','), \"] found}\"));\n    }\n    const cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];\n    const encType = !Array.isArray(type) ? [type] : type;\n    if (!['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType)) {\n      throw new Error(\"Unknown crypto type \".concat(cryptoType));\n    }\n    // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs\n    const publicKey = isHex(address) ? hexToU8a(address) : this.decodeAddress(address, ignoreChecksum);\n    const decoded = isHex(encoded) ? hexToU8a(encoded) : base64Decode(encoded);\n    return createPair({\n      toSS58: this.encodeAddress,\n      type: cryptoType\n    }, {\n      publicKey,\n      secretKey: new Uint8Array()\n    }, meta, decoded, encType);\n  }\n  /**\n   * @name createFromPair\n   * @summary Creates a pair from an explicit publicKey/secreteKey combination\n   */\n  createFromPair(pair) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n    return createPair({\n      toSS58: this.encodeAddress,\n      type\n    }, pair, meta, null);\n  }\n  /**\n   * @name createFromUri\n   * @summary Creates a Keypair from an suri\n   * @description This creates a pair from the suri, but does not add it to the keyring\n   */\n  createFromUri(_suri) {\n    let meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.type;\n    // here we only aut-add the dev phrase if we have a hard-derived path\n    const suri = _suri.startsWith('//') ? \"\".concat(DEV_PHRASE).concat(_suri) : _suri;\n    const {\n      derivePath,\n      password,\n      path,\n      phrase\n    } = keyExtractSuri(suri);\n    let seed;\n    const isPhraseHex = isHex(phrase, 256);\n    if (isPhraseHex) {\n      seed = hexToU8a(phrase);\n    } else {\n      const parts = phrase.split(' ');\n      if ([12, 15, 18, 21, 24].includes(parts.length)) {\n        seed = type === 'ethereum' ? mnemonicToLegacySeed(phrase, '', false, 64) : mnemonicToMiniSecret(phrase, password);\n      } else {\n        if (phrase.length > 32) {\n          throw new Error('specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');\n        }\n        seed = stringToU8a(phrase.padEnd(32));\n      }\n    }\n    const derived = type === 'ethereum' ? isPhraseHex ? PairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once\n    : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(PairFromSeed[type](seed), path, type);\n    return createPair({\n      toSS58: this.encodeAddress,\n      type\n    }, derived, meta, null);\n  }\n  /**\n   * @name getPair\n   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address\n   * @description Returns a keyring pair value from the keyring pair dictionary by performing\n   * a key lookup using the provided account address or public key (after decoding it).\n   */\n  getPair(address) {\n    return this.__internal__pairs.get(address);\n  }\n  /**\n   * @name getPairs\n   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary\n   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.\n   */\n  getPairs() {\n    return this.__internal__pairs.all();\n  }\n  /**\n   * @name getPublicKeys\n   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary\n   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.\n   */\n  getPublicKeys() {\n    return this.__internal__pairs.all().map(pairToPublic);\n  }\n  /**\n   * @name removePair\n   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.\n   */\n  removePair(address) {\n    this.__internal__pairs.remove(address);\n  }\n  /**\n   * @name setSS58Format;\n   * @description Sets the ss58 format for the keyring\n   */\n  setSS58Format(ss58) {\n    this.__internal__ss58 = ss58;\n  }\n  /**\n   * @name toJson\n   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account\n   * @description Returns a JSON object containing the metadata associated with an account\n   * when valid address or public key and when the account passphrase is provided if the account secret\n   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user\n   * may backup their account to a JSON file that contains this information.\n   */\n  toJson(address, passphrase) {\n    return this.__internal__pairs.get(address).toJson(passphrase);\n  }\n}","map":{"version":3,"names":["hexToU8a","isHex","stringToU8a","base64Decode","decodeAddress","ed25519PairFromSeed","ed25519FromSeed","encodeAddress","ethereumEncode","hdEthereum","keyExtractSuri","keyFromPath","mnemonicToLegacySeed","mnemonicToMiniSecret","secp256k1PairFromSeed","secp256k1FromSeed","sr25519PairFromSeed","sr25519FromSeed","createPair","DEV_PHRASE","Pairs","PairFromSeed","ecdsa","seed","ed25519","ethereum","sr25519","pairToPublic","_ref","publicKey","Keyring","constructor","options","arguments","length","undefined","_defineProperty","address","ss58Format","type","__internal__ss58","includes","Error","concat","__internal__pairs","__internal__type","pairs","getPairs","publicKeys","getPublicKeys","addPair","pair","add","addFromAddress","meta","encoded","ignoreChecksum","encType","toSS58","secretKey","Uint8Array","addFromJson","json","createFromJson","addFromMnemonic","mnemonic","addFromUri","addFromPair","createFromPair","addFromSeed","suri","createFromUri","_ref2","encoding","content","version","join","cryptoType","Array","isArray","decoded","_suri","startsWith","derivePath","password","path","phrase","isPhraseHex","parts","split","padEnd","derived","substring","getPair","get","all","map","removePair","remove","setSS58Format","ss58","toJson","passphrase"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/keyring/keyring.js"],"sourcesContent":["import { hexToU8a, isHex, stringToU8a } from '@polkadot/util';\nimport { base64Decode, decodeAddress, ed25519PairFromSeed as ed25519FromSeed, encodeAddress, ethereumEncode, hdEthereum, keyExtractSuri, keyFromPath, mnemonicToLegacySeed, mnemonicToMiniSecret, secp256k1PairFromSeed as secp256k1FromSeed, sr25519PairFromSeed as sr25519FromSeed } from '@polkadot/util-crypto';\nimport { createPair } from './pair/index.js';\nimport { DEV_PHRASE } from './defaults.js';\nimport { Pairs } from './pairs.js';\nconst PairFromSeed = {\n    ecdsa: (seed) => secp256k1FromSeed(seed),\n    ed25519: (seed) => ed25519FromSeed(seed),\n    ethereum: (seed) => secp256k1FromSeed(seed),\n    sr25519: (seed) => sr25519FromSeed(seed)\n};\nfunction pairToPublic({ publicKey }) {\n    return publicKey;\n}\n/**\n * # @polkadot/keyring\n *\n * ## Overview\n *\n * @name Keyring\n * @summary Keyring management of user accounts\n * @description Allows generation of keyring pairs from a variety of input combinations, such as\n * json object containing account address or public key, account metadata, and account encoded using\n * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,\n * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.\n * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair\n * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform\n * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with\n * an account may be obtained using `toJson` accompanied by the account passphrase.\n */\nexport class Keyring {\n    __internal__pairs;\n    __internal__type;\n    __internal__ss58;\n    decodeAddress = decodeAddress;\n    constructor(options = {}) {\n        options.type = options.type || 'ed25519';\n        if (!['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined')) {\n            throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || 'unknown'}`);\n        }\n        this.__internal__pairs = new Pairs();\n        this.__internal__ss58 = options.ss58Format;\n        this.__internal__type = options.type;\n    }\n    /**\n     * @description retrieve the pairs (alias for getPairs)\n     */\n    get pairs() {\n        return this.getPairs();\n    }\n    /**\n     * @description retrieve the publicKeys (alias for getPublicKeys)\n     */\n    get publicKeys() {\n        return this.getPublicKeys();\n    }\n    /**\n     * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa\n     */\n    get type() {\n        return this.__internal__type;\n    }\n    /**\n     * @name addPair\n     * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     */\n    addPair(pair) {\n        return this.__internal__pairs.add(pair);\n    }\n    /**\n     * @name addFromAddress\n     * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally\n     * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file\n     * of an account backup), and then generates a keyring pair from them that it passes to\n     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n    addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {\n        const publicKey = this.decodeAddress(address, ignoreChecksum);\n        return this.addPair(createPair({ toSS58: this.encodeAddress, type }, { publicKey, secretKey: new Uint8Array() }, meta, encoded, encType));\n    }\n    /**\n     * @name addFromJson\n     * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file\n     * of an account backup), and then generates a keyring pair from it that it passes to\n     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n    addFromJson(json, ignoreChecksum) {\n        return this.addPair(this.createFromJson(json, ignoreChecksum));\n    }\n    /**\n     * @name addFromMnemonic\n     * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)\n     * argument and a metadata argument that contains account information (that may be obtained from the json file\n     * of an account backup), and then generates a keyring pair from it that it passes to\n     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n    addFromMnemonic(mnemonic, meta = {}, type = this.type) {\n        return this.addFromUri(mnemonic, meta, type);\n    }\n    /**\n     * @name addFromPair\n     * @summary Stores an account created from an explicit publicKey/secreteKey combination\n     */\n    addFromPair(pair, meta = {}, type = this.type) {\n        return this.addPair(this.createFromPair(pair, meta, type));\n    }\n    /**\n     * @name addFromSeed\n     * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary\n     * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.\n     * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to\n     * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.\n     */\n    addFromSeed(seed, meta = {}, type = this.type) {\n        return this.addPair(createPair({ toSS58: this.encodeAddress, type }, PairFromSeed[type](seed), meta, null));\n    }\n    /**\n     * @name addFromUri\n     * @summary Creates an account via an suri\n     * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)\n     */\n    addFromUri(suri, meta = {}, type = this.type) {\n        return this.addPair(this.createFromUri(suri, meta, type));\n    }\n    /**\n     * @name createFromJson\n     * @description Creates a pair from a JSON keyfile\n     */\n    createFromJson({ address, encoded, encoding: { content, type, version }, meta }, ignoreChecksum) {\n        if (version === '3' && content[0] !== 'pkcs8') {\n            throw new Error(`Unable to decode non-pkcs8 type, [${content.join(',')}] found}`);\n        }\n        const cryptoType = version === '0' || !Array.isArray(content)\n            ? this.type\n            : content[1];\n        const encType = !Array.isArray(type)\n            ? [type]\n            : type;\n        if (!['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType)) {\n            throw new Error(`Unknown crypto type ${cryptoType}`);\n        }\n        // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs\n        const publicKey = isHex(address)\n            ? hexToU8a(address)\n            : this.decodeAddress(address, ignoreChecksum);\n        const decoded = isHex(encoded)\n            ? hexToU8a(encoded)\n            : base64Decode(encoded);\n        return createPair({ toSS58: this.encodeAddress, type: cryptoType }, { publicKey, secretKey: new Uint8Array() }, meta, decoded, encType);\n    }\n    /**\n     * @name createFromPair\n     * @summary Creates a pair from an explicit publicKey/secreteKey combination\n     */\n    createFromPair(pair, meta = {}, type = this.type) {\n        return createPair({ toSS58: this.encodeAddress, type }, pair, meta, null);\n    }\n    /**\n     * @name createFromUri\n     * @summary Creates a Keypair from an suri\n     * @description This creates a pair from the suri, but does not add it to the keyring\n     */\n    createFromUri(_suri, meta = {}, type = this.type) {\n        // here we only aut-add the dev phrase if we have a hard-derived path\n        const suri = _suri.startsWith('//')\n            ? `${DEV_PHRASE}${_suri}`\n            : _suri;\n        const { derivePath, password, path, phrase } = keyExtractSuri(suri);\n        let seed;\n        const isPhraseHex = isHex(phrase, 256);\n        if (isPhraseHex) {\n            seed = hexToU8a(phrase);\n        }\n        else {\n            const parts = phrase.split(' ');\n            if ([12, 15, 18, 21, 24].includes(parts.length)) {\n                seed = type === 'ethereum'\n                    ? mnemonicToLegacySeed(phrase, '', false, 64)\n                    : mnemonicToMiniSecret(phrase, password);\n            }\n            else {\n                if (phrase.length > 32) {\n                    throw new Error('specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');\n                }\n                seed = stringToU8a(phrase.padEnd(32));\n            }\n        }\n        const derived = type === 'ethereum'\n            ? isPhraseHex\n                ? PairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once\n                : hdEthereum(seed, derivePath.substring(1))\n            : keyFromPath(PairFromSeed[type](seed), path, type);\n        return createPair({ toSS58: this.encodeAddress, type }, derived, meta, null);\n    }\n    /**\n     * @name encodeAddress\n     * @description Encodes the input into an ss58 representation\n     */\n    encodeAddress = (address, ss58Format) => {\n        return this.type === 'ethereum'\n            ? ethereumEncode(address)\n            : encodeAddress(address, ss58Format ?? this.__internal__ss58);\n    };\n    /**\n     * @name getPair\n     * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address\n     * @description Returns a keyring pair value from the keyring pair dictionary by performing\n     * a key lookup using the provided account address or public key (after decoding it).\n     */\n    getPair(address) {\n        return this.__internal__pairs.get(address);\n    }\n    /**\n     * @name getPairs\n     * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary\n     * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.\n     */\n    getPairs() {\n        return this.__internal__pairs.all();\n    }\n    /**\n     * @name getPublicKeys\n     * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary\n     * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.\n     */\n    getPublicKeys() {\n        return this.__internal__pairs.all().map(pairToPublic);\n    }\n    /**\n     * @name removePair\n     * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.\n     */\n    removePair(address) {\n        this.__internal__pairs.remove(address);\n    }\n    /**\n     * @name setSS58Format;\n     * @description Sets the ss58 format for the keyring\n     */\n    setSS58Format(ss58) {\n        this.__internal__ss58 = ss58;\n    }\n    /**\n     * @name toJson\n     * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account\n     * @description Returns a JSON object containing the metadata associated with an account\n     * when valid address or public key and when the account passphrase is provided if the account secret\n     * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user\n     * may backup their account to a JSON file that contains this information.\n     */\n    toJson(address, passphrase) {\n        return this.__internal__pairs.get(address).toJson(passphrase);\n    }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,KAAK,EAAEC,WAAW,QAAQ,gBAAgB;AAC7D,SAASC,YAAY,EAAEC,aAAa,EAAEC,mBAAmB,IAAIC,eAAe,EAAEC,aAAa,EAAEC,cAAc,EAAEC,UAAU,EAAEC,cAAc,EAAEC,WAAW,EAAEC,oBAAoB,EAAEC,oBAAoB,EAAEC,qBAAqB,IAAIC,iBAAiB,EAAEC,mBAAmB,IAAIC,eAAe,QAAQ,uBAAuB;AACnT,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,KAAK,QAAQ,YAAY;AAClC,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAGC,IAAI,IAAKR,iBAAiB,CAACQ,IAAI,CAAC;EACxCC,OAAO,EAAGD,IAAI,IAAKjB,eAAe,CAACiB,IAAI,CAAC;EACxCE,QAAQ,EAAGF,IAAI,IAAKR,iBAAiB,CAACQ,IAAI,CAAC;EAC3CG,OAAO,EAAGH,IAAI,IAAKN,eAAe,CAACM,IAAI;AAC3C,CAAC;AACD,SAASI,YAAYA,CAAAC,IAAA,EAAgB;EAAA,IAAf;IAAEC;EAAU,CAAC,GAAAD,IAAA;EAC/B,OAAOC,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,CAAC;EAKjBC,WAAWA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAAG,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,wBADRhC,aAAa;IAmK7B;AACJ;AACA;AACA;IAHIgC,eAAA,wBAIgB,CAACC,OAAO,EAAEC,UAAU,KAAK;MACrC,OAAO,IAAI,CAACC,IAAI,KAAK,UAAU,GACzB/B,cAAc,CAAC6B,OAAO,CAAC,GACvB9B,aAAa,CAAC8B,OAAO,EAAEC,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,IAAI,CAACE,gBAAgB,CAAC;IACrE,CAAC;IAzKGR,OAAO,CAACO,IAAI,GAAGP,OAAO,CAACO,IAAI,IAAI,SAAS;IACxC,IAAI,CAAC,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,CAACE,QAAQ,CAACT,OAAO,CAACO,IAAI,IAAI,WAAW,CAAC,EAAE;MACpF,MAAM,IAAIG,KAAK,0FAAAC,MAAA,CAA0FX,OAAO,CAACO,IAAI,IAAI,SAAS,CAAE,CAAC;IACzI;IACA,IAAI,CAACK,iBAAiB,GAAG,IAAIxB,KAAK,CAAC,CAAC;IACpC,IAAI,CAACoB,gBAAgB,GAAGR,OAAO,CAACM,UAAU;IAC1C,IAAI,CAACO,gBAAgB,GAAGb,OAAO,CAACO,IAAI;EACxC;EACA;AACJ;AACA;EACI,IAAIO,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC;EAC1B;EACA;AACJ;AACA;EACI,IAAIC,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI,CAACC,aAAa,CAAC,CAAC;EAC/B;EACA;AACJ;AACA;EACI,IAAIV,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACM,gBAAgB;EAChC;EACA;AACJ;AACA;AACA;EACIK,OAAOA,CAACC,IAAI,EAAE;IACV,OAAO,IAAI,CAACP,iBAAiB,CAACQ,GAAG,CAACD,IAAI,CAAC;EAC3C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,cAAcA,CAAChB,OAAO,EAAwE;IAAA,IAAtEiB,IAAI,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEsB,OAAO,GAAAtB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAAA,IAAEM,IAAI,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACM,IAAI;IAAA,IAAEiB,cAAc,GAAAvB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAA,IAAEsB,OAAO,GAAAxB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IACxF,MAAMN,SAAS,GAAG,IAAI,CAACzB,aAAa,CAACiC,OAAO,EAAEmB,cAAc,CAAC;IAC7D,OAAO,IAAI,CAACN,OAAO,CAAChC,UAAU,CAAC;MAAEwC,MAAM,EAAE,IAAI,CAACnD,aAAa;MAAEgC;IAAK,CAAC,EAAE;MAAEV,SAAS;MAAE8B,SAAS,EAAE,IAAIC,UAAU,CAAC;IAAE,CAAC,EAAEN,IAAI,EAAEC,OAAO,EAAEE,OAAO,CAAC,CAAC;EAC7I;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,WAAWA,CAACC,IAAI,EAAEN,cAAc,EAAE;IAC9B,OAAO,IAAI,CAACN,OAAO,CAAC,IAAI,CAACa,cAAc,CAACD,IAAI,EAAEN,cAAc,CAAC,CAAC;EAClE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIQ,eAAeA,CAACC,QAAQ,EAA+B;IAAA,IAA7BX,IAAI,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEM,IAAI,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACM,IAAI;IACjD,OAAO,IAAI,CAAC2B,UAAU,CAACD,QAAQ,EAAEX,IAAI,EAAEf,IAAI,CAAC;EAChD;EACA;AACJ;AACA;AACA;EACI4B,WAAWA,CAAChB,IAAI,EAA+B;IAAA,IAA7BG,IAAI,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEM,IAAI,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACM,IAAI;IACzC,OAAO,IAAI,CAACW,OAAO,CAAC,IAAI,CAACkB,cAAc,CAACjB,IAAI,EAAEG,IAAI,EAAEf,IAAI,CAAC,CAAC;EAC9D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI8B,WAAWA,CAAC9C,IAAI,EAA+B;IAAA,IAA7B+B,IAAI,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEM,IAAI,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACM,IAAI;IACzC,OAAO,IAAI,CAACW,OAAO,CAAChC,UAAU,CAAC;MAAEwC,MAAM,EAAE,IAAI,CAACnD,aAAa;MAAEgC;IAAK,CAAC,EAAElB,YAAY,CAACkB,IAAI,CAAC,CAAChB,IAAI,CAAC,EAAE+B,IAAI,EAAE,IAAI,CAAC,CAAC;EAC/G;EACA;AACJ;AACA;AACA;AACA;EACIY,UAAUA,CAACI,IAAI,EAA+B;IAAA,IAA7BhB,IAAI,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEM,IAAI,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACM,IAAI;IACxC,OAAO,IAAI,CAACW,OAAO,CAAC,IAAI,CAACqB,aAAa,CAACD,IAAI,EAAEhB,IAAI,EAAEf,IAAI,CAAC,CAAC;EAC7D;EACA;AACJ;AACA;AACA;EACIwB,cAAcA,CAAAS,KAAA,EAAmEhB,cAAc,EAAE;IAAA,IAAlF;MAAEnB,OAAO;MAAEkB,OAAO;MAAEkB,QAAQ,EAAE;QAAEC,OAAO;QAAEnC,IAAI;QAAEoC;MAAQ,CAAC;MAAErB;IAAK,CAAC,GAAAkB,KAAA;IAC3E,IAAIG,OAAO,KAAK,GAAG,IAAID,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,EAAE;MAC3C,MAAM,IAAIhC,KAAK,sCAAAC,MAAA,CAAsC+B,OAAO,CAACE,IAAI,CAAC,GAAG,CAAC,aAAU,CAAC;IACrF;IACA,MAAMC,UAAU,GAAGF,OAAO,KAAK,GAAG,IAAI,CAACG,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC,GACvD,IAAI,CAACnC,IAAI,GACTmC,OAAO,CAAC,CAAC,CAAC;IAChB,MAAMjB,OAAO,GAAG,CAACqB,KAAK,CAACC,OAAO,CAACxC,IAAI,CAAC,GAC9B,CAACA,IAAI,CAAC,GACNA,IAAI;IACV,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,UAAU,CAAC,CAACE,QAAQ,CAACoC,UAAU,CAAC,EAAE;MACnE,MAAM,IAAInC,KAAK,wBAAAC,MAAA,CAAwBkC,UAAU,CAAE,CAAC;IACxD;IACA;IACA,MAAMhD,SAAS,GAAG5B,KAAK,CAACoC,OAAO,CAAC,GAC1BrC,QAAQ,CAACqC,OAAO,CAAC,GACjB,IAAI,CAACjC,aAAa,CAACiC,OAAO,EAAEmB,cAAc,CAAC;IACjD,MAAMwB,OAAO,GAAG/E,KAAK,CAACsD,OAAO,CAAC,GACxBvD,QAAQ,CAACuD,OAAO,CAAC,GACjBpD,YAAY,CAACoD,OAAO,CAAC;IAC3B,OAAOrC,UAAU,CAAC;MAAEwC,MAAM,EAAE,IAAI,CAACnD,aAAa;MAAEgC,IAAI,EAAEsC;IAAW,CAAC,EAAE;MAAEhD,SAAS;MAAE8B,SAAS,EAAE,IAAIC,UAAU,CAAC;IAAE,CAAC,EAAEN,IAAI,EAAE0B,OAAO,EAAEvB,OAAO,CAAC;EAC3I;EACA;AACJ;AACA;AACA;EACIW,cAAcA,CAACjB,IAAI,EAA+B;IAAA,IAA7BG,IAAI,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEM,IAAI,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACM,IAAI;IAC5C,OAAOrB,UAAU,CAAC;MAAEwC,MAAM,EAAE,IAAI,CAACnD,aAAa;MAAEgC;IAAK,CAAC,EAAEY,IAAI,EAAEG,IAAI,EAAE,IAAI,CAAC;EAC7E;EACA;AACJ;AACA;AACA;AACA;EACIiB,aAAaA,CAACU,KAAK,EAA+B;IAAA,IAA7B3B,IAAI,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEM,IAAI,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACM,IAAI;IAC5C;IACA,MAAM+B,IAAI,GAAGW,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC,MAAAvC,MAAA,CAC1BxB,UAAU,EAAAwB,MAAA,CAAGsC,KAAK,IACrBA,KAAK;IACX,MAAM;MAAEE,UAAU;MAAEC,QAAQ;MAAEC,IAAI;MAAEC;IAAO,CAAC,GAAG5E,cAAc,CAAC4D,IAAI,CAAC;IACnE,IAAI/C,IAAI;IACR,MAAMgE,WAAW,GAAGtF,KAAK,CAACqF,MAAM,EAAE,GAAG,CAAC;IACtC,IAAIC,WAAW,EAAE;MACbhE,IAAI,GAAGvB,QAAQ,CAACsF,MAAM,CAAC;IAC3B,CAAC,MACI;MACD,MAAME,KAAK,GAAGF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAChD,QAAQ,CAAC+C,KAAK,CAACtD,MAAM,CAAC,EAAE;QAC7CX,IAAI,GAAGgB,IAAI,KAAK,UAAU,GACpB3B,oBAAoB,CAAC0E,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,GAC3CzE,oBAAoB,CAACyE,MAAM,EAAEF,QAAQ,CAAC;MAChD,CAAC,MACI;QACD,IAAIE,MAAM,CAACpD,MAAM,GAAG,EAAE,EAAE;UACpB,MAAM,IAAIQ,KAAK,CAAC,qFAAqF,CAAC;QAC1G;QACAnB,IAAI,GAAGrB,WAAW,CAACoF,MAAM,CAACI,MAAM,CAAC,EAAE,CAAC,CAAC;MACzC;IACJ;IACA,MAAMC,OAAO,GAAGpD,IAAI,KAAK,UAAU,GAC7BgD,WAAW,GACPlE,YAAY,CAACkB,IAAI,CAAC,CAAChB,IAAI,CAAC,CAAC;IAAA,EACzBd,UAAU,CAACc,IAAI,EAAE4D,UAAU,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC,GAC7CjF,WAAW,CAACU,YAAY,CAACkB,IAAI,CAAC,CAAChB,IAAI,CAAC,EAAE8D,IAAI,EAAE9C,IAAI,CAAC;IACvD,OAAOrB,UAAU,CAAC;MAAEwC,MAAM,EAAE,IAAI,CAACnD,aAAa;MAAEgC;IAAK,CAAC,EAAEoD,OAAO,EAAErC,IAAI,EAAE,IAAI,CAAC;EAChF;EAUA;AACJ;AACA;AACA;AACA;AACA;EACIuC,OAAOA,CAACxD,OAAO,EAAE;IACb,OAAO,IAAI,CAACO,iBAAiB,CAACkD,GAAG,CAACzD,OAAO,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACIU,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACH,iBAAiB,CAACmD,GAAG,CAAC,CAAC;EACvC;EACA;AACJ;AACA;AACA;AACA;EACI9C,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACL,iBAAiB,CAACmD,GAAG,CAAC,CAAC,CAACC,GAAG,CAACrE,YAAY,CAAC;EACzD;EACA;AACJ;AACA;AACA;EACIsE,UAAUA,CAAC5D,OAAO,EAAE;IAChB,IAAI,CAACO,iBAAiB,CAACsD,MAAM,CAAC7D,OAAO,CAAC;EAC1C;EACA;AACJ;AACA;AACA;EACI8D,aAAaA,CAACC,IAAI,EAAE;IAChB,IAAI,CAAC5D,gBAAgB,GAAG4D,IAAI;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAAChE,OAAO,EAAEiE,UAAU,EAAE;IACxB,OAAO,IAAI,CAAC1D,iBAAiB,CAACkD,GAAG,CAACzD,OAAO,CAAC,CAACgE,MAAM,CAACC,UAAU,CAAC;EACjE;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}