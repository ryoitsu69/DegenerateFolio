{"ast":null,"code":"import { ExtensionType, SVGResource, BaseTexture, utils, settings, extensions } from \"@pixi/core\";\nimport { checkDataUrl } from \"../../../utils/checkDataUrl.mjs\";\nimport { checkExtension } from \"../../../utils/checkExtension.mjs\";\nimport { LoaderParserPriority } from \"../LoaderParser.mjs\";\nimport { loadTextures } from \"./loadTextures.mjs\";\nimport { createTexture } from \"./utils/createTexture.mjs\";\nconst validSVGExtension = \".svg\",\n  validSVGMIME = \"image/svg+xml\",\n  loadSVG = {\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.High\n    },\n    name: \"loadSVG\",\n    test(url) {\n      return checkDataUrl(url, validSVGMIME) || checkExtension(url, validSVGExtension);\n    },\n    async testParse(data) {\n      return SVGResource.test(data);\n    },\n    async parse(asset, data, loader) {\n      const src = new SVGResource(asset, data?.data?.resourceOptions);\n      await src.load();\n      const base = new BaseTexture(src, {\n        resolution: utils.getResolutionOfUrl(asset),\n        ...data?.data\n      });\n      return base.resource.src = data.src, createTexture(base, loader, data.src);\n    },\n    async load(url, _options) {\n      return (await settings.ADAPTER.fetch(url)).text();\n    },\n    unload: loadTextures.unload\n  };\nextensions.add(loadSVG);\nexport { loadSVG };","map":{"version":3,"names":["validSVGExtension","validSVGMIME","loadSVG","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","checkDataUrl","checkExtension","testParse","data","SVGResource","parse","asset","loader","src","resourceOptions","load","base","BaseTexture","resolution","utils","getResolutionOfUrl","resource","createTexture","_options","settings","ADAPTER","fetch","text","unload","loadTextures","extensions","add"],"sources":["/home/ryoitsu/node_modules/@pixi/assets/src/loader/parsers/textures/loadSVG.ts"],"sourcesContent":["import { BaseTexture, extensions, ExtensionType, settings, SVGResource, utils } from '@pixi/core';\nimport { checkDataUrl } from '../../../utils/checkDataUrl';\nimport { checkExtension } from '../../../utils/checkExtension';\nimport { LoaderParserPriority } from '../LoaderParser';\nimport { loadTextures } from './loadTextures';\nimport { createTexture } from './utils/createTexture';\n\nimport type { IBaseTextureOptions, Texture } from '@pixi/core';\nimport type { ResolvedAsset } from '../../../types';\nimport type { Loader } from '../../Loader';\nimport type { LoaderParser } from '../LoaderParser';\n\nconst validSVGExtension = '.svg';\nconst validSVGMIME = 'image/svg+xml';\n\n/**\n * Loads SVG's into Textures.\n * @memberof PIXI\n */\nexport const loadSVG = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadSVG',\n\n    test(url: string): boolean\n    {\n        return checkDataUrl(url, validSVGMIME) || checkExtension(url, validSVGExtension);\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return SVGResource.test(data);\n    },\n\n    async parse(asset: string, data: ResolvedAsset<IBaseTextureOptions>, loader: Loader): Promise<Texture>\n    {\n        const src = new SVGResource(asset, data?.data?.resourceOptions);\n\n        await src.load();\n\n        const base = new BaseTexture(src, {\n            resolution: utils.getResolutionOfUrl(asset),\n            ...data?.data,\n        });\n\n        base.resource.src = data.src;\n\n        const texture = createTexture(base, loader, data.src);\n\n        return texture;\n    },\n\n    async load(url: string, _options: ResolvedAsset): Promise<string>\n    {\n        const response = await settings.ADAPTER.fetch(url);\n\n        return response.text();\n    },\n\n    unload: loadTextures.unload,\n\n} as LoaderParser<Texture | string, IBaseTextureOptions>;\n\nextensions.add(loadSVG);\n"],"mappings":";;;;;;AAYA,MAAMA,iBAAA,GAAoB;EACpBC,YAAA,GAAe;EAMRC,OAAA,GAAU;IACnBC,SAAA,EAAW;MACPC,IAAA,EAAMC,aAAA,CAAcC,UAAA;MACpBC,QAAA,EAAUC,oBAAA,CAAqBC;IACnC;IAEAC,IAAA,EAAM;IAENC,KAAKC,GAAA,EACL;MACI,OAAOC,YAAA,CAAaD,GAAA,EAAKX,YAAY,KAAKa,cAAA,CAAeF,GAAA,EAAKZ,iBAAiB;IACnF;IAEA,MAAMe,UAAUC,IAAA,EAChB;MACW,OAAAC,WAAA,CAAYN,IAAA,CAAKK,IAAI;IAChC;IAEA,MAAME,MAAMC,KAAA,EAAeH,IAAA,EAA0CI,MAAA,EACrE;MACI,MAAMC,GAAA,GAAM,IAAIJ,WAAA,CAAYE,KAAA,EAAOH,IAAA,EAAMA,IAAA,EAAMM,eAAe;MAE9D,MAAMD,GAAA,CAAIE,IAAA;MAEJ,MAAAC,IAAA,GAAO,IAAIC,WAAA,CAAYJ,GAAA,EAAK;QAC9BK,UAAA,EAAYC,KAAA,CAAMC,kBAAA,CAAmBT,KAAK;QAC1C,GAAGH,IAAA,EAAMA;MAAA,CACZ;MAEI,OAAAQ,IAAA,CAAAK,QAAA,CAASR,GAAA,GAAML,IAAA,CAAKK,GAAA,EAETS,aAAA,CAAcN,IAAA,EAAMJ,MAAA,EAAQJ,IAAA,CAAKK,GAAG;IAGxD;IAEA,MAAME,KAAKX,GAAA,EAAamB,QAAA,EACxB;MAGI,QAFiB,MAAMC,QAAA,CAASC,OAAA,CAAQC,KAAA,CAAMtB,GAAG,GAEjCuB,IAAA;IACpB;IAEAC,MAAA,EAAQC,YAAA,CAAaD;EAEzB;AAEAE,UAAA,CAAWC,GAAA,CAAIrC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}