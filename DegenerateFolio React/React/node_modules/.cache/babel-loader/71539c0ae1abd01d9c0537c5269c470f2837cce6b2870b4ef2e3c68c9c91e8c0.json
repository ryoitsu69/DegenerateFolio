{"ast":null,"code":"import { TextureSource } from '../rendering/renderers/shared/texture/sources/TextureSource.mjs';\nimport { GraphicsContext } from '../scene/graphics/shared/GraphicsContext.mjs';\nimport { Text } from '../scene/text/Text.mjs';\nimport { BitmapText } from '../scene/text-bitmap/BitmapText.mjs';\nimport { HTMLText } from '../scene/text-html/HTMLText.mjs';\nimport { PrepareQueue } from './PrepareQueue.mjs';\n\"use strict\";\nclass PrepareUpload extends PrepareQueue {\n  /**\n   * Upload the given queue item\n   * @param item\n   */\n  uploadQueueItem(item) {\n    if (item instanceof TextureSource) {\n      this.uploadTextureSource(item);\n    } else if (item instanceof Text) {\n      this.uploadText(item);\n    } else if (item instanceof HTMLText) {\n      this.uploadHTMLText(item);\n    } else if (item instanceof BitmapText) {\n      this.uploadBitmapText(item);\n    } else if (item instanceof GraphicsContext) {\n      this.uploadGraphicsContext(item);\n    }\n  }\n  uploadTextureSource(textureSource) {\n    this.renderer.texture.initSource(textureSource);\n  }\n  uploadText(_text) {\n    this.renderer.renderPipes.text.initGpuText(_text);\n  }\n  uploadBitmapText(_text) {\n    this.renderer.renderPipes.bitmapText.initGpuText(_text);\n  }\n  uploadHTMLText(_text) {\n    this.renderer.renderPipes.htmlText.initGpuText(_text);\n  }\n  /**\n   * Resolve the given graphics context and return an item for the queue\n   * @param graphicsContext\n   */\n  uploadGraphicsContext(graphicsContext) {\n    this.renderer.graphicsContext.getContextRenderData(graphicsContext);\n    const {\n      instructions\n    } = graphicsContext;\n    for (const instruction of instructions) {\n      if (instruction.action === \"texture\") {\n        const {\n          image\n        } = instruction.data;\n        this.uploadTextureSource(image.source);\n      } else if (instruction.action === \"fill\") {\n        const {\n          texture\n        } = instruction.data.style;\n        this.uploadTextureSource(texture.source);\n      }\n    }\n    return null;\n  }\n}\nexport { PrepareUpload };","map":{"version":3,"names":["PrepareUpload","PrepareQueue","uploadQueueItem","item","TextureSource","uploadTextureSource","Text","uploadText","HTMLText","uploadHTMLText","BitmapText","uploadBitmapText","GraphicsContext","uploadGraphicsContext","textureSource","renderer","texture","initSource","_text","renderPipes","text","initGpuText","bitmapText","htmlText","graphicsContext","getContextRenderData","instructions","instruction","action","image","data","source","style"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/prepare/PrepareUpload.ts"],"sourcesContent":["import { TextureSource } from '../rendering/renderers/shared/texture/sources/TextureSource';\nimport { GraphicsContext } from '../scene/graphics/shared/GraphicsContext';\nimport { Text } from '../scene/text/Text';\nimport { BitmapText } from '../scene/text-bitmap/BitmapText';\nimport { HTMLText } from '../scene/text-html/HTMLText';\nimport { PrepareQueue } from './PrepareQueue';\n\nimport type { FillInstruction, TextureInstruction } from '../scene/graphics/shared/GraphicsContext';\nimport type { PrepareQueueItem } from './PrepareBase';\n\n/**\n * Part of the prepare system. Responsible for uploading all the items to the GPU.\n * This class extends the resolver functionality and uploads the given queue items.\n * @memberof rendering\n */\nexport abstract class PrepareUpload extends PrepareQueue\n{\n    /**\n     * Upload the given queue item\n     * @param item\n     */\n    protected uploadQueueItem(item: PrepareQueueItem): void\n    {\n        if (item instanceof TextureSource)\n        {\n            this.uploadTextureSource(item);\n        }\n        else if (item instanceof Text)\n        {\n            this.uploadText(item);\n        }\n        else if (item instanceof HTMLText)\n        {\n            this.uploadHTMLText(item);\n        }\n        else if (item instanceof BitmapText)\n        {\n            this.uploadBitmapText(item);\n        }\n        else if (item instanceof GraphicsContext)\n        {\n            this.uploadGraphicsContext(item);\n        }\n    }\n\n    protected uploadTextureSource(textureSource: TextureSource): void\n    {\n        this.renderer.texture.initSource(textureSource);\n    }\n\n    protected uploadText(_text: Text): void\n    {\n        this.renderer.renderPipes.text.initGpuText(_text);\n    }\n\n    protected uploadBitmapText(_text: BitmapText): void\n    {\n        this.renderer.renderPipes.bitmapText.initGpuText(_text);\n    }\n\n    protected uploadHTMLText(_text: HTMLText): void\n    {\n        this.renderer.renderPipes.htmlText.initGpuText(_text);\n    }\n\n    /**\n     * Resolve the given graphics context and return an item for the queue\n     * @param graphicsContext\n     */\n    protected uploadGraphicsContext(graphicsContext: GraphicsContext): void\n    {\n        this.renderer.graphicsContext.getContextRenderData(graphicsContext);\n\n        const { instructions } = graphicsContext;\n\n        for (const instruction of instructions)\n        {\n            if (instruction.action === 'texture')\n            {\n                const { image } = (instruction as TextureInstruction).data;\n\n                this.uploadTextureSource(image.source);\n            }\n            else if (instruction.action === 'fill')\n            {\n                const { texture } = (instruction as FillInstruction).data.style;\n\n                this.uploadTextureSource(texture.source);\n            }\n        }\n\n        return null;\n    }\n}\n"],"mappings":";;;;;;;AAeO,MAAeA,aAAA,SAAsBC,YAC5C;EAAA;AAAA;AAAA;AAAA;EAKcC,gBAAgBC,IAC1B;IACI,IAAIA,IAAA,YAAgBC,aACpB;MACI,KAAKC,mBAAA,CAAoBF,IAAI;IAAA,CACjC,UACSA,IAAA,YAAgBG,IACzB;MACI,KAAKC,UAAA,CAAWJ,IAAI;IAAA,CACxB,UACSA,IAAA,YAAgBK,QACzB;MACI,KAAKC,cAAA,CAAeN,IAAI;IAAA,CAC5B,UACSA,IAAA,YAAgBO,UACzB;MACI,KAAKC,gBAAA,CAAiBR,IAAI;IAAA,CAC9B,UACSA,IAAA,YAAgBS,eACzB;MACI,KAAKC,qBAAA,CAAsBV,IAAI;IAAA;EACnC;EAGME,oBAAoBS,aAC9B;IACS,KAAAC,QAAA,CAASC,OAAQ,CAAAC,UAAA,CAAWH,aAAa;EAAA;EAGxCP,WAAWW,KACrB;IACI,KAAKH,QAAS,CAAAI,WAAA,CAAYC,IAAK,CAAAC,WAAA,CAAYH,KAAK;EAAA;EAG1CP,iBAAiBO,KAC3B;IACI,KAAKH,QAAS,CAAAI,WAAA,CAAYG,UAAW,CAAAD,WAAA,CAAYH,KAAK;EAAA;EAGhDT,eAAeS,KACzB;IACI,KAAKH,QAAS,CAAAI,WAAA,CAAYI,QAAS,CAAAF,WAAA,CAAYH,KAAK;EAAA;EACxD;AAAA;AAAA;AAAA;EAMUL,sBAAsBW,eAChC;IACS,KAAAT,QAAA,CAASS,eAAgB,CAAAC,oBAAA,CAAqBD,eAAe;IAE5D;MAAEE;IAAA,CAAiB,GAAAF,eAAA;IAEzB,WAAWG,WAAA,IAAeD,YAC1B;MACQ,IAAAC,WAAA,CAAYC,MAAA,KAAW,SAC3B;QACU;UAAEC;QAAM,IAAKF,WAAmC,CAAAG,IAAA;QAEjD,KAAAzB,mBAAA,CAAoBwB,KAAA,CAAME,MAAM;MAAA,CACzC,UACSJ,WAAY,CAAAC,MAAA,KAAW,MAChC;QACI,MAAM;UAAEZ;QAAA,CAAa,GAAAW,WAAA,CAAgCG,IAAK,CAAAE,KAAA;QAErD,KAAA3B,mBAAA,CAAoBW,OAAA,CAAQe,MAAM;MAAA;IAC3C;IAGG;EAAA;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}