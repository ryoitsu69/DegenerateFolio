{"ast":null,"code":"import { ExtensionType, extensions } from \"@pixi/extensions\";\nclass ObjectRendererSystem {\n  // renderers scene graph!\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * Renders the object to its WebGL view.\n   * @param displayObject - The object to be rendered.\n   * @param options - the options to be passed to the renderer\n   */\n  render(displayObject, options) {\n    const renderer = this.renderer;\n    let renderTexture, clear, transform, skipUpdateTransform;\n    if (options && (renderTexture = options.renderTexture, clear = options.clear, transform = options.transform, skipUpdateTransform = options.skipUpdateTransform), this.renderingToScreen = !renderTexture, renderer.runners.prerender.emit(), renderer.emit(\"prerender\"), renderer.projection.transform = transform, !renderer.context.isLost) {\n      if (renderTexture || (this.lastObjectRendered = displayObject), !skipUpdateTransform) {\n        const cacheParent = displayObject.enableTempParent();\n        displayObject.updateTransform(), displayObject.disableTempParent(cacheParent);\n      }\n      renderer.renderTexture.bind(renderTexture), renderer.batch.currentRenderer.start(), (clear ?? renderer.background.clearBeforeRender) && renderer.renderTexture.clear(), displayObject.render(renderer), renderer.batch.currentRenderer.flush(), renderTexture && (options.blit && renderer.framebuffer.blit(), renderTexture.baseTexture.update()), renderer.runners.postrender.emit(), renderer.projection.transform = null, renderer.emit(\"postrender\");\n    }\n  }\n  destroy() {\n    this.renderer = null, this.lastObjectRendered = null;\n  }\n}\nObjectRendererSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"objectRenderer\"\n};\nextensions.add(ObjectRendererSystem);\nexport { ObjectRendererSystem };","map":{"version":3,"names":["ObjectRendererSystem","constructor","renderer","render","displayObject","options","renderTexture","clear","transform","skipUpdateTransform","renderingToScreen","runners","prerender","emit","projection","context","isLost","lastObjectRendered","cacheParent","enableTempParent","updateTransform","disableTempParent","bind","batch","currentRenderer","start","background","clearBeforeRender","flush","blit","framebuffer","baseTexture","update","postrender","destroy","extension","type","ExtensionType","RendererSystem","name","extensions","add"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/render/ObjectRendererSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { Matrix } from '@pixi/math';\nimport type { IRenderableObject, IRendererRenderOptions } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * system that provides a render function that focussing on rendering Pixi Scene Graph objects\n * to either the main view or to a renderTexture.  Used for Canvas `WebGL` contexts\n * @memberof PIXI\n */\nexport class ObjectRendererSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'objectRenderer',\n    };\n\n    renderer: Renderer;\n\n    /**\n     * Flag if we are rendering to the screen vs renderTexture\n     * @readonly\n     * @default true\n     */\n    renderingToScreen: boolean;\n\n    /**\n     * the last object rendered by the renderer. Useful for other plugins like interaction managers\n     * @readonly\n     */\n    lastObjectRendered: IRenderableObject;\n\n    // renderers scene graph!\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     * @param displayObject - The object to be rendered.\n     * @param options - the options to be passed to the renderer\n     */\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void\n    {\n        const renderer = this.renderer;\n\n        let renderTexture: RenderTexture;\n        let clear: boolean;\n        let transform: Matrix;\n        let skipUpdateTransform: boolean;\n\n        if (options)\n        {\n            renderTexture = options.renderTexture;\n            clear = options.clear;\n            transform = options.transform;\n            skipUpdateTransform = options.skipUpdateTransform;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        renderer.runners.prerender.emit();\n        renderer.emit('prerender');\n\n        // apply a transform at a GPU level\n        renderer.projection.transform = transform;\n\n        // no point rendering if our context has been blown up!\n        if (renderer.context.isLost)\n        {\n            return;\n        }\n\n        if (!renderTexture)\n        {\n            this.lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        renderer.renderTexture.bind(renderTexture);\n        renderer.batch.currentRenderer.start();\n\n        if (clear ?? renderer.background.clearBeforeRender)\n        {\n            renderer.renderTexture.clear();\n        }\n\n        displayObject.render(renderer);\n\n        // apply transform..\n        renderer.batch.currentRenderer.flush();\n\n        if (renderTexture)\n        {\n            if (options.blit)\n            {\n                renderer.framebuffer.blit();\n            }\n\n            renderTexture.baseTexture.update();\n        }\n\n        renderer.runners.postrender.emit();\n\n        // reset transform after render\n        renderer.projection.transform = null;\n\n        renderer.emit('postrender');\n    }\n\n    destroy(): void\n    {\n        // ka pow!\n        this.renderer = null;\n        this.lastObjectRendered = null;\n    }\n}\n\nextensions.add(ObjectRendererSystem);\n"],"mappings":";AAcO,MAAMA,oBAAA,CACb;EAAA;EAuBIC,YAAYC,QAAA,EACZ;IACI,KAAKA,QAAA,GAAWA,QAAA;EACpB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAC,OAAOC,aAAA,EAAkCC,OAAA,EACzC;IACI,MAAMH,QAAA,GAAW,KAAKA,QAAA;IAElB,IAAAI,aAAA,EACAC,KAAA,EACAC,SAAA,EACAC,mBAAA;IAoBJ,IAlBIJ,OAAA,KAEAC,aAAA,GAAgBD,OAAA,CAAQC,aAAA,EACxBC,KAAA,GAAQF,OAAA,CAAQE,KAAA,EAChBC,SAAA,GAAYH,OAAA,CAAQG,SAAA,EACpBC,mBAAA,GAAsBJ,OAAA,CAAQI,mBAAA,GAIlC,KAAKC,iBAAA,GAAoB,CAACJ,aAAA,EAE1BJ,QAAA,CAASS,OAAA,CAAQC,SAAA,CAAUC,IAAA,CAAK,GAChCX,QAAA,CAASW,IAAA,CAAK,WAAW,GAGzBX,QAAA,CAASY,UAAA,CAAWN,SAAA,GAAYA,SAAA,EAG5B,CAAAN,QAAA,CAASa,OAAA,CAAQC,MAAA,EAUrB;MAAA,IALKV,aAAA,KAED,KAAKW,kBAAA,GAAqBb,aAAA,GAG1B,CAACK,mBAAA,EACL;QAEU,MAAAS,WAAA,GAAcd,aAAA,CAAce,gBAAA;QAElCf,aAAA,CAAcgB,eAAA,CAAgB,GAC9BhB,aAAA,CAAciB,iBAAA,CAAkBH,WAAW;MAE/C;MAEShB,QAAA,CAAAI,aAAA,CAAcgB,IAAA,CAAKhB,aAAa,GACzCJ,QAAA,CAASqB,KAAA,CAAMC,eAAA,CAAgBC,KAAA,KAE3BlB,KAAA,IAASL,QAAA,CAASwB,UAAA,CAAWC,iBAAA,KAE7BzB,QAAA,CAASI,aAAA,CAAcC,KAAA,CAAM,GAGjCH,aAAA,CAAcD,MAAA,CAAOD,QAAQ,GAG7BA,QAAA,CAASqB,KAAA,CAAMC,eAAA,CAAgBI,KAAA,CAE3B,GAAAtB,aAAA,KAEID,OAAA,CAAQwB,IAAA,IAER3B,QAAA,CAAS4B,WAAA,CAAYD,IAAA,CAAK,GAG9BvB,aAAA,CAAcyB,WAAA,CAAYC,MAAA,KAG9B9B,QAAA,CAASS,OAAA,CAAQsB,UAAA,CAAWpB,IAAA,CAG5B,GAAAX,QAAA,CAASY,UAAA,CAAWN,SAAA,GAAY,MAEhCN,QAAA,CAASW,IAAA,CAAK,YAAY;IAAA;EAC9B;EAEAqB,QAAA,EACA;IAES,KAAAhC,QAAA,GAAW,MAChB,KAAKe,kBAAA,GAAqB;EAC9B;AACJ;AAtHajB,oBAAA,CAGFmC,SAAA,GAA+B;EAClCC,IAAA,EAAMC,aAAA,CAAcC,cAAA;EACpBC,IAAA,EAAM;AACV;AAkHJC,UAAA,CAAWC,GAAA,CAAIzC,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}