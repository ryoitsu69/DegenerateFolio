{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchTransactionForConfirmations = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst schemas_js_1 = require(\"../schemas.js\");\nconst watch_transaction_by_polling_js_1 = require(\"./watch_transaction_by_polling.js\");\nconst watch_transaction_by_subscription_js_1 = require(\"./watch_transaction_by_subscription.js\");\nfunction watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat) {\n  if ((0, web3_validator_1.isNullish)(transactionReceipt) || (0, web3_validator_1.isNullish)(transactionReceipt.blockHash)) throw new web3_errors_1.TransactionMissingReceiptOrBlockHashError({\n    receipt: transactionReceipt,\n    blockHash: (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),\n    transactionHash: (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, returnFormat)\n  });\n  if (!transactionReceipt.blockNumber) throw new web3_errors_1.TransactionReceiptMissingBlockNumberError({\n    receipt: transactionReceipt\n  });\n  // As we have the receipt, it's the first confirmation that tx is accepted.\n  transactionPromiEvent.emit('confirmation', {\n    confirmations: (0, web3_utils_1.format)({\n      format: 'uint'\n    }, 1, returnFormat),\n    receipt: (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),\n    latestBlockHash: (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionReceipt.blockHash, returnFormat)\n  });\n  // so a subscription for newBlockHeaders can be made instead of polling\n  const provider = web3Context.requestManager.provider;\n  if (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n    (0, watch_transaction_by_subscription_js_1.watchTransactionBySubscription)({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  } else {\n    (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n      web3Context,\n      transactionReceipt,\n      transactionPromiEvent,\n      returnFormat\n    });\n  }\n}\nexports.watchTransactionForConfirmations = watchTransactionForConfirmations;","map":{"version":3,"names":["web3_utils_1","require","web3_validator_1","web3_errors_1","schemas_js_1","watch_transaction_by_polling_js_1","watch_transaction_by_subscription_js_1","watchTransactionForConfirmations","web3Context","transactionPromiEvent","transactionReceipt","transactionHash","returnFormat","isNullish","blockHash","TransactionMissingReceiptOrBlockHashError","receipt","format","blockNumber","TransactionReceiptMissingBlockNumberError","emit","confirmations","transactionReceiptSchema","latestBlockHash","provider","requestManager","supportsSubscriptions","watchTransactionBySubscription","watchTransactionByPolling","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth/src/utils/watch_transaction_for_confirmations.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, Web3BaseProvider, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\n\nimport {\n\tTransactionMissingReceiptOrBlockHashError,\n\tTransactionReceiptMissingBlockNumberError,\n} from 'web3-errors';\nimport { DataFormat } from 'web3-types';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport {\n\twatchTransactionByPolling,\n\tWeb3PromiEventEventTypeBase,\n} from './watch_transaction_by_polling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\n\nexport function watchTransactionForConfirmations<\n\tReturnFormat extends DataFormat,\n\tWeb3PromiEventEventType extends Web3PromiEventEventTypeBase<ReturnFormat>,\n\tResolveType = TransactionReceipt,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventType>,\n\ttransactionReceipt: TransactionReceipt,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tif (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash))\n\t\tthrow new TransactionMissingReceiptOrBlockHashError({\n\t\t\treceipt: transactionReceipt,\n\t\t\tblockHash: format({ format: 'bytes32' }, transactionReceipt?.blockHash, returnFormat),\n\t\t\ttransactionHash: format({ format: 'bytes32' }, transactionHash, returnFormat),\n\t\t});\n\n\tif (!transactionReceipt.blockNumber)\n\t\tthrow new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });\n\n\t// As we have the receipt, it's the first confirmation that tx is accepted.\n\ttransactionPromiEvent.emit('confirmation', {\n\t\tconfirmations: format({ format: 'uint' }, 1, returnFormat),\n\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\tlatestBlockHash: format({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),\n\t});\n\n\t// so a subscription for newBlockHeaders can be made instead of polling\n\tconst provider: Web3BaseProvider = web3Context.requestManager.provider as Web3BaseProvider;\n\tif (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n\t\twatchTransactionBySubscription({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t} else {\n\t\twatchTransactionByPolling({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\treturnFormat,\n\t\t});\n\t}\n}\n"],"mappings":";;;;;;AAkBA,MAAAA,YAAA,GAAAC,OAAA;AACA,MAAAC,gBAAA,GAAAD,OAAA;AAEA,MAAAE,aAAA,GAAAF,OAAA;AAKA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,iCAAA,GAAAJ,OAAA;AAIA,MAAAK,sCAAA,GAAAL,OAAA;AAEA,SAAgBM,gCAAgCA,CAK/CC,WAAyC,EACzCC,qBAA2E,EAC3EC,kBAAsC,EACtCC,eAAsB,EACtBC,YAA0B;EAE1B,IAAI,IAAAV,gBAAA,CAAAW,SAAS,EAACH,kBAAkB,CAAC,IAAI,IAAAR,gBAAA,CAAAW,SAAS,EAACH,kBAAkB,CAACI,SAAS,CAAC,EAC3E,MAAM,IAAIX,aAAA,CAAAY,yCAAyC,CAAC;IACnDC,OAAO,EAAEN,kBAAkB;IAC3BI,SAAS,EAAE,IAAAd,YAAA,CAAAiB,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAS,CAAE,EAAEP,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEI,SAAS,EAAEF,YAAY,CAAC;IACrFD,eAAe,EAAE,IAAAX,YAAA,CAAAiB,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAS,CAAE,EAAEN,eAAe,EAAEC,YAAY;GAC5E,CAAC;EAEH,IAAI,CAACF,kBAAkB,CAACQ,WAAW,EAClC,MAAM,IAAIf,aAAA,CAAAgB,yCAAyC,CAAC;IAAEH,OAAO,EAAEN;EAAkB,CAAE,CAAC;EAErF;EACAD,qBAAqB,CAACW,IAAI,CAAC,cAAc,EAAE;IAC1CC,aAAa,EAAE,IAAArB,YAAA,CAAAiB,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAM,CAAE,EAAE,CAAC,EAAEL,YAAY,CAAC;IAC1DI,OAAO,EAAE,IAAAhB,YAAA,CAAAiB,MAAM,EAACb,YAAA,CAAAkB,wBAAwB,EAAEZ,kBAAkB,EAAEE,YAAY,CAAC;IAC3EW,eAAe,EAAE,IAAAvB,YAAA,CAAAiB,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAS,CAAE,EAAEP,kBAAkB,CAACI,SAAS,EAAEF,YAAY;GACzF,CAAC;EAEF;EACA,MAAMY,QAAQ,GAAqBhB,WAAW,CAACiB,cAAc,CAACD,QAA4B;EAC1F,IAAIA,QAAQ,IAAI,uBAAuB,IAAIA,QAAQ,IAAIA,QAAQ,CAACE,qBAAqB,EAAE,EAAE;IACxF,IAAApB,sCAAA,CAAAqB,8BAA8B,EAAC;MAC9BnB,WAAW;MACXE,kBAAkB;MAClBD,qBAAqB;MACrBG;KACA,CAAC;GACF,MAAM;IACN,IAAAP,iCAAA,CAAAuB,yBAAyB,EAAC;MACzBpB,WAAW;MACXE,kBAAkB;MAClBD,qBAAqB;MACrBG;KACA,CAAC;;AAEJ;AA7CAiB,OAAA,CAAAtB,gCAAA,GAAAA,gCAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}