{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\nconst vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\nfunction accountFromBaseAccount(input) {\n  const {\n    address,\n    pubKey,\n    accountNumber,\n    sequence\n  } = input;\n  const pubkey = (0, proto_signing_1.decodeOptionalPubkey)(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Basic implementation of AccountParser. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\nfunction accountFromAny(input) {\n  const {\n    typeUrl,\n    value\n  } = input;\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        const baseAccount = vesting_1.BaseVestingAccount.decode(value)?.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        const baseAccount = vesting_1.ContinuousVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        const baseAccount = vesting_1.DelayedVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        const baseAccount = vesting_1.PeriodicVestingAccount.decode(value)?.baseVestingAccount?.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    default:\n      throw new Error(`Unsupported type: '${typeUrl}'`);\n  }\n}\nexports.accountFromAny = accountFromAny;","map":{"version":3,"names":["math_1","require","proto_signing_1","utils_1","auth_1","vesting_1","uint64FromProto","input","Uint64","fromString","toString","accountFromBaseAccount","address","pubKey","accountNumber","sequence","pubkey","decodeOptionalPubkey","toNumber","accountFromAny","typeUrl","value","BaseAccount","decode","baseAccount","ModuleAccount","assert","BaseVestingAccount","ContinuousVestingAccount","baseVestingAccount","DelayedVestingAccount","PeriodicVestingAccount","Error","exports"],"sources":["../src/accounts.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,eAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,MAAA,GAAAH,OAAA;AACA,MAAAI,SAAA,GAAAJ,OAAA;AAgBA,SAASK,eAAeA,CAACC,KAAsB;EAC7C,OAAOP,MAAA,CAAAQ,MAAM,CAACC,UAAU,CAACF,KAAK,CAACG,QAAQ,EAAE,CAAC;AAC5C;AAEA,SAASC,sBAAsBA,CAACJ,KAAkB;EAChD,MAAM;IAAEK,OAAO;IAAEC,MAAM;IAAEC,aAAa;IAAEC;EAAQ,CAAE,GAAGR,KAAK;EAC1D,MAAMS,MAAM,GAAG,IAAAd,eAAA,CAAAe,oBAAoB,EAACJ,MAAM,CAAC;EAC3C,OAAO;IACLD,OAAO,EAAEA,OAAO;IAChBI,MAAM,EAAEA,MAAM;IACdF,aAAa,EAAER,eAAe,CAACQ,aAAa,CAAC,CAACI,QAAQ,EAAE;IACxDH,QAAQ,EAAET,eAAe,CAACS,QAAQ,CAAC,CAACG,QAAQ;GAC7C;AACH;AAQA;;;;;AAKA,SAAgBC,cAAcA,CAACZ,KAAU;EACvC,MAAM;IAAEa,OAAO;IAAEC;EAAK,CAAE,GAAGd,KAAK;EAEhC,QAAQa,OAAO;IACb;IAEA,KAAK,kCAAkC;MACrC,OAAOT,sBAAsB,CAACP,MAAA,CAAAkB,WAAW,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;IAC1D,KAAK,oCAAoC;MAAE;QACzC,MAAMG,WAAW,GAAGpB,MAAA,CAAAqB,aAAa,CAACF,MAAM,CAACF,KAAK,CAAC,CAACG,WAAW;QAC3D,IAAArB,OAAA,CAAAuB,MAAM,EAACF,WAAW,CAAC;QACnB,OAAOb,sBAAsB,CAACa,WAAW,CAAC;;IAG5C;IAEA,KAAK,4CAA4C;MAAE;QACjD,MAAMA,WAAW,GAAGnB,SAAA,CAAAsB,kBAAkB,CAACJ,MAAM,CAACF,KAAK,CAAC,EAAEG,WAAW;QACjE,IAAArB,OAAA,CAAAuB,MAAM,EAACF,WAAW,CAAC;QACnB,OAAOb,sBAAsB,CAACa,WAAW,CAAC;;IAE5C,KAAK,kDAAkD;MAAE;QACvD,MAAMA,WAAW,GAAGnB,SAAA,CAAAuB,wBAAwB,CAACL,MAAM,CAACF,KAAK,CAAC,EAAEQ,kBAAkB,EAAEL,WAAW;QAC3F,IAAArB,OAAA,CAAAuB,MAAM,EAACF,WAAW,CAAC;QACnB,OAAOb,sBAAsB,CAACa,WAAW,CAAC;;IAE5C,KAAK,+CAA+C;MAAE;QACpD,MAAMA,WAAW,GAAGnB,SAAA,CAAAyB,qBAAqB,CAACP,MAAM,CAACF,KAAK,CAAC,EAAEQ,kBAAkB,EAAEL,WAAW;QACxF,IAAArB,OAAA,CAAAuB,MAAM,EAACF,WAAW,CAAC;QACnB,OAAOb,sBAAsB,CAACa,WAAW,CAAC;;IAE5C,KAAK,gDAAgD;MAAE;QACrD,MAAMA,WAAW,GAAGnB,SAAA,CAAA0B,sBAAsB,CAACR,MAAM,CAACF,KAAK,CAAC,EAAEQ,kBAAkB,EAAEL,WAAW;QACzF,IAAArB,OAAA,CAAAuB,MAAM,EAACF,WAAW,CAAC;QACnB,OAAOb,sBAAsB,CAACa,WAAW,CAAC;;IAG5C;MACE,MAAM,IAAIQ,KAAK,CAAC,sBAAsBZ,OAAO,GAAG,CAAC;;AAEvD;AAxCAa,OAAA,CAAAd,cAAA,GAAAA,cAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}