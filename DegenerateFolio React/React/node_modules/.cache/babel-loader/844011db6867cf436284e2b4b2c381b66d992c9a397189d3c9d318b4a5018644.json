{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n\n float det=.001,t, boxhit;\n vec3 adv, boxp;\n\n float hash(vec2 p)\n {\n     vec3 p3  = fract(vec3(p.xyx) * .1031);\n     p3 += dot(p3, p3.yzx + 33.33);\n     return fract((p3.x + p3.y) * p3.z);\n }\n\n\n mat2 rot(float a)\n {\n     float s=sin(a), c=cos(a);\n     return mat2(c,s,-s,c);\n }\n\n vec3 path(float t)\n {\n     vec3 p=vec3(vec2(sin(t*.1),cos(t*.05))*10.,t);\n     p.x+=smoothstep(.0,.5,abs(.5-fract(t*.02)))*10.;\n     return p;\n }\n\n float fractal(vec2 p)\n {\n     p=abs(5.-mod(p*.2,10.))-5.;\n     float ot=1000.;\n     for (int i=0; i<7; i++)\n     {\n         p=abs(p)/clamp(p.x*p.y,.25,2.)-1.;\n         if(i>0)ot=min(ot,abs(p.x)+.7*fract(abs(p.y)*.05+t*.05+float(i)*.3));\n\n     }\n     ot=exp(-10.*ot);\n     return ot;\n }\n\n float box(vec3 p, vec3 l)\n {\n     vec3 c=abs(p)-l;\n     return length(max(vec3(0.),c))+min(0.,max(c.x,max(c.y,c.z)));\n }\n\n float de(vec3 p)\n {\n     boxhit=0.;\n     vec3 p2=p-adv;\n     p2.xz*=rot(t*.2);\n     p2.xy*=rot(t*.1);\n     p2.yz*=rot(t*.15);\n     float b=box(p2,vec3(1.));\n     p.xy-=path(p.z).xy;\n     float s=sign(p.y);\n     p.y=-abs(p.y)-3.;\n     p.z=mod(p.z,20.)-10.;\n     for (int i=0; i<5; i++)\n     {\n         p=abs(p)-1.;\n         p.xz*=rot(radians(s*-45.));\n         p.yz*=rot(radians(90.));\n     }\n     float f=-box(p,vec3(5.,5.,10.));\n     float d=min(f,b);\n     if (d==b) boxp=p2, boxhit=1.;\n     return d*.7;\n }\n\n\n vec3 march(vec3 from, vec3 dir)\n {\n     vec3 p,n,g=vec3(0.);\n     float d, td=0.;\n     for (int i=0; i<80; i++)\n     {\n         p=from+td*dir;\n         d=de(p)*(1.-hash(gl_FragCoord.xy+t)*.3);\n         if (d<det && boxhit<.5) break;\n         td+=max(det,abs(d));\n         float f=fractal(p.xy)+fractal(p.xz)+fractal(p.yz);\n         //boxp*=.5;\n         float b=fractal(boxp.xy)+fractal(boxp.xz)+fractal(boxp.yz);\n         vec3 colf=vec3(f*f,f,f*f*f);\n         vec3 colb=vec3(b+.1,b*b+.05,0.);\n         g+=colf/(3.+d*d*2.)*exp(-.0015*td*td)*step(5.,td)/2.*(1.-boxhit);\n         g+=colb/(10.+d*d*20.)*boxhit*.5;\n     }\n     return g;\n }\n\n mat3 lookat(vec3 dir, vec3 up)\n {\n     dir=normalize(dir);vec3 rt=normalize(cross(dir,normalize(up)));\n     return mat3(rt,cross(rt,dir),dir);\n }\n\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n     t=iTime*7.;\n     vec3 from=path(t);\n     adv=path(t+6.+sin(t*.1)*3.);\n     vec3 dir=normalize(vec3(uv,.7));\n     dir=lookat(adv-from,vec3(0.,1.,0.))*dir;\n     vec3 col=march(from, dir);\n     fragColor=vec4(col,1.0);\n }\n\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n\n float det=.001,t, boxhit;\n vec3 adv, boxp;\n\n float hash(vec2 p)\n {\n     vec3 p3  = fract(vec3(p.xyx) * .1031);\n     p3 += dot(p3, p3.yzx + 33.33);\n     return fract((p3.x + p3.y) * p3.z);\n }\n\n\n mat2 rot(float a)\n {\n     float s=sin(a), c=cos(a);\n     return mat2(c,s,-s,c);\n }\n\n vec3 path(float t)\n {\n     vec3 p=vec3(vec2(sin(t*.1),cos(t*.05))*10.,t);\n     p.x+=smoothstep(.0,.5,abs(.5-fract(t*.02)))*10.;\n     return p;\n }\n\n float fractal(vec2 p)\n {\n     p=abs(5.-mod(p*.2,10.))-5.;\n     float ot=1000.;\n     for (int i=0; i<7; i++)\n     {\n         p=abs(p)/clamp(p.x*p.y,.25,2.)-1.;\n         if(i>0)ot=min(ot,abs(p.x)+.7*fract(abs(p.y)*.05+t*.05+float(i)*.3));\n\n     }\n     ot=exp(-10.*ot);\n     return ot;\n }\n\n float box(vec3 p, vec3 l)\n {\n     vec3 c=abs(p)-l;\n     return length(max(vec3(0.),c))+min(0.,max(c.x,max(c.y,c.z)));\n }\n\n float de(vec3 p)\n {\n     boxhit=0.;\n     vec3 p2=p-adv;\n     p2.xz*=rot(t*.2);\n     p2.xy*=rot(t*.1);\n     p2.yz*=rot(t*.15);\n     float b=box(p2,vec3(1.));\n     p.xy-=path(p.z).xy;\n     float s=sign(p.y);\n     p.y=-abs(p.y)-3.;\n     p.z=mod(p.z,20.)-10.;\n     for (int i=0; i<5; i++)\n     {\n         p=abs(p)-1.;\n         p.xz*=rot(radians(s*-45.));\n         p.yz*=rot(radians(90.));\n     }\n     float f=-box(p,vec3(5.,5.,10.));\n     float d=min(f,b);\n     if (d==b) boxp=p2, boxhit=1.;\n     return d*.7;\n }\n\n\n vec3 march(vec3 from, vec3 dir)\n {\n     vec3 p,n,g=vec3(0.);\n     float d, td=0.;\n     for (int i=0; i<80; i++)\n     {\n         p=from+td*dir;\n         d=de(p)*(1.-hash(gl_FragCoord.xy+t)*.3);\n         if (d<det && boxhit<.5) break;\n         td+=max(det,abs(d));\n         float f=fractal(p.xy)+fractal(p.xz)+fractal(p.yz);\n         //boxp*=.5;\n         float b=fractal(boxp.xy)+fractal(boxp.xz)+fractal(boxp.yz);\n         vec3 colf=vec3(f*f,f,f*f*f);\n         vec3 colb=vec3(b+.1,b*b+.05,0.);\n         g+=colf/(3.+d*d*2.)*exp(-.0015*td*td)*step(5.,td)/2.*(1.-boxhit);\n         g+=colb/(10.+d*d*20.)*boxhit*.5;\n     }\n     return g;\n }\n\n mat3 lookat(vec3 dir, vec3 up)\n {\n     dir=normalize(dir);vec3 rt=normalize(cross(dir,normalize(up)));\n     return mat3(rt,cross(rt,dir),dir);\n }\n\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n     t=iTime*7.;\n     vec3 from=path(t);\n     adv=path(t+6.+sin(t*.1)*3.);\n     vec3 dir=normalize(vec3(uv,.7));\n     dir=lookat(adv-from,vec3(0.,1.,0.))*dir;\n     vec3 col=march(from, dir);\n     fragColor=vec4(col,1.0);\n }\n\n `;\n\nroot.render(\n    <>\n<ShadertoyReact fs={fragmentShader} />\n<TodoApp />\n<footer>Â©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzeACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACJT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH;EAAe;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACtCd,OAAA,CAACL,OAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXd,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAlB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}