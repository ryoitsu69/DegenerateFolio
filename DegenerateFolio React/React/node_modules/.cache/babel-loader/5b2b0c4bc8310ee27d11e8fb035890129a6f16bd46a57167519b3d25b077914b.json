{"ast":null,"code":"import { Enum } from './Enum.js';\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\nexport class Result extends Enum {\n  constructor(registry, Ok, Err, value) {\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    super(registry, {\n      Ok,\n      Err\n    }, value);\n  }\n  static with(Types) {\n    return class extends Result {\n      constructor(registry, value) {\n        super(registry, Types.Ok, Types.Err, value);\n      }\n    };\n  }\n  /**\n   * @description Returns the wrapper Err value (if isErr)\n   */\n  get asErr() {\n    if (!this.isErr) {\n      throw new Error('Cannot extract Err value from Ok result, check isErr first');\n    }\n    return this.value;\n  }\n  /**\n   * @description Returns the wrapper Ok value (if isOk)\n   */\n  get asOk() {\n    if (!this.isOk) {\n      throw new Error('Cannot extract Ok value from Err result, check isOk first');\n    }\n    return this.value;\n  }\n  /**\n   * @description Checks if the Result has no value\n   */\n  get isEmpty() {\n    return this.isOk && this.value.isEmpty;\n  }\n  /**\n   * @description Checks if the Result wraps an Err value\n   */\n  get isErr() {\n    return !this.isOk;\n  }\n  /**\n   * @description Checks if the Result wraps an Ok value\n   */\n  get isOk() {\n    return this.index === 0;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType() {\n    const Types = this._toRawStruct();\n    return `Result<${Types.Ok},${Types.Err}>`;\n  }\n}","map":{"version":3,"names":["Enum","Result","constructor","registry","Ok","Err","value","with","Types","asErr","isErr","Error","asOk","isOk","isEmpty","index","toRawType","_toRawStruct"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types-codec/base/Result.js"],"sourcesContent":["import { Enum } from './Enum.js';\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\nexport class Result extends Enum {\n    constructor(registry, Ok, Err, value) {\n        // NOTE This is order-dependent, Ok (with index 0) needs to be first\n        // eslint-disable-next-line sort-keys\n        super(registry, { Ok, Err }, value);\n    }\n    static with(Types) {\n        return class extends Result {\n            constructor(registry, value) {\n                super(registry, Types.Ok, Types.Err, value);\n            }\n        };\n    }\n    /**\n     * @description Returns the wrapper Err value (if isErr)\n     */\n    get asErr() {\n        if (!this.isErr) {\n            throw new Error('Cannot extract Err value from Ok result, check isErr first');\n        }\n        return this.value;\n    }\n    /**\n     * @description Returns the wrapper Ok value (if isOk)\n     */\n    get asOk() {\n        if (!this.isOk) {\n            throw new Error('Cannot extract Ok value from Err result, check isOk first');\n        }\n        return this.value;\n    }\n    /**\n     * @description Checks if the Result has no value\n     */\n    get isEmpty() {\n        return this.isOk && this.value.isEmpty;\n    }\n    /**\n     * @description Checks if the Result wraps an Err value\n     */\n    get isErr() {\n        return !this.isOk;\n    }\n    /**\n     * @description Checks if the Result wraps an Ok value\n     */\n    get isOk() {\n        return this.index === 0;\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    toRawType() {\n        const Types = this._toRawStruct();\n        return `Result<${Types.Ok},${Types.Err}>`;\n    }\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;AAChC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,SAASD,IAAI,CAAC;EAC7BE,WAAWA,CAACC,QAAQ,EAAEC,EAAE,EAAEC,GAAG,EAAEC,KAAK,EAAE;IAClC;IACA;IACA,KAAK,CAACH,QAAQ,EAAE;MAAEC,EAAE;MAAEC;IAAI,CAAC,EAAEC,KAAK,CAAC;EACvC;EACA,OAAOC,IAAIA,CAACC,KAAK,EAAE;IACf,OAAO,cAAcP,MAAM,CAAC;MACxBC,WAAWA,CAACC,QAAQ,EAAEG,KAAK,EAAE;QACzB,KAAK,CAACH,QAAQ,EAAEK,KAAK,CAACJ,EAAE,EAAEI,KAAK,CAACH,GAAG,EAAEC,KAAK,CAAC;MAC/C;IACJ,CAAC;EACL;EACA;AACJ;AACA;EACI,IAAIG,KAAKA,CAAA,EAAG;IACR,IAAI,CAAC,IAAI,CAACC,KAAK,EAAE;MACb,MAAM,IAAIC,KAAK,CAAC,4DAA4D,CAAC;IACjF;IACA,OAAO,IAAI,CAACL,KAAK;EACrB;EACA;AACJ;AACA;EACI,IAAIM,IAAIA,CAAA,EAAG;IACP,IAAI,CAAC,IAAI,CAACC,IAAI,EAAE;MACZ,MAAM,IAAIF,KAAK,CAAC,2DAA2D,CAAC;IAChF;IACA,OAAO,IAAI,CAACL,KAAK;EACrB;EACA;AACJ;AACA;EACI,IAAIQ,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACD,IAAI,IAAI,IAAI,CAACP,KAAK,CAACQ,OAAO;EAC1C;EACA;AACJ;AACA;EACI,IAAIJ,KAAKA,CAAA,EAAG;IACR,OAAO,CAAC,IAAI,CAACG,IAAI;EACrB;EACA;AACJ;AACA;EACI,IAAIA,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACE,KAAK,KAAK,CAAC;EAC3B;EACA;AACJ;AACA;EACIC,SAASA,CAAA,EAAG;IACR,MAAMR,KAAK,GAAG,IAAI,CAACS,YAAY,CAAC,CAAC;IACjC,OAAQ,UAAST,KAAK,CAACJ,EAAG,IAAGI,KAAK,CAACH,GAAI,GAAE;EAC7C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}