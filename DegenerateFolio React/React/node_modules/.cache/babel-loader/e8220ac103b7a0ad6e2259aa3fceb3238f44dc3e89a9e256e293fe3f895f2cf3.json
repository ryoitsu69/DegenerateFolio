{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toType = exports.ecrecover = exports.bigIntToUnpaddedUint8Array = exports.bigIntToHex = exports.unpadUint8Array = exports.stripZeros = exports.setLengthLeft = exports.assertIsUint8Array = exports.zeros = exports.bigIntToUint8Array = exports.uint8ArrayToBigInt = exports.toUint8Array = exports.intToUint8Array = exports.padToEven = exports.parseGethGenesis = exports.stripHexPrefix = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst constants_js_1 = require(\"../tx/constants.js\");\nconst enums_js_1 = require(\"./enums.js\");\nconst types_js_1 = require(\"./types.js\");\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = str => {\n  if (typeof str !== 'string') throw new Error(\"[stripHexPrefix] input must be type 'string', received \".concat(typeof str));\n  return (0, web3_validator_1.isHexPrefixed)(str) ? str.slice(2) : str;\n};\nexports.stripHexPrefix = stripHexPrefix;\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n  if (!nonce || nonce === '0x0') {\n    return '0x0000000000000000';\n  }\n  if ((0, web3_validator_1.isHexPrefixed)(nonce)) {\n    return \"0x\".concat((0, exports.stripHexPrefix)(nonce).padStart(16, '0'));\n  }\n  return \"0x\".concat(nonce.padStart(16, '0'));\n}\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(\"Received an invalid integer type: \".concat(i));\n  }\n  return \"0x\".concat(i.toString(16));\n};\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json) {\n  let mergeForkIdPostMerge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var _a, _b;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {\n    name,\n    config,\n    difficulty,\n    mixHash,\n    gasLimit,\n    coinbase,\n    baseFeePerGas\n  } = json;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  let {\n    extraData,\n    timestamp,\n    nonce\n  } = json;\n  const genesisTimestamp = Number(timestamp);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const {\n    chainId\n  } = config;\n  // geth is not strictly putting empty fields with a 0x prefix\n  if (extraData === '') {\n    extraData = '0x';\n  }\n  // geth may use number for timestamp\n  if (!(0, web3_validator_1.isHexPrefixed)(timestamp)) {\n    // eslint-disable-next-line radix\n    timestamp = intToHex(parseInt(timestamp));\n  }\n  // geth may not give us a nonce strictly formatted to an 8 byte hex string\n  if (nonce.length !== 18) {\n    nonce = formatNonce(nonce);\n  }\n  // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n  // but have different configuration parameters in geth genesis parameters\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (config.eip155Block !== config.eip158Block) {\n    throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n  }\n  const params = {\n    name,\n    chainId,\n    networkId: chainId,\n    genesis: {\n      timestamp,\n      // eslint-disable-next-line radix\n      gasLimit: parseInt(gasLimit),\n      // eslint-disable-next-line radix\n      difficulty: parseInt(difficulty),\n      nonce,\n      extraData,\n      mixHash,\n      coinbase,\n      baseFeePerGas\n    },\n    hardfork: undefined,\n    hardforks: [],\n    bootstrapNodes: [],\n    consensus:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config.clique !== undefined ? {\n      type: 'poa',\n      algorithm: 'clique',\n      clique: {\n        // The recent geth genesis seems to be using blockperiodseconds\n        // and epochlength for clique specification\n        // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n        period: (_a = config.clique.period) !== null && _a !== void 0 ? _a : config.clique.blockperiodseconds,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n        epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength\n      }\n    } : {\n      type: 'pow',\n      algorithm: 'ethash',\n      ethash: {}\n    }\n  };\n  const forkMap = {\n    [enums_js_1.Hardfork.Homestead]: {\n      name: 'homesteadBlock'\n    },\n    [enums_js_1.Hardfork.Dao]: {\n      name: 'daoForkBlock'\n    },\n    [enums_js_1.Hardfork.TangerineWhistle]: {\n      name: 'eip150Block'\n    },\n    [enums_js_1.Hardfork.SpuriousDragon]: {\n      name: 'eip155Block'\n    },\n    [enums_js_1.Hardfork.Byzantium]: {\n      name: 'byzantiumBlock'\n    },\n    [enums_js_1.Hardfork.Constantinople]: {\n      name: 'constantinopleBlock'\n    },\n    [enums_js_1.Hardfork.Petersburg]: {\n      name: 'petersburgBlock'\n    },\n    [enums_js_1.Hardfork.Istanbul]: {\n      name: 'istanbulBlock'\n    },\n    [enums_js_1.Hardfork.MuirGlacier]: {\n      name: 'muirGlacierBlock'\n    },\n    [enums_js_1.Hardfork.Berlin]: {\n      name: 'berlinBlock'\n    },\n    [enums_js_1.Hardfork.London]: {\n      name: 'londonBlock'\n    },\n    [enums_js_1.Hardfork.MergeForkIdTransition]: {\n      name: 'mergeForkBlock',\n      postMerge: mergeForkIdPostMerge\n    },\n    [enums_js_1.Hardfork.Shanghai]: {\n      name: 'shanghaiTime',\n      postMerge: true,\n      isTimestamp: true\n    },\n    [enums_js_1.Hardfork.ShardingForkDev]: {\n      name: 'shardingForkTime',\n      postMerge: true,\n      isTimestamp: true\n    }\n  };\n  // forkMapRev is the map from config field name to Hardfork\n  const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n    acc[forkMap[elem].name] = elem;\n    return acc;\n  }, {});\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  const configHardforkNames = Object.keys(config).filter(\n  // eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\n  key => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n  params.hardforks = configHardforkNames.map(nameBlock => ({\n    name: forkMapRev[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    block:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true ||\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] !== 'number' ?\n    // eslint-disable-next-line no-null/no-null\n    null :\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock],\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    timestamp:\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    forkMap[forkMapRev[nameBlock]].isTimestamp === true &&\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    typeof config[nameBlock] === 'number' ?\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    config[nameBlock] : undefined\n  }))\n  // eslint-disable-next-line no-null/no-null\n  .filter(fork => fork.block !== null || fork.timestamp !== undefined);\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n    return ((_a = a.block) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b.block) !== null && _b !== void 0 ? _b : Infinity);\n  });\n  params.hardforks.sort((a, b) => {\n    var _a, _b;\n    return ((_a = a.timestamp) !== null && _a !== void 0 ? _a : genesisTimestamp) - ((_b = b.timestamp) !== null && _b !== void 0 ? _b : genesisTimestamp);\n  });\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  if (config.terminalTotalDifficulty !== undefined) {\n    // Following points need to be considered for placement of merge hf\n    // - Merge hardfork can't be placed at genesis\n    // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n    // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n    //   necessary for e.g. withdrawals\n    const mergeConfig = {\n      name: enums_js_1.Hardfork.Merge,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n      ttd: config.terminalTotalDifficulty,\n      // eslint-disable-next-line no-null/no-null\n      block: null\n    };\n    // Merge hardfork has to be placed before first hardfork that is dependent on merge\n    const postMergeIndex = params.hardforks.findIndex(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    hf => {\n      var _a;\n      return ((_a = forkMap[hf.name]) === null || _a === void 0 ? void 0 : _a.postMerge) === true;\n    });\n    if (postMergeIndex !== -1) {\n      params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n    } else {\n      params.hardforks.push(mergeConfig);\n    }\n  }\n  const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n  params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;\n  params.hardforks.unshift({\n    name: enums_js_1.Hardfork.Chainstart,\n    block: 0\n  });\n  return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n  try {\n    if (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n      throw new Error('Invalid format, expected geth genesis fields missing');\n    }\n    if (name !== undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n      json.name = name;\n    }\n    return parseGethParams(json, mergeForkIdPostMerge);\n  } catch (e) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n    throw new Error(\"Error parsing parameters file: \".concat(e.message));\n  }\n}\nexports.parseGethGenesis = parseGethGenesis;\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n  let a = value;\n  if (typeof a !== 'string') {\n    throw new Error(\"[padToEven] value must be type 'string', received \".concat(typeof a));\n  }\n  if (a.length % 2) a = \"0\".concat(a);\n  return a;\n}\nexports.padToEven = padToEven;\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */\nconst intToUint8Array = function (i) {\n  const hex = intToHex(i);\n  return (0, web3_utils_1.hexToBytes)(\"0x\".concat(padToEven(hex.slice(2))));\n};\nexports.intToUint8Array = intToUint8Array;\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */\nconst toUint8Array = function (v) {\n  var _a;\n  // eslint-disable-next-line no-null/no-null\n  if (v === null || v === undefined) {\n    return new Uint8Array();\n  }\n  if (v instanceof Uint8Array) {\n    return v;\n  }\n  if (((_a = v === null || v === void 0 ? void 0 : v.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'Uint8Array') {\n    return Uint8Array.from(v);\n  }\n  if (Array.isArray(v)) {\n    return Uint8Array.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, web3_validator_1.isHexString)(v)) {\n      throw new Error(\"Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: \".concat(v));\n    }\n    return (0, web3_utils_1.hexToBytes)(padToEven((0, exports.stripHexPrefix)(v)));\n  }\n  if (typeof v === 'number') {\n    return (0, exports.toUint8Array)((0, web3_utils_1.numberToHex)(v));\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(\"Cannot convert negative bigint to Uint8Array. Given: \".concat(v));\n    }\n    let n = v.toString(16);\n    if (n.length % 2) n = \"0\".concat(n);\n    return (0, exports.toUint8Array)(\"0x\".concat(n));\n  }\n  if (v.toArray) {\n    // converts a BN to a Uint8Array\n    return Uint8Array.from(v.toArray());\n  }\n  throw new Error('invalid type');\n};\nexports.toUint8Array = toUint8Array;\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */\nfunction uint8ArrayToBigInt(buf) {\n  const hex = (0, web3_utils_1.bytesToHex)(buf);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n}\nexports.uint8ArrayToBigInt = uint8ArrayToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */\nfunction bigIntToUint8Array(num) {\n  return (0, exports.toUint8Array)(\"0x\".concat(num.toString(16)));\n}\nexports.bigIntToUint8Array = bigIntToUint8Array;\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */\nconst zeros = function (bytes) {\n  return new Uint8Array(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */\nconst setLength = function (msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      buf.set(msg);\n      return buf;\n    }\n    return msg.subarray(0, length);\n  }\n  if (msg.length < length) {\n    buf.set(msg, length - msg.length);\n    return buf;\n  }\n  return msg.subarray(-length);\n};\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */\nfunction assertIsUint8Array(input) {\n  if (!(0, web3_utils_1.isUint8Array)(input)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    const msg = \"This method only supports Uint8Array but input was: \".concat(input);\n    throw new Error(msg);\n  }\n}\nexports.assertIsUint8Array = assertIsUint8Array;\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */\nconst setLengthLeft = function (msg, length) {\n  assertIsUint8Array(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */\nfunction stripZeros(a) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n  let first = a[0];\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n  while (a.length > 0 && first.toString() === '0') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n    a = a.slice(1);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n    first = a[0];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return a;\n}\nexports.stripZeros = stripZeros;\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */\nconst unpadUint8Array = function (a) {\n  assertIsUint8Array(a);\n  return stripZeros(a);\n};\nexports.unpadUint8Array = unpadUint8Array;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = num => \"0x\".concat(num.toString(16));\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedUint8Array(value) {\n  return (0, exports.unpadUint8Array)(bigIntToUint8Array(value));\n}\nexports.bigIntToUnpaddedUint8Array = bigIntToUnpaddedUint8Array;\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = new constants_js_1.secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);\n  return senderPubKey.slice(1);\n};\nexports.ecrecover = ecrecover;\nfunction toType(input, outputType) {\n  // eslint-disable-next-line no-null/no-null\n  if (input === null) {\n    // eslint-disable-next-line no-null/no-null\n    return null;\n  }\n  if (input === undefined) {\n    return undefined;\n  }\n  if (typeof input === 'string' && !(0, web3_validator_1.isHexString)(input)) {\n    throw new Error(\"A string must be provided with a 0x-prefix, given: \".concat(input));\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n  }\n  const output = (0, exports.toUint8Array)(input);\n  switch (outputType) {\n    case types_js_1.TypeOutput.Uint8Array:\n      return output;\n    case types_js_1.TypeOutput.BigInt:\n      return uint8ArrayToBigInt(output);\n    case types_js_1.TypeOutput.Number:\n      {\n        const bigInt = uint8ArrayToBigInt(output);\n        if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n          throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n        }\n        return Number(bigInt);\n      }\n    case types_js_1.TypeOutput.PrefixedHexString:\n      return (0, web3_utils_1.bytesToHex)(output);\n    default:\n      throw new Error('unknown outputType');\n  }\n}\nexports.toType = toType;","map":{"version":3,"names":["web3_validator_1","require","web3_utils_1","constants_js_1","enums_js_1","types_js_1","stripHexPrefix","str","Error","concat","isHexPrefixed","slice","exports","formatNonce","nonce","padStart","intToHex","i","Number","isSafeInteger","toString","parseGethParams","json","mergeForkIdPostMerge","arguments","length","undefined","name","config","difficulty","mixHash","gasLimit","coinbase","baseFeePerGas","extraData","timestamp","genesisTimestamp","chainId","parseInt","eip155Block","eip158Block","params","networkId","genesis","hardfork","hardforks","bootstrapNodes","consensus","clique","type","algorithm","period","_a","blockperiodseconds","epoch","_b","epochlength","ethash","forkMap","Hardfork","Homestead","Dao","TangerineWhistle","SpuriousDragon","Byzantium","Constantinople","Petersburg","Istanbul","MuirGlacier","Berlin","London","MergeForkIdTransition","postMerge","Shanghai","isTimestamp","ShardingForkDev","forkMapRev","Object","keys","reduce","acc","elem","configHardforkNames","filter","key","map","nameBlock","block","fork","sort","a","b","Infinity","terminalTotalDifficulty","mergeConfig","Merge","ttd","postMergeIndex","findIndex","hf","splice","push","latestHardfork","unshift","Chainstart","parseGethGenesis","some","field","e","message","padToEven","value","intToUint8Array","hex","hexToBytes","toUint8Array","v","Uint8Array","constructor","from","Array","isArray","isHexString","numberToHex","BigInt","n","toArray","uint8ArrayToBigInt","buf","bytesToHex","bigIntToUint8Array","num","zeros","bytes","fill","setLength","msg","right","set","subarray","assertIsUint8Array","input","isUint8Array","setLengthLeft","stripZeros","first","unpadUint8Array","bigIntToHex","bigIntToUnpaddedUint8Array","calculateSigRecovery","isValidSigRecovery","recovery","ecrecover","msgHash","r","s","senderPubKey","secp256k1","Signature","addRecoveryBit","recoverPublicKey","toRawBytes","toType","outputType","output","TypeOutput","bigInt","MAX_SAFE_INTEGER","PrefixedHexString"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-accounts/src/common/utils.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isHexPrefixed, isHexString } from 'web3-validator';\nimport { bytesToHex, hexToBytes, isUint8Array, numberToHex } from 'web3-utils';\nimport { secp256k1 } from '../tx/constants.js';\nimport { Hardfork } from './enums.js';\nimport { ToBytesInputTypes, TypeOutput, TypeOutputReturnType } from './types.js';\n\ntype ConfigHardfork =\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t| { name: string; block: null; timestamp: number }\n\t| { name: string; block: number; timestamp?: number };\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n\tif (typeof str !== 'string')\n\t\tthrow new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n\n\treturn isHexPrefixed(str) ? str.slice(2) : str;\n};\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce: string): string {\n\tif (!nonce || nonce === '0x0') {\n\t\treturn '0x0000000000000000';\n\t}\n\tif (isHexPrefixed(nonce)) {\n\t\treturn `0x${stripHexPrefix(nonce).padStart(16, '0')}`;\n\t}\n\treturn `0x${nonce.padStart(16, '0')}`;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i: number) {\n\tif (!Number.isSafeInteger(i) || i < 0) {\n\t\tthrow new Error(`Received an invalid integer type: ${i}`);\n\t}\n\treturn `0x${i.toString(16)}`;\n};\n\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json: any, mergeForkIdPostMerge = true) {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst {\n\t\tname,\n\t\tconfig,\n\t\tdifficulty,\n\t\tmixHash,\n\t\tgasLimit,\n\t\tcoinbase,\n\t\tbaseFeePerGas,\n\t}: {\n\t\tname: string;\n\t\tconfig: any;\n\t\tdifficulty: string;\n\t\tmixHash: string;\n\t\tgasLimit: string;\n\t\tcoinbase: string;\n\t\tbaseFeePerGas: string;\n\t} = json;\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tlet { extraData, timestamp, nonce }: { extraData: string; timestamp: string; nonce: string } =\n\t\tjson;\n\tconst genesisTimestamp = Number(timestamp);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst { chainId }: { chainId: number } = config;\n\n\t// geth is not strictly putting empty fields with a 0x prefix\n\tif (extraData === '') {\n\t\textraData = '0x';\n\t}\n\t// geth may use number for timestamp\n\tif (!isHexPrefixed(timestamp)) {\n\t\t// eslint-disable-next-line radix\n\t\ttimestamp = intToHex(parseInt(timestamp));\n\t}\n\t// geth may not give us a nonce strictly formatted to an 8 byte hex string\n\tif (nonce.length !== 18) {\n\t\tnonce = formatNonce(nonce);\n\t}\n\n\t// EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n\t// but have different configuration parameters in geth genesis parameters\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.eip155Block !== config.eip158Block) {\n\t\tthrow new Error(\n\t\t\t'EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork',\n\t\t);\n\t}\n\n\tconst params = {\n\t\tname,\n\t\tchainId,\n\t\tnetworkId: chainId,\n\t\tgenesis: {\n\t\t\ttimestamp,\n\t\t\t// eslint-disable-next-line radix\n\t\t\tgasLimit: parseInt(gasLimit), // geth gasLimit and difficulty are hex strings while ours are `number`s\n\t\t\t// eslint-disable-next-line radix\n\t\t\tdifficulty: parseInt(difficulty),\n\t\t\tnonce,\n\t\t\textraData,\n\t\t\tmixHash,\n\t\t\tcoinbase,\n\t\t\tbaseFeePerGas,\n\t\t},\n\t\thardfork: undefined as string | undefined,\n\t\thardforks: [] as ConfigHardfork[],\n\t\tbootstrapNodes: [],\n\t\tconsensus:\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tconfig.clique !== undefined\n\t\t\t\t? {\n\t\t\t\t\t\ttype: 'poa',\n\t\t\t\t\t\talgorithm: 'clique',\n\t\t\t\t\t\tclique: {\n\t\t\t\t\t\t\t// The recent geth genesis seems to be using blockperiodseconds\n\t\t\t\t\t\t\t// and epochlength for clique specification\n\t\t\t\t\t\t\t// see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tperiod: config.clique.period ?? config.clique.blockperiodseconds,\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\t\t\tepoch: config.clique.epoch ?? config.clique.epochlength,\n\t\t\t\t\t\t},\n\t\t\t\t  }\n\t\t\t\t: {\n\t\t\t\t\t\ttype: 'pow',\n\t\t\t\t\t\talgorithm: 'ethash',\n\t\t\t\t\t\tethash: {},\n\t\t\t\t  },\n\t};\n\n\tconst forkMap: { [key: string]: { name: string; postMerge?: boolean; isTimestamp?: boolean } } =\n\t\t{\n\t\t\t[Hardfork.Homestead]: { name: 'homesteadBlock' },\n\t\t\t[Hardfork.Dao]: { name: 'daoForkBlock' },\n\t\t\t[Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n\t\t\t[Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n\t\t\t[Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n\t\t\t[Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n\t\t\t[Hardfork.Petersburg]: { name: 'petersburgBlock' },\n\t\t\t[Hardfork.Istanbul]: { name: 'istanbulBlock' },\n\t\t\t[Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n\t\t\t[Hardfork.Berlin]: { name: 'berlinBlock' },\n\t\t\t[Hardfork.London]: { name: 'londonBlock' },\n\t\t\t[Hardfork.MergeForkIdTransition]: {\n\t\t\t\tname: 'mergeForkBlock',\n\t\t\t\tpostMerge: mergeForkIdPostMerge,\n\t\t\t},\n\t\t\t[Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n\t\t\t[Hardfork.ShardingForkDev]: {\n\t\t\t\tname: 'shardingForkTime',\n\t\t\t\tpostMerge: true,\n\t\t\t\tisTimestamp: true,\n\t\t\t},\n\t\t};\n\n\t// forkMapRev is the map from config field name to Hardfork\n\tconst forkMapRev = Object.keys(forkMap).reduce<{ [key: string]: string }>((acc, elem) => {\n\t\tacc[forkMap[elem].name] = elem;\n\t\treturn acc;\n\t}, {});\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\tconst configHardforkNames = Object.keys(config).filter(\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access\n\t\tkey => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null,\n\t);\n\n\tparams.hardforks = configHardforkNames\n\t\t.map(nameBlock => ({\n\t\t\tname: forkMapRev[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tblock:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true ||\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] !== 'number'\n\t\t\t\t\t? // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null\n\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock],\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\ttimestamp:\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tforkMap[forkMapRev[nameBlock]].isTimestamp === true &&\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\ttypeof config[nameBlock] === 'number'\n\t\t\t\t\t? // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\t  config[nameBlock]\n\t\t\t\t\t: undefined,\n\t\t}))\n\t\t// eslint-disable-next-line no-null/no-null\n\t\t.filter(fork => fork.block !== null || fork.timestamp !== undefined) as ConfigHardfork[];\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) => (a.block ?? Infinity) - (b.block ?? Infinity),\n\t);\n\n\tparams.hardforks.sort(\n\t\t(a: ConfigHardfork, b: ConfigHardfork) =>\n\t\t\t(a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp),\n\t);\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\tif (config.terminalTotalDifficulty !== undefined) {\n\t\t// Following points need to be considered for placement of merge hf\n\t\t// - Merge hardfork can't be placed at genesis\n\t\t// - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n\t\t// - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n\t\t//   necessary for e.g. withdrawals\n\t\tconst mergeConfig = {\n\t\t\tname: Hardfork.Merge,\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\tttd: config.terminalTotalDifficulty,\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblock: null,\n\t\t};\n\n\t\t// Merge hardfork has to be placed before first hardfork that is dependent on merge\n\t\tconst postMergeIndex = params.hardforks.findIndex(\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t(hf: any) => forkMap[hf.name]?.postMerge === true,\n\t\t);\n\t\tif (postMergeIndex !== -1) {\n\t\t\tparams.hardforks.splice(postMergeIndex, 0, mergeConfig as unknown as ConfigHardfork);\n\t\t} else {\n\t\t\tparams.hardforks.push(mergeConfig as unknown as ConfigHardfork);\n\t\t}\n\t}\n\n\tconst latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n\tparams.hardfork = latestHardfork?.name;\n\tparams.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });\n\n\treturn params;\n}\n\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nexport function parseGethGenesis(json: any, name?: string, mergeForkIdPostMerge?: boolean) {\n\ttry {\n\t\tif (['config', 'difficulty', 'gasLimit', 'alloc'].some(field => !(field in json))) {\n\t\t\tthrow new Error('Invalid format, expected geth genesis fields missing');\n\t\t}\n\t\tif (name !== undefined) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-param-reassign\n\t\t\tjson.name = name;\n\t\t}\n\t\treturn parseGethParams(json, mergeForkIdPostMerge);\n\t} catch (e: any) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Error parsing parameters file: ${e.message}`);\n\t}\n}\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n\tlet a = value;\n\n\tif (typeof a !== 'string') {\n\t\tthrow new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n\t}\n\n\tif (a.length % 2) a = `0${a}`;\n\n\treturn a;\n}\n\n/**\n * Converts an `Number` to a `Uint8Array`\n * @param {Number} i\n * @return {Uint8Array}\n */\nexport const intToUint8Array = function (i: number) {\n\tconst hex = intToHex(i);\n\treturn hexToBytes(`0x${padToEven(hex.slice(2))}`);\n};\n\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Uint8Array` `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toUint8Array()` method.\n * @param v the value\n */\nexport const toUint8Array = function (v: ToBytesInputTypes): Uint8Array {\n\t// eslint-disable-next-line no-null/no-null\n\tif (v === null || v === undefined) {\n\t\treturn new Uint8Array();\n\t}\n\n\tif (v instanceof Uint8Array) {\n\t\treturn v;\n\t}\n\n\tif (v?.constructor?.name === 'Uint8Array') {\n\t\treturn Uint8Array.from(v as unknown as Uint8Array);\n\t}\n\n\tif (Array.isArray(v)) {\n\t\treturn Uint8Array.from(v);\n\t}\n\n\tif (typeof v === 'string') {\n\t\tif (!isHexString(v)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v}`,\n\t\t\t);\n\t\t}\n\t\treturn hexToBytes(padToEven(stripHexPrefix(v)));\n\t}\n\n\tif (typeof v === 'number') {\n\t\treturn toUint8Array(numberToHex(v));\n\t}\n\n\tif (typeof v === 'bigint') {\n\t\tif (v < BigInt(0)) {\n\t\t\tthrow new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n\t\t}\n\t\tlet n = v.toString(16);\n\t\tif (n.length % 2) n = `0${n}`;\n\t\treturn toUint8Array(`0x${n}`);\n\t}\n\n\tif (v.toArray) {\n\t\t// converts a BN to a Uint8Array\n\t\treturn Uint8Array.from(v.toArray());\n\t}\n\n\tthrow new Error('invalid type');\n};\n\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n */\nexport function uint8ArrayToBigInt(buf: Uint8Array) {\n\tconst hex = bytesToHex(buf);\n\tif (hex === '0x') {\n\t\treturn BigInt(0);\n\t}\n\treturn BigInt(hex);\n}\n\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n */\nexport function bigIntToUint8Array(num: bigint) {\n\treturn toUint8Array(`0x${num.toString(16)}`);\n}\n\n/**\n * Returns a Uint8Array filled with 0s.\n * @param bytes the number of bytes the Uint8Array should be\n */\nexport const zeros = function (bytes: number): Uint8Array {\n\treturn new Uint8Array(bytes).fill(0);\n};\n\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Uint8Array)\n */\nconst setLength = function (msg: Uint8Array, length: number, right: boolean) {\n\tconst buf = zeros(length);\n\tif (right) {\n\t\tif (msg.length < length) {\n\t\t\tbuf.set(msg);\n\t\t\treturn buf;\n\t\t}\n\t\treturn msg.subarray(0, length);\n\t}\n\tif (msg.length < length) {\n\t\tbuf.set(msg, length - msg.length);\n\t\treturn buf;\n\t}\n\treturn msg.subarray(-length);\n};\n\n/**\n * Throws if input is not a Uint8Array\n * @param {Uint8Array} input value to check\n */\nexport function assertIsUint8Array(input: unknown): asserts input is Uint8Array {\n\tif (!isUint8Array(input)) {\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tconst msg = `This method only supports Uint8Array but input was: ${input}`;\n\t\tthrow new Error(msg);\n\t}\n}\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Uint8Array)\n * @param length the number of bytes the output should be\n * @return (Uint8Array)\n */\nexport const setLengthLeft = function (msg: Uint8Array, length: number) {\n\tassertIsUint8Array(msg);\n\treturn setLength(msg, length, false);\n};\n\n/**\n * Trims leading zeros from a `Uint8Array`, `String` or `Number[]`.\n * @param a (Uint8Array|Array|String)\n * @return (Uint8Array|Array|String)\n */\nexport function stripZeros<T extends Uint8Array | number[] | string>(a: T): T {\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\tlet first = a[0];\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\twhile (a.length > 0 && first.toString() === '0') {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-call, no-param-reassign\n\t\ta = a.slice(1) as T;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, prefer-destructuring, @typescript-eslint/no-unsafe-member-access\n\t\tfirst = a[0];\n\t}\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\treturn a;\n}\n\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param a (Uint8Array)\n * @return (Uint8Array)\n */\nexport const unpadUint8Array = function (a: Uint8Array): Uint8Array {\n\tassertIsUint8Array(a);\n\treturn stripZeros(a);\n};\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nexport const bigIntToHex = (num: bigint) => `0x${num.toString(16)}`;\n\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bigIntToUnpaddedUint8Array(value: bigint): Uint8Array {\n\treturn unpadUint8Array(bigIntToUint8Array(value));\n}\n\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n\tif (v === BigInt(0) || v === BigInt(1)) return v;\n\n\tif (chainId === undefined) {\n\t\treturn v - BigInt(27);\n\t}\n\treturn v - (chainId * BigInt(2) + BigInt(35));\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n\treturn recovery === BigInt(0) || recovery === BigInt(1);\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n\tmsgHash: Uint8Array,\n\tv: bigint,\n\tr: Uint8Array,\n\ts: Uint8Array,\n\tchainId?: bigint,\n): Uint8Array {\n\tconst recovery = calculateSigRecovery(v, chainId);\n\tif (!isValidSigRecovery(recovery)) {\n\t\tthrow new Error('Invalid signature v value');\n\t}\n\n\tconst senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt(r), uint8ArrayToBigInt(s))\n\t\t.addRecoveryBit(Number(recovery))\n\t\t.recoverPublicKey(msgHash)\n\t\t.toRawBytes(false);\n\treturn senderPubKey.slice(1);\n};\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null;\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined;\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n): TypeOutputReturnType[T];\nexport function toType<T extends TypeOutput>(\n\tinput: ToBytesInputTypes,\n\toutputType: T,\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n): TypeOutputReturnType[T] | undefined | null {\n\t// eslint-disable-next-line no-null/no-null\n\tif (input === null) {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\tif (input === undefined) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof input === 'string' && !isHexString(input)) {\n\t\tthrow new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n\t} else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n\t\tthrow new Error(\n\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)',\n\t\t);\n\t}\n\n\tconst output = toUint8Array(input);\n\n\tswitch (outputType) {\n\t\tcase TypeOutput.Uint8Array:\n\t\t\treturn output as TypeOutputReturnType[T];\n\t\tcase TypeOutput.BigInt:\n\t\t\treturn uint8ArrayToBigInt(output) as TypeOutputReturnType[T];\n\t\tcase TypeOutput.Number: {\n\t\t\tconst bigInt = uint8ArrayToBigInt(output);\n\t\t\tif (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)',\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn Number(bigInt) as TypeOutputReturnType[T];\n\t\t}\n\t\tcase TypeOutput.PrefixedHexString:\n\t\t\treturn bytesToHex(output) as TypeOutputReturnType[T];\n\t\tdefault:\n\t\t\tthrow new Error('unknown outputType');\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}