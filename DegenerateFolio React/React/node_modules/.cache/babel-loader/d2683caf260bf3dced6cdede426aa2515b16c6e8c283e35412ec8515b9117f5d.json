{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firstEvent = exports.toListPromise = exports.fromListPromise = void 0;\nconst xstream_1 = require(\"xstream\");\n/**\n * Emits one event for each list element as soon as the promise resolves\n */\nfunction fromListPromise(promise) {\n  const producer = {\n    start: listener => {\n      // the code in `start` runs as soon as anyone listens to the stream\n      promise.then(iterable => {\n        for (const element of iterable) {\n          listener.next(element);\n        }\n        listener.complete();\n      }).catch(error => listener.error(error));\n    },\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    stop: () => {}\n  };\n  return xstream_1.Stream.create(producer);\n}\nexports.fromListPromise = fromListPromise;\n/**\n * Listens to stream and collects events. When `count` events are collected,\n * the promise resolves with an array of events.\n *\n * Rejects if stream completes before `count` events are collected.\n */\nasync function toListPromise(stream, count) {\n  return new Promise((resolve, reject) => {\n    if (count === 0) {\n      resolve([]);\n      return;\n    }\n    const events = new Array();\n    // take() unsubscribes from source stream automatically\n    stream.take(count).subscribe({\n      next: event => {\n        events.push(event);\n        if (events.length === count) {\n          resolve(events);\n        }\n      },\n      complete: () => {\n        reject(`Stream completed before all events could be collected. ` + `Collected ${events.length}, expected ${count}`);\n      },\n      error: error => reject(error)\n    });\n  });\n}\nexports.toListPromise = toListPromise;\n/**\n * Listens to stream, collects one event and revolves.\n *\n * Rejects if stream completes before one event was fired.\n */\nasync function firstEvent(stream) {\n  return (await toListPromise(stream, 1))[0];\n}\nexports.firstEvent = firstEvent;","map":{"version":3,"names":["xstream_1","require","fromListPromise","promise","producer","start","listener","then","iterable","element","next","complete","catch","error","stop","Stream","create","exports","toListPromise","stream","count","Promise","resolve","reject","events","Array","take","subscribe","event","push","length","firstEvent"],"sources":["../src/promise.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAEA;;;AAGA,SAAgBC,eAAeA,CAAIC,OAA6B;EAC9D,MAAMC,QAAQ,GAAgB;IAC5BC,KAAK,EAAGC,QAAQ,IAAI;MAClB;MACAH,OAAO,CACJI,IAAI,CAAEC,QAAQ,IAAI;QACjB,KAAK,MAAMC,OAAO,IAAID,QAAQ,EAAE;UAC9BF,QAAQ,CAACI,IAAI,CAACD,OAAO,CAAC;;QAExBH,QAAQ,CAACK,QAAQ,EAAE;MACrB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKP,QAAQ,CAACO,KAAK,CAACA,KAAK,CAAC,CAAC;IAC5C,CAAC;IACD;IACAC,IAAI,EAAEA,CAAA,KAAK,CAAE;GACd;EAED,OAAOd,SAAA,CAAAe,MAAM,CAACC,MAAM,CAACZ,QAAQ,CAAC;AAChC;AAlBAa,OAAA,CAAAf,eAAA,GAAAA,eAAA;AAoBA;;;;;;AAMO,eAAegB,aAAaA,CAAIC,MAAiB,EAAEC,KAAa;EACrE,OAAO,IAAIC,OAAO,CAAe,CAACC,OAAO,EAAEC,MAAM,KAAI;IACnD,IAAIH,KAAK,KAAK,CAAC,EAAE;MACfE,OAAO,CAAC,EAAE,CAAC;MACX;;IAGF,MAAME,MAAM,GAAG,IAAIC,KAAK,EAAK;IAC7B;IACAN,MAAM,CAACO,IAAI,CAACN,KAAK,CAAC,CAACO,SAAS,CAAC;MAC3BjB,IAAI,EAAGkB,KAAK,IAAI;QACdJ,MAAM,CAACK,IAAI,CAACD,KAAK,CAAC;QAElB,IAAIJ,MAAM,CAACM,MAAM,KAAKV,KAAK,EAAE;UAC3BE,OAAO,CAACE,MAAM,CAAC;;MAEnB,CAAC;MACDb,QAAQ,EAAEA,CAAA,KAAK;QACbY,MAAM,CACJ,yDAAyD,GACvD,aAAaC,MAAM,CAACM,MAAM,cAAcV,KAAK,EAAE,CAClD;MACH,CAAC;MACDP,KAAK,EAAGA,KAAK,IAAKU,MAAM,CAACV,KAAK;KAC/B,CAAC;EACJ,CAAC,CAAC;AACJ;AA1BAI,OAAA,CAAAC,aAAA,GAAAA,aAAA;AA4BA;;;;;AAKO,eAAea,UAAUA,CAAIZ,MAAiB;EACnD,OAAO,CAAC,MAAMD,aAAa,CAACC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC5C;AAFAF,OAAA,CAAAc,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}