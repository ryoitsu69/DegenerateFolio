{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { memo } from '../util/index.js';\nimport { getEraCache, setEraCache } from './cache.js';\nimport { combineEras, erasHistoricApply, singleEra } from './util.js';\nconst CACHE_KEY = 'eraPrefs';\nfunction mapPrefs(era, all) {\n  const validators = {};\n  all.forEach(_ref => {\n    let [key, prefs] = _ref;\n    validators[key.args[1].toString()] = prefs;\n  });\n  return {\n    era,\n    validators\n  };\n}\nexport function _eraPrefs(instanceId, api) {\n  return memo(instanceId, (era, withActive) => {\n    const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);\n    return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map(r => setEraCache(cacheKey, withActive, mapPrefs(era, r))));\n  });\n}\nexport const eraPrefs = /*#__PURE__*/singleEra('_eraPrefs');\nexport const _erasPrefs = /*#__PURE__*/combineEras('_eraPrefs');\nexport const erasPrefs = /*#__PURE__*/erasHistoricApply('_erasPrefs');","map":{"version":3,"names":["map","of","memo","getEraCache","setEraCache","combineEras","erasHistoricApply","singleEra","CACHE_KEY","mapPrefs","era","all","validators","forEach","_ref","key","prefs","args","toString","_eraPrefs","instanceId","api","withActive","cacheKey","cached","query","staking","erasValidatorPrefs","entries","pipe","r","eraPrefs","_erasPrefs","erasPrefs"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/staking/erasPrefs.js"],"sourcesContent":["import { map, of } from 'rxjs';\nimport { memo } from '../util/index.js';\nimport { getEraCache, setEraCache } from './cache.js';\nimport { combineEras, erasHistoricApply, singleEra } from './util.js';\nconst CACHE_KEY = 'eraPrefs';\nfunction mapPrefs(era, all) {\n    const validators = {};\n    all.forEach(([key, prefs]) => {\n        validators[key.args[1].toString()] = prefs;\n    });\n    return { era, validators };\n}\nexport function _eraPrefs(instanceId, api) {\n    return memo(instanceId, (era, withActive) => {\n        const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);\n        return cached\n            ? of(cached)\n            : api.query.staking.erasValidatorPrefs.entries(era).pipe(map((r) => setEraCache(cacheKey, withActive, mapPrefs(era, r))));\n    });\n}\nexport const eraPrefs = /*#__PURE__*/ singleEra('_eraPrefs');\nexport const _erasPrefs = /*#__PURE__*/ combineEras('_eraPrefs');\nexport const erasPrefs = /*#__PURE__*/ erasHistoricApply('_erasPrefs');\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,EAAE,QAAQ,MAAM;AAC9B,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,YAAY;AACrD,SAASC,WAAW,EAAEC,iBAAiB,EAAEC,SAAS,QAAQ,WAAW;AACrE,MAAMC,SAAS,GAAG,UAAU;AAC5B,SAASC,QAAQA,CAACC,GAAG,EAAEC,GAAG,EAAE;EACxB,MAAMC,UAAU,GAAG,CAAC,CAAC;EACrBD,GAAG,CAACE,OAAO,CAACC,IAAA,IAAkB;IAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA;IACrBF,UAAU,CAACG,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,GAAGF,KAAK;EAC9C,CAAC,CAAC;EACF,OAAO;IAAEN,GAAG;IAAEE;EAAW,CAAC;AAC9B;AACA,OAAO,SAASO,SAASA,CAACC,UAAU,EAAEC,GAAG,EAAE;EACvC,OAAOnB,IAAI,CAACkB,UAAU,EAAE,CAACV,GAAG,EAAEY,UAAU,KAAK;IACzC,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAAC,GAAGrB,WAAW,CAACK,SAAS,EAAEE,GAAG,EAAEY,UAAU,CAAC;IAClE,OAAOE,MAAM,GACPvB,EAAE,CAACuB,MAAM,CAAC,GACVH,GAAG,CAACI,KAAK,CAACC,OAAO,CAACC,kBAAkB,CAACC,OAAO,CAAClB,GAAG,CAAC,CAACmB,IAAI,CAAC7B,GAAG,CAAE8B,CAAC,IAAK1B,WAAW,CAACmB,QAAQ,EAAED,UAAU,EAAEb,QAAQ,CAACC,GAAG,EAAEoB,CAAC,CAAC,CAAC,CAAC,CAAC;EACjI,CAAC,CAAC;AACN;AACA,OAAO,MAAMC,QAAQ,GAAG,aAAcxB,SAAS,CAAC,WAAW,CAAC;AAC5D,OAAO,MAAMyB,UAAU,GAAG,aAAc3B,WAAW,CAAC,WAAW,CAAC;AAChE,OAAO,MAAM4B,SAAS,GAAG,aAAc3B,iBAAiB,CAAC,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}