{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer.mjs';\nimport { getGeometryBounds } from './utils/getGeometryBounds.mjs';\n\"use strict\";\nfunction ensureIsAttribute(attribute) {\n  if (attribute instanceof Buffer || Array.isArray(attribute) || attribute.BYTES_PER_ELEMENT) {\n    attribute = {\n      buffer: attribute\n    };\n  }\n  attribute.buffer = ensureIsBuffer(attribute.buffer, false);\n  return attribute;\n}\nclass Geometry extends EventEmitter {\n  /**\n   * Create a new instance of a geometry\n   * @param options - The options for the geometry.\n   */\n  constructor(options) {\n    const {\n      attributes,\n      indexBuffer,\n      topology\n    } = options;\n    super();\n    /** The unique id of the geometry. */\n    this.uid = uid(\"geometry\");\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     * @ignore\n     */\n    this._layoutKey = 0;\n    /** the instance count of the geometry to draw */\n    this.instanceCount = 1;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n    this.attributes = attributes;\n    this.buffers = [];\n    this.instanceCount = options.instanceCount || 1;\n    for (const i in attributes) {\n      const attribute = attributes[i] = ensureIsAttribute(attributes[i]);\n      const bufferIndex = this.buffers.indexOf(attribute.buffer);\n      if (bufferIndex === -1) {\n        this.buffers.push(attribute.buffer);\n        attribute.buffer.on(\"update\", this.onBufferUpdate, this);\n        attribute.buffer.on(\"change\", this.onBufferUpdate, this);\n      }\n    }\n    if (indexBuffer) {\n      this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n      this.buffers.push(this.indexBuffer);\n    }\n    this.topology = topology || \"triangle-list\";\n  }\n  onBufferUpdate() {\n    this._boundsDirty = true;\n    this.emit(\"update\", this);\n  }\n  /**\n   * Returns the requested attribute.\n   * @param id - The name of the attribute required\n   * @returns - The attribute requested.\n   */\n  getAttribute(id) {\n    return this.attributes[id];\n  }\n  /**\n   * Returns the index buffer\n   * @returns - The index buffer.\n   */\n  getIndex() {\n    return this.indexBuffer;\n  }\n  /**\n   * Returns the requested buffer.\n   * @param id - The name of the buffer required.\n   * @returns - The buffer requested.\n   */\n  getBuffer(id) {\n    return this.getAttribute(id).buffer;\n  }\n  /**\n   * Used to figure out how many vertices there are in this geometry\n   * @returns the number of vertices in the geometry\n   */\n  getSize() {\n    for (const i in this.attributes) {\n      const attribute = this.attributes[i];\n      const buffer = attribute.buffer;\n      return buffer.data.length / (attribute.stride / 4 || attribute.size);\n    }\n    return 0;\n  }\n  /** Returns the bounds of the geometry. */\n  get bounds() {\n    if (!this._boundsDirty) return this._bounds;\n    this._boundsDirty = false;\n    return getGeometryBounds(this, \"aPosition\", this._bounds);\n  }\n  /**\n   * destroys the geometry.\n   * @param destroyBuffers - destroy the buffers associated with this geometry\n   */\n  destroy(destroyBuffers = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    if (destroyBuffers) {\n      this.buffers.forEach(buffer => buffer.destroy());\n    }\n    this.attributes = null;\n    this.buffers = null;\n    this.indexBuffer = null;\n    this._bounds = null;\n  }\n}\nexport { Geometry };","map":{"version":3,"names":["ensureIsAttribute","attribute","Buffer","Array","isArray","BYTES_PER_ELEMENT","buffer","ensureIsBuffer","Geometry","EventEmitter","constructor","options","attributes","indexBuffer","topology","uid","_layoutKey","instanceCount","_bounds","Bounds","_boundsDirty","buffers","i","bufferIndex","indexOf","push","on","onBufferUpdate","emit","getAttribute","id","getIndex","getBuffer","getSize","data","length","stride","size","bounds","getGeometryBounds","destroy","destroyBuffers","removeAllListeners","forEach"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/geometry/Geometry.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { uid } from '../../../../utils/data/uid';\nimport { Buffer } from '../buffer/Buffer';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer';\nimport { getGeometryBounds } from './utils/getGeometryBounds';\n\nimport type { TypedArray } from '../buffer/Buffer';\nimport type { Topology, VertexFormat } from './const';\n\nexport type IndexBufferArray = Uint16Array | Uint32Array;\n\n/**\n * The attribute data for a geometries attributes\n * @memberof rendering\n */\nexport interface Attribute\n{\n    /** the buffer that this attributes data belongs to */\n    buffer: Buffer;\n    /** the format of the attribute */\n    format?: VertexFormat;\n    /** set where the shader location is for this attribute */\n    location?: number;\n    /** the stride of the data in the buffer*/\n    stride?: number;\n    /** the offset of the attribute from the buffer, defaults to 0 */\n    offset?: number;\n    /** is this an instanced buffer? (defaults to false) */\n    instance?: boolean;\n    /**  The number of elements to be rendered. If not specified, all vertices after the starting vertex will be drawn. */\n    size?: number;\n    /** the type of attribute  */\n    type?: number;\n    /**\n     * The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     */\n    start?: number;\n}\n\n/**\n * The attribute options used by the constructor for adding geometries attributes\n * extends {@link rendering.Attribute} but allows for the buffer to be a typed or number array\n * @memberof rendering\n */\ntype AttributeOption = Omit<Attribute, 'buffer'> & { buffer: Buffer | TypedArray | number[]}\n| Buffer | TypedArray | number[];\n\nexport type AttributeOptions = Record<string, AttributeOption>;\n\n/**\n * the interface that describes the structure of the geometry\n * @memberof rendering\n */\nexport interface GeometryDescriptor\n{\n    /** an optional label to easily identify the geometry */\n    label?: string;\n    /** the attributes that make up the geometry */\n    attributes: AttributeOptions;\n    /** optional index buffer for this geometry */\n    indexBuffer?: Buffer | TypedArray | number[];\n    /** the topology of the geometry, defaults to 'triangle-list' */\n    topology?: Topology;\n\n    instanceCount?: number;\n}\nfunction ensureIsAttribute(attribute: AttributeOption): Attribute\n{\n    if (attribute instanceof Buffer || Array.isArray(attribute) || (attribute as TypedArray).BYTES_PER_ELEMENT)\n    {\n        attribute = {\n            buffer: attribute as Buffer | TypedArray | number[],\n        };\n    }\n\n    (attribute as Attribute).buffer = ensureIsBuffer(attribute.buffer as Buffer | TypedArray | number[], false);\n\n    return attribute as Attribute;\n}\n\n/**\n * A Geometry is a low-level object that represents the structure of 2D shapes in terms of vertices and attributes.\n * It's a crucial component for rendering as it describes the shape and format of the data that will go through the shaders.\n * Essentially, a Geometry object holds the data you'd send to a GPU buffer.\n *\n * A geometry is basically made of two components:\n * <br>\n * <b>Attributes</b>: These are essentially arrays that define properties of the vertices like position, color,\n * texture coordinates, etc. They map directly to attributes in your vertex shaders.\n * <br>\n * <b>Indices</b>: An optional array that describes how the vertices are connected.\n * If not provided, vertices will be interpreted in the sequence they're given.\n * @example\n *\n * const geometry = new Geometry({\n *   attributes: {\n *     aPosition: [ // add some positions\n *       0, 0,\n *       0, 100,\n *       100, 100,\n *       100,   0,\n *     ],\n *     aUv: [ // add some uvs\n *       0, 0,\n *       0, 1,\n *       1, 1,\n *       1, 0,\n *     ]\n *   }\n * });\n * @memberof rendering\n * @class\n */\nexport class Geometry extends EventEmitter<{\n    update: Geometry,\n    destroy: Geometry,\n}>\n{\n    /** The topology of the geometry. */\n    public topology: Topology;\n    /** The unique id of the geometry. */\n    public readonly uid: number = uid('geometry');\n    /** A record of the attributes of the geometry. */\n    public readonly attributes: Record<string, Attribute>;\n    /** The buffers that the attributes use */\n    public readonly buffers: Buffer[];\n    /** The index buffer of the geometry */\n    public readonly indexBuffer: Buffer;\n\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     * @ignore\n     */\n    public _layoutKey = 0;\n\n    /** the instance count of the geometry to draw */\n    public instanceCount = 1;\n\n    private readonly _bounds: Bounds = new Bounds();\n    private _boundsDirty = true;\n\n    /**\n     * Create a new instance of a geometry\n     * @param options - The options for the geometry.\n     */\n    constructor(options: GeometryDescriptor)\n    {\n        const { attributes, indexBuffer, topology } = options;\n\n        super();\n\n        this.attributes = attributes as Record<string, Attribute>;\n        this.buffers = [];\n\n        this.instanceCount = options.instanceCount || 1;\n\n        for (const i in attributes)\n        {\n            const attribute = attributes[i] = ensureIsAttribute(attributes[i]);\n\n            const bufferIndex = this.buffers.indexOf(attribute.buffer);\n\n            if (bufferIndex === -1)\n            {\n                this.buffers.push(attribute.buffer);\n\n                // two events here - one for a resize (new buffer change)\n                // and one for an update (existing buffer change)\n                attribute.buffer.on('update', this.onBufferUpdate, this);\n                attribute.buffer.on('change', this.onBufferUpdate, this);\n            }\n        }\n\n        if (indexBuffer)\n        {\n            this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n            this.buffers.push(this.indexBuffer);\n        }\n\n        this.topology = topology || 'triangle-list';\n    }\n\n    protected onBufferUpdate(): void\n    {\n        this._boundsDirty = true;\n        this.emit('update', this);\n    }\n\n    /**\n     * Returns the requested attribute.\n     * @param id - The name of the attribute required\n     * @returns - The attribute requested.\n     */\n    public getAttribute(id: string): Attribute\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * Returns the index buffer\n     * @returns - The index buffer.\n     */\n    public getIndex(): Buffer\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * Returns the requested buffer.\n     * @param id - The name of the buffer required.\n     * @returns - The buffer requested.\n     */\n    public getBuffer(id: string): Buffer\n    {\n        return this.getAttribute(id).buffer;\n    }\n\n    /**\n     * Used to figure out how many vertices there are in this geometry\n     * @returns the number of vertices in the geometry\n     */\n    public getSize(): number\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = attribute.buffer;\n\n            // TODO use SIZE again like v7..\n            return (buffer.data as any).length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    /** Returns the bounds of the geometry. */\n    get bounds(): Bounds\n    {\n        if (!this._boundsDirty) return this._bounds;\n\n        this._boundsDirty = false;\n\n        return getGeometryBounds(this, 'aPosition', this._bounds);\n    }\n\n    /**\n     * destroys the geometry.\n     * @param destroyBuffers - destroy the buffers associated with this geometry\n     */\n    public destroy(destroyBuffers = false): void\n    {\n        this.emit('destroy', this);\n\n        this.removeAllListeners();\n\n        if (destroyBuffers)\n        {\n            this.buffers.forEach((buffer) => buffer.destroy());\n        }\n\n        (this.attributes as null) = null;\n        (this.buffers as null) = null;\n        (this.indexBuffer as null) = null;\n        (this._bounds as null) = null;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}