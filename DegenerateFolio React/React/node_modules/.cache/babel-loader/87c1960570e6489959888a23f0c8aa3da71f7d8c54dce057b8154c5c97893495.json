{"ast":null,"code":"import { Pool } from './Pool.mjs';\n\"use strict\";\nclass PoolGroupClass {\n  constructor() {\n    /**\n     * A map to store the pools by their class type.\n     * @private\n     */\n    this._poolsByClass = /* @__PURE__ */new Map();\n  }\n  /**\n   * Prepopulates a specific pool with a given number of items.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n   * @param {number} total - The number of items to add to the pool.\n   */\n  prepopulate(Class, total) {\n    const classPool = this.getPool(Class);\n    classPool.prepopulate(total);\n  }\n  /**\n   * Gets an item from a specific pool.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n   * @param {unknown} [data] - Optional data to pass to the item's constructor.\n   * @returns {T} The item from the pool.\n   */\n  get(Class, data) {\n    const pool = this.getPool(Class);\n    return pool.get(data);\n  }\n  /**\n   * Returns an item to its respective pool.\n   * @param {PoolItem} item - The item to return to the pool.\n   */\n  return(item) {\n    const pool = this.getPool(item.constructor);\n    pool.return(item);\n  }\n  /**\n   * Gets a specific pool based on the class type.\n   * @template T The type of items in the pool. Must extend PoolItem.\n   * @param {PoolItemConstructor<T>} ClassType - The constructor of the items in the pool.\n   * @returns {Pool<T>} The pool of the given class type.\n   */\n  getPool(ClassType) {\n    if (!this._poolsByClass.has(ClassType)) {\n      this._poolsByClass.set(ClassType, new Pool(ClassType));\n    }\n    return this._poolsByClass.get(ClassType);\n  }\n  /** gets the usage stats of each pool in the system */\n  stats() {\n    const stats = {};\n    this._poolsByClass.forEach(pool => {\n      const name = stats[pool._classType.name] ? pool._classType.name + pool._classType.ID : pool._classType.name;\n      stats[name] = {\n        free: pool.totalFree,\n        used: pool.totalUsed,\n        size: pool.totalSize\n      };\n    });\n    return stats;\n  }\n}\nconst BigPool = new PoolGroupClass();\nexport { BigPool, PoolGroupClass };","map":{"version":3,"names":["PoolGroupClass","constructor","_poolsByClass","Map","prepopulate","Class","total","classPool","getPool","get","data","pool","return","item","ClassType","has","set","Pool","stats","forEach","name","_classType","ID","free","totalFree","used","totalUsed","size","totalSize","BigPool"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/pool/PoolGroup.ts"],"sourcesContent":["import { Pool } from './Pool';\n\nimport type { PoolItem, PoolItemConstructor } from './Pool';\n\n/**\n * A type alias for a constructor of a Pool.\n * @template T The type of items in the pool. Must extend PoolItem.\n * @memberof utils\n */\nexport type PoolConstructor<T extends PoolItem> = new () => Pool<T>;\n\n/**\n * A group of pools that can be used to store objects of different types.\n * @memberof utils\n */\nexport class PoolGroupClass\n{\n    /**\n     * A map to store the pools by their class type.\n     * @private\n     */\n    private readonly _poolsByClass: Map<PoolItemConstructor<PoolItem>, Pool<PoolItem>> = new Map();\n\n    /**\n     * Prepopulates a specific pool with a given number of items.\n     * @template T The type of items in the pool. Must extend PoolItem.\n     * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n     * @param {number} total - The number of items to add to the pool.\n     */\n    public prepopulate<T extends PoolItem>(Class: PoolItemConstructor<T>, total: number): void\n    {\n        const classPool = this.getPool(Class);\n\n        classPool.prepopulate(total);\n    }\n\n    /**\n     * Gets an item from a specific pool.\n     * @template T The type of items in the pool. Must extend PoolItem.\n     * @param {PoolItemConstructor<T>} Class - The constructor of the items in the pool.\n     * @param {unknown} [data] - Optional data to pass to the item's constructor.\n     * @returns {T} The item from the pool.\n     */\n    public get<T extends PoolItem>(Class: PoolItemConstructor<T>, data?: unknown): T\n    {\n        const pool = this.getPool(Class);\n\n        return pool.get(data) as T;\n    }\n\n    /**\n     * Returns an item to its respective pool.\n     * @param {PoolItem} item - The item to return to the pool.\n     */\n    public return(item: PoolItem): void\n    {\n        const pool = this.getPool(item.constructor as PoolItemConstructor<PoolItem>);\n\n        pool.return(item);\n    }\n\n    /**\n     * Gets a specific pool based on the class type.\n     * @template T The type of items in the pool. Must extend PoolItem.\n     * @param {PoolItemConstructor<T>} ClassType - The constructor of the items in the pool.\n     * @returns {Pool<T>} The pool of the given class type.\n     */\n    public getPool<T extends PoolItem>(ClassType: PoolItemConstructor<T>): Pool<T>\n    {\n        if (!this._poolsByClass.has(ClassType))\n        {\n            this._poolsByClass.set(ClassType, new Pool(ClassType));\n        }\n\n        return this._poolsByClass.get(ClassType) as Pool<T>;\n    }\n\n    /** gets the usage stats of each pool in the system */\n    public stats(): Record<string, {free: number; used: number; size: number}>\n    {\n        const stats = {} as Record<string, {free: number; used: number; size: number}>;\n\n        this._poolsByClass.forEach((pool) =>\n        {\n            // TODO: maybe we should allow the name to be set when `createEntity` is called\n            const name = stats[pool._classType.name]\n                ? pool._classType.name + (pool._classType as any).ID : pool._classType.name;\n\n            stats[name] = {\n                free: pool.totalFree,\n                used: pool.totalUsed,\n                size: pool.totalSize,\n            };\n        });\n\n        return stats;\n    }\n}\n\nexport const BigPool = new PoolGroupClass();\n"],"mappings":";;AAeO,MAAMA,cACb;EADOC,YAAA;IAMH;AAAA;AAAA;AAAA;IAAiB,KAAAC,aAAA,sBAAwEC,GAAI;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQtFC,YAAgCC,KAAA,EAA+BC,KACtE;IACU,MAAAC,SAAA,GAAY,IAAK,CAAAC,OAAA,CAAQH,KAAK;IAEpCE,SAAA,CAAUH,WAAA,CAAYE,KAAK;EAAA;EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOG,IAAwBJ,KAAA,EAA+BK,IAC9D;IACU,MAAAC,IAAA,GAAO,IAAK,CAAAH,OAAA,CAAQH,KAAK;IAExB,OAAAM,IAAA,CAAKF,GAAA,CAAIC,IAAI;EAAA;EACxB;AAAA;AAAA;AAAA;EAMOE,OAAOC,IACd;IACI,MAAMF,IAAO,QAAKH,OAAQ,CAAAK,IAAA,CAAKZ,WAA4C;IAE3EU,IAAA,CAAKC,MAAA,CAAOC,IAAI;EAAA;EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOL,QAA4BM,SACnC;IACI,IAAI,CAAC,KAAKZ,aAAc,CAAAa,GAAA,CAAID,SAAS,CACrC;MACI,KAAKZ,aAAA,CAAcc,GAAI,CAAAF,SAAA,EAAW,IAAIG,IAAA,CAAKH,SAAS,CAAC;IAAA;IAGlD,YAAKZ,aAAc,CAAAO,GAAA,CAAIK,SAAS;EAAA;EAC3C;EAGOI,KACPA,CAAA;IACI,MAAMA,KAAA,GAAQ,EAAC;IAEV,KAAAhB,aAAA,CAAciB,OAAQ,CAACR,IAC5B;MAEI,MAAMS,IAAO,GAAAF,KAAA,CAAMP,IAAK,CAAAU,UAAA,CAAWD,IAAI,IACjCT,IAAK,CAAAU,UAAA,CAAWD,IAAQ,GAAAT,IAAA,CAAKU,UAAmB,CAAAC,EAAA,GAAKX,IAAA,CAAKU,UAAW,CAAAD,IAAA;MAE3EF,KAAA,CAAME,IAAI,CAAI;QACVG,IAAA,EAAMZ,IAAK,CAAAa,SAAA;QACXC,IAAA,EAAMd,IAAK,CAAAe,SAAA;QACXC,IAAA,EAAMhB,IAAK,CAAAiB;MAAA,CACf;IAAA,CACH;IAEM,OAAAV,KAAA;EAAA;AAEf;AAEa,MAAAW,OAAA,GAAU,IAAI7B,cAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}