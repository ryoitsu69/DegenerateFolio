{"ast":null,"code":"import { ExtensionType, Texture, extensions } from \"@pixi/core\";\nconst cacheTextureArray = {\n  extension: ExtensionType.CacheParser,\n  test: asset => Array.isArray(asset) && asset.every(t => t instanceof Texture),\n  getCacheableAssets: (keys, asset) => {\n    const out = {};\n    return keys.forEach(key => {\n      asset.forEach((item, i) => {\n        out[key + (i === 0 ? \"\" : i + 1)] = item;\n      });\n    }), out;\n  }\n};\nextensions.add(cacheTextureArray);\nexport { cacheTextureArray };","map":{"version":3,"names":["cacheTextureArray","extension","ExtensionType","CacheParser","test","asset","Array","isArray","every","t","Texture","getCacheableAssets","keys","out","forEach","key","item","i","extensions","add"],"sources":["/home/ryoitsu/node_modules/@pixi/assets/src/cache/parsers/cacheTextureArray.ts"],"sourcesContent":["import { extensions, ExtensionType, Texture } from '@pixi/core';\n\nimport type { CacheParser } from '../CacheParser';\n\nexport const cacheTextureArray: CacheParser<Texture[]> = {\n    extension: ExtensionType.CacheParser,\n\n    test: (asset: any[]) => Array.isArray(asset) && asset.every((t) => t instanceof Texture),\n\n    getCacheableAssets: (keys: string[], asset: Texture[]) =>\n    {\n        const out: Record<string, Texture> = {};\n\n        keys.forEach((key: string) =>\n        {\n            asset.forEach((item: Texture, i: number) =>\n            {\n                out[key + (i === 0 ? '' : i + 1)] = item;\n            });\n        });\n\n        return out;\n    }\n};\n\nextensions.add(cacheTextureArray);\n"],"mappings":";AAIO,MAAMA,iBAAA,GAA4C;EACrDC,SAAA,EAAWC,aAAA,CAAcC,WAAA;EAEzBC,IAAA,EAAOC,KAAA,IAAiBC,KAAA,CAAMC,OAAA,CAAQF,KAAK,KAAKA,KAAA,CAAMG,KAAA,CAAOC,CAAA,IAAMA,CAAA,YAAaC,OAAO;EAEvFC,kBAAA,EAAoBA,CAACC,IAAA,EAAgBP,KAAA,KACrC;IACI,MAAMQ,GAAA,GAA+B;IAEhC,OAAAD,IAAA,CAAAE,OAAA,CAASC,GAAA,IACd;MACUV,KAAA,CAAAS,OAAA,CAAQ,CAACE,IAAA,EAAeC,CAAA,KAC9B;QACIJ,GAAA,CAAIE,GAAA,IAAOE,CAAA,KAAM,IAAI,KAAKA,CAAA,GAAI,EAAE,IAAID,IAAA;MAAA,CACvC;IACJ,IAEMH,GAAA;EACX;AACJ;AAEAK,UAAA,CAAWC,GAAA,CAAInB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}