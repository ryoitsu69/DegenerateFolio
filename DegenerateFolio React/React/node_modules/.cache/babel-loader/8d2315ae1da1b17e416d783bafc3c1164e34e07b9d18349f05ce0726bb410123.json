{"ast":null,"code":"import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { FillGradient } from '../fill/FillGradient.mjs';\nimport { FillPattern } from '../fill/FillPattern.mjs';\n\"use strict\";\nfunction convertFillInputToFillStyle(value, defaultStyle) {\n  if (value === void 0 || value === null) {\n    return null;\n  }\n  let fillStyleToParse;\n  let styleToMerge;\n  if (value?.fill) {\n    styleToMerge = value.fill;\n    fillStyleToParse = {\n      ...defaultStyle,\n      ...value\n    };\n  } else {\n    styleToMerge = value;\n    fillStyleToParse = defaultStyle;\n  }\n  if (Color.isColorLike(styleToMerge)) {\n    const temp = Color.shared.setValue(styleToMerge ?? 0);\n    const opts = {\n      ...fillStyleToParse,\n      color: temp.toNumber(),\n      alpha: temp.alpha === 1 ? fillStyleToParse.alpha : temp.alpha,\n      texture: Texture.WHITE\n    };\n    return opts;\n  } else if (styleToMerge instanceof FillPattern) {\n    const pattern = styleToMerge;\n    return {\n      ...fillStyleToParse,\n      color: 16777215,\n      texture: pattern.texture,\n      matrix: pattern.transform,\n      fill: fillStyleToParse.fill ?? null\n    };\n  } else if (styleToMerge instanceof FillGradient) {\n    const gradient = styleToMerge;\n    gradient.buildLinearGradient();\n    return {\n      ...fillStyleToParse,\n      color: 16777215,\n      texture: gradient.texture,\n      matrix: gradient.transform\n    };\n  }\n  const style = {\n    ...defaultStyle,\n    ...value\n  };\n  if (style.texture) {\n    if (style.texture !== Texture.WHITE) {\n      const m = style.matrix?.invert() || new Matrix();\n      m.scale(1 / style.texture.frame.width, 1 / style.texture.frame.height);\n      style.matrix = m;\n    }\n    const sourceStyle = style.texture.source.style;\n    if (sourceStyle.addressMode === \"clamp-to-edge\") {\n      sourceStyle.addressMode = \"repeat\";\n    }\n  }\n  const color = Color.shared.setValue(style.color);\n  style.alpha *= color.alpha;\n  style.color = color.toNumber();\n  style.matrix = style.matrix ? style.matrix.clone() : null;\n  return style;\n}\nexport { convertFillInputToFillStyle };","map":{"version":3,"names":["convertFillInputToFillStyle","value","defaultStyle","fillStyleToParse","styleToMerge","fill","Color","isColorLike","temp","shared","setValue","opts","color","toNumber","alpha","texture","Texture","WHITE","FillPattern","pattern","matrix","transform","FillGradient","gradient","buildLinearGradient","style","m","invert","Matrix","scale","frame","width","height","sourceStyle","source","addressMode","clone"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/graphics/shared/utils/convertFillInputToFillStyle.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { FillGradient } from '../fill/FillGradient';\nimport { FillPattern } from '../fill/FillPattern';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type {\n    ConvertedFillStyle,\n    FillStyle,\n    FillStyleInputs,\n    PatternFillStyle,\n} from '../GraphicsContext';\n\nexport function convertFillInputToFillStyle(\n    value: FillStyleInputs,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    if (value === undefined || value === null)\n    {\n        return null;\n    }\n\n    let fillStyleToParse: ConvertedFillStyle;\n    let styleToMerge: FillStyleInputs;\n\n    if ((value as PatternFillStyle)?.fill)\n    {\n        styleToMerge = (value as PatternFillStyle).fill;\n        fillStyleToParse = { ...defaultStyle, ...(value as PatternFillStyle) };\n    }\n    else\n    {\n        styleToMerge = value;\n        fillStyleToParse = defaultStyle;\n    }\n\n    if (Color.isColorLike(styleToMerge as ColorSource))\n    {\n        const temp = Color.shared.setValue(styleToMerge as ColorSource ?? 0);\n        const opts: ConvertedFillStyle = {\n            ...fillStyleToParse,\n            color: temp.toNumber(),\n            alpha: temp.alpha === 1 ? fillStyleToParse.alpha : temp.alpha,\n            texture: Texture.WHITE,\n        };\n\n        return opts;\n    }\n    else if (styleToMerge instanceof FillPattern)\n    {\n        const pattern = styleToMerge as FillPattern;\n\n        return {\n            ...fillStyleToParse,\n            color: 0xffffff,\n            texture: pattern.texture,\n            matrix: pattern.transform,\n            fill: fillStyleToParse.fill ?? null,\n        };\n    }\n\n    // // TODO Texture\n    else if (styleToMerge instanceof FillGradient)\n    {\n        const gradient = styleToMerge as FillGradient;\n\n        gradient.buildLinearGradient();\n\n        return {\n            ...fillStyleToParse,\n            color: 0xffffff,\n            texture: gradient.texture,\n            matrix: gradient.transform,\n        };\n    }\n\n    const style: FillStyle = { ...defaultStyle, ...(value as FillStyle) };\n\n    if (style.texture)\n    {\n        if (style.texture !== Texture.WHITE)\n        {\n            const m = style.matrix?.invert() || new Matrix();\n\n            m.scale(\n                1 / style.texture.frame.width,\n                1 / style.texture.frame.height\n            );\n\n            style.matrix = m;\n        }\n\n        const sourceStyle = style.texture.source.style;\n\n        if (sourceStyle.addressMode === 'clamp-to-edge')\n        {\n            sourceStyle.addressMode = 'repeat';\n        }\n    }\n\n    const color = Color.shared.setValue(style.color);\n\n    style.alpha *= color.alpha;\n    style.color = color.toNumber();\n    style.matrix = style.matrix ? style.matrix.clone() : null; // todo: lets optimise this!\n\n    // its a regular fill style!\n    return style as ConvertedFillStyle;\n}\n"],"mappings":";;;;;;AAcgB,SAAAA,4BACZC,KAAA,EACAC,YAEJ;EACQ,IAAAD,KAAA,KAAU,KAAa,KAAAA,KAAA,KAAU,IACrC;IACW;EAAA;EAGP,IAAAE,gBAAA;EACA,IAAAC,YAAA;EAEJ,IAAKH,KAAA,EAA4BI,IACjC;IACID,YAAA,GAAgBH,KAA2B,CAAAI,IAAA;IAC3CF,gBAAA,GAAmB;MAAE,GAAGD,YAAc;MAAA,GAAID;IAA2B;EAAA,CAGzE;IACmBG,YAAA,GAAAH,KAAA;IACIE,gBAAA,GAAAD,YAAA;EAAA;EAGnB,IAAAI,KAAA,CAAMC,WAAY,CAAAH,YAA2B,CACjD;IACI,MAAMI,IAAO,GAAAF,KAAA,CAAMG,MAAO,CAAAC,QAAA,CAASN,YAAA,IAA+B,CAAC;IACnE,MAAMO,IAA2B;MAC7B,GAAGR,gBAAA;MACHS,KAAA,EAAOJ,IAAA,CAAKK,QAAS;MACrBC,KAAA,EAAON,IAAK,CAAAM,KAAA,KAAU,CAAI,GAAAX,gBAAA,CAAiBW,KAAA,GAAQN,IAAK,CAAAM,KAAA;MACxDC,OAAA,EAASC,OAAQ,CAAAC;IAAA,CACrB;IAEO,OAAAN,IAAA;EAAA,CACX,UACSP,YAAA,YAAwBc,WACjC;IACI,MAAMC,OAAU,GAAAf,YAAA;IAET;MACH,GAAGD,gBAAA;MACHS,KAAO;MACPG,OAAA,EAASI,OAAQ,CAAAJ,OAAA;MACjBK,MAAA,EAAQD,OAAQ,CAAAE,SAAA;MAChBhB,IAAA,EAAMF,gBAAA,CAAiBE,IAAQ;IAAA,CACnC;EAAA,CACJ,UAGSD,YAAA,YAAwBkB,YACjC;IACI,MAAMC,QAAW,GAAAnB,YAAA;IAEjBmB,QAAA,CAASC,mBAAoB;IAEtB;MACH,GAAGrB,gBAAA;MACHS,KAAO;MACPG,OAAA,EAASQ,QAAS,CAAAR,OAAA;MAClBK,MAAA,EAAQG,QAAS,CAAAF;IAAA,CACrB;EAAA;EAGJ,MAAMI,KAAmB;IAAE,GAAGvB,YAAA;IAAc,GAAID;EAAoB;EAEpE,IAAIwB,KAAA,CAAMV,OACV;IACQ,IAAAU,KAAA,CAAMV,OAAY,KAAAC,OAAA,CAAQC,KAC9B;MACI,MAAMS,CAAA,GAAID,KAAM,CAAAL,MAAA,EAAQO,MAAO,MAAK,IAAIC,MAAO;MAE7CF,CAAA,CAAAG,KAAA,CACE,IAAIJ,KAAM,CAAAV,OAAA,CAAQe,KAAM,CAAAC,KAAA,EACxB,IAAIN,KAAM,CAAAV,OAAA,CAAQe,KAAM,CAAAE,MAAA,CAC5B;MAEAP,KAAA,CAAML,MAAS,GAAAM,CAAA;IAAA;IAGb,MAAAO,WAAA,GAAcR,KAAM,CAAAV,OAAA,CAAQmB,MAAO,CAAAT,KAAA;IAErC,IAAAQ,WAAA,CAAYE,WAAA,KAAgB,eAChC;MACIF,WAAA,CAAYE,WAAc;IAAA;EAC9B;EAGJ,MAAMvB,KAAQ,GAAAN,KAAA,CAAMG,MAAO,CAAAC,QAAA,CAASe,KAAA,CAAMb,KAAK;EAE/Ca,KAAA,CAAMX,KAAA,IAASF,KAAM,CAAAE,KAAA;EACfW,KAAA,CAAAb,KAAA,GAAQA,KAAA,CAAMC,QAAS;EAC7BY,KAAA,CAAML,MAAA,GAASK,KAAM,CAAAL,MAAA,GAASK,KAAM,CAAAL,MAAA,CAAOgB,KAAA,EAAU;EAG9C,OAAAX,KAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}