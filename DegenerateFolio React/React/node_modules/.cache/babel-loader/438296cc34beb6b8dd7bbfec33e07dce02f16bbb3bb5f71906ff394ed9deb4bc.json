{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBlockId = exports.encodeVersion = exports.encodeBytes = exports.encodeTime = exports.encodeUvarint = exports.encodeString = exports.dictionaryToStringMap = exports.may = exports.assertNotEmpty = exports.assertObject = exports.assertArray = exports.assertNumber = exports.assertString = exports.assertBoolean = exports.assertSet = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\n/**\n * A runtime checker that ensures a given value is set (i.e. not undefined or null)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n */\nfunction assertSet(value) {\n  if (value === undefined) {\n    throw new Error(\"Value must not be undefined\");\n  }\n  if (value === null) {\n    throw new Error(\"Value must not be null\");\n  }\n  return value;\n}\nexports.assertSet = assertSet;\n/**\n * A runtime checker that ensures a given value is a boolean\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertBoolean(value) {\n  assertSet(value);\n  if (typeof value !== \"boolean\") {\n    throw new Error(\"Value must be a boolean\");\n  }\n  return value;\n}\nexports.assertBoolean = assertBoolean;\n/**\n * A runtime checker that ensures a given value is a string.\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertString(value) {\n  assertSet(value);\n  if (typeof value !== \"string\") {\n    throw new Error(\"Value must be a string\");\n  }\n  return value;\n}\nexports.assertString = assertString;\n/**\n * A runtime checker that ensures a given value is a number\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertNumber(value) {\n  assertSet(value);\n  if (typeof value !== \"number\") {\n    throw new Error(\"Value must be a number\");\n  }\n  return value;\n}\nexports.assertNumber = assertNumber;\n/**\n * A runtime checker that ensures a given value is an array\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertArray(value) {\n  assertSet(value);\n  if (!Array.isArray(value)) {\n    throw new Error(\"Value must be a an array\");\n  }\n  return value;\n}\nexports.assertArray = assertArray;\n/**\n * A runtime checker that ensures a given value is an object in the sense of JSON\n * (an unordered collection of keyâ€“value pairs where the keys are strings)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertObject(value) {\n  assertSet(value);\n  if (typeof value !== \"object\") {\n    throw new Error(\"Value must be an object\");\n  }\n  // Exclude special kind of objects like Array, Date or Uint8Array\n  // Object.prototype.toString() returns a specified value:\n  // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n  if (Object.prototype.toString.call(value) !== \"[object Object]\") {\n    throw new Error(\"Value must be a simple object\");\n  }\n  return value;\n}\nexports.assertObject = assertObject;\n/**\n * Throws an error if value matches the empty value for the\n * given type (array/string of length 0, number of value 0, ...)\n *\n * Otherwise returns the value.\n *\n * This implies assertSet\n */\nfunction assertNotEmpty(value) {\n  assertSet(value);\n  if (typeof value === \"number\" && value === 0) {\n    throw new Error(\"must provide a non-zero value\");\n  } else if (value.length === 0) {\n    throw new Error(\"must provide a non-empty value\");\n  }\n  return value;\n}\nexports.assertNotEmpty = assertNotEmpty;\n// may will run the transform if value is defined, otherwise returns undefined\nfunction may(transform, value) {\n  return value === undefined || value === null ? undefined : transform(value);\n}\nexports.may = may;\nfunction dictionaryToStringMap(obj) {\n  const out = new Map();\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    if (typeof value !== \"string\") {\n      throw new Error(\"Found dictionary value of type other than string\");\n    }\n    out.set(key, value);\n  }\n  return out;\n}\nexports.dictionaryToStringMap = dictionaryToStringMap;\n// Encodings needed for hashing block headers\n// Several of these functions are inspired by https://github.com/nomic-io/js-tendermint/blob/tendermint-0.30/src/\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L193-L195\nfunction encodeString(s) {\n  const utf8 = (0, encoding_1.toUtf8)(s);\n  return Uint8Array.from([utf8.length, ...utf8]);\n}\nexports.encodeString = encodeString;\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L79-L87\nfunction encodeUvarint(n) {\n  return n >= 0x80 ?\n  // eslint-disable-next-line no-bitwise\n  Uint8Array.from([n & 0xff | 0x80, ...encodeUvarint(n >> 7)]) :\n  // eslint-disable-next-line no-bitwise\n  Uint8Array.from([n & 0xff]);\n}\nexports.encodeUvarint = encodeUvarint;\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L134-L178\nfunction encodeTime(time) {\n  const milliseconds = time.getTime();\n  const seconds = Math.floor(milliseconds / 1000);\n  const secondsArray = seconds ? [0x08, ...encodeUvarint(seconds)] : new Uint8Array();\n  const nanoseconds = (time.nanoseconds || 0) + milliseconds % 1000 * 1e6;\n  const nanosecondsArray = nanoseconds ? [0x10, ...encodeUvarint(nanoseconds)] : new Uint8Array();\n  return Uint8Array.from([...secondsArray, ...nanosecondsArray]);\n}\nexports.encodeTime = encodeTime;\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L180-L187\nfunction encodeBytes(bytes) {\n  // Since we're only dealing with short byte arrays we don't need a full VarBuffer implementation yet\n  if (bytes.length >= 0x80) throw new Error(\"Not implemented for byte arrays of length 128 or more\");\n  return bytes.length ? Uint8Array.from([bytes.length, ...bytes]) : new Uint8Array();\n}\nexports.encodeBytes = encodeBytes;\nfunction encodeVersion(version) {\n  const blockArray = version.block ? Uint8Array.from([0x08, ...encodeUvarint(version.block)]) : new Uint8Array();\n  const appArray = version.app ? Uint8Array.from([0x10, ...encodeUvarint(version.app)]) : new Uint8Array();\n  return Uint8Array.from([...blockArray, ...appArray]);\n}\nexports.encodeVersion = encodeVersion;\nfunction encodeBlockId(blockId) {\n  return Uint8Array.from([0x0a, blockId.hash.length, ...blockId.hash, 0x12, blockId.parts.hash.length + 4, 0x08, blockId.parts.total, 0x12, blockId.parts.hash.length, ...blockId.parts.hash]);\n}\nexports.encodeBlockId = encodeBlockId;","map":{"version":3,"names":["encoding_1","require","assertSet","value","undefined","Error","exports","assertBoolean","assertString","assertNumber","assertArray","Array","isArray","assertObject","Object","prototype","toString","call","assertNotEmpty","length","may","transform","dictionaryToStringMap","obj","out","Map","key","keys","set","encodeString","s","utf8","toUtf8","Uint8Array","from","encodeUvarint","n","encodeTime","time","milliseconds","getTime","seconds","Math","floor","secondsArray","nanoseconds","nanosecondsArray","encodeBytes","bytes","encodeVersion","version","blockArray","block","appArray","app","encodeBlockId","blockId","hash","parts","total"],"sources":["../../src/tendermint34/encodings.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}