{"ast":null,"code":"\"use strict\";\n\nconst buildCircle = {\n  build(shape, points) {\n    let x;\n    let y;\n    let dx;\n    let dy;\n    let rx;\n    let ry;\n    if (shape.type === \"circle\") {\n      const circle = shape;\n      x = circle.x;\n      y = circle.y;\n      rx = ry = circle.radius;\n      dx = dy = 0;\n    } else if (shape.type === \"ellipse\") {\n      const ellipse = shape;\n      x = ellipse.x;\n      y = ellipse.y;\n      rx = ellipse.halfWidth;\n      ry = ellipse.halfHeight;\n      dx = dy = 0;\n    } else {\n      const roundedRect = shape;\n      const halfWidth = roundedRect.width / 2;\n      const halfHeight = roundedRect.height / 2;\n      x = roundedRect.x + halfWidth;\n      y = roundedRect.y + halfHeight;\n      rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n      dx = halfWidth - rx;\n      dy = halfHeight - ry;\n    }\n    if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0)) {\n      return points;\n    }\n    const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n    const m = n * 8 + (dx ? 4 : 0) + (dy ? 4 : 0);\n    if (m === 0) {\n      return points;\n    }\n    if (n === 0) {\n      points[0] = points[6] = x + dx;\n      points[1] = points[3] = y + dy;\n      points[2] = points[4] = x - dx;\n      points[5] = points[7] = y - dy;\n      return points;\n    }\n    let j1 = 0;\n    let j2 = n * 4 + (dx ? 2 : 0) + 2;\n    let j3 = j2;\n    let j4 = m;\n    let x0 = dx + rx;\n    let y0 = dy;\n    let x1 = x + x0;\n    let x2 = x - x0;\n    let y1 = y + y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j2] = y1;\n    points[--j2] = x2;\n    if (dy) {\n      const y22 = y - y0;\n      points[j3++] = x2;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x1;\n    }\n    for (let i = 1; i < n; i++) {\n      const a = Math.PI / 2 * (i / n);\n      const x02 = dx + Math.cos(a) * rx;\n      const y02 = dy + Math.sin(a) * ry;\n      const x12 = x + x02;\n      const x22 = x - x02;\n      const y12 = y + y02;\n      const y22 = y - y02;\n      points[j1++] = x12;\n      points[j1++] = y12;\n      points[--j2] = y12;\n      points[--j2] = x22;\n      points[j3++] = x22;\n      points[j3++] = y22;\n      points[--j4] = y22;\n      points[--j4] = x12;\n    }\n    x0 = dx;\n    y0 = dy + ry;\n    x1 = x + x0;\n    x2 = x - x0;\n    y1 = y + y0;\n    const y2 = y - y0;\n    points[j1++] = x1;\n    points[j1++] = y1;\n    points[--j4] = y2;\n    points[--j4] = x1;\n    if (dx) {\n      points[j1++] = x2;\n      points[j1++] = y1;\n      points[--j4] = y2;\n      points[--j4] = x2;\n    }\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    if (points.length === 0) {\n      return;\n    }\n    let centerX = 0;\n    let centerY = 0;\n    for (let i = 0; i < points.length; i += 2) {\n      centerX += points[i];\n      centerY += points[i + 1];\n    }\n    centerX /= points.length / 2;\n    centerY /= points.length / 2;\n    let count = verticesOffset;\n    vertices[count * verticesStride] = centerX;\n    vertices[count * verticesStride + 1] = centerY;\n    const centerIndex = count++;\n    for (let i = 0; i < points.length; i += 2) {\n      vertices[count * verticesStride] = points[i];\n      vertices[count * verticesStride + 1] = points[i + 1];\n      if (i > 0) {\n        indices[indicesOffset++] = count;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n      }\n      count++;\n    }\n    indices[indicesOffset++] = centerIndex + 1;\n    indices[indicesOffset++] = centerIndex;\n    indices[indicesOffset++] = count - 1;\n  }\n};\nexport { buildCircle };","map":{"version":3,"names":["buildCircle","build","shape","points","x","y","dx","dy","rx","ry","type","circle","radius","ellipse","halfWidth","halfHeight","roundedRect","width","height","Math","max","min","n","ceil","sqrt","m","j1","j2","j3","j4","x0","y0","x1","x2","y1","y22","i","a","PI","x02","cos","y02","sin","x12","x22","y12","y2","triangulate","vertices","verticesStride","verticesOffset","indices","indicesOffset","length","centerX","centerY","count","centerIndex"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildCircle.ts"],"sourcesContent":["import type { Circle } from '../../../../maths/shapes/Circle';\nimport type { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport type { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\ntype RoundedShape = Circle | Ellipse | RoundedRectangle;\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildCircle: ShapeBuildCommand<RoundedShape> = {\n\n    build(shape: RoundedShape, points: number[])\n    {\n        let x;\n        let y;\n        let dx;\n        let dy;\n\n        let rx;\n        let ry;\n\n        if (shape.type === 'circle')\n        {\n            const circle = shape as Circle;\n\n            x = circle.x;\n            y = circle.y;\n            rx = ry = circle.radius;\n            dx = dy = 0;\n        }\n\n        else if (shape.type === 'ellipse')\n        {\n            const ellipse = shape as Ellipse;\n\n            x = ellipse.x;\n            y = ellipse.y;\n            rx = ellipse.halfWidth;\n            ry = ellipse.halfHeight;\n            dx = dy = 0;\n        }\n        else\n        {\n            const roundedRect = shape as RoundedRectangle;\n            const halfWidth = roundedRect.width / 2;\n            const halfHeight = roundedRect.height / 2;\n\n            x = roundedRect.x + halfWidth;\n            y = roundedRect.y + halfHeight;\n            rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n            dx = halfWidth - rx;\n            dy = halfHeight - ry;\n        }\n\n        if (!(rx >= 0 && ry >= 0 && dx >= 0 && dy >= 0))\n        {\n            return points;\n        }\n\n        // Choose a number of segments such that the maximum absolute deviation from the circle is approximately 0.029\n        const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n        const m = (n * 8) + (dx ? 4 : 0) + (dy ? 4 : 0);\n\n        if (m === 0)\n        {\n            return points;\n        }\n\n        if (n === 0)\n        {\n            points[0] = points[6] = x + dx;\n            points[1] = points[3] = y + dy;\n            points[2] = points[4] = x - dx;\n            points[5] = points[7] = y - dy;\n\n            return points;\n        }\n\n        let j1 = 0;\n        let j2 = (n * 4) + (dx ? 2 : 0) + 2;\n        let j3 = j2;\n        let j4 = m;\n\n        let x0 = dx + rx;\n        let y0 = dy;\n        let x1 = x + x0;\n        let x2 = x - x0;\n        let y1 = y + y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j2] = y1;\n        points[--j2] = x2;\n\n        if (dy)\n        {\n            const y2 = y - y0;\n\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        for (let i = 1; i < n; i++)\n        {\n            const a = Math.PI / 2 * (i / n);\n            const x0 = dx + (Math.cos(a) * rx);\n            const y0 = dy + (Math.sin(a) * ry);\n            const x1 = x + x0;\n            const x2 = x - x0;\n            const y1 = y + y0;\n            const y2 = y - y0;\n\n            points[j1++] = x1;\n            points[j1++] = y1;\n            points[--j2] = y1;\n            points[--j2] = x2;\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        x0 = dx;\n        y0 = dy + ry;\n        x1 = x + x0;\n        x2 = x - x0;\n        y1 = y + y0;\n        const y2 = y - y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j4] = y2;\n        points[--j4] = x1;\n\n        if (dx)\n        {\n            points[j1++] = x2;\n            points[j1++] = y1;\n            points[--j4] = y2;\n            points[--j4] = x2;\n        }\n\n        return points;\n    },\n\n    triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset)\n    {\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        // Compute center (average of all points)\n        let centerX = 0; let\n            centerY = 0;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            centerX += points[i];\n            centerY += points[i + 1];\n        }\n        centerX /= (points.length / 2);\n        centerY /= (points.length / 2);\n\n        // Set center vertex\n        let count = verticesOffset;\n\n        vertices[count * verticesStride] = centerX;\n        vertices[(count * verticesStride) + 1] = centerY;\n        const centerIndex = count++;\n\n        // Set edge vertices and indices\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[count * verticesStride] = points[i];\n            vertices[(count * verticesStride) + 1] = points[i + 1];\n\n            if (i > 0)\n            { // Skip first point for indices\n                indices[indicesOffset++] = count;\n                indices[indicesOffset++] = centerIndex;\n                indices[indicesOffset++] = count - 1;\n            }\n            count++;\n        }\n\n        // Connect last point to the first edge point\n        indices[indicesOffset++] = centerIndex + 1;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n    }\n\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}