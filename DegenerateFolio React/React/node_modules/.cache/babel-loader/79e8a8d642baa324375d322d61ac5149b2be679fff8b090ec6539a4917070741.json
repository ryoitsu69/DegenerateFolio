{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../maths/point/Point.mjs';\nimport { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Sprite } from '../../../scene/sprite/Sprite.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { Filter } from '../../Filter.mjs';\nimport fragment from './displacement.frag.mjs';\nimport vertex from './displacement.vert.mjs';\nimport source from './displacement.wgsl.mjs';\n\"use strict\";\nclass DisplacementFilter extends Filter {\n  constructor(...args) {\n    let options = args[0];\n    if (options instanceof Sprite) {\n      if (args[1]) {\n        deprecation(v8_0_0, \"DisplacementFilter now uses options object instead of params. {sprite, scale}\");\n      }\n      options = {\n        sprite: options,\n        scale: args[1]\n      };\n    }\n    const {\n      sprite,\n      scale: scaleOption,\n      ...rest\n    } = options;\n    let scale = scaleOption ?? 20;\n    if (typeof scale === \"number\") {\n      scale = new Point(scale, scale);\n    }\n    const filterUniforms = new UniformGroup({\n      uFilterMatrix: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      uScale: {\n        value: scale,\n        type: \"vec2<f32>\"\n      },\n      uRotation: {\n        value: new Float32Array([0, 0, 0, 0]),\n        type: \"mat2x2<f32>\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"displacement-filter\"\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const textureSource = sprite.texture.source;\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        filterUniforms,\n        uMapTexture: textureSource,\n        uMapSampler: textureSource.style\n      }\n    });\n    this._sprite = options.sprite;\n    this._sprite.renderable = false;\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - clearMode.\n   */\n  apply(filterManager, input, output, clearMode) {\n    const uniforms = this.resources.filterUniforms.uniforms;\n    filterManager.calculateSpriteMatrix(uniforms.uFilterMatrix, this._sprite);\n    const wt = this._sprite.worldTransform;\n    const lenX = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\n    const lenY = Math.sqrt(wt.c * wt.c + wt.d * wt.d);\n    if (lenX !== 0 && lenY !== 0) {\n      uniforms.uRotation[0] = wt.a / lenX;\n      uniforms.uRotation[1] = wt.b / lenX;\n      uniforms.uRotation[2] = wt.c / lenY;\n      uniforms.uRotation[3] = wt.d / lenY;\n    }\n    this.resources.uMapTexture = this._sprite.texture.source;\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /** scaleX, scaleY for displacements */\n  get scale() {\n    return this.resources.filterUniforms.uniforms.uScale;\n  }\n}\nexport { DisplacementFilter };","map":{"version":3,"names":["DisplacementFilter","Filter","constructor","args","options","Sprite","deprecation","v8_0_0","sprite","scale","scaleOption","rest","Point","filterUniforms","UniformGroup","uFilterMatrix","value","Matrix","type","uScale","uRotation","Float32Array","glProgram","GlProgram","from","vertex","fragment","name","gpuProgram","GpuProgram","source","entryPoint","textureSource","texture","resources","uMapTexture","uMapSampler","style","_sprite","renderable","apply","filterManager","input","output","clearMode","uniforms","calculateSpriteMatrix","wt","worldTransform","lenX","Math","sqrt","a","b","lenY","c","d","applyFilter"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/filters/defaults/displacement/DisplacementFilter.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Point } from '../../../maths/point/Point';\nimport { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Filter } from '../../Filter';\nimport fragment from './displacement.frag';\nimport vertex from './displacement.vert';\nimport source from './displacement.wgsl';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { FilterOptions } from '../../Filter';\nimport type { FilterSystem } from '../../FilterSystem';\n\n/**\n * Options for DisplacementFilter\n * @memberof filters\n */\nexport interface DisplacementFilterOptions extends FilterOptions\n{\n    /** The texture used for the displacement map. */\n    sprite: Sprite,\n    /** The scale of the displacement. */\n    scale?: number | PointData,\n}\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof filters\n * @author Vico @vicocotea\n */\nexport class DisplacementFilter extends Filter\n{\n    private readonly _sprite: Sprite;\n\n    /**\n     * **Note:** Our docs parser struggles to properly understand the constructor signature.\n     * This is the correct signature.\n     * ```ts\n     * new DisplacementFilter(options?: DisplacementFilterOptions);\n     * ```\n     * @param options - The options for the filter.\n     * @param options.sprite - The texture used for the displacement map.\n     * @param options.scale - The scale of the displacement.\n     */\n    constructor(options: Sprite | DisplacementFilterOptions);\n    constructor(sprite: Sprite, scale?: number | PointData);\n    constructor(...args: [Sprite | DisplacementFilterOptions] | [Sprite, (number | PointData)?])\n    {\n        let options = args[0];\n\n        if (options instanceof Sprite)\n        {\n            // #if _DEBUG\n            if (args[1])\n            {\n                deprecation(v8_0_0, 'DisplacementFilter now uses options object instead of params. {sprite, scale}');\n            }\n            // #endif\n\n            options = { sprite: options, scale: args[1] };\n        }\n\n        const { sprite, scale: scaleOption, ...rest } = options;\n\n        let scale = scaleOption ?? 20;\n\n        // check if is a number or a point\n        if (typeof scale === 'number')\n        {\n            scale = new Point(scale, scale);\n        }\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uScale: { value: scale, type: 'vec2<f32>' },\n            uRotation: { value: new Float32Array([0, 0, 0, 0]), type: 'mat2x2<f32>' },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'displacement-filter'\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const textureSource = sprite.texture.source;\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMapTexture: textureSource,\n                uMapSampler: textureSource.style,\n            },\n        });\n\n        this._sprite = options.sprite;\n        this._sprite.renderable = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - clearMode.\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        const uniforms = this.resources.filterUniforms.uniforms;\n\n        filterManager.calculateSpriteMatrix(\n            uniforms.uFilterMatrix,\n            this._sprite\n        );\n\n        // Extract rotation from world transform\n        const wt = this._sprite.worldTransform;\n        const lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        const lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n\n        if (lenX !== 0 && lenY !== 0)\n        {\n            uniforms.uRotation[0] = wt.a / lenX;\n            uniforms.uRotation[1] = wt.b / lenX;\n            uniforms.uRotation[2] = wt.c / lenY;\n            uniforms.uRotation[3] = wt.d / lenY;\n        }\n\n        this.resources.uMapTexture = this._sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n\n    /** scaleX, scaleY for displacements */\n    get scale(): Point\n    {\n        return this.resources.filterUniforms.uniforms.uScale as Point;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}