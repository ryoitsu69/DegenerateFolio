{"ast":null,"code":"\"use strict\";\n\nfunction fastCopy(sourceBuffer, destinationBuffer) {\n  const lengthDouble = sourceBuffer.byteLength / 8 | 0;\n  const sourceFloat64View = new Float64Array(sourceBuffer, 0, lengthDouble);\n  const destinationFloat64View = new Float64Array(destinationBuffer, 0, lengthDouble);\n  destinationFloat64View.set(sourceFloat64View);\n  const remainingBytes = sourceBuffer.byteLength - lengthDouble * 8;\n  if (remainingBytes > 0) {\n    const sourceUint8View = new Uint8Array(sourceBuffer, lengthDouble * 8, remainingBytes);\n    const destinationUint8View = new Uint8Array(destinationBuffer, lengthDouble * 8, remainingBytes);\n    destinationUint8View.set(sourceUint8View);\n  }\n}\nexport { fastCopy };","map":{"version":3,"names":["fastCopy","sourceBuffer","destinationBuffer","lengthDouble","byteLength","sourceFloat64View","Float64Array","destinationFloat64View","set","remainingBytes","sourceUint8View","Uint8Array","destinationUint8View"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/buffer/utils/fastCopy.ts"],"sourcesContent":["/**\n * Copies from one buffer to another.\n * This is an optimised function that will use `Float64Array` window.\n * This means it can copy twice as fast!\n * @param sourceBuffer - the array buffer to copy from\n * @param destinationBuffer - the array buffer to copy to\n * @private\n */\nexport function fastCopy(sourceBuffer: ArrayBuffer, destinationBuffer: ArrayBuffer): void\n{\n    const lengthDouble = (sourceBuffer.byteLength / 8) | 0;\n\n    const sourceFloat64View = new Float64Array(sourceBuffer, 0, lengthDouble);\n    const destinationFloat64View = new Float64Array(destinationBuffer, 0, lengthDouble);\n\n    // Use set for faster copying\n    destinationFloat64View.set(sourceFloat64View);\n\n    // copying over the remaining bytes\n    const remainingBytes = sourceBuffer.byteLength - (lengthDouble * 8);\n\n    if (remainingBytes > 0)\n    {\n        const sourceUint8View = new Uint8Array(sourceBuffer, lengthDouble * 8, remainingBytes);\n        const destinationUint8View = new Uint8Array(destinationBuffer, lengthDouble * 8, remainingBytes);\n\n        // Direct copy for remaining bytes\n        destinationUint8View.set(sourceUint8View);\n    }\n}\n"],"mappings":";;AAQgB,SAAAA,SAASC,YAAA,EAA2BC,iBACpD;EACU,MAAAC,YAAA,GAAgBF,YAAa,CAAAG,UAAA,GAAa,CAAK;EAErD,MAAMC,iBAAoB,OAAIC,YAAa,CAAAL,YAAA,EAAc,GAAGE,YAAY;EACxE,MAAMI,sBAAyB,OAAID,YAAa,CAAAJ,iBAAA,EAAmB,GAAGC,YAAY;EAGlFI,sBAAA,CAAuBC,GAAA,CAAIH,iBAAiB;EAGtC,MAAAI,cAAA,GAAiBR,YAAa,CAAAG,UAAA,GAAcD,YAAe;EAEjE,IAAIM,cAAA,GAAiB,CACrB;IACI,MAAMC,eAAA,GAAkB,IAAIC,UAAA,CAAWV,YAAc,EAAAE,YAAA,GAAe,GAAGM,cAAc;IACrF,MAAMG,oBAAA,GAAuB,IAAID,UAAA,CAAWT,iBAAmB,EAAAC,YAAA,GAAe,GAAGM,cAAc;IAG/FG,oBAAA,CAAqBJ,GAAA,CAAIE,eAAe;EAAA;AAEhD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}