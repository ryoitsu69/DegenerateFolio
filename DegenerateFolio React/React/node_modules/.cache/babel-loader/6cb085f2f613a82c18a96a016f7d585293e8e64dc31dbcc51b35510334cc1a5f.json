{"ast":null,"code":"import { multiplyHexColors } from '../../container/utils/multiplyHexColors.mjs';\n\"use strict\";\nclass BatchableGraphics {\n  constructor() {\n    this.batcher = null;\n    this.batch = null;\n    this.applyTransform = true;\n    this.roundPixels = 0;\n  }\n  get blendMode() {\n    if (this.applyTransform) {\n      return this.renderable.groupBlendMode;\n    }\n    return \"normal\";\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    const indices = this.geometryData.indices;\n    for (let i = 0; i < this.indexSize; i++) {\n      indexBuffer[index++] = indices[i + this.indexOffset] + indicesOffset - this.vertexOffset;\n    }\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const geometry = this.geometryData;\n    const graphics = this.renderable;\n    const positions = geometry.vertices;\n    const uvs = geometry.uvs;\n    const offset = this.vertexOffset * 2;\n    const vertSize = (this.vertexOffset + this.vertexSize) * 2;\n    const rgb = this.color;\n    const bgr = rgb >> 16 | rgb & 65280 | (rgb & 255) << 16;\n    if (this.applyTransform) {\n      const argb = multiplyHexColors(bgr, graphics.groupColor) + (this.alpha * graphics.groupAlpha * 255 << 24);\n      const wt = graphics.groupTransform;\n      const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n      const a = wt.a;\n      const b = wt.b;\n      const c = wt.c;\n      const d = wt.d;\n      const tx = wt.tx;\n      const ty = wt.ty;\n      for (let i = offset; i < vertSize; i += 2) {\n        const x = positions[i];\n        const y = positions[i + 1];\n        float32View[index] = a * x + c * y + tx;\n        float32View[index + 1] = b * x + d * y + ty;\n        float32View[index + 2] = uvs[i];\n        float32View[index + 3] = uvs[i + 1];\n        uint32View[index + 4] = argb;\n        uint32View[index + 5] = textureIdAndRound;\n        index += 6;\n      }\n    } else {\n      const argb = bgr + (this.alpha * 255 << 24);\n      for (let i = offset; i < vertSize; i += 2) {\n        float32View[index] = positions[i];\n        float32View[index + 1] = positions[i + 1];\n        float32View[index + 2] = uvs[i];\n        float32View[index + 3] = uvs[i + 1];\n        uint32View[index + 4] = argb;\n        uint32View[index + 5] = textureId << 16;\n        index += 6;\n      }\n    }\n  }\n  // TODO rename to vertexSize\n  get vertSize() {\n    return this.vertexSize;\n  }\n  copyTo(gpuBuffer) {\n    gpuBuffer.indexOffset = this.indexOffset;\n    gpuBuffer.indexSize = this.indexSize;\n    gpuBuffer.vertexOffset = this.vertexOffset;\n    gpuBuffer.vertexSize = this.vertexSize;\n    gpuBuffer.color = this.color;\n    gpuBuffer.alpha = this.alpha;\n    gpuBuffer.texture = this.texture;\n    gpuBuffer.geometryData = this.geometryData;\n  }\n  reset() {\n    this.applyTransform = true;\n  }\n}\nexport { BatchableGraphics };","map":{"version":3,"names":["BatchableGraphics","constructor","batcher","batch","applyTransform","roundPixels","blendMode","renderable","groupBlendMode","packIndex","indexBuffer","index","indicesOffset","indices","geometryData","i","indexSize","indexOffset","vertexOffset","packAttributes","float32View","uint32View","textureId","geometry","graphics","positions","vertices","uvs","offset","vertSize","vertexSize","rgb","color","bgr","argb","multiplyHexColors","groupColor","alpha","groupAlpha","wt","groupTransform","textureIdAndRound","a","b","c","d","tx","ty","x","y","copyTo","gpuBuffer","texture","reset"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/graphics/shared/BatchableGraphics.ts"],"sourcesContent":["import { multiplyHexColors } from '../../container/utils/multiplyHexColors';\n\nimport type { Batch, BatchableObject, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Graphics } from './Graphics';\n\n/**\n * A batchable graphics object.\n * @ignore\n */\nexport class BatchableGraphics implements BatchableObject\n{\n    public indexStart: number;\n    public textureId: number;\n    public texture: Texture;\n    public location: number;\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public renderable: Graphics;\n    public indexOffset: number;\n    public indexSize: number;\n    public vertexOffset: number;\n    public vertexSize: number;\n    public color: number;\n    public alpha: number;\n    public applyTransform = true;\n    public roundPixels: 0 | 1 = 0;\n\n    public geometryData: { vertices: number[]; uvs: number[]; indices: number[]; };\n\n    get blendMode()\n    {\n        if (this.applyTransform)\n        {\n            return this.renderable.groupBlendMode;\n        }\n\n        return 'normal';\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        const indices = this.geometryData.indices;\n\n        for (let i = 0; i < this.indexSize; i++)\n        {\n            indexBuffer[index++] = indices[i + this.indexOffset] + indicesOffset - this.vertexOffset;\n        }\n    }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const geometry = this.geometryData;\n        const graphics = this.renderable;\n\n        const positions = geometry.vertices;\n        const uvs = geometry.uvs;\n\n        const offset = this.vertexOffset * 2;\n        const vertSize = (this.vertexOffset + this.vertexSize) * 2;\n\n        const rgb = this.color;\n        const bgr = (rgb >> 16) | (rgb & 0xff00) | ((rgb & 0xff) << 16);\n\n        if (this.applyTransform)\n        {\n            const argb = multiplyHexColors(bgr, graphics.groupColor)\n            + ((this.alpha * graphics.groupAlpha * 255) << 24);\n\n            const wt = graphics.groupTransform;\n            const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n            const a = wt.a;\n            const b = wt.b;\n            const c = wt.c;\n            const d = wt.d;\n            const tx = wt.tx;\n            const ty = wt.ty;\n\n            for (let i = offset; i < vertSize; i += 2)\n            {\n                const x = positions[i];\n                const y = positions[i + 1];\n\n                float32View[index] = (a * x) + (c * y) + tx;\n                float32View[index + 1] = (b * x) + (d * y) + ty;\n\n                float32View[index + 2] = uvs[i];\n                float32View[index + 3] = uvs[i + 1];\n\n                uint32View[index + 4] = argb;\n                uint32View[index + 5] = textureIdAndRound;\n\n                index += 6;\n            }\n        }\n        else\n        {\n            const argb = bgr + ((this.alpha * 255) << 24);\n\n            for (let i = offset; i < vertSize; i += 2)\n            {\n                float32View[index] = positions[i];\n                float32View[index + 1] = positions[i + 1];\n\n                float32View[index + 2] = uvs[i];\n                float32View[index + 3] = uvs[i + 1];\n\n                uint32View[index + 4] = argb;\n                uint32View[index + 5] = textureId << 16;\n\n                index += 6;\n            }\n        }\n    }\n\n    // TODO rename to vertexSize\n    get vertSize()\n    {\n        return this.vertexSize;\n    }\n\n    public copyTo(gpuBuffer: BatchableGraphics)\n    {\n        gpuBuffer.indexOffset = this.indexOffset;\n        gpuBuffer.indexSize = this.indexSize;\n\n        gpuBuffer.vertexOffset = this.vertexOffset;\n        gpuBuffer.vertexSize = this.vertexSize;\n\n        gpuBuffer.color = this.color;\n        gpuBuffer.alpha = this.alpha;\n\n        gpuBuffer.texture = this.texture;\n        gpuBuffer.geometryData = this.geometryData;\n    }\n\n    public reset()\n    {\n        this.applyTransform = true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}