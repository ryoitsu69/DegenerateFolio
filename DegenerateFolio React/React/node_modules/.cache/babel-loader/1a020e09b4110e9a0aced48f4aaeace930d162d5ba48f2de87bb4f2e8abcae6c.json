{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionFactory = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst utils_js_1 = require(\"../common/utils.js\");\nconst eip1559Transaction_js_1 = require(\"./eip1559Transaction.js\");\nconst eip2930Transaction_js_1 = require(\"./eip2930Transaction.js\");\nconst legacyTransaction_js_1 = require(\"./legacyTransaction.js\");\nconst extraTxTypes = new Map();\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n  constructor() {}\n  static typeToInt(txType) {\n    return Number((0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(txType)));\n  }\n  static registerTransactionType(type, txClass) {\n    const txType = TransactionFactory.typeToInt(type);\n    extraTxTypes.set(txType, txClass);\n  }\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  static fromTxData(txData) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return legacyTransaction_js_1.Transaction.fromTxData(txData, txOptions);\n    }\n    const txType = TransactionFactory.typeToInt(txData.type);\n    if (txType === 0) {\n      return legacyTransaction_js_1.Transaction.fromTxData(txData, txOptions);\n    }\n    if (txType === 1) {\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    if (txType === 2) {\n      return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromTxData(\n      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n      txData, txOptions);\n    }\n    const ExtraTransaction = extraTxTypes.get(txType);\n    if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) {\n      return ExtraTransaction.fromTxData(txData, txOptions);\n    }\n    throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n  }\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Uint8Array\n   * @param txOptions - The transaction options\n   */\n  static fromSerializedData(data) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      switch (data[0]) {\n        case 1:\n          return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n        case 2:\n          return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n        default:\n          {\n            const ExtraTransaction = extraTxTypes.get(Number(data[0]));\n            if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) {\n              return ExtraTransaction.fromSerializedTx(data, txOptions);\n            }\n            throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n          }\n      }\n    } else {\n      return legacyTransaction_js_1.Transaction.fromSerializedTx(data, txOptions);\n    }\n  }\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Uint8Array[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Uint8Array or Uint8Array[]\n   * @param txOptions - The transaction options\n   */\n  static fromBlockBodyData(data) {\n    let txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if ((0, web3_utils_1.isUint8Array)(data)) {\n      return this.fromSerializedData(data, txOptions);\n    }\n    if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return legacyTransaction_js_1.Transaction.fromValuesArray(data, txOptions);\n    }\n    throw new Error('Cannot decode transaction: unknown type input');\n  }\n}\nexports.TransactionFactory = TransactionFactory;","map":{"version":3,"names":["web3_utils_1","require","utils_js_1","eip1559Transaction_js_1","eip2930Transaction_js_1","legacyTransaction_js_1","extraTxTypes","Map","TransactionFactory","constructor","typeToInt","txType","Number","uint8ArrayToBigInt","toUint8Array","registerTransactionType","type","txClass","set","fromTxData","txData","txOptions","arguments","length","undefined","Transaction","AccessListEIP2930Transaction","FeeMarketEIP1559Transaction","ExtraTransaction","get","Error","concat","fromSerializedData","data","fromSerializedTx","fromBlockBodyData","isUint8Array","Array","isArray","fromValuesArray","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-accounts/src/tx/transactionFactory.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Numbers } from 'web3-types';\nimport { isUint8Array } from 'web3-utils';\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\nimport type { TypedTransaction } from '../types.js';\n\nimport type {\n\tAccessListEIP2930TxData,\n\tFeeMarketEIP1559TxData,\n\tTxData,\n\tTxOptions,\n} from './types.js';\nimport { BaseTransaction } from './baseTransaction.js';\n\nconst extraTxTypes: Map<Numbers, typeof BaseTransaction<unknown>> = new Map();\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TransactionFactory {\n\t// It is not possible to instantiate a TransactionFactory object.\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n\tprivate constructor() {}\n\n\tpublic static typeToInt(txType: Numbers) {\n\t\treturn Number(uint8ArrayToBigInt(toUint8Array(txType)));\n\t}\n\n\tpublic static registerTransactionType<NewTxTypeClass extends typeof BaseTransaction<unknown>>(\n\t\ttype: Numbers,\n\t\ttxClass: NewTxTypeClass,\n\t) {\n\t\tconst txType = TransactionFactory.typeToInt(type);\n\t\textraTxTypes.set(txType, txClass);\n\t}\n\n\t/**\n\t * Create a transaction from a `txData` object\n\t *\n\t * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n\t * @param txOptions - Options to pass on to the constructor of the transaction\n\t */\n\tpublic static fromTxData(\n\t\ttxData: TxData | TypedTransaction,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (!('type' in txData) || txData.type === undefined) {\n\t\t\t// Assume legacy transaction\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tconst txType = TransactionFactory.typeToInt(txData.type);\n\t\tif (txType === 0) {\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tif (txType === 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<AccessListEIP2930TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tif (txType === 2) {\n\t\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<FeeMarketEIP1559TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tconst ExtraTransaction = extraTxTypes.get(txType);\n\t\tif (ExtraTransaction?.fromTxData) {\n\t\t\treturn ExtraTransaction.fromTxData(txData, txOptions) as TypedTransaction;\n\t\t}\n\n\t\tthrow new Error(`Tx instantiation with type ${txType} not supported`);\n\t}\n\n\t/**\n\t * This method tries to decode serialized data.\n\t *\n\t * @param data - The data Uint8Array\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromSerializedData(\n\t\tdata: Uint8Array,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (data[0] <= 0x7f) {\n\t\t\t// Determine the type.\n\t\t\tswitch (data[0]) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tdefault: {\n\t\t\t\t\tconst ExtraTransaction = extraTxTypes.get(Number(data[0]));\n\t\t\t\t\tif (ExtraTransaction?.fromSerializedTx) {\n\t\t\t\t\t\treturn ExtraTransaction.fromSerializedTx(\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\ttxOptions,\n\t\t\t\t\t\t) as TypedTransaction;\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error(`TypedTransaction with ID ${data[0]} unknown`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn Transaction.fromSerializedTx(data, txOptions);\n\t\t}\n\t}\n\n\t/**\n\t * When decoding a BlockBody, in the transactions field, a field is either:\n\t * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n\t * A Uint8Array[] (Legacy Transaction)\n\t * This method returns the right transaction.\n\t *\n\t * @param data - A Uint8Array or Uint8Array[]\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromBlockBodyData(data: Uint8Array | Uint8Array[], txOptions: TxOptions = {}) {\n\t\tif (isUint8Array(data)) {\n\t\t\treturn this.fromSerializedData(data , txOptions);\n\t\t}\n\t\tif (Array.isArray(data)) {\n\t\t\t// It is a legacy transaction\n\t\t\treturn Transaction.fromValuesArray(data, txOptions);\n\t\t}\n\t\tthrow new Error('Cannot decode transaction: unknown type input');\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}