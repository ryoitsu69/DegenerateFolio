{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromTwosComplement = exports.toTwosComplement = exports.leftPad = exports.rightPad = exports.padRight = exports.padLeft = void 0;\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst converters_js_1 = require(\"./converters.js\");\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n *\n * console.log(web3.utils.padLeft('0x123', 10));\n * >0x0000000123\n * ```\n */\nconst padLeft = (value, characterAmount, sign = '0') => {\n  // To avoid duplicate code and circular dependency we will\n  // use `padLeft` implementation from `web3-validator`\n  if (typeof value === 'string') {\n    if (!(0, web3_validator_1.isHexStrict)(value)) {\n      return value.padStart(characterAmount, sign);\n    }\n    return web3_validator_1.utils.padLeft(value, characterAmount, sign);\n  }\n  web3_validator_1.validator.validate(['int'], [value]);\n  return web3_validator_1.utils.padLeft(value, characterAmount, sign);\n};\nexports.padLeft = padLeft;\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n * console.log(web3.utils.padRight('0x123', 10));\n * > 0x1230000000\n *\n * console.log(web3.utils.padRight('0x123', 10, '1'));\n * > 0x1231111111\n * ```\n */\nconst padRight = (value, characterAmount, sign = '0') => {\n  if (typeof value === 'string' && !(0, web3_validator_1.isHexStrict)(value)) {\n    return value.padEnd(characterAmount, sign);\n  }\n  web3_validator_1.validator.validate(['int'], [value]);\n  const hexString = typeof value === 'string' && (0, web3_validator_1.isHexStrict)(value) ? value : (0, converters_js_1.numberToHex)(value);\n  const prefixLength = hexString.startsWith('-') ? 3 : 2;\n  return hexString.padEnd(characterAmount + prefixLength, sign);\n};\nexports.padRight = padRight;\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`\n */\nexports.rightPad = exports.padRight;\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`\n */\nexports.leftPad = exports.padLeft;\n/**\n * Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n *\n * @returns The hex string of the two’s complement.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toTwosComplement(13, 32));\n * > 0x0000000000000000000000000000000d\n *\n * console.log(web3.utils.toTwosComplement('-0x1', 32));\n * > 0xffffffffffffffffffffffffffffffff\n *\n * console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));\n * > 0x00000000000000000020000000000000\n * ```\n */\nconst toTwosComplement = (value, nibbleWidth = 64) => {\n  web3_validator_1.validator.validate(['int'], [value]);\n  const val = (0, converters_js_1.toNumber)(value);\n  if (val >= 0) return (0, exports.padLeft)((0, converters_js_1.toHex)(val), nibbleWidth);\n  const largestBit = (0, web3_validator_1.bigintPower)(BigInt(2), BigInt(nibbleWidth * 4));\n  if (-val >= largestBit) {\n    throw new web3_errors_1.NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);\n  }\n  const updatedVal = BigInt(val);\n  const complement = updatedVal + largestBit;\n  return (0, exports.padLeft)((0, converters_js_1.numberToHex)(complement), nibbleWidth);\n};\nexports.toTwosComplement = toTwosComplement;\n/**\n * Converts the twos complement into a decimal number or big int.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n * @returns The decimal number or big int.\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromTwosComplement('0x0000000000000000000000000000000d', 32'));\n * > 13\n *\n * console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));\n * > 9007199254740992n\n * ```\n */\nconst fromTwosComplement = (value, nibbleWidth = 64) => {\n  web3_validator_1.validator.validate(['int'], [value]);\n  const val = (0, converters_js_1.toNumber)(value);\n  if (val < 0) return val;\n  const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));\n  if (largestBit > nibbleWidth * 4) throw new web3_errors_1.NibbleWidthError(`value: \"${value}\", nibbleWidth: \"${nibbleWidth}\"`);\n  // check the largest bit to see if negative\n  if (nibbleWidth * 4 !== largestBit) return val;\n  const complement = (0, web3_validator_1.bigintPower)(BigInt(2), BigInt(nibbleWidth) * BigInt(4));\n  return (0, converters_js_1.toNumber)(BigInt(val) - complement);\n};\nexports.fromTwosComplement = fromTwosComplement;","map":{"version":3,"names":["web3_errors_1","require","web3_validator_1","converters_js_1","padLeft","value","characterAmount","sign","isHexStrict","padStart","utils","validator","validate","exports","padRight","padEnd","hexString","numberToHex","prefixLength","startsWith","rightPad","leftPad","toTwosComplement","nibbleWidth","val","toNumber","toHex","largestBit","bigintPower","BigInt","NibbleWidthError","updatedVal","complement","fromTwosComplement","Math","ceil","log","Number"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-utils/src/string_manipulation.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @module Utils\n */\n\nimport { Numbers } from 'web3-types';\nimport { NibbleWidthError } from 'web3-errors';\nimport { isHexStrict, validator, utils as validatorUtils, bigintPower } from 'web3-validator';\nimport { numberToHex, toHex, toNumber } from './converters.js';\n\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n *\n * console.log(web3.utils.padLeft('0x123', 10));\n * >0x0000000123\n * ```\n */\nexport const padLeft = (value: Numbers, characterAmount: number, sign = '0'): string => {\n\t// To avoid duplicate code and circular dependency we will\n\t// use `padLeft` implementation from `web3-validator`\n\n\tif (typeof value === 'string') {\n\t\tif (!isHexStrict(value)) {\n\t\t\treturn value.padStart(characterAmount, sign);\n\t\t}\n\t\treturn validatorUtils.padLeft(value, characterAmount, sign);\n\t}\n\n\tvalidator.validate(['int'], [value]);\n\n\treturn validatorUtils.padLeft(value, characterAmount, sign);\n};\n\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string.\n * @param value - The value to be padded.\n * @param characterAmount - The amount of characters the string should have.\n * @param sign - The sign to be added (default is 0).\n * @returns The padded string.\n *\n * @example\n * ```ts\n * console.log(web3.utils.padRight('0x123', 10));\n * > 0x1230000000\n *\n * console.log(web3.utils.padRight('0x123', 10, '1'));\n * > 0x1231111111\n * ```\n */\nexport const padRight = (value: Numbers, characterAmount: number, sign = '0'): string => {\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn value.padEnd(characterAmount, sign);\n\t}\n\n\tvalidator.validate(['int'], [value]);\n\n\tconst hexString = typeof value === 'string' && isHexStrict(value) ? value : numberToHex(value);\n\n\tconst prefixLength = hexString.startsWith('-') ? 3 : 2;\n\treturn hexString.padEnd(characterAmount + prefixLength, sign);\n};\n\n/**\n * Adds a padding on the right of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padRight`\n */\nexport const rightPad = padRight;\n\n/**\n * Adds a padding on the left of a string, if value is a integer or bigInt will be converted to a hex string. @alias `padLeft`\n */\nexport const leftPad = padLeft;\n\n/**\n * Converts a negative number into the two’s complement and return a hexstring of 64 nibbles.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n *\n * @returns The hex string of the two’s complement.\n *\n * @example\n * ```ts\n * console.log(web3.utils.toTwosComplement(13, 32));\n * > 0x0000000000000000000000000000000d\n *\n * console.log(web3.utils.toTwosComplement('-0x1', 32));\n * > 0xffffffffffffffffffffffffffffffff\n *\n * console.log(web3.utils.toTwosComplement(BigInt('9007199254740992'), 32));\n * > 0x00000000000000000020000000000000\n * ```\n */\nexport const toTwosComplement = (value: Numbers, nibbleWidth = 64): string => {\n\tvalidator.validate(['int'], [value]);\n\n\tconst val = toNumber(value);\n\n\tif (val >= 0) return padLeft(toHex(val), nibbleWidth);\n\n\tconst largestBit = bigintPower(BigInt(2), BigInt(nibbleWidth * 4));\n\tif (-val >= largestBit) {\n\t\tthrow new NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);\n\t}\n\tconst updatedVal = BigInt(val);\n\n\tconst complement = updatedVal + largestBit;\n\n\treturn padLeft(numberToHex(complement), nibbleWidth);\n};\n\n/**\n * Converts the twos complement into a decimal number or big int.\n * @param value - The value to be converted.\n * @param nibbleWidth - The nibble width of the hex string (default is 64).\n * @returns The decimal number or big int.\n *\n * @example\n * ```ts\n * console.log(web3.utils.fromTwosComplement('0x0000000000000000000000000000000d', 32'));\n * > 13\n *\n * console.log(web3.utils.fromTwosComplement('0x00000000000000000020000000000000', 32));\n * > 9007199254740992n\n * ```\n */\nexport const fromTwosComplement = (value: Numbers, nibbleWidth = 64): number | bigint => {\n\tvalidator.validate(['int'], [value]);\n\n\tconst val = toNumber(value);\n\n\tif (val < 0) return val;\n\n\tconst largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));\n\n\tif (largestBit > nibbleWidth * 4)\n\t\tthrow new NibbleWidthError(`value: \"${value}\", nibbleWidth: \"${nibbleWidth}\"`);\n\n\t// check the largest bit to see if negative\n\tif (nibbleWidth * 4 !== largestBit) return val;\n\n\tconst complement = bigintPower(BigInt(2), BigInt(nibbleWidth) * BigInt(4));\n\n\treturn toNumber(BigInt(val) - complement);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}