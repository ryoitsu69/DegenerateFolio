{"ast":null,"code":"import { ENV } from \"@pixi/constants\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { settings } from \"@pixi/settings\";\nlet CONTEXT_UID_COUNTER = 0;\nclass ContextSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this.renderer = renderer, this.webGLVersion = 1, this.extensions = {}, this.supports = {\n      uint32Indices: !1\n    }, this.handleContextLost = this.handleContextLost.bind(this), this.handleContextRestored = this.handleContextRestored.bind(this);\n  }\n  /**\n   * `true` if the context is lost\n   * @readonly\n   */\n  get isLost() {\n    return !this.gl || this.gl.isContextLost();\n  }\n  /**\n   * Handles the context change event.\n   * @param {WebGLRenderingContext} gl - New WebGL context.\n   */\n  contextChange(gl) {\n    this.gl = gl, this.renderer.gl = gl, this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n  }\n  init(options) {\n    if (options.context) this.initFromContext(options.context);else {\n      const alpha = this.renderer.background.alpha < 1,\n        premultipliedAlpha = options.premultipliedAlpha;\n      this.preserveDrawingBuffer = options.preserveDrawingBuffer, this.useContextAlpha = options.useContextAlpha, this.powerPreference = options.powerPreference, this.initFromOptions({\n        alpha,\n        premultipliedAlpha,\n        antialias: options.antialias,\n        stencil: !0,\n        preserveDrawingBuffer: options.preserveDrawingBuffer,\n        powerPreference: options.powerPreference\n      });\n    }\n  }\n  /**\n   * Initializes the context.\n   * @protected\n   * @param {WebGLRenderingContext} gl - WebGL context\n   */\n  initFromContext(gl) {\n    this.gl = gl, this.validateContext(gl), this.renderer.gl = gl, this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++, this.renderer.runners.contextChange.emit(gl);\n    const view = this.renderer.view;\n    view.addEventListener !== void 0 && (view.addEventListener(\"webglcontextlost\", this.handleContextLost, !1), view.addEventListener(\"webglcontextrestored\", this.handleContextRestored, !1));\n  }\n  /**\n   * Initialize from context options\n   * @protected\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n   * @param {object} options - context attributes\n   */\n  initFromOptions(options) {\n    const gl = this.createContext(this.renderer.view, options);\n    this.initFromContext(gl);\n  }\n  /**\n   * Helper class to create a WebGL Context\n   * @param canvas - the canvas element that we will get the context from\n   * @param options - An options object that gets passed in to the canvas element containing the\n   *    context attributes\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n   * @returns {WebGLRenderingContext} the WebGL context\n   */\n  createContext(canvas, options) {\n    let gl;\n    if (settings.PREFER_ENV >= ENV.WEBGL2 && (gl = canvas.getContext(\"webgl2\", options)), gl) this.webGLVersion = 2;else if (this.webGLVersion = 1, gl = canvas.getContext(\"webgl\", options) || canvas.getContext(\"experimental-webgl\", options), !gl) throw new Error(\"This browser does not support WebGL. Try using the canvas renderer\");\n    return this.gl = gl, this.getExtensions(), this.gl;\n  }\n  /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */\n  getExtensions() {\n    const {\n        gl\n      } = this,\n      common = {\n        loseContext: gl.getExtension(\"WEBGL_lose_context\"),\n        anisotropicFiltering: gl.getExtension(\"EXT_texture_filter_anisotropic\"),\n        floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n        s3tc: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n        s3tc_sRGB: gl.getExtension(\"WEBGL_compressed_texture_s3tc_srgb\"),\n        // eslint-disable-line camelcase\n        etc: gl.getExtension(\"WEBGL_compressed_texture_etc\"),\n        etc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n        pvrtc: gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\"),\n        atc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\n        astc: gl.getExtension(\"WEBGL_compressed_texture_astc\"),\n        bptc: gl.getExtension(\"EXT_texture_compression_bptc\")\n      };\n    this.webGLVersion === 1 ? Object.assign(this.extensions, common, {\n      drawBuffers: gl.getExtension(\"WEBGL_draw_buffers\"),\n      depthTexture: gl.getExtension(\"WEBGL_depth_texture\"),\n      vertexArrayObject: gl.getExtension(\"OES_vertex_array_object\") || gl.getExtension(\"MOZ_OES_vertex_array_object\") || gl.getExtension(\"WEBKIT_OES_vertex_array_object\"),\n      uint32ElementIndex: gl.getExtension(\"OES_element_index_uint\"),\n      // Floats and half-floats\n      floatTexture: gl.getExtension(\"OES_texture_float\"),\n      floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n      textureHalfFloat: gl.getExtension(\"OES_texture_half_float\"),\n      textureHalfFloatLinear: gl.getExtension(\"OES_texture_half_float_linear\")\n    }) : this.webGLVersion === 2 && Object.assign(this.extensions, common, {\n      // Floats and half-floats\n      colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\")\n    });\n  }\n  /**\n   * Handles a lost webgl context\n   * @param {WebGLContextEvent} event - The context lost event.\n   */\n  handleContextLost(event) {\n    event.preventDefault(), setTimeout(() => {\n      this.gl.isContextLost() && this.extensions.loseContext && this.extensions.loseContext.restoreContext();\n    }, 0);\n  }\n  /** Handles a restored webgl context. */\n  handleContextRestored() {\n    this.renderer.runners.contextChange.emit(this.gl);\n  }\n  destroy() {\n    const view = this.renderer.view;\n    this.renderer = null, view.removeEventListener !== void 0 && (view.removeEventListener(\"webglcontextlost\", this.handleContextLost), view.removeEventListener(\"webglcontextrestored\", this.handleContextRestored)), this.gl.useProgram(null), this.extensions.loseContext && this.extensions.loseContext.loseContext();\n  }\n  /** Handle the post-render runner event. */\n  postrender() {\n    this.renderer.objectRenderer.renderingToScreen && this.gl.flush();\n  }\n  /**\n   * Validate context.\n   * @param {WebGLRenderingContext} gl - Render context.\n   */\n  validateContext(gl) {\n    const attributes = gl.getContextAttributes(),\n      isWebGl2 = \"WebGL2RenderingContext\" in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n    isWebGl2 && (this.webGLVersion = 2), attributes && !attributes.stencil && console.warn(\"Provided WebGL context does not have a stencil buffer, masks may not render correctly\");\n    const hasuint32 = isWebGl2 || !!gl.getExtension(\"OES_element_index_uint\");\n    this.supports.uint32Indices = hasuint32, hasuint32 || console.warn(\"Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly\");\n  }\n}\nContextSystem.defaultOptions = {\n  /**\n   * {@link PIXI.IRendererOptions.context}\n   * @default null\n   * @memberof PIXI.settings.RENDER_OPTIONS\n   */\n  context: null,\n  /**\n   * {@link PIXI.IRendererOptions.antialias}\n   * @default false\n   * @memberof PIXI.settings.RENDER_OPTIONS\n   */\n  antialias: !1,\n  /**\n   * {@link PIXI.IRendererOptions.premultipliedAlpha}\n   * @default true\n   * @memberof PIXI.settings.RENDER_OPTIONS\n   */\n  premultipliedAlpha: !0,\n  /**\n   * {@link PIXI.IRendererOptions.preserveDrawingBuffer}\n   * @default false\n   * @memberof PIXI.settings.RENDER_OPTIONS\n   */\n  preserveDrawingBuffer: !1,\n  /**\n   * {@link PIXI.IRendererOptions.powerPreference}\n   * @default default\n   * @memberof PIXI.settings.RENDER_OPTIONS\n   */\n  powerPreference: \"default\"\n}, /** @ignore */\nContextSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"context\"\n};\nextensions.add(ContextSystem);\nexport { ContextSystem };","map":{"version":3,"names":["CONTEXT_UID_COUNTER","ContextSystem","constructor","renderer","webGLVersion","extensions","supports","uint32Indices","handleContextLost","bind","handleContextRestored","isLost","gl","isContextLost","contextChange","CONTEXT_UID","init","options","context","initFromContext","alpha","background","premultipliedAlpha","preserveDrawingBuffer","useContextAlpha","powerPreference","initFromOptions","antialias","stencil","validateContext","runners","emit","view","addEventListener","createContext","canvas","settings","PREFER_ENV","ENV","WEBGL2","getContext","Error","getExtensions","common","loseContext","getExtension","anisotropicFiltering","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","Object","assign","drawBuffers","depthTexture","vertexArrayObject","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","colorBufferFloat","event","preventDefault","setTimeout","restoreContext","destroy","removeEventListener","useProgram","postrender","objectRenderer","renderingToScreen","flush","attributes","getContextAttributes","isWebGl2","globalThis","WebGL2RenderingContext","console","warn","hasuint32","defaultOptions","extension","type","ExtensionType","RendererSystem","name","add"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/context/ContextSystem.ts"],"sourcesContent":["import { ENV } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { settings } from '@pixi/settings';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { ICanvas } from '@pixi/settings';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\nlet CONTEXT_UID_COUNTER = 0;\n\n/**\n * Options for the context system.\n * @memberof PIXI\n */\nexport interface ContextSystemOptions\n{\n    /**\n     * **Deprecated since 7.0.0, use `premultipliedAlpha` and `backgroundAlpha` instead.**\n     *\n     * Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     * canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * If you want to set transparency, please use `backgroundAlpha`.\n     *\n     * **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     * set to `true` and `premultipliedAlpha` will be to `false`.\n     * @deprecated since 7.0.0\n     * @memberof PIXI.IRendererOptions\n     */\n    useContextAlpha?: boolean | 'notMultiplied';\n    /**\n     * **WebGL Only.** User-provided WebGL rendering context object.\n     * @memberof PIXI.IRendererOptions\n     */\n    context: IRenderingContext | null;\n    /**\n     * **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @memberof PIXI.IRendererOptions\n     */\n    antialias: boolean;\n    /**\n     * **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'default'`, `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @memberof PIXI.IRendererOptions\n     */\n    powerPreference: WebGLPowerPreference;\n    /**\n     * **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @memberof PIXI.IRendererOptions\n     */\n    premultipliedAlpha: boolean;\n    /**\n     * **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @memberof PIXI.IRendererOptions\n     */\n    preserveDrawingBuffer: boolean;\n}\n\nexport interface ISupportDict\n{\n    uint32Indices: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @memberof PIXI\n */\nexport class ContextSystem implements ISystem<ContextSystemOptions>\n{\n    /** @ignore */\n    static defaultOptions: ContextSystemOptions = {\n        /**\n         * {@link PIXI.IRendererOptions.context}\n         * @default null\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        context: null,\n        /**\n         * {@link PIXI.IRendererOptions.antialias}\n         * @default false\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        antialias: false,\n        /**\n         * {@link PIXI.IRendererOptions.premultipliedAlpha}\n         * @default true\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        premultipliedAlpha: true,\n        /**\n         * {@link PIXI.IRendererOptions.preserveDrawingBuffer}\n         * @default false\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        preserveDrawingBuffer: false,\n        /**\n         * {@link PIXI.IRendererOptions.powerPreference}\n         * @default default\n         * @memberof PIXI.settings.RENDER_OPTIONS\n         */\n        powerPreference: 'default',\n    };\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'context',\n    };\n\n    /**\n     * Either 1 or 2 to reflect the WebGL version being used.\n     * @readonly\n     */\n    public webGLVersion: number;\n\n    /**\n     * Features supported by current context.\n     * @type {object}\n     * @readonly\n     * @property {boolean} uint32Indices - Support for 32-bit indices buffer.\n     */\n    readonly supports: ISupportDict;\n\n    preserveDrawingBuffer: boolean;\n    powerPreference: WebGLPowerPreference;\n\n    /**\n     * Pass-thru setting for the canvas' context `alpha` property. This is typically\n     * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n     * @member {boolean}\n     * @deprecated since 7.0.0\n     */\n    useContextAlpha: boolean | 'notMultiplied';\n\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.webGLVersion = 1;\n        this.extensions = {};\n\n        this.supports = {\n            uint32Indices: false,\n        };\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n    }\n\n    init(options: ContextSystemOptions): void\n    {\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this.renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha;\n\n            this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n            this.useContextAlpha = options.useContextAlpha;\n            this.powerPreference = options.powerPreference;\n\n            this.initFromOptions({\n                alpha,\n                premultipliedAlpha,\n                antialias: options.antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference,\n            });\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    initFromContext(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.validateContext(gl);\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n        this.renderer.runners.contextChange.emit(gl);\n\n        const view = this.renderer.view;\n\n        if (view.addEventListener !== undefined)\n        {\n            view.addEventListener('webglcontextlost', this.handleContextLost, false);\n            view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n        }\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param {object} options - context attributes\n     */\n    initFromOptions(options: WebGLContextAttributes): void\n    {\n        const gl = this.createContext(this.renderer.view, options);\n\n        this.initFromContext(gl);\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param canvas - the canvas element that we will get the context from\n     * @param options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    createContext(canvas: ICanvas, options: WebGLContextAttributes): IRenderingContext\n    {\n        let gl;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (gl)\n        {\n            this.webGLVersion = 2;\n        }\n        else\n        {\n            this.webGLVersion = 1;\n\n            gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as IRenderingContext;\n\n        this.getExtensions();\n\n        return this.gl;\n    }\n\n    /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc'),\n            bptc: gl.getExtension('EXT_texture_compression_bptc')\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            Object.assign(this.extensions, common, {\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n            });\n        }\n        else if (this.webGLVersion === 2)\n        {\n            Object.assign(this.extensions, common, {\n                // Floats and half-floats\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float')\n            });\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        // Prevent default to be able to restore the context\n        event.preventDefault();\n\n        // Restore the context after this event has exited\n        setTimeout(() =>\n        {\n            if (this.gl.isContextLost() && this.extensions.loseContext)\n            {\n                this.extensions.loseContext.restoreContext();\n            }\n        }, 0);\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this.renderer.runners.contextChange.emit(this.gl);\n    }\n\n    destroy(): void\n    {\n        const view = this.renderer.view;\n\n        this.renderer = null;\n\n        // remove listeners\n        if (view.removeEventListener !== undefined)\n        {\n            view.removeEventListener('webglcontextlost', this.handleContextLost);\n            view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n        }\n\n        this.gl.useProgram(null);\n\n        if (this.extensions.loseContext)\n        {\n            this.extensions.loseContext.loseContext();\n        }\n    }\n\n    /** Handle the post-render runner event. */\n    protected postrender(): void\n    {\n        if (this.renderer.objectRenderer.renderingToScreen)\n        {\n            this.gl.flush();\n        }\n    }\n\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: IRenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        const isWebGl2 = 'WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n\n        if (isWebGl2)\n        {\n            this.webGLVersion = 2;\n        }\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n\n        const hasuint32 = isWebGl2 || !!(gl as WebGLRenderingContext).getExtension('OES_element_index_uint');\n\n        this.supports.uint32Indices = hasuint32;\n\n        if (!hasuint32)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n    }\n}\n\nextensions.add(ContextSystem);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}