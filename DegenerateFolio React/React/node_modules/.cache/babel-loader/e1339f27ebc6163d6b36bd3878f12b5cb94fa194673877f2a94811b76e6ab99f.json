{"ast":null,"code":"import { randomAsU8a } from '../random/asU8a.js';\nimport { naclSecretbox } from './tweetnacl.js';\n/**\n * @name naclEncrypt\n * @summary Encrypts a message using the supplied secretKey and nonce\n * @description\n * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclEncrypt } from '@polkadot/util-crypto';\n *\n * naclEncrypt([...], [...]); // => [...]\n * ```\n */\nexport function naclEncrypt(message, secret) {\n  let nonce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : randomAsU8a(24);\n  return {\n    encrypted: naclSecretbox(message, nonce, secret),\n    nonce\n  };\n}","map":{"version":3,"names":["randomAsU8a","naclSecretbox","naclEncrypt","message","secret","nonce","arguments","length","undefined","encrypted"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/nacl/encrypt.js"],"sourcesContent":["import { randomAsU8a } from '../random/asU8a.js';\nimport { naclSecretbox } from './tweetnacl.js';\n/**\n * @name naclEncrypt\n * @summary Encrypts a message using the supplied secretKey and nonce\n * @description\n * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclEncrypt } from '@polkadot/util-crypto';\n *\n * naclEncrypt([...], [...]); // => [...]\n * ```\n */\nexport function naclEncrypt(message, secret, nonce = randomAsU8a(24)) {\n    return {\n        encrypted: naclSecretbox(message, nonce, secret),\n        nonce\n    };\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,oBAAoB;AAChD,SAASC,aAAa,QAAQ,gBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAA2B;EAAA,IAAzBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,WAAW,CAAC,EAAE,CAAC;EAChE,OAAO;IACHS,SAAS,EAAER,aAAa,CAACE,OAAO,EAAEE,KAAK,EAAED,MAAM,CAAC;IAChDC;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}