{"ast":null,"code":"import { BN, bnToU8a, compactAddLength, hexToU8a, isBigInt, isBn, isHex, isNumber, isString, stringToU8a } from '@polkadot/util';\nimport { blake2AsU8a } from '../blake2/asU8a.js';\nimport { BN_LE_256_OPTS } from '../bn.js';\nconst RE_NUMBER = /^\\d+$/;\nconst JUNCTION_ID_LEN = 32;\nexport class DeriveJunction {\n  __internal__chainCode = new Uint8Array(32);\n  __internal__isHard = false;\n  static from(value) {\n    const result = new DeriveJunction();\n    const [code, isHard] = value.startsWith('/') ? [value.substring(1), true] : [value, false];\n    result.soft(RE_NUMBER.test(code) ? new BN(code, 10) : code);\n    return isHard ? result.harden() : result;\n  }\n  get chainCode() {\n    return this.__internal__chainCode;\n  }\n  get isHard() {\n    return this.__internal__isHard;\n  }\n  get isSoft() {\n    return !this.__internal__isHard;\n  }\n  hard(value) {\n    return this.soft(value).harden();\n  }\n  harden() {\n    this.__internal__isHard = true;\n    return this;\n  }\n  soft(value) {\n    if (isNumber(value) || isBn(value) || isBigInt(value)) {\n      return this.soft(bnToU8a(value, BN_LE_256_OPTS));\n    } else if (isHex(value)) {\n      return this.soft(hexToU8a(value));\n    } else if (isString(value)) {\n      return this.soft(compactAddLength(stringToU8a(value)));\n    } else if (value.length > JUNCTION_ID_LEN) {\n      return this.soft(blake2AsU8a(value));\n    }\n    this.__internal__chainCode.fill(0);\n    this.__internal__chainCode.set(value, 0);\n    return this;\n  }\n  soften() {\n    this.__internal__isHard = false;\n    return this;\n  }\n}","map":{"version":3,"names":["BN","bnToU8a","compactAddLength","hexToU8a","isBigInt","isBn","isHex","isNumber","isString","stringToU8a","blake2AsU8a","BN_LE_256_OPTS","RE_NUMBER","JUNCTION_ID_LEN","DeriveJunction","__internal__chainCode","Uint8Array","__internal__isHard","from","value","result","code","isHard","startsWith","substring","soft","test","harden","chainCode","isSoft","hard","length","fill","set","soften"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/key/DeriveJunction.js"],"sourcesContent":["import { BN, bnToU8a, compactAddLength, hexToU8a, isBigInt, isBn, isHex, isNumber, isString, stringToU8a } from '@polkadot/util';\nimport { blake2AsU8a } from '../blake2/asU8a.js';\nimport { BN_LE_256_OPTS } from '../bn.js';\nconst RE_NUMBER = /^\\d+$/;\nconst JUNCTION_ID_LEN = 32;\nexport class DeriveJunction {\n    __internal__chainCode = new Uint8Array(32);\n    __internal__isHard = false;\n    static from(value) {\n        const result = new DeriveJunction();\n        const [code, isHard] = value.startsWith('/')\n            ? [value.substring(1), true]\n            : [value, false];\n        result.soft(RE_NUMBER.test(code)\n            ? new BN(code, 10)\n            : code);\n        return isHard\n            ? result.harden()\n            : result;\n    }\n    get chainCode() {\n        return this.__internal__chainCode;\n    }\n    get isHard() {\n        return this.__internal__isHard;\n    }\n    get isSoft() {\n        return !this.__internal__isHard;\n    }\n    hard(value) {\n        return this.soft(value).harden();\n    }\n    harden() {\n        this.__internal__isHard = true;\n        return this;\n    }\n    soft(value) {\n        if (isNumber(value) || isBn(value) || isBigInt(value)) {\n            return this.soft(bnToU8a(value, BN_LE_256_OPTS));\n        }\n        else if (isHex(value)) {\n            return this.soft(hexToU8a(value));\n        }\n        else if (isString(value)) {\n            return this.soft(compactAddLength(stringToU8a(value)));\n        }\n        else if (value.length > JUNCTION_ID_LEN) {\n            return this.soft(blake2AsU8a(value));\n        }\n        this.__internal__chainCode.fill(0);\n        this.__internal__chainCode.set(value, 0);\n        return this;\n    }\n    soften() {\n        this.__internal__isHard = false;\n        return this;\n    }\n}\n"],"mappings":"AAAA,SAASA,EAAE,EAAEC,OAAO,EAAEC,gBAAgB,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,gBAAgB;AAChI,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,cAAc,QAAQ,UAAU;AACzC,MAAMC,SAAS,GAAG,OAAO;AACzB,MAAMC,eAAe,GAAG,EAAE;AAC1B,OAAO,MAAMC,cAAc,CAAC;EACxBC,qBAAqB,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;EAC1CC,kBAAkB,GAAG,KAAK;EAC1B,OAAOC,IAAIA,CAACC,KAAK,EAAE;IACf,MAAMC,MAAM,GAAG,IAAIN,cAAc,CAAC,CAAC;IACnC,MAAM,CAACO,IAAI,EAAEC,MAAM,CAAC,GAAGH,KAAK,CAACI,UAAU,CAAC,GAAG,CAAC,GACtC,CAACJ,KAAK,CAACK,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAC1B,CAACL,KAAK,EAAE,KAAK,CAAC;IACpBC,MAAM,CAACK,IAAI,CAACb,SAAS,CAACc,IAAI,CAACL,IAAI,CAAC,GAC1B,IAAIrB,EAAE,CAACqB,IAAI,EAAE,EAAE,CAAC,GAChBA,IAAI,CAAC;IACX,OAAOC,MAAM,GACPF,MAAM,CAACO,MAAM,CAAC,CAAC,GACfP,MAAM;EAChB;EACA,IAAIQ,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACb,qBAAqB;EACrC;EACA,IAAIO,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACL,kBAAkB;EAClC;EACA,IAAIY,MAAMA,CAAA,EAAG;IACT,OAAO,CAAC,IAAI,CAACZ,kBAAkB;EACnC;EACAa,IAAIA,CAACX,KAAK,EAAE;IACR,OAAO,IAAI,CAACM,IAAI,CAACN,KAAK,CAAC,CAACQ,MAAM,CAAC,CAAC;EACpC;EACAA,MAAMA,CAAA,EAAG;IACL,IAAI,CAACV,kBAAkB,GAAG,IAAI;IAC9B,OAAO,IAAI;EACf;EACAQ,IAAIA,CAACN,KAAK,EAAE;IACR,IAAIZ,QAAQ,CAACY,KAAK,CAAC,IAAId,IAAI,CAACc,KAAK,CAAC,IAAIf,QAAQ,CAACe,KAAK,CAAC,EAAE;MACnD,OAAO,IAAI,CAACM,IAAI,CAACxB,OAAO,CAACkB,KAAK,EAAER,cAAc,CAAC,CAAC;IACpD,CAAC,MACI,IAAIL,KAAK,CAACa,KAAK,CAAC,EAAE;MACnB,OAAO,IAAI,CAACM,IAAI,CAACtB,QAAQ,CAACgB,KAAK,CAAC,CAAC;IACrC,CAAC,MACI,IAAIX,QAAQ,CAACW,KAAK,CAAC,EAAE;MACtB,OAAO,IAAI,CAACM,IAAI,CAACvB,gBAAgB,CAACO,WAAW,CAACU,KAAK,CAAC,CAAC,CAAC;IAC1D,CAAC,MACI,IAAIA,KAAK,CAACY,MAAM,GAAGlB,eAAe,EAAE;MACrC,OAAO,IAAI,CAACY,IAAI,CAACf,WAAW,CAACS,KAAK,CAAC,CAAC;IACxC;IACA,IAAI,CAACJ,qBAAqB,CAACiB,IAAI,CAAC,CAAC,CAAC;IAClC,IAAI,CAACjB,qBAAqB,CAACkB,GAAG,CAACd,KAAK,EAAE,CAAC,CAAC;IACxC,OAAO,IAAI;EACf;EACAe,MAAMA,CAAA,EAAG;IACL,IAAI,CAACjB,kBAAkB,GAAG,KAAK;IAC/B,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}