{"ast":null,"code":"\"use strict\";\n\nfunction createLevelBuffers(basisTexture, basisTranscoderFormat) {\n  const images = basisTexture.getNumImages();\n  const levels = basisTexture.getNumLevels(0);\n  const success = basisTexture.startTranscoding();\n  if (!success) {\n    throw new Error(\"startTranscoding failed\");\n  }\n  const levelBuffers = [];\n  for (let levelIndex = 0; levelIndex < levels; ++levelIndex) {\n    for (let sliceIndex = 0; sliceIndex < images; ++sliceIndex) {\n      const transcodeSize = basisTexture.getImageTranscodedSizeInBytes(sliceIndex, levelIndex, basisTranscoderFormat);\n      const levelBuffer = new Uint8Array(transcodeSize);\n      const success2 = basisTexture.transcodeImage(levelBuffer, sliceIndex, levelIndex, basisTranscoderFormat, 1, 0);\n      if (!success2) {\n        throw new Error(\"transcodeImage failed\");\n      }\n      levelBuffers.push(levelBuffer);\n    }\n  }\n  return levelBuffers;\n}\nexport { createLevelBuffers };","map":{"version":3,"names":["createLevelBuffers","basisTexture","basisTranscoderFormat","images","getNumImages","levels","getNumLevels","success","startTranscoding","Error","levelBuffers","levelIndex","sliceIndex","transcodeSize","getImageTranscodedSizeInBytes","levelBuffer","Uint8Array","success2","transcodeImage","push"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/compressed-textures/basis/utils/createLevelBuffers.ts"],"sourcesContent":["import type { BasisTexture } from '../types';\n\nexport function createLevelBuffers(basisTexture: BasisTexture, basisTranscoderFormat: number): Uint8Array[]\n{\n    const images = basisTexture.getNumImages();\n    const levels = basisTexture.getNumLevels(0);\n\n    const success = basisTexture.startTranscoding();\n\n    if (!success)\n    {\n        throw new Error('startTranscoding failed');\n    }\n\n    const levelBuffers = [];\n\n    for (let levelIndex = 0; levelIndex < levels; ++levelIndex)\n    {\n        for (let sliceIndex = 0; sliceIndex < images; ++sliceIndex)\n        {\n            const transcodeSize = basisTexture.getImageTranscodedSizeInBytes(sliceIndex, levelIndex, basisTranscoderFormat);\n            const levelBuffer = new Uint8Array(transcodeSize);\n\n            const success = basisTexture.transcodeImage(levelBuffer, sliceIndex, levelIndex, basisTranscoderFormat, 1, 0);\n\n            if (!success)\n            {\n                throw new Error('transcodeImage failed');\n            }\n\n            levelBuffers.push(levelBuffer);\n        }\n    }\n\n    return levelBuffers;\n}\n"],"mappings":";;AAEgB,SAAAA,mBAAmBC,YAAA,EAA4BC,qBAC/D;EACU,MAAAC,MAAA,GAASF,YAAA,CAAaG,YAAa;EACnC,MAAAC,MAAA,GAASJ,YAAa,CAAAK,YAAA,CAAa,CAAC;EAEpC,MAAAC,OAAA,GAAUN,YAAA,CAAaO,gBAAiB;EAE9C,IAAI,CAACD,OACL;IACU,UAAIE,KAAA,CAAM,yBAAyB;EAAA;EAG7C,MAAMC,YAAA,GAAe,EAAC;EAEtB,SAASC,UAAa,MAAGA,UAAa,GAAAN,MAAA,EAAQ,EAAEM,UAChD;IACI,SAASC,UAAa,MAAGA,UAAa,GAAAT,MAAA,EAAQ,EAAES,UAChD;MACI,MAAMC,aAAgB,GAAAZ,YAAA,CAAaa,6BAA8B,CAAAF,UAAA,EAAYD,UAAA,EAAYT,qBAAqB;MACxG,MAAAa,WAAA,GAAc,IAAIC,UAAA,CAAWH,aAAa;MAE1C,MAAAI,QAAA,GAAUhB,YAAA,CAAaiB,cAAe,CAAAH,WAAA,EAAaH,UAAA,EAAYD,UAAY,EAAAT,qBAAA,EAAuB,GAAG,CAAC;MAE5G,IAAI,CAACe,QACL;QACU,UAAIR,KAAA,CAAM,uBAAuB;MAAA;MAG3CC,YAAA,CAAaS,IAAA,CAAKJ,WAAW;IAAA;EACjC;EAGG,OAAAL,YAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}