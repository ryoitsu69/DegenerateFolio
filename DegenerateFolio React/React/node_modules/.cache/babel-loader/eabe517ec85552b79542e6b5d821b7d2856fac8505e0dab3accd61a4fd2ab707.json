{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { STENCIL_MODES } from '../shared/state/const.mjs';\n\"use strict\";\nclass GpuStencilSystem {\n  constructor(renderer) {\n    this._renderTargetStencilState = /* @__PURE__ */Object.create(null);\n    this._renderer = renderer;\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  onRenderTargetChange(renderTarget) {\n    let stencilState = this._renderTargetStencilState[renderTarget.uid];\n    if (!stencilState) {\n      stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n        stencilMode: STENCIL_MODES.DISABLED,\n        stencilReference: 0\n      };\n    }\n    this._activeRenderTarget = renderTarget;\n    this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n  }\n  setStencilMode(stencilMode, stencilReference) {\n    const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n    stencilState.stencilMode = stencilMode;\n    stencilState.stencilReference = stencilReference;\n    const renderer = this._renderer;\n    renderer.pipeline.setStencilMode(stencilMode);\n    renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n  }\n  destroy() {\n    this._renderer.renderTarget.onRenderTargetChange.remove(this);\n    this._renderer = null;\n    this._activeRenderTarget = null;\n    this._renderTargetStencilState = null;\n  }\n}\n/** @ignore */\nGpuStencilSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"stencil\"\n};\nexport { GpuStencilSystem };","map":{"version":3,"names":["GpuStencilSystem","constructor","renderer","_renderTargetStencilState","Object","create","_renderer","renderTarget","onRenderTargetChange","add","stencilState","uid","stencilMode","STENCIL_MODES","DISABLED","stencilReference","_activeRenderTarget","setStencilMode","pipeline","encoder","renderPassEncoder","setStencilReference","destroy","remove","extension","type","ExtensionType","WebGPUSystem","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/GpuStencilSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GpuStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        this._activeRenderTarget = renderTarget;\n\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        const renderer = this._renderer;\n\n        renderer.pipeline.setStencilMode(stencilMode);\n        renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n    }\n\n    public destroy()\n    {\n        this._renderer.renderTarget.onRenderTargetChange.remove(this);\n\n        (this._renderer as null) = null;\n\n        this._activeRenderTarget = null;\n        this._renderTargetStencilState = null;\n    }\n}\n"],"mappings":";;;AAWO,MAAMA,gBACb;EAkBIC,YAAYC,QACZ;IARQ,KAAAC,yBAAA,kBAGIC,MAAA,CAAAC,MAAA,CAAO,IAAI;IAMnB,KAAKC,SAAY,GAAAJ,QAAA;IAERA,QAAA,CAAAK,YAAA,CAAaC,oBAAqB,CAAAC,GAAA,CAAI,IAAI;EAAA;EAG7CD,qBAAqBD,YAC/B;IACI,IAAIG,YAAe,QAAKP,yBAA0B,CAAAI,YAAA,CAAaI,GAAG;IAElE,IAAI,CAACD,YACL;MACIA,YAAA,GAAe,IAAK,CAAAP,yBAAA,CAA0BI,YAAa,CAAAI,GAAG,CAAI;QAC9DC,WAAA,EAAaC,aAAc,CAAAC,QAAA;QAC3BC,gBAAkB;MAAA,CACtB;IAAA;IAGJ,KAAKC,mBAAsB,GAAAT,YAAA;IAE3B,KAAKU,cAAe,CAAAP,YAAA,CAAaE,WAAa,EAAAF,YAAA,CAAaK,gBAAgB;EAAA;EAGxEE,eAAeL,WAAA,EAA4BG,gBAClD;IACI,MAAML,YAAe,QAAKP,yBAA0B,MAAKa,mBAAA,CAAoBL,GAAG;IAEhFD,YAAA,CAAaE,WAAc,GAAAA,WAAA;IAC3BF,YAAA,CAAaK,gBAAmB,GAAAA,gBAAA;IAEhC,MAAMb,QAAA,GAAW,IAAK,CAAAI,SAAA;IAEbJ,QAAA,CAAAgB,QAAA,CAASD,cAAA,CAAeL,WAAW;IACnCV,QAAA,CAAAiB,OAAA,CAAQC,iBAAkB,CAAAC,mBAAA,CAAoBN,gBAAgB;EAAA;EAGpEO,OACPA,CAAA;IACI,KAAKhB,SAAU,CAAAC,YAAA,CAAaC,oBAAqB,CAAAe,MAAA,CAAO,IAAI;IAE3D,KAAKjB,SAAqB;IAE3B,KAAKU,mBAAsB;IAC3B,KAAKb,yBAA4B;EAAA;AAEzC;AAAA;AAjEaH,gBAAA,CAGKwB,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,YAAA,CAClB;EACAC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}