{"ast":null,"code":"//https://www.shadertoy.com/view/Xd2Bzw\n\nmodule.exports = `\n\n\nvoid mainImage( out vec4 c, vec2 p ) {\n\n    // set position\n    vec2 v = iResolution.xy;\n    p = (p-v*.5)*.4 / v.y;\n    // breathing effect\n    p += p * sin(dot(p, p)*20.-iTime) * .04;\n\n    // accumulate color\n    c *= 0.;\n    for (float i = .5 ; i < 8. ; i++)\n\n        // fractal formula and rotation\n        p = abs(2.*fract(p-.5)-1.) * mat2(cos(.01*(iTime+iMouse.x*.1)*i*i + .78*vec4(1,7,3,1))),\n\n        // coloration\n        c += exp(-abs(p.y)*5.) * (cos(vec4(2,3,1,0)*i)*.5+.5);\n\n\n\n    // palette\n    c.gb *= .5;\n\n}\n\n`;","map":{"version":3,"names":["module","exports"],"sources":["/home/ryoitsu/Documents/GitHub/DegenerateFolio/DegenerateFolio React/React/src/shaders/fractal_thingy/fractal_thingy.js"],"sourcesContent":["//https://www.shadertoy.com/view/Xd2Bzw\n\nmodule.exports = `\n\n\nvoid mainImage( out vec4 c, vec2 p ) {\n\n    // set position\n    vec2 v = iResolution.xy;\n    p = (p-v*.5)*.4 / v.y;\n    // breathing effect\n    p += p * sin(dot(p, p)*20.-iTime) * .04;\n\n    // accumulate color\n    c *= 0.;\n    for (float i = .5 ; i < 8. ; i++)\n\n        // fractal formula and rotation\n        p = abs(2.*fract(p-.5)-1.) * mat2(cos(.01*(iTime+iMouse.x*.1)*i*i + .78*vec4(1,7,3,1))),\n\n        // coloration\n        c += exp(-abs(p.y)*5.) * (cos(vec4(2,3,1,0)*i)*.5+.5);\n\n\n\n    // palette\n    c.gb *= .5;\n\n}\n\n`\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAO,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}