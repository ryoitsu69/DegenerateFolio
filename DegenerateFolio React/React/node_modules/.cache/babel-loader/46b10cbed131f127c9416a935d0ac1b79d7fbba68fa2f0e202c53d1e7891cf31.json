{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapHashToField = exports.getMinHashLength = exports.getFieldBytesLength = exports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nconst utils_js_1 = require(\"./utils.js\");\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4),\n  _5n = BigInt(5),\n  _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9),\n  _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\nexports.mod = mod;\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = res * num % modulo;\n    num = num * num % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\nexports.pow = pow;\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\nexports.pow2 = pow2;\n// Inverses number over modulo\nfunction invert(number, modulo) {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\nexports.invert = invert;\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n  let Q, S, Z;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast(Fp, n) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow(Fp, n) {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\nexports.tonelliShanks = tonelliShanks;\nfunction FpSqrt(P) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4(Fp, n) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8(Fp, n) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\nexports.FpSqrt = FpSqrt;\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\nexports.isNegativeLE = isNegativeLE;\n// prettier-ignore\nconst FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\nfunction validateField(field) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger'\n  };\n  const opts = FIELD_FIELDS.reduce((map, val) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return (0, utils_js_1.validateObject)(field, opts);\n}\nexports.validateField = validateField;\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\nexports.FpPow = FpPow;\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\nexports.FpInvertBatch = FpInvertBatch;\nfunction FpDiv(f, lhs, rhs) {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\nexports.FpDiv = FpDiv;\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return x => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\nexports.FpIsSquare = FpIsSquare;\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return {\n    nBitLength: _nBitLength,\n    nByteLength\n  };\n}\nexports.nLength = nLength;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const {\n    nBitLength: BITS,\n    nByteLength: BYTES\n  } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: (0, utils_js_1.bitMask)(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: num => mod(num, ORDER),\n    isValid: num => {\n      if (typeof num !== 'bigint') throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: num => num === _0n,\n    isOdd: num => (num & _1n) === _1n,\n    neg: num => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n    sqr: num => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n    // Same as above, but doesn't normalize\n    sqrN: num => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n    inv: num => invert(num, ORDER),\n    sqrt: redef.sqrt || (n => sqrtP(f, n)),\n    invertBatch: lst => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => c ? b : a,\n    toBytes: num => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),\n    fromBytes: bytes => {\n      if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);\n    }\n  });\n  return Object.freeze(f);\n}\nexports.Field = Field;\nfunction FpSqrtOdd(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexports.FpSqrtOdd = FpSqrtOdd;\nfunction FpSqrtEven(Fp, elm) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\nexports.FpSqrtEven = FpSqrtEven;\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n  hash = (0, utils_js_1.ensureBytes)('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\nexports.hashToPrivateScalar = hashToPrivateScalar;\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\nexports.getFieldBytesLength = getFieldBytesLength;\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\nexports.getMinHashLength = getMinHashLength;\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024) throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);\n}\nexports.mapHashToField = mapHashToField;","map":{"version":3,"names":["utils_js_1","require","_0n","BigInt","_1n","_2n","_3n","_4n","_5n","_8n","_9n","_16n","mod","a","b","result","exports","pow","num","power","modulo","Error","res","pow2","x","invert","number","y","u","v","q","r","m","n","gcd","tonelliShanks","P","legendreC","Q","S","Z","p1div4","tonelliFast","Fp","root","eql","sqr","Q1div2","tonelliSlow","neg","ONE","g","mul","ZERO","t2","ge","FpSqrt","sqrt3mod4","c1","sqrt5mod8","n2","nv","i","sub","isNegativeLE","FIELD_FIELDS","validateField","field","initial","ORDER","MASK","BYTES","BITS","opts","reduce","map","val","validateObject","FpPow","f","p","d","FpInvertBatch","nums","tmp","Array","length","lastMultiplied","acc","is0","inverted","inv","reduceRight","FpDiv","lhs","rhs","FpIsSquare","legendreConst","nLength","nBitLength","_nBitLength","undefined","toString","nByteLength","Math","ceil","Field","bitLen","isLE","redef","sqrtP","Object","freeze","bitMask","create","isValid","isOdd","add","div","sqrN","addN","subN","mulN","sqrt","invertBatch","lst","cmov","c","toBytes","numberToBytesLE","numberToBytesBE","fromBytes","bytes","bytesToNumberLE","bytesToNumberBE","FpSqrtOdd","elm","FpSqrtEven","hashToPrivateScalar","hash","groupOrder","ensureBytes","hashLen","minLen","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","key","len","fieldLen","reduced"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@noble/curves/src/abstract/modular.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}