{"ast":null,"code":"\"use strict\";\n\nconst BrowserAdapter = {\n  createCanvas: (width, height) => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  },\n  getCanvasRenderingContext2D: () => CanvasRenderingContext2D,\n  getWebGLRenderingContext: () => WebGLRenderingContext,\n  getNavigator: () => navigator,\n  getBaseUrl: () => document.baseURI ?? window.location.href,\n  getFontFaceSet: () => document.fonts,\n  fetch: (url, options) => fetch(url, options),\n  parseXML: xml => {\n    const parser = new DOMParser();\n    return parser.parseFromString(xml, \"text/xml\");\n  }\n};\nexport { BrowserAdapter };","map":{"version":3,"names":["BrowserAdapter","createCanvas","width","height","canvas","document","createElement","getCanvasRenderingContext2D","CanvasRenderingContext2D","getWebGLRenderingContext","WebGLRenderingContext","getNavigator","navigator","getBaseUrl","baseURI","window","location","href","getFontFaceSet","fonts","fetch","url","options","parseXML","xml","parser","DOMParser","parseFromString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/environment-browser/BrowserAdapter.ts"],"sourcesContent":["import { type Adapter } from '../environment/adapter';\n\n/**\n * This is an implementation of the {@link environment.Adapter} interface.\n * It can be used to make Pixi work in the browser.\n * @memberof environment\n * @property {Function} createCanvas - Creates a canvas element of the given size.\n * This canvas is created using the browser's native canvas element.\n * @property {Function} getCanvasRenderingContext2D - Returns a 2D rendering context.\n * @property {Function} getWebGLRenderingContext - Returns a WebGL rendering context.\n * @property {Function} getNavigator - Returns browsers window.navigator\n * @property {Function} getBaseUrl - Returns the current base URL for browser environments this is either\n * the document.baseURI or window.location.href\n * @property {Function} getFontFaceSet - Return the font face set if available\n * @property {Function} fetch - Returns a Response object that has been fetched from the given URL.\n * @property {Function} parseXML - Returns Document object that has been parsed from the given XML string.\n */\nexport const BrowserAdapter = {\n    createCanvas: (width: number, height: number): HTMLCanvasElement =>\n    {\n        const canvas = document.createElement('canvas');\n\n        canvas.width = width;\n        canvas.height = height;\n\n        return canvas;\n    },\n    getCanvasRenderingContext2D: () => CanvasRenderingContext2D,\n    getWebGLRenderingContext: () => WebGLRenderingContext,\n    getNavigator: () => navigator,\n    getBaseUrl: () => (document.baseURI ?? window.location.href),\n    getFontFaceSet: () => document.fonts,\n    fetch: (url: RequestInfo, options?: RequestInit) => fetch(url, options),\n    parseXML: (xml: string) =>\n    {\n        const parser = new DOMParser();\n\n        return parser.parseFromString(xml, 'text/xml');\n    },\n} as Adapter;\n"],"mappings":";;AAiBO,MAAMA,cAAiB;EAC1BC,YAAA,EAAcA,CAACC,KAAA,EAAeC,MAC9B;IACU,MAAAC,MAAA,GAASC,QAAS,CAAAC,aAAA,CAAc,QAAQ;IAE9CF,MAAA,CAAOF,KAAQ,GAAAA,KAAA;IACfE,MAAA,CAAOD,MAAS,GAAAA,MAAA;IAET,OAAAC,MAAA;EAAA,CACX;EACAG,2BAAA,EAA6BA,CAAA,KAAMC,wBAAA;EACnCC,wBAAA,EAA0BA,CAAA,KAAMC,qBAAA;EAChCC,YAAA,EAAcA,CAAA,KAAMC,SAAA;EACpBC,UAAY,EAAAA,CAAA,KAAOR,QAAS,CAAAS,OAAA,IAAWC,MAAA,CAAOC,QAAS,CAAAC,IAAA;EACvDC,cAAA,EAAgBA,CAAA,KAAMb,QAAS,CAAAc,KAAA;EAC/BC,KAAA,EAAOA,CAACC,GAAA,EAAkBC,OAA0B,KAAAF,KAAA,CAAMC,GAAA,EAAKC,OAAO;EACtEC,QAAA,EAAWC,GACX;IACU,MAAAC,MAAA,GAAS,IAAIC,SAAU;IAEtB,OAAAD,MAAA,CAAOE,eAAgB,CAAAH,GAAA,EAAK,UAAU;EAAA;AAErD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}