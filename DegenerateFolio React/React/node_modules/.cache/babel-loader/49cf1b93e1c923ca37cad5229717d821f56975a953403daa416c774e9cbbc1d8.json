{"ast":null,"code":"import { bnToBn } from '../bn/toBn.js';\nimport { isBoolean } from '../is/boolean.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\nimport { calcSi, findSi, SI, SI_MID } from './si.js';\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT;\nfunction _formatBalance(input) {\n  let {\n    decimals = defaultDecimals,\n    forceUnit,\n    locale = 'en',\n    withAll = false,\n    withSi = true,\n    withSiFull = false,\n    withUnit = true,\n    withZero = true\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // we only work with string inputs here - convert anything\n  // into the string-only value\n  let text = bnToBn(input).toString();\n  if (text.length === 0 || text === '0') {\n    return '0';\n  }\n  // strip the negative sign so we can work with clean groupings, re-add this in the\n  // end when we return the result (from here on we work with positive numbers)\n  let sign = '';\n  if (text[0].startsWith('-')) {\n    sign = '-';\n    text = text.substring(1);\n  }\n  // We start at midpoint (8) minus 1 - this means that values display as\n  // 123.4567 instead of 0.1234 k (so we always have the most relevant).\n  const si = calcSi(text, decimals, forceUnit);\n  const mid = text.length - (decimals + si.power);\n  const pre = mid <= 0 ? '0' : text.substring(0, mid);\n  // get the post from the midpoint onward and then first add max decimals\n  // before trimming to the correct (calculated) amount of decimals again\n  let post = text.padStart(mid < 0 ? decimals : 1, '0').substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, '0').substring(0, withAll ? Math.max(4, decimals + si.power) : 4);\n  // remove all trailing 0's (if required via flag)\n  if (!withZero) {\n    let end = post.length - 1;\n    // This looks inefficient, however it is better to do the checks and\n    // only make one final slice than it is to do it in multiples\n    do {\n      if (post[end] === '0') {\n        end--;\n      }\n    } while (post[end] === '0');\n    post = post.substring(0, end + 1);\n  }\n  // the display unit\n  const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;\n  // format the units for display based on the flags\n  const units = withSi || withSiFull ? si.value === '-' ? withUnit ? \" \".concat(unit) : '' : \" \".concat(withSiFull ? \"\".concat(si.text).concat(withUnit ? ' ' : '') : si.value).concat(withUnit ? unit : '') : '';\n  const {\n    decimal,\n    thousand\n  } = getSeparator(locale);\n  return \"\".concat(sign).concat(formatDecimal(pre, thousand)).concat(post && \"\".concat(decimal).concat(post)).concat(units);\n}\nexport const formatBalance = _formatBalance;\nformatBalance.calcSi = function (text) {\n  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDecimals;\n  return calcSi(text, decimals);\n};\nformatBalance.findSi = findSi;\nformatBalance.getDefaults = () => {\n  return {\n    decimals: defaultDecimals,\n    unit: defaultUnit\n  };\n};\nformatBalance.getOptions = function () {\n  let decimals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultDecimals;\n  return SI.filter(_ref => {\n    let {\n      power\n    } = _ref;\n    return power < 0 ? decimals + power >= 0 : true;\n  });\n};\nformatBalance.setDefaults = _ref2 => {\n  var _ref3, _ref4;\n  let {\n    decimals,\n    unit\n  } = _ref2;\n  defaultDecimals = (_ref3 = Array.isArray(decimals) ? decimals[0] : decimals) !== null && _ref3 !== void 0 ? _ref3 : defaultDecimals;\n  defaultUnit = (_ref4 = Array.isArray(unit) ? unit[0] : unit) !== null && _ref4 !== void 0 ? _ref4 : defaultUnit;\n  SI[SI_MID].text = defaultUnit;\n};","map":{"version":3,"names":["bnToBn","isBoolean","formatDecimal","getSeparator","calcSi","findSi","SI","SI_MID","DEFAULT_DECIMALS","DEFAULT_UNIT","text","defaultDecimals","defaultUnit","_formatBalance","input","decimals","forceUnit","locale","withAll","withSi","withSiFull","withUnit","withZero","arguments","length","undefined","toString","sign","startsWith","substring","si","mid","power","pre","post","padStart","padEnd","Math","max","end","unit","units","value","concat","decimal","thousand","formatBalance","getDefaults","getOptions","filter","_ref","setDefaults","_ref2","_ref3","_ref4","Array","isArray"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/format/formatBalance.js"],"sourcesContent":["import { bnToBn } from '../bn/toBn.js';\nimport { isBoolean } from '../is/boolean.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\nimport { calcSi, findSi, SI, SI_MID } from './si.js';\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT;\nfunction _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = 'en', withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {\n    // we only work with string inputs here - convert anything\n    // into the string-only value\n    let text = bnToBn(input).toString();\n    if (text.length === 0 || text === '0') {\n        return '0';\n    }\n    // strip the negative sign so we can work with clean groupings, re-add this in the\n    // end when we return the result (from here on we work with positive numbers)\n    let sign = '';\n    if (text[0].startsWith('-')) {\n        sign = '-';\n        text = text.substring(1);\n    }\n    // We start at midpoint (8) minus 1 - this means that values display as\n    // 123.4567 instead of 0.1234 k (so we always have the most relevant).\n    const si = calcSi(text, decimals, forceUnit);\n    const mid = text.length - (decimals + si.power);\n    const pre = mid <= 0 ? '0' : text.substring(0, mid);\n    // get the post from the midpoint onward and then first add max decimals\n    // before trimming to the correct (calculated) amount of decimals again\n    let post = text\n        .padStart(mid < 0 ? decimals : 1, '0')\n        .substring(mid < 0 ? 0 : mid)\n        .padEnd(withAll ? Math.max(decimals, 4) : 4, '0')\n        .substring(0, withAll ? Math.max(4, decimals + si.power) : 4);\n    // remove all trailing 0's (if required via flag)\n    if (!withZero) {\n        let end = post.length - 1;\n        // This looks inefficient, however it is better to do the checks and\n        // only make one final slice than it is to do it in multiples\n        do {\n            if (post[end] === '0') {\n                end--;\n            }\n        } while (post[end] === '0');\n        post = post.substring(0, end + 1);\n    }\n    // the display unit\n    const unit = isBoolean(withUnit)\n        ? SI[SI_MID].text\n        : withUnit;\n    // format the units for display based on the flags\n    const units = withSi || withSiFull\n        ? si.value === '-'\n            ? withUnit\n                ? ` ${unit}`\n                : ''\n            : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}`\n        : '';\n    const { decimal, thousand } = getSeparator(locale);\n    return `${sign}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;\n}\nexport const formatBalance = _formatBalance;\nformatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);\nformatBalance.findSi = findSi;\nformatBalance.getDefaults = () => {\n    return {\n        decimals: defaultDecimals,\n        unit: defaultUnit\n    };\n};\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n    return SI.filter(({ power }) => power < 0\n        ? (decimals + power) >= 0\n        : true);\n};\nformatBalance.setDefaults = ({ decimals, unit }) => {\n    defaultDecimals = (Array.isArray(decimals)\n        ? decimals[0]\n        : decimals) ?? defaultDecimals;\n    defaultUnit = (Array.isArray(unit)\n        ? unit[0]\n        : unit) ?? defaultUnit;\n    SI[SI_MID].text = defaultUnit;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}