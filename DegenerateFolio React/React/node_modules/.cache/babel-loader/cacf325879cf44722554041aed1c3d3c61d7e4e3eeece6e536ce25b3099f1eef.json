{"ast":null,"code":"import { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { GAUSSIAN_VALUES } from '../const.mjs';\nimport source from './blur-template.wgsl.mjs';\n\"use strict\";\nfunction generateBlurProgram(horizontal, kernelSize) {\n  const kernel = GAUSSIAN_VALUES[kernelSize];\n  const halfLength = kernel.length;\n  const blurStructSource = [];\n  const blurOutSource = [];\n  const blurSamplingSource = [];\n  for (let i = 0; i < kernelSize; i++) {\n    blurStructSource[i] = `@location(${i}) offset${i}: vec2<f32>,`;\n    if (horizontal) {\n      blurOutSource[i] = `filteredCord + vec2(${i - halfLength + 1} * strength, 0.0),`;\n    } else {\n      blurOutSource[i] = `filteredCord + vec2(0.0, ${i - halfLength + 1} * strength),`;\n    }\n    const kernelIndex = i < halfLength ? i : kernelSize - i - 1;\n    const kernelValue = kernel[kernelIndex].toString();\n    blurSamplingSource[i] = `finalColor += textureSample(uTexture, uSampler, offset${i}) * ${kernelValue};`;\n  }\n  const blurStruct = blurStructSource.join(\"\\n\");\n  const blurOut = blurOutSource.join(\"\\n\");\n  const blurSampling = blurSamplingSource.join(\"\\n\");\n  const finalSource = source.replace(\"%blur-struct%\", blurStruct).replace(\"%blur-vertex-out%\", blurOut).replace(\"%blur-fragment-in%\", blurStruct).replace(\"%blur-sampling%\", blurSampling);\n  return GpuProgram.from({\n    vertex: {\n      source: finalSource,\n      entryPoint: \"mainVertex\"\n    },\n    fragment: {\n      source: finalSource,\n      entryPoint: \"mainFragment\"\n    }\n  });\n}\nexport { generateBlurProgram };","map":{"version":3,"names":["generateBlurProgram","horizontal","kernelSize","kernel","GAUSSIAN_VALUES","halfLength","length","blurStructSource","blurOutSource","blurSamplingSource","i","kernelIndex","kernelValue","toString","blurStruct","join","blurOut","blurSampling","finalSource","source","replace","GpuProgram","from","vertex","entryPoint","fragment"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/filters/defaults/blur/gpu/generateBlurProgram.ts"],"sourcesContent":["import { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { GAUSSIAN_VALUES } from '../const';\nimport source from './blur-template.wgsl';\n\nexport function generateBlurProgram(horizontal: boolean, kernelSize: number)\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    const blurStructSource: string[] = [];\n    const blurOutSource: string[] = [];\n    const blurSamplingSource: string[] = [];\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        blurStructSource[i] = `@location(${i}) offset${i}: vec2<f32>,`;\n\n        if (horizontal)\n        {\n            blurOutSource[i] = `filteredCord + vec2(${i - halfLength + 1} * strength, 0.0),`;\n        }\n        else\n        {\n            blurOutSource[i] = `filteredCord + vec2(0.0, ${i - halfLength + 1} * strength),`;\n        }\n\n        const kernelIndex = i < halfLength ? i : (kernelSize - i - 1);\n        const kernelValue = kernel[kernelIndex].toString();\n\n        blurSamplingSource[i] = `finalColor += textureSample(uTexture, uSampler, offset${i}) * ${kernelValue};`;\n    }\n\n    const blurStruct = blurStructSource.join('\\n');\n    const blurOut = blurOutSource.join('\\n');\n    const blurSampling = blurSamplingSource.join('\\n');\n\n    const finalSource = source\n        .replace('%blur-struct%', blurStruct)\n        .replace('%blur-vertex-out%', blurOut)\n        .replace('%blur-fragment-in%', blurStruct)\n        .replace('%blur-sampling%', blurSampling);\n\n    return GpuProgram.from({\n        vertex: {\n            source: finalSource,\n            entryPoint: 'mainVertex',\n        },\n        fragment: {\n            source: finalSource,\n            entryPoint: 'mainFragment',\n        },\n    });\n}\n\n"],"mappings":";;;;AAIgB,SAAAA,oBAAoBC,UAAA,EAAqBC,UACzD;EACU,MAAAC,MAAA,GAASC,eAAA,CAAgBF,UAAU;EACzC,MAAMG,UAAA,GAAaF,MAAO,CAAAG,MAAA;EAE1B,MAAMC,gBAAA,GAA6B,EAAC;EACpC,MAAMC,aAAA,GAA0B,EAAC;EACjC,MAAMC,kBAAA,GAA+B,EAAC;EAEtC,SAASC,CAAI,MAAGA,CAAI,GAAAR,UAAA,EAAYQ,CAChC;IACIH,gBAAA,CAAiBG,CAAC,IAAiB,aAAAA,CAAC,WAAWA,CAAC;IAEhD,IAAIT,UACJ;MACIO,aAAA,CAAcE,CAAC,IAA2B,uBAAAA,CAAA,GAAIL,UAAA,GAAa,CAAC;IAAA,CAGhE;MACIG,aAAA,CAAcE,CAAC,IAAgC,4BAAAA,CAAA,GAAIL,UAAA,GAAa,CAAC;IAAA;IAGrE,MAAMM,WAAc,GAAAD,CAAA,GAAIL,UAAa,GAAAK,CAAA,GAAKR,UAAA,GAAaQ,CAAI;IAC3D,MAAME,WAAc,GAAAT,MAAA,CAAOQ,WAAW,EAAEE,QAAS;IAEjDJ,kBAAA,CAAmBC,CAAC,IAA6D,yDAAAA,CAAC,OAAOE,WAAW;EAAA;EAGlG,MAAAE,UAAA,GAAaP,gBAAiB,CAAAQ,IAAA,CAAK,IAAI;EACvC,MAAAC,OAAA,GAAUR,aAAc,CAAAO,IAAA,CAAK,IAAI;EACjC,MAAAE,YAAA,GAAeR,kBAAmB,CAAAM,IAAA,CAAK,IAAI;EAEjD,MAAMG,WAAA,GAAcC,MACf,CAAAC,OAAA,CAAQ,eAAiB,EAAAN,UAAU,EACnCM,OAAQ,sBAAqBJ,OAAO,EACpCI,OAAA,CAAQ,oBAAsB,EAAAN,UAAU,CACxC,CAAAM,OAAA,CAAQ,mBAAmBH,YAAY;EAE5C,OAAOI,UAAA,CAAWC,IAAK;IACnBC,MAAQ;MACJJ,MAAQ,EAAAD,WAAA;MACRM,UAAY;IAAA,CAChB;IACAC,QAAU;MACNN,MAAQ,EAAAD,WAAA;MACRM,UAAY;IAAA;EAChB,CACH;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}