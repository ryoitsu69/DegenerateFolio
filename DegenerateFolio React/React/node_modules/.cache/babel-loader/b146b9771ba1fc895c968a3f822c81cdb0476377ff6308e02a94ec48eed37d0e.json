{"ast":null,"code":"import { DOMParser } from '@xmldom/xmldom';\n\"use strict\";\nconst WebWorkerAdapter = {\n  createCanvas: (width, height) => new OffscreenCanvas(width ?? 0, height ?? 0),\n  getCanvasRenderingContext2D: () => OffscreenCanvasRenderingContext2D,\n  getWebGLRenderingContext: () => WebGLRenderingContext,\n  getNavigator: () => navigator,\n  getBaseUrl: () => globalThis.location.href,\n  getFontFaceSet: () => globalThis.fonts,\n  fetch: (url, options) => fetch(url, options),\n  parseXML: xml => {\n    const parser = new DOMParser();\n    return parser.parseFromString(xml, \"text/xml\");\n  }\n};\nexport { WebWorkerAdapter };","map":{"version":3,"names":["WebWorkerAdapter","createCanvas","width","height","OffscreenCanvas","getCanvasRenderingContext2D","OffscreenCanvasRenderingContext2D","getWebGLRenderingContext","WebGLRenderingContext","getNavigator","navigator","getBaseUrl","globalThis","location","href","getFontFaceSet","fonts","fetch","url","options","parseXML","xml","parser","DOMParser","parseFromString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/environment-webworker/WebWorkerAdapter.ts"],"sourcesContent":["import { type Adapter } from '../environment/adapter';\nimport { DOMParser } from '@xmldom/xmldom';\n\n/**\n * This is an implementation of the {@link environment.Adapter} interface.\n * It can be used to make Pixi work in a Web Worker.\n * @memberof environment\n * @property {Function} createCanvas - Creates a canvas element of the given size using the browser's native OffscreenCanvas.\n * @property {Function} getCanvasRenderingContext2D - Returns a 2D rendering context.\n * @property {Function} getWebGLRenderingContext - Returns a WebGL rendering context.\n * @property {Function} getNavigator - Returns browsers window.navigator\n * @property {Function} getBaseUrl - Returns the current base URL of the worker, which is globalThis.location.href\n * @property {Function} getFontFaceSet - Return the font face set if available\n * @property {Function} fetch - Returns a Response object that has been fetched from the given URL.\n * @property {Function} parseXML - Returns Document object that has been parsed from the given XML string.\n * @memberof environment\n */\nexport const WebWorkerAdapter = {\n    createCanvas: (width?: number, height?: number) => new OffscreenCanvas(width ?? 0, height ?? 0),\n    getCanvasRenderingContext2D: () => OffscreenCanvasRenderingContext2D,\n    getWebGLRenderingContext: () => WebGLRenderingContext,\n    getNavigator: () => navigator,\n    getBaseUrl: () => globalThis.location.href,\n    getFontFaceSet: () => (globalThis as unknown as WorkerGlobalScope).fonts,\n    fetch: (url: RequestInfo, options?: RequestInit) => fetch(url, options),\n    parseXML: (xml: string) =>\n    {\n        const parser = new DOMParser();\n\n        return parser.parseFromString(xml, 'text/xml');\n    },\n} as Adapter;\n"],"mappings":";;AAiBO,MAAMA,gBAAmB;EAC5BC,YAAA,EAAcA,CAACC,KAAgB,EAAAC,MAAA,KAAoB,IAAIC,eAAgB,CAAAF,KAAA,IAAS,CAAG,EAAAC,MAAA,IAAU,CAAC;EAC9FE,2BAAA,EAA6BA,CAAA,KAAMC,iCAAA;EACnCC,wBAAA,EAA0BA,CAAA,KAAMC,qBAAA;EAChCC,YAAA,EAAcA,CAAA,KAAMC,SAAA;EACpBC,UAAA,EAAYA,CAAA,KAAMC,UAAA,CAAWC,QAAS,CAAAC,IAAA;EACtCC,cAAA,EAAgBA,CAAA,KAAOH,UAA4C,CAAAI,KAAA;EACnEC,KAAA,EAAOA,CAACC,GAAA,EAAkBC,OAA0B,KAAAF,KAAA,CAAMC,GAAA,EAAKC,OAAO;EACtEC,QAAA,EAAWC,GACX;IACU,MAAAC,MAAA,GAAS,IAAIC,SAAU;IAEtB,OAAAD,MAAA,CAAOE,eAAgB,CAAAH,GAAA,EAAK,UAAU;EAAA;AAErD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}