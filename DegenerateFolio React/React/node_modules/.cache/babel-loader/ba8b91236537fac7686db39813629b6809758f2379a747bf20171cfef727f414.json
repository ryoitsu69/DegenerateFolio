{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite._applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\nexport { setUvs };","map":{"version":3,"names":["setUvs","tilingSprite","uvs","texture","width","frame","height","anchorX","anchorY","_applyAnchorToTexture","anchor","x","y","textureMatrix","Matrix","shared","copyFrom","_tileTransform","matrix","tx","ty","invert","scale","applyMatrix"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite._applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n"],"mappings":";;;AAKgB,SAAAA,OAAOC,YAAA,EAA4BC,GACnD;EACI,MAAMC,OAAA,GAAUF,YAAa,CAAAE,OAAA;EAEvB,MAAAC,KAAA,GAAQD,OAAA,CAAQE,KAAM,CAAAD,KAAA;EACtB,MAAAE,MAAA,GAASH,OAAA,CAAQE,KAAM,CAAAC,MAAA;EAE7B,IAAIC,OAAU;EACd,IAAIC,OAAU;EAEd,IAAIP,YAAA,CAAaQ,qBACjB;IACIF,OAAA,GAAUN,YAAA,CAAaS,MAAO,CAAAC,CAAA;IAC9BH,OAAA,GAAUP,YAAA,CAAaS,MAAO,CAAAE,CAAA;EAAA;EAGlCV,GAAA,CAAI,CAAC,IAAIA,GAAI,EAAC,IAAI,CAACK,OAAA;EACnBL,GAAA,CAAI,CAAC,IAAIA,GAAI,EAAC,IAAI,CAAI,GAAAK,OAAA;EACtBL,GAAA,CAAI,CAAC,IAAIA,GAAI,EAAC,IAAI,CAACM,OAAA;EACnBN,GAAA,CAAI,CAAC,IAAIA,GAAI,EAAC,IAAI,CAAI,GAAAM,OAAA;EAEtB,MAAMK,aAAA,GAAgBC,MAAO,CAAAC,MAAA;EAEfF,aAAA,CAAAG,QAAA,CAASf,YAAa,CAAAgB,cAAA,CAAeC,MAAM;EAEzDL,aAAA,CAAcM,EAAA,IAAMlB,YAAa,CAAAG,KAAA;EACjCS,aAAA,CAAcO,EAAA,IAAMnB,YAAa,CAAAK,MAAA;EAEjCO,aAAA,CAAcQ,MAAO;EAErBR,aAAA,CAAcS,KAAA,CAAMrB,YAAa,CAAAG,KAAA,GAAQA,KAAO,EAAAH,YAAA,CAAaK,MAAA,GAASA,MAAM;EAEhEiB,WAAA,CAAArB,GAAA,EAAK,CAAG,KAAGW,aAAa;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}