{"ast":null,"code":"import { u8aToHex } from '@polkadot/util';\nimport { keccakAsU8a } from '../keccak/index.js';\nfunction isInvalidChar(char, byte) {\n  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());\n}\nexport function isEthereumChecksum(_address) {\n  const address = _address.replace('0x', '');\n  const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);\n  for (let i = 0; i < 40; i++) {\n    if (isInvalidChar(address[i], parseInt(hash[i], 16))) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["u8aToHex","keccakAsU8a","isInvalidChar","char","byte","toUpperCase","toLowerCase","isEthereumChecksum","_address","address","replace","hash","i","parseInt"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/ethereum/isChecksum.js"],"sourcesContent":["import { u8aToHex } from '@polkadot/util';\nimport { keccakAsU8a } from '../keccak/index.js';\nfunction isInvalidChar(char, byte) {\n    return char !== (byte > 7\n        ? char.toUpperCase()\n        : char.toLowerCase());\n}\nexport function isEthereumChecksum(_address) {\n    const address = _address.replace('0x', '');\n    const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);\n    for (let i = 0; i < 40; i++) {\n        if (isInvalidChar(address[i], parseInt(hash[i], 16))) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,aAAaA,CAACC,IAAI,EAAEC,IAAI,EAAE;EAC/B,OAAOD,IAAI,MAAMC,IAAI,GAAG,CAAC,GACnBD,IAAI,CAACE,WAAW,CAAC,CAAC,GAClBF,IAAI,CAACG,WAAW,CAAC,CAAC,CAAC;AAC7B;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAE;EACzC,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC1C,MAAMC,IAAI,GAAGX,QAAQ,CAACC,WAAW,CAACQ,OAAO,CAACH,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;EACpE,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;IACzB,IAAIV,aAAa,CAACO,OAAO,CAACG,CAAC,CAAC,EAAEC,QAAQ,CAACF,IAAI,CAACC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE;MAClD,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}