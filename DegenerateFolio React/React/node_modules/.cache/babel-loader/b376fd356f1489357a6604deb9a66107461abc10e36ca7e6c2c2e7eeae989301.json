{"ast":null,"code":"import { hexAddPrefix } from './addPrefix.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n/**\n * @name hexFixLength\n * @summary Shifts a hex string to a specific bitLength\n * @description\n * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexFixLength } from '@polkadot/util';\n *\n * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12\n * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012\n * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12\n * ```\n */\nexport function hexFixLength(value) {\n  let bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  let withPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const strLength = Math.ceil(bitLength / 4);\n  const hexLength = strLength + 2;\n  return hexAddPrefix(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? hexStripPrefix(value) : value.length > hexLength ? hexStripPrefix(value).slice(-1 * strLength) : \"\".concat('0'.repeat(strLength)).concat(hexStripPrefix(value)).slice(-1 * strLength));\n}","map":{"version":3,"names":["hexAddPrefix","hexStripPrefix","hexFixLength","value","bitLength","arguments","length","undefined","withPadding","strLength","Math","ceil","hexLength","slice","concat","repeat"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/hex/fixLength.js"],"sourcesContent":["import { hexAddPrefix } from './addPrefix.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n/**\n * @name hexFixLength\n * @summary Shifts a hex string to a specific bitLength\n * @description\n * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexFixLength } from '@polkadot/util';\n *\n * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12\n * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012\n * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12\n * ```\n */\nexport function hexFixLength(value, bitLength = -1, withPadding = false) {\n    const strLength = Math.ceil(bitLength / 4);\n    const hexLength = strLength + 2;\n    return hexAddPrefix((bitLength === -1 || value.length === hexLength || (!withPadding && value.length < hexLength))\n        ? hexStripPrefix(value)\n        : (value.length > hexLength)\n            ? hexStripPrefix(value).slice(-1 * strLength)\n            : `${'0'.repeat(strLength)}${hexStripPrefix(value)}`.slice(-1 * strLength));\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,cAAc,QAAQ,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,KAAK,EAAuC;EAAA,IAArCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,IAAEG,WAAW,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EACnE,MAAMI,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACP,SAAS,GAAG,CAAC,CAAC;EAC1C,MAAMQ,SAAS,GAAGH,SAAS,GAAG,CAAC;EAC/B,OAAOT,YAAY,CAAEI,SAAS,KAAK,CAAC,CAAC,IAAID,KAAK,CAACG,MAAM,KAAKM,SAAS,IAAK,CAACJ,WAAW,IAAIL,KAAK,CAACG,MAAM,GAAGM,SAAU,GAC3GX,cAAc,CAACE,KAAK,CAAC,GACpBA,KAAK,CAACG,MAAM,GAAGM,SAAS,GACrBX,cAAc,CAACE,KAAK,CAAC,CAACU,KAAK,CAAC,CAAC,CAAC,GAAGJ,SAAS,CAAC,GAC3C,GAAAK,MAAA,CAAG,GAAG,CAACC,MAAM,CAACN,SAAS,CAAC,EAAAK,MAAA,CAAGb,cAAc,CAACE,KAAK,CAAC,EAAGU,KAAK,CAAC,CAAC,CAAC,GAAGJ,SAAS,CAAC,CAAC;AACvF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}