{"ast":null,"code":"\"use strict\";\n\nfunction removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups) {\n  const structNameSet = /* @__PURE__ */new Set();\n  const dupeGroupKeySet = /* @__PURE__ */new Set();\n  const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs].filter(struct => {\n    if (structNameSet.has(struct.name)) {\n      return false;\n    }\n    structNameSet.add(struct.name);\n    return true;\n  });\n  const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups].filter(group => {\n    const key = `${group.name}-${group.binding}`;\n    if (dupeGroupKeySet.has(key)) {\n      return false;\n    }\n    dupeGroupKeySet.add(key);\n    return true;\n  });\n  return {\n    structs,\n    groups\n  };\n}\nexport { removeStructAndGroupDuplicates };","map":{"version":3,"names":["removeStructAndGroupDuplicates","vertexStructsAndGroups","fragmentStructsAndGroups","structNameSet","Set","dupeGroupKeySet","structs","filter","struct","has","name","add","groups","group","key","binding"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.ts"],"sourcesContent":["import type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function removeStructAndGroupDuplicates(\n    vertexStructsAndGroups: StructsAndGroups,\n    fragmentStructsAndGroups: StructsAndGroups\n)\n{\n    const structNameSet = new Set();\n    const dupeGroupKeySet = new Set();\n\n    const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs]\n        .filter((struct) =>\n        {\n            if (structNameSet.has(struct.name))\n            {\n                return false;\n            }\n            structNameSet.add(struct.name);\n\n            return true;\n        });\n\n    const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups]\n        .filter((group) =>\n        {\n            const key = `${group.name}-${group.binding}`;\n\n            if (dupeGroupKeySet.has(key))\n            {\n                return false;\n            }\n            dupeGroupKeySet.add(key);\n\n            return true;\n        });\n\n    return { structs, groups };\n}\n"],"mappings":";;AAEgB,SAAAA,+BACZC,sBAAA,EACAC,wBAEJ;EACU,MAAAC,aAAA,sBAAoBC,GAAI;EACxB,MAAAC,eAAA,sBAAsBD,GAAI;EAE1B,MAAAE,OAAA,GAAU,CAAC,GAAGL,sBAAuB,CAAAK,OAAA,EAAS,GAAGJ,wBAAA,CAAyBI,OAAO,EAClFC,MAAO,CAACC,MACT;IACI,IAAIL,aAAc,CAAAM,GAAA,CAAID,MAAO,CAAAE,IAAI,CACjC;MACW;IAAA;IAEGP,aAAA,CAAAQ,GAAA,CAAIH,MAAA,CAAOE,IAAI;IAEtB;EAAA,CACV;EAEC,MAAAE,MAAA,GAAS,CAAC,GAAGX,sBAAuB,CAAAW,MAAA,EAAQ,GAAGV,wBAAA,CAAyBU,MAAM,EAC/EL,MAAO,CAACM,KACT;IACI,MAAMC,GAAA,GAAS,GAAAD,KAAA,CAAMH,IAAI,IAAIG,KAAA,CAAME,OAAO;IAEtC,IAAAV,eAAA,CAAgBI,GAAI,CAAAK,GAAG,CAC3B;MACW;IAAA;IAEXT,eAAA,CAAgBM,GAAA,CAAIG,GAAG;IAEhB;EAAA,CACV;EAEE;IAAER,OAAA;IAASM;EAAO;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}