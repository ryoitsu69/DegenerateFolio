{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport { bytesToNumberLE, ensureBytes, numberToBytesLE, validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction validateOpts(curve) {\n  validateObject(curve, {\n    a: 'bigint'\n  }, {\n    montgomeryBits: 'isSafeInteger',\n    nByteLength: 'isSafeInteger',\n    adjustScalarBytes: 'function',\n    domain: 'function',\n    powPminus2: 'function',\n    Gu: 'bigint'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...curve\n  });\n}\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    P\n  } = CURVE;\n  const modP = n => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || (bytes => bytes);\n  const powPminus2 = CURVE.powPminus2 || (x => pow(x, P - BigInt(2), P));\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap, x_2, x_3) {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n  // Accepts 0 as well\n  function assertFieldElement(n) {\n    if (typeof n === 'bigint' && _0n <= n && n < P) return n;\n    throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n  }\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(pointU, scalar) {\n    const u = assertFieldElement(pointU);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = assertFieldElement(scalar);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = k >> t & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n  function encodeUCoordinate(u) {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n  function decodeUCoordinate(uEnc) {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    if (fieldLen === 32) u[31] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n) {\n    const bytes = ensureBytes('scalar', n);\n    const len = bytes.length;\n    if (len !== montgomeryBytes && len !== fieldLen) throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${len}`);\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar, u) {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar) {\n    return scalarMult(scalar, GuBytes);\n  }\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey, publicKey) => scalarMult(privateKey, publicKey),\n    getPublicKey: privateKey => scalarMultBase(privateKey),\n    utils: {\n      randomPrivateKey: () => CURVE.randomBytes(CURVE.nByteLength)\n    },\n    GuBytes: GuBytes\n  };\n}","map":{"version":3,"names":["mod","pow","bytesToNumberLE","ensureBytes","numberToBytesLE","validateObject","_0n","BigInt","_1n","validateOpts","curve","a","montgomeryBits","nByteLength","adjustScalarBytes","domain","powPminus2","Gu","Object","freeze","montgomery","curveDef","CURVE","P","modP","n","montgomeryBytes","Math","ceil","fieldLen","bytes","x","cswap","swap","x_2","x_3","dummy","assertFieldElement","Error","a24","montgomeryLadder","pointU","scalar","u","k","x_1","z_2","z_3","sw","t","k_t","A","AA","B","BB","E","C","D","DA","CB","dacb","da_cb","z2","encodeUCoordinate","decodeUCoordinate","uEnc","decodeScalar","len","length","scalarMult","_scalar","pu","GuBytes","scalarMultBase","getSharedSecret","privateKey","publicKey","getPublicKey","utils","randomPrivateKey","randomBytes"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/node_modules/@noble/curves/src/abstract/montgomery.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { mod, pow } from './modular.js';\nimport { bytesToNumberLE, ensureBytes, numberToBytesLE, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\ntype Hex = string | Uint8Array;\n\nexport type CurveType = {\n  P: bigint; // finite field prime\n  nByteLength: number;\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array;\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array;\n  a: bigint;\n  montgomeryBits: number;\n  powPminus2?: (x: bigint) => bigint;\n  xyToU?: (x: bigint, y: bigint) => bigint;\n  Gu: bigint;\n  randomBytes?: (bytesLength?: number) => Uint8Array;\n};\nexport type CurveFn = {\n  scalarMult: (scalar: Hex, u: Hex) => Uint8Array;\n  scalarMultBase: (scalar: Hex) => Uint8Array;\n  getSharedSecret: (privateKeyA: Hex, publicKeyB: Hex) => Uint8Array;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  utils: { randomPrivateKey: () => Uint8Array };\n  GuBytes: Uint8Array;\n};\n\nfunction validateOpts(curve: CurveType) {\n  validateObject(\n    curve,\n    {\n      a: 'bigint',\n    },\n    {\n      montgomeryBits: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      powPminus2: 'function',\n      Gu: 'bigint',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...curve } as const);\n}\n\n// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)\n// Uses only one coordinate instead of two\nexport function montgomery(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef);\n  const { P } = CURVE;\n  const modP = (n: bigint) => mod(n, P);\n  const montgomeryBits = CURVE.montgomeryBits;\n  const montgomeryBytes = Math.ceil(montgomeryBits / 8);\n  const fieldLen = CURVE.nByteLength;\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes);\n  const powPminus2 = CURVE.powPminus2 || ((x: bigint) => pow(x, P - BigInt(2), P));\n\n  // cswap from RFC7748. But it is not from RFC7748!\n  /*\n    cswap(swap, x_2, x_3):\n         dummy = mask(swap) AND (x_2 XOR x_3)\n         x_2 = x_2 XOR dummy\n         x_3 = x_3 XOR dummy\n         Return (x_2, x_3)\n  Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n   and x_3, computed, e.g., as mask(swap) = 0 - swap.\n  */\n  function cswap(swap: bigint, x_2: bigint, x_3: bigint): [bigint, bigint] {\n    const dummy = modP(swap * (x_2 - x_3));\n    x_2 = modP(x_2 - dummy);\n    x_3 = modP(x_3 + dummy);\n    return [x_2, x_3];\n  }\n\n  // Accepts 0 as well\n  function assertFieldElement(n: bigint): bigint {\n    if (typeof n === 'bigint' && _0n <= n && n < P) return n;\n    throw new Error('Expected valid scalar 0 < scalar < CURVE.P');\n  }\n\n  // x25519 from 4\n  // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519\n  const a24 = (CURVE.a - BigInt(2)) / BigInt(4);\n  /**\n   *\n   * @param pointU u coordinate (x) on Montgomery Curve 25519\n   * @param scalar by which the point would be multiplied\n   * @returns new Point on Montgomery curve\n   */\n  function montgomeryLadder(pointU: bigint, scalar: bigint): bigint {\n    const u = assertFieldElement(pointU);\n    // Section 5: Implementations MUST accept non-canonical values and process them as\n    // if they had been reduced modulo the field prime.\n    const k = assertFieldElement(scalar);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw: [bigint, bigint];\n    for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n      const k_t = (k >> t) & _1n;\n      swap ^= k_t;\n      sw = cswap(swap, x_2, x_3);\n      x_2 = sw[0];\n      x_3 = sw[1];\n      sw = cswap(swap, z_2, z_3);\n      z_2 = sw[0];\n      z_3 = sw[1];\n      swap = k_t;\n\n      const A = x_2 + z_2;\n      const AA = modP(A * A);\n      const B = x_2 - z_2;\n      const BB = modP(B * B);\n      const E = AA - BB;\n      const C = x_3 + z_3;\n      const D = x_3 - z_3;\n      const DA = modP(D * A);\n      const CB = modP(C * B);\n      const dacb = DA + CB;\n      const da_cb = DA - CB;\n      x_3 = modP(dacb * dacb);\n      z_3 = modP(x_1 * modP(da_cb * da_cb));\n      x_2 = modP(AA * BB);\n      z_2 = modP(E * (AA + modP(a24 * E)));\n    }\n    // (x_2, x_3) = cswap(swap, x_2, x_3)\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    // (z_2, z_3) = cswap(swap, z_2, z_3)\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    // z_2^(p - 2)\n    const z2 = powPminus2(z_2);\n    // Return x_2 * (z_2^(p - 2))\n    return modP(x_2 * z2);\n  }\n\n  function encodeUCoordinate(u: bigint): Uint8Array {\n    return numberToBytesLE(modP(u), montgomeryBytes);\n  }\n\n  function decodeUCoordinate(uEnc: Hex): bigint {\n    // Section 5: When receiving such an array, implementations of X25519\n    // MUST mask the most significant bit in the final byte.\n    const u = ensureBytes('u coordinate', uEnc, montgomeryBytes);\n    if (fieldLen === 32) u[31] &= 127; // 0b0111_1111\n    return bytesToNumberLE(u);\n  }\n  function decodeScalar(n: Hex): bigint {\n    const bytes = ensureBytes('scalar', n);\n    const len = bytes.length;\n    if (len !== montgomeryBytes && len !== fieldLen)\n      throw new Error(`Expected ${montgomeryBytes} or ${fieldLen} bytes, got ${len}`);\n    return bytesToNumberLE(adjustScalarBytes(bytes));\n  }\n  function scalarMult(scalar: Hex, u: Hex): Uint8Array {\n    const pointU = decodeUCoordinate(u);\n    const _scalar = decodeScalar(scalar);\n    const pu = montgomeryLadder(pointU, _scalar);\n    // The result was not contributory\n    // https://cr.yp.to/ecdh.html#validate\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  }\n  // Computes public key from private. By doing scalar multiplication of base point.\n  const GuBytes = encodeUCoordinate(CURVE.Gu);\n  function scalarMultBase(scalar: Hex): Uint8Array {\n    return scalarMult(scalar, GuBytes);\n  }\n\n  return {\n    scalarMult,\n    scalarMultBase,\n    getSharedSecret: (privateKey: Hex, publicKey: Hex) => scalarMult(privateKey, publicKey),\n    getPublicKey: (privateKey: Hex): Uint8Array => scalarMultBase(privateKey),\n    utils: { randomPrivateKey: () => CURVE.randomBytes!(CURVE.nByteLength) },\n    GuBytes: GuBytes,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}