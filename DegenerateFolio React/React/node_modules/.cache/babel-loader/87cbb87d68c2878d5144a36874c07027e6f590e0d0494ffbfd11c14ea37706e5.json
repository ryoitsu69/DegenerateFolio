{"ast":null,"code":"import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\n\"use strict\";\nconst tempMat = new Matrix();\nclass TextureMatrix {\n  /**\n   * @param texture - observed texture\n   * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n   */\n  constructor(texture, clampMargin) {\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    if (typeof clampMargin === \"undefined\") {\n      this.clampMargin = texture.width < 10 ? 0 : 0.5;\n    } else {\n      this.clampMargin = clampMargin;\n    }\n    this.isSimple = false;\n    this.texture = texture;\n  }\n  /** Texture property. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    if (this.texture === value) return;\n    this._texture?.removeListener(\"update\", this.update, this);\n    this._texture = value;\n    this._texture.addListener(\"update\", this.update, this);\n    this.update();\n  }\n  /**\n   * Multiplies uvs array to transform\n   * @param uvs - mesh uvs\n   * @param [out=uvs] - output\n   * @returns - output\n   */\n  multiplyUvs(uvs, out) {\n    if (out === void 0) {\n      out = uvs;\n    }\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  /**\n   * Updates matrices if texture was changed\n   * @returns - whether or not it was updated\n   */\n  update() {\n    const tex = this._texture;\n    this._updateID++;\n    const uvs = tex.uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig;\n    const trim = tex.trim;\n    if (trim) {\n      tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height);\n      this.mapCoord.append(tempMat);\n    }\n    const texBase = tex.source;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase._resolution;\n    const offset = this.clampOffset;\n    frame[0] = (tex.frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex.frame.y + margin + offset) / texBase.height;\n    frame[2] = (tex.frame.x + tex.frame.width - margin + offset) / texBase.width;\n    frame[3] = (tex.frame.y + tex.frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = offset / texBase.pixelWidth;\n    this.uClampOffset[1] = offset / texBase.pixelHeight;\n    this.isSimple = tex.frame.width === texBase.width && tex.frame.height === texBase.height && tex.rotate === 0;\n    return true;\n  }\n}\nexport { TextureMatrix };","map":{"version":3,"names":["tempMat","Matrix","TextureMatrix","constructor","texture","clampMargin","mapCoord","uClampFrame","Float32Array","uClampOffset","_textureID","_updateID","clampOffset","width","isSimple","_texture","value","removeListener","update","addListener","multiplyUvs","uvs","out","mat","i","length","x","y","a","c","tx","b","d","ty","tex","set","x1","x0","y1","y0","x3","y3","orig","trim","height","append","texBase","source","frame","margin","_resolution","offset","pixelWidth","pixelHeight","rotate"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureMatrix.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see Texture\n * @see Mesh\n * @see TilingSprite\n * @memberof rendering\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    public readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    public readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @ignore\n     */\n    public _updateID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    protected _textureID: number;\n\n    protected _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    public isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n\n        if ((typeof clampMargin === 'undefined'))\n        {\n            this.clampMargin = (texture.width < 10) ? 0 : 0.5;\n        }\n        else\n        {\n            this.clampMargin = clampMargin;\n        }\n\n        this.isSimple = false;\n\n        this.texture = texture;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this.texture === value) return;\n\n        this._texture?.removeListener('update', this.update, this);\n        this._texture = value;\n        this._texture.addListener('update', this.update, this);\n\n        this.update();\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    public multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed\n     * @returns - whether or not it was updated\n     */\n    public update(): boolean\n    {\n        const tex = this._texture;\n\n        this._updateID++;\n\n        const uvs = tex.uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(\n                orig.width / trim.width,\n                0, 0, orig.height / trim.height,\n                -trim.x / trim.width,\n                -trim.y / trim.height\n            );\n\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.source;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase._resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex.frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex.frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex.frame.x + tex.frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex.frame.y + tex.frame.height - margin + offset) / texBase.height;\n\n        this.uClampOffset[0] = offset / texBase.pixelWidth;\n        this.uClampOffset[1] = offset / texBase.pixelHeight;\n\n        this.isSimple = tex.frame.width === texBase.width\n            && tex.frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}