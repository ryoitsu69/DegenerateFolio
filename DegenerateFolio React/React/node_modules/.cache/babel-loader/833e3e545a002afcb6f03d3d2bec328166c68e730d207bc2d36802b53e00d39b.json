{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initAccountsForContext = void 0;\nconst web3_types_1 = require(\"web3-types\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_1 = require(\"web3-eth\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nconst initAccountsForContext = context => {\n  const signTransactionWithContext = (transaction, privateKey) => __awaiter(void 0, void 0, void 0, function* () {\n    const tx = yield (0, web3_eth_1.prepareTransactionForSigning)(transaction, context);\n    const privateKeyBytes = (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, privateKey, web3_types_1.ETH_DATA_FORMAT);\n    return (0, web3_eth_accounts_1.signTransaction)(tx, privateKeyBytes);\n  });\n  const privateKeyToAccountWithContext = privateKey => {\n    const account = (0, web3_eth_accounts_1.privateKeyToAccount)(privateKey);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n  const decryptWithContext = (keystore, password, options) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n    const account = yield (0, web3_eth_accounts_1.decrypt)(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  });\n  const createWithContext = () => {\n    const account = (0, web3_eth_accounts_1.create)();\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: transaction => __awaiter(void 0, void 0, void 0, function* () {\n        return signTransactionWithContext(transaction, account.privateKey);\n      })\n    });\n  };\n  const wallet = new web3_eth_accounts_1.Wallet({\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext\n  });\n  return {\n    signTransaction: signTransactionWithContext,\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext,\n    recoverTransaction: web3_eth_accounts_1.recoverTransaction,\n    hashMessage: web3_eth_accounts_1.hashMessage,\n    sign: web3_eth_accounts_1.sign,\n    recover: web3_eth_accounts_1.recover,\n    encrypt: web3_eth_accounts_1.encrypt,\n    wallet,\n    privateKeyToAddress: web3_eth_accounts_1.privateKeyToAddress,\n    parseAndValidatePrivateKey: web3_eth_accounts_1.parseAndValidatePrivateKey,\n    privateKeyToPublicKey: web3_eth_accounts_1.privateKeyToPublicKey\n  };\n};\nexports.initAccountsForContext = initAccountsForContext;","map":{"version":3,"names":["web3_types_1","require","web3_utils_1","web3_eth_1","web3_eth_accounts_1","initAccountsForContext","context","signTransactionWithContext","transaction","privateKey","__awaiter","tx","prepareTransactionForSigning","privateKeyBytes","format","ETH_DATA_FORMAT","signTransaction","privateKeyToAccountWithContext","account","privateKeyToAccount","Object","assign","decryptWithContext","keystore","password","options","decrypt","_a","nonStrict","createWithContext","create","wallet","Wallet","recoverTransaction","hashMessage","sign","recover","encrypt","privateKeyToAddress","parseAndValidatePrivateKey","privateKeyToPublicKey","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3/src/accounts.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { EthExecutionAPI, Bytes, Transaction, KeyStore, ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { Web3Context } from 'web3-core';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport {\n\tcreate,\n\tdecrypt,\n\tencrypt,\n\thashMessage,\n\tprivateKeyToAccount,\n\trecover,\n\trecoverTransaction,\n\tsignTransaction,\n\tsign,\n\tWallet,\n\tprivateKeyToAddress, \n\tparseAndValidatePrivateKey, \n\tprivateKeyToPublicKey,\n} from 'web3-eth-accounts';\n\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nexport const initAccountsForContext = (context: Web3Context<EthExecutionAPI>) => {\n\tconst signTransactionWithContext = async (transaction: Transaction, privateKey: Bytes) => {\n\t\tconst tx = await prepareTransactionForSigning(transaction, context);\n\n\t\tconst privateKeyBytes = format({ format: 'bytes' }, privateKey, ETH_DATA_FORMAT);\n\n\t\treturn signTransaction(tx, privateKeyBytes);\n\t};\n\n\tconst privateKeyToAccountWithContext = (privateKey: Uint8Array | string) => {\n\t\tconst account = privateKeyToAccount(privateKey);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst decryptWithContext = async (\n\t\tkeystore: KeyStore | string,\n\t\tpassword: string,\n\t\toptions?: Record<string, unknown>,\n\t) => {\n\t\tconst account = await decrypt(keystore, password, (options?.nonStrict as boolean) ?? true);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst createWithContext = () => {\n\t\tconst account = create();\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst wallet = new Wallet({\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t});\n\n\treturn {\n\t\tsignTransaction: signTransactionWithContext,\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t\trecoverTransaction,\n\t\thashMessage,\n\t\tsign,\n\t\trecover,\n\t\tencrypt,\n\t\twallet,\n\t\tprivateKeyToAddress, \n\t\tparseAndValidatePrivateKey, \n\t\tprivateKeyToPublicKey,\n\t}\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}