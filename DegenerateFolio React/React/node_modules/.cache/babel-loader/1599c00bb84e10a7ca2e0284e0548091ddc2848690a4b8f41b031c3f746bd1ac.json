{"ast":null,"code":"import { Rectangle } from './Rectangle.mjs';\n\"use strict\";\nclass Circle {\n  /**\n   * @param x - The X coordinate of the center of this circle\n   * @param y - The Y coordinate of the center of this circle\n   * @param radius - The radius of the circle\n   */\n  constructor(x = 0, y = 0, radius = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'circle'\n     */\n    this.type = \"circle\";\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   * @returns A copy of the Circle\n   */\n  clone() {\n    return new Circle(this.x, this.y, this.radius);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  contains(x, y) {\n    if (this.radius <= 0) return false;\n    const r2 = this.radius * this.radius;\n    let dx = this.x - x;\n    let dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle including the stroke.\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param width - The width of the line to check\n   * @returns Whether the x/y coordinates are within this Circle\n   */\n  strokeContains(x, y, width) {\n    if (this.radius === 0) return false;\n    const dx = this.x - x;\n    const dy = this.y - y;\n    const r = this.radius;\n    const w2 = width / 2;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < r + w2 && distance > r - w2;\n  }\n  /**\n   * Returns the framing rectangle of the circle as a Rectangle object\n   * @param out\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    out.x = this.x - this.radius;\n    out.y = this.y - this.radius;\n    out.width = this.radius * 2;\n    out.height = this.radius * 2;\n    return out;\n  }\n  /**\n   * Copies another circle to this one.\n   * @param circle - The circle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(circle) {\n    this.x = circle.x;\n    this.y = circle.y;\n    this.radius = circle.radius;\n    return this;\n  }\n  /**\n   * Copies this circle to another one.\n   * @param circle - The circle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(circle) {\n    circle.copyFrom(this);\n    return circle;\n  }\n  toString() {\n    return `[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n  }\n}\nexport { Circle };","map":{"version":3,"names":["Circle","constructor","x","y","radius","type","clone","contains","r2","dx","dy","strokeContains","width","r","w2","distance","Math","sqrt","getBounds","out","Rectangle","height","copyFrom","circle","copyTo","toString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/shapes/Circle.ts"],"sourcesContent":["import { Rectangle } from './Rectangle';\n\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for containers.\n * @memberof maths\n */\nexport class Circle implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the center of this circle\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the center of this circle\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The radius of the circle\n     *  @default 0\n     */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'circle'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'circle';\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    public clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0) return false;\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle including the stroke.\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param width - The width of the line to check\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    public strokeContains(x: number, y: number, width: number): boolean\n    {\n        if (this.radius === 0) return false;\n\n        const dx = (this.x - x);\n        const dy = (this.y - y);\n        const r = this.radius;\n        const w2 = width / 2;\n        const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n        return (distance < r + w2 && distance > r - w2);\n    }\n\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @param out\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n\n        out.x = this.x - this.radius;\n        out.y = this.y - this.radius;\n        out.width = this.radius * 2;\n        out.height = this.radius * 2;\n\n        return out;\n    }\n\n    /**\n     * Copies another circle to this one.\n     * @param circle - The circle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(circle: Circle): this\n    {\n        this.x = circle.x;\n        this.y = circle.y;\n        this.radius = circle.radius;\n\n        return this;\n    }\n\n    /**\n     * Copies this circle to another one.\n     * @param circle - The circle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(circle: Circle): Circle\n    {\n        circle.copyFrom(this);\n\n        return circle;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n"],"mappings":";;AASO,MAAMA,MACb;EAAA;AAAA;AAAA;AAAA;AAAA;EA8BIC,YAAYC,CAAI,MAAGC,CAAI,MAAGC,MAAA,GAAS,CACnC;IARA;AAAA;AAAA;AAAA;IAAA,KAAgBC,IAAwB;IASpC,KAAKH,CAAI,GAAAA,CAAA;IACT,KAAKC,CAAI,GAAAA,CAAA;IACT,KAAKC,MAAS,GAAAA,MAAA;EAAA;EAClB;AAAA;AAAA;AAAA;EAMOE,KACPA,CAAA;IACI,OAAO,IAAIN,MAAO,MAAKE,CAAA,EAAG,IAAK,CAAAC,CAAA,EAAG,KAAKC,MAAM;EAAA;EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOG,SAASL,CAAA,EAAWC,CAC3B;IACI,IAAI,KAAKC,MAAU,OAAU;IAEvB,MAAAI,EAAA,GAAK,IAAK,CAAAJ,MAAA,GAAS,IAAK,CAAAA,MAAA;IAC1B,IAAAK,EAAA,GAAM,KAAKP,CAAI,GAAAA,CAAA;IACf,IAAAQ,EAAA,GAAM,KAAKP,CAAI,GAAAA,CAAA;IAEbM,EAAA,IAAAA,EAAA;IACAC,EAAA,IAAAA,EAAA;IAEN,OAAQD,EAAA,GAAKC,EAAM,IAAAF,EAAA;EAAA;EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOG,eAAeT,CAAW,EAAAC,CAAA,EAAWS,KAC5C;IACI,IAAI,KAAKR,MAAW,QAAU;IAExB,MAAAK,EAAA,GAAM,KAAKP,CAAI,GAAAA,CAAA;IACf,MAAAQ,EAAA,GAAM,KAAKP,CAAI,GAAAA,CAAA;IACrB,MAAMU,CAAA,GAAI,IAAK,CAAAT,MAAA;IACf,MAAMU,EAAA,GAAKF,KAAQ;IACnB,MAAMG,QAAA,GAAWC,IAAK,CAAAC,IAAA,CAAMR,EAAK,GAAAA,EAAA,GAAOC,EAAA,GAAKA,EAAG;IAEhD,OAAQK,QAAW,GAAAF,CAAA,GAAIC,EAAM,IAAAC,QAAA,GAAWF,CAAI,GAAAC,EAAA;EAAA;EAChD;AAAA;AAAA;AAAA;AAAA;EAOOI,UAAUC,GACjB;IACUA,GAAA,GAAAA,GAAA,IAAO,IAAIC,SAAU;IAEvBD,GAAA,CAAAjB,CAAA,GAAI,IAAK,CAAAA,CAAA,GAAI,IAAK,CAAAE,MAAA;IAClBe,GAAA,CAAAhB,CAAA,GAAI,IAAK,CAAAA,CAAA,GAAI,IAAK,CAAAC,MAAA;IAClBe,GAAA,CAAAP,KAAA,GAAQ,KAAKR,MAAS;IACtBe,GAAA,CAAAE,MAAA,GAAS,KAAKjB,MAAS;IAEpB,OAAAe,GAAA;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;EAOOG,SAASC,MAChB;IACI,KAAKrB,CAAA,GAAIqB,MAAO,CAAArB,CAAA;IAChB,KAAKC,CAAA,GAAIoB,MAAO,CAAApB,CAAA;IAChB,KAAKC,MAAA,GAASmB,MAAO,CAAAnB,MAAA;IAEd;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;EAOOoB,OAAOD,MACd;IACIA,MAAA,CAAOD,QAAA,CAAS,IAAI;IAEb,OAAAC,MAAA;EAAA;EAIJE,QACPA,CAAA;IACW,iCAA0B,KAAKvB,CAAC,MAAM,KAAKC,CAAC,WAAW,KAAKC,MAAM;EAAA;AAGjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}