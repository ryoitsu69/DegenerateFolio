{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\nimport { matrixPool, boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\"use strict\";\nfunction getLocalBounds(target, bounds, relativeMatrix) {\n  bounds.clear();\n  relativeMatrix || (relativeMatrix = Matrix.IDENTITY);\n  _getLocalBounds(target, bounds, relativeMatrix, target, true);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  return bounds;\n}\nfunction _getLocalBounds(target, bounds, parentTransform, rootContainer, isRoot) {\n  let relativeTransform;\n  if (!isRoot) {\n    if (!target.visible || !target.measurable) return;\n    target.updateLocalTransform();\n    const localTransform = target.localTransform;\n    relativeTransform = matrixPool.get();\n    relativeTransform.appendFrom(localTransform, parentTransform);\n  } else {\n    relativeTransform = matrixPool.get();\n    relativeTransform = parentTransform.copyTo(relativeTransform);\n  }\n  const parentBounds = bounds;\n  const preserveBounds = !!target.effects.length;\n  if (preserveBounds) {\n    bounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, relativeTransform);\n  } else {\n    if (target.renderPipeId) {\n      bounds.matrix = relativeTransform;\n      target.addBounds(bounds);\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getLocalBounds(children[i], bounds, relativeTransform, rootContainer, false);\n    }\n  }\n  if (preserveBounds) {\n    for (let i = 0; i < target.effects.length; i++) {\n      target.effects[i].addLocalBounds?.(bounds, rootContainer);\n    }\n    parentBounds.addBounds(bounds, Matrix.IDENTITY);\n    boundsPool.return(bounds);\n  }\n  matrixPool.return(relativeTransform);\n}\nfunction getParent(target, root, matrix) {\n  const parent = target.parent;\n  if (!parent) {\n    warn(\"Item is not inside the root container\");\n    return;\n  }\n  if (parent !== root) {\n    getParent(parent, root, matrix);\n    parent.updateLocalTransform();\n    matrix.append(parent.localTransform);\n  }\n}\nexport { getLocalBounds, getParent };","map":{"version":3,"names":["getLocalBounds","target","bounds","relativeMatrix","clear","Matrix","IDENTITY","_getLocalBounds","isValid","set","parentTransform","rootContainer","isRoot","relativeTransform","visible","measurable","updateLocalTransform","localTransform","matrixPool","get","appendFrom","copyTo","parentBounds","preserveBounds","effects","length","boundsPool","boundsArea","addRect","renderPipeId","matrix","addBounds","children","i","addLocalBounds","return","getParent","root","parent","warn","append"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/container/bounds/getLocalBounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { warn } from '../../../utils/logging/warn';\nimport { boundsPool, matrixPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\nexport function getLocalBounds(target: Container, bounds: Bounds, relativeMatrix?: Matrix): Bounds\n{\n    bounds.clear();\n\n    relativeMatrix ||= Matrix.IDENTITY;\n\n    _getLocalBounds(target, bounds, relativeMatrix, target, true);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    return bounds;\n}\n\nfunction _getLocalBounds(\n    target: Container,\n    bounds: Bounds,\n    parentTransform: Matrix,\n    rootContainer: Container,\n    isRoot: boolean\n): void\n{\n    let relativeTransform: Matrix;\n\n    if (!isRoot)\n    {\n        if (!target.visible || !target.measurable) return;\n\n        target.updateLocalTransform();\n\n        const localTransform = target.localTransform;\n\n        relativeTransform = matrixPool.get();\n        relativeTransform.appendFrom(localTransform, parentTransform);\n    }\n    else\n    {\n        relativeTransform = matrixPool.get();\n        relativeTransform = parentTransform.copyTo(relativeTransform);\n    }\n\n    const parentBounds = bounds;\n    const preserveBounds = !!target.effects.length;\n\n    if (preserveBounds)\n    {\n        bounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, relativeTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            bounds.matrix = relativeTransform;\n            (target as Renderable).addBounds(bounds);\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getLocalBounds(children[i], bounds, relativeTransform, rootContainer, false);\n        }\n    }\n\n    if (preserveBounds)\n    {\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            target.effects[i].addLocalBounds?.(bounds, rootContainer);\n        }\n\n        // TODO - make a add transformed bounds?\n        parentBounds.addBounds(bounds, Matrix.IDENTITY);\n\n        boundsPool.return(bounds);\n    }\n\n    matrixPool.return(relativeTransform);\n}\n\nexport function getParent(target: Container, root: Container, matrix: Matrix)\n{\n    const parent = target.parent;\n\n    if (!parent)\n    {\n        // we have reach the top of the tree!\n        // #if _DEBUG\n        warn('Item is not inside the root container');\n        // #endif\n\n        return;\n    }\n\n    if (parent !== root)\n    {\n        getParent(parent, root, matrix);\n\n        parent.updateLocalTransform();\n        matrix.append(parent.localTransform);\n    }\n}\n\n"],"mappings":";;;;AAQgB,SAAAA,eAAeC,MAAmB,EAAAC,MAAA,EAAgBC,cAClE;EACID,MAAA,CAAOE,KAAM;EAEbD,cAAA,KAAAA,cAAA,GAAmBE,MAAO,CAAAC,QAAA;EAE1BC,eAAA,CAAgBN,MAAQ,EAAAC,MAAA,EAAQC,cAAgB,EAAAF,MAAA,EAAQ,IAAI;EAExD,KAACC,MAAA,CAAOM,OACZ;IACIN,MAAA,CAAOO,GAAI,IAAG,CAAG,KAAG,CAAC;EAAA;EAGlB,OAAAP,MAAA;AACX;AAEA,SAASK,eACLA,CAAAN,MAAA,EACAC,MACA,EAAAQ,eAAA,EACAC,aAAA,EACAC,MAEJ;EACQ,IAAAC,iBAAA;EAEJ,IAAI,CAACD,MACL;IACI,IAAI,CAACX,MAAA,CAAOa,OAAW,KAACb,MAAO,CAAAc,UAAA,EAAY;IAE3Cd,MAAA,CAAOe,oBAAqB;IAE5B,MAAMC,cAAA,GAAiBhB,MAAO,CAAAgB,cAAA;IAE9BJ,iBAAA,GAAoBK,UAAA,CAAWC,GAAI;IACjBN,iBAAA,CAAAO,UAAA,CAAWH,cAAA,EAAgBP,eAAe;EAAA,CAGhE;IACIG,iBAAA,GAAoBK,UAAA,CAAWC,GAAI;IACfN,iBAAA,GAAAH,eAAA,CAAgBW,MAAA,CAAOR,iBAAiB;EAAA;EAGhE,MAAMS,YAAe,GAAApB,MAAA;EACrB,MAAMqB,cAAiB,IAAC,CAACtB,MAAA,CAAOuB,OAAQ,CAAAC,MAAA;EAExC,IAAIF,cACJ;IACarB,MAAA,GAAAwB,UAAA,CAAWP,GAAI,GAAEf,KAAM;EAAA;EAGpC,IAAIH,MAAA,CAAO0B,UACX;IACWzB,MAAA,CAAA0B,OAAA,CAAQ3B,MAAO,CAAA0B,UAAA,EAAYd,iBAAiB;EAAA,CAGvD;IACI,IAAIZ,MAAA,CAAO4B,YACX;MACI3B,MAAA,CAAO4B,MAAS,GAAAjB,iBAAA;MACfZ,MAAA,CAAsB8B,SAAA,CAAU7B,MAAM;IAAA;IAG3C,MAAM8B,QAAA,GAAW/B,MAAO,CAAA+B,QAAA;IAExB,SAASC,CAAI,MAAGA,CAAI,GAAAD,QAAA,CAASP,MAAA,EAAQQ,CACrC;MACI1B,eAAA,CAAgByB,QAAA,CAASC,CAAC,GAAG/B,MAAQ,EAAAW,iBAAA,EAAmBF,aAAA,EAAe,KAAK;IAAA;EAChF;EAGJ,IAAIY,cACJ;IACI,SAASU,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIhC,MAAO,CAAAuB,OAAA,CAAQC,MAAA,EAAQQ,CAC3C;MACIhC,MAAA,CAAOuB,OAAQ,CAAAS,CAAC,CAAE,CAAAC,cAAA,GAAiBhC,MAAA,EAAQS,aAAa;IAAA;IAI/CW,YAAA,CAAAS,SAAA,CAAU7B,MAAQ,EAAAG,MAAA,CAAOC,QAAQ;IAE9CoB,UAAA,CAAWS,MAAA,CAAOjC,MAAM;EAAA;EAG5BgB,UAAA,CAAWiB,MAAA,CAAOtB,iBAAiB;AACvC;AAEgB,SAAAuB,UAAUnC,MAAmB,EAAAoC,IAAA,EAAiBP,MAC9D;EACI,MAAMQ,MAAA,GAASrC,MAAO,CAAAqC,MAAA;EAEtB,IAAI,CAACA,MACL;IAGIC,IAAA,CAAK,uCAAuC;IAG5C;EAAA;EAGJ,IAAID,MAAA,KAAWD,IACf;IACcD,SAAA,CAAAE,MAAA,EAAQD,IAAA,EAAMP,MAAM;IAE9BQ,MAAA,CAAOtB,oBAAqB;IACrBc,MAAA,CAAAU,MAAA,CAAOF,MAAA,CAAOrB,cAAc;EAAA;AAE3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}