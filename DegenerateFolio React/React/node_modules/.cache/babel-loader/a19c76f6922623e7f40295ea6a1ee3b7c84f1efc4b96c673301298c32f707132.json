{"ast":null,"code":"\"use strict\";\n\nfunction buildInstructions(renderGroup, renderPipes) {\n  const root = renderGroup.root;\n  const instructionSet = renderGroup.instructionSet;\n  instructionSet.reset();\n  renderPipes.batch.buildStart(instructionSet);\n  renderPipes.blendMode.buildStart();\n  renderPipes.colorMask.buildStart();\n  if (root.sortableChildren) {\n    root.sortChildren();\n  }\n  collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n  renderPipes.batch.buildEnd(instructionSet);\n  renderPipes.blendMode.buildEnd(instructionSet);\n}\nfunction collectAllRenderables(container, instructionSet, rendererPipes) {\n  if (container.globalDisplayStatus < 7 || !container.includeInBuild) return;\n  if (container.sortableChildren) {\n    container.sortChildren();\n  }\n  if (container.isSimple) {\n    collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n  } else {\n    collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n  }\n}\nfunction collectAllRenderablesSimple(container, instructionSet, renderPipes) {\n  if (container.renderPipeId) {\n    renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n    container.didViewUpdate = false;\n    const rp = renderPipes;\n    rp[container.renderPipeId].addRenderable(container, instructionSet);\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      collectAllRenderables(children[i], instructionSet, renderPipes);\n    }\n  }\n}\nfunction collectAllRenderablesAdvanced(container, instructionSet, renderPipes, isRoot) {\n  if (!isRoot && container.renderGroup) {\n    renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n  } else {\n    for (let i = 0; i < container.effects.length; i++) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, container, instructionSet);\n    }\n    const renderPipeId = container.renderPipeId;\n    if (renderPipeId) {\n      renderPipes.blendMode.setBlendMode(container, container.groupBlendMode, instructionSet);\n      container.didViewUpdate = false;\n      const pipe = renderPipes[renderPipeId];\n      pipe.addRenderable(container, instructionSet);\n    }\n    const children = container.children;\n    if (children.length) {\n      for (let i = 0; i < children.length; i++) {\n        collectAllRenderables(children[i], instructionSet, renderPipes);\n      }\n    }\n    for (let i = container.effects.length - 1; i >= 0; i--) {\n      const effect = container.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, container, instructionSet);\n    }\n  }\n}\nexport { buildInstructions, collectAllRenderables };","map":{"version":3,"names":["buildInstructions","renderGroup","renderPipes","root","instructionSet","reset","batch","buildStart","blendMode","colorMask","sortableChildren","sortChildren","collectAllRenderablesAdvanced","buildEnd","collectAllRenderables","container","rendererPipes","globalDisplayStatus","includeInBuild","isSimple","collectAllRenderablesSimple","renderPipeId","setBlendMode","groupBlendMode","didViewUpdate","rp","addRenderable","children","length","i","isRoot","addRenderGroup","effects","effect","pipe","push","pop"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/container/utils/buildInstructions.ts"],"sourcesContent":["import type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes)\n{\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n\n    instructionSet.reset();\n\n    // TODO add some events / runners for build start\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n\n    if (root.sortableChildren)\n    {\n        root.sortChildren();\n    }\n\n    collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n\n    // instructionSet.log();\n    // TODO add some events / runners for build end\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n\n    // instructionSet.log();\n}\n\nexport function collectAllRenderables(\n    container: Container,\n    instructionSet: InstructionSet,\n    rendererPipes: RenderPipes\n): void\n{\n    // if there is 0b01 or 0b10 the return value\n\n    if (container.globalDisplayStatus < 0b111 || !container.includeInBuild) return;\n\n    if (container.sortableChildren)\n    {\n        container.sortChildren();\n    }\n\n    if (container.isSimple)\n    {\n        collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n    }\n    else\n    {\n        collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n    }\n}\n\nfunction collectAllRenderablesSimple(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes\n): void\n{\n    if (container.renderPipeId)\n    {\n        // TODO add blends in\n        renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n\n        container.didViewUpdate = false;\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[container.renderPipeId].addRenderable(container as Renderable, instructionSet);\n    }\n\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            collectAllRenderables(children[i], instructionSet, renderPipes);\n        }\n    }\n}\n\nfunction collectAllRenderablesAdvanced(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes,\n    isRoot: boolean\n): void\n{\n    if (!isRoot && container.renderGroup)\n    {\n        renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    }\n    else\n    {\n        for (let i = 0; i < container.effects.length; i++)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.push(effect, container, instructionSet);\n        }\n\n        const renderPipeId = container.renderPipeId;\n\n        if (renderPipeId)\n        {\n            // TODO add blends in\n            renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n            container.didViewUpdate = false;\n\n            const pipe = renderPipes[renderPipeId as keyof RenderPipes]as RenderPipe<any>;\n\n            pipe.addRenderable(container, instructionSet);\n        }\n\n        const children = container.children;\n\n        if (children.length)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                collectAllRenderables(children[i], instructionSet, renderPipes);\n            }\n        }\n\n        // loop backwards through effects\n        for (let i = container.effects.length - 1; i >= 0; i--)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}