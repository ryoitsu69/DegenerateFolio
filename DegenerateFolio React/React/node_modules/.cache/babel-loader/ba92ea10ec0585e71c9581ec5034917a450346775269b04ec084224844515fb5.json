{"ast":null,"code":"import { ed25519PairFromSeed } from '../../ed25519/index.js';\nimport { mnemonicValidate } from '../../mnemonic/index.js';\nimport { HARDENED, hdValidatePath } from '../validatePath.js';\nimport { ledgerDerivePrivate } from './derivePrivate.js';\nimport { ledgerMaster } from './master.js';\nexport function hdLedger(_mnemonic, path) {\n  const words = _mnemonic.split(' ').map(s => s.trim()).filter(s => s);\n  if (![12, 24, 25].includes(words.length)) {\n    throw new Error('Expected a mnemonic with 24 words (or 25 including a password)');\n  }\n  const [mnemonic, password] = words.length === 25 ? [words.slice(0, 24).join(' '), words[24]] : [words.join(' '), ''];\n  if (!mnemonicValidate(mnemonic)) {\n    throw new Error('Invalid mnemonic passed to ledger derivation');\n  } else if (!hdValidatePath(path)) {\n    throw new Error('Invalid derivation path');\n  }\n  const parts = path.split('/').slice(1);\n  let seed = ledgerMaster(mnemonic, password);\n  for (const p of parts) {\n    const n = parseInt(p.replace(/'$/, ''), 10);\n    seed = ledgerDerivePrivate(seed, n < HARDENED ? n + HARDENED : n);\n  }\n  return ed25519PairFromSeed(seed.slice(0, 32));\n}","map":{"version":3,"names":["ed25519PairFromSeed","mnemonicValidate","HARDENED","hdValidatePath","ledgerDerivePrivate","ledgerMaster","hdLedger","_mnemonic","path","words","split","map","s","trim","filter","includes","length","Error","mnemonic","password","slice","join","parts","seed","p","n","parseInt","replace"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/hd/ledger/index.js"],"sourcesContent":["import { ed25519PairFromSeed } from '../../ed25519/index.js';\nimport { mnemonicValidate } from '../../mnemonic/index.js';\nimport { HARDENED, hdValidatePath } from '../validatePath.js';\nimport { ledgerDerivePrivate } from './derivePrivate.js';\nimport { ledgerMaster } from './master.js';\nexport function hdLedger(_mnemonic, path) {\n    const words = _mnemonic\n        .split(' ')\n        .map((s) => s.trim())\n        .filter((s) => s);\n    if (![12, 24, 25].includes(words.length)) {\n        throw new Error('Expected a mnemonic with 24 words (or 25 including a password)');\n    }\n    const [mnemonic, password] = words.length === 25\n        ? [words.slice(0, 24).join(' '), words[24]]\n        : [words.join(' '), ''];\n    if (!mnemonicValidate(mnemonic)) {\n        throw new Error('Invalid mnemonic passed to ledger derivation');\n    }\n    else if (!hdValidatePath(path)) {\n        throw new Error('Invalid derivation path');\n    }\n    const parts = path.split('/').slice(1);\n    let seed = ledgerMaster(mnemonic, password);\n    for (const p of parts) {\n        const n = parseInt(p.replace(/'$/, ''), 10);\n        seed = ledgerDerivePrivate(seed, (n < HARDENED) ? (n + HARDENED) : n);\n    }\n    return ed25519PairFromSeed(seed.slice(0, 32));\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,wBAAwB;AAC5D,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,QAAQ,EAAEC,cAAc,QAAQ,oBAAoB;AAC7D,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,YAAY,QAAQ,aAAa;AAC1C,OAAO,SAASC,QAAQA,CAACC,SAAS,EAAEC,IAAI,EAAE;EACtC,MAAMC,KAAK,GAAGF,SAAS,CAClBG,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CACpBC,MAAM,CAAEF,CAAC,IAAKA,CAAC,CAAC;EACrB,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAACG,QAAQ,CAACN,KAAK,CAACO,MAAM,CAAC,EAAE;IACtC,MAAM,IAAIC,KAAK,CAAC,gEAAgE,CAAC;EACrF;EACA,MAAM,CAACC,QAAQ,EAAEC,QAAQ,CAAC,GAAGV,KAAK,CAACO,MAAM,KAAK,EAAE,GAC1C,CAACP,KAAK,CAACW,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAEZ,KAAK,CAAC,EAAE,CAAC,CAAC,GACzC,CAACA,KAAK,CAACY,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;EAC3B,IAAI,CAACpB,gBAAgB,CAACiB,QAAQ,CAAC,EAAE;IAC7B,MAAM,IAAID,KAAK,CAAC,8CAA8C,CAAC;EACnE,CAAC,MACI,IAAI,CAACd,cAAc,CAACK,IAAI,CAAC,EAAE;IAC5B,MAAM,IAAIS,KAAK,CAAC,yBAAyB,CAAC;EAC9C;EACA,MAAMK,KAAK,GAAGd,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACU,KAAK,CAAC,CAAC,CAAC;EACtC,IAAIG,IAAI,GAAGlB,YAAY,CAACa,QAAQ,EAAEC,QAAQ,CAAC;EAC3C,KAAK,MAAMK,CAAC,IAAIF,KAAK,EAAE;IACnB,MAAMG,CAAC,GAAGC,QAAQ,CAACF,CAAC,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;IAC3CJ,IAAI,GAAGnB,mBAAmB,CAACmB,IAAI,EAAGE,CAAC,GAAGvB,QAAQ,GAAKuB,CAAC,GAAGvB,QAAQ,GAAIuB,CAAC,CAAC;EACzE;EACA,OAAOzB,mBAAmB,CAACuB,IAAI,CAACH,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}