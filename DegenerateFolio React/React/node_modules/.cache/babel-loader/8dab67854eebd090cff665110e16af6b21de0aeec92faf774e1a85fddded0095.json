{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst childProcess = require('child_process');\n\n/**\n * Options for configuring an executed command.\n *\n * @record\n */\nclass Options {\n  constructor() {\n    /**\n     * Command line arguments for the child process, if any.\n     * @type (!Array<string>|undefined)\n     */\n    this.args;\n\n    /**\n     * Environment variables for the spawned process. If unspecified, the\n     * child will inherit this process' environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env;\n\n    /**\n     * IO conifguration for the spawned server child process. If unspecified,\n     * the child process' IO output will be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *           undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio;\n  }\n}\n\n/**\n * Describes a command's termination conditions.\n */\nclass Result {\n  /**\n   * @param {?number} code The exit code, or {@code null} if the command did not\n   *     exit normally.\n   * @param {?string} signal The signal used to kill the command, or\n   *     {@code null}.\n   */\n  constructor(code, signal) {\n    /** @type {?number} */\n    this.code = code;\n\n    /** @type {?string} */\n    this.signal = signal;\n  }\n\n  /** @override */\n  toString() {\n    return `Result(code=${this.code}, signal=${this.signal})`;\n  }\n}\nconst COMMAND_RESULT = /** !WeakMap<!Command, !Promise<!Result>> */new WeakMap();\nconst KILL_HOOK = /** !WeakMap<!Command, function(string)> */new WeakMap();\n\n/**\n * Represents a command running in a sub-process.\n */\nclass Command {\n  /**\n   * @param {!Promise<!Result>} result The command result.\n   * @param {function(string)} onKill The function to call when {@link #kill()}\n   *     is called.\n   */\n  constructor(result, onKill) {\n    COMMAND_RESULT.set(this, result);\n    KILL_HOOK.set(this, onKill);\n  }\n\n  /**\n   * @return {!Promise<!Result>} A promise for the result of this\n   *     command.\n   */\n  result() {\n    return /** @type {!Promise<!Result>} */COMMAND_RESULT.get(this);\n  }\n\n  /**\n   * Sends a signal to the underlying process.\n   * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.\n   */\n  kill(opt_signal) {\n    KILL_HOOK.get(this)(opt_signal || 'SIGTERM');\n  }\n}\n\n// PUBLIC API\n\n/**\n * Spawns a child process. The returned {@link Command} may be used to wait\n * for the process result or to send signals to the process.\n *\n * @param {string} command The executable to spawn.\n * @param {Options=} opt_options The command options.\n * @return {!Command} The launched command.\n */\nfunction exec(command, opt_options) {\n  const options = opt_options || {};\n  let proc = childProcess.spawn(command, options.args || [], {\n    env: options.env || process.env,\n    stdio: options.stdio || 'ignore'\n  });\n\n  // This process should not wait on the spawned child, however, we do\n  // want to ensure the child is killed when this process exits.\n  proc.unref();\n  process.once('exit', onProcessExit);\n  const result = new Promise((resolve, reject) => {\n    proc.once('exit', (code, signal) => {\n      proc = null;\n      process.removeListener('exit', onProcessExit);\n      resolve(new Result(code, signal));\n    });\n    proc.once('error', err => {\n      reject(err);\n    });\n  });\n  return new Command(result, killCommand);\n  function onProcessExit() {\n    killCommand('SIGTERM');\n  }\n  function killCommand(signal) {\n    process.removeListener('exit', onProcessExit);\n    if (proc) {\n      proc.kill(signal);\n      proc = null;\n    }\n  }\n}\n\n// Exported to improve generated API documentation.\n\nmodule.exports = {\n  Command,\n  Options,\n  Result,\n  exec\n};","map":{"version":3,"names":["childProcess","require","Options","constructor","args","env","stdio","Result","code","signal","toString","COMMAND_RESULT","WeakMap","KILL_HOOK","Command","result","onKill","set","get","kill","opt_signal","exec","command","opt_options","options","proc","spawn","process","unref","once","onProcessExit","Promise","resolve","reject","removeListener","err","killCommand","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/io/exec.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\nconst childProcess = require('child_process')\n\n/**\n * Options for configuring an executed command.\n *\n * @record\n */\nclass Options {\n  constructor() {\n    /**\n     * Command line arguments for the child process, if any.\n     * @type (!Array<string>|undefined)\n     */\n    this.args\n\n    /**\n     * Environment variables for the spawned process. If unspecified, the\n     * child will inherit this process' environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env\n\n    /**\n     * IO conifguration for the spawned server child process. If unspecified,\n     * the child process' IO output will be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *           undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio\n  }\n}\n\n/**\n * Describes a command's termination conditions.\n */\nclass Result {\n  /**\n   * @param {?number} code The exit code, or {@code null} if the command did not\n   *     exit normally.\n   * @param {?string} signal The signal used to kill the command, or\n   *     {@code null}.\n   */\n  constructor(code, signal) {\n    /** @type {?number} */\n    this.code = code\n\n    /** @type {?string} */\n    this.signal = signal\n  }\n\n  /** @override */\n  toString() {\n    return `Result(code=${this.code}, signal=${this.signal})`\n  }\n}\n\nconst COMMAND_RESULT = /** !WeakMap<!Command, !Promise<!Result>> */ new WeakMap()\nconst KILL_HOOK = /** !WeakMap<!Command, function(string)> */ new WeakMap()\n\n/**\n * Represents a command running in a sub-process.\n */\nclass Command {\n  /**\n   * @param {!Promise<!Result>} result The command result.\n   * @param {function(string)} onKill The function to call when {@link #kill()}\n   *     is called.\n   */\n  constructor(result, onKill) {\n    COMMAND_RESULT.set(this, result)\n    KILL_HOOK.set(this, onKill)\n  }\n\n  /**\n   * @return {!Promise<!Result>} A promise for the result of this\n   *     command.\n   */\n  result() {\n    return /** @type {!Promise<!Result>} */ (COMMAND_RESULT.get(this))\n  }\n\n  /**\n   * Sends a signal to the underlying process.\n   * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.\n   */\n  kill(opt_signal) {\n    KILL_HOOK.get(this)(opt_signal || 'SIGTERM')\n  }\n}\n\n// PUBLIC API\n\n/**\n * Spawns a child process. The returned {@link Command} may be used to wait\n * for the process result or to send signals to the process.\n *\n * @param {string} command The executable to spawn.\n * @param {Options=} opt_options The command options.\n * @return {!Command} The launched command.\n */\nfunction exec(command, opt_options) {\n  const options = opt_options || {}\n\n  let proc = childProcess.spawn(command, options.args || [], {\n    env: options.env || process.env,\n    stdio: options.stdio || 'ignore',\n  })\n\n  // This process should not wait on the spawned child, however, we do\n  // want to ensure the child is killed when this process exits.\n  proc.unref()\n  process.once('exit', onProcessExit)\n\n  const result = new Promise((resolve, reject) => {\n    proc.once('exit', (code, signal) => {\n      proc = null\n      process.removeListener('exit', onProcessExit)\n      resolve(new Result(code, signal))\n    })\n\n    proc.once('error', (err) => {\n      reject(err)\n    })\n  })\n  return new Command(result, killCommand)\n\n  function onProcessExit() {\n    killCommand('SIGTERM')\n  }\n\n  function killCommand(signal) {\n    process.removeListener('exit', onProcessExit)\n    if (proc) {\n      proc.kill(signal)\n      proc = null\n    }\n  }\n}\n\n// Exported to improve generated API documentation.\n\nmodule.exports = {\n  Command,\n  Options,\n  Result,\n  exec,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,CAAC;EACZC,WAAWA,CAAA,EAAG;IACZ;AACJ;AACA;AACA;IACI,IAAI,CAACC,IAAI;;IAET;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,GAAG;;IAER;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,KAAK;EACZ;AACF;;AAEA;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACX;AACF;AACA;AACA;AACA;AACA;EACEJ,WAAWA,CAACK,IAAI,EAAEC,MAAM,EAAE;IACxB;IACA,IAAI,CAACD,IAAI,GAAGA,IAAI;;IAEhB;IACA,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;;EAEA;EACAC,QAAQA,CAAA,EAAG;IACT,OAAQ,eAAc,IAAI,CAACF,IAAK,YAAW,IAAI,CAACC,MAAO,GAAE;EAC3D;AACF;AAEA,MAAME,cAAc,GAAG,4CAA6C,IAAIC,OAAO,CAAC,CAAC;AACjF,MAAMC,SAAS,GAAG,2CAA4C,IAAID,OAAO,CAAC,CAAC;;AAE3E;AACA;AACA;AACA,MAAME,OAAO,CAAC;EACZ;AACF;AACA;AACA;AACA;EACEX,WAAWA,CAACY,MAAM,EAAEC,MAAM,EAAE;IAC1BL,cAAc,CAACM,GAAG,CAAC,IAAI,EAAEF,MAAM,CAAC;IAChCF,SAAS,CAACI,GAAG,CAAC,IAAI,EAAED,MAAM,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;EACED,MAAMA,CAAA,EAAG;IACP,OAAO,gCAAkCJ,cAAc,CAACO,GAAG,CAAC,IAAI,CAAC;EACnE;;EAEA;AACF;AACA;AACA;EACEC,IAAIA,CAACC,UAAU,EAAE;IACfP,SAAS,CAACK,GAAG,CAAC,IAAI,CAAC,CAACE,UAAU,IAAI,SAAS,CAAC;EAC9C;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,OAAO,EAAEC,WAAW,EAAE;EAClC,MAAMC,OAAO,GAAGD,WAAW,IAAI,CAAC,CAAC;EAEjC,IAAIE,IAAI,GAAGzB,YAAY,CAAC0B,KAAK,CAACJ,OAAO,EAAEE,OAAO,CAACpB,IAAI,IAAI,EAAE,EAAE;IACzDC,GAAG,EAAEmB,OAAO,CAACnB,GAAG,IAAIsB,OAAO,CAACtB,GAAG;IAC/BC,KAAK,EAAEkB,OAAO,CAAClB,KAAK,IAAI;EAC1B,CAAC,CAAC;;EAEF;EACA;EACAmB,IAAI,CAACG,KAAK,CAAC,CAAC;EACZD,OAAO,CAACE,IAAI,CAAC,MAAM,EAAEC,aAAa,CAAC;EAEnC,MAAMf,MAAM,GAAG,IAAIgB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC9CR,IAAI,CAACI,IAAI,CAAC,MAAM,EAAE,CAACrB,IAAI,EAAEC,MAAM,KAAK;MAClCgB,IAAI,GAAG,IAAI;MACXE,OAAO,CAACO,cAAc,CAAC,MAAM,EAAEJ,aAAa,CAAC;MAC7CE,OAAO,CAAC,IAAIzB,MAAM,CAACC,IAAI,EAAEC,MAAM,CAAC,CAAC;IACnC,CAAC,CAAC;IAEFgB,IAAI,CAACI,IAAI,CAAC,OAAO,EAAGM,GAAG,IAAK;MAC1BF,MAAM,CAACE,GAAG,CAAC;IACb,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO,IAAIrB,OAAO,CAACC,MAAM,EAAEqB,WAAW,CAAC;EAEvC,SAASN,aAAaA,CAAA,EAAG;IACvBM,WAAW,CAAC,SAAS,CAAC;EACxB;EAEA,SAASA,WAAWA,CAAC3B,MAAM,EAAE;IAC3BkB,OAAO,CAACO,cAAc,CAAC,MAAM,EAAEJ,aAAa,CAAC;IAC7C,IAAIL,IAAI,EAAE;MACRA,IAAI,CAACN,IAAI,CAACV,MAAM,CAAC;MACjBgB,IAAI,GAAG,IAAI;IACb;EACF;AACF;;AAEA;;AAEAY,MAAM,CAACC,OAAO,GAAG;EACfxB,OAAO;EACPZ,OAAO;EACPK,MAAM;EACNc;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}