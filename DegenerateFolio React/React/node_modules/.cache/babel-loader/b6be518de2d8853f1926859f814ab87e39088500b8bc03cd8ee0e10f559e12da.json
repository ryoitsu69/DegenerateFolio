{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.format = exports.convert = exports.convertScalarValue = exports.isDataFormat = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_types_1 = require(\"web3-types\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst converters_js_1 = require(\"./converters.js\");\nconst objects_js_1 = require(\"./objects.js\");\nconst string_manipulation_js_1 = require(\"./string_manipulation.js\");\nconst uint8array_js_1 = require(\"./uint8array.js\");\nconst {\n  parseBaseType\n} = web3_validator_1.utils;\nconst isDataFormat = dataFormat => typeof dataFormat === 'object' && !(0, web3_validator_1.isNullish)(dataFormat) && 'number' in dataFormat && 'bytes' in dataFormat;\nexports.isDataFormat = isDataFormat;\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\nconst findSchemaByDataPath = function (schema, dataPath) {\n  let oneOfPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let result = Object.assign({}, schema);\n  let previousDataPath;\n  for (const dataPart of dataPath) {\n    if (result.oneOf && previousDataPath) {\n      const path = oneOfPath.find(function (element) {\n        return this === element[0];\n      }, previousDataPath !== null && previousDataPath !== void 0 ? previousDataPath : '');\n      if (path && path[0] === previousDataPath) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        result = result.oneOf[path[1]];\n      }\n    }\n    if (!result.properties && !result.items) {\n      return undefined;\n    }\n    if (result.properties) {\n      result = result.properties[dataPart];\n    } else if (result.items && result.items.properties) {\n      const node = result.items.properties;\n      if (!node) {\n        return undefined;\n      }\n      result = node[dataPart];\n    } else if (result.items && (0, web3_validator_1.isObject)(result.items)) {\n      result = result.items;\n    } else if (result.items && Array.isArray(result.items)) {\n      result = result.items[parseInt(dataPart, 10)];\n    }\n    if (result && dataPart) previousDataPath = dataPart;\n  }\n  return result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\nconst convertScalarValue = (value, ethType, format) => {\n  try {\n    const {\n      baseType,\n      baseTypeSize\n    } = parseBaseType(ethType);\n    if (baseType === 'int' || baseType === 'uint') {\n      switch (format.number) {\n        case web3_types_1.FMT_NUMBER.NUMBER:\n          return Number((0, converters_js_1.toBigInt)(value));\n        case web3_types_1.FMT_NUMBER.HEX:\n          return (0, converters_js_1.numberToHex)((0, converters_js_1.toBigInt)(value));\n        case web3_types_1.FMT_NUMBER.STR:\n          return (0, converters_js_1.toBigInt)(value).toString();\n        case web3_types_1.FMT_NUMBER.BIGINT:\n          return (0, converters_js_1.toBigInt)(value);\n        default:\n          throw new web3_errors_1.FormatterError(\"Invalid format: \".concat(String(format.number)));\n      }\n    }\n    if (baseType === 'bytes') {\n      let paddedValue;\n      if (baseTypeSize) {\n        if (typeof value === 'string') paddedValue = (0, string_manipulation_js_1.padLeft)(value, baseTypeSize * 2);else if ((0, uint8array_js_1.isUint8Array)(value)) {\n          paddedValue = (0, uint8array_js_1.uint8ArrayConcat)(new Uint8Array(baseTypeSize - value.length), value);\n        }\n      } else {\n        paddedValue = value;\n      }\n      switch (format.bytes) {\n        case web3_types_1.FMT_BYTES.HEX:\n          return (0, converters_js_1.bytesToHex)((0, converters_js_1.bytesToUint8Array)(paddedValue));\n        case web3_types_1.FMT_BYTES.UINT8ARRAY:\n          return (0, converters_js_1.bytesToUint8Array)(paddedValue);\n        default:\n          throw new web3_errors_1.FormatterError(\"Invalid format: \".concat(String(format.bytes)));\n      }\n    }\n  } catch (error) {\n    // If someone didn't use `eth` keyword we can return original value\n    // as the scope of this code is formatting not validation\n    return value;\n  }\n  return value;\n};\nexports.convertScalarValue = convertScalarValue;\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\nconst convert = function (data, schema, dataPath, format) {\n  let oneOfPath = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var _a, _b;\n  // If it's a scalar value\n  if (!(0, web3_validator_1.isObject)(data) && !Array.isArray(data)) {\n    return (0, exports.convertScalarValue)(data, schema === null || schema === void 0 ? void 0 : schema.format, format);\n  }\n  const object = data;\n  for (const [key, value] of Object.entries(object)) {\n    dataPath.push(key);\n    const schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);\n    // If value is a scaler value\n    if ((0, web3_validator_1.isNullish)(schemaProp)) {\n      delete object[key];\n      dataPath.pop();\n      continue;\n    }\n    // If value is an object, recurse into it\n    if ((0, web3_validator_1.isObject)(value)) {\n      (0, exports.convert)(value, schema, dataPath, format);\n      dataPath.pop();\n      continue;\n    }\n    // If value is an array\n    if (Array.isArray(value)) {\n      let _schemaProp = schemaProp;\n      // TODO This is a naive approach to solving the issue of\n      // a schema using oneOf. This chunk of code was intended to handle\n      // BlockSchema.transactions\n      // TODO BlockSchema.transactions are not being formatted\n      if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) {\n        // The following code is basically saying:\n        // if the schema specifies oneOf, then we are to loop\n        // over each possible schema and check if they type of the schema\n        // matches the type of value[0], and if so we use the oneOfSchemaProp\n        // as the schema for formatting\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n        schemaProp.oneOf.forEach((oneOfSchemaProp, index) => {\n          var _a, _b;\n          if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) && (typeof value[0] === 'object' && ((_a = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a === void 0 ? void 0 : _a.type) === 'object' || typeof value[0] === 'string' && ((_b = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b === void 0 ? void 0 : _b.type) !== 'object')) {\n            _schemaProp = oneOfSchemaProp;\n            oneOfPath.push([key, index]);\n          }\n        });\n      }\n      if ((0, web3_validator_1.isNullish)(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n        // Can not find schema for array item, delete that item\n        delete object[key];\n        dataPath.pop();\n        continue;\n      }\n      // If schema for array items is a single type\n      if ((0, web3_validator_1.isObject)(_schemaProp.items) && !(0, web3_validator_1.isNullish)(_schemaProp.items.format)) {\n        for (let i = 0; i < value.length; i += 1) {\n          object[key][i] = (0, exports.convertScalarValue)(value[i],\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n          (_a = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a === void 0 ? void 0 : _a.format, format);\n        }\n        dataPath.pop();\n        continue;\n      }\n      // If schema for array items is an object\n      if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === 'object') {\n        for (const arrObject of value) {\n          (0, exports.convert)(arrObject, schema, dataPath, format, oneOfPath);\n        }\n        dataPath.pop();\n        continue;\n      }\n      // If schema for array is a tuple\n      if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n        for (let i = 0; i < value.length; i += 1) {\n          object[key][i] = (0, exports.convertScalarValue)(value[i], _schemaProp.items[i].format, format);\n        }\n        dataPath.pop();\n        continue;\n      }\n    }\n    object[key] = (0, exports.convertScalarValue)(value, schemaProp.format, format);\n    dataPath.pop();\n  }\n  return object;\n};\nexports.convert = convert;\nconst format = (schema, data, returnFormat) => {\n  let dataToParse;\n  if ((0, web3_validator_1.isObject)(data)) {\n    dataToParse = (0, objects_js_1.mergeDeep)({}, data);\n  } else if (Array.isArray(data)) {\n    dataToParse = [...data];\n  } else {\n    dataToParse = data;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const jsonSchema = (0, web3_validator_1.isObject)(schema) ? schema : web3_validator_1.utils.ethAbiToJsonSchema(schema);\n  if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n    throw new web3_errors_1.FormatterError('Invalid json schema for formatting');\n  }\n  return (0, exports.convert)(dataToParse, jsonSchema, [], returnFormat);\n};\nexports.format = format;","map":{"version":3,"names":["web3_errors_1","require","web3_types_1","web3_validator_1","converters_js_1","objects_js_1","string_manipulation_js_1","uint8array_js_1","parseBaseType","utils","isDataFormat","dataFormat","isNullish","exports","findSchemaByDataPath","schema","dataPath","oneOfPath","arguments","length","undefined","result","Object","assign","previousDataPath","dataPart","oneOf","path","find","element","properties","items","node","isObject","Array","isArray","parseInt","convertScalarValue","value","ethType","format","baseType","baseTypeSize","number","FMT_NUMBER","NUMBER","Number","toBigInt","HEX","numberToHex","STR","toString","BIGINT","FormatterError","concat","String","paddedValue","padLeft","isUint8Array","uint8ArrayConcat","Uint8Array","bytes","FMT_BYTES","bytesToHex","bytesToUint8Array","UINT8ARRAY","error","convert","data","object","key","entries","push","schemaProp","pop","_schemaProp","forEach","oneOfSchemaProp","index","_a","type","_b","i","arrObject","returnFormat","dataToParse","mergeDeep","jsonSchema","ethAbiToJsonSchema"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-utils/src/formatter.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport { Bytes, DataFormat, FMT_BYTES, FMT_NUMBER, FormatType } from 'web3-types';\nimport { isNullish, isObject, JsonSchema, utils, ValidationSchemaInput } from 'web3-validator';\nimport { bytesToUint8Array, bytesToHex, numberToHex, toBigInt } from './converters.js';\nimport { mergeDeep } from './objects.js';\nimport { padLeft } from './string_manipulation.js';\nimport { isUint8Array, uint8ArrayConcat } from './uint8array.js';\n\nconst { parseBaseType } = utils;\n\nexport const isDataFormat = (dataFormat: unknown): dataFormat is DataFormat =>\n\ttypeof dataFormat === 'object' &&\n\t!isNullish(dataFormat) &&\n\t'number' in dataFormat &&\n\t'bytes' in dataFormat;\n\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\nconst findSchemaByDataPath = (\n\tschema: JsonSchema,\n\tdataPath: string[],\n\toneOfPath: [string, number][] = [],\n): JsonSchema | undefined => {\n\tlet result: JsonSchema = { ...schema } as JsonSchema;\n\tlet previousDataPath: string | undefined;\n\n\tfor (const dataPart of dataPath) {\n\t\tif (result.oneOf && previousDataPath) {\n\t\t\tconst path = oneOfPath.find(function (element: [string, number]) {\n\t\t\t\treturn (this as unknown as string) === element[0];\n\t\t\t}, previousDataPath ?? '');\n\n\t\t\tif (path && path[0] === previousDataPath) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n\t\t\t\tresult = result.oneOf[path[1]];\n\t\t\t}\n\t\t}\n\t\tif (!result.properties && !result.items) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (result.properties) {\n\t\t\tresult = (result.properties as Record<string, JsonSchema>)[dataPart];\n\t\t} else if (result.items && (result.items as JsonSchema).properties) {\n\t\t\tconst node = (result.items as JsonSchema).properties as Record<string, JsonSchema>;\n\n\t\t\tif (!node) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tresult = node[dataPart];\n\t\t} else if (result.items && isObject(result.items)) {\n\t\t\tresult = result.items;\n\t\t} else if (result.items && Array.isArray(result.items)) {\n\t\t\tresult = result.items[parseInt(dataPart, 10)];\n\t\t}\n\n\t\tif (result && dataPart) previousDataPath = dataPart;\n\t}\n\n\treturn result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\nexport const convertScalarValue = (value: unknown, ethType: string, format: DataFormat) => {\n\ttry {\n\t\tconst { baseType, baseTypeSize } = parseBaseType(ethType);\n\t\tif (baseType === 'int' || baseType === 'uint') {\n\t\t\tswitch (format.number) {\n\t\t\t\tcase FMT_NUMBER.NUMBER:\n\t\t\t\t\treturn Number(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.HEX:\n\t\t\t\t\treturn numberToHex(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.STR:\n\t\t\t\t\treturn toBigInt(value).toString();\n\t\t\t\tcase FMT_NUMBER.BIGINT:\n\t\t\t\t\treturn toBigInt(value);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.number)}`);\n\t\t\t}\n\t\t}\n\t\tif (baseType === 'bytes') {\n\t\t\tlet paddedValue;\n\t\t\tif (baseTypeSize) {\n\t\t\t\tif (typeof value === 'string') paddedValue = padLeft(value, baseTypeSize * 2);\n\t\t\t\telse if (isUint8Array(value)) {\n\t\t\t\t\tpaddedValue = uint8ArrayConcat(\n\t\t\t\t\t\tnew Uint8Array(baseTypeSize - value.length),\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpaddedValue = value;\n\t\t\t}\n\t\t\tswitch (format.bytes) {\n\t\t\t\tcase FMT_BYTES.HEX:\n\t\t\t\t\treturn bytesToHex(bytesToUint8Array(paddedValue as Bytes));\n\t\t\t\tcase FMT_BYTES.UINT8ARRAY:\n\t\t\t\t\treturn bytesToUint8Array(paddedValue as Bytes);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.bytes)}`);\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\t// If someone didn't use `eth` keyword we can return original value\n\t\t// as the scope of this code is formatting not validation\n\t\treturn value;\n\t}\n\n\treturn value;\n};\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\nexport const convert = (\n\tdata: Record<string, unknown> | unknown[] | unknown,\n\tschema: JsonSchema,\n\tdataPath: string[],\n\tformat: DataFormat,\n\toneOfPath: [string, number][] = [],\n) => {\n\t// If it's a scalar value\n\tif (!isObject(data) && !Array.isArray(data)) {\n\t\treturn convertScalarValue(data, schema?.format as string, format);\n\t}\n\n\tconst object = data as Record<string, unknown>;\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tdataPath.push(key);\n\t\tconst schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);\n\n\t\t// If value is a scaler value\n\t\tif (isNullish(schemaProp)) {\n\t\t\tdelete object[key];\n\t\t\tdataPath.pop();\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If value is an object, recurse into it\n\t\tif (isObject(value)) {\n\t\t\tconvert(value, schema, dataPath, format);\n\t\t\tdataPath.pop();\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If value is an array\n\t\tif (Array.isArray(value)) {\n\t\t\tlet _schemaProp = schemaProp;\n\n\t\t\t// TODO This is a naive approach to solving the issue of\n\t\t\t// a schema using oneOf. This chunk of code was intended to handle\n\t\t\t// BlockSchema.transactions\n\t\t\t// TODO BlockSchema.transactions are not being formatted\n\t\t\tif (schemaProp?.oneOf !== undefined) {\n\t\t\t\t// The following code is basically saying:\n\t\t\t\t// if the schema specifies oneOf, then we are to loop\n\t\t\t\t// over each possible schema and check if they type of the schema\n\t\t\t\t// matches the type of value[0], and if so we use the oneOfSchemaProp\n\t\t\t\t// as the schema for formatting\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\t\tschemaProp.oneOf.forEach((oneOfSchemaProp: JsonSchema, index: number) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!Array.isArray(schemaProp?.items) &&\n\t\t\t\t\t\t((typeof value[0] === 'object' &&\n\t\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type === 'object') ||\n\t\t\t\t\t\t\t(typeof value[0] === 'string' &&\n\t\t\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type !== 'object'))\n\t\t\t\t\t) {\n\t\t\t\t\t\t_schemaProp = oneOfSchemaProp;\n\t\t\t\t\t\toneOfPath.push([key, index]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (isNullish(_schemaProp?.items)) {\n\t\t\t\t// Can not find schema for array item, delete that item\n\t\t\t\tdelete object[key];\n\t\t\t\tdataPath.pop();\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array items is a single type\n\t\t\tif (isObject(_schemaProp.items) && !isNullish(_schemaProp.items.format)) {\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\t\tvalue[i],\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\t\t_schemaProp?.items?.format,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array items is an object\n\t\t\tif (!Array.isArray(_schemaProp?.items) && _schemaProp?.items?.type === 'object') {\n\t\t\t\tfor (const arrObject of value) {\n\t\t\t\t\tconvert(\n\t\t\t\t\t\tarrObject as Record<string, unknown> | unknown[],\n\t\t\t\t\t\tschema,\n\t\t\t\t\t\tdataPath,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t\toneOfPath,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If schema for array is a tuple\n\t\t\tif (Array.isArray(_schemaProp?.items)) {\n\t\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\t\tvalue[i],\n\t\t\t\t\t\t_schemaProp.items[i].format as string,\n\t\t\t\t\t\tformat,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tobject[key] = convertScalarValue(value, schemaProp.format as string, format);\n\n\t\tdataPath.pop();\n\t}\n\n\treturn object;\n};\n\nexport const format = <\n\tDataType extends Record<string, unknown> | unknown[] | unknown,\n\tReturnType extends DataFormat,\n>(\n\tschema: ValidationSchemaInput | JsonSchema,\n\tdata: DataType,\n\treturnFormat: ReturnType,\n): FormatType<DataType, ReturnType> => {\n\tlet dataToParse: Record<string, unknown> | unknown[] | unknown;\n\n\tif (isObject(data)) {\n\t\tdataToParse = mergeDeep({}, data);\n\t} else if (Array.isArray(data)) {\n\t\tdataToParse = [...data];\n\t} else {\n\t\tdataToParse = data;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst jsonSchema: JsonSchema = isObject(schema) ? schema : utils.ethAbiToJsonSchema(schema);\n\n\tif (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n\t\tthrow new FormatterError('Invalid json schema for formatting');\n\t}\n\n\treturn convert(dataToParse, jsonSchema, [], returnFormat) as FormatType<\n\t\ttypeof data,\n\t\tReturnType\n\t>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}