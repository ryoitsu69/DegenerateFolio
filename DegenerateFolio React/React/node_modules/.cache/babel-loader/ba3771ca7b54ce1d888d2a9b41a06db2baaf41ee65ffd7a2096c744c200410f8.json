{"ast":null,"code":"import { utils } from '@scure/base';\nimport { createDecode, createEncode, createIs, createValidate } from './helpers.js';\nconst chars = 'abcdefghijklmnopqrstuvwxyz234567';\nconst config = {\n  chars,\n  coder: utils.chain(\n  // We define our own chain, the default base32 has padding\n  utils.radix2(5), utils.alphabet(chars), {\n    decode: input => input.split(''),\n    encode: input => input.join('')\n  }),\n  ipfs: 'b',\n  type: 'base32'\n};\n/**\n * @name base32Validate\n * @summary Validates a base32 value.\n * @description\n * Validates that the supplied value is valid base32, throwing exceptions if not\n */\nexport const base32Validate = /*#__PURE__*/createValidate(config);\n/**\n* @name isBase32\n* @description Checks if the input is in base32, returning true/false\n*/\nexport const isBase32 = /*#__PURE__*/createIs(base32Validate);\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\nexport const base32Decode = /*#__PURE__*/createDecode(config, base32Validate);\n/**\n* @name base32Encode\n* @summary Creates a base32 value.\n* @description\n* From the provided input, create the base32 and return the result as a string.\n*/\nexport const base32Encode = /*#__PURE__*/createEncode(config);","map":{"version":3,"names":["utils","createDecode","createEncode","createIs","createValidate","chars","config","coder","chain","radix2","alphabet","decode","input","split","encode","join","ipfs","type","base32Validate","isBase32","base32Decode","base32Encode"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/base32/bs32.js"],"sourcesContent":["import { utils } from '@scure/base';\nimport { createDecode, createEncode, createIs, createValidate } from './helpers.js';\nconst chars = 'abcdefghijklmnopqrstuvwxyz234567';\nconst config = {\n    chars,\n    coder: utils.chain(\n    // We define our own chain, the default base32 has padding\n    utils.radix2(5), utils.alphabet(chars), {\n        decode: (input) => input.split(''),\n        encode: (input) => input.join('')\n    }),\n    ipfs: 'b',\n    type: 'base32'\n};\n/**\n * @name base32Validate\n * @summary Validates a base32 value.\n * @description\n * Validates that the supplied value is valid base32, throwing exceptions if not\n */\nexport const base32Validate = /*#__PURE__*/ createValidate(config);\n/**\n* @name isBase32\n* @description Checks if the input is in base32, returning true/false\n*/\nexport const isBase32 = /*#__PURE__*/ createIs(base32Validate);\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\nexport const base32Decode = /*#__PURE__*/ createDecode(config, base32Validate);\n/**\n* @name base32Encode\n* @summary Creates a base32 value.\n* @description\n* From the provided input, create the base32 and return the result as a string.\n*/\nexport const base32Encode = /*#__PURE__*/ createEncode(config);\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,aAAa;AACnC,SAASC,YAAY,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,cAAc;AACnF,MAAMC,KAAK,GAAG,kCAAkC;AAChD,MAAMC,MAAM,GAAG;EACXD,KAAK;EACLE,KAAK,EAAEP,KAAK,CAACQ,KAAK;EAClB;EACAR,KAAK,CAACS,MAAM,CAAC,CAAC,CAAC,EAAET,KAAK,CAACU,QAAQ,CAACL,KAAK,CAAC,EAAE;IACpCM,MAAM,EAAGC,KAAK,IAAKA,KAAK,CAACC,KAAK,CAAC,EAAE,CAAC;IAClCC,MAAM,EAAGF,KAAK,IAAKA,KAAK,CAACG,IAAI,CAAC,EAAE;EACpC,CAAC,CAAC;EACFC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,aAAcd,cAAc,CAACE,MAAM,CAAC;AAClE;AACA;AACA;AACA;AACA,OAAO,MAAMa,QAAQ,GAAG,aAAchB,QAAQ,CAACe,cAAc,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAG,aAAcnB,YAAY,CAACK,MAAM,EAAEY,cAAc,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,YAAY,GAAG,aAAcnB,YAAY,CAACI,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}