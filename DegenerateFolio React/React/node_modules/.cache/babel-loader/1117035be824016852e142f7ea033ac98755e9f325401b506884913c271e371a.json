{"ast":null,"code":"import { ExtensionType, extensions } from '../../../../extensions/Extensions.mjs';\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = {\n      ..._TextureGCSystem.defaultOptions,\n      ...options\n    };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active) return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCAMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\nextensions.add(TextureGCSystem);\nexport { TextureGCSystem };","map":{"version":3,"names":["_TextureGCSystem","constructor","renderer","_renderer","count","checkCount","init","options","defaultOptions","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","active","textureGCActive","postrender","renderingToScreen","run","managedTextures","texture","i","length","autoGarbageCollect","resource","_touched","unload","destroy","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","name","TextureGCSystem","extensions","add"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureGCSystem.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCAMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n\nextensions.add(TextureGCSystem);\n"],"mappings":";;AAuCO,MAAMA,gBAAA,GAAN,MAAMA,gBACb;EAAA;EA6DIC,YAAYC,QACZ;IACI,KAAKC,SAAY,GAAAD,QAAA;IAEjB,KAAKE,KAAQ;IACb,KAAKC,UAAa;EAAA;EAGfC,KAAKC,OACZ;IACIA,OAAA,GAAU;MAAE,GAAGP,gBAAgB,CAAAQ,cAAA;MAAgB,GAAGD;IAAQ;IAE1D,KAAKE,aAAA,GAAgBF,OAAQ,CAAAG,sBAAA;IAC7B,KAAKC,OAAA,GAAUJ,OAAQ,CAAAK,iBAAA;IACvB,KAAKC,MAAA,GAASN,OAAQ,CAAAO,eAAA;EAAA;EAC1B;AAAA;AAAA;AAAA;EAMUC,UACVA,CAAA;IACQ,KAAC,IAAK,CAAAZ,SAAA,CAAUa,iBACpB;MACI;IAAA;IAGC,KAAAZ,KAAA;IAEL,IAAI,CAAC,IAAK,CAAAS,MAAA,EAAQ;IAEb,KAAAR,UAAA;IAED,SAAKA,UAAa,QAAKI,aAC3B;MACI,KAAKJ,UAAa;MAElB,KAAKY,GAAI;IAAA;EACb;EACJ;AAAA;AAAA;AAAA;EAMOA,GACPA,CAAA;IACU,MAAAC,eAAA,GAAkB,IAAK,CAAAf,SAAA,CAAUgB,OAAQ,CAAAD,eAAA;IAE/C,SAASE,CAAI,MAAGA,CAAI,GAAAF,eAAA,CAAgBG,MAAA,EAAQD,CAC5C;MACU,MAAAD,OAAA,GAAUD,eAAA,CAAgBE,CAAC;MAGjC,IACID,OAAQ,CAAAG,kBAAA,IACLH,OAAQ,CAAAI,QAAA,IACRJ,OAAQ,CAAAK,QAAA,GAAW,CACnB,UAAKpB,KAAQ,GAAAe,OAAA,CAAQK,QAAW,QAAKb,OAE5C;QACIQ,OAAA,CAAQK,QAAW;QACnBL,OAAA,CAAQM,MAAO;MAAA;IACnB;EACJ;EAGGC,OACPA,CAAA;IACI,KAAKvB,SAAY;EAAA;AAEzB;AAAA;AAtIaH,gBAAA,CAGK2B,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,WAAA,EACdD,aAAc,CAAAE,YAAA,CAClB;EACAC,IAAM;AACV;AAAA;AATShC,gBAAA,CAYKQ,cAAyC;EAAA;AAAA;AAAA;AAAA;EAKnDM,eAAiB;EAAA;AAAA;AAAA;AAAA;EAKjBF,iBAAA,EAAmB,EAAK;EAAA;AAAA;AAAA;AAAA;EAKxBF,sBAAwB;AAC5B;AA5BG,IAAMuB,eAAN,GAAAjC,gBAAA;AAwIPkC,UAAA,CAAWC,GAAA,CAAIF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}