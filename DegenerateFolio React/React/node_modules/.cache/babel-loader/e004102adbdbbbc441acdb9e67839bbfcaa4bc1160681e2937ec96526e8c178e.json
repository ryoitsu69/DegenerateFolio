{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n //CBS\n //Parallax scrolling fractal galaxy.\n //Inspired by JoshP's Simplicity shader: https://www.shadertoy.com/view/lslGWr\n\n // http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\n float field(in vec3 p,float s) {\n     float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n     float accum = s/4.;\n     float prev = 0.;\n     float tw = 0.;\n     for (int i = 0; i < 26; ++i) {\n         float mag = dot(p, p);\n         p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n         float w = exp(-float(i) / 7.);\n         accum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n         tw += w;\n         prev = mag;\n     }\n     return max(0., 5. * accum / tw - .7);\n }\n\n // Less iterations for second layer\n float field2(in vec3 p, float s) {\n     float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n     float accum = s/4.;\n     float prev = 0.;\n     float tw = 0.;\n     for (int i = 0; i < 18; ++i) {\n         float mag = dot(p, p);\n         p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n         float w = exp(-float(i) / 7.);\n         accum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n         tw += w;\n         prev = mag;\n     }\n     return max(0., 5. * accum / tw - .7);\n }\n\n vec3 nrand3( vec2 co )\n {\n     vec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );\n     vec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );\n     vec3 c = mix(a, b, 0.5);\n     return c;\n }\n\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n     vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);\n     vec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);\n     p += .2 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n\n     float freqs[4];\n     //Sound\n     freqs[0] = texture( iChannel0, vec2( 0.01, 0.25 ) ).x;\n     freqs[1] = texture( iChannel0, vec2( 0.07, 0.25 ) ).x;\n     freqs[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n     freqs[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n\n     float t = field(p,freqs[2]);\n     float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));\n\n     //Second Layer\n     vec3 p2 = vec3(uvs / (4.+sin(iTime*0.11)*0.2+0.2+sin(iTime*0.15)*0.3+0.4), 1.5) + vec3(2., -1.3, -1.);\n     p2 += 0.25 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n     float t2 = field2(p2,freqs[3]);\n     vec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2 ,1.8  * t2 * t2 , t2* freqs[0], t2);\n\n\n     //Let's add some stars\n     //Thanks to http://glsl.heroku.com/e#6904.0\n     vec2 seed = p.xy * 2.0;\n     seed = floor(seed * iResolution.x);\n     vec3 rnd = nrand3( seed );\n     vec4 starcolor = vec4(pow(rnd.y,40.0));\n\n     //Second Layer\n     vec2 seed2 = p2.xy * 2.0;\n     seed2 = floor(seed2 * iResolution.x);\n     vec3 rnd2 = nrand3( seed2 );\n     starcolor += vec4(pow(rnd2.y,40.0));\n\n     fragColor = mix(freqs[3]-.3, 1., v) * vec4(1.5*freqs[2] * t * t* t , 1.2*freqs[1] * t * t, freqs[3]*t, 1.0)+c2+starcolor;\n }\n\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n //CBS\n //Parallax scrolling fractal galaxy.\n //Inspired by JoshP's Simplicity shader: https://www.shadertoy.com/view/lslGWr\n\n // http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\n float field(in vec3 p,float s) {\n     float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n     float accum = s/4.;\n     float prev = 0.;\n     float tw = 0.;\n     for (int i = 0; i < 26; ++i) {\n         float mag = dot(p, p);\n         p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n         float w = exp(-float(i) / 7.);\n         accum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n         tw += w;\n         prev = mag;\n     }\n     return max(0., 5. * accum / tw - .7);\n }\n\n // Less iterations for second layer\n float field2(in vec3 p, float s) {\n     float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n     float accum = s/4.;\n     float prev = 0.;\n     float tw = 0.;\n     for (int i = 0; i < 18; ++i) {\n         float mag = dot(p, p);\n         p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n         float w = exp(-float(i) / 7.);\n         accum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n         tw += w;\n         prev = mag;\n     }\n     return max(0., 5. * accum / tw - .7);\n }\n\n vec3 nrand3( vec2 co )\n {\n     vec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );\n     vec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );\n     vec3 c = mix(a, b, 0.5);\n     return c;\n }\n\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n     vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);\n     vec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);\n     p += .2 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n\n     float freqs[4];\n     //Sound\n     freqs[0] = texture( iChannel0, vec2( 0.01, 0.25 ) ).x;\n     freqs[1] = texture( iChannel0, vec2( 0.07, 0.25 ) ).x;\n     freqs[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n     freqs[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n\n     float t = field(p,freqs[2]);\n     float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));\n\n     //Second Layer\n     vec3 p2 = vec3(uvs / (4.+sin(iTime*0.11)*0.2+0.2+sin(iTime*0.15)*0.3+0.4), 1.5) + vec3(2., -1.3, -1.);\n     p2 += 0.25 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n     float t2 = field2(p2,freqs[3]);\n     vec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2 ,1.8  * t2 * t2 , t2* freqs[0], t2);\n\n\n     //Let's add some stars\n     //Thanks to http://glsl.heroku.com/e#6904.0\n     vec2 seed = p.xy * 2.0;\n     seed = floor(seed * iResolution.x);\n     vec3 rnd = nrand3( seed );\n     vec4 starcolor = vec4(pow(rnd.y,40.0));\n\n     //Second Layer\n     vec2 seed2 = p2.xy * 2.0;\n     seed2 = floor(seed2 * iResolution.x);\n     vec3 rnd2 = nrand3( seed2 );\n     starcolor += vec4(pow(rnd2.y,40.0));\n\n     fragColor = mix(freqs[3]-.3, 1., v) * vec4(1.5*freqs[2] * t * t* t , 1.2*freqs[1] * t * t, freqs[3]*t, 1.0)+c2+starcolor;\n }\n\n `;\n\nroot.render(\n    <>\n<ShadertoyReact fs={fragmentShader} />\n<TodoApp />\n<footer>Â©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEFJ,IAAI,CAACK,MAAM,eACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACJT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH;EAAe;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACtCd,OAAA,CAACL,OAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXd,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAlB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}