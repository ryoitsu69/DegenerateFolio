{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StargateClient = exports.BroadcastTxError = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst abci_1 = require(\"cosmjs-types/cosmos/base/abci/v1beta1/abci\");\nconst accounts_1 = require(\"./accounts\");\nconst events_1 = require(\"./events\");\nconst modules_1 = require(\"./modules\");\nconst queryclient_1 = require(\"./queryclient\");\nconst search_1 = require(\"./search\");\nclass TimeoutError extends Error {\n  constructor(message, txId) {\n    super(message);\n    this.txId = txId;\n  }\n}\nexports.TimeoutError = TimeoutError;\nfunction isDeliverTxFailure(result) {\n  return !!result.code;\n}\nexports.isDeliverTxFailure = isDeliverTxFailure;\nfunction isDeliverTxSuccess(result) {\n  return !isDeliverTxFailure(result);\n}\nexports.isDeliverTxSuccess = isDeliverTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxSuccess(result) {\n  if (isDeliverTxFailure(result)) {\n    throw new Error(`Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\nexports.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;\n/**\n * Ensures the given result is a failure. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxFailure(result) {\n  if (isDeliverTxSuccess(result)) {\n    throw new Error(`Transaction ${result.transactionHash} did not fail at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\nexports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;\n/**\n * An error when broadcasting the transaction. This contains the CheckTx errors\n * from the blockchain. Once a transaction is included in a block no BroadcastTxError\n * is thrown, even if the execution fails (DeliverTx errors).\n */\nclass BroadcastTxError extends Error {\n  constructor(code, codespace, log) {\n    super(`Broadcasting transaction failed with code ${code} (codespace: ${codespace}). Log: ${log}`);\n    this.code = code;\n    this.codespace = codespace;\n    this.log = log;\n  }\n}\nexports.BroadcastTxError = BroadcastTxError;\nclass StargateClient {\n  /**\n   * Creates an instance by connecting to the given CometBFT RPC endpoint.\n   *\n   * This uses auto-detection to decide between a CometBFT 0.38, Tendermint 0.37 and 0.34 client.\n   * To set the Comet client explicitly, use `create`.\n   */\n  static async connect(endpoint, options = {}) {\n    const cometClient = await (0, tendermint_rpc_1.connectComet)(endpoint);\n    return StargateClient.create(cometClient, options);\n  }\n  /**\n   * Creates an instance from a manually created Comet client.\n   * Use this to use `Comet38Client` or `Tendermint37Client` instead of `Tendermint34Client`.\n   */\n  static async create(cometClient, options = {}) {\n    return new StargateClient(cometClient, options);\n  }\n  constructor(cometClient, options) {\n    if (cometClient) {\n      this.cometClient = cometClient;\n      this.queryClient = queryclient_1.QueryClient.withExtensions(cometClient, modules_1.setupAuthExtension, modules_1.setupBankExtension, modules_1.setupStakingExtension, modules_1.setupTxExtension);\n    }\n    const {\n      accountParser = accounts_1.accountFromAny\n    } = options;\n    this.accountParser = accountParser;\n  }\n  getCometClient() {\n    return this.cometClient;\n  }\n  forceGetCometClient() {\n    if (!this.cometClient) {\n      throw new Error(\"Comet client not available. You cannot use online functionality in offline mode.\");\n    }\n    return this.cometClient;\n  }\n  getQueryClient() {\n    return this.queryClient;\n  }\n  forceGetQueryClient() {\n    if (!this.queryClient) {\n      throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n    }\n    return this.queryClient;\n  }\n  async getChainId() {\n    if (!this.chainId) {\n      const response = await this.forceGetCometClient().status();\n      const chainId = response.nodeInfo.network;\n      if (!chainId) throw new Error(\"Chain ID must not be empty\");\n      this.chainId = chainId;\n    }\n    return this.chainId;\n  }\n  async getHeight() {\n    const status = await this.forceGetCometClient().status();\n    return status.syncInfo.latestBlockHeight;\n  }\n  async getAccount(searchAddress) {\n    try {\n      const account = await this.forceGetQueryClient().auth.account(searchAddress);\n      return account ? this.accountParser(account) : null;\n    } catch (error) {\n      if (/rpc error: code = NotFound/i.test(error.toString())) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  async getSequence(address) {\n    const account = await this.getAccount(address);\n    if (!account) {\n      throw new Error(`Account '${address}' does not exist on chain. Send some tokens there before trying to query sequence.`);\n    }\n    return {\n      accountNumber: account.accountNumber,\n      sequence: account.sequence\n    };\n  }\n  async getBlock(height) {\n    const response = await this.forceGetCometClient().block(height);\n    return {\n      id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n      header: {\n        version: {\n          block: new math_1.Uint53(response.block.header.version.block).toString(),\n          app: new math_1.Uint53(response.block.header.version.app).toString()\n        },\n        height: response.block.header.height,\n        chainId: response.block.header.chainId,\n        time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time)\n      },\n      txs: response.block.txs\n    };\n  }\n  async getBalance(address, searchDenom) {\n    return this.forceGetQueryClient().bank.balance(address, searchDenom);\n  }\n  /**\n   * Queries all balances for all denoms that belong to this address.\n   *\n   * Uses the grpc queries (which iterates over the store internally), and we cannot get\n   * proofs from such a method.\n   */\n  async getAllBalances(address) {\n    return this.forceGetQueryClient().bank.allBalances(address);\n  }\n  async getBalanceStaked(address) {\n    const allDelegations = [];\n    let startAtKey = undefined;\n    do {\n      const {\n        delegationResponses,\n        pagination\n      } = await this.forceGetQueryClient().staking.delegatorDelegations(address, startAtKey);\n      const loadedDelegations = delegationResponses || [];\n      allDelegations.push(...loadedDelegations);\n      startAtKey = pagination?.nextKey;\n    } while (startAtKey !== undefined && startAtKey.length !== 0);\n    const sumValues = allDelegations.reduce((previousValue, currentValue) => {\n      // Safe because field is set to non-nullable (https://github.com/cosmos/cosmos-sdk/blob/v0.45.3/proto/cosmos/staking/v1beta1/staking.proto#L295)\n      (0, utils_1.assert)(currentValue.balance);\n      return previousValue !== null ? (0, amino_1.addCoins)(previousValue, currentValue.balance) : currentValue.balance;\n    }, null);\n    return sumValues;\n  }\n  async getDelegation(delegatorAddress, validatorAddress) {\n    let delegatedAmount;\n    try {\n      delegatedAmount = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse?.balance;\n    } catch (e) {\n      if (e.toString().includes(\"key not found\")) {\n        // ignore, `delegatedAmount` remains undefined\n      } else {\n        throw e;\n      }\n    }\n    return delegatedAmount || null;\n  }\n  async getTx(id) {\n    const results = await this.txsQuery(`tx.hash='${id}'`);\n    return results[0] ?? null;\n  }\n  async searchTx(query) {\n    let rawQuery;\n    if (typeof query === \"string\") {\n      rawQuery = query;\n    } else if ((0, search_1.isSearchTxQueryArray)(query)) {\n      rawQuery = query.map(t => {\n        // numeric values must not have quotes https://github.com/cosmos/cosmjs/issues/1462\n        if (typeof t.value === \"string\") return `${t.key}='${t.value}'`;else return `${t.key}=${t.value}`;\n      }).join(\" AND \");\n    } else {\n      throw new Error(\"Got unsupported query type. See CosmJS 0.31 CHANGELOG for API breaking changes here.\");\n    }\n    return this.txsQuery(rawQuery);\n  }\n  disconnect() {\n    if (this.cometClient) this.cometClient.disconnect();\n  }\n  /**\n   * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n   *\n   * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n   * an error is thrown.\n   *\n   * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n   *\n   * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n   * usually needs to check for execution success or failure.\n   */\n  async broadcastTx(tx, timeoutMs = 60000, pollIntervalMs = 3000) {\n    let timedOut = false;\n    const txPollTimeout = setTimeout(() => {\n      timedOut = true;\n    }, timeoutMs);\n    const pollForTx = async txId => {\n      if (timedOut) {\n        throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later. There was a wait of ${timeoutMs / 1000} seconds.`, txId);\n      }\n      await (0, utils_1.sleep)(pollIntervalMs);\n      const result = await this.getTx(txId);\n      return result ? {\n        code: result.code,\n        height: result.height,\n        txIndex: result.txIndex,\n        events: result.events,\n        rawLog: result.rawLog,\n        transactionHash: txId,\n        msgResponses: result.msgResponses,\n        gasUsed: result.gasUsed,\n        gasWanted: result.gasWanted\n      } : pollForTx(txId);\n    };\n    const transactionId = await this.broadcastTxSync(tx);\n    return new Promise((resolve, reject) => pollForTx(transactionId).then(value => {\n      clearTimeout(txPollTimeout);\n      resolve(value);\n    }, error => {\n      clearTimeout(txPollTimeout);\n      reject(error);\n    }));\n  }\n  /**\n   * Broadcasts a signed transaction to the network without monitoring it.\n   *\n   * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n   * an error is thrown.\n   *\n   * If the transaction is broadcasted, a `string` containing the hash of the transaction is returned. The caller then\n   * usually needs to check if the transaction was included in a block and was successful.\n   *\n   * @returns Returns the hash of the transaction\n   */\n  async broadcastTxSync(tx) {\n    const broadcasted = await this.forceGetCometClient().broadcastTxSync({\n      tx\n    });\n    if (broadcasted.code) {\n      return Promise.reject(new BroadcastTxError(broadcasted.code, broadcasted.codespace ?? \"\", broadcasted.log));\n    }\n    const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n    return transactionId;\n  }\n  async txsQuery(query) {\n    const results = await this.forceGetCometClient().txSearchAll({\n      query: query\n    });\n    return results.txs.map(tx => {\n      const txMsgData = abci_1.TxMsgData.decode(tx.result.data ?? new Uint8Array());\n      return {\n        height: tx.height,\n        txIndex: tx.index,\n        hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n        code: tx.result.code,\n        events: tx.result.events.map(events_1.fromTendermintEvent),\n        rawLog: tx.result.log || \"\",\n        tx: tx.tx,\n        msgResponses: txMsgData.msgResponses,\n        gasUsed: tx.result.gasUsed,\n        gasWanted: tx.result.gasWanted\n      };\n    });\n  }\n}\nexports.StargateClient = StargateClient;","map":{"version":3,"names":["amino_1","require","encoding_1","math_1","tendermint_rpc_1","utils_1","abci_1","accounts_1","events_1","modules_1","queryclient_1","search_1","TimeoutError","Error","constructor","message","txId","exports","isDeliverTxFailure","result","code","isDeliverTxSuccess","assertIsDeliverTxSuccess","transactionHash","height","rawLog","assertIsDeliverTxFailure","BroadcastTxError","codespace","log","StargateClient","connect","endpoint","options","cometClient","connectComet","create","queryClient","QueryClient","withExtensions","setupAuthExtension","setupBankExtension","setupStakingExtension","setupTxExtension","accountParser","accountFromAny","getCometClient","forceGetCometClient","getQueryClient","forceGetQueryClient","getChainId","chainId","response","status","nodeInfo","network","getHeight","syncInfo","latestBlockHeight","getAccount","searchAddress","account","auth","error","test","toString","getSequence","address","accountNumber","sequence","getBlock","block","id","toHex","blockId","hash","toUpperCase","header","version","Uint53","app","time","toRfc3339WithNanoseconds","txs","getBalance","searchDenom","bank","balance","getAllBalances","allBalances","getBalanceStaked","allDelegations","startAtKey","undefined","delegationResponses","pagination","staking","delegatorDelegations","loadedDelegations","push","nextKey","length","sumValues","reduce","previousValue","currentValue","assert","addCoins","getDelegation","delegatorAddress","validatorAddress","delegatedAmount","delegation","delegationResponse","e","includes","getTx","results","txsQuery","searchTx","query","rawQuery","isSearchTxQueryArray","map","t","value","key","join","disconnect","broadcastTx","tx","timeoutMs","pollIntervalMs","timedOut","txPollTimeout","setTimeout","pollForTx","sleep","txIndex","events","msgResponses","gasUsed","gasWanted","transactionId","broadcastTxSync","Promise","resolve","reject","then","clearTimeout","broadcasted","txSearchAll","txMsgData","TxMsgData","decode","data","Uint8Array","index","fromTendermintEvent"],"sources":["../src/stargateclient.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}