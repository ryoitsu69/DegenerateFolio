{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isListening = exports.getPeerCount = exports.getId = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\nfunction getId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.netRpcMethods.getId(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getId = getId;\nfunction getPeerCount(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.netRpcMethods.getPeerCount(web3Context.requestManager);\n    // Data returned is number in hex format\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getPeerCount = getPeerCount;\nconst isListening = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.netRpcMethods.isListening(web3Context.requestManager);\n});\nexports.isListening = isListening;","map":{"version":3,"names":["web3_utils_1","require","web3_rpc_methods_1","getId","web3Context","returnFormat","response","netRpcMethods","requestManager","format","exports","getPeerCount","isListening","__awaiter"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-net/src/rpc_method_wrappers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { format } from 'web3-utils';\nimport { Web3Context } from 'web3-core';\nimport { DataFormat, Web3NetAPI } from 'web3-types';\nimport { netRpcMethods } from 'web3-rpc-methods';\n\nexport async function getId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3NetAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await netRpcMethods.getId(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as unknown as number, returnFormat);\n}\n\nexport async function getPeerCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3NetAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await netRpcMethods.getPeerCount(web3Context.requestManager);\n\n\t// Data returned is number in hex format\n\treturn format({ format: 'uint' }, response as unknown as number, returnFormat);\n}\n\nexport const isListening = async (web3Context: Web3Context<Web3NetAPI>) =>\n\tnetRpcMethods.isListening(web3Context.requestManager);\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,MAAAA,YAAA,GAAAC,OAAA;AAGA,MAAAC,kBAAA,GAAAD,OAAA;AAEA,SAAsBE,KAAKA,CAC1BC,WAAoC,EACpCC,YAA0B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMJ,kBAAA,CAAAK,aAAa,CAACJ,KAAK,CAACC,WAAW,CAACI,cAAc,CAAC;IAEtE,OAAO,IAAAR,YAAA,CAAAS,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAM,CAAE,EAAEH,QAA6B,EAAED,YAAY,CAAC;EAC/E,CAAC;;AAPDK,OAAA,CAAAP,KAAA,GAAAA,KAAA;AASA,SAAsBQ,YAAYA,CACjCP,WAAoC,EACpCC,YAA0B;;IAE1B,MAAMC,QAAQ,GAAG,MAAMJ,kBAAA,CAAAK,aAAa,CAACI,YAAY,CAACP,WAAW,CAACI,cAAc,CAAC;IAE7E;IACA,OAAO,IAAAR,YAAA,CAAAS,MAAM,EAAC;MAAEA,MAAM,EAAE;IAAM,CAAE,EAAEH,QAA6B,EAAED,YAAY,CAAC;EAC/E,CAAC;;AARDK,OAAA,CAAAC,YAAA,GAAAA,YAAA;AAUO,MAAMC,WAAW,GAAUR,WAAoC,IAAIS,SAAA;EACzE,OAAAX,kBAAA,CAAAK,aAAa,CAACK,WAAW,CAACR,WAAW,CAACI,cAAc,CAAC;AAAA;AADzCE,OAAA,CAAAE,WAAW,GAAAA,WAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}