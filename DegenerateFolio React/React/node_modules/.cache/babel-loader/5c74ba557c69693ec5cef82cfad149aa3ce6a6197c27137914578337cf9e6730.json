{"ast":null,"code":"import { removeItems } from '../../../utils/data/removeItems.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\"use strict\";\nconst childrenHelperMixin = {\n  allowChildren: true,\n  /**\n   * Removes all children from this container that are within the begin and end indexes.\n   * @param beginIndex - The beginning position.\n   * @param endIndex - The ending position. Default value is size of the container.\n   * @returns - List of removed children\n   * @memberof scene.Container#\n   */\n  removeChildren(beginIndex = 0, endIndex) {\n    const end = endIndex ?? this.children.length;\n    const range = end - beginIndex;\n    const removed = [];\n    if (range > 0 && range <= end) {\n      for (let i = end - 1; i >= beginIndex; i--) {\n        const child = this.children[i];\n        if (!child) continue;\n        removed.push(child);\n        child.parent = null;\n      }\n      removeItems(this.children, beginIndex, end);\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      if (renderGroup) {\n        renderGroup.removeChildren(removed);\n      }\n      for (let i = 0; i < removed.length; ++i) {\n        this.emit(\"childRemoved\", removed[i], this, i);\n        removed[i].emit(\"removed\", this);\n      }\n      return removed;\n    } else if (range === 0 && this.children.length === 0) {\n      return removed;\n    }\n    throw new RangeError(\"removeChildren: numeric values are outside the acceptable range.\");\n  },\n  /**\n   * Removes a child from the specified index position.\n   * @param index - The index to get the child from\n   * @returns The child that was removed.\n   * @memberof scene.Container#\n   */\n  removeChildAt(index) {\n    const child = this.getChildAt(index);\n    return this.removeChild(child);\n  },\n  /**\n   * Returns the child at the specified index\n   * @param index - The index to get the child at\n   * @returns - The child at the given index, if any.\n   * @memberof scene.Container#\n   */\n  getChildAt(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`getChildAt: Index (${index}) does not exist.`);\n    }\n    return this.children[index];\n  },\n  /**\n   * Changes the position of an existing child in the container container\n   * @param child - The child Container instance for which you want to change the index number\n   * @param index - The resulting index number for the child container\n   * @memberof scene.Container#\n   */\n  setChildIndex(child, index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n    }\n    this.getChildIndex(child);\n    this.addChildAt(child, index);\n  },\n  /**\n   * Returns the index position of a child Container instance\n   * @param child - The Container instance to identify\n   * @returns - The index position of the child container to identify\n   * @memberof scene.Container#\n   */\n  getChildIndex(child) {\n    const index = this.children.indexOf(child);\n    if (index === -1) {\n      throw new Error(\"The supplied Container must be a child of the caller\");\n    }\n    return index;\n  },\n  /**\n   * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n   * If the child is already in this container, it will be moved to the specified index.\n   * @param {Container} child - The child to add.\n   * @param {number} index - The absolute index where the child will be positioned at the end of the operation.\n   * @returns {Container} The child that was added.\n   * @memberof scene.Container#\n   */\n  addChildAt(child, index) {\n    if (!this.allowChildren) {\n      deprecation(v8_0_0, \"addChildAt: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    const {\n      children\n    } = this;\n    if (index < 0 || index > children.length) {\n      throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${children.length}`);\n    }\n    if (child.parent) {\n      const currentIndex = child.parent.children.indexOf(child);\n      if (child.parent === this && currentIndex === index) {\n        return child;\n      }\n      if (currentIndex !== -1) {\n        child.parent.children.splice(currentIndex, 1);\n      }\n    }\n    if (index === children.length) {\n      children.push(child);\n    } else {\n      children.splice(index, 0, child);\n    }\n    child.parent = this;\n    child.didChange = true;\n    child.didViewUpdate = false;\n    child._updateFlags = 15;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    if (this.sortableChildren) this.sortDirty = true;\n    this.emit(\"childAdded\", child, this, index);\n    child.emit(\"added\", this);\n    return child;\n  },\n  /**\n   * Swaps the position of 2 Containers within this container.\n   * @param child - First container to swap\n   * @param child2 - Second container to swap\n   */\n  swapChildren(child, child2) {\n    if (child === child2) {\n      return;\n    }\n    const index1 = this.getChildIndex(child);\n    const index2 = this.getChildIndex(child2);\n    this.children[index1] = child2;\n    this.children[index2] = child;\n  },\n  /**\n   * Remove the Container from its parent Container. If the Container has no parent, do nothing.\n   * @memberof scene.Container#\n   */\n  removeFromParent() {\n    this.parent?.removeChild(this);\n  }\n};\nexport { childrenHelperMixin };","map":{"version":3,"names":["childrenHelperMixin","allowChildren","removeChildren","beginIndex","endIndex","end","children","length","range","removed","i","child","push","parent","removeItems","renderGroup","parentRenderGroup","emit","RangeError","removeChildAt","index","getChildAt","removeChild","Error","setChildIndex","getChildIndex","addChildAt","indexOf","deprecation","v8_0_0","currentIndex","splice","didChange","didViewUpdate","_updateFlags","addChild","sortableChildren","sortDirty","swapChildren","child2","index1","index2","removeFromParent"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/container/container-mixins/childrenHelperMixin.ts"],"sourcesContent":["import { removeItems } from '../../../utils/data/removeItems';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Container, ContainerChild } from '../Container';\n\nexport interface ChildrenHelperMixin<C = ContainerChild>\n{\n    allowChildren: boolean;\n    addChild<U extends C[]>(...children: U): U[0];\n    removeChild<U extends C[]>(...children: U): U[0];\n    removeChildren(beginIndex?: number, endIndex?: number): C[];\n    removeChildAt<U extends C>(index: number): U;\n    getChildAt<U extends C>(index: number): U;\n    setChildIndex(child: C, index: number): void;\n    getChildIndex(child: C): number;\n    addChildAt<U extends C>(child: U, index: number): U;\n    swapChildren<U extends C>(child: U, child2: U): void;\n    removeFromParent(): void;\n}\n\nexport const childrenHelperMixin: Partial<Container> = {\n\n    allowChildren: true,\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     * @memberof scene.Container#\n     */\n    removeChildren(beginIndex = 0, endIndex?: number): ContainerChild[]\n    {\n        const end = endIndex ?? this.children.length;\n        const range = end - beginIndex;\n        const removed: ContainerChild[] = [];\n\n        if (range > 0 && range <= end)\n        {\n            for (let i = end - 1; i >= beginIndex; i--)\n            {\n                const child = this.children[i];\n\n                if (!child) continue;\n                removed.push(child);\n                child.parent = null;\n            }\n\n            removeItems(this.children, beginIndex, end);\n\n            const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n            if (renderGroup)\n            {\n                renderGroup.removeChildren(removed);\n            }\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                this.emit('childRemoved', removed[i], this, i);\n                removed[i].emit('removed', this);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return removed;\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    },\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     * @memberof scene.Container#\n     */\n    removeChildAt<U extends ContainerChild>(index: number): U\n    {\n        const child = this.getChildAt<U>(index);\n\n        return this.removeChild(child);\n    },\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     * @memberof scene.Container#\n     */\n    getChildAt<U extends ContainerChild>(index: number): U\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index] as U;\n    },\n\n    /**\n     * Changes the position of an existing child in the container container\n     * @param child - The child Container instance for which you want to change the index number\n     * @param index - The resulting index number for the child container\n     * @memberof scene.Container#\n     */\n    setChildIndex(child: ContainerChild, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        this.getChildIndex(child); // check if child exists\n        this.addChildAt(child, index);\n    },\n\n    /**\n     * Returns the index position of a child Container instance\n     * @param child - The Container instance to identify\n     * @returns - The index position of the child container to identify\n     * @memberof scene.Container#\n     */\n    getChildIndex(child: ContainerChild): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied Container must be a child of the caller');\n        }\n\n        return index;\n    },\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n     * If the child is already in this container, it will be moved to the specified index.\n     * @param {Container} child - The child to add.\n     * @param {number} index - The absolute index where the child will be positioned at the end of the operation.\n     * @returns {Container} The child that was added.\n     * @memberof scene.Container#\n     */\n    addChildAt<U extends ContainerChild>(child: U, index: number): U\n    {\n        // #if _DEBUG\n        if (!this.allowChildren)\n        {\n            deprecation(v8_0_0, 'addChildAt: Only Containers will be allowed to add children in v8.0.0');\n        }\n        // #endif\n\n        const { children } = this;\n\n        if (index < 0 || index > children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${children.length}`);\n        }\n\n        // TODO - check if child is already in the list?\n        // we should be able to optimise this!\n\n        if (child.parent)\n        {\n            const currentIndex = child.parent.children.indexOf(child);\n\n            // If this child is in the container and in the same position, do nothing\n            if (child.parent === this && currentIndex === index)\n            {\n                return child;\n            }\n\n            if (currentIndex !== -1)\n            {\n                child.parent.children.splice(currentIndex, 1);\n            }\n        }\n\n        if (index === children.length)\n        {\n            children.push(child);\n        }\n        else\n        {\n            children.splice(index, 0, child);\n        }\n\n        child.parent = this;\n        child.didChange = true;\n        child.didViewUpdate = false;\n        child._updateFlags = 0b1111;\n\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            renderGroup.addChild(child);\n        }\n\n        if (this.sortableChildren) this.sortDirty = true;\n\n        this.emit('childAdded', child, this, index);\n        child.emit('added', this);\n\n        return child;\n    },\n    /**\n     * Swaps the position of 2 Containers within this container.\n     * @param child - First container to swap\n     * @param child2 - Second container to swap\n     */\n    swapChildren<U extends ContainerChild>(child: U, child2: U): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n    },\n    /**\n     * Remove the Container from its parent Container. If the Container has no parent, do nothing.\n     * @memberof scene.Container#\n     */\n    removeFromParent()\n    {\n        this.parent?.removeChild(this);\n    }\n} as Container;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}