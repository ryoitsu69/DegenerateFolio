{"ast":null,"code":"\"use strict\";\n\nfunction ensurePrecision(src, options, isFragment) {\n  const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n  if (src.substring(0, 9) !== \"precision\") {\n    let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n    if (precision === \"highp\" && maxSupportedPrecision !== \"highp\") {\n      precision = \"mediump\";\n    }\n    return `precision ${precision} float;\n${src}`;\n  } else if (maxSupportedPrecision !== \"highp\" && src.substring(0, 15) === \"precision highp\") {\n    return src.replace(\"precision highp\", \"precision mediump\");\n  }\n  return src;\n}\nexport { ensurePrecision };","map":{"version":3,"names":["ensurePrecision","src","options","isFragment","maxSupportedPrecision","maxSupportedFragmentPrecision","maxSupportedVertexPrecision","substring","precision","requestedFragmentPrecision","requestedVertexPrecision","replace"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.ts"],"sourcesContent":["import type { PRECISION } from '../../const';\n\ninterface EnsurePrecisionOptions\n{\n    requestedVertexPrecision: PRECISION;\n    requestedFragmentPrecision: PRECISION;\n    maxSupportedVertexPrecision: PRECISION;\n    maxSupportedFragmentPrecision: PRECISION;\n}\n\n/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n * @param src\n * @param options\n * @param options.requestedVertexPrecision\n * @param options.requestedFragmentPrecision\n * @param options.maxSupportedVertexPrecision\n * @param options.maxSupportedFragmentPrecision\n * @param isFragment\n * @private\n */\nexport function ensurePrecision(\n    src: string,\n    options: EnsurePrecisionOptions,\n    isFragment: boolean,\n): string\n{\n    const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n\n    if (src.substring(0, 9) !== 'precision')\n    {\n        // no precision supplied, so PixiJS will add the requested level.\n        let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n\n        // If highp is requested but not supported, downgrade precision to a level all devices support.\n        if (precision === 'highp' && maxSupportedPrecision !== 'highp')\n        {\n            precision = 'mediump';\n        }\n\n        return `precision ${precision} float;\\n${src}`;\n    }\n    else if (maxSupportedPrecision !== 'highp' && src.substring(0, 15) === 'precision highp')\n    {\n        // precision was supplied, but at a level this device does not support, so downgrading to mediump.\n        return src.replace('precision highp', 'precision mediump');\n    }\n\n    return src;\n}\n"],"mappings":";;AAsBgB,SAAAA,gBACZC,GACA,EAAAC,OAAA,EACAC,UAEJ;EACI,MAAMC,qBAAwB,GAAAD,UAAA,GAAaD,OAAQ,CAAAG,6BAAA,GAAgCH,OAAQ,CAAAI,2BAAA;EAE3F,IAAIL,GAAI,CAAAM,SAAA,CAAU,CAAG,GAAC,MAAM,WAC5B;IAEI,IAAIC,SAAY,GAAAL,UAAA,GAAaD,OAAQ,CAAAO,0BAAA,GAA6BP,OAAQ,CAAAQ,wBAAA;IAGtE,IAAAF,SAAA,KAAc,OAAW,IAAAJ,qBAAA,KAA0B,OACvD;MACgBI,SAAA;IAAA;IAGhB,OAAO,aAAaA,SAAS;AAAA,EAAYP,GAAG;EAAA,CAChD,UACSG,qBAAA,KAA0B,OAAW,IAAAH,GAAA,CAAIM,SAAA,CAAU,CAAG,IAAE,MAAM,iBACvE;IAEW,OAAAN,GAAA,CAAIU,OAAQ,oBAAmB,mBAAmB;EAAA;EAGtD,OAAAV,GAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}