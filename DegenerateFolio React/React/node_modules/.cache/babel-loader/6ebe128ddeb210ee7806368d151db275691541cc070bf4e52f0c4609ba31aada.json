{"ast":null,"code":"import React,{Component}from'react';const{Web3}=require('web3');const{ApiPromise,WsProvider}=require('@polkadot/api');import{algosdk}from'algosdk';import{jsx as _jsx}from\"react/jsx-runtime\";const algodToken='a'.repeat(64);const algodServer='https://go.getblock.io/ee411bb558234325951e7b4e92d8ed0c';const algodPort=4001;const algodClient=new algosdk.Algodv2(algodToken,algodServer,algodPort);const ethRPC=new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));const optRPC=new Web3(new Web3.providers.HttpProvider(\"https://optimism-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));const arbRPC=new Web3(new Web3.providers.HttpProvider(\"https://arbitrum-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));const starkRPC=new Web3(new Web3.providers.HttpProvider(\"https://starknet-mainnet.g.alchemy.com/v2/eDTvRiR7UGc1vibC0sQviDBnqHmlCnKz\"));const bscRPC=new Web3(new Web3.providers.HttpProvider(\"https://bnb-mainnet.g.alchemy.com/v2/Wflh86IAxtX-p7SFc--_YxhsIINWRfPR\"));const provider=new WsProvider('wss://rpc.polkadot.io');const dotApi=await ApiPromise.create({provider});const chain=await dotApi.rpc.system.chain();const dotAddr=\"13gBrKGMhttuNjywbmEfK5NFeNbHpbQGbJtFVRMmUWHaSNZf\";const[{nonce:accountNonce},now,validators,locked]=await Promise.all([dotApi.query.system.account(dotAddr),dotApi.query.timestamp.now(),dotApi.query.session.validators(),dotApi.query.balances.locks(dotAddr)]);console.log(\"accountNonce(\".concat(dotAddr,\") \").concat(accountNonce));console.log(\"last block timestamp \".concat(now.toNumber()));console.log(\"last block timestamp \".concat(locked));class Chain{constructor(rpc,tokenName,mainTokenAddress){this.rpc=rpc;this.tokenName=tokenName;this.mainTokenAddress=mainTokenAddress;}}class balanceEntry{constructor(tokenName,amount,chain,address,price){this.tokenName=tokenName;this.amount=amount;this.chain=chain;this.address=address;this.price=price;}}// The minimum ABI required to get the ERC20 Token balance\nconst minABI=[// balanceOf\n{constant:true,inputs:[{name:'_owner',type:'address'}],name:'balanceOf',outputs:[{name:'balance',type:'uint256'}],type:'function'},// decimals\n{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"type\":\"function\"}];class Wallets extends React.Component{constructor(props){super(props);this.chains=new Map();this.balances=[];this.chains.set('ETH',new Chain(ethRPC,'ETH',null));this.chains.set('OPT',new Chain(optRPC,'OPT',\"0x4200000000000000000000000000000000000042\"));this.chains.set('ARB',new Chain(arbRPC,'ARB',\"0x912ce59144191c1204e64559fe8253a0e49e6548\"));this.chains.set('STRK',new Chain(starkRPC,'STRK','0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D'));this.chains.set('BSC',new Chain(bscRPC,'BNB',null));this.getBalanceGasToken.bind(this);this.getERC20Balance.bind(this);}async getERC20Balance(wallet,tokenAddr,chain,tokenName){console.log(chain);const contract=new chain.rpc.eth.Contract(minABI,tokenAddr);let result=await contract.methods.balanceOf(wallet).call();result=this.fromWei(result);this.balances.push(new balanceEntry(tokenName,result,chain.tokenName,wallet,0.5));console.log(this.balances);}getBalanceGasToken(address,chain){chain.rpc.eth.getBalance(address).then(balance=>console.log(bscRPC.utils.fromWei(balance,\"ether\")+chain.tokenName));}fromWei(balance){let decimals=balance.toString().slice(-18);let whole=balance.toString().split(decimals)[0];return parseFloat(whole+\".\"+decimals);}render(){{this.getERC20Balance(\"0x4AE673F8898408d39966dE7ECC0BD7128b4b912E\",\"0x912ce59144191c1204e64559fe8253a0e49e6548\",this.chains.get('ARB'),\"ARB\");}return/*#__PURE__*/_jsx(\"div\",{});}};export default Wallets;","map":{"version":3,"names":["React","Component","Web3","require","ApiPromise","WsProvider","algosdk","jsx","_jsx","algodToken","repeat","algodServer","algodPort","algodClient","Algodv2","ethRPC","providers","HttpProvider","optRPC","arbRPC","starkRPC","bscRPC","provider","dotApi","create","chain","rpc","system","dotAddr","nonce","accountNonce","now","validators","locked","Promise","all","query","account","timestamp","session","balances","locks","console","log","concat","toNumber","Chain","constructor","tokenName","mainTokenAddress","balanceEntry","amount","address","price","minABI","constant","inputs","name","type","outputs","Wallets","props","chains","Map","set","getBalanceGasToken","bind","getERC20Balance","wallet","tokenAddr","contract","eth","Contract","result","methods","balanceOf","call","fromWei","push","getBalance","then","balance","utils","decimals","toString","slice","whole","split","parseFloat","render","get"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/components/Wallets.jsx"],"sourcesContent":["import React, { Component } from 'react';\nconst {Web3} = require('web3');\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\nimport { algosdk } from 'algosdk';\n\nconst algodToken = 'a'.repeat(64);\nconst algodServer = 'https://go.getblock.io/ee411bb558234325951e7b4e92d8ed0c';\nconst algodPort = 4001;\n\nconst algodClient = new algosdk.Algodv2(algodToken, algodServer, algodPort);\n\nconst ethRPC = new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst optRPC = new Web3(new Web3.providers.HttpProvider(\"https://optimism-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst arbRPC = new Web3(new Web3.providers.HttpProvider(\"https://arbitrum-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst starkRPC = new Web3(new Web3.providers.HttpProvider(\"https://starknet-mainnet.g.alchemy.com/v2/eDTvRiR7UGc1vibC0sQviDBnqHmlCnKz\"));\nconst bscRPC = new Web3(new Web3.providers.HttpProvider(\"https://bnb-mainnet.g.alchemy.com/v2/Wflh86IAxtX-p7SFc--_YxhsIINWRfPR\"));\n\nconst provider =new WsProvider('wss://rpc.polkadot.io');\nconst dotApi = await ApiPromise.create({provider});\nconst chain = await dotApi.rpc.system.chain();\nconst dotAddr = \"13gBrKGMhttuNjywbmEfK5NFeNbHpbQGbJtFVRMmUWHaSNZf\";\n  const [{ nonce: accountNonce }, now, validators, locked] = await Promise.all([\n    dotApi.query.system.account(dotAddr),\n    dotApi.query.timestamp.now(),\n    dotApi.query.session.validators(),\n    dotApi.query.balances.locks(dotAddr)\n  ]);\n  console.log(`accountNonce(${dotAddr}) ${accountNonce}`);\n  console.log(`last block timestamp ${now.toNumber()}`);\n  console.log(`last block timestamp ${locked}`);\n\nclass Chain{\n  constructor(rpc, tokenName, mainTokenAddress){\n    this.rpc = rpc;\n    this.tokenName = tokenName;\n    this.mainTokenAddress = mainTokenAddress;\n  }\n}\n\nclass balanceEntry{\n  constructor(tokenName, amount, chain, address, price){\n    this.tokenName = tokenName;\n    this.amount = amount;\n    this.chain = chain;\n    this.address = address;\n    this.price = price;\n  }\n}\n\n// The minimum ABI required to get the ERC20 Token balance\nconst minABI = [\n  // balanceOf\n  {\n    constant: true,\n    inputs: [{ name: '_owner', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ name: 'balance', type: 'uint256'}],\n    type: 'function',\n  },\n  // decimals\n  {\n    \"constant\":true,\n    \"inputs\":[],\n    \"name\":\"decimals\",\n    \"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\n    \"type\":\"function\"\n  }\n\n];\n\nclass Wallets extends React.Component{\n\n\n\n  constructor(props){\n    super(props);\n    this.chains = new Map();\n    this.balances = [];\n    this.chains.set('ETH', new Chain(ethRPC, 'ETH', null));\n    this.chains.set('OPT', new Chain(optRPC, 'OPT', \"0x4200000000000000000000000000000000000042\"));\n    this.chains.set('ARB', new Chain(arbRPC, 'ARB', \"0x912ce59144191c1204e64559fe8253a0e49e6548\"));\n    this.chains.set('STRK', new Chain(starkRPC, 'STRK', '0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D'));\n    this.chains.set('BSC', new Chain(bscRPC, 'BNB', null));\n    this.getBalanceGasToken.bind(this);\n    this.getERC20Balance.bind(this);\n  }\n\n\n  async getERC20Balance(wallet,tokenAddr,chain,tokenName){\n    console.log(chain);\n    const contract = new chain.rpc.eth.Contract(minABI, tokenAddr);\n    let result = await contract.methods.balanceOf(wallet).call();\n    result = this.fromWei(result);\n    this.balances.push(new balanceEntry(tokenName,result,chain.tokenName,wallet,0.5));\n    console.log(this.balances);\n  }\n\n  getBalanceGasToken(address, chain){\n    chain.rpc.eth.getBalance(address).then((balance) => console.log(bscRPC.utils.fromWei(balance, \"ether\") + chain.tokenName));\n  }\n\n  fromWei(balance){\n    let decimals = balance.toString().slice(-18);\n    let whole = balance.toString().split(decimals)[0];\n    return parseFloat(whole+\".\"+decimals);\n  }\n\n\n  render(){\n  {this.getERC20Balance(\"0x4AE673F8898408d39966dE7ECC0BD7128b4b912E\",\"0x912ce59144191c1204e64559fe8253a0e49e6548\", this.chains.get('ARB'), \"ARB\")}\n    return (\n      <div></div>\n\n    );\n  }\n};\nexport default Wallets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}