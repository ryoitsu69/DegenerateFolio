{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inferTypesAndEncodeParameters = exports.encodeParameters = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst index_js_1 = require(\"./base/index.js\");\nconst utils_js_1 = require(\"./utils.js\");\n/**\n * @param params - The params to infer the ABI from\n * @returns The inferred ABI\n * @example\n * ```\n * inferParamsAbi([1, -1, 'hello', '0x1234', ])\n * ```\n * > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]\n * ```\n */\nfunction inferParamsAbi(params) {\n  const abi = [];\n  params.forEach(param => {\n    if (Array.isArray(param)) {\n      const inferredParams = inferParamsAbi(param);\n      abi.push({\n        type: 'tuple',\n        components: inferredParams,\n        name: ''\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      });\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      abi.push({\n        type: (0, web3_utils_1.toHex)(param, true)\n      });\n    }\n  });\n  return abi;\n}\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nfunction encodeParameters(abi, params) {\n  if ((abi === null || abi === void 0 ? void 0 : abi.length) !== params.length) {\n    throw new web3_errors_1.AbiError('Invalid number of values received for given ABI', {\n      expected: abi === null || abi === void 0 ? void 0 : abi.length,\n      received: params.length\n    });\n  }\n  const abiParams = (0, utils_js_1.toAbiParams)(abi);\n  return web3_validator_1.utils.uint8ArrayToHexString((0, index_js_1.encodeTuple)({\n    type: 'tuple',\n    name: '',\n    components: abiParams\n  }, params).encoded);\n}\nexports.encodeParameters = encodeParameters;\n/**\n * Infer a smart contract method parameter type and then encode this parameter.\n * @param params - The parameters to encode.\n * @returns - The ABI encoded parameters\n *\n * @remarks\n * This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.\n * However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.\n * The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nfunction inferTypesAndEncodeParameters(params) {\n  try {\n    const abiParams = inferParamsAbi(params);\n    return web3_validator_1.utils.uint8ArrayToHexString((0, index_js_1.encodeTuple)({\n      type: 'tuple',\n      name: '',\n      components: abiParams\n    }, params).encoded);\n  } catch (e) {\n    // throws If the inferred params type caused an error\n    throw new web3_errors_1.AbiError('Could not infer types from given params', {\n      params\n    });\n  }\n}\nexports.inferTypesAndEncodeParameters = inferTypesAndEncodeParameters;","map":{"version":3,"names":["web3_errors_1","require","web3_utils_1","web3_validator_1","index_js_1","utils_js_1","inferParamsAbi","params","abi","forEach","param","Array","isArray","inferredParams","push","type","components","name","toHex","encodeParameters","length","AbiError","expected","received","abiParams","toAbiParams","utils","uint8ArrayToHexString","encodeTuple","encoded","exports","inferTypesAndEncodeParameters","e"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-abi/src/coders/encode.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { AbiInput, AbiParameter } from 'web3-types';\nimport { toHex } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { encodeTuple } from './base/index.js';\nimport { toAbiParams } from './utils.js';\n\n/**\n * @param params - The params to infer the ABI from\n * @returns The inferred ABI\n * @example\n * ```\n * inferParamsAbi([1, -1, 'hello', '0x1234', ])\n * ```\n * > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]\n * ```\n */\nfunction inferParamsAbi(params: unknown[]): ReadonlyArray<AbiParameter> {\n\tconst abi: AbiParameter[] = [];\n\tparams.forEach(param => {\n\t\tif (Array.isArray(param)) {\n\t\t\tconst inferredParams = inferParamsAbi(param);\n\t\t\tabi.push({\n\t\t\t\ttype: 'tuple',\n\t\t\t\tcomponents: inferredParams,\n\t\t\t\tname: '',\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t} as AbiParameter);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\tabi.push({ type: toHex(param as any, true) } as AbiParameter);\n\t\t}\n\t});\n\treturn abi;\n}\n\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function encodeParameters(abi: ReadonlyArray<AbiInput>, params: unknown[]): string {\n\tif (abi?.length !== params.length) {\n\t\tthrow new AbiError('Invalid number of values received for given ABI', {\n\t\t\texpected: abi?.length,\n\t\t\treceived: params.length,\n\t\t});\n\t}\n\n\tconst abiParams = toAbiParams(abi);\n\treturn utils.uint8ArrayToHexString(\n\t\tencodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded,\n\t);\n}\n\n/**\n * Infer a smart contract method parameter type and then encode this parameter.\n * @param params - The parameters to encode.\n * @returns - The ABI encoded parameters\n *\n * @remarks\n * This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.\n * However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.\n * The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function inferTypesAndEncodeParameters(params: unknown[]): string {\n\ttry {\n\t\tconst abiParams = inferParamsAbi(params);\n\t\treturn utils.uint8ArrayToHexString(\n\t\t\tencodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded,\n\t\t);\n\t} catch (e) {\n\t\t// throws If the inferred params type caused an error\n\t\tthrow new AbiError('Could not infer types from given params', {\n\t\t\tparams,\n\t\t});\n\t}\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,MAAAA,aAAA,GAAAC,OAAA;AAEA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,gBAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AAEA;;;;;;;;;;AAUA,SAASK,cAAcA,CAACC,MAAiB;EACxC,MAAMC,GAAG,GAAmB,EAAE;EAC9BD,MAAM,CAACE,OAAO,CAACC,KAAK,IAAG;IACtB,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;MACzB,MAAMG,cAAc,GAAGP,cAAc,CAACI,KAAK,CAAC;MAC5CF,GAAG,CAACM,IAAI,CAAC;QACRC,IAAI,EAAE,OAAO;QACbC,UAAU,EAAEH,cAAc;QAC1BI,IAAI,EAAE;QACN;OACgB,CAAC;KAClB,MAAM;MACN;MACAT,GAAG,CAACM,IAAI,CAAC;QAAEC,IAAI,EAAE,IAAAb,YAAA,CAAAgB,KAAK,EAACR,KAAY,EAAE,IAAI;MAAC,CAAkB,CAAC;;EAE/D,CAAC,CAAC;EACF,OAAOF,GAAG;AACX;AAEA;;;;;;;;;;;;;;;;AAgBA,SAAgBW,gBAAgBA,CAACX,GAA4B,EAAED,MAAiB;EAC/E,IAAI,CAAAC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEY,MAAM,MAAKb,MAAM,CAACa,MAAM,EAAE;IAClC,MAAM,IAAIpB,aAAA,CAAAqB,QAAQ,CAAC,iDAAiD,EAAE;MACrEC,QAAQ,EAAEd,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEY,MAAM;MACrBG,QAAQ,EAAEhB,MAAM,CAACa;KACjB,CAAC;;EAGH,MAAMI,SAAS,GAAG,IAAAnB,UAAA,CAAAoB,WAAW,EAACjB,GAAG,CAAC;EAClC,OAAOL,gBAAA,CAAAuB,KAAK,CAACC,qBAAqB,CACjC,IAAAvB,UAAA,CAAAwB,WAAW,EAAC;IAAEb,IAAI,EAAE,OAAO;IAAEE,IAAI,EAAE,EAAE;IAAED,UAAU,EAAEQ;EAAS,CAAE,EAAEjB,MAAM,CAAC,CAACsB,OAAO,CAC/E;AACF;AAZAC,OAAA,CAAAX,gBAAA,GAAAA,gBAAA;AAcA;;;;;;;;;;;;;;;;;;;AAmBA,SAAgBY,6BAA6BA,CAACxB,MAAiB;EAC9D,IAAI;IACH,MAAMiB,SAAS,GAAGlB,cAAc,CAACC,MAAM,CAAC;IACxC,OAAOJ,gBAAA,CAAAuB,KAAK,CAACC,qBAAqB,CACjC,IAAAvB,UAAA,CAAAwB,WAAW,EAAC;MAAEb,IAAI,EAAE,OAAO;MAAEE,IAAI,EAAE,EAAE;MAAED,UAAU,EAAEQ;IAAS,CAAE,EAAEjB,MAAM,CAAC,CAACsB,OAAO,CAC/E;GACD,CAAC,OAAOG,CAAC,EAAE;IACX;IACA,MAAM,IAAIhC,aAAA,CAAAqB,QAAQ,CAAC,yCAAyC,EAAE;MAC7Dd;KACA,CAAC;;AAEJ;AAZAuB,OAAA,CAAAC,6BAAA,GAAAA,6BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}