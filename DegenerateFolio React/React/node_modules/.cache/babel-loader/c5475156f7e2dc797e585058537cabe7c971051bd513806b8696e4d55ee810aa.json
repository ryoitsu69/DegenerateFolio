{"ast":null,"code":"import { DOMAdapter } from '../../../environment/adapter.mjs';\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\nexport { loadFontAsBase64 };","map":{"version":3,"names":["loadFontAsBase64","url","response","DOMAdapter","get","fetch","blob","reader","FileReader","dataSrc","Promise","resolve","reject","onloadend","result","onerror","readAsDataURL"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts"],"sourcesContent":["import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n"],"mappings":";;AAOA,eAAsBA,iBAAiBC,GACvC;EACI,MAAMC,QAAA,GAAW,MAAMC,UAAA,CAAWC,GAAI,GAAEC,KAAA,CAAMJ,GAAG;EAE3C,MAAAK,IAAA,GAAO,MAAMJ,QAAA,CAASI,IAAK;EAE3B,MAAAC,MAAA,GAAS,IAAIC,UAAW;EAE9B,MAAMC,OAAA,GAAkB,MAAM,IAAIC,OAAQ,EAACC,OAAA,EAASC,MACpD;IACIL,MAAA,CAAOM,SAAY,SAAMF,OAAQ,CAAAJ,MAAA,CAAOO,MAAgB;IACxDP,MAAA,CAAOQ,OAAU,GAAAH,MAAA;IACjBL,MAAA,CAAOS,aAAA,CAAcV,IAAI;EAAA,CAC5B;EAEM,OAAAG,OAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}