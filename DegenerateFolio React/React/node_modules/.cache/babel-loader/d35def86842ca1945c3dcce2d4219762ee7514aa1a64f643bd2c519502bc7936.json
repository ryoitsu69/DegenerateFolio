{"ast":null,"code":"\"use strict\";\n\nconst attributeFormatData = {\n  uint8x2: {\n    size: 2,\n    stride: 2,\n    normalised: false\n  },\n  uint8x4: {\n    size: 4,\n    stride: 4,\n    normalised: false\n  },\n  sint8x2: {\n    size: 2,\n    stride: 2,\n    normalised: false\n  },\n  sint8x4: {\n    size: 4,\n    stride: 4,\n    normalised: false\n  },\n  unorm8x2: {\n    size: 2,\n    stride: 2,\n    normalised: true\n  },\n  unorm8x4: {\n    size: 4,\n    stride: 4,\n    normalised: true\n  },\n  snorm8x2: {\n    size: 2,\n    stride: 2,\n    normalised: true\n  },\n  snorm8x4: {\n    size: 4,\n    stride: 4,\n    normalised: true\n  },\n  uint16x2: {\n    size: 2,\n    stride: 4,\n    normalised: false\n  },\n  uint16x4: {\n    size: 4,\n    stride: 8,\n    normalised: false\n  },\n  sint16x2: {\n    size: 2,\n    stride: 4,\n    normalised: false\n  },\n  sint16x4: {\n    size: 4,\n    stride: 8,\n    normalised: false\n  },\n  unorm16x2: {\n    size: 2,\n    stride: 4,\n    normalised: true\n  },\n  unorm16x4: {\n    size: 4,\n    stride: 8,\n    normalised: true\n  },\n  snorm16x2: {\n    size: 2,\n    stride: 4,\n    normalised: true\n  },\n  snorm16x4: {\n    size: 4,\n    stride: 8,\n    normalised: true\n  },\n  float16x2: {\n    size: 2,\n    stride: 4,\n    normalised: false\n  },\n  float16x4: {\n    size: 4,\n    stride: 8,\n    normalised: false\n  },\n  float32: {\n    size: 1,\n    stride: 4,\n    normalised: false\n  },\n  float32x2: {\n    size: 2,\n    stride: 8,\n    normalised: false\n  },\n  float32x3: {\n    size: 3,\n    stride: 12,\n    normalised: false\n  },\n  float32x4: {\n    size: 4,\n    stride: 16,\n    normalised: false\n  },\n  uint32: {\n    size: 1,\n    stride: 4,\n    normalised: false\n  },\n  uint32x2: {\n    size: 2,\n    stride: 8,\n    normalised: false\n  },\n  uint32x3: {\n    size: 3,\n    stride: 12,\n    normalised: false\n  },\n  uint32x4: {\n    size: 4,\n    stride: 16,\n    normalised: false\n  },\n  sint32: {\n    size: 1,\n    stride: 4,\n    normalised: false\n  },\n  sint32x2: {\n    size: 2,\n    stride: 8,\n    normalised: false\n  },\n  sint32x3: {\n    size: 3,\n    stride: 12,\n    normalised: false\n  },\n  sint32x4: {\n    size: 4,\n    stride: 16,\n    normalised: false\n  }\n};\nfunction getAttributeInfoFromFormat(format) {\n  return attributeFormatData[format] ?? attributeFormatData.float32;\n}\nexport { getAttributeInfoFromFormat };","map":{"version":3,"names":["attributeFormatData","uint8x2","size","stride","normalised","uint8x4","sint8x2","sint8x4","unorm8x2","unorm8x4","snorm8x2","snorm8x4","uint16x2","uint16x4","sint16x2","sint16x4","unorm16x2","unorm16x4","snorm16x2","snorm16x4","float16x2","float16x4","float32","float32x2","float32x3","float32x4","uint32","uint32x2","uint32x3","uint32x4","sint32","sint32x2","sint32x3","sint32x4","getAttributeInfoFromFormat","format"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.ts"],"sourcesContent":["import type { VertexFormat } from '../const';\n\nconst attributeFormatData = {\n    uint8x2: { size: 2, stride: 2, normalised: false },\n    uint8x4: { size: 4, stride: 4, normalised: false },\n    sint8x2: { size: 2, stride: 2, normalised: false },\n    sint8x4: { size: 4, stride: 4, normalised: false },\n    unorm8x2: { size: 2, stride: 2, normalised: true },\n    unorm8x4: { size: 4, stride: 4, normalised: true },\n    snorm8x2: { size: 2, stride: 2, normalised: true },\n    snorm8x4: { size: 4, stride: 4, normalised: true },\n    uint16x2: { size: 2, stride: 4, normalised: false },\n    uint16x4: { size: 4, stride: 8, normalised: false },\n    sint16x2: { size: 2, stride: 4, normalised: false },\n    sint16x4: { size: 4, stride: 8, normalised: false },\n    unorm16x2: { size: 2, stride: 4, normalised: true },\n    unorm16x4: { size: 4, stride: 8, normalised: true },\n    snorm16x2: { size: 2, stride: 4, normalised: true },\n    snorm16x4: { size: 4, stride: 8, normalised: true },\n    float16x2: { size: 2, stride: 4, normalised: false },\n    float16x4: { size: 4, stride: 8, normalised: false },\n    float32: { size: 1, stride: 4, normalised: false },\n    float32x2: { size: 2, stride: 8, normalised: false },\n    float32x3: { size: 3, stride: 12, normalised: false },\n    float32x4: { size: 4, stride: 16, normalised: false },\n    uint32: { size: 1, stride: 4, normalised: false },\n    uint32x2: { size: 2, stride: 8, normalised: false },\n    uint32x3: { size: 3, stride: 12, normalised: false },\n    uint32x4: { size: 4, stride: 16, normalised: false },\n    sint32: { size: 1, stride: 4, normalised: false },\n    sint32x2: { size: 2, stride: 8, normalised: false },\n    sint32x3: { size: 3, stride: 12, normalised: false },\n    sint32x4: { size: 4, stride: 16, normalised: false },\n};\n\nexport function getAttributeInfoFromFormat(format: VertexFormat): { size: number; stride: number; normalised: boolean }\n{\n    return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}