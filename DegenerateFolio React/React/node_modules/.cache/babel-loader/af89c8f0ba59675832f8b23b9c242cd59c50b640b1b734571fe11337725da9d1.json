{"ast":null,"code":"\"use strict\";\n\nfunction logPrettyShaderError(gl, shader) {\n  const shaderSrc = gl.getShaderSource(shader).split(\"\\n\").map((line, index) => `${index}: ${line}`);\n  const shaderLog = gl.getShaderInfoLog(shader);\n  const splitShader = shaderLog.split(\"\\n\");\n  const dedupe = {};\n  const lineNumbers = splitShader.map(line => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"))).filter(n => {\n    if (n && !dedupe[n]) {\n      dedupe[n] = true;\n      return true;\n    }\n    return false;\n  });\n  const logArgs = [\"\"];\n  lineNumbers.forEach(number => {\n    shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n    logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  const fragmentSourceToLog = shaderSrc.join(\"\\n\");\n  logArgs[0] = fragmentSourceToLog;\n  console.error(shaderLog);\n  console.groupCollapsed(\"click to view full shader code\");\n  console.warn(...logArgs);\n  console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, vertexShader);\n    }\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, fragmentShader);\n    }\n    console.error(\"PixiJS Error: Could not initialize shader.\");\n    if (gl.getProgramInfoLog(program) !== \"\") {\n      console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program));\n    }\n  }\n}\nexport { logProgramError };","map":{"version":3,"names":["logPrettyShaderError","gl","shader","shaderSrc","getShaderSource","split","map","line","index","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","parseFloat","replace","filter","n","logArgs","forEach","number","push","fragmentSourceToLog","join","console","error","groupCollapsed","warn","groupEnd","logProgramError","program","vertexShader","fragmentShader","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getProgramInfoLog"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/logProgramError.ts"],"sourcesContent":["/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n * @private\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n"],"mappings":";;AAMA,SAASA,qBAAqBC,EAAA,EAA2BC,MACzD;EACI,MAAMC,SAAA,GAAYF,EAAG,CAAAG,eAAA,CAAgBF,MAAM,EACtCG,KAAA,CAAM,IAAI,EACVC,GAAI,EAACC,IAAA,EAAMC,KAAU,QAAGA,KAAK,KAAKD,IAAM;EAEvC,MAAAE,SAAA,GAAYR,EAAG,CAAAS,gBAAA,CAAiBR,MAAM;EACtC,MAAAS,WAAA,GAAcF,SAAU,CAAAJ,KAAA,CAAM,IAAI;EAExC,MAAMO,MAAA,GAAkC,EAAC;EAEzC,MAAMC,WAAc,GAAAF,WAAA,CAAYL,GAAI,CAACC,IAAA,IAASO,UAAW,CAAAP,IAAA,CAAKQ,OAAQ,6BAA4B,IAAI,CAAC,CAAC,CACnG,CAAAC,MAAA,CAAQC,CACT;IACI,IAAIA,CAAK,KAACL,MAAO,CAAAK,CAAC,CAClB;MACIL,MAAA,CAAOK,CAAC,CAAI;MAEL;IAAA;IAGJ;EAAA,CACV;EAEC,MAAAC,OAAA,GAAU,CAAC,EAAE;EAEPL,WAAA,CAAAM,OAAA,CAASC,MACrB;IACIjB,SAAA,CAAUiB,MAAA,GAAS,CAAC,IAAI,KAAKjB,SAAU,CAAAiB,MAAA,GAAS,CAAC,CAAC;IAC1CF,OAAA,CAAAG,IAAA,CAAK,uDAAuD,iBAAiB;EAAA,CACxF;EAEK,MAAAC,mBAAA,GAAsBnB,SACvB,CAAAoB,IAAA,CAAK,IAAI;EAEdL,OAAA,CAAQ,CAAC,CAAI,GAAAI,mBAAA;EAEbE,OAAA,CAAQC,KAAA,CAAMhB,SAAS;EAGvBe,OAAA,CAAQE,cAAA,CAAe,gCAAgC;EAC/CF,OAAA,CAAAG,IAAA,CAAK,GAAGT,OAAO;EAEvBM,OAAA,CAAQI,QAAS;AACrB;AAWO,SAASC,eACZA,CAAA5B,EAAA,EACA6B,OACA,EAAAC,YAAA,EACAC,cAEJ;EAEI,IAAI,CAAC/B,EAAG,CAAAgC,mBAAA,CAAoBH,OAAS,EAAA7B,EAAA,CAAGiC,WAAW,CACnD;IACI,IAAI,CAACjC,EAAG,CAAAkC,kBAAA,CAAmBJ,YAAc,EAAA9B,EAAA,CAAGmC,cAAc,CAC1D;MACIpC,oBAAA,CAAqBC,EAAA,EAAI8B,YAAY;IAAA;IAGzC,IAAI,CAAC9B,EAAG,CAAAkC,kBAAA,CAAmBH,cAAgB,EAAA/B,EAAA,CAAGmC,cAAc,CAC5D;MACIpC,oBAAA,CAAqBC,EAAA,EAAI+B,cAAc;IAAA;IAG3CR,OAAA,CAAQC,KAAA,CAAM,4CAA4C;IAG1D,IAAIxB,EAAG,CAAAoC,iBAAA,CAAkBP,OAAO,MAAM,EACtC;MACIN,OAAA,CAAQG,IAAK,2CAA0C1B,EAAG,CAAAoC,iBAAA,CAAkBP,OAAO,CAAC;IAAA;EACxF;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}