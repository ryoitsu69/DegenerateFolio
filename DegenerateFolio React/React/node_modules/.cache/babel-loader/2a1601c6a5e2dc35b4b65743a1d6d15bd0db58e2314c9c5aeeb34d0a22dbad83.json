{"ast":null,"code":"import { Texture } from '@pixi/core';\nimport { DisplayObject, Container as Container$3 } from '@pixi/display';\nimport { Point, ObservablePoint } from '@pixi/math';\nimport { BitmapText as BitmapText$3 } from '@pixi/text-bitmap';\nimport { Graphics as Graphics$3 } from '@pixi/graphics';\nimport { NineSlicePlane as NineSlicePlane$3, SimpleMesh as SimpleMesh$3, SimpleRope as SimpleRope$3 } from '@pixi/mesh-extras';\nimport { ParticleContainer as ParticleContainer$3 } from '@pixi/particle-container';\nimport { Sprite as Sprite$3 } from '@pixi/sprite';\nimport { AnimatedSprite as AnimatedSprite$3 } from '@pixi/sprite-animated';\nimport { Text as Text$3 } from '@pixi/text';\nimport { TilingSprite as TilingSprite$3 } from '@pixi/sprite-tiling';\nimport { DRAW_MODES } from '@pixi/constants';\nimport React, { useContext, useRef, useEffect, useMemo } from 'react';\nimport { Application } from '@pixi/app';\nimport { Ticker } from '@pixi/ticker';\nimport PropTypes from 'prop-types';\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\n// borrowed from fbjs\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n    throw error;\n  }\n}\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\n/**\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\nvar lodash_isnil = isNil;\n\n/**\n * Parse PIXI point value to array of coordinates\n *\n * @param {*} value\n * @returns {Array}\n */\nfunction parsePoint(value) {\n  var arr = [];\n  if (typeof value === 'undefined') {\n    return arr;\n  } else if (typeof value === 'string') {\n    arr = value.split(',');\n  } else if (typeof value === 'number') {\n    arr = [value];\n  } else if (Array.isArray(value)) {\n    arr = _toConsumableArray(value);\n  } else if (value !== null && _typeof(value) === 'object') {\n    var x = value && (value === null || value === void 0 ? void 0 : value.x) || 0;\n    var y = value && (value === null || value === void 0 ? void 0 : value.y) || 0;\n    arr = [x, y];\n  } else {\n    return arr;\n  }\n  return arr.filter(function (p) {\n    return !lodash_isnil(p) && !isNaN(p);\n  }).map(Number);\n}\n\n/**\n * Check if two points are equal\n *\n * @param {*} oldValue\n * @param {*} newValue\n * @returns {boolean}\n */\nfunction pointsAreEqual(oldValue, newValue) {\n  if (oldValue.length !== newValue.length) {\n    return false;\n  }\n  for (var i = 0; i < oldValue.length; i++) {\n    if (oldValue[i] !== newValue[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Determine value is type of Point or ObservablePoint\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/utils.js#L48\n *\n * @param {*} value\n * @returns {boolean}\n */\nfunction isPointType(value) {\n  return value instanceof Point || value instanceof ObservablePoint;\n}\n\n/**\n * Event handlers\n *\n * @type {string[]}\n */\nvar eventHandlers = ['click', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'mouseupoutside', 'tap', 'touchstart', 'touchmove', 'touchend', 'touchendoutside', 'pointercancel', 'pointerout', 'pointerover', 'pointertap', 'pointerdown', 'pointerup', 'pointerupoutside', 'pointermove', 'rightclick', 'rightdown', 'rightup', 'rightupoutside', 'touchcancel', 'touchendoutside', 'touchmove', 'touchstart'];\n\n/**\n * Set value on a PIXI.DisplayObject\n * See https://github.com/Izzimach/react-pixi/blob/a25196251a13ed9bb116a8576d93e9fceac2a14c/src/ReactPIXI.js#L114\n *\n * @param {PIXI.DisplayObject} instance\n * @param {string} prop\n * @param {*} value\n */\nfunction setValue(instance, prop, value) {\n  if (isPointType(instance[prop]) && isPointType(value)) {\n    // copy value\n    instance[prop].copyFrom(value);\n  } else if (isPointType(instance[prop])) {\n    // parse value if a non-Point type is being assigned to a Point type\n    var coordinates = parsePoint(value);\n    invariant(typeof coordinates !== 'undefined' && coordinates.length > 0 && coordinates.length < 3, 'The property `%s` is a `Point` and must be set to a comma-separated string of ' + 'either coordinates, an array containing coordinates, or a Point.', prop, JSON.stringify(value), _typeof(value));\n    instance[prop].set(coordinates.shift(), coordinates.shift());\n  } else {\n    // just hard assign value\n    instance[prop] = value;\n  }\n}\nvar isFunction = function isFunction() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.every(function (v) {\n    return typeof v === 'function';\n  });\n};\nvar isObject = function isObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n};\nvar hasKey = function hasKey(collection) {\n  var coll = collection;\n  if (!Array.isArray(coll)) {\n    if (isObject(collection)) {\n      coll = Object.keys(collection);\n    } else {\n      throw new Error('collection needs to be an Array or Object');\n    }\n  }\n  var index = {};\n  coll.forEach(function (key) {\n    index[key] = true;\n  });\n  return function (key) {\n    return typeof index[key] !== 'undefined';\n  };\n};\nvar not = function not(boolFn) {\n  return function () {\n    return !boolFn.apply(void 0, arguments);\n  };\n};\nvar _PROPS_RESERVED;\nvar CHILDREN = 'children';\n/**\n * Reserved props\n *\n * @type {Object}\n */\nvar PROPS_RESERVED = (_PROPS_RESERVED = {}, _defineProperty(_PROPS_RESERVED, CHILDREN, true), _defineProperty(_PROPS_RESERVED, \"parent\", true), _defineProperty(_PROPS_RESERVED, \"worldAlpha\", true), _defineProperty(_PROPS_RESERVED, \"worldTransform\", true), _defineProperty(_PROPS_RESERVED, \"worldVisible\", true), _PROPS_RESERVED);\n\n/**\n * Default display object props\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/props.js#L9\n *\n * @type {Object}\n */\nvar PROPS_DISPLAY_OBJECT = {\n  alpha: 1,\n  buttonMode: false,\n  cacheAsBitmap: false,\n  cursor: null,\n  filterArea: null,\n  filters: null,\n  hitArea: null,\n  interactive: false,\n  mask: null,\n  pivot: 0,\n  position: 0,\n  renderable: true,\n  rotation: 0,\n  scale: 1,\n  skew: 0,\n  transform: null,\n  visible: true,\n  x: 0,\n  y: 0\n};\n\n/**\n * Helper util for fetching the texture from props\n * Can be either texture or image\n *\n * @param {string} elementType\n * @param {PIXI.Container} root\n * @param {object} props\n * @returns {PIXI.Texture|null}\n */\nvar getTextureFromProps = function getTextureFromProps(elementType, root) {\n  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var emitChange = function emitChange(texture) {\n    return requestAnimationFrame(function () {\n      var _texture$__reactpixi, _texture$__reactpixi$;\n      texture === null || texture === void 0 ? void 0 : (_texture$__reactpixi = texture.__reactpixi) === null || _texture$__reactpixi === void 0 ? void 0 : (_texture$__reactpixi$ = _texture$__reactpixi.root) === null || _texture$__reactpixi$ === void 0 ? void 0 : _texture$__reactpixi$.emit(\"__REACT_PIXI_REQUEST_RENDER__\");\n    });\n  };\n\n  // eslint-disable-next-line consistent-return\n  var check = function check(inType, validator) {\n    if (props.hasOwnProperty(inType)) {\n      var valid = validator.typeofs.some(function (t) {\n        return _typeof(props[inType]) === t;\n      }) || validator.instanceofs.some(function (i) {\n        return props[inType] instanceof i;\n      });\n      invariant(valid, \"\".concat(elementType, \" \").concat(inType, \" prop is invalid\"));\n      return props[inType];\n    }\n  };\n  if (props.texture) {\n    invariant(props.texture instanceof Texture, \"\".concat(elementType, \" texture needs to be typeof `Texture`\"));\n    return props.texture;\n  }\n  var result = check('image', {\n    typeofs: ['string'],\n    instanceofs: [HTMLImageElement]\n  }) || check('video', {\n    typeofs: ['string'],\n    instanceofs: [HTMLVideoElement]\n  }) || check('source', {\n    typeofs: ['string', 'number'],\n    instanceofs: [HTMLImageElement, HTMLVideoElement, HTMLCanvasElement, Texture]\n  });\n  invariant(!!result, \"\".concat(elementType, \" could not get texture from props\"));\n  var texture = Texture.from(result);\n  texture.__reactpixi = {\n    root: root\n  };\n  texture.once('update', emitChange);\n  texture.once('loaded', emitChange);\n  if (texture.valid) {\n    emitChange(texture);\n  }\n  return texture;\n};\nvar filterProps = not(hasKey([].concat(_toConsumableArray(Object.keys(PROPS_RESERVED)), _toConsumableArray(eventHandlers))));\n\n/**\n * Apply default props on Display Object instance (which are all components)\n *\n * @param {PIXI.DisplayObject} instance\n * @param {Object} oldProps\n * @param {Object} newProps\n */\nfunction applyDefaultProps(instance, oldProps, newProps) {\n  var changed = false;\n  invariant(DisplayObject.prototype.isPrototypeOf(instance), 'instance needs to be typeof `DisplayObject`, got `%s`', _typeof(instance));\n\n  // update event handlers\n  if (!newProps.ignoreEvents) {\n    var hasRemoveListener = typeof instance.removeListener === 'function';\n    var hasOn = typeof instance.on === 'function';\n    for (var i = 0; i < eventHandlers.length; i++) {\n      var evt = eventHandlers[i];\n      if (oldProps[evt] !== newProps[evt]) {\n        changed = true;\n        if (typeof oldProps[evt] === 'function' && hasRemoveListener) {\n          instance.removeListener(evt, oldProps[evt]);\n        }\n        if (typeof newProps[evt] === 'function' && hasOn) {\n          instance.on(evt, newProps[evt]);\n        }\n      }\n    }\n  }\n  var newPropKeys = Object.keys(newProps || {});\n\n  // hard overwrite all props? can speed up performance\n  if (newProps.overwriteProps) {\n    for (var _i = 0; _i < newPropKeys.length; _i++) {\n      var p = newPropKeys[_i];\n      if (oldProps[p] !== newProps[p]) {\n        changed = true;\n        setValue(instance, p, newProps[p]);\n      }\n    }\n\n    // TODO: previously this returned nothing ie. falsy, should we explicitly return false here instead or was it always\n    // a subtle bug, test the intention\n    return changed;\n  }\n  var props = newPropKeys.filter(filterProps);\n  for (var _i2 = 0; _i2 < props.length; _i2++) {\n    var prop = props[_i2];\n    var value = newProps[prop];\n    if (newProps[prop] !== oldProps[prop]) {\n      changed = true;\n    }\n    if (value !== undefined) {\n      // set value if defined\n      setValue(instance, prop, value);\n    } else if (prop in PROPS_DISPLAY_OBJECT) {\n      // is a default value, use that\n      console.warn(\"setting default value: \".concat(prop, \", from: \").concat(instance[prop], \" to: \").concat(value, \" for\"), instance);\n      changed = true;\n      setValue(instance, prop, PROPS_DISPLAY_OBJECT[prop]);\n    } else {\n      console.warn(\"ignoring prop: \".concat(prop, \", from \").concat(instance[prop], \" to \").concat(value, \" for\"), instance);\n    }\n  }\n  return changed;\n}\nvar BitmapText$1 = function BitmapText(root, props) {\n  var text = props.text,\n    style = props.style;\n  return new BitmapText$3(text, style);\n};\nvar BitmapText$2 = BitmapText$1;\nvar Container$1 = function Container() {\n  return new Container$3();\n};\nvar Container$2 = Container$1;\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nvar _excluded$7 = [\"draw\", \"geometry\"];\nvar Graphics$1 = function Graphics(root, _ref) {\n  var geometry = _ref.geometry;\n  invariant(!geometry || geometry instanceof Graphics$3, \"Graphics geometry needs to be a `Graphics`\");\n  var g = geometry ? new Graphics$3(geometry.geometry) : new Graphics$3();\n  g.applyProps = function (instance, oldProps, newProps) {\n    var draw = newProps.draw;\n    newProps.geometry;\n    var props = _objectWithoutProperties(newProps, _excluded$7);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (oldProps.draw !== draw && typeof draw === 'function') {\n      changed = true;\n      draw.call(g, g);\n    }\n    return changed;\n  };\n  return g;\n};\nvar Graphics$2 = Graphics$1;\nvar _excluded$6 = [\"image\", \"texture\"];\nvar NineSlicePlane$1 = function NineSlicePlane(root, props) {\n  var _props$leftWidth = props.leftWidth,\n    leftWidth = _props$leftWidth === void 0 ? 10 : _props$leftWidth,\n    _props$topHeight = props.topHeight,\n    topHeight = _props$topHeight === void 0 ? 10 : _props$topHeight,\n    _props$rightWidth = props.rightWidth,\n    rightWidth = _props$rightWidth === void 0 ? 10 : _props$rightWidth,\n    _props$bottomHeight = props.bottomHeight,\n    bottomHeight = _props$bottomHeight === void 0 ? 10 : _props$bottomHeight;\n  var texture = getTextureFromProps('NineSlicePlane', root, props);\n  var nineSlicePlane = new NineSlicePlane$3(texture, leftWidth, topHeight, rightWidth, bottomHeight);\n  nineSlicePlane.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$6);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (image || texture) {\n      // change = true not required for image, getTextureFromProps will call update\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('NineSlicePlane', root, newProps);\n    }\n    return changed;\n  };\n  return nineSlicePlane;\n};\nvar NineSlicePlane$2 = NineSlicePlane$1;\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar ParticleContainer$1 = function ParticleContainer(root, props) {\n  var _props$maxSize = props.maxSize,\n    maxSize = _props$maxSize === void 0 ? 1500 : _props$maxSize,\n    _props$batchSize = props.batchSize,\n    batchSize = _props$batchSize === void 0 ? 16384 : _props$batchSize,\n    _props$autoResize = props.autoResize,\n    autoResize = _props$autoResize === void 0 ? false : _props$autoResize;\n  var properties = _objectSpread$3(_objectSpread$3({}, {\n    vertices: false,\n    scale: true,\n    position: true,\n    rotation: true,\n    uvs: true,\n    tint: true\n  }), props.properties || {});\n  var destroyOptions = _objectSpread$3(_objectSpread$3({}, {\n    children: false,\n    texture: false,\n    baseTexture: false\n  }), props.destroyOptions || {});\n  var container = new ParticleContainer$3(maxSize, properties, batchSize, autoResize);\n  container.willUnmount = function (instance, child, parent) {\n    instance.destroy(destroyOptions);\n  };\n  return container;\n};\nvar ParticleContainer$2 = ParticleContainer$1;\nvar _excluded$5 = [\"image\", \"texture\"];\nvar Sprite$1 = function Sprite(root, props) {\n  var sprite = new Sprite$3(getTextureFromProps('Sprite', root, props));\n  sprite.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$5);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (texture && oldProps.texture !== newProps.texture || image && oldProps.image !== newProps.image) {\n      // getTextureFromProps will call update for image\n      if (oldProps.texture !== newProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('Sprite', root, newProps);\n    }\n    return changed;\n  };\n  return sprite;\n};\nvar Sprite$2 = Sprite$1;\nvar _excluded$4 = [\"textures\", \"isPlaying\", \"initialFrame\", \"images\"];\nvar AnimatedSprite$1 = function AnimatedSprite(root, props) {\n  var textures = props.textures,\n    images = props.images,\n    _props$isPlaying = props.isPlaying,\n    isPlaying = _props$isPlaying === void 0 ? true : _props$isPlaying,\n    initialFrame = props.initialFrame;\n  var makeTexture = function makeTexture(textures) {\n    return textures.map(function (texture) {\n      invariant(texture instanceof Texture || (texture === null || texture === void 0 ? void 0 : texture.texture), \"AnimationSprite texture needs to be an array of `Texture` or `{ texture: Texture, time:\\n                number }`\");\n      return texture;\n    });\n  };\n  var animatedSprite = images ? AnimatedSprite$3.fromImages(images) : new AnimatedSprite$3(makeTexture(textures));\n  animatedSprite[isPlaying ? 'gotoAndPlay' : 'gotoAndStop'](initialFrame || 0);\n  animatedSprite.applyProps = function (instance, oldProps, newProps) {\n    var textures = newProps.textures,\n      isPlaying = newProps.isPlaying,\n      initialFrame = newProps.initialFrame,\n      images = newProps.images,\n      props = _objectWithoutProperties(newProps, _excluded$4);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (images && oldProps.images !== images) {\n      var newTextures = [];\n      for (var i = 0; i < images.length; ++i) {\n        newTextures.push(Texture.from(images[i]));\n      }\n      instance.textures = newTextures;\n      changed = true;\n    }\n    if (textures && oldProps.textures !== textures) {\n      instance.textures = makeTexture(textures);\n      changed = true;\n    }\n    if (isPlaying !== oldProps.isPlaying || initialFrame !== oldProps.initialFrame) {\n      var frame = typeof initialFrame === 'number' ? initialFrame : animatedSprite.currentFrame || 0;\n      animatedSprite[isPlaying ? 'gotoAndPlay' : 'gotoAndStop'](frame);\n      changed = true;\n    }\n    return changed;\n  };\n  return animatedSprite;\n};\nvar AnimatedSprite$2 = AnimatedSprite$1;\nvar Text$1 = function Text(root, props) {\n  var _props$text = props.text,\n    text = _props$text === void 0 ? '' : _props$text,\n    _props$style = props.style,\n    style = _props$style === void 0 ? {} : _props$style,\n    isSprite = props.isSprite;\n  var pixiText = new Text$3(text, style);\n  if (isSprite) {\n    pixiText.updateText();\n    return new Sprite$3(pixiText.texture);\n  }\n  return pixiText;\n};\nvar Text$2 = Text$1;\nvar _excluded$3 = [\"tileScale\", \"tilePosition\", \"image\", \"texture\"];\nvar TilingSprite$1 = function TilingSprite(root, props) {\n  var _props$width = props.width,\n    width = _props$width === void 0 ? 100 : _props$width,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 100 : _props$height;\n  var texture = getTextureFromProps('TilingSprite', root, props);\n  var ts = new TilingSprite$3(texture, width, height);\n  ts.applyProps = function (instance, oldProps, newProps) {\n    var tileScale = newProps.tileScale,\n      tilePosition = newProps.tilePosition,\n      image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$3);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (tilePosition) {\n      var _instance$tilePositio;\n      var newTilePosition = parsePoint(tilePosition);\n      (_instance$tilePositio = instance.tilePosition).set.apply(_instance$tilePositio, _toConsumableArray(newTilePosition));\n      changed = !pointsAreEqual(parsePoint(oldProps.tilePosition), newTilePosition) || changed;\n    }\n    if (tileScale) {\n      var _instance$tileScale;\n      var newTileScale = parsePoint(tileScale);\n      (_instance$tileScale = instance.tileScale).set.apply(_instance$tileScale, _toConsumableArray(newTileScale));\n      changed = !pointsAreEqual(parsePoint(oldProps.tileScale), newTileScale) || changed;\n    }\n    if (image || texture) {\n      // change = true not required for image, getTextureFromProps will call update\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('Sprite', root, newProps);\n    }\n    return changed;\n  };\n  return ts;\n};\nvar TilingSprite$2 = TilingSprite$1;\nvar _excluded$2 = [\"image\", \"texture\"];\nvar SimpleMesh$1 = function SimpleMesh(root, props) {\n  var texture = getTextureFromProps('Mesh', root, props);\n  var vertices = props.vertices,\n    uvs = props.uvs,\n    indices = props.indices,\n    _props$drawMode = props.drawMode,\n    drawMode = _props$drawMode === void 0 ? DRAW_MODES.TRIANGLES : _props$drawMode;\n  var simpleMesh = new SimpleMesh$3(texture, vertices, uvs, indices, drawMode);\n  simpleMesh.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$2);\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (image || texture) {\n      // change = true not required for image, getTextureFromProps will call update\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('Mesh', root, newProps);\n    }\n    return changed;\n  };\n  return simpleMesh;\n};\nvar SimpleMesh$2 = SimpleMesh$1;\nvar _excluded$1 = [\"image\", \"texture\"];\nvar SimpleRope$1 = function SimpleRope(root, props) {\n  var texture = getTextureFromProps('SimpleRope', root, props);\n  var points = props.points;\n  var rope = new SimpleRope$3(texture, points);\n  rope.applyProps = function (instance, oldProps, newProps) {\n    var image = newProps.image,\n      texture = newProps.texture,\n      props = _objectWithoutProperties(newProps, _excluded$1);\n    invariant(Array.isArray(newProps.points), 'SimpleRope points needs to be %s', 'Array<Point>');\n    var changed = applyDefaultProps(instance, oldProps, props);\n    if (image || texture) {\n      if (texture !== oldProps.texture) {\n        changed = true;\n      }\n      instance.texture = getTextureFromProps('SimpleRope', root, newProps);\n    }\n    return changed;\n  };\n  return rope;\n};\nvar SimpleRope$2 = SimpleRope$1;\nvar components = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BitmapText: BitmapText$2,\n  Container: Container$2,\n  Graphics: Graphics$2,\n  NineSlicePlane: NineSlicePlane$2,\n  ParticleContainer: ParticleContainer$2,\n  Sprite: Sprite$2,\n  Text: Text$2,\n  TilingSprite: TilingSprite$2,\n  SimpleMesh: SimpleMesh$2,\n  SimpleRope: SimpleRope$2,\n  AnimatedSprite: AnimatedSprite$2\n});\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\n\n/**\n * Available tag types\n *\n * @type {Object}\n */\nvar TYPES = {\n  BitmapText: 'BitmapText',\n  Container: 'Container',\n  Graphics: 'Graphics',\n  NineSlicePlane: 'NineSlicePlane',\n  ParticleContainer: 'ParticleContainer',\n  Sprite: 'Sprite',\n  AnimatedSprite: 'AnimatedSprite',\n  Text: 'Text',\n  TilingSprite: 'TilingSprite',\n  SimpleMesh: 'SimpleMesh',\n  SimpleRope: 'SimpleRope'\n};\nvar ELEMENTS = Object.keys(TYPES).reduce(function (elements, type) {\n  return _objectSpread$2(_objectSpread$2({}, elements), {}, _defineProperty({}, type, components[type]));\n}, {});\n\n/**\n * Inject types\n *\n * @type {Object}\n */\nvar TYPES_INJECTED = {};\n\n/**\n * Create an element based on tag type\n * Similar to react-dom's `React.createElement()`\n *\n * @param {string} type Element type\n * @param {Object} props Component props\n * @param {Object} root Root instance\n */\nfunction createElement(type) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var fn = ELEMENTS[type];\n  var instance;\n  var applyProps;\n  if (typeof fn === 'function') {\n    instance = fn(root, props);\n  }\n  if (!instance) {\n    // not found, is there any injected custom component?\n    var injected = TYPES_INJECTED[type];\n    if (injected) {\n      instance = injected.create(props, {\n        root: root\n      });\n      instance.didMount = injected.didMount ? injected.didMount.bind(instance) : undefined;\n      instance.willUnmount = injected.willUnmount ? injected.willUnmount.bind(instance) : undefined;\n      instance.applyProps = injected.applyProps ? injected.applyProps.bind(instance) : undefined;\n      instance.config = injected.config;\n    }\n  }\n\n  // apply initial props!\n  if (instance) {\n    var _instance;\n    instance.__reactpixi = {\n      root: root\n    };\n    applyProps = typeof ((_instance = instance) === null || _instance === void 0 ? void 0 : _instance.applyProps) === 'function' ? instance.applyProps : applyDefaultProps;\n    applyProps(instance, {}, props);\n  }\n  return instance;\n}\n\n/**\n * Create Component\n *\n * @param {string} type\n * @param {Object} lifecycle methods\n */\nfunction PixiComponent(type, lifecycle) {\n  invariant(!!type, 'Expect type to be defined, got `%s`', type);\n  invariant(!TYPES[type], 'Component `%s` could not be created, already exists in default components.', type);\n  TYPES_INJECTED[type] = lifecycle;\n  return type;\n}\nvar reactReconcilerExports = {};\nvar reactReconciler = {\n  get exports() {\n    return reactReconcilerExports;\n  },\n  set exports(v) {\n    reactReconcilerExports = v;\n  }\n};\nvar schedulerExports = {};\nvar scheduler = {\n  get exports() {\n    return schedulerExports;\n  },\n  set exports(v) {\n    schedulerExports = v;\n  }\n};\nvar scheduler_development = {};\n\n/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredScheduler_development;\nfunction requireScheduler_development() {\n  if (hasRequiredScheduler_development) return scheduler_development;\n  hasRequiredScheduler_development = 1;\n  (function (exports) {\n    {\n      (function () {\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {\n          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var enableSchedulerDebugging = false;\n        var enableProfiling = false;\n        var frameYieldMs = 5;\n        function push(heap, node) {\n          var index = heap.length;\n          heap.push(node);\n          siftUp(heap, node, index);\n        }\n        function peek(heap) {\n          return heap.length === 0 ? null : heap[0];\n        }\n        function pop(heap) {\n          if (heap.length === 0) {\n            return null;\n          }\n          var first = heap[0];\n          var last = heap.pop();\n          if (last !== first) {\n            heap[0] = last;\n            siftDown(heap, last, 0);\n          }\n          return first;\n        }\n        function siftUp(heap, node, i) {\n          var index = i;\n          while (index > 0) {\n            var parentIndex = index - 1 >>> 1;\n            var parent = heap[parentIndex];\n            if (compare(parent, node) > 0) {\n              // The parent is larger. Swap positions.\n              heap[parentIndex] = node;\n              heap[index] = parent;\n              index = parentIndex;\n            } else {\n              // The parent is smaller. Exit.\n              return;\n            }\n          }\n        }\n        function siftDown(heap, node, i) {\n          var index = i;\n          var length = heap.length;\n          var halfLength = length >>> 1;\n          while (index < halfLength) {\n            var leftIndex = (index + 1) * 2 - 1;\n            var left = heap[leftIndex];\n            var rightIndex = leftIndex + 1;\n            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n            if (compare(left, node) < 0) {\n              if (rightIndex < length && compare(right, left) < 0) {\n                heap[index] = right;\n                heap[rightIndex] = node;\n                index = rightIndex;\n              } else {\n                heap[index] = left;\n                heap[leftIndex] = node;\n                index = leftIndex;\n              }\n            } else if (rightIndex < length && compare(right, node) < 0) {\n              heap[index] = right;\n              heap[rightIndex] = node;\n              index = rightIndex;\n            } else {\n              // Neither child is smaller. Exit.\n              return;\n            }\n          }\n        }\n        function compare(a, b) {\n          // Compare sort index first, then task id.\n          var diff = a.sortIndex - b.sortIndex;\n          return diff !== 0 ? diff : a.id - b.id;\n        }\n\n        // TODO: Use symbols?\n        var ImmediatePriority = 1;\n        var UserBlockingPriority = 2;\n        var NormalPriority = 3;\n        var LowPriority = 4;\n        var IdlePriority = 5;\n        function markTaskErrored(task, ms) {}\n\n        /* eslint-disable no-var */\n\n        var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n        if (hasPerformanceNow) {\n          var localPerformance = performance;\n          exports.unstable_now = function () {\n            return localPerformance.now();\n          };\n        } else {\n          var localDate = Date;\n          var initialTime = localDate.now();\n          exports.unstable_now = function () {\n            return localDate.now() - initialTime;\n          };\n        } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n        // Math.pow(2, 30) - 1\n        // 0b111111111111111111111111111111\n\n        var maxSigned31BitInt = 1073741823; // Times out immediately\n\n        var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n        var NORMAL_PRIORITY_TIMEOUT = 5000;\n        var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\n        var taskQueue = [];\n        var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n        var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n        var currentTask = null;\n        var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\n        var isPerformingWork = false;\n        var isHostCallbackScheduled = false;\n        var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\n        var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\n        var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\n        var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\n        typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n        function advanceTimers(currentTime) {\n          // Check for tasks that are no longer delayed and add them to the queue.\n          var timer = peek(timerQueue);\n          while (timer !== null) {\n            if (timer.callback === null) {\n              // Timer was cancelled.\n              pop(timerQueue);\n            } else if (timer.startTime <= currentTime) {\n              // Timer fired. Transfer to the task queue.\n              pop(timerQueue);\n              timer.sortIndex = timer.expirationTime;\n              push(taskQueue, timer);\n            } else {\n              // Remaining timers are pending.\n              return;\n            }\n            timer = peek(timerQueue);\n          }\n        }\n        function handleTimeout(currentTime) {\n          isHostTimeoutScheduled = false;\n          advanceTimers(currentTime);\n          if (!isHostCallbackScheduled) {\n            if (peek(taskQueue) !== null) {\n              isHostCallbackScheduled = true;\n              requestHostCallback(flushWork);\n            } else {\n              var firstTimer = peek(timerQueue);\n              if (firstTimer !== null) {\n                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n              }\n            }\n          }\n        }\n        function flushWork(hasTimeRemaining, initialTime) {\n          isHostCallbackScheduled = false;\n          if (isHostTimeoutScheduled) {\n            // We scheduled a timeout but it's no longer needed. Cancel it.\n            isHostTimeoutScheduled = false;\n            cancelHostTimeout();\n          }\n          isPerformingWork = true;\n          var previousPriorityLevel = currentPriorityLevel;\n          try {\n            var currentTime;\n            if (enableProfiling) ;else {\n              // No catch in prod code path.\n              return workLoop(hasTimeRemaining, initialTime);\n            }\n          } finally {\n            currentTask = null;\n            currentPriorityLevel = previousPriorityLevel;\n            isPerformingWork = false;\n          }\n        }\n        function workLoop(hasTimeRemaining, initialTime) {\n          var currentTime = initialTime;\n          advanceTimers(currentTime);\n          currentTask = peek(taskQueue);\n          while (currentTask !== null && !enableSchedulerDebugging) {\n            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n              // This currentTask hasn't expired, and we've reached the deadline.\n              break;\n            }\n            var callback = currentTask.callback;\n            if (typeof callback === 'function') {\n              currentTask.callback = null;\n              currentPriorityLevel = currentTask.priorityLevel;\n              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n              var continuationCallback = callback(didUserCallbackTimeout);\n              currentTime = exports.unstable_now();\n              if (typeof continuationCallback === 'function') {\n                currentTask.callback = continuationCallback;\n              } else {\n                if (currentTask === peek(taskQueue)) {\n                  pop(taskQueue);\n                }\n              }\n              advanceTimers(currentTime);\n            } else {\n              pop(taskQueue);\n            }\n            currentTask = peek(taskQueue);\n          } // Return whether there's additional work\n\n          if (currentTask !== null) {\n            return true;\n          } else {\n            var firstTimer = peek(timerQueue);\n            if (firstTimer !== null) {\n              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n            }\n            return false;\n          }\n        }\n        function unstable_runWithPriority(priorityLevel, eventHandler) {\n          switch (priorityLevel) {\n            case ImmediatePriority:\n            case UserBlockingPriority:\n            case NormalPriority:\n            case LowPriority:\n            case IdlePriority:\n              break;\n            default:\n              priorityLevel = NormalPriority;\n          }\n          var previousPriorityLevel = currentPriorityLevel;\n          currentPriorityLevel = priorityLevel;\n          try {\n            return eventHandler();\n          } finally {\n            currentPriorityLevel = previousPriorityLevel;\n          }\n        }\n        function unstable_next(eventHandler) {\n          var priorityLevel;\n          switch (currentPriorityLevel) {\n            case ImmediatePriority:\n            case UserBlockingPriority:\n            case NormalPriority:\n              // Shift down to normal priority\n              priorityLevel = NormalPriority;\n              break;\n            default:\n              // Anything lower than normal priority should remain at the current level.\n              priorityLevel = currentPriorityLevel;\n              break;\n          }\n          var previousPriorityLevel = currentPriorityLevel;\n          currentPriorityLevel = priorityLevel;\n          try {\n            return eventHandler();\n          } finally {\n            currentPriorityLevel = previousPriorityLevel;\n          }\n        }\n        function unstable_wrapCallback(callback) {\n          var parentPriorityLevel = currentPriorityLevel;\n          return function () {\n            // This is a fork of runWithPriority, inlined for performance.\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = parentPriorityLevel;\n            try {\n              return callback.apply(this, arguments);\n            } finally {\n              currentPriorityLevel = previousPriorityLevel;\n            }\n          };\n        }\n        function unstable_scheduleCallback(priorityLevel, callback, options) {\n          var currentTime = exports.unstable_now();\n          var startTime;\n          if (typeof options === 'object' && options !== null) {\n            var delay = options.delay;\n            if (typeof delay === 'number' && delay > 0) {\n              startTime = currentTime + delay;\n            } else {\n              startTime = currentTime;\n            }\n          } else {\n            startTime = currentTime;\n          }\n          var timeout;\n          switch (priorityLevel) {\n            case ImmediatePriority:\n              timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n              break;\n            case UserBlockingPriority:\n              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n              break;\n            case IdlePriority:\n              timeout = IDLE_PRIORITY_TIMEOUT;\n              break;\n            case LowPriority:\n              timeout = LOW_PRIORITY_TIMEOUT;\n              break;\n            case NormalPriority:\n            default:\n              timeout = NORMAL_PRIORITY_TIMEOUT;\n              break;\n          }\n          var expirationTime = startTime + timeout;\n          var newTask = {\n            id: taskIdCounter++,\n            callback: callback,\n            priorityLevel: priorityLevel,\n            startTime: startTime,\n            expirationTime: expirationTime,\n            sortIndex: -1\n          };\n          if (startTime > currentTime) {\n            // This is a delayed task.\n            newTask.sortIndex = startTime;\n            push(timerQueue, newTask);\n            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n              // All tasks are delayed, and this is the task with the earliest delay.\n              if (isHostTimeoutScheduled) {\n                // Cancel an existing timeout.\n                cancelHostTimeout();\n              } else {\n                isHostTimeoutScheduled = true;\n              } // Schedule a timeout.\n\n              requestHostTimeout(handleTimeout, startTime - currentTime);\n            }\n          } else {\n            newTask.sortIndex = expirationTime;\n            push(taskQueue, newTask);\n            // wait until the next time we yield.\n\n            if (!isHostCallbackScheduled && !isPerformingWork) {\n              isHostCallbackScheduled = true;\n              requestHostCallback(flushWork);\n            }\n          }\n          return newTask;\n        }\n        function unstable_pauseExecution() {}\n        function unstable_continueExecution() {\n          if (!isHostCallbackScheduled && !isPerformingWork) {\n            isHostCallbackScheduled = true;\n            requestHostCallback(flushWork);\n          }\n        }\n        function unstable_getFirstCallbackNode() {\n          return peek(taskQueue);\n        }\n        function unstable_cancelCallback(task) {\n          // remove from the queue because you can't remove arbitrary nodes from an\n          // array based heap, only the first one.)\n\n          task.callback = null;\n        }\n        function unstable_getCurrentPriorityLevel() {\n          return currentPriorityLevel;\n        }\n        var isMessageLoopRunning = false;\n        var scheduledHostCallback = null;\n        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n        // thread, like user events. By default, it yields multiple times per frame.\n        // It does not attempt to align with frame boundaries, since most tasks don't\n        // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n        var frameInterval = frameYieldMs;\n        var startTime = -1;\n        function shouldYieldToHost() {\n          var timeElapsed = exports.unstable_now() - startTime;\n          if (timeElapsed < frameInterval) {\n            // The main thread has only been blocked for a really short amount of time;\n            // smaller than a single frame. Don't yield yet.\n            return false;\n          } // The main thread has been blocked for a non-negligible amount of time. We\n\n          return true;\n        }\n        function requestPaint() {}\n        function forceFrameRate(fps) {\n          if (fps < 0 || fps > 125) {\n            // Using console['error'] to evade Babel and ESLint\n            console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n            return;\n          }\n          if (fps > 0) {\n            frameInterval = Math.floor(1000 / fps);\n          } else {\n            // reset the framerate\n            frameInterval = frameYieldMs;\n          }\n        }\n        var performWorkUntilDeadline = function () {\n          if (scheduledHostCallback !== null) {\n            var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n            // has been blocked.\n\n            startTime = currentTime;\n            var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n            // error can be observed.\n            //\n            // Intentionally not using a try-catch, since that makes some debugging\n            // techniques harder. Instead, if `scheduledHostCallback` errors, then\n            // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n            var hasMoreWork = true;\n            try {\n              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n            } finally {\n              if (hasMoreWork) {\n                // If there's more work, schedule the next message event at the end\n                // of the preceding one.\n                schedulePerformWorkUntilDeadline();\n              } else {\n                isMessageLoopRunning = false;\n                scheduledHostCallback = null;\n              }\n            }\n          } else {\n            isMessageLoopRunning = false;\n          } // Yielding to the browser will give it a chance to paint, so we can\n        };\n        var schedulePerformWorkUntilDeadline;\n        if (typeof localSetImmediate === 'function') {\n          // Node.js and old IE.\n          // There's a few reasons for why we prefer setImmediate.\n          //\n          // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n          // (Even though this is a DOM fork of the Scheduler, you could get here\n          // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n          // https://github.com/facebook/react/issues/20756\n          //\n          // But also, it runs earlier which is the semantic we want.\n          // If other browsers ever implement it, it's better to use it.\n          // Although both of these would be inferior to native scheduling.\n          schedulePerformWorkUntilDeadline = function () {\n            localSetImmediate(performWorkUntilDeadline);\n          };\n        } else if (typeof MessageChannel !== 'undefined') {\n          // DOM and Worker environments.\n          // We prefer MessageChannel because of the 4ms setTimeout clamping.\n          var channel = new MessageChannel();\n          var port = channel.port2;\n          channel.port1.onmessage = performWorkUntilDeadline;\n          schedulePerformWorkUntilDeadline = function () {\n            port.postMessage(null);\n          };\n        } else {\n          // We should only fallback here in non-browser environments.\n          schedulePerformWorkUntilDeadline = function () {\n            localSetTimeout(performWorkUntilDeadline, 0);\n          };\n        }\n        function requestHostCallback(callback) {\n          scheduledHostCallback = callback;\n          if (!isMessageLoopRunning) {\n            isMessageLoopRunning = true;\n            schedulePerformWorkUntilDeadline();\n          }\n        }\n        function requestHostTimeout(callback, ms) {\n          taskTimeoutID = localSetTimeout(function () {\n            callback(exports.unstable_now());\n          }, ms);\n        }\n        function cancelHostTimeout() {\n          localClearTimeout(taskTimeoutID);\n          taskTimeoutID = -1;\n        }\n        var unstable_requestPaint = requestPaint;\n        var unstable_Profiling = null;\n        exports.unstable_IdlePriority = IdlePriority;\n        exports.unstable_ImmediatePriority = ImmediatePriority;\n        exports.unstable_LowPriority = LowPriority;\n        exports.unstable_NormalPriority = NormalPriority;\n        exports.unstable_Profiling = unstable_Profiling;\n        exports.unstable_UserBlockingPriority = UserBlockingPriority;\n        exports.unstable_cancelCallback = unstable_cancelCallback;\n        exports.unstable_continueExecution = unstable_continueExecution;\n        exports.unstable_forceFrameRate = forceFrameRate;\n        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n        exports.unstable_next = unstable_next;\n        exports.unstable_pauseExecution = unstable_pauseExecution;\n        exports.unstable_requestPaint = unstable_requestPaint;\n        exports.unstable_runWithPriority = unstable_runWithPriority;\n        exports.unstable_scheduleCallback = unstable_scheduleCallback;\n        exports.unstable_shouldYield = shouldYieldToHost;\n        exports.unstable_wrapCallback = unstable_wrapCallback;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {\n          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n      })();\n    }\n  })(scheduler_development);\n  return scheduler_development;\n}\nvar hasRequiredScheduler;\nfunction requireScheduler() {\n  if (hasRequiredScheduler) return schedulerExports;\n  hasRequiredScheduler = 1;\n  (function (module) {\n    {\n      module.exports = requireScheduler_development();\n    }\n  })(scheduler);\n  return schedulerExports;\n}\nvar reactReconciler_developmentExports = {};\nvar reactReconciler_development = {\n  get exports() {\n    return reactReconciler_developmentExports;\n  },\n  set exports(v) {\n    reactReconciler_developmentExports = v;\n  }\n};\n\n/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReactReconciler_development;\nfunction requireReactReconciler_development() {\n  if (hasRequiredReactReconciler_development) return reactReconciler_developmentExports;\n  hasRequiredReactReconciler_development = 1;\n  {\n    reactReconciler_development.exports = function $$$reconciler($$$hostConfig) {\n      var exports = {};\n      var React$1 = React;\n      var Scheduler = requireScheduler();\n      var ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n      var suppressWarning = false;\n      function setSuppressWarning(newSuppressWarning) {\n        {\n          suppressWarning = newSuppressWarning;\n        }\n      } // In DEV, calls to console.warn and console.error get replaced\n      // by calls to these methods by a Babel plugin.\n      //\n      // In PROD (or in packages without access to React internals),\n      // they are left as they are instead.\n\n      function warn(format) {\n        {\n          if (!suppressWarning) {\n            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = arguments[_key];\n            }\n            printWarning('warn', format, args);\n          }\n        }\n      }\n      function error(format) {\n        {\n          if (!suppressWarning) {\n            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n              args[_key2 - 1] = arguments[_key2];\n            }\n            printWarning('error', format, args);\n          }\n        }\n      }\n      function printWarning(level, format, args) {\n        // When changing this logic, you might want to also\n        // update consoleWithStackDev.www.js as well.\n        {\n          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n          var stack = ReactDebugCurrentFrame.getStackAddendum();\n          if (stack !== '') {\n            format += '%s';\n            args = args.concat([stack]);\n          } // eslint-disable-next-line react-internal/safe-string-coercion\n\n          var argsWithFormat = args.map(function (item) {\n            return String(item);\n          }); // Careful: RN currently depends on this prefix\n\n          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n          // breaks IE9: https://github.com/facebook/react/issues/13610\n          // eslint-disable-next-line react-internal/no-production-logging\n\n          Function.prototype.apply.call(console[level], console, argsWithFormat);\n        }\n      }\n      var assign = Object.assign;\n\n      /**\n       * `ReactInstanceMap` maintains a mapping from a public facing stateful\n       * instance (key) and the internal representation (value). This allows public\n       * methods to accept the user facing instance as an argument and map them back\n       * to internal methods.\n       *\n       * Note that this module is currently shared and assumed to be stateless.\n       * If this becomes an actual Map, that will break.\n       */\n      function get(key) {\n        return key._reactInternals;\n      }\n      function set(key, value) {\n        key._reactInternals = value;\n      }\n\n      // -----------------------------------------------------------------------------\n      // the react-reconciler package.\n\n      var enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\n      var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\n      var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\n      var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\n      var warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n      // Debugging and DevTools\n      // -----------------------------------------------------------------------------\n      // Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n      // for an experimental timeline tool.\n\n      var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\n      var enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\n      var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\n      var FunctionComponent = 0;\n      var ClassComponent = 1;\n      var IndeterminateComponent = 2; // Before we know whether it is function or class\n\n      var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n      var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n      var HostComponent = 5;\n      var HostText = 6;\n      var Fragment = 7;\n      var Mode = 8;\n      var ContextConsumer = 9;\n      var ContextProvider = 10;\n      var ForwardRef = 11;\n      var Profiler = 12;\n      var SuspenseComponent = 13;\n      var MemoComponent = 14;\n      var SimpleMemoComponent = 15;\n      var LazyComponent = 16;\n      var IncompleteClassComponent = 17;\n      var DehydratedFragment = 18;\n      var SuspenseListComponent = 19;\n      var ScopeComponent = 21;\n      var OffscreenComponent = 22;\n      var LegacyHiddenComponent = 23;\n      var CacheComponent = 24;\n      var TracingMarkerComponent = 25;\n\n      // ATTENTION\n      // When adding new symbols to this file,\n      // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n      // The Symbol used to tag the ReactElement-like types.\n      var REACT_ELEMENT_TYPE = Symbol.for('react.element');\n      var REACT_PORTAL_TYPE = Symbol.for('react.portal');\n      var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n      var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n      var REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n      var REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n      var REACT_CONTEXT_TYPE = Symbol.for('react.context');\n      var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n      var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n      var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n      var REACT_MEMO_TYPE = Symbol.for('react.memo');\n      var REACT_LAZY_TYPE = Symbol.for('react.lazy');\n      var REACT_SCOPE_TYPE = Symbol.for('react.scope');\n      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\n      var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\n      var REACT_CACHE_TYPE = Symbol.for('react.cache');\n      var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\n      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n      var FAUX_ITERATOR_SYMBOL = '@@iterator';\n      function getIteratorFn(maybeIterable) {\n        if (maybeIterable === null || typeof maybeIterable !== 'object') {\n          return null;\n        }\n        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n        if (typeof maybeIterator === 'function') {\n          return maybeIterator;\n        }\n        return null;\n      }\n      function getWrappedName(outerType, innerType, wrapperName) {\n        var displayName = outerType.displayName;\n        if (displayName) {\n          return displayName;\n        }\n        var functionName = innerType.displayName || innerType.name || '';\n        return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n      } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n      function getContextName(type) {\n        return type.displayName || 'Context';\n      } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n      function getComponentNameFromType(type) {\n        if (type == null) {\n          // Host root, text node or just invalid type.\n          return null;\n        }\n        {\n          if (typeof type.tag === 'number') {\n            error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n          }\n        }\n        if (typeof type === 'function') {\n          return type.displayName || type.name || null;\n        }\n        if (typeof type === 'string') {\n          return type;\n        }\n        switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return 'Fragment';\n          case REACT_PORTAL_TYPE:\n            return 'Portal';\n          case REACT_PROFILER_TYPE:\n            return 'Profiler';\n          case REACT_STRICT_MODE_TYPE:\n            return 'StrictMode';\n          case REACT_SUSPENSE_TYPE:\n            return 'Suspense';\n          case REACT_SUSPENSE_LIST_TYPE:\n            return 'SuspenseList';\n        }\n        if (typeof type === 'object') {\n          switch (type.$$typeof) {\n            case REACT_CONTEXT_TYPE:\n              var context = type;\n              return getContextName(context) + '.Consumer';\n            case REACT_PROVIDER_TYPE:\n              var provider = type;\n              return getContextName(provider._context) + '.Provider';\n            case REACT_FORWARD_REF_TYPE:\n              return getWrappedName(type, type.render, 'ForwardRef');\n            case REACT_MEMO_TYPE:\n              var outerName = type.displayName || null;\n              if (outerName !== null) {\n                return outerName;\n              }\n              return getComponentNameFromType(type.type) || 'Memo';\n            case REACT_LAZY_TYPE:\n              {\n                var lazyComponent = type;\n                var payload = lazyComponent._payload;\n                var init = lazyComponent._init;\n                try {\n                  return getComponentNameFromType(init(payload));\n                } catch (x) {\n                  return null;\n                }\n              }\n\n            // eslint-disable-next-line no-fallthrough\n          }\n        }\n        return null;\n      }\n      function getWrappedName$1(outerType, innerType, wrapperName) {\n        var functionName = innerType.displayName || innerType.name || '';\n        return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n      } // Keep in sync with shared/getComponentNameFromType\n\n      function getContextName$1(type) {\n        return type.displayName || 'Context';\n      }\n      function getComponentNameFromFiber(fiber) {\n        var tag = fiber.tag,\n          type = fiber.type;\n        switch (tag) {\n          case CacheComponent:\n            return 'Cache';\n          case ContextConsumer:\n            var context = type;\n            return getContextName$1(context) + '.Consumer';\n          case ContextProvider:\n            var provider = type;\n            return getContextName$1(provider._context) + '.Provider';\n          case DehydratedFragment:\n            return 'DehydratedFragment';\n          case ForwardRef:\n            return getWrappedName$1(type, type.render, 'ForwardRef');\n          case Fragment:\n            return 'Fragment';\n          case HostComponent:\n            // Host component type is the display name (e.g. \"div\", \"View\")\n            return type;\n          case HostPortal:\n            return 'Portal';\n          case HostRoot:\n            return 'Root';\n          case HostText:\n            return 'Text';\n          case LazyComponent:\n            // Name comes from the type in this case; we don't have a tag.\n            return getComponentNameFromType(type);\n          case Mode:\n            if (type === REACT_STRICT_MODE_TYPE) {\n              // Don't be less specific than shared/getComponentNameFromType\n              return 'StrictMode';\n            }\n            return 'Mode';\n          case OffscreenComponent:\n            return 'Offscreen';\n          case Profiler:\n            return 'Profiler';\n          case ScopeComponent:\n            return 'Scope';\n          case SuspenseComponent:\n            return 'Suspense';\n          case SuspenseListComponent:\n            return 'SuspenseList';\n          case TracingMarkerComponent:\n            return 'TracingMarker';\n          // The display name for this tags come from the user-provided type:\n\n          case ClassComponent:\n          case FunctionComponent:\n          case IncompleteClassComponent:\n          case IndeterminateComponent:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            if (typeof type === 'function') {\n              return type.displayName || type.name || null;\n            }\n            if (typeof type === 'string') {\n              return type;\n            }\n            break;\n        }\n        return null;\n      }\n\n      // Don't change these two values. They're used by React Dev Tools.\n      var NoFlags = /*                      */\n      0;\n      var PerformedWork = /*                */\n      1; // You can change the rest (and add more).\n\n      var Placement = /*                    */\n      2;\n      var Update = /*                       */\n      4;\n      var ChildDeletion = /*                */\n      16;\n      var ContentReset = /*                 */\n      32;\n      var Callback = /*                     */\n      64;\n      var DidCapture = /*                   */\n      128;\n      var ForceClientRender = /*            */\n      256;\n      var Ref = /*                          */\n      512;\n      var Snapshot = /*                     */\n      1024;\n      var Passive = /*                      */\n      2048;\n      var Hydrating = /*                    */\n      4096;\n      var Visibility = /*                   */\n      8192;\n      var StoreConsistency = /*             */\n      16384;\n      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n      var HostEffectMask = /*               */\n      32767; // These are not really side effects, but we still reuse this field.\n\n      var Incomplete = /*                   */\n      32768;\n      var ShouldCapture = /*                */\n      65536;\n      var ForceUpdateForLegacySuspense = /* */\n      131072;\n      var Forked = /*                       */\n      1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n      // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n      // This enables us to defer more work in the unmount case,\n      // since we can defer traversing the tree during layout to look for Passive effects,\n      // and instead rely on the static flag as a signal that there may be cleanup work.\n\n      var RefStatic = /*                    */\n      2097152;\n      var LayoutStatic = /*                 */\n      4194304;\n      var PassiveStatic = /*                */\n      8388608; // These flags allow us to traverse to fibers that have effects on mount\n      // without traversing the entire tree after every commit for\n      // double invoking\n\n      var MountLayoutDev = /*               */\n      16777216;\n      var MountPassiveDev = /*              */\n      33554432; // Groups of flags that are used in the commit phase to skip over trees that\n      // don't contain effects, by checking subtreeFlags.\n\n      var BeforeMutationMask =\n      // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n      // flag logic (see #20043)\n      Update | Snapshot | 0;\n      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n      var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n      var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n      // This allows certain concepts to persist without recalculating them,\n      // e.g. whether a subtree contains passive effects or portals.\n\n      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n      function getNearestMountedFiber(fiber) {\n        var node = fiber;\n        var nearestMounted = fiber;\n        if (!fiber.alternate) {\n          // If there is no alternate, this might be a new tree that isn't inserted\n          // yet. If it is, then it will have a pending insertion effect on it.\n          var nextNode = node;\n          do {\n            node = nextNode;\n            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n              // This is an insertion or in-progress hydration. The nearest possible\n              // mounted fiber is the parent but we need to continue to figure out\n              // if that one is still mounted.\n              nearestMounted = node.return;\n            }\n            nextNode = node.return;\n          } while (nextNode);\n        } else {\n          while (node.return) {\n            node = node.return;\n          }\n        }\n        if (node.tag === HostRoot) {\n          // TODO: Check if this was a nested HostRoot when used with\n          // renderContainerIntoSubtree.\n          return nearestMounted;\n        } // If we didn't hit the root, that means that we're in an disconnected tree\n        // that has been unmounted.\n\n        return null;\n      }\n      function isFiberMounted(fiber) {\n        return getNearestMountedFiber(fiber) === fiber;\n      }\n      function isMounted(component) {\n        {\n          var owner = ReactCurrentOwner.current;\n          if (owner !== null && owner.tag === ClassComponent) {\n            var ownerFiber = owner;\n            var instance = ownerFiber.stateNode;\n            if (!instance._warnedAboutRefsInRender) {\n              error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n            }\n            instance._warnedAboutRefsInRender = true;\n          }\n        }\n        var fiber = get(component);\n        if (!fiber) {\n          return false;\n        }\n        return getNearestMountedFiber(fiber) === fiber;\n      }\n      function assertIsMounted(fiber) {\n        if (getNearestMountedFiber(fiber) !== fiber) {\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n      }\n      function findCurrentFiberUsingSlowPath(fiber) {\n        var alternate = fiber.alternate;\n        if (!alternate) {\n          // If there is no alternate, then we only need to check if it is mounted.\n          var nearestMounted = getNearestMountedFiber(fiber);\n          if (nearestMounted === null) {\n            throw new Error('Unable to find node on an unmounted component.');\n          }\n          if (nearestMounted !== fiber) {\n            return null;\n          }\n          return fiber;\n        } // If we have two possible branches, we'll walk backwards up to the root\n        // to see what path the root points to. On the way we may hit one of the\n        // special cases and we'll deal with them.\n\n        var a = fiber;\n        var b = alternate;\n        while (true) {\n          var parentA = a.return;\n          if (parentA === null) {\n            // We're at the root.\n            break;\n          }\n          var parentB = parentA.alternate;\n          if (parentB === null) {\n            // There is no alternate. This is an unusual case. Currently, it only\n            // happens when a Suspense component is hidden. An extra fragment fiber\n            // is inserted in between the Suspense fiber and its children. Skip\n            // over this extra fragment fiber and proceed to the next parent.\n            var nextParent = parentA.return;\n            if (nextParent !== null) {\n              a = b = nextParent;\n              continue;\n            } // If there's no parent, we're at the root.\n\n            break;\n          } // If both copies of the parent fiber point to the same child, we can\n          // assume that the child is current. This happens when we bailout on low\n          // priority: the bailed out fiber's child reuses the current child.\n\n          if (parentA.child === parentB.child) {\n            var child = parentA.child;\n            while (child) {\n              if (child === a) {\n                // We've determined that A is the current branch.\n                assertIsMounted(parentA);\n                return fiber;\n              }\n              if (child === b) {\n                // We've determined that B is the current branch.\n                assertIsMounted(parentA);\n                return alternate;\n              }\n              child = child.sibling;\n            } // We should never have an alternate for any mounting node. So the only\n            // way this could possibly happen is if this was unmounted, if at all.\n\n            throw new Error('Unable to find node on an unmounted component.');\n          }\n          if (a.return !== b.return) {\n            // The return pointer of A and the return pointer of B point to different\n            // fibers. We assume that return pointers never criss-cross, so A must\n            // belong to the child set of A.return, and B must belong to the child\n            // set of B.return.\n            a = parentA;\n            b = parentB;\n          } else {\n            // The return pointers point to the same fiber. We'll have to use the\n            // default, slow path: scan the child sets of each parent alternate to see\n            // which child belongs to which set.\n            //\n            // Search parent A's child set\n            var didFindChild = false;\n            var _child = parentA.child;\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentA;\n                b = parentB;\n                break;\n              }\n              if (_child === b) {\n                didFindChild = true;\n                b = parentA;\n                a = parentB;\n                break;\n              }\n              _child = _child.sibling;\n            }\n            if (!didFindChild) {\n              // Search parent B's child set\n              _child = parentB.child;\n              while (_child) {\n                if (_child === a) {\n                  didFindChild = true;\n                  a = parentB;\n                  b = parentA;\n                  break;\n                }\n                if (_child === b) {\n                  didFindChild = true;\n                  b = parentB;\n                  a = parentA;\n                  break;\n                }\n                _child = _child.sibling;\n              }\n              if (!didFindChild) {\n                throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n              }\n            }\n          }\n          if (a.alternate !== b) {\n            throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n          }\n        } // If the root is not a host container, we're in a disconnected tree. I.e.\n        // unmounted.\n\n        if (a.tag !== HostRoot) {\n          throw new Error('Unable to find node on an unmounted component.');\n        }\n        if (a.stateNode.current === a) {\n          // We've determined that A is the current branch.\n          return fiber;\n        } // Otherwise B has to be current branch.\n\n        return alternate;\n      }\n      function findCurrentHostFiber(parent) {\n        var currentParent = findCurrentFiberUsingSlowPath(parent);\n        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n      }\n      function findCurrentHostFiberImpl(node) {\n        // Next we'll drill down this component to find the first HostComponent/Text.\n        if (node.tag === HostComponent || node.tag === HostText) {\n          return node;\n        }\n        var child = node.child;\n        while (child !== null) {\n          var match = findCurrentHostFiberImpl(child);\n          if (match !== null) {\n            return match;\n          }\n          child = child.sibling;\n        }\n        return null;\n      }\n      function findCurrentHostFiberWithNoPortals(parent) {\n        var currentParent = findCurrentFiberUsingSlowPath(parent);\n        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n      }\n      function findCurrentHostFiberWithNoPortalsImpl(node) {\n        // Next we'll drill down this component to find the first HostComponent/Text.\n        if (node.tag === HostComponent || node.tag === HostText) {\n          return node;\n        }\n        var child = node.child;\n        while (child !== null) {\n          if (child.tag !== HostPortal) {\n            var match = findCurrentHostFiberWithNoPortalsImpl(child);\n            if (match !== null) {\n              return match;\n            }\n          }\n          child = child.sibling;\n        }\n        return null;\n      }\n      var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n      function isArray(a) {\n        return isArrayImpl(a);\n      }\n\n      // This is a host config that's used for the `react-reconciler` package on npm.\n      // It is only used by third-party renderers.\n      //\n      // Its API lets you pass the host config as an argument.\n      // However, inside the `react-reconciler` we treat host config as a module.\n      // This file is a shim between two worlds.\n      //\n      // It works because the `react-reconciler` bundle is wrapped in something like:\n      //\n      // module.exports = function ($$$config) {\n      //   /* reconciler code */\n      // }\n      //\n      // So `$$$config` looks like a global variable, but it's\n      // really an argument to a top-level wrapping function.\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      // eslint-disable-line no-undef\n      var getPublicInstance = $$$hostConfig.getPublicInstance;\n      var getRootHostContext = $$$hostConfig.getRootHostContext;\n      var getChildHostContext = $$$hostConfig.getChildHostContext;\n      var prepareForCommit = $$$hostConfig.prepareForCommit;\n      var resetAfterCommit = $$$hostConfig.resetAfterCommit;\n      var createInstance = $$$hostConfig.createInstance;\n      var appendInitialChild = $$$hostConfig.appendInitialChild;\n      var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\n      var prepareUpdate = $$$hostConfig.prepareUpdate;\n      var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\n      var createTextInstance = $$$hostConfig.createTextInstance;\n      var scheduleTimeout = $$$hostConfig.scheduleTimeout;\n      var cancelTimeout = $$$hostConfig.cancelTimeout;\n      var noTimeout = $$$hostConfig.noTimeout;\n      var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\n      var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\n      var supportsMutation = $$$hostConfig.supportsMutation;\n      var supportsPersistence = $$$hostConfig.supportsPersistence;\n      var supportsHydration = $$$hostConfig.supportsHydration;\n      var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\n      $$$hostConfig.beforeActiveInstanceBlur;\n      $$$hostConfig.afterActiveInstanceBlur;\n      var preparePortalMount = $$$hostConfig.preparePortalMount;\n      $$$hostConfig.prepareScopeUpdate;\n      $$$hostConfig.getInstanceFromScope;\n      var getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\n      var detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n      //      Microtasks\n      //     (optional)\n      // -------------------\n\n      var supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\n      var scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n      //      Test selectors\n      //     (optional)\n      // -------------------\n\n      var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\n      var findFiberRoot = $$$hostConfig.findFiberRoot;\n      var getBoundingRect = $$$hostConfig.getBoundingRect;\n      var getTextContent = $$$hostConfig.getTextContent;\n      var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\n      var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\n      var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\n      var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n      //      Mutation\n      //     (optional)\n      // -------------------\n\n      var appendChild = $$$hostConfig.appendChild;\n      var appendChildToContainer = $$$hostConfig.appendChildToContainer;\n      var commitTextUpdate = $$$hostConfig.commitTextUpdate;\n      var commitMount = $$$hostConfig.commitMount;\n      var commitUpdate = $$$hostConfig.commitUpdate;\n      var insertBefore = $$$hostConfig.insertBefore;\n      var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\n      var removeChild = $$$hostConfig.removeChild;\n      var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\n      var resetTextContent = $$$hostConfig.resetTextContent;\n      var hideInstance = $$$hostConfig.hideInstance;\n      var hideTextInstance = $$$hostConfig.hideTextInstance;\n      var unhideInstance = $$$hostConfig.unhideInstance;\n      var unhideTextInstance = $$$hostConfig.unhideTextInstance;\n      var clearContainer = $$$hostConfig.clearContainer; // -------------------\n      //     Persistence\n      //     (optional)\n      // -------------------\n\n      var cloneInstance = $$$hostConfig.cloneInstance;\n      var createContainerChildSet = $$$hostConfig.createContainerChildSet;\n      var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\n      var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\n      var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\n      var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\n      var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n      //     Hydration\n      //     (optional)\n      // -------------------\n\n      var canHydrateInstance = $$$hostConfig.canHydrateInstance;\n      var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\n      var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\n      var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\n      var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\n      var getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\n      var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\n      var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\n      var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\n      var getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\n      var getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\n      var hydrateInstance = $$$hostConfig.hydrateInstance;\n      var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\n      var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\n      var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\n      var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\n      var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\n      var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\n      var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\n      var shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\n      var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\n      var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\n      var didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\n      var didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\n      var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\n      var didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\n      var didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\n      var didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\n      var didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\n      var didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\n      var didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\n      var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\n      var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\n      var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\n      var errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n\n      // Helpers to patch console.logs to avoid logging during side-effect free\n      // replaying on render function. This currently only patches the object\n      // lazily which won't cover if the log function was extracted eagerly.\n      // We could also eagerly patch the method.\n      var disabledDepth = 0;\n      var prevLog;\n      var prevInfo;\n      var prevWarn;\n      var prevError;\n      var prevGroup;\n      var prevGroupCollapsed;\n      var prevGroupEnd;\n      function disabledLog() {}\n      disabledLog.__reactDisabledLog = true;\n      function disableLogs() {\n        {\n          if (disabledDepth === 0) {\n            /* eslint-disable react-internal/no-production-logging */\n            prevLog = console.log;\n            prevInfo = console.info;\n            prevWarn = console.warn;\n            prevError = console.error;\n            prevGroup = console.group;\n            prevGroupCollapsed = console.groupCollapsed;\n            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n            var props = {\n              configurable: true,\n              enumerable: true,\n              value: disabledLog,\n              writable: true\n            }; // $FlowFixMe Flow thinks console is immutable.\n\n            Object.defineProperties(console, {\n              info: props,\n              log: props,\n              warn: props,\n              error: props,\n              group: props,\n              groupCollapsed: props,\n              groupEnd: props\n            });\n            /* eslint-enable react-internal/no-production-logging */\n          }\n          disabledDepth++;\n        }\n      }\n      function reenableLogs() {\n        {\n          disabledDepth--;\n          if (disabledDepth === 0) {\n            /* eslint-disable react-internal/no-production-logging */\n            var props = {\n              configurable: true,\n              enumerable: true,\n              writable: true\n            }; // $FlowFixMe Flow thinks console is immutable.\n\n            Object.defineProperties(console, {\n              log: assign({}, props, {\n                value: prevLog\n              }),\n              info: assign({}, props, {\n                value: prevInfo\n              }),\n              warn: assign({}, props, {\n                value: prevWarn\n              }),\n              error: assign({}, props, {\n                value: prevError\n              }),\n              group: assign({}, props, {\n                value: prevGroup\n              }),\n              groupCollapsed: assign({}, props, {\n                value: prevGroupCollapsed\n              }),\n              groupEnd: assign({}, props, {\n                value: prevGroupEnd\n              })\n            });\n            /* eslint-enable react-internal/no-production-logging */\n          }\n          if (disabledDepth < 0) {\n            error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n          }\n        }\n      }\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      var prefix;\n      function describeBuiltInComponentFrame(name, source, ownerFn) {\n        {\n          if (prefix === undefined) {\n            // Extract the VM specific prefix used by each line.\n            try {\n              throw Error();\n            } catch (x) {\n              var match = x.stack.trim().match(/\\n( *(at )?)/);\n              prefix = match && match[1] || '';\n            }\n          } // We use the prefix to ensure our stacks line up with native stack frames.\n\n          return '\\n' + prefix + name;\n        }\n      }\n      var reentry = false;\n      var componentFrameCache;\n      {\n        var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n        componentFrameCache = new PossiblyWeakMap();\n      }\n      function describeNativeComponentFrame(fn, construct) {\n        // If something asked for a stack inside a fake render, it should get ignored.\n        if (!fn || reentry) {\n          return '';\n        }\n        {\n          var frame = componentFrameCache.get(fn);\n          if (frame !== undefined) {\n            return frame;\n          }\n        }\n        var control;\n        reentry = true;\n        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n        Error.prepareStackTrace = undefined;\n        var previousDispatcher;\n        {\n          previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n          // for warnings.\n\n          ReactCurrentDispatcher.current = null;\n          disableLogs();\n        }\n        try {\n          // This should throw.\n          if (construct) {\n            // Something should be setting the props in the constructor.\n            var Fake = function () {\n              throw Error();\n            }; // $FlowFixMe\n\n            Object.defineProperty(Fake.prototype, 'props', {\n              set: function () {\n                // We use a throwing setter instead of frozen or non-writable props\n                // because that won't throw in a non-strict mode function.\n                throw Error();\n              }\n            });\n            if (typeof Reflect === 'object' && Reflect.construct) {\n              // We construct a different control for this case to include any extra\n              // frames added by the construct call.\n              try {\n                Reflect.construct(Fake, []);\n              } catch (x) {\n                control = x;\n              }\n              Reflect.construct(fn, [], Fake);\n            } else {\n              try {\n                Fake.call();\n              } catch (x) {\n                control = x;\n              }\n              fn.call(Fake.prototype);\n            }\n          } else {\n            try {\n              throw Error();\n            } catch (x) {\n              control = x;\n            }\n            fn();\n          }\n        } catch (sample) {\n          // This is inlined manually because closure doesn't do it for us.\n          if (sample && control && typeof sample.stack === 'string') {\n            // This extracts the first frame from the sample that isn't also in the control.\n            // Skipping one frame that we assume is the frame that calls the two.\n            var sampleLines = sample.stack.split('\\n');\n            var controlLines = control.stack.split('\\n');\n            var s = sampleLines.length - 1;\n            var c = controlLines.length - 1;\n            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n              // We expect at least one stack frame to be shared.\n              // Typically this will be the root most one. However, stack frames may be\n              // cut off due to maximum stack limits. In this case, one maybe cut off\n              // earlier than the other. We assume that the sample is longer or the same\n              // and there for cut off earlier. So we should find the root most frame in\n              // the sample somewhere in the control.\n              c--;\n            }\n            for (; s >= 1 && c >= 0; s--, c--) {\n              // Next we find the first one that isn't the same which should be the\n              // frame that called our sample function and the control.\n              if (sampleLines[s] !== controlLines[c]) {\n                // In V8, the first line is describing the message but other VMs don't.\n                // If we're about to return the first line, and the control is also on the same\n                // line, that's a pretty good indicator that our sample threw at same line as\n                // the control. I.e. before we entered the sample frame. So we ignore this result.\n                // This can happen if you passed a class to function component, or non-function.\n                if (s !== 1 || c !== 1) {\n                  do {\n                    s--;\n                    c--; // We may still have similar intermediate frames from the construct call.\n                    // The next one that isn't the same should be our match though.\n\n                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                      // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                      var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                      // but we have a user-provided \"displayName\"\n                      // splice it in to make the stack more readable.\n\n                      if (fn.displayName && _frame.includes('<anonymous>')) {\n                        _frame = _frame.replace('<anonymous>', fn.displayName);\n                      }\n                      {\n                        if (typeof fn === 'function') {\n                          componentFrameCache.set(fn, _frame);\n                        }\n                      } // Return the line we found.\n\n                      return _frame;\n                    }\n                  } while (s >= 1 && c >= 0);\n                }\n                break;\n              }\n            }\n          }\n        } finally {\n          reentry = false;\n          {\n            ReactCurrentDispatcher.current = previousDispatcher;\n            reenableLogs();\n          }\n          Error.prepareStackTrace = previousPrepareStackTrace;\n        } // Fallback to just using the name if we couldn't make it throw.\n\n        var name = fn ? fn.displayName || fn.name : '';\n        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n        {\n          if (typeof fn === 'function') {\n            componentFrameCache.set(fn, syntheticFrame);\n          }\n        }\n        return syntheticFrame;\n      }\n      function describeClassComponentFrame(ctor, source, ownerFn) {\n        {\n          return describeNativeComponentFrame(ctor, true);\n        }\n      }\n      function describeFunctionComponentFrame(fn, source, ownerFn) {\n        {\n          return describeNativeComponentFrame(fn, false);\n        }\n      }\n      function shouldConstruct(Component) {\n        var prototype = Component.prototype;\n        return !!(prototype && prototype.isReactComponent);\n      }\n      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n        if (type == null) {\n          return '';\n        }\n        if (typeof type === 'function') {\n          {\n            return describeNativeComponentFrame(type, shouldConstruct(type));\n          }\n        }\n        if (typeof type === 'string') {\n          return describeBuiltInComponentFrame(type);\n        }\n        switch (type) {\n          case REACT_SUSPENSE_TYPE:\n            return describeBuiltInComponentFrame('Suspense');\n          case REACT_SUSPENSE_LIST_TYPE:\n            return describeBuiltInComponentFrame('SuspenseList');\n        }\n        if (typeof type === 'object') {\n          switch (type.$$typeof) {\n            case REACT_FORWARD_REF_TYPE:\n              return describeFunctionComponentFrame(type.render);\n            case REACT_MEMO_TYPE:\n              // Memo may contain any component type so we recursively resolve it.\n              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n            case REACT_LAZY_TYPE:\n              {\n                var lazyComponent = type;\n                var payload = lazyComponent._payload;\n                var init = lazyComponent._init;\n                try {\n                  // Lazy may contain any component type so we recursively resolve it.\n                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                } catch (x) {}\n              }\n          }\n        }\n        return '';\n      }\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var loggedTypeFailures = {};\n      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n      function setCurrentlyValidatingElement(element) {\n        {\n          if (element) {\n            var owner = element._owner;\n            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n            ReactDebugCurrentFrame.setExtraStackFrame(stack);\n          } else {\n            ReactDebugCurrentFrame.setExtraStackFrame(null);\n          }\n        }\n      }\n      function checkPropTypes(typeSpecs, values, location, componentName, element) {\n        {\n          // $FlowFixMe This is okay but Flow doesn't know it.\n          var has = Function.call.bind(hasOwnProperty);\n          for (var typeSpecName in typeSpecs) {\n            if (has(typeSpecs, typeSpecName)) {\n              var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n              // fail the render phase where it didn't fail before. So we log it.\n              // After these have been cleaned up, we'll let them throw.\n\n              try {\n                // This is intentionally an invariant that gets caught. It's the same\n                // behavior as without this statement except with a better message.\n                if (typeof typeSpecs[typeSpecName] !== 'function') {\n                  // eslint-disable-next-line react-internal/prod-error-codes\n                  var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n                  err.name = 'Invariant Violation';\n                  throw err;\n                }\n                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n              } catch (ex) {\n                error$1 = ex;\n              }\n              if (error$1 && !(error$1 instanceof Error)) {\n                setCurrentlyValidatingElement(element);\n                error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n                setCurrentlyValidatingElement(null);\n              }\n              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                // Only monitor this failure once because there tends to be a lot of the\n                // same error.\n                loggedTypeFailures[error$1.message] = true;\n                setCurrentlyValidatingElement(element);\n                error('Failed %s type: %s', location, error$1.message);\n                setCurrentlyValidatingElement(null);\n              }\n            }\n          }\n        }\n      }\n      var valueStack = [];\n      var fiberStack;\n      {\n        fiberStack = [];\n      }\n      var index = -1;\n      function createCursor(defaultValue) {\n        return {\n          current: defaultValue\n        };\n      }\n      function pop(cursor, fiber) {\n        if (index < 0) {\n          {\n            error('Unexpected pop.');\n          }\n          return;\n        }\n        {\n          if (fiber !== fiberStack[index]) {\n            error('Unexpected Fiber popped.');\n          }\n        }\n        cursor.current = valueStack[index];\n        valueStack[index] = null;\n        {\n          fiberStack[index] = null;\n        }\n        index--;\n      }\n      function push(cursor, value, fiber) {\n        index++;\n        valueStack[index] = cursor.current;\n        {\n          fiberStack[index] = fiber;\n        }\n        cursor.current = value;\n      }\n      var warnedAboutMissingGetChildContext;\n      {\n        warnedAboutMissingGetChildContext = {};\n      }\n      var emptyContextObject = {};\n      {\n        Object.freeze(emptyContextObject);\n      } // A cursor to the current merged context object on the stack.\n\n      var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n      var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n      // We use this to get access to the parent context after we have already\n      // pushed the next context provider, and now need to merge their contexts.\n\n      var previousContext = emptyContextObject;\n      function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n        {\n          if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n            // If the fiber is a context provider itself, when we read its context\n            // we may have already pushed its own child context on the stack. A context\n            // provider should not \"see\" its own child context. Therefore we read the\n            // previous (parent) context instead for a context provider.\n            return previousContext;\n          }\n          return contextStackCursor.current;\n        }\n      }\n      function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n        {\n          var instance = workInProgress.stateNode;\n          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n        }\n      }\n      function getMaskedContext(workInProgress, unmaskedContext) {\n        {\n          var type = workInProgress.type;\n          var contextTypes = type.contextTypes;\n          if (!contextTypes) {\n            return emptyContextObject;\n          } // Avoid recreating masked context unless unmasked context has changed.\n          // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n          // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n          var instance = workInProgress.stateNode;\n          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n            return instance.__reactInternalMemoizedMaskedChildContext;\n          }\n          var context = {};\n          for (var key in contextTypes) {\n            context[key] = unmaskedContext[key];\n          }\n          {\n            var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n            checkPropTypes(contextTypes, context, 'context', name);\n          } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n          // Context is created before the class component is instantiated so check for instance.\n\n          if (instance) {\n            cacheContext(workInProgress, unmaskedContext, context);\n          }\n          return context;\n        }\n      }\n      function hasContextChanged() {\n        {\n          return didPerformWorkStackCursor.current;\n        }\n      }\n      function isContextProvider(type) {\n        {\n          var childContextTypes = type.childContextTypes;\n          return childContextTypes !== null && childContextTypes !== undefined;\n        }\n      }\n      function popContext(fiber) {\n        {\n          pop(didPerformWorkStackCursor, fiber);\n          pop(contextStackCursor, fiber);\n        }\n      }\n      function popTopLevelContextObject(fiber) {\n        {\n          pop(didPerformWorkStackCursor, fiber);\n          pop(contextStackCursor, fiber);\n        }\n      }\n      function pushTopLevelContextObject(fiber, context, didChange) {\n        {\n          if (contextStackCursor.current !== emptyContextObject) {\n            throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          }\n          push(contextStackCursor, context, fiber);\n          push(didPerformWorkStackCursor, didChange, fiber);\n        }\n      }\n      function processChildContext(fiber, type, parentContext) {\n        {\n          var instance = fiber.stateNode;\n          var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n          // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n          if (typeof instance.getChildContext !== 'function') {\n            {\n              var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n              if (!warnedAboutMissingGetChildContext[componentName]) {\n                warnedAboutMissingGetChildContext[componentName] = true;\n                error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n              }\n            }\n            return parentContext;\n          }\n          var childContext = instance.getChildContext();\n          for (var contextKey in childContext) {\n            if (!(contextKey in childContextTypes)) {\n              throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n            }\n          }\n          {\n            var name = getComponentNameFromFiber(fiber) || 'Unknown';\n            checkPropTypes(childContextTypes, childContext, 'child context', name);\n          }\n          return assign({}, parentContext, childContext);\n        }\n      }\n      function pushContextProvider(workInProgress) {\n        {\n          var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n          // If the instance does not exist yet, we will push null at first,\n          // and replace it on the stack later when invalidating the context.\n\n          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n          // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n          previousContext = contextStackCursor.current;\n          push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n          return true;\n        }\n      }\n      function invalidateContextProvider(workInProgress, type, didChange) {\n        {\n          var instance = workInProgress.stateNode;\n          if (!instance) {\n            throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          }\n          if (didChange) {\n            // Merge parent and own context.\n            // Skip this if we're not updating due to sCU.\n            // This avoids unnecessarily recomputing memoized values.\n            var mergedContext = processChildContext(workInProgress, type, previousContext);\n            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n            // It is important to unwind the context in the reverse order.\n\n            pop(didPerformWorkStackCursor, workInProgress);\n            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n            push(contextStackCursor, mergedContext, workInProgress);\n            push(didPerformWorkStackCursor, didChange, workInProgress);\n          } else {\n            pop(didPerformWorkStackCursor, workInProgress);\n            push(didPerformWorkStackCursor, didChange, workInProgress);\n          }\n        }\n      }\n      function findCurrentUnmaskedContext(fiber) {\n        {\n          // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n          // makes sense elsewhere\n          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n            throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          }\n          var node = fiber;\n          do {\n            switch (node.tag) {\n              case HostRoot:\n                return node.stateNode.context;\n              case ClassComponent:\n                {\n                  var Component = node.type;\n                  if (isContextProvider(Component)) {\n                    return node.stateNode.__reactInternalMemoizedMergedChildContext;\n                  }\n                  break;\n                }\n            }\n            node = node.return;\n          } while (node !== null);\n          throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n      }\n      var LegacyRoot = 0;\n      var ConcurrentRoot = 1;\n      var NoMode = /*                         */\n      0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n      var ConcurrentMode = /*                 */\n      1;\n      var ProfileMode = /*                    */\n      2;\n      var StrictLegacyMode = /*               */\n      8;\n      var StrictEffectsMode = /*              */\n      16;\n\n      // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n      // Based on:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n      var log = Math.log;\n      var LN2 = Math.LN2;\n      function clz32Fallback(x) {\n        var asUint = x >>> 0;\n        if (asUint === 0) {\n          return 32;\n        }\n        return 31 - (log(asUint) / LN2 | 0) | 0;\n      }\n\n      // If those values are changed that package should be rebuilt and redeployed.\n\n      var TotalLanes = 31;\n      var NoLanes = /*                        */\n      0;\n      var NoLane = /*                          */\n      0;\n      var SyncLane = /*                        */\n      1;\n      var InputContinuousHydrationLane = /*    */\n      2;\n      var InputContinuousLane = /*             */\n      4;\n      var DefaultHydrationLane = /*            */\n      8;\n      var DefaultLane = /*                     */\n      16;\n      var TransitionHydrationLane = /*                */\n      32;\n      var TransitionLanes = /*                       */\n      4194240;\n      var TransitionLane1 = /*                        */\n      64;\n      var TransitionLane2 = /*                        */\n      128;\n      var TransitionLane3 = /*                        */\n      256;\n      var TransitionLane4 = /*                        */\n      512;\n      var TransitionLane5 = /*                        */\n      1024;\n      var TransitionLane6 = /*                        */\n      2048;\n      var TransitionLane7 = /*                        */\n      4096;\n      var TransitionLane8 = /*                        */\n      8192;\n      var TransitionLane9 = /*                        */\n      16384;\n      var TransitionLane10 = /*                       */\n      32768;\n      var TransitionLane11 = /*                       */\n      65536;\n      var TransitionLane12 = /*                       */\n      131072;\n      var TransitionLane13 = /*                       */\n      262144;\n      var TransitionLane14 = /*                       */\n      524288;\n      var TransitionLane15 = /*                       */\n      1048576;\n      var TransitionLane16 = /*                       */\n      2097152;\n      var RetryLanes = /*                            */\n      130023424;\n      var RetryLane1 = /*                             */\n      4194304;\n      var RetryLane2 = /*                             */\n      8388608;\n      var RetryLane3 = /*                             */\n      16777216;\n      var RetryLane4 = /*                             */\n      33554432;\n      var RetryLane5 = /*                             */\n      67108864;\n      var SomeRetryLane = RetryLane1;\n      var SelectiveHydrationLane = /*          */\n      134217728;\n      var NonIdleLanes = /*                          */\n      268435455;\n      var IdleHydrationLane = /*               */\n      268435456;\n      var IdleLane = /*                        */\n      536870912;\n      var OffscreenLane = /*                   */\n      1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n      // It should be kept in sync with the Lanes values above.\n\n      function getLabelForLane(lane) {\n        {\n          if (lane & SyncLane) {\n            return 'Sync';\n          }\n          if (lane & InputContinuousHydrationLane) {\n            return 'InputContinuousHydration';\n          }\n          if (lane & InputContinuousLane) {\n            return 'InputContinuous';\n          }\n          if (lane & DefaultHydrationLane) {\n            return 'DefaultHydration';\n          }\n          if (lane & DefaultLane) {\n            return 'Default';\n          }\n          if (lane & TransitionHydrationLane) {\n            return 'TransitionHydration';\n          }\n          if (lane & TransitionLanes) {\n            return 'Transition';\n          }\n          if (lane & RetryLanes) {\n            return 'Retry';\n          }\n          if (lane & SelectiveHydrationLane) {\n            return 'SelectiveHydration';\n          }\n          if (lane & IdleHydrationLane) {\n            return 'IdleHydration';\n          }\n          if (lane & IdleLane) {\n            return 'Idle';\n          }\n          if (lane & OffscreenLane) {\n            return 'Offscreen';\n          }\n        }\n      }\n      var NoTimestamp = -1;\n      var nextTransitionLane = TransitionLane1;\n      var nextRetryLane = RetryLane1;\n      function getHighestPriorityLanes(lanes) {\n        switch (getHighestPriorityLane(lanes)) {\n          case SyncLane:\n            return SyncLane;\n          case InputContinuousHydrationLane:\n            return InputContinuousHydrationLane;\n          case InputContinuousLane:\n            return InputContinuousLane;\n          case DefaultHydrationLane:\n            return DefaultHydrationLane;\n          case DefaultLane:\n            return DefaultLane;\n          case TransitionHydrationLane:\n            return TransitionHydrationLane;\n          case TransitionLane1:\n          case TransitionLane2:\n          case TransitionLane3:\n          case TransitionLane4:\n          case TransitionLane5:\n          case TransitionLane6:\n          case TransitionLane7:\n          case TransitionLane8:\n          case TransitionLane9:\n          case TransitionLane10:\n          case TransitionLane11:\n          case TransitionLane12:\n          case TransitionLane13:\n          case TransitionLane14:\n          case TransitionLane15:\n          case TransitionLane16:\n            return lanes & TransitionLanes;\n          case RetryLane1:\n          case RetryLane2:\n          case RetryLane3:\n          case RetryLane4:\n          case RetryLane5:\n            return lanes & RetryLanes;\n          case SelectiveHydrationLane:\n            return SelectiveHydrationLane;\n          case IdleHydrationLane:\n            return IdleHydrationLane;\n          case IdleLane:\n            return IdleLane;\n          case OffscreenLane:\n            return OffscreenLane;\n          default:\n            {\n              error('Should have found matching lanes. This is a bug in React.');\n            } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n            return lanes;\n        }\n      }\n      function getNextLanes(root, wipLanes) {\n        // Early bailout if there's no pending work left.\n        var pendingLanes = root.pendingLanes;\n        if (pendingLanes === NoLanes) {\n          return NoLanes;\n        }\n        var nextLanes = NoLanes;\n        var suspendedLanes = root.suspendedLanes;\n        var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n        // even if the work is suspended.\n\n        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n        if (nonIdlePendingLanes !== NoLanes) {\n          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n          if (nonIdleUnblockedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n          } else {\n            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n            if (nonIdlePingedLanes !== NoLanes) {\n              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n            }\n          }\n        } else {\n          // The only remaining work is Idle.\n          var unblockedLanes = pendingLanes & ~suspendedLanes;\n          if (unblockedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(unblockedLanes);\n          } else {\n            if (pingedLanes !== NoLanes) {\n              nextLanes = getHighestPriorityLanes(pingedLanes);\n            }\n          }\n        }\n        if (nextLanes === NoLanes) {\n          // This should only be reachable if we're suspended\n          // TODO: Consider warning in this path if a fallback timer is not scheduled.\n          return NoLanes;\n        } // If we're already in the middle of a render, switching lanes will interrupt\n        // it and we'll lose our progress. We should only do this if the new lanes are\n        // higher priority.\n\n        if (wipLanes !== NoLanes && wipLanes !== nextLanes &&\n        // If we already suspended with a delay, then interrupting is fine. Don't\n        // bother waiting until the root is complete.\n        (wipLanes & suspendedLanes) === NoLanes) {\n          var nextLane = getHighestPriorityLane(nextLanes);\n          var wipLane = getHighestPriorityLane(wipLanes);\n          if (\n          // Tests whether the next lane is equal or lower priority than the wip\n          // one. This works because the bits decrease in priority as you go left.\n          nextLane >= wipLane ||\n          // Default priority updates should not interrupt transition updates. The\n          // only difference between default updates and transition updates is that\n          // default updates do not support refresh transitions.\n          nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n            // Keep working on the existing in-progress tree. Do not interrupt.\n            return wipLanes;\n          }\n        }\n        if ((nextLanes & InputContinuousLane) !== NoLanes) {\n          // When updates are sync by default, we entangle continuous priority updates\n          // and default updates, so they render in the same batch. The only reason\n          // they use separate lanes is because continuous updates should interrupt\n          // transitions, but default updates should not.\n          nextLanes |= pendingLanes & DefaultLane;\n        } // Check for entangled lanes and add them to the batch.\n        //\n        // A lane is said to be entangled with another when it's not allowed to render\n        // in a batch that does not also include the other lane. Typically we do this\n        // when multiple updates have the same source, and we only want to respond to\n        // the most recent event from that source.\n        //\n        // Note that we apply entanglements *after* checking for partial work above.\n        // This means that if a lane is entangled during an interleaved event while\n        // it's already rendering, we won't interrupt it. This is intentional, since\n        // entanglement is usually \"best effort\": we'll try our best to render the\n        // lanes in the same batch, but it's not worth throwing out partially\n        // completed work in order to do it.\n        // TODO: Reconsider this. The counter-argument is that the partial work\n        // represents an intermediate state, which we don't want to show to the user.\n        // And by spending extra time finishing it, we're increasing the amount of\n        // time it takes to show the final state, which is what they are actually\n        // waiting for.\n        //\n        // For those exceptions where entanglement is semantically important, like\n        // useMutableSource, we should ensure that there is no partial work at the\n        // time we apply the entanglement.\n\n        var entangledLanes = root.entangledLanes;\n        if (entangledLanes !== NoLanes) {\n          var entanglements = root.entanglements;\n          var lanes = nextLanes & entangledLanes;\n          while (lanes > 0) {\n            var index = pickArbitraryLaneIndex(lanes);\n            var lane = 1 << index;\n            nextLanes |= entanglements[index];\n            lanes &= ~lane;\n          }\n        }\n        return nextLanes;\n      }\n      function getMostRecentEventTime(root, lanes) {\n        var eventTimes = root.eventTimes;\n        var mostRecentEventTime = NoTimestamp;\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          var eventTime = eventTimes[index];\n          if (eventTime > mostRecentEventTime) {\n            mostRecentEventTime = eventTime;\n          }\n          lanes &= ~lane;\n        }\n        return mostRecentEventTime;\n      }\n      function computeExpirationTime(lane, currentTime) {\n        switch (lane) {\n          case SyncLane:\n          case InputContinuousHydrationLane:\n          case InputContinuousLane:\n            // User interactions should expire slightly more quickly.\n            //\n            // NOTE: This is set to the corresponding constant as in Scheduler.js.\n            // When we made it larger, a product metric in www regressed, suggesting\n            // there's a user interaction that's being starved by a series of\n            // synchronous updates. If that theory is correct, the proper solution is\n            // to fix the starvation. However, this scenario supports the idea that\n            // expiration times are an important safeguard when starvation\n            // does happen.\n            return currentTime + 250;\n          case DefaultHydrationLane:\n          case DefaultLane:\n          case TransitionHydrationLane:\n          case TransitionLane1:\n          case TransitionLane2:\n          case TransitionLane3:\n          case TransitionLane4:\n          case TransitionLane5:\n          case TransitionLane6:\n          case TransitionLane7:\n          case TransitionLane8:\n          case TransitionLane9:\n          case TransitionLane10:\n          case TransitionLane11:\n          case TransitionLane12:\n          case TransitionLane13:\n          case TransitionLane14:\n          case TransitionLane15:\n          case TransitionLane16:\n            return currentTime + 5000;\n          case RetryLane1:\n          case RetryLane2:\n          case RetryLane3:\n          case RetryLane4:\n          case RetryLane5:\n            // TODO: Retries should be allowed to expire if they are CPU bound for\n            // too long, but when I made this change it caused a spike in browser\n            // crashes. There must be some other underlying bug; not super urgent but\n            // ideally should figure out why and fix it. Unfortunately we don't have\n            // a repro for the crashes, only detected via production metrics.\n            return NoTimestamp;\n          case SelectiveHydrationLane:\n          case IdleHydrationLane:\n          case IdleLane:\n          case OffscreenLane:\n            // Anything idle priority or lower should never expire.\n            return NoTimestamp;\n          default:\n            {\n              error('Should have found matching lanes. This is a bug in React.');\n            }\n            return NoTimestamp;\n        }\n      }\n      function markStarvedLanesAsExpired(root, currentTime) {\n        // TODO: This gets called every time we yield. We can optimize by storing\n        // the earliest expiration time on the root. Then use that to quickly bail out\n        // of this function.\n        var pendingLanes = root.pendingLanes;\n        var suspendedLanes = root.suspendedLanes;\n        var pingedLanes = root.pingedLanes;\n        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n        // expiration time. If so, we'll assume the update is being starved and mark\n        // it as expired to force it to finish.\n\n        var lanes = pendingLanes;\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          var expirationTime = expirationTimes[index];\n          if (expirationTime === NoTimestamp) {\n            // Found a pending lane with no expiration time. If it's not suspended, or\n            // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n            // using the current time.\n            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n              // Assumes timestamps are monotonically increasing.\n              expirationTimes[index] = computeExpirationTime(lane, currentTime);\n            }\n          } else if (expirationTime <= currentTime) {\n            // This lane expired\n            root.expiredLanes |= lane;\n          }\n          lanes &= ~lane;\n        }\n      } // This returns the highest priority pending lanes regardless of whether they\n      // are suspended.\n\n      function getHighestPriorityPendingLanes(root) {\n        return getHighestPriorityLanes(root.pendingLanes);\n      }\n      function getLanesToRetrySynchronouslyOnError(root) {\n        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n        if (everythingButOffscreen !== NoLanes) {\n          return everythingButOffscreen;\n        }\n        if (everythingButOffscreen & OffscreenLane) {\n          return OffscreenLane;\n        }\n        return NoLanes;\n      }\n      function includesSyncLane(lanes) {\n        return (lanes & SyncLane) !== NoLanes;\n      }\n      function includesNonIdleWork(lanes) {\n        return (lanes & NonIdleLanes) !== NoLanes;\n      }\n      function includesOnlyRetries(lanes) {\n        return (lanes & RetryLanes) === lanes;\n      }\n      function includesOnlyNonUrgentLanes(lanes) {\n        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n        return (lanes & UrgentLanes) === NoLanes;\n      }\n      function includesOnlyTransitions(lanes) {\n        return (lanes & TransitionLanes) === lanes;\n      }\n      function includesBlockingLane(root, lanes) {\n        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n        return (lanes & SyncDefaultLanes) !== NoLanes;\n      }\n      function includesExpiredLane(root, lanes) {\n        // This is a separate check from includesBlockingLane because a lane can\n        // expire after a render has already started.\n        return (lanes & root.expiredLanes) !== NoLanes;\n      }\n      function isTransitionLane(lane) {\n        return (lane & TransitionLanes) !== NoLanes;\n      }\n      function claimNextTransitionLane() {\n        // Cycle through the lanes, assigning each new transition to the next lane.\n        // In most cases, this means every transition gets its own lane, until we\n        // run out of lanes and cycle back to the beginning.\n        var lane = nextTransitionLane;\n        nextTransitionLane <<= 1;\n        if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n          nextTransitionLane = TransitionLane1;\n        }\n        return lane;\n      }\n      function claimNextRetryLane() {\n        var lane = nextRetryLane;\n        nextRetryLane <<= 1;\n        if ((nextRetryLane & RetryLanes) === NoLanes) {\n          nextRetryLane = RetryLane1;\n        }\n        return lane;\n      }\n      function getHighestPriorityLane(lanes) {\n        return lanes & -lanes;\n      }\n      function pickArbitraryLane(lanes) {\n        // This wrapper function gets inlined. Only exists so to communicate that it\n        // doesn't matter which bit is selected; you can pick any bit without\n        // affecting the algorithms where its used. Here I'm using\n        // getHighestPriorityLane because it requires the fewest operations.\n        return getHighestPriorityLane(lanes);\n      }\n      function pickArbitraryLaneIndex(lanes) {\n        return 31 - clz32(lanes);\n      }\n      function laneToIndex(lane) {\n        return pickArbitraryLaneIndex(lane);\n      }\n      function includesSomeLane(a, b) {\n        return (a & b) !== NoLanes;\n      }\n      function isSubsetOfLanes(set, subset) {\n        return (set & subset) === subset;\n      }\n      function mergeLanes(a, b) {\n        return a | b;\n      }\n      function removeLanes(set, subset) {\n        return set & ~subset;\n      }\n      function intersectLanes(a, b) {\n        return a & b;\n      } // Seems redundant, but it changes the type from a single lane (used for\n      // updates) to a group of lanes (used for flushing work).\n\n      function laneToLanes(lane) {\n        return lane;\n      }\n      function higherPriorityLane(a, b) {\n        // This works because the bit ranges decrease in priority as you go left.\n        return a !== NoLane && a < b ? a : b;\n      }\n      function createLaneMap(initial) {\n        // Intentionally pushing one by one.\n        // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n        var laneMap = [];\n        for (var i = 0; i < TotalLanes; i++) {\n          laneMap.push(initial);\n        }\n        return laneMap;\n      }\n      function markRootUpdated(root, updateLane, eventTime) {\n        root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n        // could unblock them. Clear the suspended lanes so that we can try rendering\n        // them again.\n        //\n        // TODO: We really only need to unsuspend only lanes that are in the\n        // `subtreeLanes` of the updated fiber, or the update lanes of the return\n        // path. This would exclude suspended updates in an unrelated sibling tree,\n        // since there's no way for this update to unblock it.\n        //\n        // We don't do this if the incoming update is idle, because we never process\n        // idle updates until after all the regular updates have finished; there's no\n        // way it could unblock a transition.\n\n        if (updateLane !== IdleLane) {\n          root.suspendedLanes = NoLanes;\n          root.pingedLanes = NoLanes;\n        }\n        var eventTimes = root.eventTimes;\n        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n        // recent event, and we assume time is monotonically increasing.\n\n        eventTimes[index] = eventTime;\n      }\n      function markRootSuspended(root, suspendedLanes) {\n        root.suspendedLanes |= suspendedLanes;\n        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n        var expirationTimes = root.expirationTimes;\n        var lanes = suspendedLanes;\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          expirationTimes[index] = NoTimestamp;\n          lanes &= ~lane;\n        }\n      }\n      function markRootPinged(root, pingedLanes, eventTime) {\n        root.pingedLanes |= root.suspendedLanes & pingedLanes;\n      }\n      function markRootFinished(root, remainingLanes) {\n        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n        root.pendingLanes = remainingLanes; // Let's try everything again\n\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n        root.expiredLanes &= remainingLanes;\n        root.mutableReadLanes &= remainingLanes;\n        root.entangledLanes &= remainingLanes;\n        var entanglements = root.entanglements;\n        var eventTimes = root.eventTimes;\n        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n        var lanes = noLongerPendingLanes;\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          entanglements[index] = NoLanes;\n          eventTimes[index] = NoTimestamp;\n          expirationTimes[index] = NoTimestamp;\n          lanes &= ~lane;\n        }\n      }\n      function markRootEntangled(root, entangledLanes) {\n        // In addition to entangling each of the given lanes with each other, we also\n        // have to consider _transitive_ entanglements. For each lane that is already\n        // entangled with *any* of the given lanes, that lane is now transitively\n        // entangled with *all* the given lanes.\n        //\n        // Translated: If C is entangled with A, then entangling A with B also\n        // entangles C with B.\n        //\n        // If this is hard to grasp, it might help to intentionally break this\n        // function and look at the tests that fail in ReactTransition-test.js. Try\n        // commenting out one of the conditions below.\n        var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n        var entanglements = root.entanglements;\n        var lanes = rootEntangledLanes;\n        while (lanes) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          if (\n          // Is this one of the newly entangled lanes?\n          lane & entangledLanes |\n          // Is this lane transitively entangled with the newly entangled lanes?\n          entanglements[index] & entangledLanes) {\n            entanglements[index] |= entangledLanes;\n          }\n          lanes &= ~lane;\n        }\n      }\n      function getBumpedLaneForHydration(root, renderLanes) {\n        var renderLane = getHighestPriorityLane(renderLanes);\n        var lane;\n        switch (renderLane) {\n          case InputContinuousLane:\n            lane = InputContinuousHydrationLane;\n            break;\n          case DefaultLane:\n            lane = DefaultHydrationLane;\n            break;\n          case TransitionLane1:\n          case TransitionLane2:\n          case TransitionLane3:\n          case TransitionLane4:\n          case TransitionLane5:\n          case TransitionLane6:\n          case TransitionLane7:\n          case TransitionLane8:\n          case TransitionLane9:\n          case TransitionLane10:\n          case TransitionLane11:\n          case TransitionLane12:\n          case TransitionLane13:\n          case TransitionLane14:\n          case TransitionLane15:\n          case TransitionLane16:\n          case RetryLane1:\n          case RetryLane2:\n          case RetryLane3:\n          case RetryLane4:\n          case RetryLane5:\n            lane = TransitionHydrationLane;\n            break;\n          case IdleLane:\n            lane = IdleHydrationLane;\n            break;\n          default:\n            // Everything else is already either a hydration lane, or shouldn't\n            // be retried at a hydration lane.\n            lane = NoLane;\n            break;\n        } // Check if the lane we chose is suspended. If so, that indicates that we\n        // already attempted and failed to hydrate at that level. Also check if we're\n        // already rendering that lane, which is rare but could happen.\n\n        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n          // Give up trying to hydrate and fall back to client render.\n          return NoLane;\n        }\n        return lane;\n      }\n      function addFiberToLanesMap(root, fiber, lanes) {\n        if (!isDevToolsPresent) {\n          return;\n        }\n        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n        while (lanes > 0) {\n          var index = laneToIndex(lanes);\n          var lane = 1 << index;\n          var updaters = pendingUpdatersLaneMap[index];\n          updaters.add(fiber);\n          lanes &= ~lane;\n        }\n      }\n      function movePendingFibersToMemoized(root, lanes) {\n        if (!isDevToolsPresent) {\n          return;\n        }\n        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n        var memoizedUpdaters = root.memoizedUpdaters;\n        while (lanes > 0) {\n          var index = laneToIndex(lanes);\n          var lane = 1 << index;\n          var updaters = pendingUpdatersLaneMap[index];\n          if (updaters.size > 0) {\n            updaters.forEach(function (fiber) {\n              var alternate = fiber.alternate;\n              if (alternate === null || !memoizedUpdaters.has(alternate)) {\n                memoizedUpdaters.add(fiber);\n              }\n            });\n            updaters.clear();\n          }\n          lanes &= ~lane;\n        }\n      }\n      function getTransitionsForLanes(root, lanes) {\n        {\n          return null;\n        }\n      }\n      var DiscreteEventPriority = SyncLane;\n      var ContinuousEventPriority = InputContinuousLane;\n      var DefaultEventPriority = DefaultLane;\n      var IdleEventPriority = IdleLane;\n      var currentUpdatePriority = NoLane;\n      function getCurrentUpdatePriority() {\n        return currentUpdatePriority;\n      }\n      function setCurrentUpdatePriority(newPriority) {\n        currentUpdatePriority = newPriority;\n      }\n      function runWithPriority(priority, fn) {\n        var previousPriority = currentUpdatePriority;\n        try {\n          currentUpdatePriority = priority;\n          return fn();\n        } finally {\n          currentUpdatePriority = previousPriority;\n        }\n      }\n      function higherEventPriority(a, b) {\n        return a !== 0 && a < b ? a : b;\n      }\n      function lowerEventPriority(a, b) {\n        return a === 0 || a > b ? a : b;\n      }\n      function isHigherEventPriority(a, b) {\n        return a !== 0 && a < b;\n      }\n      function lanesToEventPriority(lanes) {\n        var lane = getHighestPriorityLane(lanes);\n        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n          return DiscreteEventPriority;\n        }\n        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n          return ContinuousEventPriority;\n        }\n        if (includesNonIdleWork(lane)) {\n          return DefaultEventPriority;\n        }\n        return IdleEventPriority;\n      }\n\n      // This module only exists as an ESM wrapper around the external CommonJS\n      var scheduleCallback = Scheduler.unstable_scheduleCallback;\n      var cancelCallback = Scheduler.unstable_cancelCallback;\n      var shouldYield = Scheduler.unstable_shouldYield;\n      var requestPaint = Scheduler.unstable_requestPaint;\n      var now = Scheduler.unstable_now;\n      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n      var NormalPriority = Scheduler.unstable_NormalPriority;\n      var IdlePriority = Scheduler.unstable_IdlePriority;\n      // this doesn't actually exist on the scheduler, but it *does*\n      // on scheduler/unstable_mock, which we'll need for internal testing\n      var unstable_yieldValue = Scheduler.unstable_yieldValue;\n      var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n      var rendererID = null;\n      var injectedHook = null;\n      var injectedProfilingHooks = null;\n      var hasLoggedError = false;\n      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n      function injectInternals(internals) {\n        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          // No DevTools\n          return false;\n        }\n        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n        if (hook.isDisabled) {\n          // This isn't a real property on the hook, but it can be set to opt out\n          // of DevTools integration and associated warnings and logs.\n          // https://github.com/facebook/react/issues/3877\n          return true;\n        }\n        if (!hook.supportsFiber) {\n          {\n            error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n          } // DevTools exists, even though it doesn't support Fiber.\n\n          return true;\n        }\n        try {\n          if (enableSchedulingProfiler) {\n            // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n            // This gives DevTools a way to feature detect that isn't tied to version number\n            // (since profiling and timeline are controlled by different feature flags).\n            internals = assign({}, internals, {\n              getLaneLabelMap: getLaneLabelMap,\n              injectProfilingHooks: injectProfilingHooks\n            });\n          }\n          rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n          injectedHook = hook;\n        } catch (err) {\n          // Catch all errors because it is unsafe to throw during initialization.\n          {\n            error('React instrumentation encountered an error: %s.', err);\n          }\n        }\n        if (hook.checkDCE) {\n          // This is the real DevTools.\n          return true;\n        } else {\n          // This is likely a hook installed by Fast Refresh runtime.\n          return false;\n        }\n      }\n      function onScheduleRoot(root, children) {\n        {\n          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n            try {\n              injectedHook.onScheduleFiberRoot(rendererID, root, children);\n            } catch (err) {\n              if (!hasLoggedError) {\n                hasLoggedError = true;\n                error('React instrumentation encountered an error: %s', err);\n              }\n            }\n          }\n        }\n      }\n      function onCommitRoot(root, eventPriority) {\n        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n          try {\n            var didError = (root.current.flags & DidCapture) === DidCapture;\n            if (enableProfilerTimer) {\n              var schedulerPriority;\n              switch (eventPriority) {\n                case DiscreteEventPriority:\n                  schedulerPriority = ImmediatePriority;\n                  break;\n                case ContinuousEventPriority:\n                  schedulerPriority = UserBlockingPriority;\n                  break;\n                case DefaultEventPriority:\n                  schedulerPriority = NormalPriority;\n                  break;\n                case IdleEventPriority:\n                  schedulerPriority = IdlePriority;\n                  break;\n                default:\n                  schedulerPriority = NormalPriority;\n                  break;\n              }\n              injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n            }\n          } catch (err) {\n            {\n              if (!hasLoggedError) {\n                hasLoggedError = true;\n                error('React instrumentation encountered an error: %s', err);\n              }\n            }\n          }\n        }\n      }\n      function onPostCommitRoot(root) {\n        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n          try {\n            injectedHook.onPostCommitFiberRoot(rendererID, root);\n          } catch (err) {\n            {\n              if (!hasLoggedError) {\n                hasLoggedError = true;\n                error('React instrumentation encountered an error: %s', err);\n              }\n            }\n          }\n        }\n      }\n      function onCommitUnmount(fiber) {\n        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n          try {\n            injectedHook.onCommitFiberUnmount(rendererID, fiber);\n          } catch (err) {\n            {\n              if (!hasLoggedError) {\n                hasLoggedError = true;\n                error('React instrumentation encountered an error: %s', err);\n              }\n            }\n          }\n        }\n      }\n      function setIsStrictModeForDevtools(newIsStrictMode) {\n        {\n          if (typeof unstable_yieldValue === 'function') {\n            // We're in a test because Scheduler.unstable_yieldValue only exists\n            // in SchedulerMock. To reduce the noise in strict mode tests,\n            // suppress warnings and disable scheduler yielding during the double render\n            unstable_setDisableYieldValue(newIsStrictMode);\n            setSuppressWarning(newIsStrictMode);\n          }\n          if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n            try {\n              injectedHook.setStrictMode(rendererID, newIsStrictMode);\n            } catch (err) {\n              {\n                if (!hasLoggedError) {\n                  hasLoggedError = true;\n                  error('React instrumentation encountered an error: %s', err);\n                }\n              }\n            }\n          }\n        }\n      } // Profiler API hooks\n\n      function injectProfilingHooks(profilingHooks) {\n        injectedProfilingHooks = profilingHooks;\n      }\n      function getLaneLabelMap() {\n        {\n          var map = new Map();\n          var lane = 1;\n          for (var index = 0; index < TotalLanes; index++) {\n            var label = getLabelForLane(lane);\n            map.set(lane, label);\n            lane *= 2;\n          }\n          return map;\n        }\n      }\n      function markCommitStarted(lanes) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n            injectedProfilingHooks.markCommitStarted(lanes);\n          }\n        }\n      }\n      function markCommitStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n            injectedProfilingHooks.markCommitStopped();\n          }\n        }\n      }\n      function markComponentRenderStarted(fiber) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n            injectedProfilingHooks.markComponentRenderStarted(fiber);\n          }\n        }\n      }\n      function markComponentRenderStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n            injectedProfilingHooks.markComponentRenderStopped();\n          }\n        }\n      }\n      function markComponentPassiveEffectMountStarted(fiber) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n          }\n        }\n      }\n      function markComponentPassiveEffectMountStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n            injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n          }\n        }\n      }\n      function markComponentPassiveEffectUnmountStarted(fiber) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n          }\n        }\n      }\n      function markComponentPassiveEffectUnmountStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n          }\n        }\n      }\n      function markComponentLayoutEffectMountStarted(fiber) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n          }\n        }\n      }\n      function markComponentLayoutEffectMountStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n            injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n          }\n        }\n      }\n      function markComponentLayoutEffectUnmountStarted(fiber) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n          }\n        }\n      }\n      function markComponentLayoutEffectUnmountStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n          }\n        }\n      }\n      function markComponentErrored(fiber, thrownValue, lanes) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n          }\n        }\n      }\n      function markComponentSuspended(fiber, wakeable, lanes) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n          }\n        }\n      }\n      function markLayoutEffectsStarted(lanes) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n            injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n          }\n        }\n      }\n      function markLayoutEffectsStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n            injectedProfilingHooks.markLayoutEffectsStopped();\n          }\n        }\n      }\n      function markPassiveEffectsStarted(lanes) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n            injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n          }\n        }\n      }\n      function markPassiveEffectsStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n            injectedProfilingHooks.markPassiveEffectsStopped();\n          }\n        }\n      }\n      function markRenderStarted(lanes) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n            injectedProfilingHooks.markRenderStarted(lanes);\n          }\n        }\n      }\n      function markRenderYielded() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n            injectedProfilingHooks.markRenderYielded();\n          }\n        }\n      }\n      function markRenderStopped() {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n            injectedProfilingHooks.markRenderStopped();\n          }\n        }\n      }\n      function markRenderScheduled(lane) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n            injectedProfilingHooks.markRenderScheduled(lane);\n          }\n        }\n      }\n      function markForceUpdateScheduled(fiber, lane) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n          }\n        }\n      }\n      function markStateUpdateScheduled(fiber, lane) {\n        {\n          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n          }\n        }\n      }\n\n      /**\n       * inlined Object.is polyfill to avoid requiring consumers ship their own\n       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n       */\n      function is(x, y) {\n        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n        ;\n      }\n      var objectIs = typeof Object.is === 'function' ? Object.is : is;\n      var syncQueue = null;\n      var includesLegacySyncCallbacks = false;\n      var isFlushingSyncQueue = false;\n      function scheduleSyncCallback(callback) {\n        // Push this callback into an internal queue. We'll flush these either in\n        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n        if (syncQueue === null) {\n          syncQueue = [callback];\n        } else {\n          // Push onto existing queue. Don't need to schedule a callback because\n          // we already scheduled one when we created the queue.\n          syncQueue.push(callback);\n        }\n      }\n      function scheduleLegacySyncCallback(callback) {\n        includesLegacySyncCallbacks = true;\n        scheduleSyncCallback(callback);\n      }\n      function flushSyncCallbacksOnlyInLegacyMode() {\n        // Only flushes the queue if there's a legacy sync callback scheduled.\n        // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n        // it might make more sense for the queue to be a list of roots instead of a\n        // list of generic callbacks. Then we can have two: one for legacy roots, one\n        // for concurrent roots. And this method would only flush the legacy ones.\n        if (includesLegacySyncCallbacks) {\n          flushSyncCallbacks();\n        }\n      }\n      function flushSyncCallbacks() {\n        if (!isFlushingSyncQueue && syncQueue !== null) {\n          // Prevent re-entrance.\n          isFlushingSyncQueue = true;\n          var i = 0;\n          var previousUpdatePriority = getCurrentUpdatePriority();\n          try {\n            var isSync = true;\n            var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n            // queue is in the render or commit phases.\n\n            setCurrentUpdatePriority(DiscreteEventPriority);\n            for (; i < queue.length; i++) {\n              var callback = queue[i];\n              do {\n                callback = callback(isSync);\n              } while (callback !== null);\n            }\n            syncQueue = null;\n            includesLegacySyncCallbacks = false;\n          } catch (error) {\n            // If something throws, leave the remaining callbacks on the queue.\n            if (syncQueue !== null) {\n              syncQueue = syncQueue.slice(i + 1);\n            } // Resume flushing in the next tick\n\n            scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n            throw error;\n          } finally {\n            setCurrentUpdatePriority(previousUpdatePriority);\n            isFlushingSyncQueue = false;\n          }\n        }\n        return null;\n      }\n\n      // This is imported by the event replaying implementation in React DOM. It's\n      // in a separate file to break a circular dependency between the renderer and\n      // the reconciler.\n      function isRootDehydrated(root) {\n        var currentState = root.current.memoizedState;\n        return currentState.isDehydrated;\n      }\n\n      // TODO: Use the unified fiber stack module instead of this local one?\n      // Intentionally not using it yet to derisk the initial implementation, because\n      // the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n      // rather the ids be wrong than crash the whole reconciler.\n      var forkStack = [];\n      var forkStackIndex = 0;\n      var treeForkProvider = null;\n      var treeForkCount = 0;\n      var idStack = [];\n      var idStackIndex = 0;\n      var treeContextProvider = null;\n      var treeContextId = 1;\n      var treeContextOverflow = '';\n      function isForkedChild(workInProgress) {\n        warnIfNotHydrating();\n        return (workInProgress.flags & Forked) !== NoFlags;\n      }\n      function getForksAtLevel(workInProgress) {\n        warnIfNotHydrating();\n        return treeForkCount;\n      }\n      function getTreeId() {\n        var overflow = treeContextOverflow;\n        var idWithLeadingBit = treeContextId;\n        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n        return id.toString(32) + overflow;\n      }\n      function pushTreeFork(workInProgress, totalChildren) {\n        // This is called right after we reconcile an array (or iterator) of child\n        // fibers, because that's the only place where we know how many children in\n        // the whole set without doing extra work later, or storing addtional\n        // information on the fiber.\n        //\n        // That's why this function is separate from pushTreeId — it's called during\n        // the render phase of the fork parent, not the child, which is where we push\n        // the other context values.\n        //\n        // In the Fizz implementation this is much simpler because the child is\n        // rendered in the same callstack as the parent.\n        //\n        // It might be better to just add a `forks` field to the Fiber type. It would\n        // make this module simpler.\n        warnIfNotHydrating();\n        forkStack[forkStackIndex++] = treeForkCount;\n        forkStack[forkStackIndex++] = treeForkProvider;\n        treeForkProvider = workInProgress;\n        treeForkCount = totalChildren;\n      }\n      function pushTreeId(workInProgress, totalChildren, index) {\n        warnIfNotHydrating();\n        idStack[idStackIndex++] = treeContextId;\n        idStack[idStackIndex++] = treeContextOverflow;\n        idStack[idStackIndex++] = treeContextProvider;\n        treeContextProvider = workInProgress;\n        var baseIdWithLeadingBit = treeContextId;\n        var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n        // of the id; we use it to account for leading 0s.\n\n        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n        var slot = index + 1;\n        var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n        // consideration the leading 1 we use to mark the end of the sequence.\n\n        if (length > 30) {\n          // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n          // This branch assumes the length of the base id is greater than 5; it won't\n          // work for smaller ids, because you need 5 bits per character.\n          //\n          // We encode the id in multiple steps: first the base id, then the\n          // remaining digits.\n          //\n          // Each 5 bit sequence corresponds to a single base 32 character. So for\n          // example, if the current id is 23 bits long, we can convert 20 of those\n          // bits into a string of 4 characters, with 3 bits left over.\n          //\n          // First calculate how many bits in the base id represent a complete\n          // sequence of characters.\n          var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n          var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n          var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n          var restOfBaseId = baseId >> numberOfOverflowBits;\n          var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n          // we made more room, this time it won't overflow.\n\n          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n          var restOfNewBits = slot << restOfBaseLength;\n          var id = restOfNewBits | restOfBaseId;\n          var overflow = newOverflow + baseOverflow;\n          treeContextId = 1 << restOfLength | id;\n          treeContextOverflow = overflow;\n        } else {\n          // Normal path\n          var newBits = slot << baseLength;\n          var _id = newBits | baseId;\n          var _overflow = baseOverflow;\n          treeContextId = 1 << length | _id;\n          treeContextOverflow = _overflow;\n        }\n      }\n      function pushMaterializedTreeId(workInProgress) {\n        warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n        // in its children.\n\n        var returnFiber = workInProgress.return;\n        if (returnFiber !== null) {\n          var numberOfForks = 1;\n          var slotIndex = 0;\n          pushTreeFork(workInProgress, numberOfForks);\n          pushTreeId(workInProgress, numberOfForks, slotIndex);\n        }\n      }\n      function getBitLength(number) {\n        return 32 - clz32(number);\n      }\n      function getLeadingBit(id) {\n        return 1 << getBitLength(id) - 1;\n      }\n      function popTreeContext(workInProgress) {\n        // Restore the previous values.\n        // This is a bit more complicated than other context-like modules in Fiber\n        // because the same Fiber may appear on the stack multiple times and for\n        // different reasons. We have to keep popping until the work-in-progress is\n        // no longer at the top of the stack.\n        while (workInProgress === treeForkProvider) {\n          treeForkProvider = forkStack[--forkStackIndex];\n          forkStack[forkStackIndex] = null;\n          treeForkCount = forkStack[--forkStackIndex];\n          forkStack[forkStackIndex] = null;\n        }\n        while (workInProgress === treeContextProvider) {\n          treeContextProvider = idStack[--idStackIndex];\n          idStack[idStackIndex] = null;\n          treeContextOverflow = idStack[--idStackIndex];\n          idStack[idStackIndex] = null;\n          treeContextId = idStack[--idStackIndex];\n          idStack[idStackIndex] = null;\n        }\n      }\n      function getSuspendedTreeContext() {\n        warnIfNotHydrating();\n        if (treeContextProvider !== null) {\n          return {\n            id: treeContextId,\n            overflow: treeContextOverflow\n          };\n        } else {\n          return null;\n        }\n      }\n      function restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n        warnIfNotHydrating();\n        idStack[idStackIndex++] = treeContextId;\n        idStack[idStackIndex++] = treeContextOverflow;\n        idStack[idStackIndex++] = treeContextProvider;\n        treeContextId = suspendedContext.id;\n        treeContextOverflow = suspendedContext.overflow;\n        treeContextProvider = workInProgress;\n      }\n      function warnIfNotHydrating() {\n        {\n          if (!getIsHydrating()) {\n            error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n          }\n        }\n      }\n\n      // This may have been an insertion or a hydration.\n\n      var hydrationParentFiber = null;\n      var nextHydratableInstance = null;\n      var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n      // due to earlier mismatches or a suspended fiber.\n\n      var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\n      var hydrationErrors = null;\n      function warnIfHydrating() {\n        {\n          if (isHydrating) {\n            error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n          }\n        }\n      }\n      function markDidThrowWhileHydratingDEV() {\n        {\n          didSuspendOrErrorDEV = true;\n        }\n      }\n      function didSuspendOrErrorWhileHydratingDEV() {\n        {\n          return didSuspendOrErrorDEV;\n        }\n      }\n      function enterHydrationState(fiber) {\n        if (!supportsHydration) {\n          return false;\n        }\n        var parentInstance = fiber.stateNode.containerInfo;\n        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n        hydrationParentFiber = fiber;\n        isHydrating = true;\n        hydrationErrors = null;\n        didSuspendOrErrorDEV = false;\n        return true;\n      }\n      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n        if (!supportsHydration) {\n          return false;\n        }\n        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n        hydrationParentFiber = fiber;\n        isHydrating = true;\n        hydrationErrors = null;\n        didSuspendOrErrorDEV = false;\n        if (treeContext !== null) {\n          restoreSuspendedTreeContext(fiber, treeContext);\n        }\n        return true;\n      }\n      function warnUnhydratedInstance(returnFiber, instance) {\n        {\n          switch (returnFiber.tag) {\n            case HostRoot:\n              {\n                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n                break;\n              }\n            case HostComponent:\n              {\n                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance,\n                // TODO: Delete this argument when we remove the legacy root API.\n                isConcurrentMode);\n                break;\n              }\n            case SuspenseComponent:\n              {\n                var suspenseState = returnFiber.memoizedState;\n                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n                break;\n              }\n          }\n        }\n      }\n      function deleteHydratableInstance(returnFiber, instance) {\n        warnUnhydratedInstance(returnFiber, instance);\n        var childToDelete = createFiberFromHostInstanceForDeletion();\n        childToDelete.stateNode = instance;\n        childToDelete.return = returnFiber;\n        var deletions = returnFiber.deletions;\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n      function warnNonhydratedInstance(returnFiber, fiber) {\n        {\n          if (didSuspendOrErrorDEV) {\n            // Inside a boundary that already suspended. We're currently rendering the\n            // siblings of a suspended node. The mismatch may be due to the missing\n            // data, so it's probably a false positive.\n            return;\n          }\n          switch (returnFiber.tag) {\n            case HostRoot:\n              {\n                var parentContainer = returnFiber.stateNode.containerInfo;\n                switch (fiber.tag) {\n                  case HostComponent:\n                    var type = fiber.type;\n                    var props = fiber.pendingProps;\n                    didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n                    break;\n                  case HostText:\n                    var text = fiber.pendingProps;\n                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n                    break;\n                  case SuspenseComponent:\n                    didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n                    break;\n                }\n                break;\n              }\n            case HostComponent:\n              {\n                var parentType = returnFiber.type;\n                var parentProps = returnFiber.memoizedProps;\n                var parentInstance = returnFiber.stateNode;\n                switch (fiber.tag) {\n                  case HostComponent:\n                    {\n                      var _type = fiber.type;\n                      var _props = fiber.pendingProps;\n                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props,\n                      // TODO: Delete this argument when we remove the legacy root API.\n                      isConcurrentMode);\n                      break;\n                    }\n                  case HostText:\n                    {\n                      var _text = fiber.pendingProps;\n                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text,\n                      // TODO: Delete this argument when we remove the legacy root API.\n                      _isConcurrentMode);\n                      break;\n                    }\n                  case SuspenseComponent:\n                    {\n                      didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n                      break;\n                    }\n                }\n                break;\n              }\n            case SuspenseComponent:\n              {\n                var suspenseState = returnFiber.memoizedState;\n                var _parentInstance = suspenseState.dehydrated;\n                if (_parentInstance !== null) switch (fiber.tag) {\n                  case HostComponent:\n                    var _type2 = fiber.type;\n                    var _props2 = fiber.pendingProps;\n                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n                    break;\n                  case HostText:\n                    var _text2 = fiber.pendingProps;\n                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n                    break;\n                  case SuspenseComponent:\n                    didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n                    break;\n                }\n                break;\n              }\n            default:\n              return;\n          }\n        }\n      }\n      function insertNonHydratedInstance(returnFiber, fiber) {\n        fiber.flags = fiber.flags & ~Hydrating | Placement;\n        warnNonhydratedInstance(returnFiber, fiber);\n      }\n      function tryHydrate(fiber, nextInstance) {\n        switch (fiber.tag) {\n          case HostComponent:\n            {\n              var type = fiber.type;\n              var props = fiber.pendingProps;\n              var instance = canHydrateInstance(nextInstance, type, props);\n              if (instance !== null) {\n                fiber.stateNode = instance;\n                hydrationParentFiber = fiber;\n                nextHydratableInstance = getFirstHydratableChild(instance);\n                return true;\n              }\n              return false;\n            }\n          case HostText:\n            {\n              var text = fiber.pendingProps;\n              var textInstance = canHydrateTextInstance(nextInstance, text);\n              if (textInstance !== null) {\n                fiber.stateNode = textInstance;\n                hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n                nextHydratableInstance = null;\n                return true;\n              }\n              return false;\n            }\n          case SuspenseComponent:\n            {\n              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n              if (suspenseInstance !== null) {\n                var suspenseState = {\n                  dehydrated: suspenseInstance,\n                  treeContext: getSuspendedTreeContext(),\n                  retryLane: OffscreenLane\n                };\n                fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n                // This simplifies the code for getHostSibling and deleting nodes,\n                // since it doesn't have to consider all Suspense boundaries and\n                // check if they're dehydrated ones or not.\n\n                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n                dehydratedFragment.return = fiber;\n                fiber.child = dehydratedFragment;\n                hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n                // it during the first pass. Instead, we'll reenter it later.\n\n                nextHydratableInstance = null;\n                return true;\n              }\n              return false;\n            }\n          default:\n            return false;\n        }\n      }\n      function shouldClientRenderOnMismatch(fiber) {\n        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n      }\n      function throwOnHydrationMismatch(fiber) {\n        throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n      }\n      function tryToClaimNextHydratableInstance(fiber) {\n        if (!isHydrating) {\n          return;\n        }\n        var nextInstance = nextHydratableInstance;\n        if (!nextInstance) {\n          if (shouldClientRenderOnMismatch(fiber)) {\n            warnNonhydratedInstance(hydrationParentFiber, fiber);\n            throwOnHydrationMismatch();\n          } // Nothing to hydrate. Make it an insertion.\n\n          insertNonHydratedInstance(hydrationParentFiber, fiber);\n          isHydrating = false;\n          hydrationParentFiber = fiber;\n          return;\n        }\n        var firstAttemptedInstance = nextInstance;\n        if (!tryHydrate(fiber, nextInstance)) {\n          if (shouldClientRenderOnMismatch(fiber)) {\n            warnNonhydratedInstance(hydrationParentFiber, fiber);\n            throwOnHydrationMismatch();\n          } // If we can't hydrate this instance let's try the next one.\n          // We use this as a heuristic. It's based on intuition and not data so it\n          // might be flawed or unnecessary.\n\n          nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n          var prevHydrationParentFiber = hydrationParentFiber;\n          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n            // Nothing to hydrate. Make it an insertion.\n            insertNonHydratedInstance(hydrationParentFiber, fiber);\n            isHydrating = false;\n            hydrationParentFiber = fiber;\n            return;\n          } // We matched the next one, we'll now assume that the first one was\n          // superfluous and we'll delete it. Since we can't eagerly delete it\n          // we'll have to schedule a deletion. To do that, this node needs a dummy\n          // fiber associated with it.\n\n          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n        }\n      }\n      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n        if (!supportsHydration) {\n          throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        var instance = fiber.stateNode;\n        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n        // is a new ref we mark this as an update.\n\n        if (updatePayload !== null) {\n          return true;\n        }\n        return false;\n      }\n      function prepareToHydrateHostTextInstance(fiber) {\n        if (!supportsHydration) {\n          throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        var textInstance = fiber.stateNode;\n        var textContent = fiber.memoizedProps;\n        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n        if (shouldUpdate) {\n          // We assume that prepareToHydrateHostTextInstance is called in a context where the\n          // hydration parent is the parent host component of this host text.\n          var returnFiber = hydrationParentFiber;\n          if (returnFiber !== null) {\n            switch (returnFiber.tag) {\n              case HostRoot:\n                {\n                  var parentContainer = returnFiber.stateNode.containerInfo;\n                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent,\n                  // TODO: Delete this argument when we remove the legacy root API.\n                  isConcurrentMode);\n                  break;\n                }\n              case HostComponent:\n                {\n                  var parentType = returnFiber.type;\n                  var parentProps = returnFiber.memoizedProps;\n                  var parentInstance = returnFiber.stateNode;\n                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent,\n                  // TODO: Delete this argument when we remove the legacy root API.\n                  _isConcurrentMode2);\n                  break;\n                }\n            }\n          }\n        }\n        return shouldUpdate;\n      }\n      function prepareToHydrateHostSuspenseInstance(fiber) {\n        if (!supportsHydration) {\n          throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        var suspenseState = fiber.memoizedState;\n        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n        if (!suspenseInstance) {\n          throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        hydrateSuspenseInstance(suspenseInstance, fiber);\n      }\n      function skipPastDehydratedSuspenseInstance(fiber) {\n        if (!supportsHydration) {\n          throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        var suspenseState = fiber.memoizedState;\n        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n        if (!suspenseInstance) {\n          throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n        }\n        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n      }\n      function popToNextHostParent(fiber) {\n        var parent = fiber.return;\n        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n          parent = parent.return;\n        }\n        hydrationParentFiber = parent;\n      }\n      function popHydrationState(fiber) {\n        if (!supportsHydration) {\n          return false;\n        }\n        if (fiber !== hydrationParentFiber) {\n          // We're deeper than the current hydration context, inside an inserted\n          // tree.\n          return false;\n        }\n        if (!isHydrating) {\n          // If we're not currently hydrating but we're in a hydration context, then\n          // we were an insertion and now need to pop up reenter hydration of our\n          // siblings.\n          popToNextHostParent(fiber);\n          isHydrating = true;\n          return false;\n        } // If we have any remaining hydratable nodes, we need to delete them now.\n        // We only do this deeper than head and body since they tend to have random\n        // other nodes in them. We also ignore components with pure text content in\n        // side of them. We also don't delete anything inside the root container.\n\n        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n          var nextInstance = nextHydratableInstance;\n          if (nextInstance) {\n            if (shouldClientRenderOnMismatch(fiber)) {\n              warnIfUnhydratedTailNodes(fiber);\n              throwOnHydrationMismatch();\n            } else {\n              while (nextInstance) {\n                deleteHydratableInstance(fiber, nextInstance);\n                nextInstance = getNextHydratableSibling(nextInstance);\n              }\n            }\n          }\n        }\n        popToNextHostParent(fiber);\n        if (fiber.tag === SuspenseComponent) {\n          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n        } else {\n          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n        }\n        return true;\n      }\n      function hasUnhydratedTailNodes() {\n        return isHydrating && nextHydratableInstance !== null;\n      }\n      function warnIfUnhydratedTailNodes(fiber) {\n        var nextInstance = nextHydratableInstance;\n        while (nextInstance) {\n          warnUnhydratedInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n      function resetHydrationState() {\n        if (!supportsHydration) {\n          return;\n        }\n        hydrationParentFiber = null;\n        nextHydratableInstance = null;\n        isHydrating = false;\n        didSuspendOrErrorDEV = false;\n      }\n      function upgradeHydrationErrorsToRecoverable() {\n        if (hydrationErrors !== null) {\n          // Successfully completed a forced client render. The errors that occurred\n          // during the hydration attempt are now recovered. We will log them in\n          // commit phase, once the entire tree has finished.\n          queueRecoverableErrors(hydrationErrors);\n          hydrationErrors = null;\n        }\n      }\n      function getIsHydrating() {\n        return isHydrating;\n      }\n      function queueHydrationError(error) {\n        if (hydrationErrors === null) {\n          hydrationErrors = [error];\n        } else {\n          hydrationErrors.push(error);\n        }\n      }\n      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\n      var NoTransition = null;\n      function requestCurrentTransition() {\n        return ReactCurrentBatchConfig.transition;\n      }\n\n      /**\n       * Performs equality by iterating through keys on an object and returning false\n       * when any key has values which are not strictly equal between the arguments.\n       * Returns true when the values of all keys are strictly equal.\n       */\n\n      function shallowEqual(objA, objB) {\n        if (objectIs(objA, objB)) {\n          return true;\n        }\n        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n          return false;\n        }\n        var keysA = Object.keys(objA);\n        var keysB = Object.keys(objB);\n        if (keysA.length !== keysB.length) {\n          return false;\n        } // Test for A's keys different from B.\n\n        for (var i = 0; i < keysA.length; i++) {\n          var currentKey = keysA[i];\n          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n            return false;\n          }\n        }\n        return true;\n      }\n      function describeFiber(fiber) {\n        fiber._debugOwner ? fiber._debugOwner.type : null;\n        fiber._debugSource;\n        switch (fiber.tag) {\n          case HostComponent:\n            return describeBuiltInComponentFrame(fiber.type);\n          case LazyComponent:\n            return describeBuiltInComponentFrame('Lazy');\n          case SuspenseComponent:\n            return describeBuiltInComponentFrame('Suspense');\n          case SuspenseListComponent:\n            return describeBuiltInComponentFrame('SuspenseList');\n          case FunctionComponent:\n          case IndeterminateComponent:\n          case SimpleMemoComponent:\n            return describeFunctionComponentFrame(fiber.type);\n          case ForwardRef:\n            return describeFunctionComponentFrame(fiber.type.render);\n          case ClassComponent:\n            return describeClassComponentFrame(fiber.type);\n          default:\n            return '';\n        }\n      }\n      function getStackByFiberInDevAndProd(workInProgress) {\n        try {\n          var info = '';\n          var node = workInProgress;\n          do {\n            info += describeFiber(node);\n            node = node.return;\n          } while (node);\n          return info;\n        } catch (x) {\n          return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n        }\n      }\n      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n      var current = null;\n      var isRendering = false;\n      function getCurrentFiberOwnerNameInDevOrNull() {\n        {\n          if (current === null) {\n            return null;\n          }\n          var owner = current._debugOwner;\n          if (owner !== null && typeof owner !== 'undefined') {\n            return getComponentNameFromFiber(owner);\n          }\n        }\n        return null;\n      }\n      function getCurrentFiberStackInDev() {\n        {\n          if (current === null) {\n            return '';\n          } // Safe because if current fiber exists, we are reconciling,\n          // and it is guaranteed to be the work-in-progress version.\n\n          return getStackByFiberInDevAndProd(current);\n        }\n      }\n      function resetCurrentFiber() {\n        {\n          ReactDebugCurrentFrame$1.getCurrentStack = null;\n          current = null;\n          isRendering = false;\n        }\n      }\n      function setCurrentFiber(fiber) {\n        {\n          ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n          current = fiber;\n          isRendering = false;\n        }\n      }\n      function getCurrentFiber() {\n        {\n          return current;\n        }\n      }\n      function setIsRendering(rendering) {\n        {\n          isRendering = rendering;\n        }\n      }\n      var ReactStrictModeWarnings = {\n        recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n        flushPendingUnsafeLifecycleWarnings: function () {},\n        recordLegacyContextWarning: function (fiber, instance) {},\n        flushLegacyContextWarning: function () {},\n        discardPendingWarnings: function () {}\n      };\n      {\n        var findStrictRoot = function (fiber) {\n          var maybeStrictRoot = null;\n          var node = fiber;\n          while (node !== null) {\n            if (node.mode & StrictLegacyMode) {\n              maybeStrictRoot = node;\n            }\n            node = node.return;\n          }\n          return maybeStrictRoot;\n        };\n        var setToSortedString = function (set) {\n          var array = [];\n          set.forEach(function (value) {\n            array.push(value);\n          });\n          return array.sort().join(', ');\n        };\n        var pendingComponentWillMountWarnings = [];\n        var pendingUNSAFE_ComponentWillMountWarnings = [];\n        var pendingComponentWillReceivePropsWarnings = [];\n        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        var pendingComponentWillUpdateWarnings = [];\n        var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n        var didWarnAboutUnsafeLifecycles = new Set();\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n          // Dedupe strategy: Warn once per component.\n          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n            return;\n          }\n          if (typeof instance.componentWillMount === 'function' &&\n          // Don't warn about react-lifecycles-compat polyfilled components.\n          instance.componentWillMount.__suppressDeprecationWarning !== true) {\n            pendingComponentWillMountWarnings.push(fiber);\n          }\n          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n          }\n          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n            pendingComponentWillReceivePropsWarnings.push(fiber);\n          }\n          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n          }\n          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n            pendingComponentWillUpdateWarnings.push(fiber);\n          }\n          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n          }\n        };\n        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n          // We do an initial pass to gather component names\n          var componentWillMountUniqueNames = new Set();\n          if (pendingComponentWillMountWarnings.length > 0) {\n            pendingComponentWillMountWarnings.forEach(function (fiber) {\n              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillMountWarnings = [];\n          }\n          var UNSAFE_componentWillMountUniqueNames = new Set();\n          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingUNSAFE_ComponentWillMountWarnings = [];\n          }\n          var componentWillReceivePropsUniqueNames = new Set();\n          if (pendingComponentWillReceivePropsWarnings.length > 0) {\n            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillReceivePropsWarnings = [];\n          }\n          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n          }\n          var componentWillUpdateUniqueNames = new Set();\n          if (pendingComponentWillUpdateWarnings.length > 0) {\n            pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillUpdateWarnings = [];\n          }\n          var UNSAFE_componentWillUpdateUniqueNames = new Set();\n          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingUNSAFE_ComponentWillUpdateWarnings = [];\n          } // Finally, we flush all the warnings\n          // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n          if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n            error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n          }\n          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n            error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n          }\n          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n            error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n          }\n          if (componentWillMountUniqueNames.size > 0) {\n            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n            warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n          }\n          if (componentWillReceivePropsUniqueNames.size > 0) {\n            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n            warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n          }\n          if (componentWillUpdateUniqueNames.size > 0) {\n            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n            warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n          }\n        };\n        var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n        var didWarnAboutLegacyContext = new Set();\n        ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n          var strictRoot = findStrictRoot(fiber);\n          if (strictRoot === null) {\n            error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n            return;\n          } // Dedup strategy: Warn once per component.\n\n          if (didWarnAboutLegacyContext.has(fiber.type)) {\n            return;\n          }\n          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n            if (warningsForRoot === undefined) {\n              warningsForRoot = [];\n              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n            }\n            warningsForRoot.push(fiber);\n          }\n        };\n        ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n          pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n            if (fiberArray.length === 0) {\n              return;\n            }\n            var firstFiber = fiberArray[0];\n            var uniqueNames = new Set();\n            fiberArray.forEach(function (fiber) {\n              uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n              didWarnAboutLegacyContext.add(fiber.type);\n            });\n            var sortedNames = setToSortedString(uniqueNames);\n            try {\n              setCurrentFiber(firstFiber);\n              error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n            } finally {\n              resetCurrentFiber();\n            }\n          });\n        };\n        ReactStrictModeWarnings.discardPendingWarnings = function () {\n          pendingComponentWillMountWarnings = [];\n          pendingUNSAFE_ComponentWillMountWarnings = [];\n          pendingComponentWillReceivePropsWarnings = [];\n          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n          pendingComponentWillUpdateWarnings = [];\n          pendingUNSAFE_ComponentWillUpdateWarnings = [];\n          pendingLegacyContextWarning = new Map();\n        };\n      }\n\n      /*\n       * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n       * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n       *\n       * The functions in this module will throw an easier-to-understand,\n       * easier-to-debug exception with a clear errors message message explaining the\n       * problem. (Instead of a confusing exception thrown inside the implementation\n       * of the `value` object).\n       */\n      // $FlowFixMe only called in DEV, so void return is not possible.\n      function typeName(value) {\n        {\n          // toStringTag is needed for namespaced types like Temporal.Instant\n          var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n          return type;\n        }\n      } // $FlowFixMe only called in DEV, so void return is not possible.\n\n      function willCoercionThrow(value) {\n        {\n          try {\n            testStringCoercion(value);\n            return false;\n          } catch (e) {\n            return true;\n          }\n        }\n      }\n      function testStringCoercion(value) {\n        // If you ended up here by following an exception call stack, here's what's\n        // happened: you supplied an object or symbol value to React (as a prop, key,\n        // DOM attribute, CSS property, string ref, etc.) and when React tried to\n        // coerce it to a string using `'' + value`, an exception was thrown.\n        //\n        // The most common types that will cause this exception are `Symbol` instances\n        // and Temporal objects like `Temporal.Instant`. But any object that has a\n        // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n        // exception. (Library authors do this to prevent users from using built-in\n        // numeric operators like `+` or comparison operators like `>=` because custom\n        // methods are needed to perform accurate arithmetic or comparison.)\n        //\n        // To fix the problem, coerce this object or symbol value to a string before\n        // passing it to React. The most reliable way is usually `String(value)`.\n        //\n        // To find which value is throwing, check the browser or debugger console.\n        // Before this exception was thrown, there should be `console.error` output\n        // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n        // problem and how that type was used: key, atrribute, input value prop, etc.\n        // In most cases, this console output also shows the component and its\n        // ancestor components where the exception happened.\n        //\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        return '' + value;\n      }\n      function checkKeyStringCoercion(value) {\n        {\n          if (willCoercionThrow(value)) {\n            error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n          }\n        }\n      }\n      function checkPropStringCoercion(value, propName) {\n        {\n          if (willCoercionThrow(value)) {\n            error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n            return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n          }\n        }\n      }\n      function resolveDefaultProps(Component, baseProps) {\n        if (Component && Component.defaultProps) {\n          // Resolve default props. Taken from ReactElement\n          var props = assign({}, baseProps);\n          var defaultProps = Component.defaultProps;\n          for (var propName in defaultProps) {\n            if (props[propName] === undefined) {\n              props[propName] = defaultProps[propName];\n            }\n          }\n          return props;\n        }\n        return baseProps;\n      }\n      var valueCursor = createCursor(null);\n      var rendererSigil;\n      {\n        // Use this to detect multiple renderers using the same context\n        rendererSigil = {};\n      }\n      var currentlyRenderingFiber = null;\n      var lastContextDependency = null;\n      var lastFullyObservedContext = null;\n      var isDisallowedContextReadInDEV = false;\n      function resetContextDependencies() {\n        // This is called right before React yields execution, to ensure `readContext`\n        // cannot be called outside the render phase.\n        currentlyRenderingFiber = null;\n        lastContextDependency = null;\n        lastFullyObservedContext = null;\n        {\n          isDisallowedContextReadInDEV = false;\n        }\n      }\n      function enterDisallowedContextReadInDEV() {\n        {\n          isDisallowedContextReadInDEV = true;\n        }\n      }\n      function exitDisallowedContextReadInDEV() {\n        {\n          isDisallowedContextReadInDEV = false;\n        }\n      }\n      function pushProvider(providerFiber, context, nextValue) {\n        if (isPrimaryRenderer) {\n          push(valueCursor, context._currentValue, providerFiber);\n          context._currentValue = nextValue;\n          {\n            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n              error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n            }\n            context._currentRenderer = rendererSigil;\n          }\n        } else {\n          push(valueCursor, context._currentValue2, providerFiber);\n          context._currentValue2 = nextValue;\n          {\n            if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n              error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n            }\n            context._currentRenderer2 = rendererSigil;\n          }\n        }\n      }\n      function popProvider(context, providerFiber) {\n        var currentValue = valueCursor.current;\n        pop(valueCursor, providerFiber);\n        if (isPrimaryRenderer) {\n          {\n            context._currentValue = currentValue;\n          }\n        } else {\n          {\n            context._currentValue2 = currentValue;\n          }\n        }\n      }\n      function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n        // Update the child lanes of all the ancestors, including the alternates.\n        var node = parent;\n        while (node !== null) {\n          var alternate = node.alternate;\n          if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n            node.childLanes = mergeLanes(node.childLanes, renderLanes);\n            if (alternate !== null) {\n              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n            }\n          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n          }\n          if (node === propagationRoot) {\n            break;\n          }\n          node = node.return;\n        }\n        {\n          if (node !== propagationRoot) {\n            error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          }\n        }\n      }\n      function propagateContextChange(workInProgress, context, renderLanes) {\n        {\n          propagateContextChange_eager(workInProgress, context, renderLanes);\n        }\n      }\n      function propagateContextChange_eager(workInProgress, context, renderLanes) {\n        var fiber = workInProgress.child;\n        if (fiber !== null) {\n          // Set the return pointer of the child to the work-in-progress fiber.\n          fiber.return = workInProgress;\n        }\n        while (fiber !== null) {\n          var nextFiber = void 0; // Visit this fiber.\n\n          var list = fiber.dependencies;\n          if (list !== null) {\n            nextFiber = fiber.child;\n            var dependency = list.firstContext;\n            while (dependency !== null) {\n              // Check if the context matches.\n              if (dependency.context === context) {\n                // Match! Schedule an update on this fiber.\n                if (fiber.tag === ClassComponent) {\n                  // Schedule a force update on the work-in-progress.\n                  var lane = pickArbitraryLane(renderLanes);\n                  var update = createUpdate(NoTimestamp, lane);\n                  update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                  // update to the current fiber, too, which means it will persist even if\n                  // this render is thrown away. Since it's a race condition, not sure it's\n                  // worth fixing.\n                  // Inlined `enqueueUpdate` to remove interleaved update check\n\n                  var updateQueue = fiber.updateQueue;\n                  if (updateQueue === null) ;else {\n                    var sharedQueue = updateQueue.shared;\n                    var pending = sharedQueue.pending;\n                    if (pending === null) {\n                      // This is the first update. Create a circular list.\n                      update.next = update;\n                    } else {\n                      update.next = pending.next;\n                      pending.next = update;\n                    }\n                    sharedQueue.pending = update;\n                  }\n                }\n                fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n                var alternate = fiber.alternate;\n                if (alternate !== null) {\n                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n                }\n                scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n                list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n                // dependency list.\n\n                break;\n              }\n              dependency = dependency.next;\n            }\n          } else if (fiber.tag === ContextProvider) {\n            // Don't scan deeper if this is a matching provider\n            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n          } else if (fiber.tag === DehydratedFragment) {\n            // If a dehydrated suspense boundary is in this subtree, we don't know\n            // if it will have any context consumers in it. The best we can do is\n            // mark it as having updates.\n            var parentSuspense = fiber.return;\n            if (parentSuspense === null) {\n              throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n            }\n            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n            var _alternate = parentSuspense.alternate;\n            if (_alternate !== null) {\n              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n            } // This is intentionally passing this fiber as the parent\n            // because we want to schedule this fiber as having work\n            // on its children. We'll use the childLanes on\n            // this fiber to indicate that a context has changed.\n\n            scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n            nextFiber = fiber.sibling;\n          } else {\n            // Traverse down.\n            nextFiber = fiber.child;\n          }\n          if (nextFiber !== null) {\n            // Set the return pointer of the child to the work-in-progress fiber.\n            nextFiber.return = fiber;\n          } else {\n            // No child. Traverse to next sibling.\n            nextFiber = fiber;\n            while (nextFiber !== null) {\n              if (nextFiber === workInProgress) {\n                // We're back to the root of this subtree. Exit.\n                nextFiber = null;\n                break;\n              }\n              var sibling = nextFiber.sibling;\n              if (sibling !== null) {\n                // Set the return pointer of the sibling to the work-in-progress fiber.\n                sibling.return = nextFiber.return;\n                nextFiber = sibling;\n                break;\n              } // No more siblings. Traverse up.\n\n              nextFiber = nextFiber.return;\n            }\n          }\n          fiber = nextFiber;\n        }\n      }\n      function prepareToReadContext(workInProgress, renderLanes) {\n        currentlyRenderingFiber = workInProgress;\n        lastContextDependency = null;\n        lastFullyObservedContext = null;\n        var dependencies = workInProgress.dependencies;\n        if (dependencies !== null) {\n          {\n            var firstContext = dependencies.firstContext;\n            if (firstContext !== null) {\n              if (includesSomeLane(dependencies.lanes, renderLanes)) {\n                // Context list has a pending update. Mark that this fiber performed work.\n                markWorkInProgressReceivedUpdate();\n              } // Reset the work-in-progress list\n\n              dependencies.firstContext = null;\n            }\n          }\n        }\n      }\n      function readContext(context) {\n        {\n          // This warning would fire if you read context inside a Hook like useMemo.\n          // Unlike the class check below, it's not enforced in production for perf.\n          if (isDisallowedContextReadInDEV) {\n            error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n          }\n        }\n        var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n        if (lastFullyObservedContext === context) ;else {\n          var contextItem = {\n            context: context,\n            memoizedValue: value,\n            next: null\n          };\n          if (lastContextDependency === null) {\n            if (currentlyRenderingFiber === null) {\n              throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n            } // This is the first dependency for this component. Create a new list.\n\n            lastContextDependency = contextItem;\n            currentlyRenderingFiber.dependencies = {\n              lanes: NoLanes,\n              firstContext: contextItem\n            };\n          } else {\n            // Append a new context item.\n            lastContextDependency = lastContextDependency.next = contextItem;\n          }\n        }\n        return value;\n      }\n\n      // render. When this render exits, either because it finishes or because it is\n      // interrupted, the interleaved updates will be transferred onto the main part\n      // of the queue.\n\n      var concurrentQueues = null;\n      function pushConcurrentUpdateQueue(queue) {\n        if (concurrentQueues === null) {\n          concurrentQueues = [queue];\n        } else {\n          concurrentQueues.push(queue);\n        }\n      }\n      function finishQueueingConcurrentUpdates() {\n        // Transfer the interleaved updates onto the main queue. Each queue has a\n        // `pending` field and an `interleaved` field. When they are not null, they\n        // point to the last node in a circular linked list. We need to append the\n        // interleaved list to the end of the pending list by joining them into a\n        // single, circular list.\n        if (concurrentQueues !== null) {\n          for (var i = 0; i < concurrentQueues.length; i++) {\n            var queue = concurrentQueues[i];\n            var lastInterleavedUpdate = queue.interleaved;\n            if (lastInterleavedUpdate !== null) {\n              queue.interleaved = null;\n              var firstInterleavedUpdate = lastInterleavedUpdate.next;\n              var lastPendingUpdate = queue.pending;\n              if (lastPendingUpdate !== null) {\n                var firstPendingUpdate = lastPendingUpdate.next;\n                lastPendingUpdate.next = firstInterleavedUpdate;\n                lastInterleavedUpdate.next = firstPendingUpdate;\n              }\n              queue.pending = lastInterleavedUpdate;\n            }\n          }\n          concurrentQueues = null;\n        }\n      }\n      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n        var interleaved = queue.interleaved;\n        if (interleaved === null) {\n          // This is the first update. Create a circular list.\n          update.next = update; // At the end of the current render, this queue's interleaved updates will\n          // be transferred to the pending queue.\n\n          pushConcurrentUpdateQueue(queue);\n        } else {\n          update.next = interleaved.next;\n          interleaved.next = update;\n        }\n        queue.interleaved = update;\n        return markUpdateLaneFromFiberToRoot(fiber, lane);\n      }\n      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\n        var interleaved = queue.interleaved;\n        if (interleaved === null) {\n          // This is the first update. Create a circular list.\n          update.next = update; // At the end of the current render, this queue's interleaved updates will\n          // be transferred to the pending queue.\n\n          pushConcurrentUpdateQueue(queue);\n        } else {\n          update.next = interleaved.next;\n          interleaved.next = update;\n        }\n        queue.interleaved = update;\n      }\n      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n        var interleaved = queue.interleaved;\n        if (interleaved === null) {\n          // This is the first update. Create a circular list.\n          update.next = update; // At the end of the current render, this queue's interleaved updates will\n          // be transferred to the pending queue.\n\n          pushConcurrentUpdateQueue(queue);\n        } else {\n          update.next = interleaved.next;\n          interleaved.next = update;\n        }\n        queue.interleaved = update;\n        return markUpdateLaneFromFiberToRoot(fiber, lane);\n      }\n      function enqueueConcurrentRenderForLane(fiber, lane) {\n        return markUpdateLaneFromFiberToRoot(fiber, lane);\n      } // Calling this function outside this module should only be done for backwards\n      // compatibility and should always be accompanied by a warning.\n\n      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n        // Update the source fiber's lanes\n        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n        var alternate = sourceFiber.alternate;\n        if (alternate !== null) {\n          alternate.lanes = mergeLanes(alternate.lanes, lane);\n        }\n        {\n          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n          }\n        } // Walk the parent path to the root and update the child lanes.\n\n        var node = sourceFiber;\n        var parent = sourceFiber.return;\n        while (parent !== null) {\n          parent.childLanes = mergeLanes(parent.childLanes, lane);\n          alternate = parent.alternate;\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n          } else {\n            {\n              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n              }\n            }\n          }\n          node = parent;\n          parent = parent.return;\n        }\n        if (node.tag === HostRoot) {\n          var root = node.stateNode;\n          return root;\n        } else {\n          return null;\n        }\n      }\n      var UpdateState = 0;\n      var ReplaceState = 1;\n      var ForceUpdate = 2;\n      var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n      // It should only be read right after calling `processUpdateQueue`, via\n      // `checkHasForceUpdateAfterProcessing`.\n\n      var hasForceUpdate = false;\n      var didWarnUpdateInsideUpdate;\n      var currentlyProcessingQueue;\n      {\n        didWarnUpdateInsideUpdate = false;\n        currentlyProcessingQueue = null;\n      }\n      function initializeUpdateQueue(fiber) {\n        var queue = {\n          baseState: fiber.memoizedState,\n          firstBaseUpdate: null,\n          lastBaseUpdate: null,\n          shared: {\n            pending: null,\n            interleaved: null,\n            lanes: NoLanes\n          },\n          effects: null\n        };\n        fiber.updateQueue = queue;\n      }\n      function cloneUpdateQueue(current, workInProgress) {\n        // Clone the update queue from current. Unless it's already a clone.\n        var queue = workInProgress.updateQueue;\n        var currentQueue = current.updateQueue;\n        if (queue === currentQueue) {\n          var clone = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: currentQueue.firstBaseUpdate,\n            lastBaseUpdate: currentQueue.lastBaseUpdate,\n            shared: currentQueue.shared,\n            effects: currentQueue.effects\n          };\n          workInProgress.updateQueue = clone;\n        }\n      }\n      function createUpdate(eventTime, lane) {\n        var update = {\n          eventTime: eventTime,\n          lane: lane,\n          tag: UpdateState,\n          payload: null,\n          callback: null,\n          next: null\n        };\n        return update;\n      }\n      function enqueueUpdate(fiber, update, lane) {\n        var updateQueue = fiber.updateQueue;\n        if (updateQueue === null) {\n          // Only occurs if the fiber has been unmounted.\n          return null;\n        }\n        var sharedQueue = updateQueue.shared;\n        {\n          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n            error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n            didWarnUpdateInsideUpdate = true;\n          }\n        }\n        if (isUnsafeClassRenderPhaseUpdate()) {\n          // This is an unsafe render phase update. Add directly to the update\n          // queue so we can process it immediately during the current render.\n          var pending = sharedQueue.pending;\n          if (pending === null) {\n            // This is the first update. Create a circular list.\n            update.next = update;\n          } else {\n            update.next = pending.next;\n            pending.next = update;\n          }\n          sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n          // this fiber. This is for backwards compatibility in the case where you\n          // update a different component during render phase than the one that is\n          // currently renderings (a pattern that is accompanied by a warning).\n\n          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n        } else {\n          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n        }\n      }\n      function entangleTransitions(root, fiber, lane) {\n        var updateQueue = fiber.updateQueue;\n        if (updateQueue === null) {\n          // Only occurs if the fiber has been unmounted.\n          return;\n        }\n        var sharedQueue = updateQueue.shared;\n        if (isTransitionLane(lane)) {\n          var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n          // have finished. We can remove them from the shared queue, which represents\n          // a superset of the actually pending lanes. In some cases we may entangle\n          // more than we need to, but that's OK. In fact it's worse if we *don't*\n          // entangle when we should.\n\n          queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n          var newQueueLanes = mergeLanes(queueLanes, lane);\n          sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n          // the lane finished since the last time we entangled it. So we need to\n          // entangle it again, just to be sure.\n\n          markRootEntangled(root, newQueueLanes);\n        }\n      }\n      function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n        // Captured updates are updates that are thrown by a child during the render\n        // phase. They should be discarded if the render is aborted. Therefore,\n        // we should only put them on the work-in-progress queue, not the current one.\n        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n        var current = workInProgress.alternate;\n        if (current !== null) {\n          var currentQueue = current.updateQueue;\n          if (queue === currentQueue) {\n            // The work-in-progress queue is the same as current. This happens when\n            // we bail out on a parent fiber that then captures an error thrown by\n            // a child. Since we want to append the update only to the work-in\n            // -progress queue, we need to clone the updates. We usually clone during\n            // processUpdateQueue, but that didn't happen in this case because we\n            // skipped over the parent when we bailed out.\n            var newFirst = null;\n            var newLast = null;\n            var firstBaseUpdate = queue.firstBaseUpdate;\n            if (firstBaseUpdate !== null) {\n              // Loop through the updates and clone them.\n              var update = firstBaseUpdate;\n              do {\n                var clone = {\n                  eventTime: update.eventTime,\n                  lane: update.lane,\n                  tag: update.tag,\n                  payload: update.payload,\n                  callback: update.callback,\n                  next: null\n                };\n                if (newLast === null) {\n                  newFirst = newLast = clone;\n                } else {\n                  newLast.next = clone;\n                  newLast = clone;\n                }\n                update = update.next;\n              } while (update !== null); // Append the captured update the end of the cloned list.\n\n              if (newLast === null) {\n                newFirst = newLast = capturedUpdate;\n              } else {\n                newLast.next = capturedUpdate;\n                newLast = capturedUpdate;\n              }\n            } else {\n              // There are no base updates.\n              newFirst = newLast = capturedUpdate;\n            }\n            queue = {\n              baseState: currentQueue.baseState,\n              firstBaseUpdate: newFirst,\n              lastBaseUpdate: newLast,\n              shared: currentQueue.shared,\n              effects: currentQueue.effects\n            };\n            workInProgress.updateQueue = queue;\n            return;\n          }\n        } // Append the update to the end of the list.\n\n        var lastBaseUpdate = queue.lastBaseUpdate;\n        if (lastBaseUpdate === null) {\n          queue.firstBaseUpdate = capturedUpdate;\n        } else {\n          lastBaseUpdate.next = capturedUpdate;\n        }\n        queue.lastBaseUpdate = capturedUpdate;\n      }\n      function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n        switch (update.tag) {\n          case ReplaceState:\n            {\n              var payload = update.payload;\n              if (typeof payload === 'function') {\n                // Updater function\n                {\n                  enterDisallowedContextReadInDEV();\n                }\n                var nextState = payload.call(instance, prevState, nextProps);\n                {\n                  if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                      payload.call(instance, prevState, nextProps);\n                    } finally {\n                      setIsStrictModeForDevtools(false);\n                    }\n                  }\n                  exitDisallowedContextReadInDEV();\n                }\n                return nextState;\n              } // State object\n\n              return payload;\n            }\n          case CaptureUpdate:\n            {\n              workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n            }\n          // Intentional fallthrough\n\n          case UpdateState:\n            {\n              var _payload = update.payload;\n              var partialState;\n              if (typeof _payload === 'function') {\n                // Updater function\n                {\n                  enterDisallowedContextReadInDEV();\n                }\n                partialState = _payload.call(instance, prevState, nextProps);\n                {\n                  if (workInProgress.mode & StrictLegacyMode) {\n                    setIsStrictModeForDevtools(true);\n                    try {\n                      _payload.call(instance, prevState, nextProps);\n                    } finally {\n                      setIsStrictModeForDevtools(false);\n                    }\n                  }\n                  exitDisallowedContextReadInDEV();\n                }\n              } else {\n                // Partial state object\n                partialState = _payload;\n              }\n              if (partialState === null || partialState === undefined) {\n                // Null and undefined are treated as no-ops.\n                return prevState;\n              } // Merge the partial state and the previous state.\n\n              return assign({}, prevState, partialState);\n            }\n          case ForceUpdate:\n            {\n              hasForceUpdate = true;\n              return prevState;\n            }\n        }\n        return prevState;\n      }\n      function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n        // This is always non-null on a ClassComponent or HostRoot\n        var queue = workInProgress.updateQueue;\n        hasForceUpdate = false;\n        {\n          currentlyProcessingQueue = queue.shared;\n        }\n        var firstBaseUpdate = queue.firstBaseUpdate;\n        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n        var pendingQueue = queue.shared.pending;\n        if (pendingQueue !== null) {\n          queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n          // and last so that it's non-circular.\n\n          var lastPendingUpdate = pendingQueue;\n          var firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = null; // Append pending updates to base queue\n\n          if (lastBaseUpdate === null) {\n            firstBaseUpdate = firstPendingUpdate;\n          } else {\n            lastBaseUpdate.next = firstPendingUpdate;\n          }\n          lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n          // we need to transfer the updates to that queue, too. Because the base\n          // queue is a singly-linked list with no cycles, we can append to both\n          // lists and take advantage of structural sharing.\n          // TODO: Pass `current` as argument\n\n          var current = workInProgress.alternate;\n          if (current !== null) {\n            // This is always non-null on a ClassComponent or HostRoot\n            var currentQueue = current.updateQueue;\n            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n            if (currentLastBaseUpdate !== lastBaseUpdate) {\n              if (currentLastBaseUpdate === null) {\n                currentQueue.firstBaseUpdate = firstPendingUpdate;\n              } else {\n                currentLastBaseUpdate.next = firstPendingUpdate;\n              }\n              currentQueue.lastBaseUpdate = lastPendingUpdate;\n            }\n          }\n        } // These values may change as we process the queue.\n\n        if (firstBaseUpdate !== null) {\n          // Iterate through the list of updates to compute the result.\n          var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n          // from the original lanes.\n\n          var newLanes = NoLanes;\n          var newBaseState = null;\n          var newFirstBaseUpdate = null;\n          var newLastBaseUpdate = null;\n          var update = firstBaseUpdate;\n          do {\n            var updateLane = update.lane;\n            var updateEventTime = update.eventTime;\n            if (!isSubsetOfLanes(renderLanes, updateLane)) {\n              // Priority is insufficient. Skip this update. If this is the first\n              // skipped update, the previous update/state is the new base\n              // update/state.\n              var clone = {\n                eventTime: updateEventTime,\n                lane: updateLane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: update.callback,\n                next: null\n              };\n              if (newLastBaseUpdate === null) {\n                newFirstBaseUpdate = newLastBaseUpdate = clone;\n                newBaseState = newState;\n              } else {\n                newLastBaseUpdate = newLastBaseUpdate.next = clone;\n              } // Update the remaining priority in the queue.\n\n              newLanes = mergeLanes(newLanes, updateLane);\n            } else {\n              // This update does have sufficient priority.\n              if (newLastBaseUpdate !== null) {\n                var _clone = {\n                  eventTime: updateEventTime,\n                  // This update is going to be committed so we never want uncommit\n                  // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                  // this will never be skipped by the check above.\n                  lane: NoLane,\n                  tag: update.tag,\n                  payload: update.payload,\n                  callback: update.callback,\n                  next: null\n                };\n                newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n              } // Process this update.\n\n              newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n              var callback = update.callback;\n              if (callback !== null &&\n              // If the update was already committed, we should not queue its\n              // callback again.\n              update.lane !== NoLane) {\n                workInProgress.flags |= Callback;\n                var effects = queue.effects;\n                if (effects === null) {\n                  queue.effects = [update];\n                } else {\n                  effects.push(update);\n                }\n              }\n            }\n            update = update.next;\n            if (update === null) {\n              pendingQueue = queue.shared.pending;\n              if (pendingQueue === null) {\n                break;\n              } else {\n                // An update was scheduled from inside a reducer. Add the new\n                // pending updates to the end of the list and keep processing.\n                var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n                // unravel them when transferring them to the base queue.\n\n                var _firstPendingUpdate = _lastPendingUpdate.next;\n                _lastPendingUpdate.next = null;\n                update = _firstPendingUpdate;\n                queue.lastBaseUpdate = _lastPendingUpdate;\n                queue.shared.pending = null;\n              }\n            }\n          } while (true);\n          if (newLastBaseUpdate === null) {\n            newBaseState = newState;\n          }\n          queue.baseState = newBaseState;\n          queue.firstBaseUpdate = newFirstBaseUpdate;\n          queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n          // process them during this render, but we do need to track which lanes\n          // are remaining.\n\n          var lastInterleaved = queue.shared.interleaved;\n          if (lastInterleaved !== null) {\n            var interleaved = lastInterleaved;\n            do {\n              newLanes = mergeLanes(newLanes, interleaved.lane);\n              interleaved = interleaved.next;\n            } while (interleaved !== lastInterleaved);\n          } else if (firstBaseUpdate === null) {\n            // `queue.lanes` is used for entangling transitions. We can set it back to\n            // zero once the queue is empty.\n            queue.shared.lanes = NoLanes;\n          } // Set the remaining expiration time to be whatever is remaining in the queue.\n          // This should be fine because the only two other things that contribute to\n          // expiration time are props and context. We're already in the middle of the\n          // begin phase by the time we start processing the queue, so we've already\n          // dealt with the props. Context in components that specify\n          // shouldComponentUpdate is tricky; but we'll have to account for\n          // that regardless.\n\n          markSkippedUpdateLanes(newLanes);\n          workInProgress.lanes = newLanes;\n          workInProgress.memoizedState = newState;\n        }\n        {\n          currentlyProcessingQueue = null;\n        }\n      }\n      function callCallback(callback, context) {\n        if (typeof callback !== 'function') {\n          throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n        }\n        callback.call(context);\n      }\n      function resetHasForceUpdateBeforeProcessing() {\n        hasForceUpdate = false;\n      }\n      function checkHasForceUpdateAfterProcessing() {\n        return hasForceUpdate;\n      }\n      function commitUpdateQueue(finishedWork, finishedQueue, instance) {\n        // Commit the effects\n        var effects = finishedQueue.effects;\n        finishedQueue.effects = null;\n        if (effects !== null) {\n          for (var i = 0; i < effects.length; i++) {\n            var effect = effects[i];\n            var callback = effect.callback;\n            if (callback !== null) {\n              effect.callback = null;\n              callCallback(callback, instance);\n            }\n          }\n        }\n      }\n      var fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n      // We'll use it to determine whether we need to initialize legacy refs.\n\n      var emptyRefsObject = new React$1.Component().refs;\n      var didWarnAboutStateAssignmentForComponent;\n      var didWarnAboutUninitializedState;\n      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n      var didWarnAboutLegacyLifecyclesAndDerivedState;\n      var didWarnAboutUndefinedDerivedState;\n      var warnOnUndefinedDerivedState;\n      var warnOnInvalidCallback;\n      var didWarnAboutDirectlyAssigningPropsToState;\n      var didWarnAboutContextTypeAndContextTypes;\n      var didWarnAboutInvalidateContextType;\n      {\n        didWarnAboutStateAssignmentForComponent = new Set();\n        didWarnAboutUninitializedState = new Set();\n        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n        didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n        didWarnAboutDirectlyAssigningPropsToState = new Set();\n        didWarnAboutUndefinedDerivedState = new Set();\n        didWarnAboutContextTypeAndContextTypes = new Set();\n        didWarnAboutInvalidateContextType = new Set();\n        var didWarnOnInvalidCallback = new Set();\n        warnOnInvalidCallback = function (callback, callerName) {\n          if (callback === null || typeof callback === 'function') {\n            return;\n          }\n          var key = callerName + '_' + callback;\n          if (!didWarnOnInvalidCallback.has(key)) {\n            didWarnOnInvalidCallback.add(key);\n            error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n          }\n        };\n        warnOnUndefinedDerivedState = function (type, partialState) {\n          if (partialState === undefined) {\n            var componentName = getComponentNameFromType(type) || 'Component';\n            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n              didWarnAboutUndefinedDerivedState.add(componentName);\n              error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n            }\n          }\n        }; // This is so gross but it's at least non-critical and can be removed if\n        // it causes problems. This is meant to give a nicer error message for\n        // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n        // ...)) which otherwise throws a \"_processChildContext is not a function\"\n        // exception.\n\n        Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n          enumerable: false,\n          value: function () {\n            throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n          }\n        });\n        Object.freeze(fakeInternalInstance);\n      }\n      function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n        var prevState = workInProgress.memoizedState;\n        var partialState = getDerivedStateFromProps(nextProps, prevState);\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              // Invoke the function an extra time to help detect side-effects.\n              partialState = getDerivedStateFromProps(nextProps, prevState);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          warnOnUndefinedDerivedState(ctor, partialState);\n        } // Merge the partial state and the previous state.\n\n        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n        // base state.\n\n        if (workInProgress.lanes === NoLanes) {\n          // Queue is always non-null for classes\n          var updateQueue = workInProgress.updateQueue;\n          updateQueue.baseState = memoizedState;\n        }\n      }\n      var classComponentUpdater = {\n        isMounted: isMounted,\n        enqueueSetState: function (inst, payload, callback) {\n          var fiber = get(inst);\n          var eventTime = requestEventTime();\n          var lane = requestUpdateLane(fiber);\n          var update = createUpdate(eventTime, lane);\n          update.payload = payload;\n          if (callback !== undefined && callback !== null) {\n            {\n              warnOnInvalidCallback(callback, 'setState');\n            }\n            update.callback = callback;\n          }\n          var root = enqueueUpdate(fiber, update, lane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n            entangleTransitions(root, fiber, lane);\n          }\n          {\n            markStateUpdateScheduled(fiber, lane);\n          }\n        },\n        enqueueReplaceState: function (inst, payload, callback) {\n          var fiber = get(inst);\n          var eventTime = requestEventTime();\n          var lane = requestUpdateLane(fiber);\n          var update = createUpdate(eventTime, lane);\n          update.tag = ReplaceState;\n          update.payload = payload;\n          if (callback !== undefined && callback !== null) {\n            {\n              warnOnInvalidCallback(callback, 'replaceState');\n            }\n            update.callback = callback;\n          }\n          var root = enqueueUpdate(fiber, update, lane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n            entangleTransitions(root, fiber, lane);\n          }\n          {\n            markStateUpdateScheduled(fiber, lane);\n          }\n        },\n        enqueueForceUpdate: function (inst, callback) {\n          var fiber = get(inst);\n          var eventTime = requestEventTime();\n          var lane = requestUpdateLane(fiber);\n          var update = createUpdate(eventTime, lane);\n          update.tag = ForceUpdate;\n          if (callback !== undefined && callback !== null) {\n            {\n              warnOnInvalidCallback(callback, 'forceUpdate');\n            }\n            update.callback = callback;\n          }\n          var root = enqueueUpdate(fiber, update, lane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n            entangleTransitions(root, fiber, lane);\n          }\n          {\n            markForceUpdateScheduled(fiber, lane);\n          }\n        }\n      };\n      function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n        var instance = workInProgress.stateNode;\n        if (typeof instance.shouldComponentUpdate === 'function') {\n          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n          {\n            if (workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n              try {\n                // Invoke the function an extra time to help detect side-effects.\n                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n            if (shouldUpdate === undefined) {\n              error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n            }\n          }\n          return shouldUpdate;\n        }\n        if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n        }\n        return true;\n      }\n      function checkClassInstance(workInProgress, ctor, newProps) {\n        var instance = workInProgress.stateNode;\n        {\n          var name = getComponentNameFromType(ctor) || 'Component';\n          var renderPresent = instance.render;\n          if (!renderPresent) {\n            if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n              error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n            } else {\n              error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n            }\n          }\n          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n            error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n          }\n          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n            error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n          }\n          if (instance.propTypes) {\n            error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n          }\n          if (instance.contextType) {\n            error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n          }\n          {\n            if (instance.contextTypes) {\n              error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n            }\n            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n              didWarnAboutContextTypeAndContextTypes.add(ctor);\n              error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n            }\n          }\n          if (typeof instance.componentShouldUpdate === 'function') {\n            error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n          }\n          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n            error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n          }\n          if (typeof instance.componentDidUnmount === 'function') {\n            error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n          }\n          if (typeof instance.componentDidReceiveProps === 'function') {\n            error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n          }\n          if (typeof instance.componentWillRecieveProps === 'function') {\n            error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n          }\n          if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n            error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n          }\n          var hasMutatedProps = instance.props !== newProps;\n          if (instance.props !== undefined && hasMutatedProps) {\n            error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n          }\n          if (instance.defaultProps) {\n            error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n          }\n          if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n            error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n          }\n          if (typeof instance.getDerivedStateFromProps === 'function') {\n            error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n          }\n          if (typeof instance.getDerivedStateFromError === 'function') {\n            error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n          }\n          if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n            error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n          }\n          var _state = instance.state;\n          if (_state && (typeof _state !== 'object' || isArray(_state))) {\n            error('%s.state: must be set to an object or null', name);\n          }\n          if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n            error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n          }\n        }\n      }\n      function adoptClassInstance(workInProgress, instance) {\n        instance.updater = classComponentUpdater;\n        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n        set(instance, workInProgress);\n        {\n          instance._reactInternalInstance = fakeInternalInstance;\n        }\n      }\n      function constructClassInstance(workInProgress, ctor, props) {\n        var isLegacyContextConsumer = false;\n        var unmaskedContext = emptyContextObject;\n        var context = emptyContextObject;\n        var contextType = ctor.contextType;\n        {\n          if ('contextType' in ctor) {\n            var isValid =\n            // Allow null for conditional declaration\n            contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n              didWarnAboutInvalidateContextType.add(ctor);\n              var addendum = '';\n              if (contextType === undefined) {\n                addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n              } else if (typeof contextType !== 'object') {\n                addendum = ' However, it is set to a ' + typeof contextType + '.';\n              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n                addendum = ' Did you accidentally pass the Context.Provider instead?';\n              } else if (contextType._context !== undefined) {\n                // <Context.Consumer>\n                addendum = ' Did you accidentally pass the Context.Consumer instead?';\n              } else {\n                addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n              }\n              error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n            }\n          }\n        }\n        if (typeof contextType === 'object' && contextType !== null) {\n          context = readContext(contextType);\n        } else {\n          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          var contextTypes = ctor.contextTypes;\n          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n          context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n        }\n        var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              instance = new ctor(props, context); // eslint-disable-line no-new\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n        }\n        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n        adoptClassInstance(workInProgress, instance);\n        {\n          if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n            var componentName = getComponentNameFromType(ctor) || 'Component';\n            if (!didWarnAboutUninitializedState.has(componentName)) {\n              didWarnAboutUninitializedState.add(componentName);\n              error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n            }\n          } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n          // Warn about these lifecycles if they are present.\n          // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n          if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n            var foundWillMountName = null;\n            var foundWillReceivePropsName = null;\n            var foundWillUpdateName = null;\n            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n              foundWillMountName = 'componentWillMount';\n            } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n              foundWillMountName = 'UNSAFE_componentWillMount';\n            }\n            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n              foundWillReceivePropsName = 'componentWillReceiveProps';\n            } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n              foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n            }\n            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n              foundWillUpdateName = 'componentWillUpdate';\n            } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n              foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n            }\n            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n              var _componentName = getComponentNameFromType(ctor) || 'Component';\n              var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n                error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n              }\n            }\n          }\n        } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n        // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n        if (isLegacyContextConsumer) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n        return instance;\n      }\n      function callComponentWillMount(workInProgress, instance) {\n        var oldState = instance.state;\n        if (typeof instance.componentWillMount === 'function') {\n          instance.componentWillMount();\n        }\n        if (typeof instance.UNSAFE_componentWillMount === 'function') {\n          instance.UNSAFE_componentWillMount();\n        }\n        if (oldState !== instance.state) {\n          {\n            error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n          }\n          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n        }\n      }\n      function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n        var oldState = instance.state;\n        if (typeof instance.componentWillReceiveProps === 'function') {\n          instance.componentWillReceiveProps(newProps, nextContext);\n        }\n        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n        }\n        if (instance.state !== oldState) {\n          {\n            var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n              didWarnAboutStateAssignmentForComponent.add(componentName);\n              error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n            }\n          }\n          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n        }\n      } // Invokes the mount life-cycles on a previously never rendered instance.\n\n      function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n        {\n          checkClassInstance(workInProgress, ctor, newProps);\n        }\n        var instance = workInProgress.stateNode;\n        instance.props = newProps;\n        instance.state = workInProgress.memoizedState;\n        instance.refs = emptyRefsObject;\n        initializeUpdateQueue(workInProgress);\n        var contextType = ctor.contextType;\n        if (typeof contextType === 'object' && contextType !== null) {\n          instance.context = readContext(contextType);\n        } else {\n          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          instance.context = getMaskedContext(workInProgress, unmaskedContext);\n        }\n        {\n          if (instance.state === newProps) {\n            var componentName = getComponentNameFromType(ctor) || 'Component';\n            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n              didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n              error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n            }\n          }\n          if (workInProgress.mode & StrictLegacyMode) {\n            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n          }\n          {\n            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n          }\n        }\n        instance.state = workInProgress.memoizedState;\n        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n        if (typeof getDerivedStateFromProps === 'function') {\n          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n          instance.state = workInProgress.memoizedState;\n        } // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n          callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n          // process them now.\n\n          processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n          instance.state = workInProgress.memoizedState;\n        }\n        if (typeof instance.componentDidMount === 'function') {\n          var fiberFlags = Update;\n          {\n            fiberFlags |= LayoutStatic;\n          }\n          if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n            fiberFlags |= MountLayoutDev;\n          }\n          workInProgress.flags |= fiberFlags;\n        }\n      }\n      function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n        var instance = workInProgress.stateNode;\n        var oldProps = workInProgress.memoizedProps;\n        instance.props = oldProps;\n        var oldContext = instance.context;\n        var contextType = ctor.contextType;\n        var nextContext = emptyContextObject;\n        if (typeof contextType === 'object' && contextType !== null) {\n          nextContext = readContext(contextType);\n        } else {\n          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n        }\n        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n        // ever the previously attempted to render - not the \"current\". However,\n        // during componentDidUpdate we pass the \"current\" props.\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n          if (oldProps !== newProps || oldContext !== nextContext) {\n            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n          }\n        }\n        resetHasForceUpdateBeforeProcessing();\n        var oldState = workInProgress.memoizedState;\n        var newState = instance.state = oldState;\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        newState = workInProgress.memoizedState;\n        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidMount === 'function') {\n            var fiberFlags = Update;\n            {\n              fiberFlags |= LayoutStatic;\n            }\n            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n              fiberFlags |= MountLayoutDev;\n            }\n            workInProgress.flags |= fiberFlags;\n          }\n          return false;\n        }\n        if (typeof getDerivedStateFromProps === 'function') {\n          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n          newState = workInProgress.memoizedState;\n        }\n        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n        if (shouldUpdate) {\n          // In order to support react-lifecycles-compat polyfilled components,\n          // Unsafe lifecycles should not be invoked for components using the new APIs.\n          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n            if (typeof instance.componentWillMount === 'function') {\n              instance.componentWillMount();\n            }\n            if (typeof instance.UNSAFE_componentWillMount === 'function') {\n              instance.UNSAFE_componentWillMount();\n            }\n          }\n          if (typeof instance.componentDidMount === 'function') {\n            var _fiberFlags = Update;\n            {\n              _fiberFlags |= LayoutStatic;\n            }\n            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n              _fiberFlags |= MountLayoutDev;\n            }\n            workInProgress.flags |= _fiberFlags;\n          }\n        } else {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidMount === 'function') {\n            var _fiberFlags2 = Update;\n            {\n              _fiberFlags2 |= LayoutStatic;\n            }\n            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n              _fiberFlags2 |= MountLayoutDev;\n            }\n            workInProgress.flags |= _fiberFlags2;\n          } // If shouldComponentUpdate returned false, we should still update the\n          // memoized state to indicate that this work can be reused.\n\n          workInProgress.memoizedProps = newProps;\n          workInProgress.memoizedState = newState;\n        } // Update the existing instance's state, props, and context pointers even\n        // if shouldComponentUpdate returns false.\n\n        instance.props = newProps;\n        instance.state = newState;\n        instance.context = nextContext;\n        return shouldUpdate;\n      } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n      function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n        var instance = workInProgress.stateNode;\n        cloneUpdateQueue(current, workInProgress);\n        var unresolvedOldProps = workInProgress.memoizedProps;\n        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n        instance.props = oldProps;\n        var unresolvedNewProps = workInProgress.pendingProps;\n        var oldContext = instance.context;\n        var contextType = ctor.contextType;\n        var nextContext = emptyContextObject;\n        if (typeof contextType === 'object' && contextType !== null) {\n          nextContext = readContext(contextType);\n        } else {\n          var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n        }\n        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n        // ever the previously attempted to render - not the \"current\". However,\n        // during componentDidUpdate we pass the \"current\" props.\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n            callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n          }\n        }\n        resetHasForceUpdateBeforeProcessing();\n        var oldState = workInProgress.memoizedState;\n        var newState = instance.state = oldState;\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        newState = workInProgress.memoizedState;\n        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidUpdate === 'function') {\n            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.flags |= Update;\n            }\n          }\n          if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.flags |= Snapshot;\n            }\n          }\n          return false;\n        }\n        if (typeof getDerivedStateFromProps === 'function') {\n          applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n          newState = workInProgress.memoizedState;\n        }\n        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) ||\n        // TODO: In some cases, we'll end up checking if context has changed twice,\n        // both before and after `shouldComponentUpdate` has been called. Not ideal,\n        // but I'm loath to refactor this function. This only happens for memoized\n        // components so it's not that common.\n        enableLazyContextPropagation;\n        if (shouldUpdate) {\n          // In order to support react-lifecycles-compat polyfilled components,\n          // Unsafe lifecycles should not be invoked for components using the new APIs.\n          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n            if (typeof instance.componentWillUpdate === 'function') {\n              instance.componentWillUpdate(newProps, newState, nextContext);\n            }\n            if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n            }\n          }\n          if (typeof instance.componentDidUpdate === 'function') {\n            workInProgress.flags |= Update;\n          }\n          if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n            workInProgress.flags |= Snapshot;\n          }\n        } else {\n          // If an update was already in progress, we should schedule an Update\n          // effect even though we're bailing out, so that cWU/cDU are called.\n          if (typeof instance.componentDidUpdate === 'function') {\n            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.flags |= Update;\n            }\n          }\n          if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n            if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n              workInProgress.flags |= Snapshot;\n            }\n          } // If shouldComponentUpdate returned false, we should still update the\n          // memoized props/state to indicate that this work can be reused.\n\n          workInProgress.memoizedProps = newProps;\n          workInProgress.memoizedState = newState;\n        } // Update the existing instance's state, props, and context pointers even\n        // if shouldComponentUpdate returns false.\n\n        instance.props = newProps;\n        instance.state = newState;\n        instance.context = nextContext;\n        return shouldUpdate;\n      }\n      var didWarnAboutMaps;\n      var didWarnAboutGenerators;\n      var didWarnAboutStringRefs;\n      var ownerHasKeyUseWarning;\n      var ownerHasFunctionTypeWarning;\n      var warnForMissingKey = function (child, returnFiber) {};\n      {\n        didWarnAboutMaps = false;\n        didWarnAboutGenerators = false;\n        didWarnAboutStringRefs = {};\n        /**\n         * Warn if there's no key explicitly set on dynamic arrays of children or\n         * object keys are not valid. This allows us to keep track of children between\n         * updates.\n         */\n\n        ownerHasKeyUseWarning = {};\n        ownerHasFunctionTypeWarning = {};\n        warnForMissingKey = function (child, returnFiber) {\n          if (child === null || typeof child !== 'object') {\n            return;\n          }\n          if (!child._store || child._store.validated || child.key != null) {\n            return;\n          }\n          if (typeof child._store !== 'object') {\n            throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n          }\n          child._store.validated = true;\n          var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n          if (ownerHasKeyUseWarning[componentName]) {\n            return;\n          }\n          ownerHasKeyUseWarning[componentName] = true;\n          error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n        };\n      }\n      function coerceRef(returnFiber, current, element) {\n        var mixedRef = element.ref;\n        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n          {\n            // TODO: Clean this up once we turn on the string ref warning for\n            // everyone, because the strict mode case will no longer be relevant\n            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n            // We warn in ReactElement.js if owner and self are equal for string refs\n            // because these cannot be automatically converted to an arrow function\n            // using a codemod. Therefore, we don't have to warn about string refs again.\n            !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n              var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n              if (!didWarnAboutStringRefs[componentName]) {\n                {\n                  error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n                }\n                didWarnAboutStringRefs[componentName] = true;\n              }\n            }\n          }\n          if (element._owner) {\n            var owner = element._owner;\n            var inst;\n            if (owner) {\n              var ownerFiber = owner;\n              if (ownerFiber.tag !== ClassComponent) {\n                throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n              }\n              inst = ownerFiber.stateNode;\n            }\n            if (!inst) {\n              throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n            } // Assigning this to a const so Flow knows it won't change in the closure\n\n            var resolvedInst = inst;\n            {\n              checkPropStringCoercion(mixedRef, 'ref');\n            }\n            var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n            if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n              return current.ref;\n            }\n            var ref = function (value) {\n              var refs = resolvedInst.refs;\n              if (refs === emptyRefsObject) {\n                // This is a lazy pooled frozen object, so we need to initialize.\n                refs = resolvedInst.refs = {};\n              }\n              if (value === null) {\n                delete refs[stringRef];\n              } else {\n                refs[stringRef] = value;\n              }\n            };\n            ref._stringRef = stringRef;\n            return ref;\n          } else {\n            if (typeof mixedRef !== 'string') {\n              throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n            }\n            if (!element._owner) {\n              throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n            }\n          }\n        }\n        return mixedRef;\n      }\n      function throwOnInvalidObjectType(returnFiber, newChild) {\n        var childString = Object.prototype.toString.call(newChild);\n        throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n      }\n      function warnOnFunctionType(returnFiber) {\n        {\n          var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n          if (ownerHasFunctionTypeWarning[componentName]) {\n            return;\n          }\n          ownerHasFunctionTypeWarning[componentName] = true;\n          error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n        }\n      }\n      function resolveLazy(lazyType) {\n        var payload = lazyType._payload;\n        var init = lazyType._init;\n        return init(payload);\n      } // This wrapper function exists because I expect to clone the code in each path\n      // to be able to optimize each path individually by branching early. This needs\n      // a compiler or we can do it manually. Helpers that don't need this branching\n      // live outside of this function.\n\n      function ChildReconciler(shouldTrackSideEffects) {\n        function deleteChild(returnFiber, childToDelete) {\n          if (!shouldTrackSideEffects) {\n            // Noop.\n            return;\n          }\n          var deletions = returnFiber.deletions;\n          if (deletions === null) {\n            returnFiber.deletions = [childToDelete];\n            returnFiber.flags |= ChildDeletion;\n          } else {\n            deletions.push(childToDelete);\n          }\n        }\n        function deleteRemainingChildren(returnFiber, currentFirstChild) {\n          if (!shouldTrackSideEffects) {\n            // Noop.\n            return null;\n          } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n          // assuming that after the first child we've already added everything.\n\n          var childToDelete = currentFirstChild;\n          while (childToDelete !== null) {\n            deleteChild(returnFiber, childToDelete);\n            childToDelete = childToDelete.sibling;\n          }\n          return null;\n        }\n        function mapRemainingChildren(returnFiber, currentFirstChild) {\n          // Add the remaining children to a temporary map so that we can find them by\n          // keys quickly. Implicit (null) keys get added to this set with their index\n          // instead.\n          var existingChildren = new Map();\n          var existingChild = currentFirstChild;\n          while (existingChild !== null) {\n            if (existingChild.key !== null) {\n              existingChildren.set(existingChild.key, existingChild);\n            } else {\n              existingChildren.set(existingChild.index, existingChild);\n            }\n            existingChild = existingChild.sibling;\n          }\n          return existingChildren;\n        }\n        function useFiber(fiber, pendingProps) {\n          // We currently set sibling to null and index to 0 here because it is easy\n          // to forget to do before returning it. E.g. for the single child case.\n          var clone = createWorkInProgress(fiber, pendingProps);\n          clone.index = 0;\n          clone.sibling = null;\n          return clone;\n        }\n        function placeChild(newFiber, lastPlacedIndex, newIndex) {\n          newFiber.index = newIndex;\n          if (!shouldTrackSideEffects) {\n            // During hydration, the useId algorithm needs to know which fibers are\n            // part of a list of children (arrays, iterators).\n            newFiber.flags |= Forked;\n            return lastPlacedIndex;\n          }\n          var current = newFiber.alternate;\n          if (current !== null) {\n            var oldIndex = current.index;\n            if (oldIndex < lastPlacedIndex) {\n              // This is a move.\n              newFiber.flags |= Placement;\n              return lastPlacedIndex;\n            } else {\n              // This item can stay in place.\n              return oldIndex;\n            }\n          } else {\n            // This is an insertion.\n            newFiber.flags |= Placement;\n            return lastPlacedIndex;\n          }\n        }\n        function placeSingleChild(newFiber) {\n          // This is simpler for the single child case. We only need to do a\n          // placement for inserting new children.\n          if (shouldTrackSideEffects && newFiber.alternate === null) {\n            newFiber.flags |= Placement;\n          }\n          return newFiber;\n        }\n        function updateTextNode(returnFiber, current, textContent, lanes) {\n          if (current === null || current.tag !== HostText) {\n            // Insert\n            var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n            created.return = returnFiber;\n            return created;\n          } else {\n            // Update\n            var existing = useFiber(current, textContent);\n            existing.return = returnFiber;\n            return existing;\n          }\n        }\n        function updateElement(returnFiber, current, element, lanes) {\n          var elementType = element.type;\n          if (elementType === REACT_FRAGMENT_TYPE) {\n            return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n          }\n          if (current !== null) {\n            if (current.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            isCompatibleFamilyForHotReloading(current, element) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n              // Move based on index\n              var existing = useFiber(current, element.props);\n              existing.ref = coerceRef(returnFiber, current, element);\n              existing.return = returnFiber;\n              {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n          } // Insert\n\n          var created = createFiberFromElement(element, returnFiber.mode, lanes);\n          created.ref = coerceRef(returnFiber, current, element);\n          created.return = returnFiber;\n          return created;\n        }\n        function updatePortal(returnFiber, current, portal, lanes) {\n          if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n            // Insert\n            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n            created.return = returnFiber;\n            return created;\n          } else {\n            // Update\n            var existing = useFiber(current, portal.children || []);\n            existing.return = returnFiber;\n            return existing;\n          }\n        }\n        function updateFragment(returnFiber, current, fragment, lanes, key) {\n          if (current === null || current.tag !== Fragment) {\n            // Insert\n            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n            created.return = returnFiber;\n            return created;\n          } else {\n            // Update\n            var existing = useFiber(current, fragment);\n            existing.return = returnFiber;\n            return existing;\n          }\n        }\n        function createChild(returnFiber, newChild, lanes) {\n          if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n            // Text nodes don't have keys. If the previous node is implicitly keyed\n            // we can continue to replace it without aborting even if it is not a text\n            // node.\n            var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n            created.return = returnFiber;\n            return created;\n          }\n          if (typeof newChild === 'object' && newChild !== null) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                {\n                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n                  _created.ref = coerceRef(returnFiber, null, newChild);\n                  _created.return = returnFiber;\n                  return _created;\n                }\n              case REACT_PORTAL_TYPE:\n                {\n                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n                  _created2.return = returnFiber;\n                  return _created2;\n                }\n              case REACT_LAZY_TYPE:\n                {\n                  var payload = newChild._payload;\n                  var init = newChild._init;\n                  return createChild(returnFiber, init(payload), lanes);\n                }\n            }\n            if (isArray(newChild) || getIteratorFn(newChild)) {\n              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n              _created3.return = returnFiber;\n              return _created3;\n            }\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType(returnFiber);\n            }\n          }\n          return null;\n        }\n        function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n          // Update the fiber if the keys match, otherwise return null.\n          var key = oldFiber !== null ? oldFiber.key : null;\n          if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n            // Text nodes don't have keys. If the previous node is implicitly keyed\n            // we can continue to replace it without aborting even if it is not a text\n            // node.\n            if (key !== null) {\n              return null;\n            }\n            return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n          }\n          if (typeof newChild === 'object' && newChild !== null) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                {\n                  if (newChild.key === key) {\n                    return updateElement(returnFiber, oldFiber, newChild, lanes);\n                  } else {\n                    return null;\n                  }\n                }\n              case REACT_PORTAL_TYPE:\n                {\n                  if (newChild.key === key) {\n                    return updatePortal(returnFiber, oldFiber, newChild, lanes);\n                  } else {\n                    return null;\n                  }\n                }\n              case REACT_LAZY_TYPE:\n                {\n                  var payload = newChild._payload;\n                  var init = newChild._init;\n                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n                }\n            }\n            if (isArray(newChild) || getIteratorFn(newChild)) {\n              if (key !== null) {\n                return null;\n              }\n              return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n            }\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType(returnFiber);\n            }\n          }\n          return null;\n        }\n        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n          if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n            // Text nodes don't have keys, so we neither have to check the old nor\n            // new node for the key. If both are text nodes, they match.\n            var matchedFiber = existingChildren.get(newIdx) || null;\n            return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n          }\n          if (typeof newChild === 'object' && newChild !== null) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                {\n                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n                }\n              case REACT_PORTAL_TYPE:\n                {\n                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n                }\n              case REACT_LAZY_TYPE:\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n            }\n            if (isArray(newChild) || getIteratorFn(newChild)) {\n              var _matchedFiber3 = existingChildren.get(newIdx) || null;\n              return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n            }\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType(returnFiber);\n            }\n          }\n          return null;\n        }\n        /**\n         * Warns if there is a duplicate or missing key\n         */\n\n        function warnOnInvalidKey(child, knownKeys, returnFiber) {\n          {\n            if (typeof child !== 'object' || child === null) {\n              return knownKeys;\n            }\n            switch (child.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n              case REACT_PORTAL_TYPE:\n                warnForMissingKey(child, returnFiber);\n                var key = child.key;\n                if (typeof key !== 'string') {\n                  break;\n                }\n                if (knownKeys === null) {\n                  knownKeys = new Set();\n                  knownKeys.add(key);\n                  break;\n                }\n                if (!knownKeys.has(key)) {\n                  knownKeys.add(key);\n                  break;\n                }\n                error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n                break;\n              case REACT_LAZY_TYPE:\n                var payload = child._payload;\n                var init = child._init;\n                warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n                break;\n            }\n          }\n          return knownKeys;\n        }\n        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n          // This algorithm can't optimize by searching from both ends since we\n          // don't have backpointers on fibers. I'm trying to see how far we can get\n          // with that model. If it ends up not being worth the tradeoffs, we can\n          // add it later.\n          // Even with a two ended optimization, we'd want to optimize for the case\n          // where there are few changes and brute force the comparison instead of\n          // going for the Map. It'd like to explore hitting that path first in\n          // forward-only mode and only go for the Map once we notice that we need\n          // lots of look ahead. This doesn't handle reversal as well as two ended\n          // search but that's unusual. Besides, for the two ended optimization to\n          // work on Iterables, we'd need to copy the whole set.\n          // In this first iteration, we'll just live with hitting the bad case\n          // (adding everything to a Map) in for every insert/move.\n          // If you change this code, also update reconcileChildrenIterator() which\n          // uses the same algorithm.\n          {\n            // First, validate keys.\n            var knownKeys = null;\n            for (var i = 0; i < newChildren.length; i++) {\n              var child = newChildren[i];\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n          var resultingFirstChild = null;\n          var previousNewFiber = null;\n          var oldFiber = currentFirstChild;\n          var lastPlacedIndex = 0;\n          var newIdx = 0;\n          var nextOldFiber = null;\n          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n            if (oldFiber.index > newIdx) {\n              nextOldFiber = oldFiber;\n              oldFiber = null;\n            } else {\n              nextOldFiber = oldFiber.sibling;\n            }\n            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n            if (newFiber === null) {\n              // TODO: This breaks on empty slots like null children. That's\n              // unfortunate because it triggers the slow path all the time. We need\n              // a better way to communicate whether this was a miss or null,\n              // boolean, undefined, etc.\n              if (oldFiber === null) {\n                oldFiber = nextOldFiber;\n              }\n              break;\n            }\n            if (shouldTrackSideEffects) {\n              if (oldFiber && newFiber.alternate === null) {\n                // We matched the slot, but we didn't reuse the existing fiber, so we\n                // need to delete the existing child.\n                deleteChild(returnFiber, oldFiber);\n              }\n            }\n            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = newFiber;\n            } else {\n              // TODO: Defer siblings if we're not at the right index for this slot.\n              // I.e. if we had null values before, then we want to defer this\n              // for each null value. However, we also don't want to call updateSlot\n              // with the previous one.\n              previousNewFiber.sibling = newFiber;\n            }\n            previousNewFiber = newFiber;\n            oldFiber = nextOldFiber;\n          }\n          if (newIdx === newChildren.length) {\n            // We've reached the end of the new children. We can delete the rest.\n            deleteRemainingChildren(returnFiber, oldFiber);\n            if (getIsHydrating()) {\n              var numberOfForks = newIdx;\n              pushTreeFork(returnFiber, numberOfForks);\n            }\n            return resultingFirstChild;\n          }\n          if (oldFiber === null) {\n            // If we don't have any more existing children we can choose a fast path\n            // since the rest will all be insertions.\n            for (; newIdx < newChildren.length; newIdx++) {\n              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n              if (_newFiber === null) {\n                continue;\n              }\n              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n              if (previousNewFiber === null) {\n                // TODO: Move out of the loop. This only happens for the first run.\n                resultingFirstChild = _newFiber;\n              } else {\n                previousNewFiber.sibling = _newFiber;\n              }\n              previousNewFiber = _newFiber;\n            }\n            if (getIsHydrating()) {\n              var _numberOfForks = newIdx;\n              pushTreeFork(returnFiber, _numberOfForks);\n            }\n            return resultingFirstChild;\n          } // Add all children to a key map for quick lookups.\n\n          var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n            if (_newFiber2 !== null) {\n              if (shouldTrackSideEffects) {\n                if (_newFiber2.alternate !== null) {\n                  // The new fiber is a work in progress, but if there exists a\n                  // current, that means that we reused the fiber. We need to delete\n                  // it from the child list so that we don't add it to the deletion\n                  // list.\n                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n                }\n              }\n              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n              if (previousNewFiber === null) {\n                resultingFirstChild = _newFiber2;\n              } else {\n                previousNewFiber.sibling = _newFiber2;\n              }\n              previousNewFiber = _newFiber2;\n            }\n          }\n          if (shouldTrackSideEffects) {\n            // Any existing children that weren't consumed above were deleted. We need\n            // to add them to the deletion list.\n            existingChildren.forEach(function (child) {\n              return deleteChild(returnFiber, child);\n            });\n          }\n          if (getIsHydrating()) {\n            var _numberOfForks2 = newIdx;\n            pushTreeFork(returnFiber, _numberOfForks2);\n          }\n          return resultingFirstChild;\n        }\n        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n          // This is the same implementation as reconcileChildrenArray(),\n          // but using the iterator instead.\n          var iteratorFn = getIteratorFn(newChildrenIterable);\n          if (typeof iteratorFn !== 'function') {\n            throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n          }\n          {\n            // We don't support rendering Generators because it's a mutation.\n            // See https://github.com/facebook/react/issues/12995\n            if (typeof Symbol === 'function' &&\n            // $FlowFixMe Flow doesn't know about toStringTag\n            newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n              if (!didWarnAboutGenerators) {\n                error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n              }\n              didWarnAboutGenerators = true;\n            } // Warn about using Maps as children\n\n            if (newChildrenIterable.entries === iteratorFn) {\n              if (!didWarnAboutMaps) {\n                error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n              }\n              didWarnAboutMaps = true;\n            } // First, validate keys.\n            // We'll get a different iterator later for the main pass.\n\n            var _newChildren = iteratorFn.call(newChildrenIterable);\n            if (_newChildren) {\n              var knownKeys = null;\n              var _step = _newChildren.next();\n              for (; !_step.done; _step = _newChildren.next()) {\n                var child = _step.value;\n                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n              }\n            }\n          }\n          var newChildren = iteratorFn.call(newChildrenIterable);\n          if (newChildren == null) {\n            throw new Error('An iterable object provided no iterator.');\n          }\n          var resultingFirstChild = null;\n          var previousNewFiber = null;\n          var oldFiber = currentFirstChild;\n          var lastPlacedIndex = 0;\n          var newIdx = 0;\n          var nextOldFiber = null;\n          var step = newChildren.next();\n          for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n            if (oldFiber.index > newIdx) {\n              nextOldFiber = oldFiber;\n              oldFiber = null;\n            } else {\n              nextOldFiber = oldFiber.sibling;\n            }\n            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n            if (newFiber === null) {\n              // TODO: This breaks on empty slots like null children. That's\n              // unfortunate because it triggers the slow path all the time. We need\n              // a better way to communicate whether this was a miss or null,\n              // boolean, undefined, etc.\n              if (oldFiber === null) {\n                oldFiber = nextOldFiber;\n              }\n              break;\n            }\n            if (shouldTrackSideEffects) {\n              if (oldFiber && newFiber.alternate === null) {\n                // We matched the slot, but we didn't reuse the existing fiber, so we\n                // need to delete the existing child.\n                deleteChild(returnFiber, oldFiber);\n              }\n            }\n            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = newFiber;\n            } else {\n              // TODO: Defer siblings if we're not at the right index for this slot.\n              // I.e. if we had null values before, then we want to defer this\n              // for each null value. However, we also don't want to call updateSlot\n              // with the previous one.\n              previousNewFiber.sibling = newFiber;\n            }\n            previousNewFiber = newFiber;\n            oldFiber = nextOldFiber;\n          }\n          if (step.done) {\n            // We've reached the end of the new children. We can delete the rest.\n            deleteRemainingChildren(returnFiber, oldFiber);\n            if (getIsHydrating()) {\n              var numberOfForks = newIdx;\n              pushTreeFork(returnFiber, numberOfForks);\n            }\n            return resultingFirstChild;\n          }\n          if (oldFiber === null) {\n            // If we don't have any more existing children we can choose a fast path\n            // since the rest will all be insertions.\n            for (; !step.done; newIdx++, step = newChildren.next()) {\n              var _newFiber3 = createChild(returnFiber, step.value, lanes);\n              if (_newFiber3 === null) {\n                continue;\n              }\n              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n              if (previousNewFiber === null) {\n                // TODO: Move out of the loop. This only happens for the first run.\n                resultingFirstChild = _newFiber3;\n              } else {\n                previousNewFiber.sibling = _newFiber3;\n              }\n              previousNewFiber = _newFiber3;\n            }\n            if (getIsHydrating()) {\n              var _numberOfForks3 = newIdx;\n              pushTreeFork(returnFiber, _numberOfForks3);\n            }\n            return resultingFirstChild;\n          } // Add all children to a key map for quick lookups.\n\n          var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n            if (_newFiber4 !== null) {\n              if (shouldTrackSideEffects) {\n                if (_newFiber4.alternate !== null) {\n                  // The new fiber is a work in progress, but if there exists a\n                  // current, that means that we reused the fiber. We need to delete\n                  // it from the child list so that we don't add it to the deletion\n                  // list.\n                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n                }\n              }\n              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n              if (previousNewFiber === null) {\n                resultingFirstChild = _newFiber4;\n              } else {\n                previousNewFiber.sibling = _newFiber4;\n              }\n              previousNewFiber = _newFiber4;\n            }\n          }\n          if (shouldTrackSideEffects) {\n            // Any existing children that weren't consumed above were deleted. We need\n            // to add them to the deletion list.\n            existingChildren.forEach(function (child) {\n              return deleteChild(returnFiber, child);\n            });\n          }\n          if (getIsHydrating()) {\n            var _numberOfForks4 = newIdx;\n            pushTreeFork(returnFiber, _numberOfForks4);\n          }\n          return resultingFirstChild;\n        }\n        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n          // There's no need to check for keys on text nodes since we don't have a\n          // way to define them.\n          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n            // We already have an existing node so let's just update it and delete\n            // the rest.\n            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n            var existing = useFiber(currentFirstChild, textContent);\n            existing.return = returnFiber;\n            return existing;\n          } // The existing first child is not a text node so we need to create one\n          // and delete the existing ones.\n\n          deleteRemainingChildren(returnFiber, currentFirstChild);\n          var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        }\n        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n          var key = element.key;\n          var child = currentFirstChild;\n          while (child !== null) {\n            // TODO: If key === null and child.key === null, then this only applies to\n            // the first item in the list.\n            if (child.key === key) {\n              var elementType = element.type;\n              if (elementType === REACT_FRAGMENT_TYPE) {\n                if (child.tag === Fragment) {\n                  deleteRemainingChildren(returnFiber, child.sibling);\n                  var existing = useFiber(child, element.props.children);\n                  existing.return = returnFiber;\n                  {\n                    existing._debugSource = element._source;\n                    existing._debugOwner = element._owner;\n                  }\n                  return existing;\n                }\n              } else {\n                if (child.elementType === elementType ||\n                // Keep this check inline so it only runs on the false path:\n                isCompatibleFamilyForHotReloading(child, element) ||\n                // Lazy types should reconcile their resolved type.\n                // We need to do this after the Hot Reloading check above,\n                // because hot reloading has different semantics than prod because\n                // it doesn't resuspend. So we can't let the call below suspend.\n                typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n                  deleteRemainingChildren(returnFiber, child.sibling);\n                  var _existing = useFiber(child, element.props);\n                  _existing.ref = coerceRef(returnFiber, child, element);\n                  _existing.return = returnFiber;\n                  {\n                    _existing._debugSource = element._source;\n                    _existing._debugOwner = element._owner;\n                  }\n                  return _existing;\n                }\n              } // Didn't match.\n\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            } else {\n              deleteChild(returnFiber, child);\n            }\n            child = child.sibling;\n          }\n          if (element.type === REACT_FRAGMENT_TYPE) {\n            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n            created.return = returnFiber;\n            return created;\n          } else {\n            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n            _created4.return = returnFiber;\n            return _created4;\n          }\n        }\n        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n          var key = portal.key;\n          var child = currentFirstChild;\n          while (child !== null) {\n            // TODO: If key === null and child.key === null, then this only applies to\n            // the first item in the list.\n            if (child.key === key) {\n              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, portal.children || []);\n                existing.return = returnFiber;\n                return existing;\n              } else {\n                deleteRemainingChildren(returnFiber, child);\n                break;\n              }\n            } else {\n              deleteChild(returnFiber, child);\n            }\n            child = child.sibling;\n          }\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } // This API will tag the children with the side-effect of the reconciliation\n        // itself. They will be added to the side-effect list as we pass through the\n        // children and the parent.\n\n        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n          // This function is not recursive.\n          // If the top level item is an array, we treat it as a set of children,\n          // not as a fragment. Nested arrays on the other hand will be treated as\n          // fragment nodes. Recursion happens at the normal flow.\n          // Handle top level unkeyed fragments as if they were arrays.\n          // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n          // We treat the ambiguous cases above the same.\n          var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n          if (isUnkeyedTopLevelFragment) {\n            newChild = newChild.props.children;\n          } // Handle object types\n\n          if (typeof newChild === 'object' && newChild !== null) {\n            switch (newChild.$$typeof) {\n              case REACT_ELEMENT_TYPE:\n                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n              case REACT_PORTAL_TYPE:\n                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n              case REACT_LAZY_TYPE:\n                var payload = newChild._payload;\n                var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n                return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n            }\n            if (isArray(newChild)) {\n              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n            }\n            if (getIteratorFn(newChild)) {\n              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n            }\n            throwOnInvalidObjectType(returnFiber, newChild);\n          }\n          if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n          }\n          {\n            if (typeof newChild === 'function') {\n              warnOnFunctionType(returnFiber);\n            }\n          } // Remaining cases are all treated as empty.\n\n          return deleteRemainingChildren(returnFiber, currentFirstChild);\n        }\n        return reconcileChildFibers;\n      }\n      var reconcileChildFibers = ChildReconciler(true);\n      var mountChildFibers = ChildReconciler(false);\n      function cloneChildFibers(current, workInProgress) {\n        if (current !== null && workInProgress.child !== current.child) {\n          throw new Error('Resuming work not yet implemented.');\n        }\n        if (workInProgress.child === null) {\n          return;\n        }\n        var currentChild = workInProgress.child;\n        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n        workInProgress.child = newChild;\n        newChild.return = workInProgress;\n        while (currentChild.sibling !== null) {\n          currentChild = currentChild.sibling;\n          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n          newChild.return = workInProgress;\n        }\n        newChild.sibling = null;\n      } // Reset a workInProgress child set to prepare it for a second pass.\n\n      function resetChildFibers(workInProgress, lanes) {\n        var child = workInProgress.child;\n        while (child !== null) {\n          resetWorkInProgress(child, lanes);\n          child = child.sibling;\n        }\n      }\n      var NO_CONTEXT = {};\n      var contextStackCursor$1 = createCursor(NO_CONTEXT);\n      var contextFiberStackCursor = createCursor(NO_CONTEXT);\n      var rootInstanceStackCursor = createCursor(NO_CONTEXT);\n      function requiredContext(c) {\n        if (c === NO_CONTEXT) {\n          throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n        }\n        return c;\n      }\n      function getRootHostContainer() {\n        var rootInstance = requiredContext(rootInstanceStackCursor.current);\n        return rootInstance;\n      }\n      function pushHostContainer(fiber, nextRootInstance) {\n        // Push current root instance onto the stack;\n        // This allows us to reset root when portals are popped.\n        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n        // This enables us to pop only Fibers that provide unique contexts.\n\n        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n        // However, we can't just call getRootHostContext() and push it because\n        // we'd have a different number of entries on the stack depending on\n        // whether getRootHostContext() throws somewhere in renderer code or not.\n        // So we push an empty value first. This lets us safely unwind on errors.\n\n        push(contextStackCursor$1, NO_CONTEXT, fiber);\n        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n        pop(contextStackCursor$1, fiber);\n        push(contextStackCursor$1, nextRootContext, fiber);\n      }\n      function popHostContainer(fiber) {\n        pop(contextStackCursor$1, fiber);\n        pop(contextFiberStackCursor, fiber);\n        pop(rootInstanceStackCursor, fiber);\n      }\n      function getHostContext() {\n        var context = requiredContext(contextStackCursor$1.current);\n        return context;\n      }\n      function pushHostContext(fiber) {\n        var rootInstance = requiredContext(rootInstanceStackCursor.current);\n        var context = requiredContext(contextStackCursor$1.current);\n        var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n        if (context === nextContext) {\n          return;\n        } // Track the context and the Fiber that provided it.\n        // This enables us to pop only Fibers that provide unique contexts.\n\n        push(contextFiberStackCursor, fiber, fiber);\n        push(contextStackCursor$1, nextContext, fiber);\n      }\n      function popHostContext(fiber) {\n        // Do not pop unless this Fiber provided the current context.\n        // pushHostContext() only pushes Fibers that provide unique contexts.\n        if (contextFiberStackCursor.current !== fiber) {\n          return;\n        }\n        pop(contextStackCursor$1, fiber);\n        pop(contextFiberStackCursor, fiber);\n      }\n      var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n      // inherited deeply down the subtree. The upper bits only affect\n      // this immediate suspense boundary and gets reset each new\n      // boundary or suspense list.\n\n      var SubtreeSuspenseContextMask = 1; // Subtree Flags:\n      // InvisibleParentSuspenseContext indicates that one of our parent Suspense\n      // boundaries is not currently showing visible main content.\n      // Either because it is already showing a fallback or is not mounted at all.\n      // We can use this to determine if it is desirable to trigger a fallback at\n      // the parent. If not, then we might need to trigger undesirable boundaries\n      // and/or suspend the commit to avoid hiding the parent content.\n\n      var InvisibleParentSuspenseContext = 1; // Shallow Flags:\n      // ForceSuspenseFallback can be used by SuspenseList to force newly added\n      // items into their fallback state during one of the render passes.\n\n      var ForceSuspenseFallback = 2;\n      var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n      function hasSuspenseContext(parentContext, flag) {\n        return (parentContext & flag) !== 0;\n      }\n      function setDefaultShallowSuspenseContext(parentContext) {\n        return parentContext & SubtreeSuspenseContextMask;\n      }\n      function setShallowSuspenseContext(parentContext, shallowContext) {\n        return parentContext & SubtreeSuspenseContextMask | shallowContext;\n      }\n      function addSubtreeSuspenseContext(parentContext, subtreeContext) {\n        return parentContext | subtreeContext;\n      }\n      function pushSuspenseContext(fiber, newContext) {\n        push(suspenseStackCursor, newContext, fiber);\n      }\n      function popSuspenseContext(fiber) {\n        pop(suspenseStackCursor, fiber);\n      }\n      function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n        // If it was the primary children that just suspended, capture and render the\n        // fallback. Otherwise, don't capture and bubble to the next boundary.\n        var nextState = workInProgress.memoizedState;\n        if (nextState !== null) {\n          if (nextState.dehydrated !== null) {\n            // A dehydrated boundary always captures.\n            return true;\n          }\n          return false;\n        }\n        workInProgress.memoizedProps; // Regular boundaries always capture.\n\n        {\n          return true;\n        } // If it's a boundary we should avoid, then we prefer to bubble up to the\n      }\n      function findFirstSuspended(row) {\n        var node = row;\n        while (node !== null) {\n          if (node.tag === SuspenseComponent) {\n            var state = node.memoizedState;\n            if (state !== null) {\n              var dehydrated = state.dehydrated;\n              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n                return node;\n              }\n            }\n          } else if (node.tag === SuspenseListComponent &&\n          // revealOrder undefined can't be trusted because it don't\n          // keep track of whether it suspended or not.\n          node.memoizedProps.revealOrder !== undefined) {\n            var didSuspend = (node.flags & DidCapture) !== NoFlags;\n            if (didSuspend) {\n              return node;\n            }\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === row) {\n            return null;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === row) {\n              return null;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n        return null;\n      }\n      var NoFlags$1 = /*   */\n      0; // Represents whether effect should fire.\n\n      var HasEffect = /* */\n      1; // Represents the phase in which the effect (not the clean-up) fires.\n\n      var Insertion = /*  */\n      2;\n      var Layout = /*    */\n      4;\n      var Passive$1 = /*   */\n      8;\n\n      // and should be reset before starting a new render.\n      // This tracks which mutable sources need to be reset after a render.\n\n      var workInProgressSources = [];\n      function resetWorkInProgressVersions() {\n        for (var i = 0; i < workInProgressSources.length; i++) {\n          var mutableSource = workInProgressSources[i];\n          if (isPrimaryRenderer) {\n            mutableSource._workInProgressVersionPrimary = null;\n          } else {\n            mutableSource._workInProgressVersionSecondary = null;\n          }\n        }\n        workInProgressSources.length = 0;\n      }\n      // This ensures that the version used for server rendering matches the one\n      // that is eventually read during hydration.\n      // If they don't match there's a potential tear and a full deopt render is required.\n\n      function registerMutableSourceForHydration(root, mutableSource) {\n        var getVersion = mutableSource._getVersion;\n        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n        // Retaining it forever may interfere with GC.\n\n        if (root.mutableSourceEagerHydrationData == null) {\n          root.mutableSourceEagerHydrationData = [mutableSource, version];\n        } else {\n          root.mutableSourceEagerHydrationData.push(mutableSource, version);\n        }\n      }\n      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n        ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n      var didWarnAboutMismatchedHooksForComponent;\n      var didWarnUncachedGetSnapshot;\n      {\n        didWarnAboutMismatchedHooksForComponent = new Set();\n      }\n\n      // These are set right before calling the component.\n      var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n      // the work-in-progress hook.\n\n      var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n      // current hook list is the list that belongs to the current fiber. The\n      // work-in-progress hook list is a new list that will be added to the\n      // work-in-progress fiber.\n\n      var currentHook = null;\n      var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n      // does not get reset if we do another render pass; only when we're completely\n      // finished evaluating this component. This is an optimization so we know\n      // whether we need to clear render phase updates after a throw.\n\n      var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n      // gets reset after each attempt.\n      // TODO: Maybe there's some way to consolidate this with\n      // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n      var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\n      var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n      // hydration). This counter is global, so client ids are not stable across\n      // render attempts.\n\n      var globalClientIdCounter = 0;\n      var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n      var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n      // The list stores the order of hooks used during the initial render (mount).\n      // Subsequent renders (updates) reference this list.\n\n      var hookTypesDev = null;\n      var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n      // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n      // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n      var ignorePreviousDependencies = false;\n      function mountHookTypesDev() {\n        {\n          var hookName = currentHookNameInDev;\n          if (hookTypesDev === null) {\n            hookTypesDev = [hookName];\n          } else {\n            hookTypesDev.push(hookName);\n          }\n        }\n      }\n      function updateHookTypesDev() {\n        {\n          var hookName = currentHookNameInDev;\n          if (hookTypesDev !== null) {\n            hookTypesUpdateIndexDev++;\n            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n              warnOnHookMismatchInDev(hookName);\n            }\n          }\n        }\n      }\n      function checkDepsAreArrayDev(deps) {\n        {\n          if (deps !== undefined && deps !== null && !isArray(deps)) {\n            // Verify deps, but only on mount to avoid extra checks.\n            // It's unlikely their type would change as usually you define them inline.\n            error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n          }\n        }\n      }\n      function warnOnHookMismatchInDev(currentHookName) {\n        {\n          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n            didWarnAboutMismatchedHooksForComponent.add(componentName);\n            if (hookTypesDev !== null) {\n              var table = '';\n              var secondColumnStart = 30;\n              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n                var oldHookName = hookTypesDev[i];\n                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n                var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n                // lol @ IE not supporting String#repeat\n\n                while (row.length < secondColumnStart) {\n                  row += ' ';\n                }\n                row += newHookName + '\\n';\n                table += row;\n              }\n              error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n            }\n          }\n        }\n      }\n      function throwInvalidHookError() {\n        throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n      }\n      function areHookInputsEqual(nextDeps, prevDeps) {\n        {\n          if (ignorePreviousDependencies) {\n            // Only true when this component is being hot reloaded.\n            return false;\n          }\n        }\n        if (prevDeps === null) {\n          {\n            error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n          }\n          return false;\n        }\n        {\n          // Don't bother comparing lengths in prod because these arrays should be\n          // passed inline.\n          if (nextDeps.length !== prevDeps.length) {\n            error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n          }\n        }\n        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n          if (objectIs(nextDeps[i], prevDeps[i])) {\n            continue;\n          }\n          return false;\n        }\n        return true;\n      }\n      function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n        renderLanes = nextRenderLanes;\n        currentlyRenderingFiber$1 = workInProgress;\n        {\n          hookTypesDev = current !== null ? current._debugHookTypes : null;\n          hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n          ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n        }\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.lanes = NoLanes; // The following should have already been reset\n        // currentHook = null;\n        // workInProgressHook = null;\n        // didScheduleRenderPhaseUpdate = false;\n        // localIdCounter = 0;\n        // TODO Warn if no hooks are used at all during mount, then some are used during update.\n        // Currently we will identify the update render as a mount because memoizedState === null.\n        // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n        // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n        // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n        // so memoizedState would be null during updates and mounts.\n\n        {\n          if (current !== null && current.memoizedState !== null) {\n            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n          } else if (hookTypesDev !== null) {\n            // This dispatcher handles an edge case where a component is updating,\n            // but no stateful hooks have been used.\n            // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n            // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n            // This dispatcher does that.\n            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n          } else {\n            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n          }\n        }\n        var children = Component(props, secondArg); // Check if there was a render phase update\n\n        if (didScheduleRenderPhaseUpdateDuringThisPass) {\n          // Keep rendering in a loop for as long as render phase updates continue to\n          // be scheduled. Use a counter to prevent infinite loops.\n          var numberOfReRenders = 0;\n          do {\n            didScheduleRenderPhaseUpdateDuringThisPass = false;\n            localIdCounter = 0;\n            if (numberOfReRenders >= RE_RENDER_LIMIT) {\n              throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n            }\n            numberOfReRenders += 1;\n            {\n              // Even when hot reloading, allow dependencies to stabilize\n              // after first render to prevent infinite render phase updates.\n              ignorePreviousDependencies = false;\n            } // Start over from the beginning of the list\n\n            currentHook = null;\n            workInProgressHook = null;\n            workInProgress.updateQueue = null;\n            {\n              // Also validate hook order for cascading updates.\n              hookTypesUpdateIndexDev = -1;\n            }\n            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n            children = Component(props, secondArg);\n          } while (didScheduleRenderPhaseUpdateDuringThisPass);\n        } // We can assume the previous dispatcher is always this one, since we set it\n        // at the beginning of the render phase and there's no re-entrance.\n\n        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n        {\n          workInProgress._debugHookTypes = hookTypesDev;\n        } // This check uses currentHook so that it works the same in DEV and prod bundles.\n        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n        renderLanes = NoLanes;\n        currentlyRenderingFiber$1 = null;\n        currentHook = null;\n        workInProgressHook = null;\n        {\n          currentHookNameInDev = null;\n          hookTypesDev = null;\n          hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n          // render. If this fires, it suggests that we incorrectly reset the static\n          // flags in some other part of the codebase. This has happened before, for\n          // example, in the SuspenseList implementation.\n\n          if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) &&\n          // Disable this warning in legacy mode, because legacy Suspense is weird\n          // and creates false positives. To make this work in legacy mode, we'd\n          // need to mark fibers that commit in an incomplete state, somehow. For\n          // now I'll disable the warning that most of the bugs that would trigger\n          // it are either exclusive to concurrent mode or exist in both.\n          (current.mode & ConcurrentMode) !== NoMode) {\n            error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n          }\n        }\n        didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n        // localIdCounter = 0;\n\n        if (didRenderTooFewHooks) {\n          throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n        }\n        return children;\n      }\n      function checkDidRenderIdHook() {\n        // This should be called immediately after every renderWithHooks call.\n        // Conceptually, it's part of the return value of renderWithHooks; it's only a\n        // separate function to avoid using an array tuple.\n        var didRenderIdHook = localIdCounter !== 0;\n        localIdCounter = 0;\n        return didRenderIdHook;\n      }\n      function bailoutHooks(current, workInProgress, lanes) {\n        workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n        // complete phase (bubbleProperties).\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n        } else {\n          workInProgress.flags &= ~(Passive | Update);\n        }\n        current.lanes = removeLanes(current.lanes, lanes);\n      }\n      function resetHooksAfterThrow() {\n        // We can assume the previous dispatcher is always this one, since we set it\n        // at the beginning of the render phase and there's no re-entrance.\n        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n        if (didScheduleRenderPhaseUpdate) {\n          // There were render phase updates. These are only valid for this render\n          // phase, which we are now aborting. Remove the updates from the queues so\n          // they do not persist to the next render. Do not remove updates from hooks\n          // that weren't processed.\n          //\n          // Only reset the updates from the queue if it has a clone. If it does\n          // not have a clone, that means it wasn't processed, and the updates were\n          // scheduled before we entered the render phase.\n          var hook = currentlyRenderingFiber$1.memoizedState;\n          while (hook !== null) {\n            var queue = hook.queue;\n            if (queue !== null) {\n              queue.pending = null;\n            }\n            hook = hook.next;\n          }\n          didScheduleRenderPhaseUpdate = false;\n        }\n        renderLanes = NoLanes;\n        currentlyRenderingFiber$1 = null;\n        currentHook = null;\n        workInProgressHook = null;\n        {\n          hookTypesDev = null;\n          hookTypesUpdateIndexDev = -1;\n          currentHookNameInDev = null;\n          isUpdatingOpaqueValueInRenderPhase = false;\n        }\n        didScheduleRenderPhaseUpdateDuringThisPass = false;\n        localIdCounter = 0;\n      }\n      function mountWorkInProgressHook() {\n        var hook = {\n          memoizedState: null,\n          baseState: null,\n          baseQueue: null,\n          queue: null,\n          next: null\n        };\n        if (workInProgressHook === null) {\n          // This is the first hook in the list\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n        } else {\n          // Append to the end of the list\n          workInProgressHook = workInProgressHook.next = hook;\n        }\n        return workInProgressHook;\n      }\n      function updateWorkInProgressHook() {\n        // This function is used both for updates and for re-renders triggered by a\n        // render phase update. It assumes there is either a current hook we can\n        // clone, or a work-in-progress hook from a previous render pass that we can\n        // use as a base. When we reach the end of the base list, we must switch to\n        // the dispatcher used for mounts.\n        var nextCurrentHook;\n        if (currentHook === null) {\n          var current = currentlyRenderingFiber$1.alternate;\n          if (current !== null) {\n            nextCurrentHook = current.memoizedState;\n          } else {\n            nextCurrentHook = null;\n          }\n        } else {\n          nextCurrentHook = currentHook.next;\n        }\n        var nextWorkInProgressHook;\n        if (workInProgressHook === null) {\n          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n        } else {\n          nextWorkInProgressHook = workInProgressHook.next;\n        }\n        if (nextWorkInProgressHook !== null) {\n          // There's already a work-in-progress. Reuse it.\n          workInProgressHook = nextWorkInProgressHook;\n          nextWorkInProgressHook = workInProgressHook.next;\n          currentHook = nextCurrentHook;\n        } else {\n          // Clone from the current hook.\n          if (nextCurrentHook === null) {\n            throw new Error('Rendered more hooks than during the previous render.');\n          }\n          currentHook = nextCurrentHook;\n          var newHook = {\n            memoizedState: currentHook.memoizedState,\n            baseState: currentHook.baseState,\n            baseQueue: currentHook.baseQueue,\n            queue: currentHook.queue,\n            next: null\n          };\n          if (workInProgressHook === null) {\n            // This is the first hook in the list.\n            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n          } else {\n            // Append to the end of the list.\n            workInProgressHook = workInProgressHook.next = newHook;\n          }\n        }\n        return workInProgressHook;\n      }\n      function createFunctionComponentUpdateQueue() {\n        return {\n          lastEffect: null,\n          stores: null\n        };\n      }\n      function basicStateReducer(state, action) {\n        // $FlowFixMe: Flow doesn't like mixed types\n        return typeof action === 'function' ? action(state) : action;\n      }\n      function mountReducer(reducer, initialArg, init) {\n        var hook = mountWorkInProgressHook();\n        var initialState;\n        if (init !== undefined) {\n          initialState = init(initialArg);\n        } else {\n          initialState = initialArg;\n        }\n        hook.memoizedState = hook.baseState = initialState;\n        var queue = {\n          pending: null,\n          interleaved: null,\n          lanes: NoLanes,\n          dispatch: null,\n          lastRenderedReducer: reducer,\n          lastRenderedState: initialState\n        };\n        hook.queue = queue;\n        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n        return [hook.memoizedState, dispatch];\n      }\n      function updateReducer(reducer, initialArg, init) {\n        var hook = updateWorkInProgressHook();\n        var queue = hook.queue;\n        if (queue === null) {\n          throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n        }\n        queue.lastRenderedReducer = reducer;\n        var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n        var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n        var pendingQueue = queue.pending;\n        if (pendingQueue !== null) {\n          // We have new updates that haven't been processed yet.\n          // We'll add them to the base queue.\n          if (baseQueue !== null) {\n            // Merge the pending queue and the base queue.\n            var baseFirst = baseQueue.next;\n            var pendingFirst = pendingQueue.next;\n            baseQueue.next = pendingFirst;\n            pendingQueue.next = baseFirst;\n          }\n          {\n            if (current.baseQueue !== baseQueue) {\n              // Internal invariant that should never happen, but feasibly could in\n              // the future if we implement resuming, or some form of that.\n              error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n            }\n          }\n          current.baseQueue = baseQueue = pendingQueue;\n          queue.pending = null;\n        }\n        if (baseQueue !== null) {\n          // We have a queue to process.\n          var first = baseQueue.next;\n          var newState = current.baseState;\n          var newBaseState = null;\n          var newBaseQueueFirst = null;\n          var newBaseQueueLast = null;\n          var update = first;\n          do {\n            var updateLane = update.lane;\n            if (!isSubsetOfLanes(renderLanes, updateLane)) {\n              // Priority is insufficient. Skip this update. If this is the first\n              // skipped update, the previous update/state is the new base\n              // update/state.\n              var clone = {\n                lane: updateLane,\n                action: update.action,\n                hasEagerState: update.hasEagerState,\n                eagerState: update.eagerState,\n                next: null\n              };\n              if (newBaseQueueLast === null) {\n                newBaseQueueFirst = newBaseQueueLast = clone;\n                newBaseState = newState;\n              } else {\n                newBaseQueueLast = newBaseQueueLast.next = clone;\n              } // Update the remaining priority in the queue.\n              // TODO: Don't need to accumulate this. Instead, we can remove\n              // renderLanes from the original lanes.\n\n              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n              markSkippedUpdateLanes(updateLane);\n            } else {\n              // This update does have sufficient priority.\n              if (newBaseQueueLast !== null) {\n                var _clone = {\n                  // This update is going to be committed so we never want uncommit\n                  // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                  // this will never be skipped by the check above.\n                  lane: NoLane,\n                  action: update.action,\n                  hasEagerState: update.hasEagerState,\n                  eagerState: update.eagerState,\n                  next: null\n                };\n                newBaseQueueLast = newBaseQueueLast.next = _clone;\n              } // Process this update.\n\n              if (update.hasEagerState) {\n                // If this update is a state update (not a reducer) and was processed eagerly,\n                // we can use the eagerly computed state\n                newState = update.eagerState;\n              } else {\n                var action = update.action;\n                newState = reducer(newState, action);\n              }\n            }\n            update = update.next;\n          } while (update !== null && update !== first);\n          if (newBaseQueueLast === null) {\n            newBaseState = newState;\n          } else {\n            newBaseQueueLast.next = newBaseQueueFirst;\n          } // Mark that the fiber performed work, but only if the new state is\n          // different from the current state.\n\n          if (!objectIs(newState, hook.memoizedState)) {\n            markWorkInProgressReceivedUpdate();\n          }\n          hook.memoizedState = newState;\n          hook.baseState = newBaseState;\n          hook.baseQueue = newBaseQueueLast;\n          queue.lastRenderedState = newState;\n        } // Interleaved updates are stored on a separate queue. We aren't going to\n        // process them during this render, but we do need to track which lanes\n        // are remaining.\n\n        var lastInterleaved = queue.interleaved;\n        if (lastInterleaved !== null) {\n          var interleaved = lastInterleaved;\n          do {\n            var interleavedLane = interleaved.lane;\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n            markSkippedUpdateLanes(interleavedLane);\n            interleaved = interleaved.next;\n          } while (interleaved !== lastInterleaved);\n        } else if (baseQueue === null) {\n          // `queue.lanes` is used for entangling transitions. We can set it back to\n          // zero once the queue is empty.\n          queue.lanes = NoLanes;\n        }\n        var dispatch = queue.dispatch;\n        return [hook.memoizedState, dispatch];\n      }\n      function rerenderReducer(reducer, initialArg, init) {\n        var hook = updateWorkInProgressHook();\n        var queue = hook.queue;\n        if (queue === null) {\n          throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n        }\n        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n        // work-in-progress hook.\n\n        var dispatch = queue.dispatch;\n        var lastRenderPhaseUpdate = queue.pending;\n        var newState = hook.memoizedState;\n        if (lastRenderPhaseUpdate !== null) {\n          // The queue doesn't persist past this render pass.\n          queue.pending = null;\n          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n          var update = firstRenderPhaseUpdate;\n          do {\n            // Process this render phase update. We don't have to check the\n            // priority because it will always be the same as the current\n            // render's.\n            var action = update.action;\n            newState = reducer(newState, action);\n            update = update.next;\n          } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n          // different from the current state.\n\n          if (!objectIs(newState, hook.memoizedState)) {\n            markWorkInProgressReceivedUpdate();\n          }\n          hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n          // the base state unless the queue is empty.\n          // TODO: Not sure if this is the desired semantics, but it's what we\n          // do for gDSFP. I can't remember why.\n\n          if (hook.baseQueue === null) {\n            hook.baseState = newState;\n          }\n          queue.lastRenderedState = newState;\n        }\n        return [newState, dispatch];\n      }\n      function mountMutableSource(source, getSnapshot, subscribe) {\n        {\n          return undefined;\n        }\n      }\n      function updateMutableSource(source, getSnapshot, subscribe) {\n        {\n          return undefined;\n        }\n      }\n      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n        var fiber = currentlyRenderingFiber$1;\n        var hook = mountWorkInProgressHook();\n        var nextSnapshot;\n        var isHydrating = getIsHydrating();\n        if (isHydrating) {\n          if (getServerSnapshot === undefined) {\n            throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n          }\n          nextSnapshot = getServerSnapshot();\n          {\n            if (!didWarnUncachedGetSnapshot) {\n              if (nextSnapshot !== getServerSnapshot()) {\n                error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n                didWarnUncachedGetSnapshot = true;\n              }\n            }\n          }\n        } else {\n          nextSnapshot = getSnapshot();\n          {\n            if (!didWarnUncachedGetSnapshot) {\n              var cachedSnapshot = getSnapshot();\n              if (!objectIs(nextSnapshot, cachedSnapshot)) {\n                error('The result of getSnapshot should be cached to avoid an infinite loop');\n                didWarnUncachedGetSnapshot = true;\n              }\n            }\n          } // Unless we're rendering a blocking lane, schedule a consistency check.\n          // Right before committing, we will walk the tree and check if any of the\n          // stores were mutated.\n          //\n          // We won't do this if we're hydrating server-rendered content, because if\n          // the content is stale, it's already visible anyway. Instead we'll patch\n          // it up in a passive effect.\n\n          var root = getWorkInProgressRoot();\n          if (root === null) {\n            throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n          }\n          if (!includesBlockingLane(root, renderLanes)) {\n            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n          }\n        } // Read the current snapshot from the store on every render. This breaks the\n        // normal rules of React, and only works because store updates are\n        // always synchronous.\n\n        hook.memoizedState = nextSnapshot;\n        var inst = {\n          value: nextSnapshot,\n          getSnapshot: getSnapshot\n        };\n        hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n        // this whenever subscribe, getSnapshot, or value changes. Because there's no\n        // clean-up function, and we track the deps correctly, we can call pushEffect\n        // directly, without storing any additional state. For the same reason, we\n        // don't need to set a static flag, either.\n        // TODO: We can move this to the passive phase once we add a pre-commit\n        // consistency check. See the next comment.\n\n        fiber.flags |= Passive;\n        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n        return nextSnapshot;\n      }\n      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n        var fiber = currentlyRenderingFiber$1;\n        var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n        // normal rules of React, and only works because store updates are\n        // always synchronous.\n\n        var nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error('The result of getSnapshot should be cached to avoid an infinite loop');\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n        var prevSnapshot = hook.memoizedState;\n        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n        if (snapshotChanged) {\n          hook.memoizedState = nextSnapshot;\n          markWorkInProgressReceivedUpdate();\n        }\n        var inst = hook.queue;\n        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n        // commit phase if there was an interleaved mutation. In concurrent mode\n        // this can happen all the time, but even in synchronous mode, an earlier\n        // effect may have mutated the store.\n\n        if (inst.getSnapshot !== getSnapshot || snapshotChanged ||\n        // Check if the susbcribe function changed. We can save some memory by\n        // checking whether we scheduled a subscription effect above.\n        workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n          fiber.flags |= Passive;\n          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n          // Right before committing, we will walk the tree and check if any of the\n          // stores were mutated.\n\n          var root = getWorkInProgressRoot();\n          if (root === null) {\n            throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n          }\n          if (!includesBlockingLane(root, renderLanes)) {\n            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n          }\n        }\n        return nextSnapshot;\n      }\n      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n        fiber.flags |= StoreConsistency;\n        var check = {\n          getSnapshot: getSnapshot,\n          value: renderedSnapshot\n        };\n        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n        if (componentUpdateQueue === null) {\n          componentUpdateQueue = createFunctionComponentUpdateQueue();\n          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n          componentUpdateQueue.stores = [check];\n        } else {\n          var stores = componentUpdateQueue.stores;\n          if (stores === null) {\n            componentUpdateQueue.stores = [check];\n          } else {\n            stores.push(check);\n          }\n        }\n      }\n      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n        // These are updated in the passive phase\n        inst.value = nextSnapshot;\n        inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n        // have been in an event that fired before the passive effects, or it could\n        // have been in a layout effect. In that case, we would have used the old\n        // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceStoreRerender(fiber);\n        }\n      }\n      function subscribeToStore(fiber, inst, subscribe) {\n        var handleStoreChange = function () {\n          // The store changed. Check if the snapshot changed since the last time we\n          // read from the store.\n          if (checkIfSnapshotChanged(inst)) {\n            // Force a re-render.\n            forceStoreRerender(fiber);\n          }\n        }; // Subscribe to the store and return a clean-up function.\n\n        return subscribe(handleStoreChange);\n      }\n      function checkIfSnapshotChanged(inst) {\n        var latestGetSnapshot = inst.getSnapshot;\n        var prevValue = inst.value;\n        try {\n          var nextValue = latestGetSnapshot();\n          return !objectIs(prevValue, nextValue);\n        } catch (error) {\n          return true;\n        }\n      }\n      function forceStoreRerender(fiber) {\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n        }\n      }\n      function mountState(initialState) {\n        var hook = mountWorkInProgressHook();\n        if (typeof initialState === 'function') {\n          // $FlowFixMe: Flow doesn't like mixed types\n          initialState = initialState();\n        }\n        hook.memoizedState = hook.baseState = initialState;\n        var queue = {\n          pending: null,\n          interleaved: null,\n          lanes: NoLanes,\n          dispatch: null,\n          lastRenderedReducer: basicStateReducer,\n          lastRenderedState: initialState\n        };\n        hook.queue = queue;\n        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n        return [hook.memoizedState, dispatch];\n      }\n      function updateState(initialState) {\n        return updateReducer(basicStateReducer);\n      }\n      function rerenderState(initialState) {\n        return rerenderReducer(basicStateReducer);\n      }\n      function pushEffect(tag, create, destroy, deps) {\n        var effect = {\n          tag: tag,\n          create: create,\n          destroy: destroy,\n          deps: deps,\n          // Circular\n          next: null\n        };\n        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n        if (componentUpdateQueue === null) {\n          componentUpdateQueue = createFunctionComponentUpdateQueue();\n          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var lastEffect = componentUpdateQueue.lastEffect;\n          if (lastEffect === null) {\n            componentUpdateQueue.lastEffect = effect.next = effect;\n          } else {\n            var firstEffect = lastEffect.next;\n            lastEffect.next = effect;\n            effect.next = firstEffect;\n            componentUpdateQueue.lastEffect = effect;\n          }\n        }\n        return effect;\n      }\n      function mountRef(initialValue) {\n        var hook = mountWorkInProgressHook();\n        {\n          var _ref2 = {\n            current: initialValue\n          };\n          hook.memoizedState = _ref2;\n          return _ref2;\n        }\n      }\n      function updateRef(initialValue) {\n        var hook = updateWorkInProgressHook();\n        return hook.memoizedState;\n      }\n      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n        var hook = mountWorkInProgressHook();\n        var nextDeps = deps === undefined ? null : deps;\n        currentlyRenderingFiber$1.flags |= fiberFlags;\n        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n      }\n      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n        var hook = updateWorkInProgressHook();\n        var nextDeps = deps === undefined ? null : deps;\n        var destroy = undefined;\n        if (currentHook !== null) {\n          var prevEffect = currentHook.memoizedState;\n          destroy = prevEffect.destroy;\n          if (nextDeps !== null) {\n            var prevDeps = prevEffect.deps;\n            if (areHookInputsEqual(nextDeps, prevDeps)) {\n              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n              return;\n            }\n          }\n        }\n        currentlyRenderingFiber$1.flags |= fiberFlags;\n        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n      }\n      function mountEffect(create, deps) {\n        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n        } else {\n          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n        }\n      }\n      function updateEffect(create, deps) {\n        return updateEffectImpl(Passive, Passive$1, create, deps);\n      }\n      function mountInsertionEffect(create, deps) {\n        return mountEffectImpl(Update, Insertion, create, deps);\n      }\n      function updateInsertionEffect(create, deps) {\n        return updateEffectImpl(Update, Insertion, create, deps);\n      }\n      function mountLayoutEffect(create, deps) {\n        var fiberFlags = Update;\n        {\n          fiberFlags |= LayoutStatic;\n        }\n        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n          fiberFlags |= MountLayoutDev;\n        }\n        return mountEffectImpl(fiberFlags, Layout, create, deps);\n      }\n      function updateLayoutEffect(create, deps) {\n        return updateEffectImpl(Update, Layout, create, deps);\n      }\n      function imperativeHandleEffect(create, ref) {\n        if (typeof ref === 'function') {\n          var refCallback = ref;\n          var _inst = create();\n          refCallback(_inst);\n          return function () {\n            refCallback(null);\n          };\n        } else if (ref !== null && ref !== undefined) {\n          var refObject = ref;\n          {\n            if (!refObject.hasOwnProperty('current')) {\n              error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n            }\n          }\n          var _inst2 = create();\n          refObject.current = _inst2;\n          return function () {\n            refObject.current = null;\n          };\n        }\n      }\n      function mountImperativeHandle(ref, create, deps) {\n        {\n          if (typeof create !== 'function') {\n            error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n          }\n        } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n        var fiberFlags = Update;\n        {\n          fiberFlags |= LayoutStatic;\n        }\n        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n          fiberFlags |= MountLayoutDev;\n        }\n        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n      }\n      function updateImperativeHandle(ref, create, deps) {\n        {\n          if (typeof create !== 'function') {\n            error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n          }\n        } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n      }\n      function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n        // The react-debug-hooks package injects its own implementation\n        // so that e.g. DevTools can display custom hook values.\n      }\n      var updateDebugValue = mountDebugValue;\n      function mountCallback(callback, deps) {\n        var hook = mountWorkInProgressHook();\n        var nextDeps = deps === undefined ? null : deps;\n        hook.memoizedState = [callback, nextDeps];\n        return callback;\n      }\n      function updateCallback(callback, deps) {\n        var hook = updateWorkInProgressHook();\n        var nextDeps = deps === undefined ? null : deps;\n        var prevState = hook.memoizedState;\n        if (prevState !== null) {\n          if (nextDeps !== null) {\n            var prevDeps = prevState[1];\n            if (areHookInputsEqual(nextDeps, prevDeps)) {\n              return prevState[0];\n            }\n          }\n        }\n        hook.memoizedState = [callback, nextDeps];\n        return callback;\n      }\n      function mountMemo(nextCreate, deps) {\n        var hook = mountWorkInProgressHook();\n        var nextDeps = deps === undefined ? null : deps;\n        var nextValue = nextCreate();\n        hook.memoizedState = [nextValue, nextDeps];\n        return nextValue;\n      }\n      function updateMemo(nextCreate, deps) {\n        var hook = updateWorkInProgressHook();\n        var nextDeps = deps === undefined ? null : deps;\n        var prevState = hook.memoizedState;\n        if (prevState !== null) {\n          // Assume these are defined. If they're not, areHookInputsEqual will warn.\n          if (nextDeps !== null) {\n            var prevDeps = prevState[1];\n            if (areHookInputsEqual(nextDeps, prevDeps)) {\n              return prevState[0];\n            }\n          }\n        }\n        var nextValue = nextCreate();\n        hook.memoizedState = [nextValue, nextDeps];\n        return nextValue;\n      }\n      function mountDeferredValue(value) {\n        var hook = mountWorkInProgressHook();\n        hook.memoizedState = value;\n        return value;\n      }\n      function updateDeferredValue(value) {\n        var hook = updateWorkInProgressHook();\n        var resolvedCurrentHook = currentHook;\n        var prevValue = resolvedCurrentHook.memoizedState;\n        return updateDeferredValueImpl(hook, prevValue, value);\n      }\n      function rerenderDeferredValue(value) {\n        var hook = updateWorkInProgressHook();\n        if (currentHook === null) {\n          // This is a rerender during a mount.\n          hook.memoizedState = value;\n          return value;\n        } else {\n          // This is a rerender during an update.\n          var prevValue = currentHook.memoizedState;\n          return updateDeferredValueImpl(hook, prevValue, value);\n        }\n      }\n      function updateDeferredValueImpl(hook, prevValue, value) {\n        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n        if (shouldDeferValue) {\n          // This is an urgent update. If the value has changed, keep using the\n          // previous value and spawn a deferred render to update it later.\n          if (!objectIs(value, prevValue)) {\n            // Schedule a deferred render\n            var deferredLane = claimNextTransitionLane();\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n            markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\n            // from the latest value. The name \"baseState\" doesn't really match how we\n            // use it because we're reusing a state hook field instead of creating a\n            // new one.\n\n            hook.baseState = true;\n          } // Reuse the previous value\n\n          return prevValue;\n        } else {\n          // This is not an urgent update, so we can use the latest value regardless\n          // of what it is. No need to defer it.\n          // However, if we're currently inside a spawned render, then we need to mark\n          // this as an update to prevent the fiber from bailing out.\n          //\n          // `baseState` is true when the current value is different from the rendered\n          // value. The name doesn't really match how we use it because we're reusing\n          // a state hook field instead of creating a new one.\n          if (hook.baseState) {\n            // Flip this back to false.\n            hook.baseState = false;\n            markWorkInProgressReceivedUpdate();\n          }\n          hook.memoizedState = value;\n          return value;\n        }\n      }\n      function startTransition(setPending, callback, options) {\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n        setPending(true);\n        var prevTransition = ReactCurrentBatchConfig$1.transition;\n        ReactCurrentBatchConfig$1.transition = {};\n        var currentTransition = ReactCurrentBatchConfig$1.transition;\n        {\n          ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n        }\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$1.transition = prevTransition;\n          {\n            if (prevTransition === null && currentTransition._updatedFibers) {\n              var updatedFibersCount = currentTransition._updatedFibers.size;\n              if (updatedFibersCount > 10) {\n                warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n              }\n              currentTransition._updatedFibers.clear();\n            }\n          }\n        }\n      }\n      function mountTransition() {\n        var _mountState = mountState(false),\n          isPending = _mountState[0],\n          setPending = _mountState[1]; // The `start` method never changes.\n\n        var start = startTransition.bind(null, setPending);\n        var hook = mountWorkInProgressHook();\n        hook.memoizedState = start;\n        return [isPending, start];\n      }\n      function updateTransition() {\n        var _updateState = updateState(),\n          isPending = _updateState[0];\n        var hook = updateWorkInProgressHook();\n        var start = hook.memoizedState;\n        return [isPending, start];\n      }\n      function rerenderTransition() {\n        var _rerenderState = rerenderState(),\n          isPending = _rerenderState[0];\n        var hook = updateWorkInProgressHook();\n        var start = hook.memoizedState;\n        return [isPending, start];\n      }\n      var isUpdatingOpaqueValueInRenderPhase = false;\n      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n        {\n          return isUpdatingOpaqueValueInRenderPhase;\n        }\n      }\n      function mountId() {\n        var hook = mountWorkInProgressHook();\n        var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n        // should do this in Fiber, too? Deferring this decision for now because\n        // there's no other place to store the prefix except for an internal field on\n        // the public createRoot object, which the fiber tree does not currently have\n        // a reference to.\n\n        var identifierPrefix = root.identifierPrefix;\n        var id;\n        if (getIsHydrating()) {\n          var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n          id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n          // that represents the position of this useId hook among all the useId\n          // hooks for this fiber.\n\n          var localId = localIdCounter++;\n          if (localId > 0) {\n            id += 'H' + localId.toString(32);\n          }\n          id += ':';\n        } else {\n          // Use a lowercase r prefix for client-generated ids.\n          var globalClientId = globalClientIdCounter++;\n          id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n        }\n        hook.memoizedState = id;\n        return id;\n      }\n      function updateId() {\n        var hook = updateWorkInProgressHook();\n        var id = hook.memoizedState;\n        return id;\n      }\n      function dispatchReducerAction(fiber, queue, action) {\n        {\n          if (typeof arguments[3] === 'function') {\n            error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n          }\n        }\n        var lane = requestUpdateLane(fiber);\n        var update = {\n          lane: lane,\n          action: action,\n          hasEagerState: false,\n          eagerState: null,\n          next: null\n        };\n        if (isRenderPhaseUpdate(fiber)) {\n          enqueueRenderPhaseUpdate(queue, update);\n        } else {\n          var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n          if (root !== null) {\n            var eventTime = requestEventTime();\n            scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n            entangleTransitionUpdate(root, queue, lane);\n          }\n        }\n        markUpdateInDevTools(fiber, lane);\n      }\n      function dispatchSetState(fiber, queue, action) {\n        {\n          if (typeof arguments[3] === 'function') {\n            error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n          }\n        }\n        var lane = requestUpdateLane(fiber);\n        var update = {\n          lane: lane,\n          action: action,\n          hasEagerState: false,\n          eagerState: null,\n          next: null\n        };\n        if (isRenderPhaseUpdate(fiber)) {\n          enqueueRenderPhaseUpdate(queue, update);\n        } else {\n          var alternate = fiber.alternate;\n          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n            // The queue is currently empty, which means we can eagerly compute the\n            // next state before entering the render phase. If the new state is the\n            // same as the current state, we may be able to bail out entirely.\n            var lastRenderedReducer = queue.lastRenderedReducer;\n            if (lastRenderedReducer !== null) {\n              var prevDispatcher;\n              {\n                prevDispatcher = ReactCurrentDispatcher$1.current;\n                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n              }\n              try {\n                var currentState = queue.lastRenderedState;\n                var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n                // it, on the update object. If the reducer hasn't changed by the\n                // time we enter the render phase, then the eager state can be used\n                // without calling the reducer again.\n\n                update.hasEagerState = true;\n                update.eagerState = eagerState;\n                if (objectIs(eagerState, currentState)) {\n                  // Fast path. We can bail out without scheduling React to re-render.\n                  // It's still possible that we'll need to rebase this update later,\n                  // if the component re-renders for a different reason and by that\n                  // time the reducer has changed.\n                  // TODO: Do we still need to entangle transitions in this case?\n                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\n                  return;\n                }\n              } catch (error) {// Suppress the error. It will throw again in the render phase.\n              } finally {\n                {\n                  ReactCurrentDispatcher$1.current = prevDispatcher;\n                }\n              }\n            }\n          }\n          var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n          if (root !== null) {\n            var eventTime = requestEventTime();\n            scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n            entangleTransitionUpdate(root, queue, lane);\n          }\n        }\n        markUpdateInDevTools(fiber, lane);\n      }\n      function isRenderPhaseUpdate(fiber) {\n        var alternate = fiber.alternate;\n        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n      }\n      function enqueueRenderPhaseUpdate(queue, update) {\n        // This is a render phase update. Stash it in a lazily-created map of\n        // queue -> linked list of updates. After this render pass, we'll restart\n        // and apply the stashed updates on top of the work-in-progress hook.\n        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n        var pending = queue.pending;\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n        queue.pending = update;\n      } // TODO: Move to ReactFiberConcurrentUpdates?\n\n      function entangleTransitionUpdate(root, queue, lane) {\n        if (isTransitionLane(lane)) {\n          var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n          // must have finished. We can remove them from the shared queue, which\n          // represents a superset of the actually pending lanes. In some cases we\n          // may entangle more than we need to, but that's OK. In fact it's worse if\n          // we *don't* entangle when we should.\n\n          queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n          var newQueueLanes = mergeLanes(queueLanes, lane);\n          queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n          // the lane finished since the last time we entangled it. So we need to\n          // entangle it again, just to be sure.\n\n          markRootEntangled(root, newQueueLanes);\n        }\n      }\n      function markUpdateInDevTools(fiber, lane, action) {\n        {\n          markStateUpdateScheduled(fiber, lane);\n        }\n      }\n      var ContextOnlyDispatcher = {\n        readContext: readContext,\n        useCallback: throwInvalidHookError,\n        useContext: throwInvalidHookError,\n        useEffect: throwInvalidHookError,\n        useImperativeHandle: throwInvalidHookError,\n        useInsertionEffect: throwInvalidHookError,\n        useLayoutEffect: throwInvalidHookError,\n        useMemo: throwInvalidHookError,\n        useReducer: throwInvalidHookError,\n        useRef: throwInvalidHookError,\n        useState: throwInvalidHookError,\n        useDebugValue: throwInvalidHookError,\n        useDeferredValue: throwInvalidHookError,\n        useTransition: throwInvalidHookError,\n        useMutableSource: throwInvalidHookError,\n        useSyncExternalStore: throwInvalidHookError,\n        useId: throwInvalidHookError,\n        unstable_isNewReconciler: enableNewReconciler\n      };\n      var HooksDispatcherOnMountInDEV = null;\n      var HooksDispatcherOnMountWithHookTypesInDEV = null;\n      var HooksDispatcherOnUpdateInDEV = null;\n      var HooksDispatcherOnRerenderInDEV = null;\n      var InvalidNestedHooksDispatcherOnMountInDEV = null;\n      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n      {\n        var warnInvalidContextAccess = function () {\n          error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n        };\n        var warnInvalidHookAccess = function () {\n          error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n        };\n        HooksDispatcherOnMountInDEV = {\n          readContext: function (context) {\n            return readContext(context);\n          },\n          useCallback: function (callback, deps) {\n            currentHookNameInDev = 'useCallback';\n            mountHookTypesDev();\n            checkDepsAreArrayDev(deps);\n            return mountCallback(callback, deps);\n          },\n          useContext: function (context) {\n            currentHookNameInDev = 'useContext';\n            mountHookTypesDev();\n            return readContext(context);\n          },\n          useEffect: function (create, deps) {\n            currentHookNameInDev = 'useEffect';\n            mountHookTypesDev();\n            checkDepsAreArrayDev(deps);\n            return mountEffect(create, deps);\n          },\n          useImperativeHandle: function (ref, create, deps) {\n            currentHookNameInDev = 'useImperativeHandle';\n            mountHookTypesDev();\n            checkDepsAreArrayDev(deps);\n            return mountImperativeHandle(ref, create, deps);\n          },\n          useInsertionEffect: function (create, deps) {\n            currentHookNameInDev = 'useInsertionEffect';\n            mountHookTypesDev();\n            checkDepsAreArrayDev(deps);\n            return mountInsertionEffect(create, deps);\n          },\n          useLayoutEffect: function (create, deps) {\n            currentHookNameInDev = 'useLayoutEffect';\n            mountHookTypesDev();\n            checkDepsAreArrayDev(deps);\n            return mountLayoutEffect(create, deps);\n          },\n          useMemo: function (create, deps) {\n            currentHookNameInDev = 'useMemo';\n            mountHookTypesDev();\n            checkDepsAreArrayDev(deps);\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountMemo(create, deps);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useReducer: function (reducer, initialArg, init) {\n            currentHookNameInDev = 'useReducer';\n            mountHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountReducer(reducer, initialArg, init);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useRef: function (initialValue) {\n            currentHookNameInDev = 'useRef';\n            mountHookTypesDev();\n            return mountRef(initialValue);\n          },\n          useState: function (initialState) {\n            currentHookNameInDev = 'useState';\n            mountHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountState(initialState);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useDebugValue: function (value, formatterFn) {\n            currentHookNameInDev = 'useDebugValue';\n            mountHookTypesDev();\n            return mountDebugValue();\n          },\n          useDeferredValue: function (value) {\n            currentHookNameInDev = 'useDeferredValue';\n            mountHookTypesDev();\n            return mountDeferredValue(value);\n          },\n          useTransition: function () {\n            currentHookNameInDev = 'useTransition';\n            mountHookTypesDev();\n            return mountTransition();\n          },\n          useMutableSource: function (source, getSnapshot, subscribe) {\n            currentHookNameInDev = 'useMutableSource';\n            mountHookTypesDev();\n            return mountMutableSource();\n          },\n          useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n            currentHookNameInDev = 'useSyncExternalStore';\n            mountHookTypesDev();\n            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n          },\n          useId: function () {\n            currentHookNameInDev = 'useId';\n            mountHookTypesDev();\n            return mountId();\n          },\n          unstable_isNewReconciler: enableNewReconciler\n        };\n        HooksDispatcherOnMountWithHookTypesInDEV = {\n          readContext: function (context) {\n            return readContext(context);\n          },\n          useCallback: function (callback, deps) {\n            currentHookNameInDev = 'useCallback';\n            updateHookTypesDev();\n            return mountCallback(callback, deps);\n          },\n          useContext: function (context) {\n            currentHookNameInDev = 'useContext';\n            updateHookTypesDev();\n            return readContext(context);\n          },\n          useEffect: function (create, deps) {\n            currentHookNameInDev = 'useEffect';\n            updateHookTypesDev();\n            return mountEffect(create, deps);\n          },\n          useImperativeHandle: function (ref, create, deps) {\n            currentHookNameInDev = 'useImperativeHandle';\n            updateHookTypesDev();\n            return mountImperativeHandle(ref, create, deps);\n          },\n          useInsertionEffect: function (create, deps) {\n            currentHookNameInDev = 'useInsertionEffect';\n            updateHookTypesDev();\n            return mountInsertionEffect(create, deps);\n          },\n          useLayoutEffect: function (create, deps) {\n            currentHookNameInDev = 'useLayoutEffect';\n            updateHookTypesDev();\n            return mountLayoutEffect(create, deps);\n          },\n          useMemo: function (create, deps) {\n            currentHookNameInDev = 'useMemo';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountMemo(create, deps);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useReducer: function (reducer, initialArg, init) {\n            currentHookNameInDev = 'useReducer';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountReducer(reducer, initialArg, init);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useRef: function (initialValue) {\n            currentHookNameInDev = 'useRef';\n            updateHookTypesDev();\n            return mountRef(initialValue);\n          },\n          useState: function (initialState) {\n            currentHookNameInDev = 'useState';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountState(initialState);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useDebugValue: function (value, formatterFn) {\n            currentHookNameInDev = 'useDebugValue';\n            updateHookTypesDev();\n            return mountDebugValue();\n          },\n          useDeferredValue: function (value) {\n            currentHookNameInDev = 'useDeferredValue';\n            updateHookTypesDev();\n            return mountDeferredValue(value);\n          },\n          useTransition: function () {\n            currentHookNameInDev = 'useTransition';\n            updateHookTypesDev();\n            return mountTransition();\n          },\n          useMutableSource: function (source, getSnapshot, subscribe) {\n            currentHookNameInDev = 'useMutableSource';\n            updateHookTypesDev();\n            return mountMutableSource();\n          },\n          useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n            currentHookNameInDev = 'useSyncExternalStore';\n            updateHookTypesDev();\n            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n          },\n          useId: function () {\n            currentHookNameInDev = 'useId';\n            updateHookTypesDev();\n            return mountId();\n          },\n          unstable_isNewReconciler: enableNewReconciler\n        };\n        HooksDispatcherOnUpdateInDEV = {\n          readContext: function (context) {\n            return readContext(context);\n          },\n          useCallback: function (callback, deps) {\n            currentHookNameInDev = 'useCallback';\n            updateHookTypesDev();\n            return updateCallback(callback, deps);\n          },\n          useContext: function (context) {\n            currentHookNameInDev = 'useContext';\n            updateHookTypesDev();\n            return readContext(context);\n          },\n          useEffect: function (create, deps) {\n            currentHookNameInDev = 'useEffect';\n            updateHookTypesDev();\n            return updateEffect(create, deps);\n          },\n          useImperativeHandle: function (ref, create, deps) {\n            currentHookNameInDev = 'useImperativeHandle';\n            updateHookTypesDev();\n            return updateImperativeHandle(ref, create, deps);\n          },\n          useInsertionEffect: function (create, deps) {\n            currentHookNameInDev = 'useInsertionEffect';\n            updateHookTypesDev();\n            return updateInsertionEffect(create, deps);\n          },\n          useLayoutEffect: function (create, deps) {\n            currentHookNameInDev = 'useLayoutEffect';\n            updateHookTypesDev();\n            return updateLayoutEffect(create, deps);\n          },\n          useMemo: function (create, deps) {\n            currentHookNameInDev = 'useMemo';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return updateMemo(create, deps);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useReducer: function (reducer, initialArg, init) {\n            currentHookNameInDev = 'useReducer';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return updateReducer(reducer, initialArg, init);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useRef: function (initialValue) {\n            currentHookNameInDev = 'useRef';\n            updateHookTypesDev();\n            return updateRef();\n          },\n          useState: function (initialState) {\n            currentHookNameInDev = 'useState';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return updateState(initialState);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useDebugValue: function (value, formatterFn) {\n            currentHookNameInDev = 'useDebugValue';\n            updateHookTypesDev();\n            return updateDebugValue();\n          },\n          useDeferredValue: function (value) {\n            currentHookNameInDev = 'useDeferredValue';\n            updateHookTypesDev();\n            return updateDeferredValue(value);\n          },\n          useTransition: function () {\n            currentHookNameInDev = 'useTransition';\n            updateHookTypesDev();\n            return updateTransition();\n          },\n          useMutableSource: function (source, getSnapshot, subscribe) {\n            currentHookNameInDev = 'useMutableSource';\n            updateHookTypesDev();\n            return updateMutableSource();\n          },\n          useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n            currentHookNameInDev = 'useSyncExternalStore';\n            updateHookTypesDev();\n            return updateSyncExternalStore(subscribe, getSnapshot);\n          },\n          useId: function () {\n            currentHookNameInDev = 'useId';\n            updateHookTypesDev();\n            return updateId();\n          },\n          unstable_isNewReconciler: enableNewReconciler\n        };\n        HooksDispatcherOnRerenderInDEV = {\n          readContext: function (context) {\n            return readContext(context);\n          },\n          useCallback: function (callback, deps) {\n            currentHookNameInDev = 'useCallback';\n            updateHookTypesDev();\n            return updateCallback(callback, deps);\n          },\n          useContext: function (context) {\n            currentHookNameInDev = 'useContext';\n            updateHookTypesDev();\n            return readContext(context);\n          },\n          useEffect: function (create, deps) {\n            currentHookNameInDev = 'useEffect';\n            updateHookTypesDev();\n            return updateEffect(create, deps);\n          },\n          useImperativeHandle: function (ref, create, deps) {\n            currentHookNameInDev = 'useImperativeHandle';\n            updateHookTypesDev();\n            return updateImperativeHandle(ref, create, deps);\n          },\n          useInsertionEffect: function (create, deps) {\n            currentHookNameInDev = 'useInsertionEffect';\n            updateHookTypesDev();\n            return updateInsertionEffect(create, deps);\n          },\n          useLayoutEffect: function (create, deps) {\n            currentHookNameInDev = 'useLayoutEffect';\n            updateHookTypesDev();\n            return updateLayoutEffect(create, deps);\n          },\n          useMemo: function (create, deps) {\n            currentHookNameInDev = 'useMemo';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n            try {\n              return updateMemo(create, deps);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useReducer: function (reducer, initialArg, init) {\n            currentHookNameInDev = 'useReducer';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n            try {\n              return rerenderReducer(reducer, initialArg, init);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useRef: function (initialValue) {\n            currentHookNameInDev = 'useRef';\n            updateHookTypesDev();\n            return updateRef();\n          },\n          useState: function (initialState) {\n            currentHookNameInDev = 'useState';\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n            try {\n              return rerenderState(initialState);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useDebugValue: function (value, formatterFn) {\n            currentHookNameInDev = 'useDebugValue';\n            updateHookTypesDev();\n            return updateDebugValue();\n          },\n          useDeferredValue: function (value) {\n            currentHookNameInDev = 'useDeferredValue';\n            updateHookTypesDev();\n            return rerenderDeferredValue(value);\n          },\n          useTransition: function () {\n            currentHookNameInDev = 'useTransition';\n            updateHookTypesDev();\n            return rerenderTransition();\n          },\n          useMutableSource: function (source, getSnapshot, subscribe) {\n            currentHookNameInDev = 'useMutableSource';\n            updateHookTypesDev();\n            return updateMutableSource();\n          },\n          useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n            currentHookNameInDev = 'useSyncExternalStore';\n            updateHookTypesDev();\n            return updateSyncExternalStore(subscribe, getSnapshot);\n          },\n          useId: function () {\n            currentHookNameInDev = 'useId';\n            updateHookTypesDev();\n            return updateId();\n          },\n          unstable_isNewReconciler: enableNewReconciler\n        };\n        InvalidNestedHooksDispatcherOnMountInDEV = {\n          readContext: function (context) {\n            warnInvalidContextAccess();\n            return readContext(context);\n          },\n          useCallback: function (callback, deps) {\n            currentHookNameInDev = 'useCallback';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountCallback(callback, deps);\n          },\n          useContext: function (context) {\n            currentHookNameInDev = 'useContext';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return readContext(context);\n          },\n          useEffect: function (create, deps) {\n            currentHookNameInDev = 'useEffect';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountEffect(create, deps);\n          },\n          useImperativeHandle: function (ref, create, deps) {\n            currentHookNameInDev = 'useImperativeHandle';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountImperativeHandle(ref, create, deps);\n          },\n          useInsertionEffect: function (create, deps) {\n            currentHookNameInDev = 'useInsertionEffect';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountInsertionEffect(create, deps);\n          },\n          useLayoutEffect: function (create, deps) {\n            currentHookNameInDev = 'useLayoutEffect';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountLayoutEffect(create, deps);\n          },\n          useMemo: function (create, deps) {\n            currentHookNameInDev = 'useMemo';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountMemo(create, deps);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useReducer: function (reducer, initialArg, init) {\n            currentHookNameInDev = 'useReducer';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountReducer(reducer, initialArg, init);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useRef: function (initialValue) {\n            currentHookNameInDev = 'useRef';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountRef(initialValue);\n          },\n          useState: function (initialState) {\n            currentHookNameInDev = 'useState';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n            try {\n              return mountState(initialState);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useDebugValue: function (value, formatterFn) {\n            currentHookNameInDev = 'useDebugValue';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountDebugValue();\n          },\n          useDeferredValue: function (value) {\n            currentHookNameInDev = 'useDeferredValue';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountDeferredValue(value);\n          },\n          useTransition: function () {\n            currentHookNameInDev = 'useTransition';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountTransition();\n          },\n          useMutableSource: function (source, getSnapshot, subscribe) {\n            currentHookNameInDev = 'useMutableSource';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountMutableSource();\n          },\n          useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n            currentHookNameInDev = 'useSyncExternalStore';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n          },\n          useId: function () {\n            currentHookNameInDev = 'useId';\n            warnInvalidHookAccess();\n            mountHookTypesDev();\n            return mountId();\n          },\n          unstable_isNewReconciler: enableNewReconciler\n        };\n        InvalidNestedHooksDispatcherOnUpdateInDEV = {\n          readContext: function (context) {\n            warnInvalidContextAccess();\n            return readContext(context);\n          },\n          useCallback: function (callback, deps) {\n            currentHookNameInDev = 'useCallback';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateCallback(callback, deps);\n          },\n          useContext: function (context) {\n            currentHookNameInDev = 'useContext';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return readContext(context);\n          },\n          useEffect: function (create, deps) {\n            currentHookNameInDev = 'useEffect';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateEffect(create, deps);\n          },\n          useImperativeHandle: function (ref, create, deps) {\n            currentHookNameInDev = 'useImperativeHandle';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateImperativeHandle(ref, create, deps);\n          },\n          useInsertionEffect: function (create, deps) {\n            currentHookNameInDev = 'useInsertionEffect';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateInsertionEffect(create, deps);\n          },\n          useLayoutEffect: function (create, deps) {\n            currentHookNameInDev = 'useLayoutEffect';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateLayoutEffect(create, deps);\n          },\n          useMemo: function (create, deps) {\n            currentHookNameInDev = 'useMemo';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return updateMemo(create, deps);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useReducer: function (reducer, initialArg, init) {\n            currentHookNameInDev = 'useReducer';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return updateReducer(reducer, initialArg, init);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useRef: function (initialValue) {\n            currentHookNameInDev = 'useRef';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateRef();\n          },\n          useState: function (initialState) {\n            currentHookNameInDev = 'useState';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return updateState(initialState);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useDebugValue: function (value, formatterFn) {\n            currentHookNameInDev = 'useDebugValue';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateDebugValue();\n          },\n          useDeferredValue: function (value) {\n            currentHookNameInDev = 'useDeferredValue';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateDeferredValue(value);\n          },\n          useTransition: function () {\n            currentHookNameInDev = 'useTransition';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateTransition();\n          },\n          useMutableSource: function (source, getSnapshot, subscribe) {\n            currentHookNameInDev = 'useMutableSource';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateMutableSource();\n          },\n          useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n            currentHookNameInDev = 'useSyncExternalStore';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateSyncExternalStore(subscribe, getSnapshot);\n          },\n          useId: function () {\n            currentHookNameInDev = 'useId';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateId();\n          },\n          unstable_isNewReconciler: enableNewReconciler\n        };\n        InvalidNestedHooksDispatcherOnRerenderInDEV = {\n          readContext: function (context) {\n            warnInvalidContextAccess();\n            return readContext(context);\n          },\n          useCallback: function (callback, deps) {\n            currentHookNameInDev = 'useCallback';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateCallback(callback, deps);\n          },\n          useContext: function (context) {\n            currentHookNameInDev = 'useContext';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return readContext(context);\n          },\n          useEffect: function (create, deps) {\n            currentHookNameInDev = 'useEffect';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateEffect(create, deps);\n          },\n          useImperativeHandle: function (ref, create, deps) {\n            currentHookNameInDev = 'useImperativeHandle';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateImperativeHandle(ref, create, deps);\n          },\n          useInsertionEffect: function (create, deps) {\n            currentHookNameInDev = 'useInsertionEffect';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateInsertionEffect(create, deps);\n          },\n          useLayoutEffect: function (create, deps) {\n            currentHookNameInDev = 'useLayoutEffect';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateLayoutEffect(create, deps);\n          },\n          useMemo: function (create, deps) {\n            currentHookNameInDev = 'useMemo';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return updateMemo(create, deps);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useReducer: function (reducer, initialArg, init) {\n            currentHookNameInDev = 'useReducer';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return rerenderReducer(reducer, initialArg, init);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useRef: function (initialValue) {\n            currentHookNameInDev = 'useRef';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateRef();\n          },\n          useState: function (initialState) {\n            currentHookNameInDev = 'useState';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            var prevDispatcher = ReactCurrentDispatcher$1.current;\n            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            try {\n              return rerenderState(initialState);\n            } finally {\n              ReactCurrentDispatcher$1.current = prevDispatcher;\n            }\n          },\n          useDebugValue: function (value, formatterFn) {\n            currentHookNameInDev = 'useDebugValue';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateDebugValue();\n          },\n          useDeferredValue: function (value) {\n            currentHookNameInDev = 'useDeferredValue';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return rerenderDeferredValue(value);\n          },\n          useTransition: function () {\n            currentHookNameInDev = 'useTransition';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return rerenderTransition();\n          },\n          useMutableSource: function (source, getSnapshot, subscribe) {\n            currentHookNameInDev = 'useMutableSource';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateMutableSource();\n          },\n          useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n            currentHookNameInDev = 'useSyncExternalStore';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateSyncExternalStore(subscribe, getSnapshot);\n          },\n          useId: function () {\n            currentHookNameInDev = 'useId';\n            warnInvalidHookAccess();\n            updateHookTypesDev();\n            return updateId();\n          },\n          unstable_isNewReconciler: enableNewReconciler\n        };\n      }\n      var now$1 = Scheduler.unstable_now;\n      var commitTime = 0;\n      var layoutEffectStartTime = -1;\n      var profilerStartTime = -1;\n      var passiveEffectStartTime = -1;\n      /**\n       * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n       *\n       * The overall sequence is:\n       *   1. render\n       *   2. commit (and call `onRender`, `onCommit`)\n       *   3. check for nested updates\n       *   4. flush passive effects (and call `onPostCommit`)\n       *\n       * Nested updates are identified in step 3 above,\n       * but step 4 still applies to the work that was just committed.\n       * We use two flags to track nested updates then:\n       * one tracks whether the upcoming update is a nested update,\n       * and the other tracks whether the current update was a nested update.\n       * The first value gets synced to the second at the start of the render phase.\n       */\n\n      var currentUpdateIsNested = false;\n      var nestedUpdateScheduled = false;\n      function isCurrentUpdateNested() {\n        return currentUpdateIsNested;\n      }\n      function markNestedUpdateScheduled() {\n        {\n          nestedUpdateScheduled = true;\n        }\n      }\n      function resetNestedUpdateFlag() {\n        {\n          currentUpdateIsNested = false;\n          nestedUpdateScheduled = false;\n        }\n      }\n      function syncNestedUpdateFlag() {\n        {\n          currentUpdateIsNested = nestedUpdateScheduled;\n          nestedUpdateScheduled = false;\n        }\n      }\n      function getCommitTime() {\n        return commitTime;\n      }\n      function recordCommitTime() {\n        commitTime = now$1();\n      }\n      function startProfilerTimer(fiber) {\n        profilerStartTime = now$1();\n        if (fiber.actualStartTime < 0) {\n          fiber.actualStartTime = now$1();\n        }\n      }\n      function stopProfilerTimerIfRunning(fiber) {\n        profilerStartTime = -1;\n      }\n      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n        if (profilerStartTime >= 0) {\n          var elapsedTime = now$1() - profilerStartTime;\n          fiber.actualDuration += elapsedTime;\n          if (overrideBaseTime) {\n            fiber.selfBaseDuration = elapsedTime;\n          }\n          profilerStartTime = -1;\n        }\n      }\n      function recordLayoutEffectDuration(fiber) {\n        if (layoutEffectStartTime >= 0) {\n          var elapsedTime = now$1() - layoutEffectStartTime;\n          layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n          // Or the root (for the DevTools Profiler to read)\n\n          var parentFiber = fiber.return;\n          while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                var root = parentFiber.stateNode;\n                root.effectDuration += elapsedTime;\n                return;\n              case Profiler:\n                var parentStateNode = parentFiber.stateNode;\n                parentStateNode.effectDuration += elapsedTime;\n                return;\n            }\n            parentFiber = parentFiber.return;\n          }\n        }\n      }\n      function recordPassiveEffectDuration(fiber) {\n        if (passiveEffectStartTime >= 0) {\n          var elapsedTime = now$1() - passiveEffectStartTime;\n          passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n          // Or the root (for the DevTools Profiler to read)\n\n          var parentFiber = fiber.return;\n          while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                var root = parentFiber.stateNode;\n                if (root !== null) {\n                  root.passiveEffectDuration += elapsedTime;\n                }\n                return;\n              case Profiler:\n                var parentStateNode = parentFiber.stateNode;\n                if (parentStateNode !== null) {\n                  // Detached fibers have their state node cleared out.\n                  // In this case, the return pointer is also cleared out,\n                  // so we won't be able to report the time spent in this Profiler's subtree.\n                  parentStateNode.passiveEffectDuration += elapsedTime;\n                }\n                return;\n            }\n            parentFiber = parentFiber.return;\n          }\n        }\n      }\n      function startLayoutEffectTimer() {\n        layoutEffectStartTime = now$1();\n      }\n      function startPassiveEffectTimer() {\n        passiveEffectStartTime = now$1();\n      }\n      function transferActualDuration(fiber) {\n        // Transfer time spent rendering these children so we don't lose it\n        // after we rerender. This is used as a helper in special cases\n        // where we should count the work of multiple passes.\n        var child = fiber.child;\n        while (child) {\n          fiber.actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n      }\n      function createCapturedValueAtFiber(value, source) {\n        // If the value is an error, call this function immediately after it is thrown\n        // so the stack is accurate.\n        return {\n          value: value,\n          source: source,\n          stack: getStackByFiberInDevAndProd(source),\n          digest: null\n        };\n      }\n      function createCapturedValue(value, digest, stack) {\n        return {\n          value: value,\n          source: null,\n          stack: stack != null ? stack : null,\n          digest: digest != null ? digest : null\n        };\n      }\n\n      // This module is forked in different environments.\n      // By default, return `true` to log errors to the console.\n      // Forks can return `false` if this isn't desirable.\n      function showErrorDialog(boundary, errorInfo) {\n        return true;\n      }\n      function logCapturedError(boundary, errorInfo) {\n        try {\n          var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n          // This enables renderers like ReactNative to better manage redbox behavior.\n\n          if (logError === false) {\n            return;\n          }\n          var error = errorInfo.value;\n          if (true) {\n            var source = errorInfo.source;\n            var stack = errorInfo.stack;\n            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n            // `preventDefault()` in window `error` handler.\n            // We record this information as an expando on the error.\n\n            if (error != null && error._suppressLogging) {\n              if (boundary.tag === ClassComponent) {\n                // The error is recoverable and was silenced.\n                // Ignore it and don't print the stack addendum.\n                // This is handy for testing error boundaries without noise.\n                return;\n              } // The error is fatal. Since the silencing might have\n              // been accidental, we'll surface it anyway.\n              // However, the browser would have silenced the original error\n              // so we'll print it first, and then print the stack addendum.\n\n              console['error'](error); // Don't transform to our wrapper\n              // For a more detailed description of this block, see:\n              // https://github.com/facebook/react/pull/13384\n            }\n            var componentName = source ? getComponentNameFromFiber(source) : null;\n            var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n            var errorBoundaryMessage;\n            if (boundary.tag === HostRoot) {\n              errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n            } else {\n              var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n              errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n            }\n            var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n            // We don't include the original error message and JS stack because the browser\n            // has already printed it. Even if the application swallows the error, it is still\n            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n            console['error'](combinedMessage); // Don't transform to our wrapper\n          }\n        } catch (e) {\n          // This method must not throw, or React internal state will get messed up.\n          // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n          // we want to report this error outside of the normal stack as a last resort.\n          // https://github.com/facebook/react/issues/13188\n          setTimeout(function () {\n            throw e;\n          });\n        }\n      }\n      var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n      function createRootErrorUpdate(fiber, errorInfo, lane) {\n        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n        // being called \"element\".\n\n        update.payload = {\n          element: null\n        };\n        var error = errorInfo.value;\n        update.callback = function () {\n          onUncaughtError(error);\n          logCapturedError(fiber, errorInfo);\n        };\n        return update;\n      }\n      function createClassErrorUpdate(fiber, errorInfo, lane) {\n        var update = createUpdate(NoTimestamp, lane);\n        update.tag = CaptureUpdate;\n        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n        if (typeof getDerivedStateFromError === 'function') {\n          var error$1 = errorInfo.value;\n          update.payload = function () {\n            return getDerivedStateFromError(error$1);\n          };\n          update.callback = function () {\n            {\n              markFailedErrorBoundaryForHotReloading(fiber);\n            }\n            logCapturedError(fiber, errorInfo);\n          };\n        }\n        var inst = fiber.stateNode;\n        if (inst !== null && typeof inst.componentDidCatch === 'function') {\n          update.callback = function callback() {\n            {\n              markFailedErrorBoundaryForHotReloading(fiber);\n            }\n            logCapturedError(fiber, errorInfo);\n            if (typeof getDerivedStateFromError !== 'function') {\n              // To preserve the preexisting retry behavior of error boundaries,\n              // we keep track of which ones already failed during this batch.\n              // This gets reset before we yield back to the browser.\n              // TODO: Warn in strict mode if getDerivedStateFromError is\n              // not defined.\n              markLegacyErrorBoundaryAsFailed(this);\n            }\n            var error$1 = errorInfo.value;\n            var stack = errorInfo.stack;\n            this.componentDidCatch(error$1, {\n              componentStack: stack !== null ? stack : ''\n            });\n            {\n              if (typeof getDerivedStateFromError !== 'function') {\n                // If componentDidCatch is the only error boundary method defined,\n                // then it needs to call setState to recover from errors.\n                // If no state update is scheduled then the boundary will swallow the error.\n                if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                  error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n                }\n              }\n            }\n          };\n        }\n        return update;\n      }\n      function attachPingListener(root, wakeable, lanes) {\n        // Attach a ping listener\n        //\n        // The data might resolve before we have a chance to commit the fallback. Or,\n        // in the case of a refresh, we'll never commit a fallback. So we need to\n        // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n        // try rendering the tree again.\n        //\n        // Only attach a listener if one does not already exist for the lanes\n        // we're currently rendering (which acts like a \"thread ID\" here).\n        //\n        // We only need to do this in concurrent mode. Legacy Suspense always\n        // commits fallbacks synchronously, so there are no pings.\n        var pingCache = root.pingCache;\n        var threadIDs;\n        if (pingCache === null) {\n          pingCache = root.pingCache = new PossiblyWeakMap$1();\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        } else {\n          threadIDs = pingCache.get(wakeable);\n          if (threadIDs === undefined) {\n            threadIDs = new Set();\n            pingCache.set(wakeable, threadIDs);\n          }\n        }\n        if (!threadIDs.has(lanes)) {\n          // Memoize using the thread ID to prevent redundant listeners.\n          threadIDs.add(lanes);\n          var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n          {\n            if (isDevToolsPresent) {\n              // If we have pending work still, restore the original updaters\n              restorePendingUpdaters(root, lanes);\n            }\n          }\n          wakeable.then(ping, ping);\n        }\n      }\n      function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n        // Retry listener\n        //\n        // If the fallback does commit, we need to attach a different type of\n        // listener. This one schedules an update on the Suspense boundary to turn\n        // the fallback state off.\n        //\n        // Stash the wakeable on the boundary fiber so we can access it in the\n        // commit phase.\n        //\n        // When the wakeable resolves, we'll attempt to render the boundary\n        // again (\"retry\").\n        var wakeables = suspenseBoundary.updateQueue;\n        if (wakeables === null) {\n          var updateQueue = new Set();\n          updateQueue.add(wakeable);\n          suspenseBoundary.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n      }\n      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n        // A legacy mode Suspense quirk, only relevant to hook components.\n\n        var tag = sourceFiber.tag;\n        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n          var currentSource = sourceFiber.alternate;\n          if (currentSource) {\n            sourceFiber.updateQueue = currentSource.updateQueue;\n            sourceFiber.memoizedState = currentSource.memoizedState;\n            sourceFiber.lanes = currentSource.lanes;\n          } else {\n            sourceFiber.updateQueue = null;\n            sourceFiber.memoizedState = null;\n          }\n        }\n      }\n      function getNearestSuspenseBoundaryToCapture(returnFiber) {\n        var node = returnFiber;\n        do {\n          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n            return node;\n          } // This boundary already captured during this render. Continue to the next\n          // boundary.\n\n          node = node.return;\n        } while (node !== null);\n        return null;\n      }\n      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n        // This marks a Suspense boundary so that when we're unwinding the stack,\n        // it captures the suspended \"exception\" and does a second (fallback) pass.\n        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n          // Legacy Mode Suspense\n          //\n          // If the boundary is in legacy mode, we should *not*\n          // suspend the commit. Pretend as if the suspended component rendered\n          // null and keep rendering. When the Suspense boundary completes,\n          // we'll do a second pass to render the fallback.\n          if (suspenseBoundary === returnFiber) {\n            // Special case where we suspended while reconciling the children of\n            // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n            // when a React.lazy component is a direct child of a\n            // Suspense boundary.\n            //\n            // Suspense boundaries are implemented as multiple fibers, but they\n            // are a single conceptual unit. The legacy mode behavior where we\n            // pretend the suspended fiber committed as `null` won't work,\n            // because in this case the \"suspended\" fiber is the inner\n            // Offscreen wrapper.\n            //\n            // Because the contents of the boundary haven't started rendering\n            // yet (i.e. nothing in the tree has partially rendered) we can\n            // switch to the regular, concurrent mode behavior: mark the\n            // boundary with ShouldCapture and enter the unwind phase.\n            suspenseBoundary.flags |= ShouldCapture;\n          } else {\n            suspenseBoundary.flags |= DidCapture;\n            sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n            // But we shouldn't call any lifecycle methods or callbacks. Remove\n            // all lifecycle effect tags.\n\n            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n            if (sourceFiber.tag === ClassComponent) {\n              var currentSourceFiber = sourceFiber.alternate;\n              if (currentSourceFiber === null) {\n                // This is a new mount. Change the tag so it's not mistaken for a\n                // completed class component. For example, we should not call\n                // componentWillUnmount if it is deleted.\n                sourceFiber.tag = IncompleteClassComponent;\n              } else {\n                // When we try rendering again, we should not reuse the current fiber,\n                // since it's known to be in an inconsistent state. Use a force update to\n                // prevent a bail out.\n                var update = createUpdate(NoTimestamp, SyncLane);\n                update.tag = ForceUpdate;\n                enqueueUpdate(sourceFiber, update, SyncLane);\n              }\n            } // The source fiber did not complete. Mark it with Sync priority to\n            // indicate that it still has pending work.\n\n            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n          }\n          return suspenseBoundary;\n        } // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n        // the begin phase to prevent an early bailout.\n\n        suspenseBoundary.lanes = rootRenderLanes;\n        return suspenseBoundary;\n      }\n      function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n        // The source fiber did not complete.\n        sourceFiber.flags |= Incomplete;\n        {\n          if (isDevToolsPresent) {\n            // If we have pending work still, restore the original updaters\n            restorePendingUpdaters(root, rootRenderLanes);\n          }\n        }\n        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n          // This is a wakeable. The component suspended.\n          var wakeable = value;\n          resetSuspendedComponent(sourceFiber);\n          {\n            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n              markDidThrowWhileHydratingDEV();\n            }\n          }\n          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n          if (suspenseBoundary !== null) {\n            suspenseBoundary.flags &= ~ForceClientRender;\n            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n            // commits fallbacks synchronously, so there are no pings.\n\n            if (suspenseBoundary.mode & ConcurrentMode) {\n              attachPingListener(root, wakeable, rootRenderLanes);\n            }\n            attachRetryListener(suspenseBoundary, root, wakeable);\n            return;\n          } else {\n            // No boundary was found. Unless this is a sync update, this is OK.\n            // We can suspend and wait for more data to arrive.\n            if (!includesSyncLane(rootRenderLanes)) {\n              // This is not a sync update. Suspend. Since we're not activating a\n              // Suspense boundary, this will unwind all the way to the root without\n              // performing a second pass to render a fallback. (This is arguably how\n              // refresh transitions should work, too, since we're not going to commit\n              // the fallbacks anyway.)\n              //\n              // This case also applies to initial hydration.\n              attachPingListener(root, wakeable, rootRenderLanes);\n              renderDidSuspendDelayIfPossible();\n              return;\n            } // This is a sync/discrete update. We treat this case like an error\n            // because discrete renders are expected to produce a complete tree\n            // synchronously to maintain consistency with external state.\n\n            var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n            // The error will be caught by the nearest suspense boundary.\n\n            value = uncaughtSuspenseError;\n          }\n        } else {\n          // This is a regular error, not a Suspense wakeable.\n          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n            markDidThrowWhileHydratingDEV();\n            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n            // discarding the dehydrated content and switching to a client render.\n            // Instead of surfacing the error, find the nearest Suspense boundary\n            // and render it again without hydration.\n\n            if (_suspenseBoundary !== null) {\n              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n                // Set a flag to indicate that we should try rendering the normal\n                // children again, not the fallback.\n                _suspenseBoundary.flags |= ForceClientRender;\n              }\n              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n              // still log it so it can be fixed.\n\n              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n              return;\n            }\n          }\n        }\n        value = createCapturedValueAtFiber(value, sourceFiber);\n        renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n        // over and traverse parent path again, this time treating the exception\n        // as an error.\n\n        var workInProgress = returnFiber;\n        do {\n          switch (workInProgress.tag) {\n            case HostRoot:\n              {\n                var _errorInfo = value;\n                workInProgress.flags |= ShouldCapture;\n                var lane = pickArbitraryLane(rootRenderLanes);\n                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n                var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n                enqueueCapturedUpdate(workInProgress, update);\n                return;\n              }\n            case ClassComponent:\n              // Capture and retry\n              var errorInfo = value;\n              var ctor = workInProgress.type;\n              var instance = workInProgress.stateNode;\n              if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n                workInProgress.flags |= ShouldCapture;\n                var _lane = pickArbitraryLane(rootRenderLanes);\n                workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n                var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n                enqueueCapturedUpdate(workInProgress, _update);\n                return;\n              }\n              break;\n          }\n          workInProgress = workInProgress.return;\n        } while (workInProgress !== null);\n      }\n      function getSuspendedCache() {\n        {\n          return null;\n        } // This function is called when a Suspense boundary suspends. It returns the\n      }\n      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n      var didReceiveUpdate = false;\n      var didWarnAboutBadClass;\n      var didWarnAboutModulePatternComponent;\n      var didWarnAboutContextTypeOnFunctionComponent;\n      var didWarnAboutGetDerivedStateOnFunctionComponent;\n      var didWarnAboutFunctionRefs;\n      var didWarnAboutReassigningProps;\n      var didWarnAboutRevealOrder;\n      var didWarnAboutTailOptions;\n      {\n        didWarnAboutBadClass = {};\n        didWarnAboutModulePatternComponent = {};\n        didWarnAboutContextTypeOnFunctionComponent = {};\n        didWarnAboutGetDerivedStateOnFunctionComponent = {};\n        didWarnAboutFunctionRefs = {};\n        didWarnAboutReassigningProps = false;\n        didWarnAboutRevealOrder = {};\n        didWarnAboutTailOptions = {};\n      }\n      function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n        if (current === null) {\n          // If this is a fresh new component that hasn't been rendered yet, we\n          // won't update its child set by applying minimal side-effects. Instead,\n          // we will add them all to the child before it gets rendered. That means\n          // we can optimize this reconciliation pass by not tracking side-effects.\n          workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n        } else {\n          // If the current child is the same as the work in progress, it means that\n          // we haven't yet started any work on these children. Therefore, we use\n          // the clone algorithm to create a copy of all the current children.\n          // If we had any progressed work already, that is invalid at this point so\n          // let's throw it out.\n          workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n        }\n      }\n      function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n        // This function is fork of reconcileChildren. It's used in cases where we\n        // want to reconcile without matching against the existing set. This has the\n        // effect of all current children being unmounted; even if the type and key\n        // are the same, the old child is unmounted and a new child is created.\n        //\n        // To do this, we're going to go through the reconcile algorithm twice. In\n        // the first pass, we schedule a deletion for all the current children by\n        // passing null.\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n        // pass null in place of where we usually pass the current child set. This has\n        // the effect of remounting all children regardless of whether their\n        // identities match.\n\n        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n      }\n      function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n        // TODO: current can be non-null here even if the component\n        // hasn't yet mounted. This happens after the first render suspends.\n        // We'll need to figure out if this is fine or can cause issues.\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            // Lazy component props can't be validated in createElement\n            // because they're only guaranteed to be resolved here.\n            var innerPropTypes = Component.propTypes;\n            if (innerPropTypes) {\n              checkPropTypes(innerPropTypes, nextProps,\n              // Resolved props\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        }\n        var render = Component.render;\n        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n        var nextChildren;\n        var hasId;\n        prepareToReadContext(workInProgress, renderLanes);\n        {\n          markComponentRenderStarted(workInProgress);\n        }\n        {\n          ReactCurrentOwner$1.current = workInProgress;\n          setIsRendering(true);\n          nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n          hasId = checkDidRenderIdHook();\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n              hasId = checkDidRenderIdHook();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          setIsRendering(false);\n        }\n        {\n          markComponentRenderStopped();\n        }\n        if (current !== null && !didReceiveUpdate) {\n          bailoutHooks(current, workInProgress, renderLanes);\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        if (getIsHydrating() && hasId) {\n          pushMaterializedTreeId(workInProgress);\n        } // React DevTools reads this flag.\n\n        workInProgress.flags |= PerformedWork;\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n        if (current === null) {\n          var type = Component.type;\n          if (isSimpleFunctionComponent(type) && Component.compare === null &&\n          // SimpleMemoComponent codepath doesn't resolve outer props either.\n          Component.defaultProps === undefined) {\n            var resolvedType = type;\n            {\n              resolvedType = resolveFunctionForHotReloading(type);\n            } // If this is a plain function component without default props,\n            // and with only the default shallow comparison, we upgrade it\n            // to a SimpleMemoComponent to allow fast path updates.\n\n            workInProgress.tag = SimpleMemoComponent;\n            workInProgress.type = resolvedType;\n            {\n              validateFunctionComponentInDev(workInProgress, type);\n            }\n            return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n          }\n          {\n            var innerPropTypes = type.propTypes;\n            if (innerPropTypes) {\n              // Inner memo component props aren't currently validated in createElement.\n              // We could move it there, but we'd still need this for lazy code path.\n              checkPropTypes(innerPropTypes, nextProps,\n              // Resolved props\n              'prop', getComponentNameFromType(type));\n            }\n          }\n          var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n          child.ref = workInProgress.ref;\n          child.return = workInProgress;\n          workInProgress.child = child;\n          return child;\n        }\n        {\n          var _type = Component.type;\n          var _innerPropTypes = _type.propTypes;\n          if (_innerPropTypes) {\n            // Inner memo component props aren't currently validated in createElement.\n            // We could move it there, but we'd still need this for lazy code path.\n            checkPropTypes(_innerPropTypes, nextProps,\n            // Resolved props\n            'prop', getComponentNameFromType(_type));\n          }\n        }\n        var currentChild = current.child; // This is always exactly one child\n\n        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n        if (!hasScheduledUpdateOrContext) {\n          // This will be the props with resolved defaultProps,\n          // unlike current.memoizedProps which will be the unresolved ones.\n          var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n          var compare = Component.compare;\n          compare = compare !== null ? compare : shallowEqual;\n          if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n          }\n        } // React DevTools reads this flag.\n\n        workInProgress.flags |= PerformedWork;\n        var newChild = createWorkInProgress(currentChild, nextProps);\n        newChild.ref = workInProgress.ref;\n        newChild.return = workInProgress;\n        workInProgress.child = newChild;\n        return newChild;\n      }\n      function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n        // TODO: current can be non-null here even if the component\n        // hasn't yet mounted. This happens when the inner render suspends.\n        // We'll need to figure out if this is fine or can cause issues.\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            // Lazy component props can't be validated in createElement\n            // because they're only guaranteed to be resolved here.\n            var outerMemoType = workInProgress.elementType;\n            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n              // We warn when you define propTypes on lazy()\n              // so let's just skip over it to find memo() outer wrapper.\n              // Inner props for memo are validated later.\n              var lazyComponent = outerMemoType;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                outerMemoType = init(payload);\n              } catch (x) {\n                outerMemoType = null;\n              } // Inner propTypes will be validated in the function component path.\n\n              var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n              if (outerPropTypes) {\n                checkPropTypes(outerPropTypes, nextProps,\n                // Resolved (SimpleMemoComponent has no defaultProps)\n                'prop', getComponentNameFromType(outerMemoType));\n              }\n            }\n          }\n        }\n        if (current !== null) {\n          var prevProps = current.memoizedProps;\n          if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref &&\n          // Prevent bailout if the implementation changed due to hot reload.\n          workInProgress.type === current.type) {\n            didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n            // would during a normal fiber bailout.\n            //\n            // We don't have strong guarantees that the props object is referentially\n            // equal during updates where we can't bail out anyway — like if the props\n            // are shallowly equal, but there's a local state or context update in the\n            // same batch.\n            //\n            // However, as a principle, we should aim to make the behavior consistent\n            // across different ways of memoizing a component. For example, React.memo\n            // has a different internal Fiber layout if you pass a normal function\n            // component (SimpleMemoComponent) versus if you pass a different type\n            // like forwardRef (MemoComponent). But this is an implementation detail.\n            // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n            // affect whether the props object is reused during a bailout.\n\n            workInProgress.pendingProps = nextProps = prevProps;\n            if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n              // The pending lanes were cleared at the beginning of beginWork. We're\n              // about to bail out, but there might be other lanes that weren't\n              // included in the current render. Usually, the priority level of the\n              // remaining updates is accumulated during the evaluation of the\n              // component (i.e. when processing the update queue). But since since\n              // we're bailing out early *without* evaluating the component, we need\n              // to account for it here, too. Reset to the value of the current fiber.\n              // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n              // because a MemoComponent fiber does not have hooks or an update queue;\n              // rather, it wraps around an inner component, which may or may not\n              // contains hooks.\n              // TODO: Move the reset at in beginWork out of the common path so that\n              // this is no longer necessary.\n              workInProgress.lanes = current.lanes;\n              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n              // This is a special case that only exists for legacy mode.\n              // See https://github.com/facebook/react/pull/19216.\n              didReceiveUpdate = true;\n            }\n          }\n        }\n        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n      }\n      function updateOffscreenComponent(current, workInProgress, renderLanes) {\n        var nextProps = workInProgress.pendingProps;\n        var nextChildren = nextProps.children;\n        var prevState = current !== null ? current.memoizedState : null;\n        if (nextProps.mode === 'hidden' || enableLegacyHidden) {\n          // Rendering a hidden tree.\n          if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n            // In legacy sync mode, don't defer the subtree. Render it now.\n            // TODO: Consider how Offscreen should work with transitions in the future\n            var nextState = {\n              baseLanes: NoLanes,\n              cachePool: null,\n              transitions: null\n            };\n            workInProgress.memoizedState = nextState;\n            pushRenderLanes(workInProgress, renderLanes);\n          } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n            var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n            // and resume this tree later.\n\n            var nextBaseLanes;\n            if (prevState !== null) {\n              var prevBaseLanes = prevState.baseLanes;\n              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n            } else {\n              nextBaseLanes = renderLanes;\n            } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n            workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n            var _nextState = {\n              baseLanes: nextBaseLanes,\n              cachePool: spawnedCachePool,\n              transitions: null\n            };\n            workInProgress.memoizedState = _nextState;\n            workInProgress.updateQueue = null;\n            // to avoid a push/pop misalignment.\n\n            pushRenderLanes(workInProgress, nextBaseLanes);\n            return null;\n          } else {\n            // This is the second render. The surrounding visible content has already\n            // committed. Now we resume rendering the hidden tree.\n            // Rendering at offscreen, so we can clear the base lanes.\n            var _nextState2 = {\n              baseLanes: NoLanes,\n              cachePool: null,\n              transitions: null\n            };\n            workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n            var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n            pushRenderLanes(workInProgress, subtreeRenderLanes);\n          }\n        } else {\n          // Rendering a visible tree.\n          var _subtreeRenderLanes;\n          if (prevState !== null) {\n            // We're going from hidden -> visible.\n            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n            workInProgress.memoizedState = null;\n          } else {\n            // We weren't previously hidden, and we still aren't, so there's nothing\n            // special to do. Need to push to the stack regardless, though, to avoid\n            // a push/pop misalignment.\n            _subtreeRenderLanes = renderLanes;\n          }\n          pushRenderLanes(workInProgress, _subtreeRenderLanes);\n        }\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      } // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\n      function updateFragment(current, workInProgress, renderLanes) {\n        var nextChildren = workInProgress.pendingProps;\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function updateMode(current, workInProgress, renderLanes) {\n        var nextChildren = workInProgress.pendingProps.children;\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function updateProfiler(current, workInProgress, renderLanes) {\n        {\n          workInProgress.flags |= Update;\n          {\n            // Reset effect durations for the next eventual effect phase.\n            // These are reset during render to allow the DevTools commit hook a chance to read them,\n            var stateNode = workInProgress.stateNode;\n            stateNode.effectDuration = 0;\n            stateNode.passiveEffectDuration = 0;\n          }\n        }\n        var nextProps = workInProgress.pendingProps;\n        var nextChildren = nextProps.children;\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function markRef(current, workInProgress) {\n        var ref = workInProgress.ref;\n        if (current === null && ref !== null || current !== null && current.ref !== ref) {\n          // Schedule a Ref effect\n          workInProgress.flags |= Ref;\n          {\n            workInProgress.flags |= RefStatic;\n          }\n        }\n      }\n      function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            // Lazy component props can't be validated in createElement\n            // because they're only guaranteed to be resolved here.\n            var innerPropTypes = Component.propTypes;\n            if (innerPropTypes) {\n              checkPropTypes(innerPropTypes, nextProps,\n              // Resolved props\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        }\n        var context;\n        {\n          var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n          context = getMaskedContext(workInProgress, unmaskedContext);\n        }\n        var nextChildren;\n        var hasId;\n        prepareToReadContext(workInProgress, renderLanes);\n        {\n          markComponentRenderStarted(workInProgress);\n        }\n        {\n          ReactCurrentOwner$1.current = workInProgress;\n          setIsRendering(true);\n          nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n          hasId = checkDidRenderIdHook();\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n              hasId = checkDidRenderIdHook();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          setIsRendering(false);\n        }\n        {\n          markComponentRenderStopped();\n        }\n        if (current !== null && !didReceiveUpdate) {\n          bailoutHooks(current, workInProgress, renderLanes);\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        if (getIsHydrating() && hasId) {\n          pushMaterializedTreeId(workInProgress);\n        } // React DevTools reads this flag.\n\n        workInProgress.flags |= PerformedWork;\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n        {\n          // This is used by DevTools to force a boundary to error.\n          switch (shouldError(workInProgress)) {\n            case false:\n              {\n                var _instance = workInProgress.stateNode;\n                var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n                // Is there a better way to do this?\n\n                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n                var state = tempInstance.state;\n                _instance.updater.enqueueSetState(_instance, state, null);\n                break;\n              }\n            case true:\n              {\n                workInProgress.flags |= DidCapture;\n                workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n                var error$1 = new Error('Simulated error coming from DevTools');\n                var lane = pickArbitraryLane(renderLanes);\n                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n                var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n                enqueueCapturedUpdate(workInProgress, update);\n                break;\n              }\n          }\n          if (workInProgress.type !== workInProgress.elementType) {\n            // Lazy component props can't be validated in createElement\n            // because they're only guaranteed to be resolved here.\n            var innerPropTypes = Component.propTypes;\n            if (innerPropTypes) {\n              checkPropTypes(innerPropTypes, nextProps,\n              // Resolved props\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        } // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext;\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n        prepareToReadContext(workInProgress, renderLanes);\n        var instance = workInProgress.stateNode;\n        var shouldUpdate;\n        if (instance === null) {\n          resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n          constructClassInstance(workInProgress, Component, nextProps);\n          mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n          shouldUpdate = true;\n        } else if (current === null) {\n          // In a resume, we'll already have an instance we can reuse.\n          shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        } else {\n          shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n        }\n        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n        {\n          var inst = workInProgress.stateNode;\n          if (shouldUpdate && inst.props !== nextProps) {\n            if (!didWarnAboutReassigningProps) {\n              error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n            }\n            didWarnAboutReassigningProps = true;\n          }\n        }\n        return nextUnitOfWork;\n      }\n      function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n        // Refs should update even if shouldComponentUpdate returns false\n        markRef(current, workInProgress);\n        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n        if (!shouldUpdate && !didCaptureError) {\n          // Context providers should defer to sCU for rendering\n          if (hasContext) {\n            invalidateContextProvider(workInProgress, Component, false);\n          }\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        var instance = workInProgress.stateNode; // Rerender\n\n        ReactCurrentOwner$1.current = workInProgress;\n        var nextChildren;\n        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n          // If we captured an error, but getDerivedStateFromError is not defined,\n          // unmount all the children. componentDidCatch will schedule an update to\n          // re-render a fallback. This is temporary until we migrate everyone to\n          // the new API.\n          // TODO: Warn in a future release.\n          nextChildren = null;\n          {\n            stopProfilerTimerIfRunning();\n          }\n        } else {\n          {\n            markComponentRenderStarted(workInProgress);\n          }\n          {\n            setIsRendering(true);\n            nextChildren = instance.render();\n            if (workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n              try {\n                instance.render();\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n            setIsRendering(false);\n          }\n          {\n            markComponentRenderStopped();\n          }\n        } // React DevTools reads this flag.\n\n        workInProgress.flags |= PerformedWork;\n        if (current !== null && didCaptureError) {\n          // If we're recovering from an error, reconcile without reusing any of\n          // the existing children. Conceptually, the normal children and the children\n          // that are shown on error are two different sets, so we shouldn't reuse\n          // normal children even if their identities match.\n          forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n        } else {\n          reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        } // Memoize state using the values we just used to render.\n        // TODO: Restructure so we never read values from the instance.\n\n        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n        if (hasContext) {\n          invalidateContextProvider(workInProgress, Component, true);\n        }\n        return workInProgress.child;\n      }\n      function pushHostRootContext(workInProgress) {\n        var root = workInProgress.stateNode;\n        if (root.pendingContext) {\n          pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n        } else if (root.context) {\n          // Should always be set\n          pushTopLevelContextObject(workInProgress, root.context, false);\n        }\n        pushHostContainer(workInProgress, root.containerInfo);\n      }\n      function updateHostRoot(current, workInProgress, renderLanes) {\n        pushHostRootContext(workInProgress);\n        if (current === null) {\n          throw new Error('Should have a current fiber. This is a bug in React.');\n        }\n        var nextProps = workInProgress.pendingProps;\n        var prevState = workInProgress.memoizedState;\n        var prevChildren = prevState.element;\n        cloneUpdateQueue(current, workInProgress);\n        processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n        var nextState = workInProgress.memoizedState;\n        workInProgress.stateNode;\n        // being called \"element\".\n\n        var nextChildren = nextState.element;\n        if (supportsHydration && prevState.isDehydrated) {\n          // This is a hydration root whose shell has not yet hydrated. We should\n          // attempt to hydrate.\n          // Flip isDehydrated to false to indicate that when this render\n          // finishes, the root will no longer be dehydrated.\n          var overrideState = {\n            element: nextChildren,\n            isDehydrated: false,\n            cache: nextState.cache,\n            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n            transitions: nextState.transitions\n          };\n          var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n          // have reducer functions so it doesn't need rebasing.\n\n          updateQueue.baseState = overrideState;\n          workInProgress.memoizedState = overrideState;\n          if (workInProgress.flags & ForceClientRender) {\n            // Something errored during a previous attempt to hydrate the shell, so we\n            // forced a client render.\n            var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\n            return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n          } else if (nextChildren !== prevChildren) {\n            var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n            return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n          } else {\n            // The outermost shell has not hydrated yet. Start hydrating.\n            enterHydrationState(workInProgress);\n            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n            workInProgress.child = child;\n            var node = child;\n            while (node) {\n              // Mark each child as hydrating. This is a fast path to know whether this\n              // tree is part of a hydrating tree. This is used to determine if a child\n              // node has fully mounted yet, and for scheduling event replaying.\n              // Conceptually this is similar to Placement in that a new subtree is\n              // inserted into the React tree here. It just happens to not need DOM\n              // mutations because it already exists.\n              node.flags = node.flags & ~Placement | Hydrating;\n              node = node.sibling;\n            }\n          }\n        } else {\n          // Root is not dehydrated. Either this is a client-only root, or it\n          // already hydrated.\n          resetHydrationState();\n          if (nextChildren === prevChildren) {\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n          }\n          reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        }\n        return workInProgress.child;\n      }\n      function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n        // Revert to client rendering.\n        resetHydrationState();\n        queueHydrationError(recoverableError);\n        workInProgress.flags |= ForceClientRender;\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function updateHostComponent(current, workInProgress, renderLanes) {\n        pushHostContext(workInProgress);\n        if (current === null) {\n          tryToClaimNextHydratableInstance(workInProgress);\n        }\n        var type = workInProgress.type;\n        var nextProps = workInProgress.pendingProps;\n        var prevProps = current !== null ? current.memoizedProps : null;\n        var nextChildren = nextProps.children;\n        var isDirectTextChild = shouldSetTextContent(type, nextProps);\n        if (isDirectTextChild) {\n          // We special case a direct text child of a host node. This is a common\n          // case. We won't handle it as a reified child. We will instead handle\n          // this in the host environment that also has access to this prop. That\n          // avoids allocating another HostText fiber and traversing it.\n          nextChildren = null;\n        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n          // If we're switching from a direct text child to a normal child, or to\n          // empty, we need to schedule the text content to be reset.\n          workInProgress.flags |= ContentReset;\n        }\n        markRef(current, workInProgress);\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function updateHostText(current, workInProgress) {\n        if (current === null) {\n          tryToClaimNextHydratableInstance(workInProgress);\n        } // Nothing to do here. This is terminal. We'll do the completion step\n        // immediately after.\n\n        return null;\n      }\n      function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n        var props = workInProgress.pendingProps;\n        var lazyComponent = elementType;\n        var payload = lazyComponent._payload;\n        var init = lazyComponent._init;\n        var Component = init(payload); // Store the unwrapped component in the type.\n\n        workInProgress.type = Component;\n        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n        var resolvedProps = resolveDefaultProps(Component, props);\n        var child;\n        switch (resolvedTag) {\n          case FunctionComponent:\n            {\n              {\n                validateFunctionComponentInDev(workInProgress, Component);\n                workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n              }\n              child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n              return child;\n            }\n          case ClassComponent:\n            {\n              {\n                workInProgress.type = Component = resolveClassForHotReloading(Component);\n              }\n              child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n              return child;\n            }\n          case ForwardRef:\n            {\n              {\n                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n              }\n              child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n              return child;\n            }\n          case MemoComponent:\n            {\n              {\n                if (workInProgress.type !== workInProgress.elementType) {\n                  var outerPropTypes = Component.propTypes;\n                  if (outerPropTypes) {\n                    checkPropTypes(outerPropTypes, resolvedProps,\n                    // Resolved for outer only\n                    'prop', getComponentNameFromType(Component));\n                  }\n                }\n              }\n              child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps),\n              // The inner type can have defaults too\n              renderLanes);\n              return child;\n            }\n        }\n        var hint = '';\n        {\n          if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n            hint = ' Did you wrap a component in React.lazy() more than once?';\n          }\n        } // This message intentionally doesn't mention ForwardRef or MemoComponent\n        // because the fact that it's a separate type of work is an\n        // implementation detail.\n\n        throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n      }\n      function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n        // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext;\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n        prepareToReadContext(workInProgress, renderLanes);\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n      }\n      function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n        var props = workInProgress.pendingProps;\n        var context;\n        {\n          var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n          context = getMaskedContext(workInProgress, unmaskedContext);\n        }\n        prepareToReadContext(workInProgress, renderLanes);\n        var value;\n        var hasId;\n        {\n          markComponentRenderStarted(workInProgress);\n        }\n        {\n          if (Component.prototype && typeof Component.prototype.render === 'function') {\n            var componentName = getComponentNameFromType(Component) || 'Unknown';\n            if (!didWarnAboutBadClass[componentName]) {\n              error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n              didWarnAboutBadClass[componentName] = true;\n            }\n          }\n          if (workInProgress.mode & StrictLegacyMode) {\n            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n          }\n          setIsRendering(true);\n          ReactCurrentOwner$1.current = workInProgress;\n          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n          hasId = checkDidRenderIdHook();\n          setIsRendering(false);\n        }\n        {\n          markComponentRenderStopped();\n        } // React DevTools reads this flag.\n\n        workInProgress.flags |= PerformedWork;\n        {\n          // Support for module components is deprecated and is removed behind a flag.\n          // Whether or not it would crash later, we want to show a good message in DEV first.\n          if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n            var _componentName = getComponentNameFromType(Component) || 'Unknown';\n            if (!didWarnAboutModulePatternComponent[_componentName]) {\n              error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n              didWarnAboutModulePatternComponent[_componentName] = true;\n            }\n          }\n        }\n        if (\n        // Run these checks in production only if the flag is off.\n        // Eventually we'll delete this branch altogether.\n        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n          {\n            var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n            if (!didWarnAboutModulePatternComponent[_componentName2]) {\n              error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n              didWarnAboutModulePatternComponent[_componentName2] = true;\n            }\n          } // Proceed under the assumption that this is a class instance\n\n          workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n          workInProgress.memoizedState = null;\n          workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n          // During mounting we don't know the child context yet as the instance doesn't exist.\n          // We will invalidate the child context in finishClassComponent() right after rendering.\n\n          var hasContext = false;\n          if (isContextProvider(Component)) {\n            hasContext = true;\n            pushContextProvider(workInProgress);\n          } else {\n            hasContext = false;\n          }\n          workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n          initializeUpdateQueue(workInProgress);\n          adoptClassInstance(workInProgress, value);\n          mountClassInstance(workInProgress, Component, props, renderLanes);\n          return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n        } else {\n          // Proceed under the assumption that this is a function component\n          workInProgress.tag = FunctionComponent;\n          {\n            if (workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n              try {\n                value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n                hasId = checkDidRenderIdHook();\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n          }\n          if (getIsHydrating() && hasId) {\n            pushMaterializedTreeId(workInProgress);\n          }\n          reconcileChildren(null, workInProgress, value, renderLanes);\n          {\n            validateFunctionComponentInDev(workInProgress, Component);\n          }\n          return workInProgress.child;\n        }\n      }\n      function validateFunctionComponentInDev(workInProgress, Component) {\n        {\n          if (Component) {\n            if (Component.childContextTypes) {\n              error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n            }\n          }\n          if (workInProgress.ref !== null) {\n            var info = '';\n            var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n            var warningKey = ownerName || '';\n            var debugSource = workInProgress._debugSource;\n            if (debugSource) {\n              warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n            }\n            if (!didWarnAboutFunctionRefs[warningKey]) {\n              didWarnAboutFunctionRefs[warningKey] = true;\n              error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n            }\n          }\n          if (typeof Component.getDerivedStateFromProps === 'function') {\n            var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n              error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n            }\n          }\n          if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n            var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n              error('%s: Function components do not support contextType.', _componentName4);\n              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n            }\n          }\n        }\n      }\n      var SUSPENDED_MARKER = {\n        dehydrated: null,\n        treeContext: null,\n        retryLane: NoLane\n      };\n      function mountSuspenseOffscreenState(renderLanes) {\n        return {\n          baseLanes: renderLanes,\n          cachePool: getSuspendedCache(),\n          transitions: null\n        };\n      }\n      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n        var cachePool = null;\n        return {\n          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n          cachePool: cachePool,\n          transitions: prevOffscreenState.transitions\n        };\n      } // TODO: Probably should inline this back\n\n      function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n        // If we're already showing a fallback, there are cases where we need to\n        // remain on that fallback regardless of whether the content has resolved.\n        // For example, SuspenseList coordinates when nested content appears.\n        if (current !== null) {\n          var suspenseState = current.memoizedState;\n          if (suspenseState === null) {\n            // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n            // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n            // Note: This is a factoring smell. Can't remain on a fallback if there's\n            // no fallback to remain on.\n            return false;\n          }\n        } // Not currently showing content. Consult the Suspense context.\n\n        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n      }\n      function getRemainingWorkInPrimaryTree(current, renderLanes) {\n        // TODO: Should not remove render lanes that were pinged during this render\n        return removeLanes(current.childLanes, renderLanes);\n      }\n      function updateSuspenseComponent(current, workInProgress, renderLanes) {\n        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n        {\n          if (shouldSuspend(workInProgress)) {\n            workInProgress.flags |= DidCapture;\n          }\n        }\n        var suspenseContext = suspenseStackCursor.current;\n        var showFallback = false;\n        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n          // Something in this boundary's subtree already suspended. Switch to\n          // rendering the fallback children.\n          showFallback = true;\n          workInProgress.flags &= ~DidCapture;\n        } else {\n          // Attempting the main content\n          if (current === null || current.memoizedState !== null) {\n            // This is a new mount or this boundary is already showing a fallback state.\n            // Mark this subtree context as having at least one invisible parent that could\n            // handle the fallback state.\n            // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n            {\n              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n            }\n          }\n        }\n        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n        // boundary's children. This involves some custom reconciliation logic. Two\n        // main reasons this is so complicated.\n        //\n        // First, Legacy Mode has different semantics for backwards compatibility. The\n        // primary tree will commit in an inconsistent state, so when we do the\n        // second pass to render the fallback, we do some exceedingly, uh, clever\n        // hacks to make that not totally break. Like transferring effects and\n        // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n        // because we bailout on the primary tree completely and leave it in its old\n        // state, no effects. Same as what we do for Offscreen (except that\n        // Offscreen doesn't have the first render pass).\n        //\n        // Second is hydration. During hydration, the Suspense fiber has a slightly\n        // different layout, where the child points to a dehydrated fragment, which\n        // contains the DOM rendered by the server.\n        //\n        // Third, even if you set all that aside, Suspense is like error boundaries in\n        // that we first we try to render one tree, and if that fails, we render again\n        // and switch to a different tree. Like a try/catch block. So we have to track\n        // which branch we're currently rendering. Ideally we would model this using\n        // a stack.\n\n        if (current === null) {\n          // Initial mount\n          // Special path for hydration\n          // If we're currently hydrating, try to hydrate this boundary.\n          tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n          var suspenseState = workInProgress.memoizedState;\n          if (suspenseState !== null) {\n            var dehydrated = suspenseState.dehydrated;\n            if (dehydrated !== null) {\n              return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n            }\n          }\n          var nextPrimaryChildren = nextProps.children;\n          var nextFallbackChildren = nextProps.fallback;\n          if (showFallback) {\n            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n            var primaryChildFragment = workInProgress.child;\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackFragment;\n          } else {\n            return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n          }\n        } else {\n          // This is an update.\n          // Special path for hydration\n          var prevState = current.memoizedState;\n          if (prevState !== null) {\n            var _dehydrated = prevState.dehydrated;\n            if (_dehydrated !== null) {\n              return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\n            }\n          }\n          if (showFallback) {\n            var _nextFallbackChildren = nextProps.fallback;\n            var _nextPrimaryChildren = nextProps.children;\n            var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n            var _primaryChildFragment2 = workInProgress.child;\n            var prevOffscreenState = current.child.memoizedState;\n            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          } else {\n            var _nextPrimaryChildren2 = nextProps.children;\n            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n            workInProgress.memoizedState = null;\n            return _primaryChildFragment3;\n          }\n        }\n      }\n      function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n        var mode = workInProgress.mode;\n        var primaryChildProps = {\n          mode: 'visible',\n          children: primaryChildren\n        };\n        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n        primaryChildFragment.return = workInProgress;\n        workInProgress.child = primaryChildFragment;\n        return primaryChildFragment;\n      }\n      function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n        var mode = workInProgress.mode;\n        var progressedPrimaryFragment = workInProgress.child;\n        var primaryChildProps = {\n          mode: 'hidden',\n          children: primaryChildren\n        };\n        var primaryChildFragment;\n        var fallbackChildFragment;\n        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n          // In legacy mode, we commit the primary tree as if it successfully\n          // completed, even though it's in an inconsistent state.\n          primaryChildFragment = progressedPrimaryFragment;\n          primaryChildFragment.childLanes = NoLanes;\n          primaryChildFragment.pendingProps = primaryChildProps;\n          if (workInProgress.mode & ProfileMode) {\n            // Reset the durations from the first pass so they aren't included in the\n            // final amounts. This seems counterintuitive, since we're intentionally\n            // not measuring part of the render phase, but this makes it match what we\n            // do in Concurrent Mode.\n            primaryChildFragment.actualDuration = 0;\n            primaryChildFragment.actualStartTime = -1;\n            primaryChildFragment.selfBaseDuration = 0;\n            primaryChildFragment.treeBaseDuration = 0;\n          }\n          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n        } else {\n          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n        }\n        primaryChildFragment.return = workInProgress;\n        fallbackChildFragment.return = workInProgress;\n        primaryChildFragment.sibling = fallbackChildFragment;\n        workInProgress.child = primaryChildFragment;\n        return fallbackChildFragment;\n      }\n      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n        // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n        // this wrapper function to constrain it.\n        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n      }\n      function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n        // The props argument to `createWorkInProgress` is `any` typed, so we use this\n        // wrapper function to constrain it.\n        return createWorkInProgress(current, offscreenProps);\n      }\n      function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n        var currentPrimaryChildFragment = current.child;\n        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n          mode: 'visible',\n          children: primaryChildren\n        });\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          primaryChildFragment.lanes = renderLanes;\n        }\n        primaryChildFragment.return = workInProgress;\n        primaryChildFragment.sibling = null;\n        if (currentFallbackChildFragment !== null) {\n          // Delete the fallback child fragment\n          var deletions = workInProgress.deletions;\n          if (deletions === null) {\n            workInProgress.deletions = [currentFallbackChildFragment];\n            workInProgress.flags |= ChildDeletion;\n          } else {\n            deletions.push(currentFallbackChildFragment);\n          }\n        }\n        workInProgress.child = primaryChildFragment;\n        return primaryChildFragment;\n      }\n      function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n        var mode = workInProgress.mode;\n        var currentPrimaryChildFragment = current.child;\n        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n        var primaryChildProps = {\n          mode: 'hidden',\n          children: primaryChildren\n        };\n        var primaryChildFragment;\n        if (\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        (mode & ConcurrentMode) === NoMode &&\n        // Make sure we're on the second pass, i.e. the primary child fragment was\n        // already cloned. In legacy mode, the only case where this isn't true is\n        // when DevTools forces us to display a fallback; we skip the first render\n        // pass entirely and go straight to rendering the fallback. (In Concurrent\n        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n        // only codepath.)\n        workInProgress.child !== currentPrimaryChildFragment) {\n          var progressedPrimaryFragment = workInProgress.child;\n          primaryChildFragment = progressedPrimaryFragment;\n          primaryChildFragment.childLanes = NoLanes;\n          primaryChildFragment.pendingProps = primaryChildProps;\n          if (workInProgress.mode & ProfileMode) {\n            // Reset the durations from the first pass so they aren't included in the\n            // final amounts. This seems counterintuitive, since we're intentionally\n            // not measuring part of the render phase, but this makes it match what we\n            // do in Concurrent Mode.\n            primaryChildFragment.actualDuration = 0;\n            primaryChildFragment.actualStartTime = -1;\n            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n          } // The fallback fiber was added as a deletion during the first pass.\n          // However, since we're going to remain on the fallback, we no longer want\n          // to delete it.\n\n          workInProgress.deletions = null;\n        } else {\n          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n          // (We don't do this in legacy mode, because in legacy mode we don't re-use\n          // the current tree; see previous branch.)\n\n          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n        }\n        var fallbackChildFragment;\n        if (currentFallbackChildFragment !== null) {\n          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n        } else {\n          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n          // mounted but this is a new fiber.\n\n          fallbackChildFragment.flags |= Placement;\n        }\n        fallbackChildFragment.return = workInProgress;\n        primaryChildFragment.return = workInProgress;\n        primaryChildFragment.sibling = fallbackChildFragment;\n        workInProgress.child = primaryChildFragment;\n        return fallbackChildFragment;\n      }\n      function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n        // Falling back to client rendering. Because this has performance\n        // implications, it's considered a recoverable error, even though the user\n        // likely won't observe anything wrong with the UI.\n        //\n        // The error is passed in as an argument to enforce that every caller provide\n        // a custom message, or explicitly opt out (currently the only path that opts\n        // out is legacy mode; every concurrent path provides an error).\n        if (recoverableError !== null) {\n          queueHydrationError(recoverableError);\n        } // This will add the old fiber to the deletion list\n\n        reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n        var nextProps = workInProgress.pendingProps;\n        var primaryChildren = nextProps.children;\n        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n        // mounted but this is a new fiber.\n\n        primaryChildFragment.flags |= Placement;\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n      function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n        var fiberMode = workInProgress.mode;\n        var primaryChildProps = {\n          mode: 'visible',\n          children: primaryChildren\n        };\n        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n        // boundary) already mounted but this is a new fiber.\n\n        fallbackChildFragment.flags |= Placement;\n        primaryChildFragment.return = workInProgress;\n        fallbackChildFragment.return = workInProgress;\n        primaryChildFragment.sibling = fallbackChildFragment;\n        workInProgress.child = primaryChildFragment;\n        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n          // We will have dropped the effect list which contains the\n          // deletion. We need to reconcile to delete the current child.\n          reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n        }\n        return fallbackChildFragment;\n      }\n      function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n        // During the first pass, we'll bail out and not drill into the children.\n        // Instead, we'll leave the content in place and try to hydrate it later.\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          {\n            error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n          }\n          workInProgress.lanes = laneToLanes(SyncLane);\n        } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n          // This is a client-only boundary. Since we won't get any content from the server\n          // for this, we need to schedule that at a higher priority based on when it would\n          // have timed out. In theory we could render it in this pass but it would have the\n          // wrong priority associated with it and will prevent hydration of parent path.\n          // Instead, we'll leave work left on it to render it in a separate commit.\n          // TODO This time should be the time at which the server rendered response that is\n          // a parent to this boundary was displayed. However, since we currently don't have\n          // a protocol to transfer that time, we'll just estimate it by using the current\n          // time. This will mean that Suspense timeouts are slightly shifted to later than\n          // they should be.\n          // Schedule a normal pri update to render this content.\n          workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n        } else {\n          // We'll continue hydrating the rest at offscreen priority since we'll already\n          // be showing the right content coming from the server, it is no rush.\n          workInProgress.lanes = laneToLanes(OffscreenLane);\n        }\n        return null;\n      }\n      function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\n        if (!didSuspend) {\n          // This is the first render pass. Attempt to hydrate.\n          // We should never be hydrating at this point because it is the first pass,\n          // but after we've already committed once.\n          warnIfHydrating();\n          if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes,\n            // TODO: When we delete legacy mode, we should make this error argument\n            // required — every concurrent mode path that causes hydration to\n            // de-opt to client rendering should have an error message.\n            null);\n          }\n          if (isSuspenseInstanceFallback(suspenseInstance)) {\n            // This boundary is in a permanent fallback state. In this case, we'll never\n            // get an update and we'll never be able to hydrate the final content. Let's just try the\n            // client side render instead.\n            var digest, message, stack;\n            {\n              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n              digest = _getSuspenseInstanceF.digest;\n              message = _getSuspenseInstanceF.message;\n              stack = _getSuspenseInstanceF.stack;\n            }\n            var error;\n            if (message) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(message);\n            } else {\n              error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\n            }\n            var capturedValue = createCapturedValue(error, digest, stack);\n            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n          }\n          // any context has changed, we need to treat is as if the input might have changed.\n\n          var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n          if (didReceiveUpdate || hasContextChanged) {\n            // This boundary has changed since the first render. This means that we are now unable to\n            // hydrate it. We might still be able to hydrate it using a higher priority lane.\n            var root = getWorkInProgressRoot();\n            if (root !== null) {\n              var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n                // Intentionally mutating since this render will get interrupted. This\n                // is one of the very rare times where we mutate the current tree\n                // during the render phase.\n                suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n                var eventTime = NoTimestamp;\n                enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n                scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\n              }\n            } // If we have scheduled higher pri work above, this will probably just abort the render\n            // since we now have higher priority work, but in case it doesn't, we need to prepare to\n            // render something, if we time out. Even if that requires us to delete everything and\n            // skip hydration.\n            // Delay having to do this as long as the suspense timeout allows us.\n\n            renderDidSuspendDelayIfPossible();\n            var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n          } else if (isSuspenseInstancePending(suspenseInstance)) {\n            // This component is still pending more data from the server, so we can't hydrate its\n            // content. We treat it as if this component suspended itself. It might seem as if\n            // we could just try to render it client-side instead. However, this will perform a\n            // lot of unnecessary work and is unlikely to complete since it often will suspend\n            // on missing data anyway. Additionally, the server might be able to render more\n            // than we can on the client yet. In that case we'd end up with more fallback states\n            // on the client than if we just leave it alone. If the server times out or errors\n            // these should update this boundary to the permanent Fallback state instead.\n            // Mark it as having captured (i.e. suspended).\n            workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n            workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n            var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n            registerSuspenseInstanceRetry(suspenseInstance, retry);\n            return null;\n          } else {\n            // This is the first attempt.\n            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n            var primaryChildren = nextProps.children;\n            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n            // tree is part of a hydrating tree. This is used to determine if a child\n            // node has fully mounted yet, and for scheduling event replaying.\n            // Conceptually this is similar to Placement in that a new subtree is\n            // inserted into the React tree here. It just happens to not need DOM\n            // mutations because it already exists.\n\n            primaryChildFragment.flags |= Hydrating;\n            return primaryChildFragment;\n          }\n        } else {\n          // This is the second render pass. We already attempted to hydrated, but\n          // something either suspended or errored.\n          if (workInProgress.flags & ForceClientRender) {\n            // Something errored during hydration. Try again without hydrating.\n            workInProgress.flags &= ~ForceClientRender;\n            var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n            return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\n          } else if (workInProgress.memoizedState !== null) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            var nextPrimaryChildren = nextProps.children;\n            var nextFallbackChildren = nextProps.fallback;\n            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n            var _primaryChildFragment4 = workInProgress.child;\n            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n      function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n        var alternate = fiber.alternate;\n        if (alternate !== null) {\n          alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n        }\n        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n      }\n      function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n        // Mark any Suspense boundaries with fallbacks as having work to do.\n        // If they were previously forced into fallbacks, they may now be able\n        // to unblock.\n        var node = firstChild;\n        while (node !== null) {\n          if (node.tag === SuspenseComponent) {\n            var state = node.memoizedState;\n            if (state !== null) {\n              scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n            }\n          } else if (node.tag === SuspenseListComponent) {\n            // If the tail is hidden there might not be an Suspense boundaries\n            // to schedule work on. In this case we have to schedule it on the\n            // list itself.\n            // We don't have to traverse to the children of the list since\n            // the list will propagate the change when it rerenders.\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n      function findLastContentRow(firstChild) {\n        // This is going to find the last row among these children that is already\n        // showing content on the screen, as opposed to being in fallback state or\n        // new. If a row has multiple Suspense boundaries, any of them being in the\n        // fallback state, counts as the whole row being in a fallback state.\n        // Note that the \"rows\" will be workInProgress, but any nested children\n        // will still be current since we haven't rendered them yet. The mounted\n        // order may not be the same as the new order. We use the new order.\n        var row = firstChild;\n        var lastContentRow = null;\n        while (row !== null) {\n          var currentRow = row.alternate; // New rows can't be content rows.\n\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            lastContentRow = row;\n          }\n          row = row.sibling;\n        }\n        return lastContentRow;\n      }\n      function validateRevealOrder(revealOrder) {\n        {\n          if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n            didWarnAboutRevealOrder[revealOrder] = true;\n            if (typeof revealOrder === 'string') {\n              switch (revealOrder.toLowerCase()) {\n                case 'together':\n                case 'forwards':\n                case 'backwards':\n                  {\n                    error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                    break;\n                  }\n                case 'forward':\n                case 'backward':\n                  {\n                    error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                    break;\n                  }\n                default:\n                  error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                  break;\n              }\n            } else {\n              error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n            }\n          }\n        }\n      }\n      function validateTailOptions(tailMode, revealOrder) {\n        {\n          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n              didWarnAboutTailOptions[tailMode] = true;\n              error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n              didWarnAboutTailOptions[tailMode] = true;\n              error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n            }\n          }\n        }\n      }\n      function validateSuspenseListNestedChild(childSlot, index) {\n        {\n          var isAnArray = isArray(childSlot);\n          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n          if (isAnArray || isIterable) {\n            var type = isAnArray ? 'array' : 'iterable';\n            error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n            return false;\n          }\n        }\n        return true;\n      }\n      function validateSuspenseListChildren(children, revealOrder) {\n        {\n          if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n            if (isArray(children)) {\n              for (var i = 0; i < children.length; i++) {\n                if (!validateSuspenseListNestedChild(children[i], i)) {\n                  return;\n                }\n              }\n            } else {\n              var iteratorFn = getIteratorFn(children);\n              if (typeof iteratorFn === 'function') {\n                var childrenIterator = iteratorFn.call(children);\n                if (childrenIterator) {\n                  var step = childrenIterator.next();\n                  var _i = 0;\n                  for (; !step.done; step = childrenIterator.next()) {\n                    if (!validateSuspenseListNestedChild(step.value, _i)) {\n                      return;\n                    }\n                    _i++;\n                  }\n                }\n              } else {\n                error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n              }\n            }\n          }\n        }\n      }\n      function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n        var renderState = workInProgress.memoizedState;\n        if (renderState === null) {\n          workInProgress.memoizedState = {\n            isBackwards: isBackwards,\n            rendering: null,\n            renderingStartTime: 0,\n            last: lastContentRow,\n            tail: tail,\n            tailMode: tailMode\n          };\n        } else {\n          // We can reuse the existing object from previous renders.\n          renderState.isBackwards = isBackwards;\n          renderState.rendering = null;\n          renderState.renderingStartTime = 0;\n          renderState.last = lastContentRow;\n          renderState.tail = tail;\n          renderState.tailMode = tailMode;\n        }\n      } // This can end up rendering this component multiple passes.\n      // The first pass splits the children fibers into two sets. A head and tail.\n      // We first render the head. If anything is in fallback state, we do another\n      // pass through beginWork to rerender all children (including the tail) with\n      // the force suspend context. If the first render didn't have anything in\n      // in fallback state. Then we render each row in the tail one-by-one.\n      // That happens in the completeWork phase without going back to beginWork.\n\n      function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n        var nextProps = workInProgress.pendingProps;\n        var revealOrder = nextProps.revealOrder;\n        var tailMode = nextProps.tail;\n        var newChildren = nextProps.children;\n        validateRevealOrder(revealOrder);\n        validateTailOptions(tailMode, revealOrder);\n        validateSuspenseListChildren(newChildren, revealOrder);\n        reconcileChildren(current, workInProgress, newChildren, renderLanes);\n        var suspenseContext = suspenseStackCursor.current;\n        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n        if (shouldForceFallback) {\n          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n          workInProgress.flags |= DidCapture;\n        } else {\n          var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n          if (didSuspendBefore) {\n            // If we previously forced a fallback, we need to schedule work\n            // on any nested boundaries to let them know to try to render\n            // again. This is the same as context updating.\n            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n          }\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          // In legacy mode, SuspenseList doesn't work so we just\n          // use make it a noop by treating it as the default revealOrder.\n          workInProgress.memoizedState = null;\n        } else {\n          switch (revealOrder) {\n            case 'forwards':\n              {\n                var lastContentRow = findLastContentRow(workInProgress.child);\n                var tail;\n                if (lastContentRow === null) {\n                  // The whole list is part of the tail.\n                  // TODO: We could fast path by just rendering the tail now.\n                  tail = workInProgress.child;\n                  workInProgress.child = null;\n                } else {\n                  // Disconnect the tail rows after the content row.\n                  // We're going to render them separately later.\n                  tail = lastContentRow.sibling;\n                  lastContentRow.sibling = null;\n                }\n                initSuspenseListRenderState(workInProgress, false,\n                // isBackwards\n                tail, lastContentRow, tailMode);\n                break;\n              }\n            case 'backwards':\n              {\n                // We're going to find the first row that has existing content.\n                // At the same time we're going to reverse the list of everything\n                // we pass in the meantime. That's going to be our tail in reverse\n                // order.\n                var _tail = null;\n                var row = workInProgress.child;\n                workInProgress.child = null;\n                while (row !== null) {\n                  var currentRow = row.alternate; // New rows can't be content rows.\n\n                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                    // This is the beginning of the main content.\n                    workInProgress.child = row;\n                    break;\n                  }\n                  var nextRow = row.sibling;\n                  row.sibling = _tail;\n                  _tail = row;\n                  row = nextRow;\n                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n                initSuspenseListRenderState(workInProgress, true,\n                // isBackwards\n                _tail, null,\n                // last\n                tailMode);\n                break;\n              }\n            case 'together':\n              {\n                initSuspenseListRenderState(workInProgress, false,\n                // isBackwards\n                null,\n                // tail\n                null,\n                // last\n                undefined);\n                break;\n              }\n            default:\n              {\n                // The default reveal order is the same as not having\n                // a boundary.\n                workInProgress.memoizedState = null;\n              }\n          }\n        }\n        return workInProgress.child;\n      }\n      function updatePortalComponent(current, workInProgress, renderLanes) {\n        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n        var nextChildren = workInProgress.pendingProps;\n        if (current === null) {\n          // Portals are special because we don't append the children during mount\n          // but at commit. Therefore we need to track insertions which the normal\n          // flow doesn't do during mount. This doesn't happen at the root because\n          // the root always starts with a \"current\" with a null child.\n          // TODO: Consider unifying this with how the root works.\n          workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n        } else {\n          reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n        }\n        return workInProgress.child;\n      }\n      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n      function updateContextProvider(current, workInProgress, renderLanes) {\n        var providerType = workInProgress.type;\n        var context = providerType._context;\n        var newProps = workInProgress.pendingProps;\n        var oldProps = workInProgress.memoizedProps;\n        var newValue = newProps.value;\n        {\n          if (!('value' in newProps)) {\n            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n              hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n              error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n            }\n          }\n          var providerPropTypes = workInProgress.type.propTypes;\n          if (providerPropTypes) {\n            checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n          }\n        }\n        pushProvider(workInProgress, context, newValue);\n        {\n          if (oldProps !== null) {\n            var oldValue = oldProps.value;\n            if (objectIs(oldValue, newValue)) {\n              // No change. Bailout early if children are the same.\n              if (oldProps.children === newProps.children && !hasContextChanged()) {\n                return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n              }\n            } else {\n              // The context value changed. Search for matching consumers and schedule\n              // them to update.\n              propagateContextChange(workInProgress, context, renderLanes);\n            }\n          }\n        }\n        var newChildren = newProps.children;\n        reconcileChildren(current, workInProgress, newChildren, renderLanes);\n        return workInProgress.child;\n      }\n      var hasWarnedAboutUsingContextAsConsumer = false;\n      function updateContextConsumer(current, workInProgress, renderLanes) {\n        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n        // DEV mode, we create a separate object for Context.Consumer that acts\n        // like a proxy to Context. This proxy object adds unnecessary code in PROD\n        // so we use the old behaviour (Context.Consumer references Context) to\n        // reduce size and overhead. The separate object references context via\n        // a property called \"_context\", which also gives us the ability to check\n        // in DEV mode if this property exists or not and warn if it does not.\n\n        {\n          if (context._context === undefined) {\n            // This may be because it's a Context (rather than a Consumer).\n            // Or it may be because it's older React where they're the same thing.\n            // We only want to warn if we're sure it's a new React.\n            if (context !== context.Consumer) {\n              if (!hasWarnedAboutUsingContextAsConsumer) {\n                hasWarnedAboutUsingContextAsConsumer = true;\n                error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n              }\n            }\n          } else {\n            context = context._context;\n          }\n        }\n        var newProps = workInProgress.pendingProps;\n        var render = newProps.children;\n        {\n          if (typeof render !== 'function') {\n            error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n          }\n        }\n        prepareToReadContext(workInProgress, renderLanes);\n        var newValue = readContext(context);\n        {\n          markComponentRenderStarted(workInProgress);\n        }\n        var newChildren;\n        {\n          ReactCurrentOwner$1.current = workInProgress;\n          setIsRendering(true);\n          newChildren = render(newValue);\n          setIsRendering(false);\n        }\n        {\n          markComponentRenderStopped();\n        } // React DevTools reads this flag.\n\n        workInProgress.flags |= PerformedWork;\n        reconcileChildren(current, workInProgress, newChildren, renderLanes);\n        return workInProgress.child;\n      }\n      function markWorkInProgressReceivedUpdate() {\n        didReceiveUpdate = true;\n      }\n      function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          if (current !== null) {\n            // A lazy component only mounts if it suspended inside a non-\n            // concurrent tree, in an inconsistent state. We want to treat it like\n            // a new mount, even though an empty version of it already committed.\n            // Disconnect the alternate pointers.\n            current.alternate = null;\n            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n            workInProgress.flags |= Placement;\n          }\n        }\n      }\n      function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n        if (current !== null) {\n          // Reuse previous dependencies\n          workInProgress.dependencies = current.dependencies;\n        }\n        {\n          // Don't update \"base\" render times for bailouts.\n          stopProfilerTimerIfRunning();\n        }\n        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n          // The children don't have any work either. We can skip them.\n          // TODO: Once we add back resuming, we should check if the children are\n          // a work-in-progress set. If so, we need to transfer their effects.\n          {\n            return null;\n          }\n        } // This fiber doesn't have work, but its subtree does. Clone the child\n        // fibers and continue.\n\n        cloneChildFibers(current, workInProgress);\n        return workInProgress.child;\n      }\n      function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n        {\n          var returnFiber = oldWorkInProgress.return;\n          if (returnFiber === null) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            throw new Error('Cannot swap the root fiber.');\n          } // Disconnect from the old current.\n          // It will get deleted.\n\n          current.alternate = null;\n          oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n          newWorkInProgress.index = oldWorkInProgress.index;\n          newWorkInProgress.sibling = oldWorkInProgress.sibling;\n          newWorkInProgress.return = oldWorkInProgress.return;\n          newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n          if (oldWorkInProgress === returnFiber.child) {\n            returnFiber.child = newWorkInProgress;\n          } else {\n            var prevSibling = returnFiber.child;\n            if (prevSibling === null) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              throw new Error('Expected parent to have a child.');\n            }\n            while (prevSibling.sibling !== oldWorkInProgress) {\n              prevSibling = prevSibling.sibling;\n              if (prevSibling === null) {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                throw new Error('Expected to find the previous sibling.');\n              }\n            }\n            prevSibling.sibling = newWorkInProgress;\n          } // Delete the old fiber and place the new one.\n          // Since the old fiber is disconnected, we have to schedule it manually.\n\n          var deletions = returnFiber.deletions;\n          if (deletions === null) {\n            returnFiber.deletions = [current];\n            returnFiber.flags |= ChildDeletion;\n          } else {\n            deletions.push(current);\n          }\n          newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n          return newWorkInProgress;\n        }\n      }\n      function checkScheduledUpdateOrContext(current, renderLanes) {\n        // Before performing an early bailout, we must check if there are pending\n        // updates or context.\n        var updateLanes = current.lanes;\n        if (includesSomeLane(updateLanes, renderLanes)) {\n          return true;\n        } // No pending update, but because context is propagated lazily, we need\n\n        return false;\n      }\n      function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n        // This fiber does not have any pending work. Bailout without entering\n        // the begin phase. There's still some bookkeeping we that needs to be done\n        // in this optimized path, mostly pushing stuff onto the stack.\n        switch (workInProgress.tag) {\n          case HostRoot:\n            pushHostRootContext(workInProgress);\n            workInProgress.stateNode;\n            resetHydrationState();\n            break;\n          case HostComponent:\n            pushHostContext(workInProgress);\n            break;\n          case ClassComponent:\n            {\n              var Component = workInProgress.type;\n              if (isContextProvider(Component)) {\n                pushContextProvider(workInProgress);\n              }\n              break;\n            }\n          case HostPortal:\n            pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n            break;\n          case ContextProvider:\n            {\n              var newValue = workInProgress.memoizedProps.value;\n              var context = workInProgress.type._context;\n              pushProvider(workInProgress, context, newValue);\n              break;\n            }\n          case Profiler:\n            {\n              // Profiler should only call onRender when one of its descendants actually rendered.\n              var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n              if (hasChildWork) {\n                workInProgress.flags |= Update;\n              }\n              {\n                // Reset effect durations for the next eventual effect phase.\n                // These are reset during render to allow the DevTools commit hook a chance to read them,\n                var stateNode = workInProgress.stateNode;\n                stateNode.effectDuration = 0;\n                stateNode.passiveEffectDuration = 0;\n              }\n            }\n            break;\n          case SuspenseComponent:\n            {\n              var state = workInProgress.memoizedState;\n              if (state !== null) {\n                if (state.dehydrated !== null) {\n                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n                  // been unsuspended it has committed as a resolved Suspense component.\n                  // If it needs to be retried, it should have work scheduled on it.\n\n                  workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n                  // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n                  return null;\n                } // If this boundary is currently timed out, we need to decide\n                // whether to retry the primary children, or to skip over it and\n                // go straight to the fallback. Check the priority of the primary\n                // child fragment.\n\n                var primaryChildFragment = workInProgress.child;\n                var primaryChildLanes = primaryChildFragment.childLanes;\n                if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                  // The primary children have pending work. Use the normal path\n                  // to attempt to render the primary children again.\n                  return updateSuspenseComponent(current, workInProgress, renderLanes);\n                } else {\n                  // The primary child fragment does not have pending work marked\n                  // on it\n                  pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n                  // priority. Bailout.\n\n                  var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                  if (child !== null) {\n                    // The fallback children have pending work. Skip over the\n                    // primary children and work on the fallback.\n                    return child.sibling;\n                  } else {\n                    // Note: We can return `null` here because we already checked\n                    // whether there were nested context consumers, via the call to\n                    // `bailoutOnAlreadyFinishedWork` above.\n                    return null;\n                  }\n                }\n              } else {\n                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n              }\n              break;\n            }\n          case SuspenseListComponent:\n            {\n              var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n              var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n              if (didSuspendBefore) {\n                if (_hasChildWork) {\n                  // If something was in fallback state last time, and we have all the\n                  // same children then we're still in progressive loading state.\n                  // Something might get unblocked by state updates or retries in the\n                  // tree which will affect the tail. So we need to use the normal\n                  // path to compute the correct tail.\n                  return updateSuspenseListComponent(current, workInProgress, renderLanes);\n                } // If none of the children had any work, that means that none of\n                // them got retried so they'll still be blocked in the same way\n                // as before. We can fast bail out.\n\n                workInProgress.flags |= DidCapture;\n              } // If nothing suspended before and we're rendering the same children,\n              // then the tail doesn't matter. Anything new that suspends will work\n              // in the \"together\" mode, so we can continue from the state we had.\n\n              var renderState = workInProgress.memoizedState;\n              if (renderState !== null) {\n                // Reset to the \"together\" mode in case we've started a different\n                // update in the past but didn't complete it.\n                renderState.rendering = null;\n                renderState.tail = null;\n                renderState.lastEffect = null;\n              }\n              pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n              if (_hasChildWork) {\n                break;\n              } else {\n                // If none of the children had any work, that means that none of\n                // them got retried so they'll still be blocked in the same way\n                // as before. We can fast bail out.\n                return null;\n              }\n            }\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n            {\n              // Need to check if the tree still needs to be deferred. This is\n              // almost identical to the logic used in the normal update path,\n              // so we'll just enter that. The only difference is we'll bail out\n              // at the next level instead of this one, because the child props\n              // have not changed. Which is fine.\n              // TODO: Probably should refactor `beginWork` to split the bailout\n              // path from the normal path. I'm tempted to do a labeled break here\n              // but I won't :)\n              workInProgress.lanes = NoLanes;\n              return updateOffscreenComponent(current, workInProgress, renderLanes);\n            }\n        }\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      function beginWork(current, workInProgress, renderLanes) {\n        {\n          if (workInProgress._debugNeedsRemount && current !== null) {\n            // This will restart the begin phase with a new fiber.\n            return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n          }\n        }\n        if (current !== null) {\n          var oldProps = current.memoizedProps;\n          var newProps = workInProgress.pendingProps;\n          if (oldProps !== newProps || hasContextChanged() ||\n          // Force a re-render if the implementation changed due to hot reload:\n          workInProgress.type !== current.type) {\n            // If props or context changed, mark the fiber as having performed work.\n            // This may be unset if the props are determined to be equal later (memo).\n            didReceiveUpdate = true;\n          } else {\n            // Neither props nor legacy context changes. Check if there's a pending\n            // update or context change.\n            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n            if (!hasScheduledUpdateOrContext &&\n            // If this is the second pass of an error or suspense boundary, there\n            // may not be work scheduled on `current`, so we check for this flag.\n            (workInProgress.flags & DidCapture) === NoFlags) {\n              // No pending updates or context. Bail out now.\n              didReceiveUpdate = false;\n              return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n            }\n            if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n              // This is a special case that only exists for legacy mode.\n              // See https://github.com/facebook/react/pull/19216.\n              didReceiveUpdate = true;\n            } else {\n              // An update was scheduled on this fiber, but there are no new props\n              // nor legacy context. Set this to false. If an update queue or context\n              // consumer produces a changed value, it will set this to true. Otherwise,\n              // the component will assume the children have not changed and bail out.\n              didReceiveUpdate = false;\n            }\n          }\n        } else {\n          didReceiveUpdate = false;\n          if (getIsHydrating() && isForkedChild(workInProgress)) {\n            // Check if this child belongs to a list of muliple children in\n            // its parent.\n            //\n            // In a true multi-threaded implementation, we would render children on\n            // parallel threads. This would represent the beginning of a new render\n            // thread for this subtree.\n            //\n            // We only use this for id generation during hydration, which is why the\n            // logic is located in this special branch.\n            var slotIndex = workInProgress.index;\n            var numberOfForks = getForksAtLevel();\n            pushTreeId(workInProgress, numberOfForks, slotIndex);\n          }\n        } // Before entering the begin phase, clear pending update priority.\n        // TODO: This assumes that we're about to evaluate the component and process\n        // the update queue. However, there's an exception: SimpleMemoComponent\n        // sometimes bails out later in the begin phase. This indicates that we should\n        // move this assignment out of the common path and into each branch.\n\n        workInProgress.lanes = NoLanes;\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n            {\n              return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n            }\n          case LazyComponent:\n            {\n              var elementType = workInProgress.elementType;\n              return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n            }\n          case FunctionComponent:\n            {\n              var Component = workInProgress.type;\n              var unresolvedProps = workInProgress.pendingProps;\n              var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n              return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n            }\n          case ClassComponent:\n            {\n              var _Component = workInProgress.type;\n              var _unresolvedProps = workInProgress.pendingProps;\n              var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n              return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n            }\n          case HostRoot:\n            return updateHostRoot(current, workInProgress, renderLanes);\n          case HostComponent:\n            return updateHostComponent(current, workInProgress, renderLanes);\n          case HostText:\n            return updateHostText(current, workInProgress);\n          case SuspenseComponent:\n            return updateSuspenseComponent(current, workInProgress, renderLanes);\n          case HostPortal:\n            return updatePortalComponent(current, workInProgress, renderLanes);\n          case ForwardRef:\n            {\n              var type = workInProgress.type;\n              var _unresolvedProps2 = workInProgress.pendingProps;\n              var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n              return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n            }\n          case Fragment:\n            return updateFragment(current, workInProgress, renderLanes);\n          case Mode:\n            return updateMode(current, workInProgress, renderLanes);\n          case Profiler:\n            return updateProfiler(current, workInProgress, renderLanes);\n          case ContextProvider:\n            return updateContextProvider(current, workInProgress, renderLanes);\n          case ContextConsumer:\n            return updateContextConsumer(current, workInProgress, renderLanes);\n          case MemoComponent:\n            {\n              var _type2 = workInProgress.type;\n              var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n              {\n                if (workInProgress.type !== workInProgress.elementType) {\n                  var outerPropTypes = _type2.propTypes;\n                  if (outerPropTypes) {\n                    checkPropTypes(outerPropTypes, _resolvedProps3,\n                    // Resolved for outer only\n                    'prop', getComponentNameFromType(_type2));\n                  }\n                }\n              }\n              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n              return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n            }\n          case SimpleMemoComponent:\n            {\n              return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n            }\n          case IncompleteClassComponent:\n            {\n              var _Component2 = workInProgress.type;\n              var _unresolvedProps4 = workInProgress.pendingProps;\n              var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n              return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n            }\n          case SuspenseListComponent:\n            {\n              return updateSuspenseListComponent(current, workInProgress, renderLanes);\n            }\n          case ScopeComponent:\n            {\n              break;\n            }\n          case OffscreenComponent:\n            {\n              return updateOffscreenComponent(current, workInProgress, renderLanes);\n            }\n        }\n        throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n      }\n      function markUpdate(workInProgress) {\n        // Tag the fiber with an update effect. This turns a Placement into\n        // a PlacementAndUpdate.\n        workInProgress.flags |= Update;\n      }\n      function markRef$1(workInProgress) {\n        workInProgress.flags |= Ref;\n        {\n          workInProgress.flags |= RefStatic;\n        }\n      }\n      function hadNoMutationsEffects(current, completedWork) {\n        var didBailout = current !== null && current.child === completedWork.child;\n        if (didBailout) {\n          return true;\n        }\n        if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n          return false;\n        } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n        // then we only have to check the `completedWork.subtreeFlags`.\n\n        var child = completedWork.child;\n        while (child !== null) {\n          if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n            return false;\n          }\n          child = child.sibling;\n        }\n        return true;\n      }\n      var appendAllChildren;\n      var updateHostContainer;\n      var updateHostComponent$1;\n      var updateHostText$1;\n      if (supportsMutation) {\n        // Mutation mode\n        appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n          // We only have the top Fiber that was created but we need recurse down its\n          // children to find all the terminal nodes.\n          var node = workInProgress.child;\n          while (node !== null) {\n            if (node.tag === HostComponent || node.tag === HostText) {\n              appendInitialChild(parent, node.stateNode);\n            } else if (node.tag === HostPortal) ;else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n            if (node === workInProgress) {\n              return;\n            }\n            while (node.sibling === null) {\n              if (node.return === null || node.return === workInProgress) {\n                return;\n              }\n              node = node.return;\n            }\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        };\n        updateHostContainer = function (current, workInProgress) {// Noop\n        };\n        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n          // If we have an alternate, that means this is an update and we need to\n          // schedule a side-effect to do the updates.\n          var oldProps = current.memoizedProps;\n          if (oldProps === newProps) {\n            // In mutation mode, this is sufficient for a bailout because\n            // we won't touch this node even if children changed.\n            return;\n          } // If we get updated because one of our children updated, we don't\n          // have newProps so we'll have to reuse them.\n          // TODO: Split the update API as separate for the props vs. children.\n          // Even better would be if children weren't special cased at all tho.\n\n          var instance = workInProgress.stateNode;\n          var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n          // component is hitting the resume path. Figure out why. Possibly\n          // related to `hidden`.\n\n          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n          workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n          // is a new ref we mark this as an update. All the work is done in commitWork.\n\n          if (updatePayload) {\n            markUpdate(workInProgress);\n          }\n        };\n        updateHostText$1 = function (current, workInProgress, oldText, newText) {\n          // If the text differs, mark it as an update. All the work in done in commitWork.\n          if (oldText !== newText) {\n            markUpdate(workInProgress);\n          }\n        };\n      } else if (supportsPersistence) {\n        // Persistent host tree mode\n        appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n          // We only have the top Fiber that was created but we need recurse down its\n          // children to find all the terminal nodes.\n          var node = workInProgress.child;\n          while (node !== null) {\n            // eslint-disable-next-line no-labels\n            if (node.tag === HostComponent) {\n              var instance = node.stateNode;\n              if (needsVisibilityToggle && isHidden) {\n                // This child is inside a timed out tree. Hide it.\n                var props = node.memoizedProps;\n                var type = node.type;\n                instance = cloneHiddenInstance(instance, type, props, node);\n              }\n              appendInitialChild(parent, instance);\n            } else if (node.tag === HostText) {\n              var _instance = node.stateNode;\n              if (needsVisibilityToggle && isHidden) {\n                // This child is inside a timed out tree. Hide it.\n                var text = node.memoizedProps;\n                _instance = cloneHiddenTextInstance(_instance, text, node);\n              }\n              appendInitialChild(parent, _instance);\n            } else if (node.tag === HostPortal) ;else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n              // The children in this boundary are hidden. Toggle their visibility\n              // before appending.\n              var child = node.child;\n              if (child !== null) {\n                child.return = node;\n              }\n              appendAllChildren(parent, node, true, true);\n            } else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n            node = node;\n            if (node === workInProgress) {\n              return;\n            }\n            while (node.sibling === null) {\n              if (node.return === null || node.return === workInProgress) {\n                return;\n              }\n              node = node.return;\n            }\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n        var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n          // We only have the top Fiber that was created but we need recurse down its\n          // children to find all the terminal nodes.\n          var node = workInProgress.child;\n          while (node !== null) {\n            // eslint-disable-next-line no-labels\n            if (node.tag === HostComponent) {\n              var instance = node.stateNode;\n              if (needsVisibilityToggle && isHidden) {\n                // This child is inside a timed out tree. Hide it.\n                var props = node.memoizedProps;\n                var type = node.type;\n                instance = cloneHiddenInstance(instance, type, props, node);\n              }\n              appendChildToContainerChildSet(containerChildSet, instance);\n            } else if (node.tag === HostText) {\n              var _instance2 = node.stateNode;\n              if (needsVisibilityToggle && isHidden) {\n                // This child is inside a timed out tree. Hide it.\n                var text = node.memoizedProps;\n                _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n              }\n              appendChildToContainerChildSet(containerChildSet, _instance2);\n            } else if (node.tag === HostPortal) ;else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n              // The children in this boundary are hidden. Toggle their visibility\n              // before appending.\n              var child = node.child;\n              if (child !== null) {\n                child.return = node;\n              }\n              appendAllChildrenToContainer(containerChildSet, node, true, true);\n            } else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n            node = node;\n            if (node === workInProgress) {\n              return;\n            }\n            while (node.sibling === null) {\n              if (node.return === null || node.return === workInProgress) {\n                return;\n              }\n              node = node.return;\n            }\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        };\n        updateHostContainer = function (current, workInProgress) {\n          var portalOrRoot = workInProgress.stateNode;\n          var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n          if (childrenUnchanged) ;else {\n            var container = portalOrRoot.containerInfo;\n            var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n            appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n            portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n            markUpdate(workInProgress);\n            finalizeContainerChildren(container, newChildSet);\n          }\n        };\n        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n          var currentInstance = current.stateNode;\n          var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n          // This guarantees that we can reuse all of them.\n\n          var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n          if (childrenUnchanged && oldProps === newProps) {\n            // No changes, just reuse the existing instance.\n            // Note that this might release a previous clone.\n            workInProgress.stateNode = currentInstance;\n            return;\n          }\n          var recyclableInstance = workInProgress.stateNode;\n          var currentHostContext = getHostContext();\n          var updatePayload = null;\n          if (oldProps !== newProps) {\n            updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n          }\n          if (childrenUnchanged && updatePayload === null) {\n            // No changes, just reuse the existing instance.\n            // Note that this might release a previous clone.\n            workInProgress.stateNode = currentInstance;\n            return;\n          }\n          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n            markUpdate(workInProgress);\n          }\n          workInProgress.stateNode = newInstance;\n          if (childrenUnchanged) {\n            // If there are no other effects in this tree, we need to flag this node as having one.\n            // Even though we're not going to use it for anything.\n            // Otherwise parents won't know that there are new children to propagate upwards.\n            markUpdate(workInProgress);\n          } else {\n            // If children might have changed, we have to add them all to the set.\n            appendAllChildren(newInstance, workInProgress, false, false);\n          }\n        };\n        updateHostText$1 = function (current, workInProgress, oldText, newText) {\n          if (oldText !== newText) {\n            // If the text content differs, we'll create a new text instance for it.\n            var rootContainerInstance = getRootHostContainer();\n            var currentHostContext = getHostContext();\n            workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n            // This lets the parents know that at least one of their children has changed.\n\n            markUpdate(workInProgress);\n          } else {\n            workInProgress.stateNode = current.stateNode;\n          }\n        };\n      } else {\n        // No host operations\n        updateHostContainer = function (current, workInProgress) {// Noop\n        };\n        updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n        };\n        updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n        };\n      }\n      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n        if (getIsHydrating()) {\n          // If we're hydrating, we should consume as many items as we can\n          // so we don't leave any behind.\n          return;\n        }\n        switch (renderState.tailMode) {\n          case 'hidden':\n            {\n              // Any insertions at the end of the tail list after this point\n              // should be invisible. If there are already mounted boundaries\n              // anything before them are not considered for collapsing.\n              // Therefore we need to go through the whole tail to find if\n              // there are any.\n              var tailNode = renderState.tail;\n              var lastTailNode = null;\n              while (tailNode !== null) {\n                if (tailNode.alternate !== null) {\n                  lastTailNode = tailNode;\n                }\n                tailNode = tailNode.sibling;\n              } // Next we're simply going to delete all insertions after the\n              // last rendered item.\n\n              if (lastTailNode === null) {\n                // All remaining items in the tail are insertions.\n                renderState.tail = null;\n              } else {\n                // Detach the insertion after the last node that was already\n                // inserted.\n                lastTailNode.sibling = null;\n              }\n              break;\n            }\n          case 'collapsed':\n            {\n              // Any insertions at the end of the tail list after this point\n              // should be invisible. If there are already mounted boundaries\n              // anything before them are not considered for collapsing.\n              // Therefore we need to go through the whole tail to find if\n              // there are any.\n              var _tailNode = renderState.tail;\n              var _lastTailNode = null;\n              while (_tailNode !== null) {\n                if (_tailNode.alternate !== null) {\n                  _lastTailNode = _tailNode;\n                }\n                _tailNode = _tailNode.sibling;\n              } // Next we're simply going to delete all insertions after the\n              // last rendered item.\n\n              if (_lastTailNode === null) {\n                // All remaining items in the tail are insertions.\n                if (!hasRenderedATailFallback && renderState.tail !== null) {\n                  // We suspended during the head. We want to show at least one\n                  // row at the tail. So we'll keep on and cut off the rest.\n                  renderState.tail.sibling = null;\n                } else {\n                  renderState.tail = null;\n                }\n              } else {\n                // Detach the insertion after the last node that was already\n                // inserted.\n                _lastTailNode.sibling = null;\n              }\n              break;\n            }\n        }\n      }\n      function bubbleProperties(completedWork) {\n        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n        var newChildLanes = NoLanes;\n        var subtreeFlags = NoFlags;\n        if (!didBailout) {\n          // Bubble up the earliest expiration time.\n          if ((completedWork.mode & ProfileMode) !== NoMode) {\n            // In profiling mode, resetChildExpirationTime is also used to reset\n            // profiler durations.\n            var actualDuration = completedWork.actualDuration;\n            var treeBaseDuration = completedWork.selfBaseDuration;\n            var child = completedWork.child;\n            while (child !== null) {\n              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n              subtreeFlags |= child.subtreeFlags;\n              subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n              // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n              // When work is done, it should bubble to the parent's actualDuration. If\n              // the fiber has not been cloned though, (meaning no work was done), then\n              // this value will reflect the amount of time spent working on a previous\n              // render. In that case it should not bubble. We determine whether it was\n              // cloned by comparing the child pointer.\n\n              actualDuration += child.actualDuration;\n              treeBaseDuration += child.treeBaseDuration;\n              child = child.sibling;\n            }\n            completedWork.actualDuration = actualDuration;\n            completedWork.treeBaseDuration = treeBaseDuration;\n          } else {\n            var _child = completedWork.child;\n            while (_child !== null) {\n              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n              subtreeFlags |= _child.subtreeFlags;\n              subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n              // smell because it assumes the commit phase is never concurrent with\n              // the render phase. Will address during refactor to alternate model.\n\n              _child.return = completedWork;\n              _child = _child.sibling;\n            }\n          }\n          completedWork.subtreeFlags |= subtreeFlags;\n        } else {\n          // Bubble up the earliest expiration time.\n          if ((completedWork.mode & ProfileMode) !== NoMode) {\n            // In profiling mode, resetChildExpirationTime is also used to reset\n            // profiler durations.\n            var _treeBaseDuration = completedWork.selfBaseDuration;\n            var _child2 = completedWork.child;\n            while (_child2 !== null) {\n              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n              // so we should bubble those up even during a bailout. All the other\n              // flags have a lifetime only of a single render + commit, so we should\n              // ignore them.\n\n              subtreeFlags |= _child2.subtreeFlags & StaticMask;\n              subtreeFlags |= _child2.flags & StaticMask;\n              _treeBaseDuration += _child2.treeBaseDuration;\n              _child2 = _child2.sibling;\n            }\n            completedWork.treeBaseDuration = _treeBaseDuration;\n          } else {\n            var _child3 = completedWork.child;\n            while (_child3 !== null) {\n              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n              // so we should bubble those up even during a bailout. All the other\n              // flags have a lifetime only of a single render + commit, so we should\n              // ignore them.\n\n              subtreeFlags |= _child3.subtreeFlags & StaticMask;\n              subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n              // smell because it assumes the commit phase is never concurrent with\n              // the render phase. Will address during refactor to alternate model.\n\n              _child3.return = completedWork;\n              _child3 = _child3.sibling;\n            }\n          }\n          completedWork.subtreeFlags |= subtreeFlags;\n        }\n        completedWork.childLanes = newChildLanes;\n        return didBailout;\n      }\n      function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n        if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n          warnIfUnhydratedTailNodes(workInProgress);\n          resetHydrationState();\n          workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n          return false;\n        }\n        var wasHydrated = popHydrationState(workInProgress);\n        if (nextState !== null && nextState.dehydrated !== null) {\n          // We might be inside a hydration state the first time we're picking up this\n          // Suspense boundary, and also after we've reentered it for further hydration.\n          if (current === null) {\n            if (!wasHydrated) {\n              throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n            }\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            bubbleProperties(workInProgress);\n            {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                var isTimedOutSuspense = nextState !== null;\n                if (isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  var primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                  }\n                }\n              }\n            }\n            return false;\n          } else {\n            // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n            // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            } // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n\n            workInProgress.flags |= Update;\n            bubbleProperties(workInProgress);\n            {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                var _isTimedOutSuspense = nextState !== null;\n                if (_isTimedOutSuspense) {\n                  // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                  var _primaryChildFragment = workInProgress.child;\n                  if (_primaryChildFragment !== null) {\n                    // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                    workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                  }\n                }\n              }\n            }\n            return false;\n          }\n        } else {\n          // Successfully completed this tree. If this was a forced client render,\n          // there may have been recoverable errors during first hydration\n          // attempt. If so, add them to a queue so we can log them in the\n          // commit phase.\n          upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n          return true;\n        }\n      }\n      function completeWork(current, workInProgress, renderLanes) {\n        var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n        // to the current tree provider fiber is just as fast and less error-prone.\n        // Ideally we would have a special version of the work loop only\n        // for hydration.\n\n        popTreeContext(workInProgress);\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case LazyComponent:\n          case SimpleMemoComponent:\n          case FunctionComponent:\n          case ForwardRef:\n          case Fragment:\n          case Mode:\n          case Profiler:\n          case ContextConsumer:\n          case MemoComponent:\n            bubbleProperties(workInProgress);\n            return null;\n          case ClassComponent:\n            {\n              var Component = workInProgress.type;\n              if (isContextProvider(Component)) {\n                popContext(workInProgress);\n              }\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          case HostRoot:\n            {\n              var fiberRoot = workInProgress.stateNode;\n              popHostContainer(workInProgress);\n              popTopLevelContextObject(workInProgress);\n              resetWorkInProgressVersions();\n              if (fiberRoot.pendingContext) {\n                fiberRoot.context = fiberRoot.pendingContext;\n                fiberRoot.pendingContext = null;\n              }\n              if (current === null || current.child === null) {\n                // If we hydrated, pop so that we can delete any remaining children\n                // that weren't hydrated.\n                var wasHydrated = popHydrationState(workInProgress);\n                if (wasHydrated) {\n                  // If we hydrated, then we'll need to schedule an update for\n                  // the commit side-effects on the root.\n                  markUpdate(workInProgress);\n                } else {\n                  if (current !== null) {\n                    var prevState = current.memoizedState;\n                    if (\n                    // Check if this is a client root\n                    !prevState.isDehydrated ||\n                    // Check if we reverted to client rendering (e.g. due to an error)\n                    (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                      // Schedule an effect to clear this container at the start of the\n                      // next commit. This handles the case of React rendering into a\n                      // container with previous children. It's also safe to do for\n                      // updates too, because current.child would only be null if the\n                      // previous render was null (so the container would already\n                      // be empty).\n                      workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                      // recoverable errors during first hydration attempt. If so, add\n                      // them to a queue so we can log them in the commit phase.\n\n                      upgradeHydrationErrorsToRecoverable();\n                    }\n                  }\n                }\n              }\n              updateHostContainer(current, workInProgress);\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          case HostComponent:\n            {\n              popHostContext(workInProgress);\n              var rootContainerInstance = getRootHostContainer();\n              var type = workInProgress.type;\n              if (current !== null && workInProgress.stateNode != null) {\n                updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n                if (current.ref !== workInProgress.ref) {\n                  markRef$1(workInProgress);\n                }\n              } else {\n                if (!newProps) {\n                  if (workInProgress.stateNode === null) {\n                    throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                  } // This can happen when we abort work.\n\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n                var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n                // \"stack\" as the parent. Then append children as we go in beginWork\n                // or completeWork depending on whether we want to add them top->down or\n                // bottom->up. Top->down is faster in IE11.\n\n                var _wasHydrated = popHydrationState(workInProgress);\n                if (_wasHydrated) {\n                  // TODO: Move this and createInstance step into the beginPhase\n                  // to consolidate.\n                  if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n                    // If changes to the hydrated node need to be applied at the\n                    // commit-phase we mark this as such.\n                    markUpdate(workInProgress);\n                  }\n                } else {\n                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n                  appendAllChildren(instance, workInProgress, false, false);\n                  workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n                  // (eg DOM renderer supports auto-focus for certain elements).\n                  // Make sure such renderers get scheduled for later work.\n\n                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n                    markUpdate(workInProgress);\n                  }\n                }\n                if (workInProgress.ref !== null) {\n                  // If there is a ref on a host node we need to schedule a callback\n                  markRef$1(workInProgress);\n                }\n              }\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          case HostText:\n            {\n              var newText = newProps;\n              if (current && workInProgress.stateNode != null) {\n                var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n                // to schedule a side-effect to do the updates.\n\n                updateHostText$1(current, workInProgress, oldText, newText);\n              } else {\n                if (typeof newText !== 'string') {\n                  if (workInProgress.stateNode === null) {\n                    throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                  } // This can happen when we abort work.\n                }\n                var _rootContainerInstance = getRootHostContainer();\n                var _currentHostContext = getHostContext();\n                var _wasHydrated2 = popHydrationState(workInProgress);\n                if (_wasHydrated2) {\n                  if (prepareToHydrateHostTextInstance(workInProgress)) {\n                    markUpdate(workInProgress);\n                  }\n                } else {\n                  workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n                }\n              }\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          case SuspenseComponent:\n            {\n              popSuspenseContext(workInProgress);\n              var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n              // to its own fiber type so that we can add other kinds of hydration\n              // boundaries that aren't associated with a Suspense tree. In anticipation\n              // of such a refactor, all the hydration logic is contained in\n              // this branch.\n\n              if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n                if (!fallthroughToNormalSuspensePath) {\n                  if (workInProgress.flags & ShouldCapture) {\n                    // Special case. There were remaining unhydrated nodes. We treat\n                    // this as a mismatch. Revert to client rendering.\n                    return workInProgress;\n                  } else {\n                    // Did not finish hydrating, either because this is the initial\n                    // render or because something suspended.\n                    return null;\n                  }\n                } // Continue with the normal Suspense path.\n              }\n              if ((workInProgress.flags & DidCapture) !== NoFlags) {\n                // Something suspended. Re-render with the fallback children.\n                workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n                if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                  transferActualDuration(workInProgress);\n                } // Don't bubble properties in this case.\n\n                return workInProgress;\n              }\n              var nextDidTimeout = nextState !== null;\n              var prevDidTimeout = current !== null && current.memoizedState !== null;\n              // a passive effect, which is when we process the transitions\n\n              if (nextDidTimeout !== prevDidTimeout) {\n                // an effect to toggle the subtree's visibility. When we switch from\n                // fallback -> primary, the inner Offscreen fiber schedules this effect\n                // as part of its normal complete phase. But when we switch from\n                // primary -> fallback, the inner Offscreen fiber does not have a complete\n                // phase. So we need to schedule its effect here.\n                //\n                // We also use this flag to connect/disconnect the effects, but the same\n                // logic applies: when re-connecting, the Offscreen fiber's complete\n                // phase will handle scheduling the effect. It's only when the fallback\n                // is active that we have to do anything special.\n\n                if (nextDidTimeout) {\n                  var _offscreenFiber2 = workInProgress.child;\n                  _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n                  // in the concurrent tree already suspended during this render.\n                  // This is a known bug.\n\n                  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n                    // TODO: Move this back to throwException because this is too late\n                    // if this is a large tree which is common for initial loads. We\n                    // don't know if we should restart a render or not until we get\n                    // this marker, and this is too late.\n                    // If this render already had a ping or lower pri updates,\n                    // and this is the first time we know we're going to suspend we\n                    // should be able to immediately restart from within throwException.\n                    var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                      // If this was in an invisible tree or a new render, then showing\n                      // this boundary is ok.\n                      renderDidSuspend();\n                    } else {\n                      // Otherwise, we're going to have to hide content so we should\n                      // suspend for longer if possible.\n                      renderDidSuspendDelayIfPossible();\n                    }\n                  }\n                }\n              }\n              var wakeables = workInProgress.updateQueue;\n              if (wakeables !== null) {\n                // Schedule an effect to attach a retry listener to the promise.\n                // TODO: Move to passive phase\n                workInProgress.flags |= Update;\n              }\n              bubbleProperties(workInProgress);\n              {\n                if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                  if (nextDidTimeout) {\n                    // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                    var primaryChildFragment = workInProgress.child;\n                    if (primaryChildFragment !== null) {\n                      // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                      workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                    }\n                  }\n                }\n              }\n              return null;\n            }\n          case HostPortal:\n            popHostContainer(workInProgress);\n            updateHostContainer(current, workInProgress);\n            if (current === null) {\n              preparePortalMount(workInProgress.stateNode.containerInfo);\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          case ContextProvider:\n            // Pop provider fiber\n            var context = workInProgress.type._context;\n            popProvider(context, workInProgress);\n            bubbleProperties(workInProgress);\n            return null;\n          case IncompleteClassComponent:\n            {\n              // Same as class component case. I put it down here so that the tags are\n              // sequential to ensure this switch is compiled to a jump table.\n              var _Component = workInProgress.type;\n              if (isContextProvider(_Component)) {\n                popContext(workInProgress);\n              }\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          case SuspenseListComponent:\n            {\n              popSuspenseContext(workInProgress);\n              var renderState = workInProgress.memoizedState;\n              if (renderState === null) {\n                // We're running in the default, \"independent\" mode.\n                // We don't do anything in this mode.\n                bubbleProperties(workInProgress);\n                return null;\n              }\n              var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n              var renderedTail = renderState.rendering;\n              if (renderedTail === null) {\n                // We just rendered the head.\n                if (!didSuspendAlready) {\n                  // This is the first pass. We need to figure out if anything is still\n                  // suspended in the rendered set.\n                  // If new content unsuspended, but there's still some content that\n                  // didn't. Then we need to do a second pass that forces everything\n                  // to keep showing their fallbacks.\n                  // We might be suspended if something in this render pass suspended, or\n                  // something in the previous committed pass suspended. Otherwise,\n                  // there's no chance so we can skip the expensive call to\n                  // findFirstSuspended.\n                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n                  if (!cannotBeSuspended) {\n                    var row = workInProgress.child;\n                    while (row !== null) {\n                      var suspended = findFirstSuspended(row);\n                      if (suspended !== null) {\n                        didSuspendAlready = true;\n                        workInProgress.flags |= DidCapture;\n                        cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                        // part of the second pass. In that case nothing will subscribe to\n                        // its thenables. Instead, we'll transfer its thenables to the\n                        // SuspenseList so that it can retry if they resolve.\n                        // There might be multiple of these in the list but since we're\n                        // going to wait for all of them anyway, it doesn't really matter\n                        // which ones gets to ping. In theory we could get clever and keep\n                        // track of how many dependencies remain but it gets tricky because\n                        // in the meantime, we can add/remove/change items and dependencies.\n                        // We might bail out of the loop before finding any but that\n                        // doesn't matter since that means that the other boundaries that\n                        // we did find already has their listeners attached.\n\n                        var newThenables = suspended.updateQueue;\n                        if (newThenables !== null) {\n                          workInProgress.updateQueue = newThenables;\n                          workInProgress.flags |= Update;\n                        } // Rerender the whole list, but this time, we'll force fallbacks\n                        // to stay in place.\n                        // Reset the effect flags before doing the second pass since that's now invalid.\n                        // Reset the child fibers to their original state.\n\n                        workInProgress.subtreeFlags = NoFlags;\n                        resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                        // rerender the children.\n\n                        pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                        return workInProgress.child;\n                      }\n                      row = row.sibling;\n                    }\n                  }\n                  if (renderState.tail !== null && now() > getRenderTargetTime()) {\n                    // We have already passed our CPU deadline but we still have rows\n                    // left in the tail. We'll just give up further attempts to render\n                    // the main content and only render fallbacks.\n                    workInProgress.flags |= DidCapture;\n                    didSuspendAlready = true;\n                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                    // to get it started back up to attempt the next item. While in terms\n                    // of priority this work has the same priority as this current render,\n                    // it's not part of the same transition once the transition has\n                    // committed. If it's sync, we still want to yield so that it can be\n                    // painted. Conceptually, this is really the same as pinging.\n                    // We can use any RetryLane even if it's the one currently rendering\n                    // since we're leaving it behind on this node.\n\n                    workInProgress.lanes = SomeRetryLane;\n                  }\n                } else {\n                  cutOffTailIfNeeded(renderState, false);\n                } // Next we're going to render the tail.\n              } else {\n                // Append the rendered row to the child list.\n                if (!didSuspendAlready) {\n                  var _suspended = findFirstSuspended(renderedTail);\n                  if (_suspended !== null) {\n                    workInProgress.flags |= DidCapture;\n                    didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                    // get lost if this row ends up dropped during a second pass.\n\n                    var _newThenables = _suspended.updateQueue;\n                    if (_newThenables !== null) {\n                      workInProgress.updateQueue = _newThenables;\n                      workInProgress.flags |= Update;\n                    }\n                    cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n                    if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n                    ) {\n                      // We're done.\n                      bubbleProperties(workInProgress);\n                      return null;\n                    }\n                  } else if (\n                  // The time it took to render last row is greater than the remaining\n                  // time we have to render. So rendering one more row would likely\n                  // exceed it.\n                  now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                    // We have now passed our CPU deadline and we'll just give up further\n                    // attempts to render the main content and only render fallbacks.\n                    // The assumption is that this is usually faster.\n                    workInProgress.flags |= DidCapture;\n                    didSuspendAlready = true;\n                    cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                    // to get it started back up to attempt the next item. While in terms\n                    // of priority this work has the same priority as this current render,\n                    // it's not part of the same transition once the transition has\n                    // committed. If it's sync, we still want to yield so that it can be\n                    // painted. Conceptually, this is really the same as pinging.\n                    // We can use any RetryLane even if it's the one currently rendering\n                    // since we're leaving it behind on this node.\n\n                    workInProgress.lanes = SomeRetryLane;\n                  }\n                }\n                if (renderState.isBackwards) {\n                  // The effect list of the backwards tail will have been added\n                  // to the end. This breaks the guarantee that life-cycles fire in\n                  // sibling order but that isn't a strong guarantee promised by React.\n                  // Especially since these might also just pop in during future commits.\n                  // Append to the beginning of the list.\n                  renderedTail.sibling = workInProgress.child;\n                  workInProgress.child = renderedTail;\n                } else {\n                  var previousSibling = renderState.last;\n                  if (previousSibling !== null) {\n                    previousSibling.sibling = renderedTail;\n                  } else {\n                    workInProgress.child = renderedTail;\n                  }\n                  renderState.last = renderedTail;\n                }\n              }\n              if (renderState.tail !== null) {\n                // We still have tail rows to render.\n                // Pop a row.\n                var next = renderState.tail;\n                renderState.rendering = next;\n                renderState.tail = next.sibling;\n                renderState.renderingStartTime = now();\n                next.sibling = null; // Restore the context.\n                // TODO: We can probably just avoid popping it instead and only\n                // setting it the first time we go from not suspended to suspended.\n\n                var suspenseContext = suspenseStackCursor.current;\n                if (didSuspendAlready) {\n                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n                } else {\n                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n                }\n                pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n                // Don't bubble properties in this case.\n\n                return next;\n              }\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          case ScopeComponent:\n            {\n              break;\n            }\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n            {\n              popRenderLanes(workInProgress);\n              var _nextState = workInProgress.memoizedState;\n              var nextIsHidden = _nextState !== null;\n              if (current !== null) {\n                var _prevState = current.memoizedState;\n                var prevIsHidden = _prevState !== null;\n                if (prevIsHidden !== nextIsHidden &&\n                // LegacyHidden doesn't do any hiding — it only pre-renders.\n                !enableLegacyHidden) {\n                  workInProgress.flags |= Visibility;\n                }\n              }\n              if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n                bubbleProperties(workInProgress);\n              } else {\n                // Don't bubble properties for hidden children unless we're rendering\n                // at offscreen priority.\n                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n                  bubbleProperties(workInProgress);\n                  if (supportsMutation) {\n                    // Check if there was an insertion or update in the hidden subtree.\n                    // If so, we need to hide those nodes in the commit phase, so\n                    // schedule a visibility effect.\n                    if (workInProgress.subtreeFlags & (Placement | Update)) {\n                      workInProgress.flags |= Visibility;\n                    }\n                  }\n                }\n              }\n              return null;\n            }\n          case CacheComponent:\n            {\n              return null;\n            }\n          case TracingMarkerComponent:\n            {\n              return null;\n            }\n        }\n        throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n      }\n      function unwindWork(current, workInProgress, renderLanes) {\n        // Note: This intentionally doesn't check if we're hydrating because comparing\n        // to the current tree provider fiber is just as fast and less error-prone.\n        // Ideally we would have a special version of the work loop only\n        // for hydration.\n        popTreeContext(workInProgress);\n        switch (workInProgress.tag) {\n          case ClassComponent:\n            {\n              var Component = workInProgress.type;\n              if (isContextProvider(Component)) {\n                popContext(workInProgress);\n              }\n              var flags = workInProgress.flags;\n              if (flags & ShouldCapture) {\n                workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n                if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                  transferActualDuration(workInProgress);\n                }\n                return workInProgress;\n              }\n              return null;\n            }\n          case HostRoot:\n            {\n              workInProgress.stateNode;\n              popHostContainer(workInProgress);\n              popTopLevelContextObject(workInProgress);\n              resetWorkInProgressVersions();\n              var _flags = workInProgress.flags;\n              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n                // There was an error during render that wasn't captured by a suspense\n                // boundary. Do a second pass on the root to unmount the children.\n                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n                return workInProgress;\n              } // We unwound to the root without completing it. Exit.\n\n              return null;\n            }\n          case HostComponent:\n            {\n              // TODO: popHydrationState\n              popHostContext(workInProgress);\n              return null;\n            }\n          case SuspenseComponent:\n            {\n              popSuspenseContext(workInProgress);\n              var suspenseState = workInProgress.memoizedState;\n              if (suspenseState !== null && suspenseState.dehydrated !== null) {\n                if (workInProgress.alternate === null) {\n                  throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n                }\n                resetHydrationState();\n              }\n              var _flags2 = workInProgress.flags;\n              if (_flags2 & ShouldCapture) {\n                workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n                if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                  transferActualDuration(workInProgress);\n                }\n                return workInProgress;\n              }\n              return null;\n            }\n          case SuspenseListComponent:\n            {\n              popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n              // caught by a nested boundary. If not, it should bubble through.\n\n              return null;\n            }\n          case HostPortal:\n            popHostContainer(workInProgress);\n            return null;\n          case ContextProvider:\n            var context = workInProgress.type._context;\n            popProvider(context, workInProgress);\n            return null;\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n            popRenderLanes(workInProgress);\n            return null;\n          case CacheComponent:\n            return null;\n          default:\n            return null;\n        }\n      }\n      function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n        // Note: This intentionally doesn't check if we're hydrating because comparing\n        // to the current tree provider fiber is just as fast and less error-prone.\n        // Ideally we would have a special version of the work loop only\n        // for hydration.\n        popTreeContext(interruptedWork);\n        switch (interruptedWork.tag) {\n          case ClassComponent:\n            {\n              var childContextTypes = interruptedWork.type.childContextTypes;\n              if (childContextTypes !== null && childContextTypes !== undefined) {\n                popContext(interruptedWork);\n              }\n              break;\n            }\n          case HostRoot:\n            {\n              interruptedWork.stateNode;\n              popHostContainer(interruptedWork);\n              popTopLevelContextObject(interruptedWork);\n              resetWorkInProgressVersions();\n              break;\n            }\n          case HostComponent:\n            {\n              popHostContext(interruptedWork);\n              break;\n            }\n          case HostPortal:\n            popHostContainer(interruptedWork);\n            break;\n          case SuspenseComponent:\n            popSuspenseContext(interruptedWork);\n            break;\n          case SuspenseListComponent:\n            popSuspenseContext(interruptedWork);\n            break;\n          case ContextProvider:\n            var context = interruptedWork.type._context;\n            popProvider(context, interruptedWork);\n            break;\n          case OffscreenComponent:\n          case LegacyHiddenComponent:\n            popRenderLanes(interruptedWork);\n            break;\n        }\n      }\n      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n        var funcArgs = Array.prototype.slice.call(arguments, 3);\n        try {\n          func.apply(context, funcArgs);\n        } catch (error) {\n          this.onError(error);\n        }\n      }\n      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n      {\n        // In DEV mode, we swap out invokeGuardedCallback for a special version\n        // that plays more nicely with the browser's DevTools. The idea is to preserve\n        // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n        // functions in invokeGuardedCallback, and the production version of\n        // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n        // like caught exceptions, and the DevTools won't pause unless the developer\n        // takes the extra step of enabling pause on caught exceptions. This is\n        // unintuitive, though, because even though React has caught the error, from\n        // the developer's perspective, the error is uncaught.\n        //\n        // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n        // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n        // DOM node, and call the user-provided callback from inside an event handler\n        // for that fake event. If the callback throws, the error is \"captured\" using\n        // a global event handler. But because the error happens in a different\n        // event loop context, it does not interrupt the normal program flow.\n        // Effectively, this gives us try-catch behavior without actually using\n        // try-catch. Neat!\n        // Check that the browser supports the APIs we need to implement our special\n        // DEV version of invokeGuardedCallback\n        if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n          var fakeNode = document.createElement('react');\n          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n            // If document doesn't exist we know for sure we will crash in this method\n            // when we call document.createEvent(). However this can cause confusing\n            // errors: https://github.com/facebook/create-react-app/issues/3482\n            // So we preemptively throw with a better message instead.\n            if (typeof document === 'undefined' || document === null) {\n              throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n            }\n            var evt = document.createEvent('Event');\n            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n            // set this to true at the beginning, then set it to false right after\n            // calling the function. If the function errors, `didError` will never be\n            // set to false. This strategy works even if the browser is flaky and\n            // fails to call our global error handler, because it doesn't rely on\n            // the error event at all.\n\n            var didError = true; // Keeps track of the value of window.event so that we can reset it\n            // during the callback to let user code access window.event in the\n            // browsers that support it.\n\n            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n            // dispatching: https://github.com/facebook/react/issues/13688\n\n            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n            function restoreAfterDispatch() {\n              // We immediately remove the callback from event listeners so that\n              // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n              // nested call would trigger the fake event handlers of any call higher\n              // in the stack.\n              fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n              // window.event assignment in both IE <= 10 as they throw an error\n              // \"Member not found\" in strict mode, and in Firefox which does not\n              // support window.event.\n\n              if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n                window.event = windowEvent;\n              }\n            } // Create an event handler for our fake event. We will synchronously\n            // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n            // call the user-provided callback.\n\n            var funcArgs = Array.prototype.slice.call(arguments, 3);\n            function callCallback() {\n              didCall = true;\n              restoreAfterDispatch();\n              func.apply(context, funcArgs);\n              didError = false;\n            } // Create a global error event handler. We use this to capture the value\n            // that was thrown. It's possible that this error handler will fire more\n            // than once; for example, if non-React code also calls `dispatchEvent`\n            // and a handler for that event throws. We should be resilient to most of\n            // those cases. Even if our error event handler fires more than once, the\n            // last error event is always used. If the callback actually does error,\n            // we know that the last error event is the correct one, because it's not\n            // possible for anything else to have happened in between our callback\n            // erroring and the code that follows the `dispatchEvent` call below. If\n            // the callback doesn't error, but the error event was fired, we know to\n            // ignore it because `didError` will be false, as described above.\n\n            var error; // Use this to track whether the error event is ever called.\n\n            var didSetError = false;\n            var isCrossOriginError = false;\n            function handleWindowError(event) {\n              error = event.error;\n              didSetError = true;\n              if (error === null && event.colno === 0 && event.lineno === 0) {\n                isCrossOriginError = true;\n              }\n              if (event.defaultPrevented) {\n                // Some other error handler has prevented default.\n                // Browsers silence the error report if this happens.\n                // We'll remember this to later decide whether to log it or not.\n                if (error != null && typeof error === 'object') {\n                  try {\n                    error._suppressLogging = true;\n                  } catch (inner) {// Ignore.\n                  }\n                }\n              }\n            } // Create a fake event type.\n\n            var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n            window.addEventListener('error', handleWindowError);\n            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n            // errors, it will trigger our global error handler.\n\n            evt.initEvent(evtType, false, false);\n            fakeNode.dispatchEvent(evt);\n            if (windowEventDescriptor) {\n              Object.defineProperty(window, 'event', windowEventDescriptor);\n            }\n            if (didCall && didError) {\n              if (!didSetError) {\n                // The callback errored, but the error event never fired.\n                // eslint-disable-next-line react-internal/prod-error-codes\n                error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n              } else if (isCrossOriginError) {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n              }\n              this.onError(error);\n            } // Remove our event listeners\n\n            window.removeEventListener('error', handleWindowError);\n            if (!didCall) {\n              // Something went really wrong, and our event was not dispatched.\n              // https://github.com/facebook/react/issues/16734\n              // https://github.com/facebook/react/issues/16585\n              // Fall back to the production implementation.\n              restoreAfterDispatch();\n              return invokeGuardedCallbackProd.apply(this, arguments);\n            }\n          };\n        }\n      }\n      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n      var hasError = false;\n      var caughtError = null; // Used by event system to capture/rethrow the first error.\n      var reporter = {\n        onError: function (error) {\n          hasError = true;\n          caughtError = error;\n        }\n      };\n      /**\n       * Call a function while guarding against errors that happens within it.\n       * Returns an error if it throws, otherwise null.\n       *\n       * In production, this is implemented using a try-catch. The reason we don't\n       * use a try-catch directly is so that we can swap out a different\n       * implementation in DEV mode.\n       *\n       * @param {String} name of the guard to use for logging or debugging\n       * @param {Function} func The function to invoke\n       * @param {*} context The context to use when calling the function\n       * @param {...*} args Arguments for function\n       */\n\n      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n        hasError = false;\n        caughtError = null;\n        invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n      }\n      function hasCaughtError() {\n        return hasError;\n      }\n      function clearCaughtError() {\n        if (hasError) {\n          var error = caughtError;\n          hasError = false;\n          caughtError = null;\n          return error;\n        } else {\n          throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n        }\n      }\n      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n      {\n        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n      } // Used during the commit phase to track the state of the Offscreen component stack.\n      // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n      // Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n      var offscreenSubtreeIsHidden = false;\n      var offscreenSubtreeWasHidden = false;\n      var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n      var nextEffect = null; // Used for Profiling builds to track updaters.\n\n      var inProgressLanes = null;\n      var inProgressRoot = null;\n      function reportUncaughtErrorInDEV(error) {\n        // Wrapping each small part of the commit phase into a guarded\n        // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n        // But we rely on it to surface errors to DEV tools like overlays\n        // (https://github.com/facebook/react/issues/21712).\n        // As a compromise, rethrow only caught errors in a guard.\n        {\n          invokeGuardedCallback(null, function () {\n            throw error;\n          });\n          clearCaughtError();\n        }\n      }\n      var callComponentWillUnmountWithTimer = function (current, instance) {\n        instance.props = current.memoizedProps;\n        instance.state = current.memoizedState;\n        if (current.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentWillUnmount();\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          instance.componentWillUnmount();\n        }\n      }; // Capture errors so they don't interrupt mounting.\n\n      function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n        try {\n          commitHookEffectListMount(Layout, current);\n        } catch (error) {\n          captureCommitPhaseError(current, nearestMountedAncestor, error);\n        }\n      } // Capture errors so they don't interrupt unmounting.\n\n      function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n        try {\n          callComponentWillUnmountWithTimer(current, instance);\n        } catch (error) {\n          captureCommitPhaseError(current, nearestMountedAncestor, error);\n        }\n      } // Capture errors so they don't interrupt mounting.\n\n      function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(current, nearestMountedAncestor, error);\n        }\n      } // Capture errors so they don't interrupt mounting.\n\n      function safelyAttachRef(current, nearestMountedAncestor) {\n        try {\n          commitAttachRef(current);\n        } catch (error) {\n          captureCommitPhaseError(current, nearestMountedAncestor, error);\n        }\n      }\n      function safelyDetachRef(current, nearestMountedAncestor) {\n        var ref = current.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            var retVal;\n            try {\n              if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n                try {\n                  startLayoutEffectTimer();\n                  retVal = ref(null);\n                } finally {\n                  recordLayoutEffectDuration(current);\n                }\n              } else {\n                retVal = ref(null);\n              }\n            } catch (error) {\n              captureCommitPhaseError(current, nearestMountedAncestor, error);\n            }\n            {\n              if (typeof retVal === 'function') {\n                error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n              }\n            }\n          } else {\n            ref.current = null;\n          }\n        }\n      }\n      function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n        try {\n          destroy();\n        } catch (error) {\n          captureCommitPhaseError(current, nearestMountedAncestor, error);\n        }\n      }\n      var shouldFireAfterActiveInstanceBlur = false;\n      function commitBeforeMutationEffects(root, firstChild) {\n        prepareForCommit(root.containerInfo);\n        nextEffect = firstChild;\n        commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n        var shouldFire = shouldFireAfterActiveInstanceBlur;\n        shouldFireAfterActiveInstanceBlur = false;\n        return shouldFire;\n      }\n      function commitBeforeMutationEffects_begin() {\n        while (nextEffect !== null) {\n          var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n          var child = fiber.child;\n          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n            child.return = fiber;\n            nextEffect = child;\n          } else {\n            commitBeforeMutationEffects_complete();\n          }\n        }\n      }\n      function commitBeforeMutationEffects_complete() {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          setCurrentFiber(fiber);\n          try {\n            commitBeforeMutationEffectsOnFiber(fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n          resetCurrentFiber();\n          var sibling = fiber.sibling;\n          if (sibling !== null) {\n            sibling.return = fiber.return;\n            nextEffect = sibling;\n            return;\n          }\n          nextEffect = fiber.return;\n        }\n      }\n      function commitBeforeMutationEffectsOnFiber(finishedWork) {\n        var current = finishedWork.alternate;\n        var flags = finishedWork.flags;\n        if ((flags & Snapshot) !== NoFlags) {\n          setCurrentFiber(finishedWork);\n          switch (finishedWork.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                break;\n              }\n            case ClassComponent:\n              {\n                if (current !== null) {\n                  var prevProps = current.memoizedProps;\n                  var prevState = current.memoizedState;\n                  var instance = finishedWork.stateNode; // We could update instance props and state here,\n                  // but instead we rely on them being set during last render.\n                  // TODO: revisit this when we implement resuming.\n\n                  {\n                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                      if (instance.props !== finishedWork.memoizedProps) {\n                        error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                      }\n                      if (instance.state !== finishedWork.memoizedState) {\n                        error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                      }\n                    }\n                  }\n                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                  {\n                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n                    if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                      didWarnSet.add(finishedWork.type);\n                      error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n                    }\n                  }\n                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n                }\n                break;\n              }\n            case HostRoot:\n              {\n                if (supportsMutation) {\n                  var root = finishedWork.stateNode;\n                  clearContainer(root.containerInfo);\n                }\n                break;\n              }\n            case HostComponent:\n            case HostText:\n            case HostPortal:\n            case IncompleteClassComponent:\n              // Nothing to do for these component types\n              break;\n            default:\n              {\n                throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n              }\n          }\n          resetCurrentFiber();\n        }\n      }\n      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n        var updateQueue = finishedWork.updateQueue;\n        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n        if (lastEffect !== null) {\n          var firstEffect = lastEffect.next;\n          var effect = firstEffect;\n          do {\n            if ((effect.tag & flags) === flags) {\n              // Unmount\n              var destroy = effect.destroy;\n              effect.destroy = undefined;\n              if (destroy !== undefined) {\n                {\n                  if ((flags & Passive$1) !== NoFlags$1) {\n                    markComponentPassiveEffectUnmountStarted(finishedWork);\n                  } else if ((flags & Layout) !== NoFlags$1) {\n                    markComponentLayoutEffectUnmountStarted(finishedWork);\n                  }\n                }\n                {\n                  if ((flags & Insertion) !== NoFlags$1) {\n                    setIsRunningInsertionEffect(true);\n                  }\n                }\n                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n                {\n                  if ((flags & Insertion) !== NoFlags$1) {\n                    setIsRunningInsertionEffect(false);\n                  }\n                }\n                {\n                  if ((flags & Passive$1) !== NoFlags$1) {\n                    markComponentPassiveEffectUnmountStopped();\n                  } else if ((flags & Layout) !== NoFlags$1) {\n                    markComponentLayoutEffectUnmountStopped();\n                  }\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      function commitHookEffectListMount(flags, finishedWork) {\n        var updateQueue = finishedWork.updateQueue;\n        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n        if (lastEffect !== null) {\n          var firstEffect = lastEffect.next;\n          var effect = firstEffect;\n          do {\n            if ((effect.tag & flags) === flags) {\n              {\n                if ((flags & Passive$1) !== NoFlags$1) {\n                  markComponentPassiveEffectMountStarted(finishedWork);\n                } else if ((flags & Layout) !== NoFlags$1) {\n                  markComponentLayoutEffectMountStarted(finishedWork);\n                }\n              } // Mount\n\n              var create = effect.create;\n              {\n                if ((flags & Insertion) !== NoFlags$1) {\n                  setIsRunningInsertionEffect(true);\n                }\n              }\n              effect.destroy = create();\n              {\n                if ((flags & Insertion) !== NoFlags$1) {\n                  setIsRunningInsertionEffect(false);\n                }\n              }\n              {\n                if ((flags & Passive$1) !== NoFlags$1) {\n                  markComponentPassiveEffectMountStopped();\n                } else if ((flags & Layout) !== NoFlags$1) {\n                  markComponentLayoutEffectMountStopped();\n                }\n              }\n              {\n                var destroy = effect.destroy;\n                if (destroy !== undefined && typeof destroy !== 'function') {\n                  var hookName = void 0;\n                  if ((effect.tag & Layout) !== NoFlags) {\n                    hookName = 'useLayoutEffect';\n                  } else if ((effect.tag & Insertion) !== NoFlags) {\n                    hookName = 'useInsertionEffect';\n                  } else {\n                    hookName = 'useEffect';\n                  }\n                  var addendum = void 0;\n                  if (destroy === null) {\n                    addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n                  } else if (typeof destroy.then === 'function') {\n                    addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n                  } else {\n                    addendum = ' You returned: ' + destroy;\n                  }\n                  error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n        {\n          // Only Profilers with work in their subtree will have an Update effect scheduled.\n          if ((finishedWork.flags & Update) !== NoFlags) {\n            switch (finishedWork.tag) {\n              case Profiler:\n                {\n                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                  var _finishedWork$memoize = finishedWork.memoizedProps,\n                    id = _finishedWork$memoize.id,\n                    onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n                  // It does not get reset until the start of the next commit phase.\n\n                  var commitTime = getCommitTime();\n                  var phase = finishedWork.alternate === null ? 'mount' : 'update';\n                  {\n                    if (isCurrentUpdateNested()) {\n                      phase = 'nested-update';\n                    }\n                  }\n                  if (typeof onPostCommit === 'function') {\n                    onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                  } // Bubble times to the next nearest ancestor Profiler.\n                  // After we process that Profiler, we'll bubble further up.\n\n                  var parentFiber = finishedWork.return;\n                  outer: while (parentFiber !== null) {\n                    switch (parentFiber.tag) {\n                      case HostRoot:\n                        var root = parentFiber.stateNode;\n                        root.passiveEffectDuration += passiveEffectDuration;\n                        break outer;\n                      case Profiler:\n                        var parentStateNode = parentFiber.stateNode;\n                        parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                        break outer;\n                    }\n                    parentFiber = parentFiber.return;\n                  }\n                  break;\n                }\n            }\n          }\n        }\n      }\n      function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n        if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n          switch (finishedWork.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                if (!offscreenSubtreeWasHidden) {\n                  // At this point layout effects have already been destroyed (during mutation phase).\n                  // This is done to prevent sibling component effects from interfering with each other,\n                  // e.g. a destroy function in one component should never override a ref set\n                  // by a create function in another component during the same commit.\n                  if (finishedWork.mode & ProfileMode) {\n                    try {\n                      startLayoutEffectTimer();\n                      commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                    } finally {\n                      recordLayoutEffectDuration(finishedWork);\n                    }\n                  } else {\n                    commitHookEffectListMount(Layout | HasEffect, finishedWork);\n                  }\n                }\n                break;\n              }\n            case ClassComponent:\n              {\n                var instance = finishedWork.stateNode;\n                if (finishedWork.flags & Update) {\n                  if (!offscreenSubtreeWasHidden) {\n                    if (current === null) {\n                      // We could update instance props and state here,\n                      // but instead we rely on them being set during last render.\n                      // TODO: revisit this when we implement resuming.\n                      {\n                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                          if (instance.props !== finishedWork.memoizedProps) {\n                            error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                          }\n                          if (instance.state !== finishedWork.memoizedState) {\n                            error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                          }\n                        }\n                      }\n                      if (finishedWork.mode & ProfileMode) {\n                        try {\n                          startLayoutEffectTimer();\n                          instance.componentDidMount();\n                        } finally {\n                          recordLayoutEffectDuration(finishedWork);\n                        }\n                      } else {\n                        instance.componentDidMount();\n                      }\n                    } else {\n                      var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                      var prevState = current.memoizedState; // We could update instance props and state here,\n                      // but instead we rely on them being set during last render.\n                      // TODO: revisit this when we implement resuming.\n\n                      {\n                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                          if (instance.props !== finishedWork.memoizedProps) {\n                            error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                          }\n                          if (instance.state !== finishedWork.memoizedState) {\n                            error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                          }\n                        }\n                      }\n                      if (finishedWork.mode & ProfileMode) {\n                        try {\n                          startLayoutEffectTimer();\n                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                        } finally {\n                          recordLayoutEffectDuration(finishedWork);\n                        }\n                      } else {\n                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                      }\n                    }\n                  }\n                } // TODO: I think this is now always non-null by the time it reaches the\n                // commit phase. Consider removing the type check.\n\n                var updateQueue = finishedWork.updateQueue;\n                if (updateQueue !== null) {\n                  {\n                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                      if (instance.props !== finishedWork.memoizedProps) {\n                        error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                      }\n                      if (instance.state !== finishedWork.memoizedState) {\n                        error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                      }\n                    }\n                  } // We could update instance props and state here,\n                  // but instead we rely on them being set during last render.\n                  // TODO: revisit this when we implement resuming.\n\n                  commitUpdateQueue(finishedWork, updateQueue, instance);\n                }\n                break;\n              }\n            case HostRoot:\n              {\n                // TODO: I think this is now always non-null by the time it reaches the\n                // commit phase. Consider removing the type check.\n                var _updateQueue = finishedWork.updateQueue;\n                if (_updateQueue !== null) {\n                  var _instance = null;\n                  if (finishedWork.child !== null) {\n                    switch (finishedWork.child.tag) {\n                      case HostComponent:\n                        _instance = getPublicInstance(finishedWork.child.stateNode);\n                        break;\n                      case ClassComponent:\n                        _instance = finishedWork.child.stateNode;\n                        break;\n                    }\n                  }\n                  commitUpdateQueue(finishedWork, _updateQueue, _instance);\n                }\n                break;\n              }\n            case HostComponent:\n              {\n                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n                // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n                // These effects should only be committed when components are first mounted,\n                // aka when there is no current/alternate.\n\n                if (current === null && finishedWork.flags & Update) {\n                  var type = finishedWork.type;\n                  var props = finishedWork.memoizedProps;\n                  commitMount(_instance2, type, props, finishedWork);\n                }\n                break;\n              }\n            case HostText:\n              {\n                // We have no life-cycles associated with text.\n                break;\n              }\n            case HostPortal:\n              {\n                // We have no life-cycles associated with portals.\n                break;\n              }\n            case Profiler:\n              {\n                {\n                  var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                    onCommit = _finishedWork$memoize2.onCommit,\n                    onRender = _finishedWork$memoize2.onRender;\n                  var effectDuration = finishedWork.stateNode.effectDuration;\n                  var commitTime = getCommitTime();\n                  var phase = current === null ? 'mount' : 'update';\n                  {\n                    if (isCurrentUpdateNested()) {\n                      phase = 'nested-update';\n                    }\n                  }\n                  if (typeof onRender === 'function') {\n                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n                  }\n                  {\n                    if (typeof onCommit === 'function') {\n                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n                    } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n                    // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n                    // because the effect is also where times bubble to parent Profilers.\n\n                    enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n                    // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n                    var parentFiber = finishedWork.return;\n                    outer: while (parentFiber !== null) {\n                      switch (parentFiber.tag) {\n                        case HostRoot:\n                          var root = parentFiber.stateNode;\n                          root.effectDuration += effectDuration;\n                          break outer;\n                        case Profiler:\n                          var parentStateNode = parentFiber.stateNode;\n                          parentStateNode.effectDuration += effectDuration;\n                          break outer;\n                      }\n                      parentFiber = parentFiber.return;\n                    }\n                  }\n                }\n                break;\n              }\n            case SuspenseComponent:\n              {\n                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n                break;\n              }\n            case SuspenseListComponent:\n            case IncompleteClassComponent:\n            case ScopeComponent:\n            case OffscreenComponent:\n            case LegacyHiddenComponent:\n            case TracingMarkerComponent:\n              {\n                break;\n              }\n            default:\n              throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n          }\n        }\n        if (!offscreenSubtreeWasHidden) {\n          {\n            if (finishedWork.flags & Ref) {\n              commitAttachRef(finishedWork);\n            }\n          }\n        }\n      }\n      function reappearLayoutEffectsOnFiber(node) {\n        // Turn on layout effects in a tree that previously disappeared.\n        // TODO (Offscreen) Check: flags & LayoutStatic\n        switch (node.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              if (node.mode & ProfileMode) {\n                try {\n                  startLayoutEffectTimer();\n                  safelyCallCommitHookLayoutEffectListMount(node, node.return);\n                } finally {\n                  recordLayoutEffectDuration(node);\n                }\n              } else {\n                safelyCallCommitHookLayoutEffectListMount(node, node.return);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = node.stateNode;\n              if (typeof instance.componentDidMount === 'function') {\n                safelyCallComponentDidMount(node, node.return, instance);\n              }\n              safelyAttachRef(node, node.return);\n              break;\n            }\n          case HostComponent:\n            {\n              safelyAttachRef(node, node.return);\n              break;\n            }\n        }\n      }\n      function hideOrUnhideAllChildren(finishedWork, isHidden) {\n        // Only hide or unhide the top-most host nodes.\n        var hostSubtreeRoot = null;\n        if (supportsMutation) {\n          // We only have the top Fiber that was inserted but we need to recurse down its\n          // children to find all the terminal nodes.\n          var node = finishedWork;\n          while (true) {\n            if (node.tag === HostComponent) {\n              if (hostSubtreeRoot === null) {\n                hostSubtreeRoot = node;\n                try {\n                  var instance = node.stateNode;\n                  if (isHidden) {\n                    hideInstance(instance);\n                  } else {\n                    unhideInstance(node.stateNode, node.memoizedProps);\n                  }\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            } else if (node.tag === HostText) {\n              if (hostSubtreeRoot === null) {\n                try {\n                  var _instance3 = node.stateNode;\n                  if (isHidden) {\n                    hideTextInstance(_instance3);\n                  } else {\n                    unhideTextInstance(_instance3, node.memoizedProps);\n                  }\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n            if (node === finishedWork) {\n              return;\n            }\n            while (node.sibling === null) {\n              if (node.return === null || node.return === finishedWork) {\n                return;\n              }\n              if (hostSubtreeRoot === node) {\n                hostSubtreeRoot = null;\n              }\n              node = node.return;\n            }\n            if (hostSubtreeRoot === node) {\n              hostSubtreeRoot = null;\n            }\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        }\n      }\n      function commitAttachRef(finishedWork) {\n        var ref = finishedWork.ref;\n        if (ref !== null) {\n          var instance = finishedWork.stateNode;\n          var instanceToUse;\n          switch (finishedWork.tag) {\n            case HostComponent:\n              instanceToUse = getPublicInstance(instance);\n              break;\n            default:\n              instanceToUse = instance;\n          } // Moved outside to ensure DCE works with this flag\n\n          if (typeof ref === 'function') {\n            var retVal;\n            if (finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(instanceToUse);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              retVal = ref(instanceToUse);\n            }\n            {\n              if (typeof retVal === 'function') {\n                error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n              }\n            }\n          } else {\n            {\n              if (!ref.hasOwnProperty('current')) {\n                error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n              }\n            }\n            ref.current = instanceToUse;\n          }\n        }\n      }\n      function detachFiberMutation(fiber) {\n        // Cut off the return pointer to disconnect it from the tree.\n        // This enables us to detect and warn against state updates on an unmounted component.\n        // It also prevents events from bubbling from within disconnected components.\n        //\n        // Ideally, we should also clear the child pointer of the parent alternate to let this\n        // get GC:ed but we don't know which for sure which parent is the current\n        // one so we'll settle for GC:ing the subtree of this child.\n        // This child itself will be GC:ed when the parent updates the next time.\n        //\n        // Note that we can't clear child or sibling pointers yet.\n        // They're needed for passive effects and for findDOMNode.\n        // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n        //\n        // Don't reset the alternate yet, either. We need that so we can detach the\n        // alternate's fields in the passive phase. Clearing the return pointer is\n        // sufficient for findDOMNode semantics.\n        var alternate = fiber.alternate;\n        if (alternate !== null) {\n          alternate.return = null;\n        }\n        fiber.return = null;\n      }\n      function detachFiberAfterEffects(fiber) {\n        var alternate = fiber.alternate;\n        if (alternate !== null) {\n          fiber.alternate = null;\n          detachFiberAfterEffects(alternate);\n        } // Note: Defensively using negation instead of < in case\n        // `deletedTreeCleanUpLevel` is undefined.\n\n        {\n          // Clear cyclical Fiber fields. This level alone is designed to roughly\n          // approximate the planned Fiber refactor. In that world, `setState` will be\n          // bound to a special \"instance\" object instead of a Fiber. The Instance\n          // object will not have any of these fields. It will only be connected to\n          // the fiber tree via a single link at the root. So if this level alone is\n          // sufficient to fix memory issues, that bodes well for our plans.\n          fiber.child = null;\n          fiber.deletions = null;\n          fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n          // tree, which has its own pointers to children, parents, and siblings.\n          // The other host nodes also point back to fibers, so we should detach that\n          // one, too.\n\n          if (fiber.tag === HostComponent) {\n            var hostInstance = fiber.stateNode;\n            if (hostInstance !== null) {\n              detachDeletedInstance(hostInstance);\n            }\n          }\n          fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n          // already disconnect the `return` pointer at the root of the deleted\n          // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n          // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n          // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n          {\n            fiber._debugOwner = null;\n          }\n          {\n            // Theoretically, nothing in here should be necessary, because we already\n            // disconnected the fiber from the tree. So even if something leaks this\n            // particular fiber, it won't leak anything else\n            //\n            // The purpose of this branch is to be super aggressive so we can measure\n            // if there's any difference in memory impact. If there is, that could\n            // indicate a React leak we don't know about.\n            fiber.return = null;\n            fiber.dependencies = null;\n            fiber.memoizedProps = null;\n            fiber.memoizedState = null;\n            fiber.pendingProps = null;\n            fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n            fiber.updateQueue = null;\n          }\n        }\n      }\n      function emptyPortalContainer(current) {\n        if (!supportsPersistence) {\n          return;\n        }\n        var portal = current.stateNode;\n        var containerInfo = portal.containerInfo;\n        var emptyChildSet = createContainerChildSet(containerInfo);\n        replaceContainerChildren(containerInfo, emptyChildSet);\n      }\n      function getHostParentFiber(fiber) {\n        var parent = fiber.return;\n        while (parent !== null) {\n          if (isHostParent(parent)) {\n            return parent;\n          }\n          parent = parent.return;\n        }\n        throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n      }\n      function isHostParent(fiber) {\n        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n      }\n      function getHostSibling(fiber) {\n        // We're going to search forward into the tree until we find a sibling host\n        // node. Unfortunately, if multiple insertions are done in a row we have to\n        // search past them. This leads to exponential search for the next sibling.\n        // TODO: Find a more efficient way to do this.\n        var node = fiber;\n        siblings: while (true) {\n          // If we didn't find anything, let's try the next sibling.\n          while (node.sibling === null) {\n            if (node.return === null || isHostParent(node.return)) {\n              // If we pop out of the root or hit the parent the fiber we are the\n              // last sibling.\n              return null;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n          while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n            // If it is not host node and, we might have a host node inside it.\n            // Try to search down until we find one.\n            if (node.flags & Placement) {\n              // If we don't have a child, try the siblings instead.\n              continue siblings;\n            } // If we don't have a child, try the siblings instead.\n            // We also skip portals because they are not part of this host tree.\n\n            if (node.child === null || node.tag === HostPortal) {\n              continue siblings;\n            } else {\n              node.child.return = node;\n              node = node.child;\n            }\n          } // Check if this host node is stable or about to be placed.\n\n          if (!(node.flags & Placement)) {\n            // Found it!\n            return node.stateNode;\n          }\n        }\n      }\n      function commitPlacement(finishedWork) {\n        if (!supportsMutation) {\n          return;\n        } // Recursively insert all host nodes into the parent.\n\n        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n        switch (parentFiber.tag) {\n          case HostComponent:\n            {\n              var parent = parentFiber.stateNode;\n              if (parentFiber.flags & ContentReset) {\n                // Reset the text content of the parent before doing any insertions\n                resetTextContent(parent); // Clear ContentReset from the effect tag\n\n                parentFiber.flags &= ~ContentReset;\n              }\n              var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n              // children to find all the terminal nodes.\n\n              insertOrAppendPlacementNode(finishedWork, before, parent);\n              break;\n            }\n          case HostRoot:\n          case HostPortal:\n            {\n              var _parent = parentFiber.stateNode.containerInfo;\n              var _before = getHostSibling(finishedWork);\n              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n              break;\n            }\n          // eslint-disable-next-line-no-fallthrough\n\n          default:\n            throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n        }\n      }\n      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n        var tag = node.tag;\n        var isHost = tag === HostComponent || tag === HostText;\n        if (isHost) {\n          var stateNode = node.stateNode;\n          if (before) {\n            insertInContainerBefore(parent, stateNode, before);\n          } else {\n            appendChildToContainer(parent, stateNode);\n          }\n        } else if (tag === HostPortal) ;else {\n          var child = node.child;\n          if (child !== null) {\n            insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n            var sibling = child.sibling;\n            while (sibling !== null) {\n              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n              sibling = sibling.sibling;\n            }\n          }\n        }\n      }\n      function insertOrAppendPlacementNode(node, before, parent) {\n        var tag = node.tag;\n        var isHost = tag === HostComponent || tag === HostText;\n        if (isHost) {\n          var stateNode = node.stateNode;\n          if (before) {\n            insertBefore(parent, stateNode, before);\n          } else {\n            appendChild(parent, stateNode);\n          }\n        } else if (tag === HostPortal) ;else {\n          var child = node.child;\n          if (child !== null) {\n            insertOrAppendPlacementNode(child, before, parent);\n            var sibling = child.sibling;\n            while (sibling !== null) {\n              insertOrAppendPlacementNode(sibling, before, parent);\n              sibling = sibling.sibling;\n            }\n          }\n        }\n      } // These are tracked on the stack as we recursively traverse a\n      // deleted subtree.\n      // TODO: Update these during the whole mutation phase, not just during\n      // a deletion.\n\n      var hostParent = null;\n      var hostParentIsContainer = false;\n      function commitDeletionEffects(root, returnFiber, deletedFiber) {\n        if (supportsMutation) {\n          // We only have the top Fiber that was deleted but we need to recurse down its\n          // children to find all the terminal nodes.\n          // Recursively delete all host nodes from the parent, detach refs, clean\n          // up mounted layout effects, and call componentWillUnmount.\n          // We only need to remove the topmost host child in each branch. But then we\n          // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n          // could split this into two separate traversals functions, where the second\n          // one doesn't include any removeChild logic. This is maybe the same\n          // function as \"disappearLayoutEffects\" (or whatever that turns into after\n          // the layout phase is refactored to use recursion).\n          // Before starting, find the nearest host parent on the stack so we know\n          // which instance/container to remove the children from.\n          // TODO: Instead of searching up the fiber return path on every deletion, we\n          // can track the nearest host component on the JS stack as we traverse the\n          // tree during the commit phase. This would make insertions faster, too.\n          var parent = returnFiber;\n          findParent: while (parent !== null) {\n            switch (parent.tag) {\n              case HostComponent:\n                {\n                  hostParent = parent.stateNode;\n                  hostParentIsContainer = false;\n                  break findParent;\n                }\n              case HostRoot:\n                {\n                  hostParent = parent.stateNode.containerInfo;\n                  hostParentIsContainer = true;\n                  break findParent;\n                }\n              case HostPortal:\n                {\n                  hostParent = parent.stateNode.containerInfo;\n                  hostParentIsContainer = true;\n                  break findParent;\n                }\n            }\n            parent = parent.return;\n          }\n          if (hostParent === null) {\n            throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n          }\n          commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n          hostParent = null;\n          hostParentIsContainer = false;\n        } else {\n          // Detach refs and call componentWillUnmount() on the whole subtree.\n          commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n        }\n        detachFiberMutation(deletedFiber);\n      }\n      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n        // TODO: Use a static flag to skip trees that don't have unmount effects\n        var child = parent.child;\n        while (child !== null) {\n          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n          child = child.sibling;\n        }\n      }\n      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n        onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n        // into their subtree. There are simpler cases in the inner switch\n        // that don't modify the stack.\n\n        switch (deletedFiber.tag) {\n          case HostComponent:\n            {\n              if (!offscreenSubtreeWasHidden) {\n                safelyDetachRef(deletedFiber, nearestMountedAncestor);\n              } // Intentional fallthrough to next branch\n            }\n          // eslint-disable-next-line-no-fallthrough\n\n          case HostText:\n            {\n              // We only need to remove the nearest host child. Set the host parent\n              // to `null` on the stack to indicate that nested children don't\n              // need to be removed.\n              if (supportsMutation) {\n                var prevHostParent = hostParent;\n                var prevHostParentIsContainer = hostParentIsContainer;\n                hostParent = null;\n                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                hostParent = prevHostParent;\n                hostParentIsContainer = prevHostParentIsContainer;\n                if (hostParent !== null) {\n                  // Now that all the child effects have unmounted, we can remove the\n                  // node from the tree.\n                  if (hostParentIsContainer) {\n                    removeChildFromContainer(hostParent, deletedFiber.stateNode);\n                  } else {\n                    removeChild(hostParent, deletedFiber.stateNode);\n                  }\n                }\n              } else {\n                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              }\n              return;\n            }\n          case DehydratedFragment:\n            {\n              // Delete the dehydrated suspense boundary and all of its content.\n\n              if (supportsMutation) {\n                if (hostParent !== null) {\n                  if (hostParentIsContainer) {\n                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n                  } else {\n                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n                  }\n                }\n              }\n              return;\n            }\n          case HostPortal:\n            {\n              if (supportsMutation) {\n                // When we go into a portal, it becomes the parent to remove from.\n                var _prevHostParent = hostParent;\n                var _prevHostParentIsContainer = hostParentIsContainer;\n                hostParent = deletedFiber.stateNode.containerInfo;\n                hostParentIsContainer = true;\n                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                hostParent = _prevHostParent;\n                hostParentIsContainer = _prevHostParentIsContainer;\n              } else {\n                emptyPortalContainer(deletedFiber);\n                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              }\n              return;\n            }\n          case FunctionComponent:\n          case ForwardRef:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if (!offscreenSubtreeWasHidden) {\n                var updateQueue = deletedFiber.updateQueue;\n                if (updateQueue !== null) {\n                  var lastEffect = updateQueue.lastEffect;\n                  if (lastEffect !== null) {\n                    var firstEffect = lastEffect.next;\n                    var effect = firstEffect;\n                    do {\n                      var _effect = effect,\n                        destroy = _effect.destroy,\n                        tag = _effect.tag;\n                      if (destroy !== undefined) {\n                        if ((tag & Insertion) !== NoFlags$1) {\n                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                        } else if ((tag & Layout) !== NoFlags$1) {\n                          {\n                            markComponentLayoutEffectUnmountStarted(deletedFiber);\n                          }\n                          if (deletedFiber.mode & ProfileMode) {\n                            startLayoutEffectTimer();\n                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                            recordLayoutEffectDuration(deletedFiber);\n                          } else {\n                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                          }\n                          {\n                            markComponentLayoutEffectUnmountStopped();\n                          }\n                        }\n                      }\n                      effect = effect.next;\n                    } while (effect !== firstEffect);\n                  }\n                }\n              }\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              return;\n            }\n          case ClassComponent:\n            {\n              if (!offscreenSubtreeWasHidden) {\n                safelyDetachRef(deletedFiber, nearestMountedAncestor);\n                var instance = deletedFiber.stateNode;\n                if (typeof instance.componentWillUnmount === 'function') {\n                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n                }\n              }\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              return;\n            }\n          case ScopeComponent:\n            {\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              return;\n            }\n          case OffscreenComponent:\n            {\n              if (\n              // TODO: Remove this dead flag\n              deletedFiber.mode & ConcurrentMode) {\n                // If this offscreen component is hidden, we already unmounted it. Before\n                // deleting the children, track that it's already unmounted so that we\n                // don't attempt to unmount the effects again.\n                // TODO: If the tree is hidden, in most cases we should be able to skip\n                // over the nested children entirely. An exception is we haven't yet found\n                // the topmost host node to delete, which we already track on the stack.\n                // But the other case is portals, which need to be detached no matter how\n                // deeply they are nested. We should use a subtree flag to track whether a\n                // subtree includes a nested portal.\n                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n              } else {\n                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              }\n              break;\n            }\n          default:\n            {\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              return;\n            }\n        }\n      }\n      function commitSuspenseCallback(finishedWork) {\n        // TODO: Move this to passive phase\n        finishedWork.memoizedState;\n      }\n      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n        if (!supportsHydration) {\n          return;\n        }\n        var newState = finishedWork.memoizedState;\n        if (newState === null) {\n          var current = finishedWork.alternate;\n          if (current !== null) {\n            var prevState = current.memoizedState;\n            if (prevState !== null) {\n              var suspenseInstance = prevState.dehydrated;\n              if (suspenseInstance !== null) {\n                commitHydratedSuspenseInstance(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n      function attachSuspenseRetryListeners(finishedWork) {\n        // If this boundary just timed out, then it will have a set of wakeables.\n        // For each wakeable, attach a listener so that when it resolves, React\n        // attempts to re-render the boundary in the primary (pre-timeout) state.\n        var wakeables = finishedWork.updateQueue;\n        if (wakeables !== null) {\n          finishedWork.updateQueue = null;\n          var retryCache = finishedWork.stateNode;\n          if (retryCache === null) {\n            retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n          }\n          wakeables.forEach(function (wakeable) {\n            // Memoize using the boundary fiber to prevent redundant listeners.\n            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n            if (!retryCache.has(wakeable)) {\n              retryCache.add(wakeable);\n              {\n                if (isDevToolsPresent) {\n                  if (inProgressLanes !== null && inProgressRoot !== null) {\n                    // If we have pending work still, associate the original updaters with it.\n                    restorePendingUpdaters(inProgressRoot, inProgressLanes);\n                  } else {\n                    throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n                  }\n                }\n              }\n              wakeable.then(retry, retry);\n            }\n          });\n        }\n      } // This function detects when a Suspense boundary goes from visible to hidden.\n      function commitMutationEffects(root, finishedWork, committedLanes) {\n        inProgressLanes = committedLanes;\n        inProgressRoot = root;\n        setCurrentFiber(finishedWork);\n        commitMutationEffectsOnFiber(finishedWork, root);\n        setCurrentFiber(finishedWork);\n        inProgressLanes = null;\n        inProgressRoot = null;\n      }\n      function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n        // Deletions effects can be scheduled on any fiber type. They need to happen\n        // before the children effects hae fired.\n        var deletions = parentFiber.deletions;\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n            try {\n              commitDeletionEffects(root, parentFiber, childToDelete);\n            } catch (error) {\n              captureCommitPhaseError(childToDelete, parentFiber, error);\n            }\n          }\n        }\n        var prevDebugFiber = getCurrentFiber();\n        if (parentFiber.subtreeFlags & MutationMask) {\n          var child = parentFiber.child;\n          while (child !== null) {\n            setCurrentFiber(child);\n            commitMutationEffectsOnFiber(child, root);\n            child = child.sibling;\n          }\n        }\n        setCurrentFiber(prevDebugFiber);\n      }\n      function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n        var current = finishedWork.alternate;\n        var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n        // because the fiber tag is more specific. An exception is any flag related\n        // to reconcilation, because those can be set on all fiber types.\n\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              if (flags & Update) {\n                try {\n                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                } // Layout effects are destroyed during the mutation phase so that all\n                // destroy functions for all fibers are called before any create functions.\n                // This prevents sibling component effects from interfering with each other,\n                // e.g. a destroy function in one component should never override a ref set\n                // by a create function in another component during the same commit.\n\n                if (finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                  } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                  }\n                  recordLayoutEffectDuration(finishedWork);\n                } else {\n                  try {\n                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                  } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                  }\n                }\n              }\n              return;\n            }\n          case ClassComponent:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              if (flags & Ref) {\n                if (current !== null) {\n                  safelyDetachRef(current, current.return);\n                }\n              }\n              return;\n            }\n          case HostComponent:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              if (flags & Ref) {\n                if (current !== null) {\n                  safelyDetachRef(current, current.return);\n                }\n              }\n              if (supportsMutation) {\n                // TODO: ContentReset gets cleared by the children during the commit\n                // phase. This is a refactor hazard because it means we must read\n                // flags the flags after `commitReconciliationEffects` has already run;\n                // the order matters. We should refactor so that ContentReset does not\n                // rely on mutating the flag during commit. Like by setting a flag\n                // during the render phase instead.\n                if (finishedWork.flags & ContentReset) {\n                  var instance = finishedWork.stateNode;\n                  try {\n                    resetTextContent(instance);\n                  } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                  }\n                }\n                if (flags & Update) {\n                  var _instance4 = finishedWork.stateNode;\n                  if (_instance4 != null) {\n                    // Commit the work prepared earlier.\n                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                    // as the newProps. The updatePayload will contain the real change in\n                    // this case.\n\n                    var oldProps = current !== null ? current.memoizedProps : newProps;\n                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n                    var updatePayload = finishedWork.updateQueue;\n                    finishedWork.updateQueue = null;\n                    if (updatePayload !== null) {\n                      try {\n                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\n                      } catch (error) {\n                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                      }\n                    }\n                  }\n                }\n              }\n              return;\n            }\n          case HostText:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              if (flags & Update) {\n                if (supportsMutation) {\n                  if (finishedWork.stateNode === null) {\n                    throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n                  }\n                  var textInstance = finishedWork.stateNode;\n                  var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                  // as the newProps. The updatePayload will contain the real change in\n                  // this case.\n\n                  var oldText = current !== null ? current.memoizedProps : newText;\n                  try {\n                    commitTextUpdate(textInstance, oldText, newText);\n                  } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                  }\n                }\n              }\n              return;\n            }\n          case HostRoot:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              if (flags & Update) {\n                if (supportsMutation && supportsHydration) {\n                  if (current !== null) {\n                    var prevRootState = current.memoizedState;\n                    if (prevRootState.isDehydrated) {\n                      try {\n                        commitHydratedContainer(root.containerInfo);\n                      } catch (error) {\n                        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                      }\n                    }\n                  }\n                }\n                if (supportsPersistence) {\n                  var containerInfo = root.containerInfo;\n                  var pendingChildren = root.pendingChildren;\n                  try {\n                    replaceContainerChildren(containerInfo, pendingChildren);\n                  } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                  }\n                }\n              }\n              return;\n            }\n          case HostPortal:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              if (flags & Update) {\n                if (supportsPersistence) {\n                  var portal = finishedWork.stateNode;\n                  var _containerInfo = portal.containerInfo;\n                  var _pendingChildren = portal.pendingChildren;\n                  try {\n                    replaceContainerChildren(_containerInfo, _pendingChildren);\n                  } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                  }\n                }\n              }\n              return;\n            }\n          case SuspenseComponent:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              var offscreenFiber = finishedWork.child;\n              if (offscreenFiber.flags & Visibility) {\n                var offscreenInstance = offscreenFiber.stateNode;\n                var newState = offscreenFiber.memoizedState;\n                var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\n                // read it during an event\n\n                offscreenInstance.isHidden = isHidden;\n                if (isHidden) {\n                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\n                  if (!wasHidden) {\n                    // TODO: Move to passive phase\n                    markCommitTimeOfFallback();\n                  }\n                }\n              }\n              if (flags & Update) {\n                try {\n                  commitSuspenseCallback(finishedWork);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n                attachSuspenseRetryListeners(finishedWork);\n              }\n              return;\n            }\n          case OffscreenComponent:\n            {\n              var _wasHidden = current !== null && current.memoizedState !== null;\n              if (\n              // TODO: Remove this dead flag\n              finishedWork.mode & ConcurrentMode) {\n                // Before committing the children, track on the stack whether this\n                // offscreen subtree was already hidden, so that we don't unmount the\n                // effects again.\n                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\n                recursivelyTraverseMutationEffects(root, finishedWork);\n                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n              } else {\n                recursivelyTraverseMutationEffects(root, finishedWork);\n              }\n              commitReconciliationEffects(finishedWork);\n              if (flags & Visibility) {\n                var _offscreenInstance = finishedWork.stateNode;\n                var _newState = finishedWork.memoizedState;\n                var _isHidden = _newState !== null;\n                var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\n                // read it during an event\n\n                _offscreenInstance.isHidden = _isHidden;\n                {\n                  if (_isHidden) {\n                    if (!_wasHidden) {\n                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                        nextEffect = offscreenBoundary;\n                        var offscreenChild = offscreenBoundary.child;\n                        while (offscreenChild !== null) {\n                          nextEffect = offscreenChild;\n                          disappearLayoutEffects_begin(offscreenChild);\n                          offscreenChild = offscreenChild.sibling;\n                        }\n                      }\n                    }\n                  }\n                }\n                if (supportsMutation) {\n                  // TODO: This needs to run whenever there's an insertion or update\n                  // inside a hidden Offscreen tree.\n                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n                }\n              }\n              return;\n            }\n          case SuspenseListComponent:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              if (flags & Update) {\n                attachSuspenseRetryListeners(finishedWork);\n              }\n              return;\n            }\n          case ScopeComponent:\n            {\n              return;\n            }\n          default:\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n              return;\n            }\n        }\n      }\n      function commitReconciliationEffects(finishedWork) {\n        // Placement effects (insertions, reorders) can be scheduled on any fiber\n        // type. They needs to happen after the children effects have fired, but\n        // before the effects on this fiber have fired.\n        var flags = finishedWork.flags;\n        if (flags & Placement) {\n          try {\n            commitPlacement(finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          } // Clear the \"placement\" from effect tag so that we know that this is\n          // inserted, before any life-cycles like componentDidMount gets called.\n          // TODO: findDOMNode doesn't rely on this any more but isMounted does\n          // and isMounted is deprecated anyway so we should be able to kill this.\n\n          finishedWork.flags &= ~Placement;\n        }\n        if (flags & Hydrating) {\n          finishedWork.flags &= ~Hydrating;\n        }\n      }\n      function commitLayoutEffects(finishedWork, root, committedLanes) {\n        inProgressLanes = committedLanes;\n        inProgressRoot = root;\n        nextEffect = finishedWork;\n        commitLayoutEffects_begin(finishedWork, root, committedLanes);\n        inProgressLanes = null;\n        inProgressRoot = null;\n      }\n      function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n        // Suspense layout effects semantics don't change for legacy roots.\n        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          var firstChild = fiber.child;\n          if (fiber.tag === OffscreenComponent && isModernRoot) {\n            // Keep track of the current Offscreen stack's state.\n            var isHidden = fiber.memoizedState !== null;\n            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n            if (newOffscreenSubtreeIsHidden) {\n              // The Offscreen tree is hidden. Skip over its layout effects.\n              commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n              continue;\n            } else {\n              // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n              var current = fiber.alternate;\n              var wasHidden = current !== null && current.memoizedState !== null;\n              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n                // This is the root of a reappearing boundary. Turn its layout effects\n                // back on.\n                nextEffect = fiber;\n                reappearLayoutEffects_begin(fiber);\n              }\n              var child = firstChild;\n              while (child !== null) {\n                nextEffect = child;\n                commitLayoutEffects_begin(child,\n                // New root; bubble back up to here and stop.\n                root, committedLanes);\n                child = child.sibling;\n              } // Restore Offscreen state and resume in our-progress traversal.\n\n              nextEffect = fiber;\n              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n              commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n              continue;\n            }\n          }\n          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n            firstChild.return = fiber;\n            nextEffect = firstChild;\n          } else {\n            commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n          }\n        }\n      }\n      function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          if ((fiber.flags & LayoutMask) !== NoFlags) {\n            var current = fiber.alternate;\n            setCurrentFiber(fiber);\n            try {\n              commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n            resetCurrentFiber();\n          }\n          if (fiber === subtreeRoot) {\n            nextEffect = null;\n            return;\n          }\n          var sibling = fiber.sibling;\n          if (sibling !== null) {\n            sibling.return = fiber.return;\n            nextEffect = sibling;\n            return;\n          }\n          nextEffect = fiber.return;\n        }\n      }\n      function disappearLayoutEffects_begin(subtreeRoot) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case MemoComponent:\n            case SimpleMemoComponent:\n              {\n                if (fiber.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    commitHookEffectListUnmount(Layout, fiber, fiber.return);\n                  } finally {\n                    recordLayoutEffectDuration(fiber);\n                  }\n                } else {\n                  commitHookEffectListUnmount(Layout, fiber, fiber.return);\n                }\n                break;\n              }\n            case ClassComponent:\n              {\n                // TODO (Offscreen) Check: flags & RefStatic\n                safelyDetachRef(fiber, fiber.return);\n                var instance = fiber.stateNode;\n                if (typeof instance.componentWillUnmount === 'function') {\n                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n                }\n                break;\n              }\n            case HostComponent:\n              {\n                safelyDetachRef(fiber, fiber.return);\n                break;\n              }\n            case OffscreenComponent:\n              {\n                // Check if this is a\n                var isHidden = fiber.memoizedState !== null;\n                if (isHidden) {\n                  // Nested Offscreen tree is already hidden. Don't disappear\n                  // its effects.\n                  disappearLayoutEffects_complete(subtreeRoot);\n                  continue;\n                }\n                break;\n              }\n          } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n          if (firstChild !== null) {\n            firstChild.return = fiber;\n            nextEffect = firstChild;\n          } else {\n            disappearLayoutEffects_complete(subtreeRoot);\n          }\n        }\n      }\n      function disappearLayoutEffects_complete(subtreeRoot) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          if (fiber === subtreeRoot) {\n            nextEffect = null;\n            return;\n          }\n          var sibling = fiber.sibling;\n          if (sibling !== null) {\n            sibling.return = fiber.return;\n            nextEffect = sibling;\n            return;\n          }\n          nextEffect = fiber.return;\n        }\n      }\n      function reappearLayoutEffects_begin(subtreeRoot) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          var firstChild = fiber.child;\n          if (fiber.tag === OffscreenComponent) {\n            var isHidden = fiber.memoizedState !== null;\n            if (isHidden) {\n              // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n              reappearLayoutEffects_complete(subtreeRoot);\n              continue;\n            }\n          } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n          if (firstChild !== null) {\n            // This node may have been reused from a previous render, so we can't\n            // assume its return pointer is correct.\n            firstChild.return = fiber;\n            nextEffect = firstChild;\n          } else {\n            reappearLayoutEffects_complete(subtreeRoot);\n          }\n        }\n      }\n      function reappearLayoutEffects_complete(subtreeRoot) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n          setCurrentFiber(fiber);\n          try {\n            reappearLayoutEffectsOnFiber(fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n          resetCurrentFiber();\n          if (fiber === subtreeRoot) {\n            nextEffect = null;\n            return;\n          }\n          var sibling = fiber.sibling;\n          if (sibling !== null) {\n            // This node may have been reused from a previous render, so we can't\n            // assume its return pointer is correct.\n            sibling.return = fiber.return;\n            nextEffect = sibling;\n            return;\n          }\n          nextEffect = fiber.return;\n        }\n      }\n      function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n        nextEffect = finishedWork;\n        commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\n      }\n      function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          var firstChild = fiber.child;\n          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n            firstChild.return = fiber;\n            nextEffect = firstChild;\n          } else {\n            commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\n          }\n        }\n      }\n      function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          if ((fiber.flags & Passive) !== NoFlags) {\n            setCurrentFiber(fiber);\n            try {\n              commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n            resetCurrentFiber();\n          }\n          if (fiber === subtreeRoot) {\n            nextEffect = null;\n            return;\n          }\n          var sibling = fiber.sibling;\n          if (sibling !== null) {\n            sibling.return = fiber.return;\n            nextEffect = sibling;\n            return;\n          }\n          nextEffect = fiber.return;\n        }\n      }\n      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              if (finishedWork.mode & ProfileMode) {\n                startPassiveEffectTimer();\n                try {\n                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n                } finally {\n                  recordPassiveEffectDuration(finishedWork);\n                }\n              } else {\n                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n              }\n              break;\n            }\n        }\n      }\n      function commitPassiveUnmountEffects(firstChild) {\n        nextEffect = firstChild;\n        commitPassiveUnmountEffects_begin();\n      }\n      function commitPassiveUnmountEffects_begin() {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          var child = fiber.child;\n          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n            var deletions = fiber.deletions;\n            if (deletions !== null) {\n              for (var i = 0; i < deletions.length; i++) {\n                var fiberToDelete = deletions[i];\n                nextEffect = fiberToDelete;\n                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n              }\n              {\n                // A fiber was deleted from this parent fiber, but it's still part of\n                // the previous (alternate) parent fiber's list of children. Because\n                // children are a linked list, an earlier sibling that's still alive\n                // will be connected to the deleted fiber via its `alternate`:\n                //\n                //   live fiber\n                //   --alternate--> previous live fiber\n                //   --sibling--> deleted fiber\n                //\n                // We can't disconnect `alternate` on nodes that haven't been deleted\n                // yet, but we can disconnect the `sibling` and `child` pointers.\n                var previousFiber = fiber.alternate;\n                if (previousFiber !== null) {\n                  var detachedChild = previousFiber.child;\n                  if (detachedChild !== null) {\n                    previousFiber.child = null;\n                    do {\n                      var detachedSibling = detachedChild.sibling;\n                      detachedChild.sibling = null;\n                      detachedChild = detachedSibling;\n                    } while (detachedChild !== null);\n                  }\n                }\n              }\n              nextEffect = fiber;\n            }\n          }\n          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n            child.return = fiber;\n            nextEffect = child;\n          } else {\n            commitPassiveUnmountEffects_complete();\n          }\n        }\n      }\n      function commitPassiveUnmountEffects_complete() {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          if ((fiber.flags & Passive) !== NoFlags) {\n            setCurrentFiber(fiber);\n            commitPassiveUnmountOnFiber(fiber);\n            resetCurrentFiber();\n          }\n          var sibling = fiber.sibling;\n          if (sibling !== null) {\n            sibling.return = fiber.return;\n            nextEffect = sibling;\n            return;\n          }\n          nextEffect = fiber.return;\n        }\n      }\n      function commitPassiveUnmountOnFiber(finishedWork) {\n        switch (finishedWork.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              if (finishedWork.mode & ProfileMode) {\n                startPassiveEffectTimer();\n                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n                recordPassiveEffectDuration(finishedWork);\n              } else {\n                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n              }\n              break;\n            }\n        }\n      }\n      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect; // Deletion effects fire in parent -> child order\n          // TODO: Check if fiber has a PassiveStatic flag\n\n          setCurrentFiber(fiber);\n          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n          resetCurrentFiber();\n          var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n          // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n          if (child !== null) {\n            child.return = fiber;\n            nextEffect = child;\n          } else {\n            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n          }\n        }\n      }\n      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n        while (nextEffect !== null) {\n          var fiber = nextEffect;\n          var sibling = fiber.sibling;\n          var returnFiber = fiber.return;\n          {\n            // Recursively traverse the entire deleted tree and clean up fiber fields.\n            // This is more aggressive than ideal, and the long term goal is to only\n            // have to detach the deleted tree at the root.\n            detachFiberAfterEffects(fiber);\n            if (fiber === deletedSubtreeRoot) {\n              nextEffect = null;\n              return;\n            }\n          }\n          if (sibling !== null) {\n            sibling.return = returnFiber;\n            nextEffect = sibling;\n            return;\n          }\n          nextEffect = returnFiber;\n        }\n      }\n      function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n        switch (current.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              if (current.mode & ProfileMode) {\n                startPassiveEffectTimer();\n                commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n                recordPassiveEffectDuration(current);\n              } else {\n                commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n              }\n              break;\n            }\n        }\n      } // TODO: Reuse reappearLayoutEffects traversal here?\n\n      function invokeLayoutEffectMountInDEV(fiber) {\n        {\n          // We don't need to re-check StrictEffectsMode here.\n          // This function is only called if that check has already passed.\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                try {\n                  commitHookEffectListMount(Layout | HasEffect, fiber);\n                } catch (error) {\n                  captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                break;\n              }\n            case ClassComponent:\n              {\n                var instance = fiber.stateNode;\n                try {\n                  instance.componentDidMount();\n                } catch (error) {\n                  captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                break;\n              }\n          }\n        }\n      }\n      function invokePassiveEffectMountInDEV(fiber) {\n        {\n          // We don't need to re-check StrictEffectsMode here.\n          // This function is only called if that check has already passed.\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                try {\n                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n                } catch (error) {\n                  captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                break;\n              }\n          }\n        }\n      }\n      function invokeLayoutEffectUnmountInDEV(fiber) {\n        {\n          // We don't need to re-check StrictEffectsMode here.\n          // This function is only called if that check has already passed.\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                try {\n                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n                } catch (error) {\n                  captureCommitPhaseError(fiber, fiber.return, error);\n                }\n                break;\n              }\n            case ClassComponent:\n              {\n                var instance = fiber.stateNode;\n                if (typeof instance.componentWillUnmount === 'function') {\n                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n                }\n                break;\n              }\n          }\n        }\n      }\n      function invokePassiveEffectUnmountInDEV(fiber) {\n        {\n          // We don't need to re-check StrictEffectsMode here.\n          // This function is only called if that check has already passed.\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                try {\n                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n                } catch (error) {\n                  captureCommitPhaseError(fiber, fiber.return, error);\n                }\n              }\n          }\n        }\n      }\n      var COMPONENT_TYPE = 0;\n      var HAS_PSEUDO_CLASS_TYPE = 1;\n      var ROLE_TYPE = 2;\n      var TEST_NAME_TYPE = 3;\n      var TEXT_TYPE = 4;\n      if (typeof Symbol === 'function' && Symbol.for) {\n        var symbolFor = Symbol.for;\n        COMPONENT_TYPE = symbolFor('selector.component');\n        HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n        ROLE_TYPE = symbolFor('selector.role');\n        TEST_NAME_TYPE = symbolFor('selector.test_id');\n        TEXT_TYPE = symbolFor('selector.text');\n      }\n      function createComponentSelector(component) {\n        return {\n          $$typeof: COMPONENT_TYPE,\n          value: component\n        };\n      }\n      function createHasPseudoClassSelector(selectors) {\n        return {\n          $$typeof: HAS_PSEUDO_CLASS_TYPE,\n          value: selectors\n        };\n      }\n      function createRoleSelector(role) {\n        return {\n          $$typeof: ROLE_TYPE,\n          value: role\n        };\n      }\n      function createTextSelector(text) {\n        return {\n          $$typeof: TEXT_TYPE,\n          value: text\n        };\n      }\n      function createTestNameSelector(id) {\n        return {\n          $$typeof: TEST_NAME_TYPE,\n          value: id\n        };\n      }\n      function findFiberRootForHostRoot(hostRoot) {\n        var maybeFiber = getInstanceFromNode(hostRoot);\n        if (maybeFiber != null) {\n          if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n            throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n          }\n          return maybeFiber;\n        } else {\n          var fiberRoot = findFiberRoot(hostRoot);\n          if (fiberRoot === null) {\n            throw new Error('Could not find React container within specified host subtree.');\n          } // The Flow type for FiberRoot is a little funky.\n          // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n          return fiberRoot.stateNode.current;\n        }\n      }\n      function matchSelector(fiber, selector) {\n        switch (selector.$$typeof) {\n          case COMPONENT_TYPE:\n            if (fiber.type === selector.value) {\n              return true;\n            }\n            break;\n          case HAS_PSEUDO_CLASS_TYPE:\n            return hasMatchingPaths(fiber, selector.value);\n          case ROLE_TYPE:\n            if (fiber.tag === HostComponent) {\n              var node = fiber.stateNode;\n              if (matchAccessibilityRole(node, selector.value)) {\n                return true;\n              }\n            }\n            break;\n          case TEXT_TYPE:\n            if (fiber.tag === HostComponent || fiber.tag === HostText) {\n              var textContent = getTextContent(fiber);\n              if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n                return true;\n              }\n            }\n            break;\n          case TEST_NAME_TYPE:\n            if (fiber.tag === HostComponent) {\n              var dataTestID = fiber.memoizedProps['data-testname'];\n              if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n                return true;\n              }\n            }\n            break;\n          default:\n            throw new Error('Invalid selector type specified.');\n        }\n        return false;\n      }\n      function selectorToString(selector) {\n        switch (selector.$$typeof) {\n          case COMPONENT_TYPE:\n            var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n            return \"<\" + displayName + \">\";\n          case HAS_PSEUDO_CLASS_TYPE:\n            return \":has(\" + (selectorToString(selector) || '') + \")\";\n          case ROLE_TYPE:\n            return \"[role=\\\"\" + selector.value + \"\\\"]\";\n          case TEXT_TYPE:\n            return \"\\\"\" + selector.value + \"\\\"\";\n          case TEST_NAME_TYPE:\n            return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n          default:\n            throw new Error('Invalid selector type specified.');\n        }\n      }\n      function findPaths(root, selectors) {\n        var matchingFibers = [];\n        var stack = [root, 0];\n        var index = 0;\n        while (index < stack.length) {\n          var fiber = stack[index++];\n          var selectorIndex = stack[index++];\n          var selector = selectors[selectorIndex];\n          if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n            continue;\n          } else {\n            while (selector != null && matchSelector(fiber, selector)) {\n              selectorIndex++;\n              selector = selectors[selectorIndex];\n            }\n          }\n          if (selectorIndex === selectors.length) {\n            matchingFibers.push(fiber);\n          } else {\n            var child = fiber.child;\n            while (child !== null) {\n              stack.push(child, selectorIndex);\n              child = child.sibling;\n            }\n          }\n        }\n        return matchingFibers;\n      } // Same as findPaths but with eager bailout on first match\n\n      function hasMatchingPaths(root, selectors) {\n        var stack = [root, 0];\n        var index = 0;\n        while (index < stack.length) {\n          var fiber = stack[index++];\n          var selectorIndex = stack[index++];\n          var selector = selectors[selectorIndex];\n          if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n            continue;\n          } else {\n            while (selector != null && matchSelector(fiber, selector)) {\n              selectorIndex++;\n              selector = selectors[selectorIndex];\n            }\n          }\n          if (selectorIndex === selectors.length) {\n            return true;\n          } else {\n            var child = fiber.child;\n            while (child !== null) {\n              stack.push(child, selectorIndex);\n              child = child.sibling;\n            }\n          }\n        }\n        return false;\n      }\n      function findAllNodes(hostRoot, selectors) {\n        if (!supportsTestSelectors) {\n          throw new Error('Test selector API is not supported by this renderer.');\n        }\n        var root = findFiberRootForHostRoot(hostRoot);\n        var matchingFibers = findPaths(root, selectors);\n        var instanceRoots = [];\n        var stack = Array.from(matchingFibers);\n        var index = 0;\n        while (index < stack.length) {\n          var node = stack[index++];\n          if (node.tag === HostComponent) {\n            if (isHiddenSubtree(node)) {\n              continue;\n            }\n            instanceRoots.push(node.stateNode);\n          } else {\n            var child = node.child;\n            while (child !== null) {\n              stack.push(child);\n              child = child.sibling;\n            }\n          }\n        }\n        return instanceRoots;\n      }\n      function getFindAllNodesFailureDescription(hostRoot, selectors) {\n        if (!supportsTestSelectors) {\n          throw new Error('Test selector API is not supported by this renderer.');\n        }\n        var root = findFiberRootForHostRoot(hostRoot);\n        var maxSelectorIndex = 0;\n        var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n        var stack = [root, 0];\n        var index = 0;\n        while (index < stack.length) {\n          var fiber = stack[index++];\n          var selectorIndex = stack[index++];\n          var selector = selectors[selectorIndex];\n          if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n            continue;\n          } else if (matchSelector(fiber, selector)) {\n            matchedNames.push(selectorToString(selector));\n            selectorIndex++;\n            if (selectorIndex > maxSelectorIndex) {\n              maxSelectorIndex = selectorIndex;\n            }\n          }\n          if (selectorIndex < selectors.length) {\n            var child = fiber.child;\n            while (child !== null) {\n              stack.push(child, selectorIndex);\n              child = child.sibling;\n            }\n          }\n        }\n        if (maxSelectorIndex < selectors.length) {\n          var unmatchedNames = [];\n          for (var i = maxSelectorIndex; i < selectors.length; i++) {\n            unmatchedNames.push(selectorToString(selectors[i]));\n          }\n          return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n        }\n        return null;\n      }\n      function findBoundingRects(hostRoot, selectors) {\n        if (!supportsTestSelectors) {\n          throw new Error('Test selector API is not supported by this renderer.');\n        }\n        var instanceRoots = findAllNodes(hostRoot, selectors);\n        var boundingRects = [];\n        for (var i = 0; i < instanceRoots.length; i++) {\n          boundingRects.push(getBoundingRect(instanceRoots[i]));\n        }\n        for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n          var targetRect = boundingRects[_i];\n          var targetLeft = targetRect.x;\n          var targetRight = targetLeft + targetRect.width;\n          var targetTop = targetRect.y;\n          var targetBottom = targetTop + targetRect.height;\n          for (var j = _i - 1; j >= 0; j--) {\n            if (_i !== j) {\n              var otherRect = boundingRects[j];\n              var otherLeft = otherRect.x;\n              var otherRight = otherLeft + otherRect.width;\n              var otherTop = otherRect.y;\n              var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n              // but we can handle the most common cases:\n              // 1. completely overlapping rects\n              // 2. adjacent rects that are the same width or height (e.g. items in a list)\n              //\n              // Even given the above constraints,\n              // we still won't end up with the fewest possible rects without doing multiple passes,\n              // but it's good enough for this purpose.\n\n              if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n                // Complete overlapping rects; remove the inner one.\n                boundingRects.splice(_i, 1);\n                break;\n              } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n                // Adjacent vertical rects; merge them.\n                if (otherTop > targetTop) {\n                  otherRect.height += otherTop - targetTop;\n                  otherRect.y = targetTop;\n                }\n                if (otherBottom < targetBottom) {\n                  otherRect.height = targetBottom - otherTop;\n                }\n                boundingRects.splice(_i, 1);\n                break;\n              } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n                // Adjacent horizontal rects; merge them.\n                if (otherLeft > targetLeft) {\n                  otherRect.width += otherLeft - targetLeft;\n                  otherRect.x = targetLeft;\n                }\n                if (otherRight < targetRight) {\n                  otherRect.width = targetRight - otherLeft;\n                }\n                boundingRects.splice(_i, 1);\n                break;\n              }\n            }\n          }\n        }\n        return boundingRects;\n      }\n      function focusWithin(hostRoot, selectors) {\n        if (!supportsTestSelectors) {\n          throw new Error('Test selector API is not supported by this renderer.');\n        }\n        var root = findFiberRootForHostRoot(hostRoot);\n        var matchingFibers = findPaths(root, selectors);\n        var stack = Array.from(matchingFibers);\n        var index = 0;\n        while (index < stack.length) {\n          var fiber = stack[index++];\n          if (isHiddenSubtree(fiber)) {\n            continue;\n          }\n          if (fiber.tag === HostComponent) {\n            var node = fiber.stateNode;\n            if (setFocusIfFocusable(node)) {\n              return true;\n            }\n          }\n          var child = fiber.child;\n          while (child !== null) {\n            stack.push(child);\n            child = child.sibling;\n          }\n        }\n        return false;\n      }\n      var commitHooks = [];\n      function onCommitRoot$1() {\n        if (supportsTestSelectors) {\n          commitHooks.forEach(function (commitHook) {\n            return commitHook();\n          });\n        }\n      }\n      function observeVisibleRects(hostRoot, selectors, callback, options) {\n        if (!supportsTestSelectors) {\n          throw new Error('Test selector API is not supported by this renderer.');\n        }\n        var instanceRoots = findAllNodes(hostRoot, selectors);\n        var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n          disconnect = _setupIntersectionObs.disconnect,\n          observe = _setupIntersectionObs.observe,\n          unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n        var commitHook = function () {\n          var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n          instanceRoots.forEach(function (target) {\n            if (nextInstanceRoots.indexOf(target) < 0) {\n              unobserve(target);\n            }\n          });\n          nextInstanceRoots.forEach(function (target) {\n            if (instanceRoots.indexOf(target) < 0) {\n              observe(target);\n            }\n          });\n        };\n        commitHooks.push(commitHook);\n        return {\n          disconnect: function () {\n            // Stop listening for React mutations:\n            var index = commitHooks.indexOf(commitHook);\n            if (index >= 0) {\n              commitHooks.splice(index, 1);\n            } // Disconnect the host observer:\n\n            disconnect();\n          }\n        };\n      }\n      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n      function isLegacyActEnvironment(fiber) {\n        {\n          // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n          // act environment whenever `jest` is defined, but you can still turn off\n          // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n          // to false.\n          var isReactActEnvironmentGlobal =\n          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n          typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n          var jestIsDefined = typeof jest !== 'undefined';\n          return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n        }\n      }\n      function isConcurrentActEnvironment() {\n        {\n          var isReactActEnvironmentGlobal =\n          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n          typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n            // TODO: Include link to relevant documentation page.\n            error('The current testing environment is not configured to support ' + 'act(...)');\n          }\n          return isReactActEnvironmentGlobal;\n        }\n      }\n      var ceil = Math.ceil;\n      var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n        ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n        ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n        ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n      var NoContext = /*             */\n      0;\n      var BatchedContext = /*               */\n      1;\n      var RenderContext = /*                */\n      2;\n      var CommitContext = /*                */\n      4;\n      var RootInProgress = 0;\n      var RootFatalErrored = 1;\n      var RootErrored = 2;\n      var RootSuspended = 3;\n      var RootSuspendedWithDelay = 4;\n      var RootCompleted = 5;\n      var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n      var executionContext = NoContext; // The root we're working on\n\n      var workInProgressRoot = null; // The fiber we're working on\n\n      var workInProgress = null; // The lanes we're rendering\n\n      var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n      // This is a superset of the lanes we started working on at the root. The only\n      // case where it's different from `workInProgressRootRenderLanes` is when we\n      // enter a subtree that is hidden and needs to be unhidden: Suspense and\n      // Offscreen component.\n      //\n      // Most things in the work loop should deal with workInProgressRootRenderLanes.\n      // Most things in begin/complete phases should deal with subtreeRenderLanes.\n\n      var subtreeRenderLanes = NoLanes;\n      var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\n      var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n      var workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n      // includes unprocessed updates, not work in bailed out children.\n\n      var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n      var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n      var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\n      var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n      // We will log them once the tree commits.\n\n      var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n      // model where we don't commit new loading states in too quick succession.\n\n      var globalMostRecentFallbackTime = 0;\n      var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n      // more and prefer CPU suspense heuristics instead.\n\n      var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n      // suspense heuristics and opt out of rendering more content.\n\n      var RENDER_TIMEOUT_MS = 500;\n      var workInProgressTransitions = null;\n      function resetRenderTimer() {\n        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n      }\n      function getRenderTargetTime() {\n        return workInProgressRootRenderTargetTime;\n      }\n      var hasUncaughtError = false;\n      var firstUncaughtError = null;\n      var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n      var rootDoesHavePassiveEffects = false;\n      var rootWithPendingPassiveEffects = null;\n      var pendingPassiveEffectsLanes = NoLanes;\n      var pendingPassiveProfilerEffects = [];\n      var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\n      var NESTED_UPDATE_LIMIT = 50;\n      var nestedUpdateCount = 0;\n      var rootWithNestedUpdates = null;\n      var isFlushingPassiveEffects = false;\n      var didScheduleUpdateDuringPassiveEffects = false;\n      var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n      var nestedPassiveUpdateCount = 0;\n      var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\n      // event times as simultaneous, even if the actual clock time has advanced\n      // between the first and second call.\n\n      var currentEventTime = NoTimestamp;\n      var currentEventTransitionLane = NoLanes;\n      var isRunningInsertionEffect = false;\n      function getWorkInProgressRoot() {\n        return workInProgressRoot;\n      }\n      function requestEventTime() {\n        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n          // We're inside React, so it's fine to read the actual time.\n          return now();\n        } // We're not inside React, so we may be in the middle of a browser event.\n\n        if (currentEventTime !== NoTimestamp) {\n          // Use the same start time for all updates until we enter React again.\n          return currentEventTime;\n        } // This is the first update since React yielded. Compute a new start time.\n\n        currentEventTime = now();\n        return currentEventTime;\n      }\n      function requestUpdateLane(fiber) {\n        // Special cases\n        var mode = fiber.mode;\n        if ((mode & ConcurrentMode) === NoMode) {\n          return SyncLane;\n        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n          // This is a render phase update. These are not officially supported. The\n          // old behavior is to give this the same \"thread\" (lanes) as\n          // whatever is currently rendering. So if you call `setState` on a component\n          // that happens later in the same render, it will flush. Ideally, we want to\n          // remove the special case and treat them as if they came from an\n          // interleaved event. Regardless, this pattern is not officially supported.\n          // This behavior is only a fallback. The flag only exists until we can roll\n          // out the setState warning, since existing code might accidentally rely on\n          // the current behavior.\n          return pickArbitraryLane(workInProgressRootRenderLanes);\n        }\n        var isTransition = requestCurrentTransition() !== NoTransition;\n        if (isTransition) {\n          if (ReactCurrentBatchConfig$2.transition !== null) {\n            var transition = ReactCurrentBatchConfig$2.transition;\n            if (!transition._updatedFibers) {\n              transition._updatedFibers = new Set();\n            }\n            transition._updatedFibers.add(fiber);\n          } // The algorithm for assigning an update to a lane should be stable for all\n          // updates at the same priority within the same event. To do this, the\n          // inputs to the algorithm must be the same.\n          //\n          // The trick we use is to cache the first of each of these inputs within an\n          // event. Then reset the cached values once we can be sure the event is\n          // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n          if (currentEventTransitionLane === NoLane) {\n            // All transitions within the same event are assigned the same lane.\n            currentEventTransitionLane = claimNextTransitionLane();\n          }\n          return currentEventTransitionLane;\n        } // Updates originating inside certain React methods, like flushSync, have\n        // their priority set by tracking it with a context variable.\n        //\n        // The opaque type returned by the host config is internally a lane, so we can\n        // use that directly.\n        // TODO: Move this type conversion to the event priority module.\n\n        var updateLane = getCurrentUpdatePriority();\n        if (updateLane !== NoLane) {\n          return updateLane;\n        } // This update originated outside React. Ask the host environment for an\n        // appropriate priority, based on the type of event.\n        //\n        // The opaque type returned by the host config is internally a lane, so we can\n        // use that directly.\n        // TODO: Move this type conversion to the event priority module.\n\n        var eventLane = getCurrentEventPriority();\n        return eventLane;\n      }\n      function requestRetryLane(fiber) {\n        // This is a fork of `requestUpdateLane` designed specifically for Suspense\n        // \"retries\" — a special update that attempts to flip a Suspense boundary\n        // from its placeholder state to its primary/resolved state.\n        // Special cases\n        var mode = fiber.mode;\n        if ((mode & ConcurrentMode) === NoMode) {\n          return SyncLane;\n        }\n        return claimNextRetryLane();\n      }\n      function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\n        checkForNestedUpdates();\n        {\n          if (isRunningInsertionEffect) {\n            error('useInsertionEffect must not schedule updates.');\n          }\n        }\n        {\n          if (isFlushingPassiveEffects) {\n            didScheduleUpdateDuringPassiveEffects = true;\n          }\n        } // Mark that the root has a pending update.\n\n        markRootUpdated(root, lane, eventTime);\n        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n          // This update was dispatched during the render phase. This is a mistake\n          // if the update originates from user space (with the exception of local\n          // hook updates, which are handled differently and don't reach this\n          // function), but there are some internal React features that use this as\n          // an implementation detail, like selective hydration.\n          warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n        } else {\n          // This is a normal update, scheduled from outside the render phase. For\n          // example, during an input event.\n          {\n            if (isDevToolsPresent) {\n              addFiberToLanesMap(root, fiber, lane);\n            }\n          }\n          warnIfUpdatesNotWrappedWithActDEV(fiber);\n          if (root === workInProgressRoot) {\n            // Received an update to a tree that's in the middle of rendering. Mark\n            // that there was an interleaved update work on this root. Unless the\n            // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n            // phase update. In that case, we don't treat render phase updates as if\n            // they were interleaved, for backwards compat reasons.\n            if ((executionContext & RenderContext) === NoContext) {\n              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n            }\n            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n              // The root already suspended with a delay, which means this render\n              // definitely won't finish. Since we have a new update, let's mark it as\n              // suspended now, right before marking the incoming update. This has the\n              // effect of interrupting the current render and switching to the update.\n              // TODO: Make sure this doesn't override pings that happen while we've\n              // already started rendering.\n              markRootSuspended$1(root, workInProgressRootRenderLanes);\n            }\n          }\n          ensureRootIsScheduled(root, eventTime);\n          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode &&\n          // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n          !ReactCurrentActQueue$1.isBatchingLegacy) {\n            // Flush the synchronous work now, unless we're already working or inside\n            // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n            // scheduleCallbackForFiber to preserve the ability to schedule a callback\n            // without immediately flushing it. We only do this for user-initiated\n            // updates, to preserve historical behavior of legacy mode.\n            resetRenderTimer();\n            flushSyncCallbacksOnlyInLegacyMode();\n          }\n        }\n      }\n      function scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n        // This is a special fork of scheduleUpdateOnFiber that is only used to\n        // schedule the initial hydration of a root that has just been created. Most\n        // of the stuff in scheduleUpdateOnFiber can be skipped.\n        //\n        // The main reason for this separate path, though, is to distinguish the\n        // initial children from subsequent updates. In fully client-rendered roots\n        // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n        // updates, but hydration roots are special because the initial render must\n        // match what was rendered on the server.\n        var current = root.current;\n        current.lanes = lane;\n        markRootUpdated(root, lane, eventTime);\n        ensureRootIsScheduled(root, eventTime);\n      }\n      function isUnsafeClassRenderPhaseUpdate(fiber) {\n        // Check if this is a render phase update. Only called by class components,\n        // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n        return (\n          // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n          // decided not to enable it.\n          (executionContext & RenderContext) !== NoContext\n        );\n      } // Use this function to schedule a task for a root. There's only one task per\n      // root; if a task was already scheduled, we'll check to make sure the priority\n      // of the existing task is the same as the priority of the next level that the\n      // root has work on. This function is called on every update, and right before\n      // exiting a task.\n\n      function ensureRootIsScheduled(root, currentTime) {\n        var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n        // expired so we know to work on those next.\n\n        markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n        if (nextLanes === NoLanes) {\n          // Special case: There's nothing to work on.\n          if (existingCallbackNode !== null) {\n            cancelCallback$1(existingCallbackNode);\n          }\n          root.callbackNode = null;\n          root.callbackPriority = NoLane;\n          return;\n        } // We use the highest priority lane to represent the priority of the callback.\n\n        var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n        var existingCallbackPriority = root.callbackPriority;\n        if (existingCallbackPriority === newCallbackPriority &&\n        // Special case related to `act`. If the currently scheduled task is a\n        // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n        // on the `act` queue.\n        !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n          {\n            // If we're going to re-use an existing task, it needs to exist.\n            // Assume that discrete update microtasks are non-cancellable and null.\n            // TODO: Temporary until we confirm this warning is not fired.\n            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n              error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n            }\n          } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n          return;\n        }\n        if (existingCallbackNode != null) {\n          // Cancel the existing callback. We'll schedule a new one below.\n          cancelCallback$1(existingCallbackNode);\n        } // Schedule a new callback.\n\n        var newCallbackNode;\n        if (newCallbackPriority === SyncLane) {\n          // Special case: Sync React callbacks are scheduled on a special\n          // internal queue\n          if (root.tag === LegacyRoot) {\n            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n            }\n            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n          } else {\n            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n          }\n          if (supportsMicrotasks) {\n            // Flush the queue in a microtask.\n            if (ReactCurrentActQueue$1.current !== null) {\n              // Inside `act`, use our internal `act` queue so that these get flushed\n              // at the end of the current scope even when using the sync version\n              // of `act`.\n              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n            } else {\n              scheduleMicrotask(function () {\n                // In Safari, appending an iframe forces microtasks to run.\n                // https://github.com/facebook/react/issues/22459\n                // We don't support running callbacks in the middle of render\n                // or commit so we need to check against that.\n                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n                  // Note that this would still prematurely flush the callbacks\n                  // if this happens outside render or commit phase (e.g. in an event).\n                  flushSyncCallbacks();\n                }\n              });\n            }\n          } else {\n            // Flush the queue in an Immediate task.\n            scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n          }\n          newCallbackNode = null;\n        } else {\n          var schedulerPriorityLevel;\n          switch (lanesToEventPriority(nextLanes)) {\n            case DiscreteEventPriority:\n              schedulerPriorityLevel = ImmediatePriority;\n              break;\n            case ContinuousEventPriority:\n              schedulerPriorityLevel = UserBlockingPriority;\n              break;\n            case DefaultEventPriority:\n              schedulerPriorityLevel = NormalPriority;\n              break;\n            case IdleEventPriority:\n              schedulerPriorityLevel = IdlePriority;\n              break;\n            default:\n              schedulerPriorityLevel = NormalPriority;\n              break;\n          }\n          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n        }\n        root.callbackPriority = newCallbackPriority;\n        root.callbackNode = newCallbackNode;\n      } // This is the entry point for every concurrent task, i.e. anything that\n      // goes through Scheduler.\n\n      function performConcurrentWorkOnRoot(root, didTimeout) {\n        {\n          resetNestedUpdateFlag();\n        } // Since we know we're in a React event, we can clear the current\n        // event time. The next update will compute a new event time.\n\n        currentEventTime = NoTimestamp;\n        currentEventTransitionLane = NoLanes;\n        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n          throw new Error('Should not already be working.');\n        } // Flush any pending passive effects before deciding which lanes to work on,\n        // in case they schedule additional work.\n\n        var originalCallbackNode = root.callbackNode;\n        var didFlushPassiveEffects = flushPassiveEffects();\n        if (didFlushPassiveEffects) {\n          // Something in the passive effect phase may have canceled the current task.\n          // Check if the task node for this root was changed.\n          if (root.callbackNode !== originalCallbackNode) {\n            // The current task was canceled. Exit. We don't need to call\n            // `ensureRootIsScheduled` because the check above implies either that\n            // there's a new task, or that there's no remaining work on this root.\n            return null;\n          }\n        } // Determine the next lanes to work on, using the fields stored\n        // on the root.\n\n        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n        if (lanes === NoLanes) {\n          // Defensive coding. This is never expected to happen.\n          return null;\n        } // We disable time-slicing in some cases: if the work has been CPU-bound\n        // for too long (\"expired\" work, to prevent starvation), or we're in\n        // sync-updates-by-default mode.\n        // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n        // bug we're still investigating. Once the bug in Scheduler is fixed,\n        // we can remove this, since we track expiration ourselves.\n\n        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n        if (exitStatus !== RootInProgress) {\n          if (exitStatus === RootErrored) {\n            // If something threw an error, try rendering one more time. We'll\n            // render synchronously to block concurrent data mutations, and we'll\n            // includes all pending updates are included. If it still fails after\n            // the second attempt, we'll give up and commit the resulting tree.\n            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n            if (errorRetryLanes !== NoLanes) {\n              lanes = errorRetryLanes;\n              exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n            }\n          }\n          if (exitStatus === RootFatalErrored) {\n            var fatalError = workInProgressRootFatalError;\n            prepareFreshStack(root, NoLanes);\n            markRootSuspended$1(root, lanes);\n            ensureRootIsScheduled(root, now());\n            throw fatalError;\n          }\n          if (exitStatus === RootDidNotComplete) {\n            // The render unwound without completing the tree. This happens in special\n            // cases where need to exit the current render without producing a\n            // consistent tree or committing.\n            //\n            // This should only happen during a concurrent render, not a discrete or\n            // synchronous update. We should have already checked for this when we\n            // unwound the stack.\n            markRootSuspended$1(root, lanes);\n          } else {\n            // The render completed.\n            // Check if this render may have yielded to a concurrent event, and if so,\n            // confirm that any newly rendered stores are consistent.\n            // TODO: It's possible that even a concurrent render may never have yielded\n            // to the main thread, if it was fast enough, or if it expired. We could\n            // skip the consistency check in that case, too.\n            var renderWasConcurrent = !includesBlockingLane(root, lanes);\n            var finishedWork = root.current.alternate;\n            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n              // A store was mutated in an interleaved event. Render again,\n              // synchronously, to block further mutations.\n              exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n              if (exitStatus === RootErrored) {\n                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n                if (_errorRetryLanes !== NoLanes) {\n                  lanes = _errorRetryLanes;\n                  exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n                  // concurrent events.\n                }\n              }\n              if (exitStatus === RootFatalErrored) {\n                var _fatalError = workInProgressRootFatalError;\n                prepareFreshStack(root, NoLanes);\n                markRootSuspended$1(root, lanes);\n                ensureRootIsScheduled(root, now());\n                throw _fatalError;\n              }\n            } // We now have a consistent tree. The next step is either to commit it,\n            // or, if something suspended, wait to commit it after a timeout.\n\n            root.finishedWork = finishedWork;\n            root.finishedLanes = lanes;\n            finishConcurrentRender(root, exitStatus, lanes);\n          }\n        }\n        ensureRootIsScheduled(root, now());\n        if (root.callbackNode === originalCallbackNode) {\n          // The task node scheduled for this root is the same one that's\n          // currently executed. Need to return a continuation.\n          return performConcurrentWorkOnRoot.bind(null, root);\n        }\n        return null;\n      }\n      function recoverFromConcurrentError(root, errorRetryLanes) {\n        // If an error occurred during hydration, discard server response and fall\n        // back to client side render.\n        // Before rendering again, save the errors from the previous attempt.\n        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n        if (isRootDehydrated(root)) {\n          // The shell failed to hydrate. Set a flag to force a client rendering\n          // during the next attempt. To do this, we call prepareFreshStack now\n          // to create the root work-in-progress fiber. This is a bit weird in terms\n          // of factoring, because it relies on renderRootSync not calling\n          // prepareFreshStack again in the call below, which happens because the\n          // root and lanes haven't changed.\n          //\n          // TODO: I think what we should do is set ForceClientRender inside\n          // throwException, like we do for nested Suspense boundaries. The reason\n          // it's here instead is so we can switch to the synchronous work loop, too.\n          // Something to consider for a future refactor.\n          var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n          rootWorkInProgress.flags |= ForceClientRender;\n          {\n            errorHydratingContainer(root.containerInfo);\n          }\n        }\n        var exitStatus = renderRootSync(root, errorRetryLanes);\n        if (exitStatus !== RootErrored) {\n          // Successfully finished rendering on retry\n          // The errors from the failed first attempt have been recovered. Add\n          // them to the collection of recoverable errors. We'll log them in the\n          // commit phase.\n          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n          workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n          // from the first attempt, to preserve the causal sequence.\n\n          if (errorsFromSecondAttempt !== null) {\n            queueRecoverableErrors(errorsFromSecondAttempt);\n          }\n        }\n        return exitStatus;\n      }\n      function queueRecoverableErrors(errors) {\n        if (workInProgressRootRecoverableErrors === null) {\n          workInProgressRootRecoverableErrors = errors;\n        } else {\n          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n        }\n      }\n      function finishConcurrentRender(root, exitStatus, lanes) {\n        switch (exitStatus) {\n          case RootInProgress:\n          case RootFatalErrored:\n            {\n              throw new Error('Root did not complete. This is a bug in React.');\n            }\n          // Flow knows about invariant, so it complains if I add a break\n          // statement, but eslint doesn't know about invariant, so it complains\n          // if I do. eslint-disable-next-line no-fallthrough\n\n          case RootErrored:\n            {\n              // We should have already attempted to retry this tree. If we reached\n              // this point, it errored again. Commit it.\n              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n              break;\n            }\n          case RootSuspended:\n            {\n              markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n              // should immediately commit it or wait a bit.\n\n              if (includesOnlyRetries(lanes) &&\n              // do not delay if we're inside an act() scope\n              !shouldForceFlushFallbacksInDEV()) {\n                // This render only included retries, no updates. Throttle committing\n                // retries so that we don't show too many loading states too quickly.\n                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n                if (msUntilTimeout > 10) {\n                  var nextLanes = getNextLanes(root, NoLanes);\n                  if (nextLanes !== NoLanes) {\n                    // There's additional work on this root.\n                    break;\n                  }\n                  var suspendedLanes = root.suspendedLanes;\n                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n                    // We should prefer to render the fallback of at the last\n                    // suspended level. Ping the last suspended level to try\n                    // rendering it again.\n                    // FIXME: What if the suspended lanes are Idle? Should not restart.\n                    requestEventTime();\n                    markRootPinged(root, suspendedLanes);\n                    break;\n                  } // The render is suspended, it hasn't timed out, and there's no\n                  // lower priority work to do. Instead of committing the fallback\n                  // immediately, wait for more data to arrive.\n\n                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\n                  break;\n                }\n              } // The work expired. Commit immediately.\n\n              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n              break;\n            }\n          case RootSuspendedWithDelay:\n            {\n              markRootSuspended$1(root, lanes);\n              if (includesOnlyTransitions(lanes)) {\n                // This is a transition, so we should exit without committing a\n                // placeholder and without scheduling a timeout. Delay indefinitely\n                // until we receive more data.\n                break;\n              }\n              if (!shouldForceFlushFallbacksInDEV()) {\n                // This is not a transition, but we did trigger an avoided state.\n                // Schedule a placeholder to display after a short delay, using the Just\n                // Noticeable Difference.\n                // TODO: Is the JND optimization worth the added complexity? If this is\n                // the only reason we track the event time, then probably not.\n                // Consider removing.\n                var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n                var eventTimeMs = mostRecentEventTime;\n                var timeElapsedMs = now() - eventTimeMs;\n                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n                if (_msUntilTimeout > 10) {\n                  // Instead of committing the fallback immediately, wait for more data\n                  // to arrive.\n                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\n                  break;\n                }\n              } // Commit the placeholder.\n\n              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n              break;\n            }\n          case RootCompleted:\n            {\n              // The work completed. Ready to commit.\n              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n              break;\n            }\n          default:\n            {\n              throw new Error('Unknown root exit status.');\n            }\n        }\n      }\n      function isRenderConsistentWithExternalStores(finishedWork) {\n        // Search the rendered tree for external store reads, and check whether the\n        // stores were mutated in a concurrent event. Intentionally using an iterative\n        // loop instead of recursion so we can exit early.\n        var node = finishedWork;\n        while (true) {\n          if (node.flags & StoreConsistency) {\n            var updateQueue = node.updateQueue;\n            if (updateQueue !== null) {\n              var checks = updateQueue.stores;\n              if (checks !== null) {\n                for (var i = 0; i < checks.length; i++) {\n                  var check = checks[i];\n                  var getSnapshot = check.getSnapshot;\n                  var renderedValue = check.value;\n                  try {\n                    if (!objectIs(getSnapshot(), renderedValue)) {\n                      // Found an inconsistent store.\n                      return false;\n                    }\n                  } catch (error) {\n                    // If `getSnapshot` throws, return `false`. This will schedule\n                    // a re-render, and the error will be rethrown during render.\n                    return false;\n                  }\n                }\n              }\n            }\n          }\n          var child = node.child;\n          if (node.subtreeFlags & StoreConsistency && child !== null) {\n            child.return = node;\n            node = child;\n            continue;\n          }\n          if (node === finishedWork) {\n            return true;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === finishedWork) {\n              return true;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        } // Flow doesn't know this is unreachable, but eslint does\n        // eslint-disable-next-line no-unreachable\n\n        return true;\n      }\n      function markRootSuspended$1(root, suspendedLanes) {\n        // When suspending, we should always exclude lanes that were pinged or (more\n        // rarely, since we try to avoid it) updated during the render phase.\n        // TODO: Lol maybe there's a better way to factor this besides this\n        // obnoxiously named function :)\n        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n        markRootSuspended(root, suspendedLanes);\n      } // This is the entry point for synchronous tasks that don't go\n      // through Scheduler\n\n      function performSyncWorkOnRoot(root) {\n        {\n          syncNestedUpdateFlag();\n        }\n        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n          throw new Error('Should not already be working.');\n        }\n        flushPassiveEffects();\n        var lanes = getNextLanes(root, NoLanes);\n        if (!includesSomeLane(lanes, SyncLane)) {\n          // There's no remaining sync work left.\n          ensureRootIsScheduled(root, now());\n          return null;\n        }\n        var exitStatus = renderRootSync(root, lanes);\n        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n          // If something threw an error, try rendering one more time. We'll render\n          // synchronously to block concurrent data mutations, and we'll includes\n          // all pending updates are included. If it still fails after the second\n          // attempt, we'll give up and commit the resulting tree.\n          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n          }\n        }\n        if (exitStatus === RootFatalErrored) {\n          var fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n        if (exitStatus === RootDidNotComplete) {\n          throw new Error('Root did not complete. This is a bug in React.');\n        } // We now have a consistent tree. Because this is a sync render, we\n        // will commit it even if something suspended.\n\n        var finishedWork = root.current.alternate;\n        root.finishedWork = finishedWork;\n        root.finishedLanes = lanes;\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\n        // pending level.\n\n        ensureRootIsScheduled(root, now());\n        return null;\n      }\n      function flushRoot(root, lanes) {\n        if (lanes !== NoLanes) {\n          markRootEntangled(root, mergeLanes(lanes, SyncLane));\n          ensureRootIsScheduled(root, now());\n          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n            resetRenderTimer();\n            flushSyncCallbacks();\n          }\n        }\n      }\n      function deferredUpdates(fn) {\n        var previousPriority = getCurrentUpdatePriority();\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(DefaultEventPriority);\n          return fn();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition;\n        }\n      }\n      function batchedUpdates(fn, a) {\n        var prevExecutionContext = executionContext;\n        executionContext |= BatchedContext;\n        try {\n          return fn(a);\n        } finally {\n          executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n          // most batchedUpdates-like method.\n\n          if (executionContext === NoContext &&\n          // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n          !ReactCurrentActQueue$1.isBatchingLegacy) {\n            resetRenderTimer();\n            flushSyncCallbacksOnlyInLegacyMode();\n          }\n        }\n      }\n      function discreteUpdates(fn, a, b, c, d) {\n        var previousPriority = getCurrentUpdatePriority();\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(DiscreteEventPriority);\n          return fn(a, b, c, d);\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition;\n          if (executionContext === NoContext) {\n            resetRenderTimer();\n          }\n        }\n      } // Overload the definition to the two valid signatures.\n      // Warning, this opts-out of checking the function body.\n\n      // eslint-disable-next-line no-redeclare\n      function flushSync(fn) {\n        // In legacy mode, we flush pending passive effects at the beginning of the\n        // next event, not at the end of the previous one.\n        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n          flushPassiveEffects();\n        }\n        var prevExecutionContext = executionContext;\n        executionContext |= BatchedContext;\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        var previousPriority = getCurrentUpdatePriority();\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(DiscreteEventPriority);\n          if (fn) {\n            return fn();\n          } else {\n            return undefined;\n          }\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition;\n          executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n          // Note that this will happen even if batchedUpdates is higher up\n          // the stack.\n\n          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n            flushSyncCallbacks();\n          }\n        }\n      }\n      function isAlreadyRendering() {\n        // Used by the renderer to print a warning if certain APIs are called from\n        // the wrong context.\n        return (executionContext & (RenderContext | CommitContext)) !== NoContext;\n      }\n      function flushControlled(fn) {\n        var prevExecutionContext = executionContext;\n        executionContext |= BatchedContext;\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        var previousPriority = getCurrentUpdatePriority();\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(DiscreteEventPriority);\n          fn();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition;\n          executionContext = prevExecutionContext;\n          if (executionContext === NoContext) {\n            // Flush the immediate callbacks that were scheduled during this batch\n            resetRenderTimer();\n            flushSyncCallbacks();\n          }\n        }\n      }\n      function pushRenderLanes(fiber, lanes) {\n        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n      }\n      function popRenderLanes(fiber) {\n        subtreeRenderLanes = subtreeRenderLanesCursor.current;\n        pop(subtreeRenderLanesCursor, fiber);\n      }\n      function prepareFreshStack(root, lanes) {\n        root.finishedWork = null;\n        root.finishedLanes = NoLanes;\n        var timeoutHandle = root.timeoutHandle;\n        if (timeoutHandle !== noTimeout) {\n          // The root previous suspended and scheduled a timeout to commit a fallback\n          // state. Now that we have additional work, cancel the timeout.\n          root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n          cancelTimeout(timeoutHandle);\n        }\n        if (workInProgress !== null) {\n          var interruptedWork = workInProgress.return;\n          while (interruptedWork !== null) {\n            var current = interruptedWork.alternate;\n            unwindInterruptedWork(current, interruptedWork);\n            interruptedWork = interruptedWork.return;\n          }\n        }\n        workInProgressRoot = root;\n        var rootWorkInProgress = createWorkInProgress(root.current, null);\n        workInProgress = rootWorkInProgress;\n        workInProgressRootRenderLanes = subtreeRenderLanes = lanes;\n        workInProgressRootExitStatus = RootInProgress;\n        workInProgressRootFatalError = null;\n        workInProgressRootSkippedLanes = NoLanes;\n        workInProgressRootInterleavedUpdatedLanes = NoLanes;\n        workInProgressRootPingedLanes = NoLanes;\n        workInProgressRootConcurrentErrors = null;\n        workInProgressRootRecoverableErrors = null;\n        finishQueueingConcurrentUpdates();\n        {\n          ReactStrictModeWarnings.discardPendingWarnings();\n        }\n        return rootWorkInProgress;\n      }\n      function handleError(root, thrownValue) {\n        do {\n          var erroredWork = workInProgress;\n          try {\n            // Reset module-level state that was set during the render phase.\n            resetContextDependencies();\n            resetHooksAfterThrow();\n            resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n            // separate issue. Write a regression test using string refs.\n\n            ReactCurrentOwner$2.current = null;\n            if (erroredWork === null || erroredWork.return === null) {\n              // Expected to be working on a non-root fiber. This is a fatal error\n              // because there's no ancestor that can handle it; the root is\n              // supposed to capture all errors that weren't caught by an error\n              // boundary.\n              workInProgressRootExitStatus = RootFatalErrored;\n              workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n              // sibling, or the parent if there are no siblings. But since the root\n              // has no siblings nor a parent, we set it to null. Usually this is\n              // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n              // intentionally not calling those, we need set it here.\n              // TODO: Consider calling `unwindWork` to pop the contexts.\n\n              workInProgress = null;\n              return;\n            }\n            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n              // Record the time spent rendering before an error was thrown. This\n              // avoids inaccurate Profiler durations in the case of a\n              // suspended render.\n              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n            }\n            if (enableSchedulingProfiler) {\n              markComponentRenderStopped();\n              if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n                var wakeable = thrownValue;\n                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n              } else {\n                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n              }\n            }\n            throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n            completeUnitOfWork(erroredWork);\n          } catch (yetAnotherThrownValue) {\n            // Something in the return path also threw.\n            thrownValue = yetAnotherThrownValue;\n            if (workInProgress === erroredWork && erroredWork !== null) {\n              // If this boundary has already errored, then we had trouble processing\n              // the error. Bubble it to the next boundary.\n              erroredWork = erroredWork.return;\n              workInProgress = erroredWork;\n            } else {\n              erroredWork = workInProgress;\n            }\n            continue;\n          } // Return to the normal work loop.\n\n          return;\n        } while (true);\n      }\n      function pushDispatcher() {\n        var prevDispatcher = ReactCurrentDispatcher$2.current;\n        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n        if (prevDispatcher === null) {\n          // The React isomorphic package does not include a default dispatcher.\n          // Instead the first renderer will lazily attach one, in order to give\n          // nicer error messages.\n          return ContextOnlyDispatcher;\n        } else {\n          return prevDispatcher;\n        }\n      }\n      function popDispatcher(prevDispatcher) {\n        ReactCurrentDispatcher$2.current = prevDispatcher;\n      }\n      function markCommitTimeOfFallback() {\n        globalMostRecentFallbackTime = now();\n      }\n      function markSkippedUpdateLanes(lane) {\n        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n      }\n      function renderDidSuspend() {\n        if (workInProgressRootExitStatus === RootInProgress) {\n          workInProgressRootExitStatus = RootSuspended;\n        }\n      }\n      function renderDidSuspendDelayIfPossible() {\n        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n          workInProgressRootExitStatus = RootSuspendedWithDelay;\n        } // Check if there are updates that we skipped tree that might have unblocked\n        // this render.\n\n        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n          // Mark the current render as suspended so that we switch to working on\n          // the updates that were skipped. Usually we only suspend at the end of\n          // the render phase.\n          // TODO: We should probably always mark the root as suspended immediately\n          // (inside this function), since by suspending at the end of the render\n          // phase introduces a potential mistake where we suspend lanes that were\n          // pinged or updated while we were rendering.\n          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n        }\n      }\n      function renderDidError(error) {\n        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n          workInProgressRootExitStatus = RootErrored;\n        }\n        if (workInProgressRootConcurrentErrors === null) {\n          workInProgressRootConcurrentErrors = [error];\n        } else {\n          workInProgressRootConcurrentErrors.push(error);\n        }\n      } // Called during render to determine if anything has suspended.\n      // Returns false if we're not sure.\n\n      function renderHasNotSuspendedYet() {\n        // If something errored or completed, we can't really be sure,\n        // so those are false.\n        return workInProgressRootExitStatus === RootInProgress;\n      }\n      function renderRootSync(root, lanes) {\n        var prevExecutionContext = executionContext;\n        executionContext |= RenderContext;\n        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n        // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n          {\n            if (isDevToolsPresent) {\n              var memoizedUpdaters = root.memoizedUpdaters;\n              if (memoizedUpdaters.size > 0) {\n                restorePendingUpdaters(root, workInProgressRootRenderLanes);\n                memoizedUpdaters.clear();\n              } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n              // If we bailout on this work, we'll move them back (like above).\n              // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n              // That way we can keep the current update and future updates separate.\n\n              movePendingFibersToMemoized(root, lanes);\n            }\n          }\n          workInProgressTransitions = getTransitionsForLanes();\n          prepareFreshStack(root, lanes);\n        }\n        {\n          markRenderStarted(lanes);\n        }\n        do {\n          try {\n            workLoopSync();\n            break;\n          } catch (thrownValue) {\n            handleError(root, thrownValue);\n          }\n        } while (true);\n        resetContextDependencies();\n        executionContext = prevExecutionContext;\n        popDispatcher(prevDispatcher);\n        if (workInProgress !== null) {\n          // This is a sync render, so we should have finished the whole tree.\n          throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n        }\n        {\n          markRenderStopped();\n        } // Set this to null to indicate there's no in-progress render.\n\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes;\n        return workInProgressRootExitStatus;\n      } // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n      /** @noinline */\n\n      function workLoopSync() {\n        // Already timed out, so perform work without checking if we need to yield.\n        while (workInProgress !== null) {\n          performUnitOfWork(workInProgress);\n        }\n      }\n      function renderRootConcurrent(root, lanes) {\n        var prevExecutionContext = executionContext;\n        executionContext |= RenderContext;\n        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n        // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n          {\n            if (isDevToolsPresent) {\n              var memoizedUpdaters = root.memoizedUpdaters;\n              if (memoizedUpdaters.size > 0) {\n                restorePendingUpdaters(root, workInProgressRootRenderLanes);\n                memoizedUpdaters.clear();\n              } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n              // If we bailout on this work, we'll move them back (like above).\n              // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n              // That way we can keep the current update and future updates separate.\n\n              movePendingFibersToMemoized(root, lanes);\n            }\n          }\n          workInProgressTransitions = getTransitionsForLanes();\n          resetRenderTimer();\n          prepareFreshStack(root, lanes);\n        }\n        {\n          markRenderStarted(lanes);\n        }\n        do {\n          try {\n            workLoopConcurrent();\n            break;\n          } catch (thrownValue) {\n            handleError(root, thrownValue);\n          }\n        } while (true);\n        resetContextDependencies();\n        popDispatcher(prevDispatcher);\n        executionContext = prevExecutionContext;\n        if (workInProgress !== null) {\n          // Still work remaining.\n          {\n            markRenderYielded();\n          }\n          return RootInProgress;\n        } else {\n          // Completed the tree.\n          {\n            markRenderStopped();\n          } // Set this to null to indicate there's no in-progress render.\n\n          workInProgressRoot = null;\n          workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n          return workInProgressRootExitStatus;\n        }\n      }\n      /** @noinline */\n\n      function workLoopConcurrent() {\n        // Perform work until Scheduler asks us to yield\n        while (workInProgress !== null && !shouldYield()) {\n          performUnitOfWork(workInProgress);\n        }\n      }\n      function performUnitOfWork(unitOfWork) {\n        // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n        var current = unitOfWork.alternate;\n        setCurrentFiber(unitOfWork);\n        var next;\n        if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n          startProfilerTimer(unitOfWork);\n          next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n        } else {\n          next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n        }\n        resetCurrentFiber();\n        unitOfWork.memoizedProps = unitOfWork.pendingProps;\n        if (next === null) {\n          // If this doesn't spawn new work, complete the current work.\n          completeUnitOfWork(unitOfWork);\n        } else {\n          workInProgress = next;\n        }\n        ReactCurrentOwner$2.current = null;\n      }\n      function completeUnitOfWork(unitOfWork) {\n        // Attempt to complete the current unit of work, then move to the next\n        // sibling. If there are no more siblings, return to the parent fiber.\n        var completedWork = unitOfWork;\n        do {\n          // The current, flushed, state of this fiber is the alternate. Ideally\n          // nothing should rely on this, but relying on it here means that we don't\n          // need an additional field on the work in progress.\n          var current = completedWork.alternate;\n          var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n          if ((completedWork.flags & Incomplete) === NoFlags) {\n            setCurrentFiber(completedWork);\n            var next = void 0;\n            if ((completedWork.mode & ProfileMode) === NoMode) {\n              next = completeWork(current, completedWork, subtreeRenderLanes);\n            } else {\n              startProfilerTimer(completedWork);\n              next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n            }\n            resetCurrentFiber();\n            if (next !== null) {\n              // Completing this fiber spawned new work. Work on that next.\n              workInProgress = next;\n              return;\n            }\n          } else {\n            // This fiber did not complete because something threw. Pop values off\n            // the stack without entering the complete phase. If this is a boundary,\n            // capture values if possible.\n            var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n            if (_next !== null) {\n              // If completing this work spawned new work, do that next. We'll come\n              // back here again.\n              // Since we're restarting, remove anything that is not a host effect\n              // from the effect tag.\n              _next.flags &= HostEffectMask;\n              workInProgress = _next;\n              return;\n            }\n            if ((completedWork.mode & ProfileMode) !== NoMode) {\n              // Record the render duration for the fiber that errored.\n              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n              var actualDuration = completedWork.actualDuration;\n              var child = completedWork.child;\n              while (child !== null) {\n                actualDuration += child.actualDuration;\n                child = child.sibling;\n              }\n              completedWork.actualDuration = actualDuration;\n            }\n            if (returnFiber !== null) {\n              // Mark the parent fiber as incomplete and clear its subtree flags.\n              returnFiber.flags |= Incomplete;\n              returnFiber.subtreeFlags = NoFlags;\n              returnFiber.deletions = null;\n            } else {\n              // We've unwound all the way to the root.\n              workInProgressRootExitStatus = RootDidNotComplete;\n              workInProgress = null;\n              return;\n            }\n          }\n          var siblingFiber = completedWork.sibling;\n          if (siblingFiber !== null) {\n            // If there is more work to do in this returnFiber, do that next.\n            workInProgress = siblingFiber;\n            return;\n          } // Otherwise, return to the parent\n\n          completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n          workInProgress = completedWork;\n        } while (completedWork !== null); // We've reached the root.\n\n        if (workInProgressRootExitStatus === RootInProgress) {\n          workInProgressRootExitStatus = RootCompleted;\n        }\n      }\n      function commitRoot(root, recoverableErrors, transitions) {\n        // TODO: This no longer makes any sense. We already wrap the mutation and\n        // layout phases. Should be able to remove.\n        var previousUpdateLanePriority = getCurrentUpdatePriority();\n        var prevTransition = ReactCurrentBatchConfig$2.transition;\n        try {\n          ReactCurrentBatchConfig$2.transition = null;\n          setCurrentUpdatePriority(DiscreteEventPriority);\n          commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\n        } finally {\n          ReactCurrentBatchConfig$2.transition = prevTransition;\n          setCurrentUpdatePriority(previousUpdateLanePriority);\n        }\n        return null;\n      }\n      function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\n        do {\n          // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n          // means `flushPassiveEffects` will sometimes result in additional\n          // passive effects. So we need to keep flushing in a loop until there are\n          // no more pending effects.\n          // TODO: Might be better if `flushPassiveEffects` did not automatically\n          // flush synchronous work at the end, to avoid factoring hazards like this.\n          flushPassiveEffects();\n        } while (rootWithPendingPassiveEffects !== null);\n        flushRenderPhaseStrictModeWarningsInDEV();\n        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n          throw new Error('Should not already be working.');\n        }\n        var finishedWork = root.finishedWork;\n        var lanes = root.finishedLanes;\n        {\n          markCommitStarted(lanes);\n        }\n        if (finishedWork === null) {\n          {\n            markCommitStopped();\n          }\n          return null;\n        } else {\n          {\n            if (lanes === NoLanes) {\n              error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n            }\n          }\n        }\n        root.finishedWork = null;\n        root.finishedLanes = NoLanes;\n        if (finishedWork === root.current) {\n          throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n        } // commitRoot never returns a continuation; it always finishes synchronously.\n        // So we can clear these now to allow a new callback to be scheduled.\n\n        root.callbackNode = null;\n        root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n        // pending time is whatever is left on the root fiber.\n\n        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n        markRootFinished(root, remainingLanes);\n        if (root === workInProgressRoot) {\n          // We can reset these now that they are finished.\n          workInProgressRoot = null;\n          workInProgress = null;\n          workInProgressRootRenderLanes = NoLanes;\n        } // If there are pending passive effects, schedule a callback to process them.\n        // Do this as early as possible, so it is queued before anything else that\n        // might get scheduled in the commit phase. (See #16714.)\n        // TODO: Delete all other places that schedule the passive effect callback\n        // They're redundant.\n\n        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n          if (!rootDoesHavePassiveEffects) {\n            rootDoesHavePassiveEffects = true;\n            // to store it in pendingPassiveTransitions until they get processed\n            // We need to pass this through as an argument to commitRoot\n            // because workInProgressTransitions might have changed between\n            // the previous render and commit if we throttle the commit\n            // with setTimeout\n\n            pendingPassiveTransitions = transitions;\n            scheduleCallback$1(NormalPriority, function () {\n              flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n              // *after* passive effects fire to avoid freeing a cache pool that may\n              // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n              return null;\n            });\n          }\n        } // Check if there are any effects in the whole tree.\n        // TODO: This is left over from the effect list implementation, where we had\n        // to check for the existence of `firstEffect` to satisfy Flow. I think the\n        // only other reason this optimization exists is because it affects profiling.\n        // Reconsider whether this is necessary.\n\n        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n        if (subtreeHasEffects || rootHasEffect) {\n          var prevTransition = ReactCurrentBatchConfig$2.transition;\n          ReactCurrentBatchConfig$2.transition = null;\n          var previousPriority = getCurrentUpdatePriority();\n          setCurrentUpdatePriority(DiscreteEventPriority);\n          var prevExecutionContext = executionContext;\n          executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n          ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n          // of the effect list for each phase: all mutation effects come before all\n          // layout effects, and so on.\n          // The first phase a \"before mutation\" phase. We use this phase to read the\n          // state of the host tree right before we mutate it. This is where\n          // getSnapshotBeforeUpdate is called.\n\n          commitBeforeMutationEffects(root, finishedWork);\n          {\n            // Mark the current commit time to be shared by all Profilers in this\n            // batch. This enables them to be grouped later.\n            recordCommitTime();\n          }\n          commitMutationEffects(root, finishedWork, lanes);\n          resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n          // the mutation phase, so that the previous tree is still current during\n          // componentWillUnmount, but before the layout phase, so that the finished\n          // work is current during componentDidMount/Update.\n\n          root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n          {\n            markLayoutEffectsStarted(lanes);\n          }\n          commitLayoutEffects(finishedWork, root, lanes);\n          {\n            markLayoutEffectsStopped();\n          }\n          // opportunity to paint.\n\n          requestPaint();\n          executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig$2.transition = prevTransition;\n        } else {\n          // No effects.\n          root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n          // no effects.\n          // TODO: Maybe there's a better way to report this.\n\n          {\n            recordCommitTime();\n          }\n        }\n        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n        if (rootDoesHavePassiveEffects) {\n          // This commit has passive effects. Stash a reference to them. But don't\n          // schedule a callback until after flushing layout work.\n          rootDoesHavePassiveEffects = false;\n          rootWithPendingPassiveEffects = root;\n          pendingPassiveEffectsLanes = lanes;\n        } else {\n          {\n            nestedPassiveUpdateCount = 0;\n            rootWithPassiveNestedUpdates = null;\n          }\n        } // Read this again, since an effect might have updated it\n\n        remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n        // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n        // is to detect whether something might have called setState inside\n        // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n        // inside `componentDidCatch` is itself flawed — that's why we recommend\n        // `getDerivedStateFromError` instead. However, it could be improved by\n        // checking if remainingLanes includes Sync work, instead of whether there's\n        // any work remaining at all (which would also include stuff like Suspense\n        // retries or transitions). It's been like this for a while, though, so fixing\n        // it probably isn't that urgent.\n\n        if (remainingLanes === NoLanes) {\n          // If there's no remaining work, we can clear the set of already failed\n          // error boundaries.\n          legacyErrorBoundariesThatAlreadyFailed = null;\n        }\n        {\n          if (!rootDidHavePassiveEffects) {\n            commitDoubleInvokeEffectsInDEV(root.current, false);\n          }\n        }\n        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n        {\n          if (isDevToolsPresent) {\n            root.memoizedUpdaters.clear();\n          }\n        }\n        {\n          onCommitRoot$1();\n        } // Always call this before exiting `commitRoot`, to ensure that any\n        // additional work on this root is scheduled.\n\n        ensureRootIsScheduled(root, now());\n        if (recoverableErrors !== null) {\n          // There were errors during this render, but recovered from them without\n          // needing to surface it to the UI. We log them here.\n          var onRecoverableError = root.onRecoverableError;\n          for (var i = 0; i < recoverableErrors.length; i++) {\n            var recoverableError = recoverableErrors[i];\n            var componentStack = recoverableError.stack;\n            var digest = recoverableError.digest;\n            onRecoverableError(recoverableError.value, {\n              componentStack: componentStack,\n              digest: digest\n            });\n          }\n        }\n        if (hasUncaughtError) {\n          hasUncaughtError = false;\n          var error$1 = firstUncaughtError;\n          firstUncaughtError = null;\n          throw error$1;\n        } // If the passive effects are the result of a discrete render, flush them\n        // synchronously at the end of the current task so that the result is\n        // immediately observable. Otherwise, we assume that they are not\n        // order-dependent and do not need to be observed by external systems, so we\n        // can wait until after paint.\n        // TODO: We can optimize this by not scheduling the callback earlier. Since we\n        // currently schedule the callback in multiple places, will wait until those\n        // are consolidated.\n\n        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n          flushPassiveEffects();\n        } // Read this again, since a passive effect might have updated it\n\n        remainingLanes = root.pendingLanes;\n        if (includesSomeLane(remainingLanes, SyncLane)) {\n          {\n            markNestedUpdateScheduled();\n          } // Count the number of times the root synchronously re-renders without\n          // finishing. If there are too many, it indicates an infinite update loop.\n\n          if (root === rootWithNestedUpdates) {\n            nestedUpdateCount++;\n          } else {\n            nestedUpdateCount = 0;\n            rootWithNestedUpdates = root;\n          }\n        } else {\n          nestedUpdateCount = 0;\n        } // If layout work was scheduled, flush it now.\n\n        flushSyncCallbacks();\n        {\n          markCommitStopped();\n        }\n        return null;\n      }\n      function flushPassiveEffects() {\n        // Returns whether passive effects were flushed.\n        // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n        // probably just combine the two functions. I believe they were only separate\n        // in the first place because we used to wrap it with\n        // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n        // priority within React itself, so we can mutate the variable directly.\n        if (rootWithPendingPassiveEffects !== null) {\n          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n          var prevTransition = ReactCurrentBatchConfig$2.transition;\n          var previousPriority = getCurrentUpdatePriority();\n          try {\n            ReactCurrentBatchConfig$2.transition = null;\n            setCurrentUpdatePriority(priority);\n            return flushPassiveEffectsImpl();\n          } finally {\n            setCurrentUpdatePriority(previousPriority);\n            ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n          }\n        }\n        return false;\n      }\n      function enqueuePendingPassiveProfilerEffect(fiber) {\n        {\n          pendingPassiveProfilerEffects.push(fiber);\n          if (!rootDoesHavePassiveEffects) {\n            rootDoesHavePassiveEffects = true;\n            scheduleCallback$1(NormalPriority, function () {\n              flushPassiveEffects();\n              return null;\n            });\n          }\n        }\n      }\n      function flushPassiveEffectsImpl() {\n        if (rootWithPendingPassiveEffects === null) {\n          return false;\n        } // Cache and clear the transitions flag\n\n        var transitions = pendingPassiveTransitions;\n        pendingPassiveTransitions = null;\n        var root = rootWithPendingPassiveEffects;\n        var lanes = pendingPassiveEffectsLanes;\n        rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n        // Figure out why and fix it. It's not causing any known issues (probably\n        // because it's only used for profiling), but it's a refactor hazard.\n\n        pendingPassiveEffectsLanes = NoLanes;\n        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n          throw new Error('Cannot flush passive effects while already rendering.');\n        }\n        {\n          isFlushingPassiveEffects = true;\n          didScheduleUpdateDuringPassiveEffects = false;\n        }\n        {\n          markPassiveEffectsStarted(lanes);\n        }\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext;\n        commitPassiveUnmountEffects(root.current);\n        commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n        {\n          var profilerEffects = pendingPassiveProfilerEffects;\n          pendingPassiveProfilerEffects = [];\n          for (var i = 0; i < profilerEffects.length; i++) {\n            var _fiber = profilerEffects[i];\n            commitPassiveEffectDurations(root, _fiber);\n          }\n        }\n        {\n          markPassiveEffectsStopped();\n        }\n        {\n          commitDoubleInvokeEffectsInDEV(root.current, true);\n        }\n        executionContext = prevExecutionContext;\n        flushSyncCallbacks();\n        {\n          // If additional passive effects were scheduled, increment a counter. If this\n          // exceeds the limit, we'll fire a warning.\n          if (didScheduleUpdateDuringPassiveEffects) {\n            if (root === rootWithPassiveNestedUpdates) {\n              nestedPassiveUpdateCount++;\n            } else {\n              nestedPassiveUpdateCount = 0;\n              rootWithPassiveNestedUpdates = root;\n            }\n          } else {\n            nestedPassiveUpdateCount = 0;\n          }\n          isFlushingPassiveEffects = false;\n          didScheduleUpdateDuringPassiveEffects = false;\n        } // TODO: Move to commitPassiveMountEffects\n\n        onPostCommitRoot(root);\n        {\n          var stateNode = root.current.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n        return true;\n      }\n      function isAlreadyFailedLegacyErrorBoundary(instance) {\n        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n      }\n      function markLegacyErrorBoundaryAsFailed(instance) {\n        if (legacyErrorBoundariesThatAlreadyFailed === null) {\n          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n        } else {\n          legacyErrorBoundariesThatAlreadyFailed.add(instance);\n        }\n      }\n      function prepareToThrowUncaughtError(error) {\n        if (!hasUncaughtError) {\n          hasUncaughtError = true;\n          firstUncaughtError = error;\n        }\n      }\n      var onUncaughtError = prepareToThrowUncaughtError;\n      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n        var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n        var root = enqueueUpdate(rootFiber, update, SyncLane);\n        var eventTime = requestEventTime();\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n      }\n      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n        {\n          reportUncaughtErrorInDEV(error$1);\n          setIsRunningInsertionEffect(false);\n        }\n        if (sourceFiber.tag === HostRoot) {\n          // Error was thrown at the root. There is no parent, so the root\n          // itself should capture it.\n          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n          return;\n        }\n        var fiber = null;\n        {\n          fiber = nearestMountedAncestor;\n        }\n        while (fiber !== null) {\n          if (fiber.tag === HostRoot) {\n            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n            return;\n          } else if (fiber.tag === ClassComponent) {\n            var ctor = fiber.type;\n            var instance = fiber.stateNode;\n            if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n              var root = enqueueUpdate(fiber, update, SyncLane);\n              var eventTime = requestEventTime();\n              if (root !== null) {\n                markRootUpdated(root, SyncLane, eventTime);\n                ensureRootIsScheduled(root, eventTime);\n              }\n              return;\n            }\n          }\n          fiber = fiber.return;\n        }\n        {\n          // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n          // will fire for errors that are thrown by destroy functions inside deleted\n          // trees. What it should instead do is propagate the error to the parent of\n          // the deleted tree. In the meantime, do not add this warning to the\n          // allowlist; this is only for our internal use.\n          error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n        }\n      }\n      function pingSuspendedRoot(root, wakeable, pingedLanes) {\n        var pingCache = root.pingCache;\n        if (pingCache !== null) {\n          // The wakeable resolved, so we no longer need to memoize, because it will\n          // never be thrown again.\n          pingCache.delete(wakeable);\n        }\n        var eventTime = requestEventTime();\n        markRootPinged(root, pingedLanes);\n        warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n          // Received a ping at the same priority level at which we're currently\n          // rendering. We might want to restart this render. This should mirror\n          // the logic of whether or not a root suspends once it completes.\n          // TODO: If we're rendering sync either due to Sync, Batched or expired,\n          // we should probably never restart.\n          // If we're suspended with delay, or if it's a retry, we'll always suspend\n          // so we can always restart.\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n            // Restart from the root.\n            prepareFreshStack(root, NoLanes);\n          } else {\n            // Even though we can't restart right now, we might get an\n            // opportunity later. So we mark this render as having a ping.\n            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n          }\n        }\n        ensureRootIsScheduled(root, eventTime);\n      }\n      function retryTimedOutBoundary(boundaryFiber, retryLane) {\n        // The boundary fiber (a Suspense component or SuspenseList component)\n        // previously was rendered in its fallback state. One of the promises that\n        // suspended it has resolved, which means at least part of the tree was\n        // likely unblocked. Try rendering again, at a new lanes.\n        if (retryLane === NoLane) {\n          // TODO: Assign this to `suspenseState.retryLane`? to avoid\n          // unnecessary entanglement?\n          retryLane = requestRetryLane(boundaryFiber);\n        } // TODO: Special case idle priority?\n\n        var eventTime = requestEventTime();\n        var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n        if (root !== null) {\n          markRootUpdated(root, retryLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n      }\n      function retryDehydratedSuspenseBoundary(boundaryFiber) {\n        var suspenseState = boundaryFiber.memoizedState;\n        var retryLane = NoLane;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        retryTimedOutBoundary(boundaryFiber, retryLane);\n      }\n      function resolveRetryWakeable(boundaryFiber, wakeable) {\n        var retryLane = NoLane; // Default\n\n        var retryCache;\n        switch (boundaryFiber.tag) {\n          case SuspenseComponent:\n            retryCache = boundaryFiber.stateNode;\n            var suspenseState = boundaryFiber.memoizedState;\n            if (suspenseState !== null) {\n              retryLane = suspenseState.retryLane;\n            }\n            break;\n          case SuspenseListComponent:\n            retryCache = boundaryFiber.stateNode;\n            break;\n          default:\n            throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n        }\n        if (retryCache !== null) {\n          // The wakeable resolved, so we no longer need to memoize, because it will\n          // never be thrown again.\n          retryCache.delete(wakeable);\n        }\n        retryTimedOutBoundary(boundaryFiber, retryLane);\n      } // Computes the next Just Noticeable Difference (JND) boundary.\n      // The theory is that a person can't tell the difference between small differences in time.\n      // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n      // difference in the experience. However, waiting for longer might mean that we can avoid\n      // showing an intermediate loading state. The longer we have already waited, the harder it\n      // is to tell small differences in time. Therefore, the longer we've already waited,\n      // the longer we can wait additionally. At some point we have to give up though.\n      // We pick a train model where the next boundary commits at a consistent schedule.\n      // These particular numbers are vague estimates. We expect to adjust them based on research.\n\n      function jnd(timeElapsed) {\n        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n      }\n      function checkForNestedUpdates() {\n        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = null;\n          throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n        }\n        {\n          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n            nestedPassiveUpdateCount = 0;\n            rootWithPassiveNestedUpdates = null;\n            error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n          }\n        }\n      }\n      function flushRenderPhaseStrictModeWarningsInDEV() {\n        {\n          ReactStrictModeWarnings.flushLegacyContextWarning();\n          {\n            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n          }\n        }\n      }\n      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n        {\n          // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n          // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n          // Maybe not a big deal since this is DEV only behavior.\n          setCurrentFiber(fiber);\n          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n          if (hasPassiveEffects) {\n            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n          }\n          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n          if (hasPassiveEffects) {\n            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n          }\n          resetCurrentFiber();\n        }\n      }\n      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n        {\n          // We don't need to re-check StrictEffectsMode here.\n          // This function is only called if that check has already passed.\n          var current = firstChild;\n          var subtreeRoot = null;\n          while (current !== null) {\n            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n              current = current.child;\n            } else {\n              if ((current.flags & fiberFlags) !== NoFlags) {\n                invokeEffectFn(current);\n              }\n              if (current.sibling !== null) {\n                current = current.sibling;\n              } else {\n                current = subtreeRoot = current.return;\n              }\n            }\n          }\n        }\n      }\n      var didWarnStateUpdateForNotYetMountedComponent = null;\n      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n        {\n          if ((executionContext & RenderContext) !== NoContext) {\n            // We let the other warning about render phase updates deal with this one.\n            return;\n          }\n          if (!(fiber.mode & ConcurrentMode)) {\n            return;\n          }\n          var tag = fiber.tag;\n          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n            // Only warn for user-defined components, not internal ones like Suspense.\n            return;\n          } // We show the whole stack but dedupe on the top component's name because\n          // the problematic code almost always lies inside that component.\n\n          var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n          if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n              return;\n            }\n            didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n          } else {\n            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n          }\n          var previousFiber = current;\n          try {\n            setCurrentFiber(fiber);\n            error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n      var beginWork$1;\n      {\n        var dummyFiber = null;\n        beginWork$1 = function (current, unitOfWork, lanes) {\n          // If a component throws an error, we replay it again in a synchronously\n          // dispatched event, so that the debugger will treat it as an uncaught\n          // error See ReactErrorUtils for more information.\n          // Before entering the begin phase, copy the work-in-progress onto a dummy\n          // fiber. If beginWork throws, we'll use this to reset the state.\n          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n          try {\n            return beginWork(current, unitOfWork, lanes);\n          } catch (originalError) {\n            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n              // Don't replay promises.\n              // Don't replay errors if we are hydrating and have already suspended or handled an error\n              throw originalError;\n            } // Keep this code in sync with handleError; any changes here must have\n            // corresponding changes there.\n\n            resetContextDependencies();\n            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n            // same fiber again.\n            // Unwind the failed stack frame\n\n            unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n            if (unitOfWork.mode & ProfileMode) {\n              // Reset the profiler timer.\n              startProfilerTimer(unitOfWork);\n            } // Run beginWork again.\n\n            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n            if (hasCaughtError()) {\n              var replayError = clearCaughtError();\n              if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n                // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n                originalError._suppressLogging = true;\n              }\n            } // We always throw the original error in case the second render pass is not idempotent.\n            // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n            throw originalError;\n          }\n        };\n      }\n      var didWarnAboutUpdateInRender = false;\n      var didWarnAboutUpdateInRenderForAnotherComponent;\n      {\n        didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n      }\n      function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n        {\n          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n            switch (fiber.tag) {\n              case FunctionComponent:\n              case ForwardRef:\n              case SimpleMemoComponent:\n                {\n                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n                  var dedupeKey = renderingComponentName;\n                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                    var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n                    error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n                  }\n                  break;\n                }\n              case ClassComponent:\n                {\n                  if (!didWarnAboutUpdateInRender) {\n                    error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n                    didWarnAboutUpdateInRender = true;\n                  }\n                  break;\n                }\n            }\n          }\n        }\n      }\n      function restorePendingUpdaters(root, lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n            memoizedUpdaters.forEach(function (schedulingFiber) {\n              addFiberToLanesMap(root, schedulingFiber, lanes);\n            }); // This function intentionally does not clear memoized updaters.\n            // Those may still be relevant to the current commit\n            // and a future one (e.g. Suspense).\n          }\n        }\n      }\n      var fakeActCallbackNode = {};\n      function scheduleCallback$1(priorityLevel, callback) {\n        {\n          // If we're currently inside an `act` scope, bypass Scheduler and push to\n          // the `act` queue instead.\n          var actQueue = ReactCurrentActQueue$1.current;\n          if (actQueue !== null) {\n            actQueue.push(callback);\n            return fakeActCallbackNode;\n          } else {\n            return scheduleCallback(priorityLevel, callback);\n          }\n        }\n      }\n      function cancelCallback$1(callbackNode) {\n        if (callbackNode === fakeActCallbackNode) {\n          return;\n        } // In production, always call Scheduler. This function will be stripped out.\n\n        return cancelCallback(callbackNode);\n      }\n      function shouldForceFlushFallbacksInDEV() {\n        // Never force flush in production. This function should get stripped out.\n        return ReactCurrentActQueue$1.current !== null;\n      }\n      function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n        {\n          if (fiber.mode & ConcurrentMode) {\n            if (!isConcurrentActEnvironment()) {\n              // Not in an act environment. No need to warn.\n              return;\n            }\n          } else {\n            // Legacy mode has additional cases where we suppress a warning.\n            if (!isLegacyActEnvironment()) {\n              // Not in an act environment. No need to warn.\n              return;\n            }\n            if (executionContext !== NoContext) {\n              // Legacy mode doesn't warn if the update is batched, i.e.\n              // batchedUpdates or flushSync.\n              return;\n            }\n            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n              // For backwards compatibility with pre-hooks code, legacy mode only\n              // warns for updates that originate from a hook.\n              return;\n            }\n          }\n          if (ReactCurrentActQueue$1.current === null) {\n            var previousFiber = current;\n            try {\n              setCurrentFiber(fiber);\n              error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n            } finally {\n              if (previousFiber) {\n                setCurrentFiber(fiber);\n              } else {\n                resetCurrentFiber();\n              }\n            }\n          }\n        }\n      }\n      function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n        {\n          if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n            error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n          }\n        }\n      }\n      function setIsRunningInsertionEffect(isRunning) {\n        {\n          isRunningInsertionEffect = isRunning;\n        }\n      }\n\n      /* eslint-disable react-internal/prod-error-codes */\n      var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\n      var failedBoundaries = null;\n      var setRefreshHandler = function (handler) {\n        {\n          resolveFamily = handler;\n        }\n      };\n      function resolveFunctionForHotReloading(type) {\n        {\n          if (resolveFamily === null) {\n            // Hot reloading is disabled.\n            return type;\n          }\n          var family = resolveFamily(type);\n          if (family === undefined) {\n            return type;\n          } // Use the latest known implementation.\n\n          return family.current;\n        }\n      }\n      function resolveClassForHotReloading(type) {\n        // No implementation differences.\n        return resolveFunctionForHotReloading(type);\n      }\n      function resolveForwardRefForHotReloading(type) {\n        {\n          if (resolveFamily === null) {\n            // Hot reloading is disabled.\n            return type;\n          }\n          var family = resolveFamily(type);\n          if (family === undefined) {\n            // Check if we're dealing with a real forwardRef. Don't want to crash early.\n            if (type !== null && type !== undefined && typeof type.render === 'function') {\n              // ForwardRef is special because its resolved .type is an object,\n              // but it's possible that we only have its inner render function in the map.\n              // If that inner render function is different, we'll build a new forwardRef type.\n              var currentRender = resolveFunctionForHotReloading(type.render);\n              if (type.render !== currentRender) {\n                var syntheticType = {\n                  $$typeof: REACT_FORWARD_REF_TYPE,\n                  render: currentRender\n                };\n                if (type.displayName !== undefined) {\n                  syntheticType.displayName = type.displayName;\n                }\n                return syntheticType;\n              }\n            }\n            return type;\n          } // Use the latest known implementation.\n\n          return family.current;\n        }\n      }\n      function isCompatibleFamilyForHotReloading(fiber, element) {\n        {\n          if (resolveFamily === null) {\n            // Hot reloading is disabled.\n            return false;\n          }\n          var prevType = fiber.elementType;\n          var nextType = element.type; // If we got here, we know types aren't === equal.\n\n          var needsCompareFamilies = false;\n          var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n          switch (fiber.tag) {\n            case ClassComponent:\n              {\n                if (typeof nextType === 'function') {\n                  needsCompareFamilies = true;\n                }\n                break;\n              }\n            case FunctionComponent:\n              {\n                if (typeof nextType === 'function') {\n                  needsCompareFamilies = true;\n                } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                  // We don't know the inner type yet.\n                  // We're going to assume that the lazy inner type is stable,\n                  // and so it is sufficient to avoid reconciling it away.\n                  // We're not going to unwrap or actually use the new lazy type.\n                  needsCompareFamilies = true;\n                }\n                break;\n              }\n            case ForwardRef:\n              {\n                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                  needsCompareFamilies = true;\n                } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                  needsCompareFamilies = true;\n                }\n                break;\n              }\n            case MemoComponent:\n            case SimpleMemoComponent:\n              {\n                if ($$typeofNextType === REACT_MEMO_TYPE) {\n                  // TODO: if it was but can no longer be simple,\n                  // we shouldn't set this.\n                  needsCompareFamilies = true;\n                } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                  needsCompareFamilies = true;\n                }\n                break;\n              }\n            default:\n              return false;\n          } // Check if both types have a family and it's the same one.\n\n          if (needsCompareFamilies) {\n            // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n            // This means both of them need to be registered to preserve state.\n            // If we unwrapped and compared the inner types for wrappers instead,\n            // then we would risk falsely saying two separate memo(Foo)\n            // calls are equivalent because they wrap the same Foo function.\n            var prevFamily = resolveFamily(prevType);\n            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n      function markFailedErrorBoundaryForHotReloading(fiber) {\n        {\n          if (resolveFamily === null) {\n            // Hot reloading is disabled.\n            return;\n          }\n          if (typeof WeakSet !== 'function') {\n            return;\n          }\n          if (failedBoundaries === null) {\n            failedBoundaries = new WeakSet();\n          }\n          failedBoundaries.add(fiber);\n        }\n      }\n      var scheduleRefresh = function (root, update) {\n        {\n          if (resolveFamily === null) {\n            // Hot reloading is disabled.\n            return;\n          }\n          var staleFamilies = update.staleFamilies,\n            updatedFamilies = update.updatedFamilies;\n          flushPassiveEffects();\n          flushSync(function () {\n            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n          });\n        }\n      };\n      var scheduleRoot = function (root, element) {\n        {\n          if (root.context !== emptyContextObject) {\n            // Super edge case: root has a legacy _renderSubtree context\n            // but we don't know the parentComponent so we can't pass it.\n            // Just ignore. We'll delete this with _renderSubtree code path later.\n            return;\n          }\n          flushPassiveEffects();\n          flushSync(function () {\n            updateContainer(element, root, null, null);\n          });\n        }\n      };\n      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n        {\n          var alternate = fiber.alternate,\n            child = fiber.child,\n            sibling = fiber.sibling,\n            tag = fiber.tag,\n            type = fiber.type;\n          var candidateType = null;\n          switch (tag) {\n            case FunctionComponent:\n            case SimpleMemoComponent:\n            case ClassComponent:\n              candidateType = type;\n              break;\n            case ForwardRef:\n              candidateType = type.render;\n              break;\n          }\n          if (resolveFamily === null) {\n            throw new Error('Expected resolveFamily to be set during hot reload.');\n          }\n          var needsRender = false;\n          var needsRemount = false;\n          if (candidateType !== null) {\n            var family = resolveFamily(candidateType);\n            if (family !== undefined) {\n              if (staleFamilies.has(family)) {\n                needsRemount = true;\n              } else if (updatedFamilies.has(family)) {\n                if (tag === ClassComponent) {\n                  needsRemount = true;\n                } else {\n                  needsRender = true;\n                }\n              }\n            }\n          }\n          if (failedBoundaries !== null) {\n            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n              needsRemount = true;\n            }\n          }\n          if (needsRemount) {\n            fiber._debugNeedsRemount = true;\n          }\n          if (needsRemount || needsRender) {\n            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n            if (_root !== null) {\n              scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\n            }\n          }\n          if (child !== null && !needsRemount) {\n            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n          }\n          if (sibling !== null) {\n            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n          }\n        }\n      }\n      var findHostInstancesForRefresh = function (root, families) {\n        {\n          var hostInstances = new Set();\n          var types = new Set(families.map(function (family) {\n            return family.current;\n          }));\n          findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n          return hostInstances;\n        }\n      };\n      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n        {\n          var child = fiber.child,\n            sibling = fiber.sibling,\n            tag = fiber.tag,\n            type = fiber.type;\n          var candidateType = null;\n          switch (tag) {\n            case FunctionComponent:\n            case SimpleMemoComponent:\n            case ClassComponent:\n              candidateType = type;\n              break;\n            case ForwardRef:\n              candidateType = type.render;\n              break;\n          }\n          var didMatch = false;\n          if (candidateType !== null) {\n            if (types.has(candidateType)) {\n              didMatch = true;\n            }\n          }\n          if (didMatch) {\n            // We have a match. This only drills down to the closest host components.\n            // There's no need to search deeper because for the purpose of giving\n            // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n            findHostInstancesForFiberShallowly(fiber, hostInstances);\n          } else {\n            // If there's no match, maybe there will be one further down in the child tree.\n            if (child !== null) {\n              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n            }\n          }\n          if (sibling !== null) {\n            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n          }\n        }\n      }\n      function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n        {\n          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n          if (foundHostInstances) {\n            return;\n          } // If we didn't find any host children, fallback to closest host parent.\n\n          var node = fiber;\n          while (true) {\n            switch (node.tag) {\n              case HostComponent:\n                hostInstances.add(node.stateNode);\n                return;\n              case HostPortal:\n                hostInstances.add(node.stateNode.containerInfo);\n                return;\n              case HostRoot:\n                hostInstances.add(node.stateNode.containerInfo);\n                return;\n            }\n            if (node.return === null) {\n              throw new Error('Expected to reach root first.');\n            }\n            node = node.return;\n          }\n        }\n      }\n      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n        {\n          var node = fiber;\n          var foundHostInstances = false;\n          while (true) {\n            if (node.tag === HostComponent) {\n              // We got a match.\n              foundHostInstances = true;\n              hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n            } else if (node.child !== null) {\n              node.child.return = node;\n              node = node.child;\n              continue;\n            }\n            if (node === fiber) {\n              return foundHostInstances;\n            }\n            while (node.sibling === null) {\n              if (node.return === null || node.return === fiber) {\n                return foundHostInstances;\n              }\n              node = node.return;\n            }\n            node.sibling.return = node.return;\n            node = node.sibling;\n          }\n        }\n        return false;\n      }\n      var hasBadMapPolyfill;\n      {\n        hasBadMapPolyfill = false;\n        try {\n          var nonExtensibleObject = Object.preventExtensions({});\n          /* eslint-disable no-new */\n\n          new Map([[nonExtensibleObject, null]]);\n          new Set([nonExtensibleObject]);\n          /* eslint-enable no-new */\n        } catch (e) {\n          // TODO: Consider warning about bad polyfills\n          hasBadMapPolyfill = true;\n        }\n      }\n      function FiberNode(tag, pendingProps, key, mode) {\n        // Instance\n        this.tag = tag;\n        this.key = key;\n        this.elementType = null;\n        this.type = null;\n        this.stateNode = null; // Fiber\n\n        this.return = null;\n        this.child = null;\n        this.sibling = null;\n        this.index = 0;\n        this.ref = null;\n        this.pendingProps = pendingProps;\n        this.memoizedProps = null;\n        this.updateQueue = null;\n        this.memoizedState = null;\n        this.dependencies = null;\n        this.mode = mode; // Effects\n\n        this.flags = NoFlags;\n        this.subtreeFlags = NoFlags;\n        this.deletions = null;\n        this.lanes = NoLanes;\n        this.childLanes = NoLanes;\n        this.alternate = null;\n        {\n          // Note: The following is done to avoid a v8 performance cliff.\n          //\n          // Initializing the fields below to smis and later updating them with\n          // double values will cause Fibers to end up having separate shapes.\n          // This behavior/bug has something to do with Object.preventExtension().\n          // Fortunately this only impacts DEV builds.\n          // Unfortunately it makes React unusably slow for some applications.\n          // To work around this, initialize the fields below with doubles.\n          //\n          // Learn more about this here:\n          // https://github.com/facebook/react/issues/14365\n          // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n          this.actualDuration = Number.NaN;\n          this.actualStartTime = Number.NaN;\n          this.selfBaseDuration = Number.NaN;\n          this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n          // This won't trigger the performance cliff mentioned above,\n          // and it simplifies other profiler code (including DevTools).\n\n          this.actualDuration = 0;\n          this.actualStartTime = -1;\n          this.selfBaseDuration = 0;\n          this.treeBaseDuration = 0;\n        }\n        {\n          // This isn't directly used but is handy for debugging internals:\n          this._debugSource = null;\n          this._debugOwner = null;\n          this._debugNeedsRemount = false;\n          this._debugHookTypes = null;\n          if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n            Object.preventExtensions(this);\n          }\n        }\n      } // This is a constructor function, rather than a POJO constructor, still\n      // please ensure we do the following:\n      // 1) Nobody should add any instance methods on this. Instance methods can be\n      //    more difficult to predict when they get optimized and they are almost\n      //    never inlined properly in static compilers.\n      // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n      //    always know when it is a fiber.\n      // 3) We might want to experiment with using numeric keys since they are easier\n      //    to optimize in a non-JIT environment.\n      // 4) We can easily go from a constructor to a createFiber object literal if that\n      //    is faster.\n      // 5) It should be easy to port this to a C struct and keep a C implementation\n      //    compatible.\n\n      var createFiber = function (tag, pendingProps, key, mode) {\n        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n        return new FiberNode(tag, pendingProps, key, mode);\n      };\n      function shouldConstruct$1(Component) {\n        var prototype = Component.prototype;\n        return !!(prototype && prototype.isReactComponent);\n      }\n      function isSimpleFunctionComponent(type) {\n        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n      }\n      function resolveLazyComponentTag(Component) {\n        if (typeof Component === 'function') {\n          return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n        } else if (Component !== undefined && Component !== null) {\n          var $$typeof = Component.$$typeof;\n          if ($$typeof === REACT_FORWARD_REF_TYPE) {\n            return ForwardRef;\n          }\n          if ($$typeof === REACT_MEMO_TYPE) {\n            return MemoComponent;\n          }\n        }\n        return IndeterminateComponent;\n      } // This is used to create an alternate fiber to do work on.\n\n      function createWorkInProgress(current, pendingProps) {\n        var workInProgress = current.alternate;\n        if (workInProgress === null) {\n          // We use a double buffering pooling technique because we know that we'll\n          // only ever need at most two versions of a tree. We pool the \"other\" unused\n          // node that we're free to reuse. This is lazily created to avoid allocating\n          // extra objects for things that are never updated. It also allow us to\n          // reclaim the extra memory if needed.\n          workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n          workInProgress.elementType = current.elementType;\n          workInProgress.type = current.type;\n          workInProgress.stateNode = current.stateNode;\n          {\n            // DEV-only fields\n            workInProgress._debugSource = current._debugSource;\n            workInProgress._debugOwner = current._debugOwner;\n            workInProgress._debugHookTypes = current._debugHookTypes;\n          }\n          workInProgress.alternate = current;\n          current.alternate = workInProgress;\n        } else {\n          workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n          workInProgress.type = current.type; // We already have an alternate.\n          // Reset the effect tag.\n\n          workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n          workInProgress.subtreeFlags = NoFlags;\n          workInProgress.deletions = null;\n          {\n            // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n            // This prevents time from endlessly accumulating in new commits.\n            // This has the downside of resetting values for different priority renders,\n            // But works for yielding (the common case) and should support resuming.\n            workInProgress.actualDuration = 0;\n            workInProgress.actualStartTime = -1;\n          }\n        } // Reset all effects except static ones.\n        // Static effects are not specific to a render.\n\n        workInProgress.flags = current.flags & StaticMask;\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n        // it cannot be shared with the current fiber.\n\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies = currentDependencies === null ? null : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext\n        }; // These will be overridden during the parent's reconciliation\n\n        workInProgress.sibling = current.sibling;\n        workInProgress.index = current.index;\n        workInProgress.ref = current.ref;\n        {\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n        {\n          workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n          switch (workInProgress.tag) {\n            case IndeterminateComponent:\n            case FunctionComponent:\n            case SimpleMemoComponent:\n              workInProgress.type = resolveFunctionForHotReloading(current.type);\n              break;\n            case ClassComponent:\n              workInProgress.type = resolveClassForHotReloading(current.type);\n              break;\n            case ForwardRef:\n              workInProgress.type = resolveForwardRefForHotReloading(current.type);\n              break;\n          }\n        }\n        return workInProgress;\n      } // Used to reuse a Fiber for a second pass.\n\n      function resetWorkInProgress(workInProgress, renderLanes) {\n        // This resets the Fiber to what createFiber or createWorkInProgress would\n        // have set the values to before during the first pass. Ideally this wouldn't\n        // be necessary but unfortunately many code paths reads from the workInProgress\n        // when they should be reading from current and writing to workInProgress.\n        // We assume pendingProps, index, key, ref, return are still untouched to\n        // avoid doing another reconciliation.\n        // Reset the effect flags but keep any Placement tags, since that's something\n        // that child fiber is setting, not the reconciliation.\n        workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n        var current = workInProgress.alternate;\n        if (current === null) {\n          // Reset to createFiber's initial values.\n          workInProgress.childLanes = NoLanes;\n          workInProgress.lanes = renderLanes;\n          workInProgress.child = null;\n          workInProgress.subtreeFlags = NoFlags;\n          workInProgress.memoizedProps = null;\n          workInProgress.memoizedState = null;\n          workInProgress.updateQueue = null;\n          workInProgress.dependencies = null;\n          workInProgress.stateNode = null;\n          {\n            // Note: We don't reset the actualTime counts. It's useful to accumulate\n            // actual time across multiple render passes.\n            workInProgress.selfBaseDuration = 0;\n            workInProgress.treeBaseDuration = 0;\n          }\n        } else {\n          // Reset to the cloned values that createWorkInProgress would've.\n          workInProgress.childLanes = current.childLanes;\n          workInProgress.lanes = current.lanes;\n          workInProgress.child = current.child;\n          workInProgress.subtreeFlags = NoFlags;\n          workInProgress.deletions = null;\n          workInProgress.memoizedProps = current.memoizedProps;\n          workInProgress.memoizedState = current.memoizedState;\n          workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n          workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n          // it cannot be shared with the current fiber.\n\n          var currentDependencies = current.dependencies;\n          workInProgress.dependencies = currentDependencies === null ? null : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext\n          };\n          {\n            // Note: We don't reset the actualTime counts. It's useful to accumulate\n            // actual time across multiple render passes.\n            workInProgress.selfBaseDuration = current.selfBaseDuration;\n            workInProgress.treeBaseDuration = current.treeBaseDuration;\n          }\n        }\n        return workInProgress;\n      }\n      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n        var mode;\n        if (tag === ConcurrentRoot) {\n          mode = ConcurrentMode;\n          if (isStrictMode === true) {\n            mode |= StrictLegacyMode;\n            {\n              mode |= StrictEffectsMode;\n            }\n          }\n        } else {\n          mode = NoMode;\n        }\n        if (isDevToolsPresent) {\n          // Always collect profile timings when DevTools are present.\n          // This enables DevTools to start capturing timing at any point–\n          // Without some nodes in the tree having empty base times.\n          mode |= ProfileMode;\n        }\n        return createFiber(HostRoot, null, null, mode);\n      }\n      function createFiberFromTypeAndProps(type,\n      // React$ElementType\n      key, pendingProps, owner, mode, lanes) {\n        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n        var resolvedType = type;\n        if (typeof type === 'function') {\n          if (shouldConstruct$1(type)) {\n            fiberTag = ClassComponent;\n            {\n              resolvedType = resolveClassForHotReloading(resolvedType);\n            }\n          } else {\n            {\n              resolvedType = resolveFunctionForHotReloading(resolvedType);\n            }\n          }\n        } else if (typeof type === 'string') {\n          fiberTag = HostComponent;\n        } else {\n          getTag: switch (type) {\n            case REACT_FRAGMENT_TYPE:\n              return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n            case REACT_STRICT_MODE_TYPE:\n              fiberTag = Mode;\n              mode |= StrictLegacyMode;\n              if ((mode & ConcurrentMode) !== NoMode) {\n                // Strict effects should never run on legacy roots\n                mode |= StrictEffectsMode;\n              }\n              break;\n            case REACT_PROFILER_TYPE:\n              return createFiberFromProfiler(pendingProps, mode, lanes, key);\n            case REACT_SUSPENSE_TYPE:\n              return createFiberFromSuspense(pendingProps, mode, lanes, key);\n            case REACT_SUSPENSE_LIST_TYPE:\n              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n            case REACT_OFFSCREEN_TYPE:\n              return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n            case REACT_LEGACY_HIDDEN_TYPE:\n\n            // eslint-disable-next-line no-fallthrough\n\n            case REACT_SCOPE_TYPE:\n\n            // eslint-disable-next-line no-fallthrough\n\n            case REACT_CACHE_TYPE:\n\n            // eslint-disable-next-line no-fallthrough\n\n            case REACT_TRACING_MARKER_TYPE:\n\n            // eslint-disable-next-line no-fallthrough\n\n            case REACT_DEBUG_TRACING_MODE_TYPE:\n\n            // eslint-disable-next-line no-fallthrough\n\n            default:\n              {\n                if (typeof type === 'object' && type !== null) {\n                  switch (type.$$typeof) {\n                    case REACT_PROVIDER_TYPE:\n                      fiberTag = ContextProvider;\n                      break getTag;\n                    case REACT_CONTEXT_TYPE:\n                      // This is a consumer\n                      fiberTag = ContextConsumer;\n                      break getTag;\n                    case REACT_FORWARD_REF_TYPE:\n                      fiberTag = ForwardRef;\n                      {\n                        resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                      }\n                      break getTag;\n                    case REACT_MEMO_TYPE:\n                      fiberTag = MemoComponent;\n                      break getTag;\n                    case REACT_LAZY_TYPE:\n                      fiberTag = LazyComponent;\n                      resolvedType = null;\n                      break getTag;\n                  }\n                }\n                var info = '';\n                {\n                  if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n                    info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n                  }\n                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n                  if (ownerName) {\n                    info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n                  }\n                }\n                throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n              }\n          }\n        }\n        var fiber = createFiber(fiberTag, pendingProps, key, mode);\n        fiber.elementType = type;\n        fiber.type = resolvedType;\n        fiber.lanes = lanes;\n        {\n          fiber._debugOwner = owner;\n        }\n        return fiber;\n      }\n      function createFiberFromElement(element, mode, lanes) {\n        var owner = null;\n        {\n          owner = element._owner;\n        }\n        var type = element.type;\n        var key = element.key;\n        var pendingProps = element.props;\n        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n        {\n          fiber._debugSource = element._source;\n          fiber._debugOwner = element._owner;\n        }\n        return fiber;\n      }\n      function createFiberFromFragment(elements, mode, lanes, key) {\n        var fiber = createFiber(Fragment, elements, key, mode);\n        fiber.lanes = lanes;\n        return fiber;\n      }\n      function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n        {\n          if (typeof pendingProps.id !== 'string') {\n            error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n          }\n        }\n        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n        fiber.elementType = REACT_PROFILER_TYPE;\n        fiber.lanes = lanes;\n        {\n          fiber.stateNode = {\n            effectDuration: 0,\n            passiveEffectDuration: 0\n          };\n        }\n        return fiber;\n      }\n      function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n        fiber.elementType = REACT_SUSPENSE_TYPE;\n        fiber.lanes = lanes;\n        return fiber;\n      }\n      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n        fiber.lanes = lanes;\n        return fiber;\n      }\n      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n        fiber.elementType = REACT_OFFSCREEN_TYPE;\n        fiber.lanes = lanes;\n        var primaryChildInstance = {\n          isHidden: false\n        };\n        fiber.stateNode = primaryChildInstance;\n        return fiber;\n      }\n      function createFiberFromText(content, mode, lanes) {\n        var fiber = createFiber(HostText, content, null, mode);\n        fiber.lanes = lanes;\n        return fiber;\n      }\n      function createFiberFromHostInstanceForDeletion() {\n        var fiber = createFiber(HostComponent, null, null, NoMode);\n        fiber.elementType = 'DELETED';\n        return fiber;\n      }\n      function createFiberFromDehydratedFragment(dehydratedNode) {\n        var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n        fiber.stateNode = dehydratedNode;\n        return fiber;\n      }\n      function createFiberFromPortal(portal, mode, lanes) {\n        var pendingProps = portal.children !== null ? portal.children : [];\n        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n        fiber.lanes = lanes;\n        fiber.stateNode = {\n          containerInfo: portal.containerInfo,\n          pendingChildren: null,\n          // Used by persistent updates\n          implementation: portal.implementation\n        };\n        return fiber;\n      } // Used for stashing WIP properties to replay failed work in DEV.\n\n      function assignFiberPropertiesInDEV(target, source) {\n        if (target === null) {\n          // This Fiber's initial properties will always be overwritten.\n          // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n          target = createFiber(IndeterminateComponent, null, null, NoMode);\n        } // This is intentionally written as a list of all properties.\n        // We tried to use Object.assign() instead but this is called in\n        // the hottest path, and Object.assign() was too slow:\n        // https://github.com/facebook/react/issues/12502\n        // This code is DEV-only so size is not a concern.\n\n        target.tag = source.tag;\n        target.key = source.key;\n        target.elementType = source.elementType;\n        target.type = source.type;\n        target.stateNode = source.stateNode;\n        target.return = source.return;\n        target.child = source.child;\n        target.sibling = source.sibling;\n        target.index = source.index;\n        target.ref = source.ref;\n        target.pendingProps = source.pendingProps;\n        target.memoizedProps = source.memoizedProps;\n        target.updateQueue = source.updateQueue;\n        target.memoizedState = source.memoizedState;\n        target.dependencies = source.dependencies;\n        target.mode = source.mode;\n        target.flags = source.flags;\n        target.subtreeFlags = source.subtreeFlags;\n        target.deletions = source.deletions;\n        target.lanes = source.lanes;\n        target.childLanes = source.childLanes;\n        target.alternate = source.alternate;\n        {\n          target.actualDuration = source.actualDuration;\n          target.actualStartTime = source.actualStartTime;\n          target.selfBaseDuration = source.selfBaseDuration;\n          target.treeBaseDuration = source.treeBaseDuration;\n        }\n        target._debugSource = source._debugSource;\n        target._debugOwner = source._debugOwner;\n        target._debugNeedsRemount = source._debugNeedsRemount;\n        target._debugHookTypes = source._debugHookTypes;\n        return target;\n      }\n      function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n        this.tag = tag;\n        this.containerInfo = containerInfo;\n        this.pendingChildren = null;\n        this.current = null;\n        this.pingCache = null;\n        this.finishedWork = null;\n        this.timeoutHandle = noTimeout;\n        this.context = null;\n        this.pendingContext = null;\n        this.callbackNode = null;\n        this.callbackPriority = NoLane;\n        this.eventTimes = createLaneMap(NoLanes);\n        this.expirationTimes = createLaneMap(NoTimestamp);\n        this.pendingLanes = NoLanes;\n        this.suspendedLanes = NoLanes;\n        this.pingedLanes = NoLanes;\n        this.expiredLanes = NoLanes;\n        this.mutableReadLanes = NoLanes;\n        this.finishedLanes = NoLanes;\n        this.entangledLanes = NoLanes;\n        this.entanglements = createLaneMap(NoLanes);\n        this.identifierPrefix = identifierPrefix;\n        this.onRecoverableError = onRecoverableError;\n        if (supportsHydration) {\n          this.mutableSourceEagerHydrationData = null;\n        }\n        {\n          this.effectDuration = 0;\n          this.passiveEffectDuration = 0;\n        }\n        {\n          this.memoizedUpdaters = new Set();\n          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n          for (var _i = 0; _i < TotalLanes; _i++) {\n            pendingUpdatersLaneMap.push(new Set());\n          }\n        }\n        {\n          switch (tag) {\n            case ConcurrentRoot:\n              this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n              break;\n            case LegacyRoot:\n              this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n              break;\n          }\n        }\n      }\n      function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride,\n      // TODO: We have several of these arguments that are conceptually part of the\n      // host config, but because they are passed in at runtime, we have to thread\n      // them through the root constructor. Perhaps we should put them all into a\n      // single type, like a DynamicHostConfig that is defined by the renderer.\n      identifierPrefix, onRecoverableError, transitionCallbacks) {\n        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n        // stateNode is any.\n\n        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n        root.current = uninitializedFiber;\n        uninitializedFiber.stateNode = root;\n        {\n          var _initialState = {\n            element: initialChildren,\n            isDehydrated: hydrate,\n            cache: null,\n            // not enabled yet\n            transitions: null,\n            pendingSuspenseBoundaries: null\n          };\n          uninitializedFiber.memoizedState = _initialState;\n        }\n        initializeUpdateQueue(uninitializedFiber);\n        return root;\n      }\n      var ReactVersion = '18.2.0';\n      function createPortal(children, containerInfo,\n      // TODO: figure out the API for cross-renderer implementation.\n      implementation) {\n        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        {\n          checkKeyStringCoercion(key);\n        }\n        return {\n          // This tag allow us to uniquely identify this as a React Portal\n          $$typeof: REACT_PORTAL_TYPE,\n          key: key == null ? null : '' + key,\n          children: children,\n          containerInfo: containerInfo,\n          implementation: implementation\n        };\n      }\n      var didWarnAboutNestedUpdates;\n      var didWarnAboutFindNodeInStrictMode;\n      {\n        didWarnAboutNestedUpdates = false;\n        didWarnAboutFindNodeInStrictMode = {};\n      }\n      function getContextForSubtree(parentComponent) {\n        if (!parentComponent) {\n          return emptyContextObject;\n        }\n        var fiber = get(parentComponent);\n        var parentContext = findCurrentUnmaskedContext(fiber);\n        if (fiber.tag === ClassComponent) {\n          var Component = fiber.type;\n          if (isContextProvider(Component)) {\n            return processChildContext(fiber, Component, parentContext);\n          }\n        }\n        return parentContext;\n      }\n      function findHostInstance(component) {\n        var fiber = get(component);\n        if (fiber === undefined) {\n          if (typeof component.render === 'function') {\n            throw new Error('Unable to find node on an unmounted component.');\n          } else {\n            var keys = Object.keys(component).join(',');\n            throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n          }\n        }\n        var hostFiber = findCurrentHostFiber(fiber);\n        if (hostFiber === null) {\n          return null;\n        }\n        return hostFiber.stateNode;\n      }\n      function findHostInstanceWithWarning(component, methodName) {\n        {\n          var fiber = get(component);\n          if (fiber === undefined) {\n            if (typeof component.render === 'function') {\n              throw new Error('Unable to find node on an unmounted component.');\n            } else {\n              var keys = Object.keys(component).join(',');\n              throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n            }\n          }\n          var hostFiber = findCurrentHostFiber(fiber);\n          if (hostFiber === null) {\n            return null;\n          }\n          if (hostFiber.mode & StrictLegacyMode) {\n            var componentName = getComponentNameFromFiber(fiber) || 'Component';\n            if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n              didWarnAboutFindNodeInStrictMode[componentName] = true;\n              var previousFiber = current;\n              try {\n                setCurrentFiber(hostFiber);\n                if (fiber.mode & StrictLegacyMode) {\n                  error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n                } else {\n                  error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n                }\n              } finally {\n                // Ideally this should reset to previous but this shouldn't be called in\n                // render and there's another warning for that anyway.\n                if (previousFiber) {\n                  setCurrentFiber(previousFiber);\n                } else {\n                  resetCurrentFiber();\n                }\n              }\n            }\n          }\n          return hostFiber.stateNode;\n        }\n      }\n      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n        var hydrate = false;\n        var initialChildren = null;\n        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n      }\n      function createHydrationContainer(initialChildren,\n      // TODO: Remove `callback` when we delete legacy mode.\n      callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n        var hydrate = true;\n        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n        root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n        // a regular update because the initial render must match was was rendered\n        // on the server.\n        // NOTE: This update intentionally doesn't have a payload. We're only using\n        // the update to schedule work on the root fiber (and, for legacy roots, to\n        // enqueue the callback if one is provided).\n\n        var current = root.current;\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(current);\n        var update = createUpdate(eventTime, lane);\n        update.callback = callback !== undefined && callback !== null ? callback : null;\n        enqueueUpdate(current, update, lane);\n        scheduleInitialHydrationOnRoot(root, lane, eventTime);\n        return root;\n      }\n      function updateContainer(element, container, parentComponent, callback) {\n        {\n          onScheduleRoot(container, element);\n        }\n        var current$1 = container.current;\n        var eventTime = requestEventTime();\n        var lane = requestUpdateLane(current$1);\n        {\n          markRenderScheduled(lane);\n        }\n        var context = getContextForSubtree(parentComponent);\n        if (container.context === null) {\n          container.context = context;\n        } else {\n          container.pendingContext = context;\n        }\n        {\n          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n            didWarnAboutNestedUpdates = true;\n            error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n          }\n        }\n        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n        // being called \"element\".\n\n        update.payload = {\n          element: element\n        };\n        callback = callback === undefined ? null : callback;\n        if (callback !== null) {\n          {\n            if (typeof callback !== 'function') {\n              error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n            }\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(current$1, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, current$1, lane, eventTime);\n          entangleTransitions(root, current$1, lane);\n        }\n        return lane;\n      }\n      function getPublicRootInstance(container) {\n        var containerFiber = container.current;\n        if (!containerFiber.child) {\n          return null;\n        }\n        switch (containerFiber.child.tag) {\n          case HostComponent:\n            return getPublicInstance(containerFiber.child.stateNode);\n          default:\n            return containerFiber.child.stateNode;\n        }\n      }\n      function attemptSynchronousHydration(fiber) {\n        switch (fiber.tag) {\n          case HostRoot:\n            {\n              var root = fiber.stateNode;\n              if (isRootDehydrated(root)) {\n                // Flush the first scheduled \"update\".\n                var lanes = getHighestPriorityPendingLanes(root);\n                flushRoot(root, lanes);\n              }\n              break;\n            }\n          case SuspenseComponent:\n            {\n              flushSync(function () {\n                var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n                if (root !== null) {\n                  var eventTime = requestEventTime();\n                  scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n                }\n              }); // If we're still blocked after this, we need to increase\n              // the priority of any promises resolving within this\n              // boundary so that they next attempt also has higher pri.\n\n              var retryLane = SyncLane;\n              markRetryLaneIfNotHydrated(fiber, retryLane);\n              break;\n            }\n        }\n      }\n      function markRetryLaneImpl(fiber, retryLane) {\n        var suspenseState = fiber.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n        }\n      } // Increases the priority of thenables when they resolve within this boundary.\n\n      function markRetryLaneIfNotHydrated(fiber, retryLane) {\n        markRetryLaneImpl(fiber, retryLane);\n        var alternate = fiber.alternate;\n        if (alternate) {\n          markRetryLaneImpl(alternate, retryLane);\n        }\n      }\n      function attemptDiscreteHydration(fiber) {\n        if (fiber.tag !== SuspenseComponent) {\n          // We ignore HostRoots here because we can't increase\n          // their priority and they should not suspend on I/O,\n          // since you have to wrap anything that might suspend in\n          // Suspense.\n          return;\n        }\n        var lane = SyncLane;\n        var root = enqueueConcurrentRenderForLane(fiber, lane);\n        if (root !== null) {\n          var eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n        }\n        markRetryLaneIfNotHydrated(fiber, lane);\n      }\n      function attemptContinuousHydration(fiber) {\n        if (fiber.tag !== SuspenseComponent) {\n          // We ignore HostRoots here because we can't increase\n          // their priority and they should not suspend on I/O,\n          // since you have to wrap anything that might suspend in\n          // Suspense.\n          return;\n        }\n        var lane = SelectiveHydrationLane;\n        var root = enqueueConcurrentRenderForLane(fiber, lane);\n        if (root !== null) {\n          var eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n        }\n        markRetryLaneIfNotHydrated(fiber, lane);\n      }\n      function attemptHydrationAtCurrentPriority(fiber) {\n        if (fiber.tag !== SuspenseComponent) {\n          // We ignore HostRoots here because we can't increase\n          // their priority other than synchronously flush it.\n          return;\n        }\n        var lane = requestUpdateLane(fiber);\n        var root = enqueueConcurrentRenderForLane(fiber, lane);\n        if (root !== null) {\n          var eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n        }\n        markRetryLaneIfNotHydrated(fiber, lane);\n      }\n      function findHostInstanceWithNoPortals(fiber) {\n        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n        if (hostFiber === null) {\n          return null;\n        }\n        return hostFiber.stateNode;\n      }\n      var shouldErrorImpl = function (fiber) {\n        return null;\n      };\n      function shouldError(fiber) {\n        return shouldErrorImpl(fiber);\n      }\n      var shouldSuspendImpl = function (fiber) {\n        return false;\n      };\n      function shouldSuspend(fiber) {\n        return shouldSuspendImpl(fiber);\n      }\n      var overrideHookState = null;\n      var overrideHookStateDeletePath = null;\n      var overrideHookStateRenamePath = null;\n      var overrideProps = null;\n      var overridePropsDeletePath = null;\n      var overridePropsRenamePath = null;\n      var scheduleUpdate = null;\n      var setErrorHandler = null;\n      var setSuspenseHandler = null;\n      {\n        var copyWithDeleteImpl = function (obj, path, index) {\n          var key = path[index];\n          var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n          if (index + 1 === path.length) {\n            if (isArray(updated)) {\n              updated.splice(key, 1);\n            } else {\n              delete updated[key];\n            }\n            return updated;\n          } // $FlowFixMe number or string is fine here\n\n          updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n          return updated;\n        };\n        var copyWithDelete = function (obj, path) {\n          return copyWithDeleteImpl(obj, path, 0);\n        };\n        var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n          var oldKey = oldPath[index];\n          var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n          if (index + 1 === oldPath.length) {\n            var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n            updated[newKey] = updated[oldKey];\n            if (isArray(updated)) {\n              updated.splice(oldKey, 1);\n            } else {\n              delete updated[oldKey];\n            }\n          } else {\n            // $FlowFixMe number or string is fine here\n            updated[oldKey] = copyWithRenameImpl(\n            // $FlowFixMe number or string is fine here\n            obj[oldKey], oldPath, newPath, index + 1);\n          }\n          return updated;\n        };\n        var copyWithRename = function (obj, oldPath, newPath) {\n          if (oldPath.length !== newPath.length) {\n            warn('copyWithRename() expects paths of the same length');\n            return;\n          } else {\n            for (var i = 0; i < newPath.length - 1; i++) {\n              if (oldPath[i] !== newPath[i]) {\n                warn('copyWithRename() expects paths to be the same except for the deepest key');\n                return;\n              }\n            }\n          }\n          return copyWithRenameImpl(obj, oldPath, newPath, 0);\n        };\n        var copyWithSetImpl = function (obj, path, index, value) {\n          if (index >= path.length) {\n            return value;\n          }\n          var key = path[index];\n          var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n          updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n          return updated;\n        };\n        var copyWithSet = function (obj, path, value) {\n          return copyWithSetImpl(obj, path, 0, value);\n        };\n        var findHook = function (fiber, id) {\n          // For now, the \"id\" of stateful hooks is just the stateful hook index.\n          // This may change in the future with e.g. nested hooks.\n          var currentHook = fiber.memoizedState;\n          while (currentHook !== null && id > 0) {\n            currentHook = currentHook.next;\n            id--;\n          }\n          return currentHook;\n        }; // Support DevTools editable values for useState and useReducer.\n\n        overrideHookState = function (fiber, id, path, value) {\n          var hook = findHook(fiber, id);\n          if (hook !== null) {\n            var newState = copyWithSet(hook.memoizedState, path, value);\n            hook.memoizedState = newState;\n            hook.baseState = newState; // We aren't actually adding an update to the queue,\n            // because there is no update we can add for useReducer hooks that won't trigger an error.\n            // (There's no appropriate action type for DevTools overrides.)\n            // As a result though, React will see the scheduled update as a noop and bailout.\n            // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n            fiber.memoizedProps = assign({}, fiber.memoizedProps);\n            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n            if (root !== null) {\n              scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n            }\n          }\n        };\n        overrideHookStateDeletePath = function (fiber, id, path) {\n          var hook = findHook(fiber, id);\n          if (hook !== null) {\n            var newState = copyWithDelete(hook.memoizedState, path);\n            hook.memoizedState = newState;\n            hook.baseState = newState; // We aren't actually adding an update to the queue,\n            // because there is no update we can add for useReducer hooks that won't trigger an error.\n            // (There's no appropriate action type for DevTools overrides.)\n            // As a result though, React will see the scheduled update as a noop and bailout.\n            // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n            fiber.memoizedProps = assign({}, fiber.memoizedProps);\n            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n            if (root !== null) {\n              scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n            }\n          }\n        };\n        overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n          var hook = findHook(fiber, id);\n          if (hook !== null) {\n            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n            hook.memoizedState = newState;\n            hook.baseState = newState; // We aren't actually adding an update to the queue,\n            // because there is no update we can add for useReducer hooks that won't trigger an error.\n            // (There's no appropriate action type for DevTools overrides.)\n            // As a result though, React will see the scheduled update as a noop and bailout.\n            // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n            fiber.memoizedProps = assign({}, fiber.memoizedProps);\n            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n            if (root !== null) {\n              scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n            }\n          }\n        }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n        overrideProps = function (fiber, path, value) {\n          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n          if (fiber.alternate) {\n            fiber.alternate.pendingProps = fiber.pendingProps;\n          }\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n          }\n        };\n        overridePropsDeletePath = function (fiber, path) {\n          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n          if (fiber.alternate) {\n            fiber.alternate.pendingProps = fiber.pendingProps;\n          }\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n          }\n        };\n        overridePropsRenamePath = function (fiber, oldPath, newPath) {\n          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n          if (fiber.alternate) {\n            fiber.alternate.pendingProps = fiber.pendingProps;\n          }\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n          }\n        };\n        scheduleUpdate = function (fiber) {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n          }\n        };\n        setErrorHandler = function (newShouldErrorImpl) {\n          shouldErrorImpl = newShouldErrorImpl;\n        };\n        setSuspenseHandler = function (newShouldSuspendImpl) {\n          shouldSuspendImpl = newShouldSuspendImpl;\n        };\n      }\n      function findHostInstanceByFiber(fiber) {\n        var hostFiber = findCurrentHostFiber(fiber);\n        if (hostFiber === null) {\n          return null;\n        }\n        return hostFiber.stateNode;\n      }\n      function emptyFindFiberByHostInstance(instance) {\n        return null;\n      }\n      function getCurrentFiberForDevTools() {\n        return current;\n      }\n      function injectIntoDevTools(devToolsConfig) {\n        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        return injectInternals({\n          bundleType: devToolsConfig.bundleType,\n          version: devToolsConfig.version,\n          rendererPackageName: devToolsConfig.rendererPackageName,\n          rendererConfig: devToolsConfig.rendererConfig,\n          overrideHookState: overrideHookState,\n          overrideHookStateDeletePath: overrideHookStateDeletePath,\n          overrideHookStateRenamePath: overrideHookStateRenamePath,\n          overrideProps: overrideProps,\n          overridePropsDeletePath: overridePropsDeletePath,\n          overridePropsRenamePath: overridePropsRenamePath,\n          setErrorHandler: setErrorHandler,\n          setSuspenseHandler: setSuspenseHandler,\n          scheduleUpdate: scheduleUpdate,\n          currentDispatcherRef: ReactCurrentDispatcher,\n          findHostInstanceByFiber: findHostInstanceByFiber,\n          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n          // React Refresh\n          findHostInstancesForRefresh: findHostInstancesForRefresh,\n          scheduleRefresh: scheduleRefresh,\n          scheduleRoot: scheduleRoot,\n          setRefreshHandler: setRefreshHandler,\n          // Enables DevTools to append owner stacks to error messages in DEV mode.\n          getCurrentFiber: getCurrentFiberForDevTools,\n          // Enables DevTools to detect reconciler version rather than renderer version\n          // which may not match for third party renderers.\n          reconcilerVersion: ReactVersion\n        });\n      }\n      exports.attemptContinuousHydration = attemptContinuousHydration;\n      exports.attemptDiscreteHydration = attemptDiscreteHydration;\n      exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\n      exports.attemptSynchronousHydration = attemptSynchronousHydration;\n      exports.batchedUpdates = batchedUpdates;\n      exports.createComponentSelector = createComponentSelector;\n      exports.createContainer = createContainer;\n      exports.createHasPseudoClassSelector = createHasPseudoClassSelector;\n      exports.createHydrationContainer = createHydrationContainer;\n      exports.createPortal = createPortal;\n      exports.createRoleSelector = createRoleSelector;\n      exports.createTestNameSelector = createTestNameSelector;\n      exports.createTextSelector = createTextSelector;\n      exports.deferredUpdates = deferredUpdates;\n      exports.discreteUpdates = discreteUpdates;\n      exports.findAllNodes = findAllNodes;\n      exports.findBoundingRects = findBoundingRects;\n      exports.findHostInstance = findHostInstance;\n      exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\n      exports.findHostInstanceWithWarning = findHostInstanceWithWarning;\n      exports.flushControlled = flushControlled;\n      exports.flushPassiveEffects = flushPassiveEffects;\n      exports.flushSync = flushSync;\n      exports.focusWithin = focusWithin;\n      exports.getCurrentUpdatePriority = getCurrentUpdatePriority;\n      exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\n      exports.getPublicRootInstance = getPublicRootInstance;\n      exports.injectIntoDevTools = injectIntoDevTools;\n      exports.isAlreadyRendering = isAlreadyRendering;\n      exports.observeVisibleRects = observeVisibleRects;\n      exports.registerMutableSourceForHydration = registerMutableSourceForHydration;\n      exports.runWithPriority = runWithPriority;\n      exports.shouldError = shouldError;\n      exports.shouldSuspend = shouldSuspend;\n      exports.updateContainer = updateContainer;\n      return exports;\n    };\n  }\n  return reactReconciler_developmentExports;\n}\n(function (module) {\n  {\n    module.exports = requireReactReconciler_development();\n  }\n})(reactReconciler);\nvar Reconciler = /*@__PURE__*/getDefaultExportFromCjs(reactReconcilerExports);\nvar name = \"root\";\nvar workspaces = [\"packages/*\"];\nvar scripts = {\n  build: \"nx run-many --target=build --all --parallel\",\n  \"build:force\": \"nx run-many --target=build --all --parallel --skip-nx-cache\",\n  \"build:docs\": \"nx run @pixi/react-docs:deploy\",\n  clean: \"rimraf packages/*/dist packages/*/build\",\n  lint: \"eslint .\",\n  prepare: \"husky install\",\n  prerelease: \"./scripts/checkReleaseBranch.mjs && npm run lint && npm run test:force && npm run build:force\",\n  release: \"lerna publish --no-private\",\n  test: \"nx run-many --target=test --all --parallel\",\n  \"test:force\": \"nx run-many --target=test --all --parallel --skip-nx-cache\",\n  \"test:ci\": \"nx run-many --target=test:ci --all --parallel\",\n  \"test:ci:force\": \"nx run-many --target=test:ci --all --parallel --skip-nx-cache\",\n  \"test:types\": \"nx run-many --target=test:types --all --parallel\",\n  \"test:types:force\": \"nx run-many --target=test:types --all --parallel --skip-nx-cache\"\n};\nvar husky = {\n  hooks: {\n    \"pre-commit\": \"lint-staged\"\n  }\n};\nvar resolutions = {\n  \"get-pkg-repo\": \"4.1.1\",\n  \"hosted-git-info\": \"^2.1.4\"\n};\nvar dependencies = {\n  \"@babel/runtime\": \"^7.14.8\",\n  \"@pixi/app\": \"^7.1.1\",\n  \"@pixi/constants\": \"^7.1.1\",\n  \"@pixi/core\": \"^7.1.1\",\n  \"@pixi/display\": \"^7.1.1\",\n  \"@pixi/extensions\": \"^7.1.1\",\n  \"@pixi/graphics\": \"^7.1.1\",\n  \"@pixi/math\": \"^7.1.1\",\n  \"@pixi/mesh\": \"^7.1.1\",\n  \"@pixi/mesh-extras\": \"^7.1.1\",\n  \"@pixi/particle-container\": \"^7.1.1\",\n  \"@pixi/sprite\": \"^7.1.1\",\n  \"@pixi/sprite-animated\": \"^7.1.1\",\n  \"@pixi/sprite-tiling\": \"^7.1.1\",\n  \"@pixi/text\": \"^7.1.1\",\n  \"@pixi/text-bitmap\": \"^7.1.1\",\n  \"@pixi/ticker\": \"^7.1.1\",\n  \"@react-spring/animated\": \"^9.6.1\",\n  \"@react-spring/types\": \"^9.6.1\",\n  react: \"^18.0.0\",\n  \"react-dom\": \"^18.0.0\",\n  \"react-reconciler\": \"0.29.0\",\n  \"react-spring\": \"^9.6.1\"\n};\nvar devDependencies = {\n  \"@babel/cli\": \"^7.20.7\",\n  \"@babel/core\": \"^7.20.7\",\n  \"@babel/eslint-parser\": \"^7.19.1\",\n  \"@babel/plugin-transform-runtime\": \"^7.19.6\",\n  \"@babel/preset-env\": \"^7.20.2\",\n  \"@babel/preset-react\": \"^7.18.6\",\n  \"@nrwl/nx-cloud\": \"latest\",\n  \"@pixi/eslint-config\": \"^4.0.1\",\n  \"@rollup/plugin-alias\": \"^4.0.2\",\n  \"@rollup/plugin-babel\": \"^6.0.3\",\n  \"@rollup/plugin-commonjs\": \"^24.0.0\",\n  \"@rollup/plugin-json\": \"^6.0.0\",\n  \"@rollup/plugin-node-resolve\": \"^15.0.1\",\n  \"@rollup/plugin-replace\": \"^5.0.2\",\n  \"@rollup/plugin-terser\": \"^0.2.1\",\n  \"@rollup/plugin-typescript\": \"^10.0.1\",\n  \"@types/jest\": \"^29.2.4\",\n  \"@types/react\": \"17.0.15\",\n  \"@types/react-dom\": \"17.0.9\",\n  \"@types/react-reconciler\": \"0.28.2\",\n  \"babel-jest\": \"^29.3.1\",\n  \"babel-plugin-module-resolver\": \"4.1.0\",\n  \"cross-env\": \"^7.0.3\",\n  eslint: \"^8.29.0\",\n  \"eslint-plugin-react\": \"^7.31.11\",\n  husky: \"^8.0.2\",\n  jest: \"^29.3.1\",\n  \"jest-environment-jsdom\": \"^29.3.1\",\n  \"jest-extended\": \"^3.2.0\",\n  \"jest-watch-typeahead\": \"^2.2.1\",\n  lerna: \"^6.0.3\",\n  \"lint-staged\": \"^13.1.0\",\n  nx: \"15.3.0\",\n  rimraf: \"^3.0.2\",\n  rollup: \"^3.7.0\",\n  \"rollup-plugin-filesize\": \"^9.1.2\",\n  \"rollup-plugin-visualizer\": \"^5.9.0\",\n  \"ts-jest\": \"^29.0.3\",\n  \"ts-node\": \"^10.9.1\",\n  typescript: \"^4.9.4\"\n};\nvar pkg = {\n  name: name,\n  \"private\": true,\n  workspaces: workspaces,\n  scripts: scripts,\n  husky: husky,\n  \"lint-staged\": {\n    \"*.{ts,js,mjs}\": [\"eslint --cache --fix\"]\n  },\n  resolutions: resolutions,\n  dependencies: dependencies,\n  devDependencies: devDependencies\n};\nvar performanceNowExports = {};\nvar performanceNow = {\n  get exports() {\n    return performanceNowExports;\n  },\n  set exports(v) {\n    performanceNowExports = v;\n  }\n};\n\n// Generated by CoffeeScript 1.12.2\n(function () {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n  if (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n    performanceNow.exports = function () {\n      return performance.now();\n    };\n  } else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n    performanceNow.exports = function () {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function () {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    performanceNow.exports = function () {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    performanceNow.exports = function () {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n}).call(commonjsGlobal);\nvar constantsExports = {};\nvar constants = {\n  get exports() {\n    return constantsExports;\n  },\n  set exports(v) {\n    constantsExports = v;\n  }\n};\nvar reactReconcilerConstants_development = {};\n\n/**\n * @license React\n * react-reconciler-constants.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReactReconcilerConstants_development;\nfunction requireReactReconcilerConstants_development() {\n  if (hasRequiredReactReconcilerConstants_development) return reactReconcilerConstants_development;\n  hasRequiredReactReconcilerConstants_development = 1;\n  {\n    (function () {\n      var SyncLane = /*                        */\n      1;\n      var InputContinuousLane = /*             */\n      4;\n      var DefaultLane = /*                     */\n      16;\n      var IdleLane = /*                        */\n      536870912;\n      var DiscreteEventPriority = SyncLane;\n      var ContinuousEventPriority = InputContinuousLane;\n      var DefaultEventPriority = DefaultLane;\n      var IdleEventPriority = IdleLane;\n      var LegacyRoot = 0;\n      var ConcurrentRoot = 1;\n      reactReconcilerConstants_development.ConcurrentRoot = ConcurrentRoot;\n      reactReconcilerConstants_development.ContinuousEventPriority = ContinuousEventPriority;\n      reactReconcilerConstants_development.DefaultEventPriority = DefaultEventPriority;\n      reactReconcilerConstants_development.DiscreteEventPriority = DiscreteEventPriority;\n      reactReconcilerConstants_development.IdleEventPriority = IdleEventPriority;\n      reactReconcilerConstants_development.LegacyRoot = LegacyRoot;\n    })();\n  }\n  return reactReconcilerConstants_development;\n}\n(function (module) {\n  {\n    module.exports = requireReactReconcilerConstants_development();\n  }\n})(constants);\nvar NO_CONTEXT = {};\nfunction getEventPriority() {\n  var _window, _window$event;\n  if (typeof window === 'undefined') {\n    return constantsExports.DefaultEventPriority;\n  }\n  var name = (_window = window) === null || _window === void 0 ? void 0 : (_window$event = _window.event) === null || _window$event === void 0 ? void 0 : _window$event.type;\n  switch (name) {\n    case 'click':\n    case 'contextmenu':\n    case 'dblclick':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointerup':\n      return constantsExports.DiscreteEventPriority;\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerenter':\n    case 'pointerleave':\n    case 'wheel':\n      return constantsExports.ContinuousEventPriority;\n    default:\n      return constantsExports.DefaultEventPriority;\n  }\n}\nfunction _appendChild(parent, child) {\n  if (parent.addChild) {\n    parent.addChild(child);\n    if (typeof child.didMount === 'function') {\n      child.didMount(child, parent);\n    }\n  }\n}\nfunction willUnmountRecursive(child, parent) {\n  var _child$willUnmount, _child$config, _child$children;\n  (_child$willUnmount = child.willUnmount) === null || _child$willUnmount === void 0 ? void 0 : _child$willUnmount.call(child, child, parent);\n\n  // ensure willUnmount is called on children, but don't actually destroy them\n  if (((_child$config = child.config) === null || _child$config === void 0 ? void 0 : _child$config.destroyChildren) !== false && (_child$children = child.children) !== null && _child$children !== void 0 && _child$children.length) {\n    _toConsumableArray(child.children).forEach(function (c) {\n      // TODO: should we call willUnmount anyway irrespective of whether destroyChildren is true?\n      willUnmountRecursive(c, child);\n    });\n  }\n}\nfunction _removeChild(parent, child) {\n  var _child$config2;\n  // call willUnmount on child and iteratively on its descendants\n  willUnmountRecursive(child, parent);\n  parent.removeChild(child);\n  var _ref = (_child$config2 = child.config) !== null && _child$config2 !== void 0 ? _child$config2 : {},\n    _ref$destroy = _ref.destroy,\n    destroy = _ref$destroy === void 0 ? true : _ref$destroy,\n    _ref$destroyChildren = _ref.destroyChildren,\n    destroyChildren = _ref$destroyChildren === void 0 ? true : _ref$destroyChildren,\n    _ref$destroyTexture = _ref.destroyTexture,\n    destroyTexture = _ref$destroyTexture === void 0 ? false : _ref$destroyTexture,\n    _ref$destroyBaseTextu = _ref.destroyBaseTexture,\n    destroyBaseTexture = _ref$destroyBaseTextu === void 0 ? false : _ref$destroyBaseTextu;\n  if (destroy) {\n    // defer to PIXI to actually destroy children\n    child.destroy({\n      children: destroyChildren,\n      texture: destroyTexture,\n      baseTexture: destroyBaseTexture\n    });\n  }\n}\nfunction insertBefore(parent, child, beforeChild) {\n  var _parent$__reactpixi, _parent$__reactpixi$r;\n  invariant(child !== beforeChild, 'Cannot insert node before itself');\n  var childExists = parent.children.indexOf(child) !== -1;\n  if (childExists) {\n    parent.removeChild(child);\n  }\n  var index = parent.getChildIndex(beforeChild);\n  parent.addChildAt(child, index);\n  (_parent$__reactpixi = parent.__reactpixi) === null || _parent$__reactpixi === void 0 ? void 0 : (_parent$__reactpixi$r = _parent$__reactpixi.root) === null || _parent$__reactpixi$r === void 0 ? void 0 : _parent$__reactpixi$r.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n    detail: 'insertBefore'\n  });\n}\n\n// get diff between 2 objects\n// https://github.com/facebook/react/blob/97e2911/packages/react-dom/src/client/ReactDOMFiberComponent.js#L546\nfunction diffProperties(pixiElement, type, lastProps, nextProps) {\n  var updatePayload = null;\n  for (var propKey in lastProps) {\n    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] === null) {\n      continue;\n    }\n    if (propKey === CHILDREN) ;else {\n      // For all other deleted properties we add it to the queue. We use\n      // the whitelist in the commit phase instead.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n      updatePayload.push(propKey, null);\n    }\n  }\n  for (var _propKey in nextProps) {\n    var nextProp = nextProps[_propKey];\n    var lastProp = lastProps !== null ? lastProps[_propKey] : undefined;\n    if (!nextProps.hasOwnProperty(_propKey) || nextProp === lastProp || nextProp === null && lastProp === null) {\n      continue;\n    }\n    if (_propKey === CHILDREN) ;else {\n      // For any other property we always add it to the queue and then we\n      // filter it out using the whitelist during the commit.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n      updatePayload.push(_propKey, nextProp);\n    }\n  }\n  return updatePayload;\n}\nvar prepareChanged = null;\nvar HostConfig = {\n  getRootHostContext: function getRootHostContext() {\n    return NO_CONTEXT;\n  },\n  getChildHostContext: function getChildHostContext(parentHostContext) {\n    return parentHostContext;\n  },\n  getChildHostContextForEventComponent: function getChildHostContextForEventComponent(parentHostContext) {\n    return parentHostContext;\n  },\n  getPublicInstance: function getPublicInstance(instance) {\n    return instance;\n  },\n  // TODO: Implement a proper version of getCurrentEventPriority\n  getCurrentEventPriority: function getCurrentEventPriority() {\n    return getEventPriority();\n  },\n  prepareForCommit: function prepareForCommit() {\n    // noop\n    return null;\n  },\n  resetAfterCommit: function resetAfterCommit() {\n    // noop\n  },\n  createInstance: createElement,\n  hideInstance: function hideInstance(instance) {\n    instance.visible = false;\n  },\n  unhideInstance: function unhideInstance(instance, props) {\n    var visible = props !== undefined && props !== null && props.hasOwnProperty('visible') ? props.visible : true;\n    instance.visible = visible;\n  },\n  finalizeInitialChildren: function finalizeInitialChildren(wordElement, type, props) {\n    return false;\n  },\n  prepareUpdate: function prepareUpdate(pixiElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n    prepareChanged = diffProperties(pixiElement, type, oldProps, newProps);\n    return prepareChanged;\n  },\n  shouldSetTextContent: function shouldSetTextContent(type, props) {\n    return false;\n  },\n  shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {\n    var isAlphaVisible = typeof props.alpha === 'undefined' || props.alpha > 0;\n    var isRenderable = typeof props.renderable === 'undefined' || props.renderable === true;\n    var isVisible = typeof props.visible === 'undefined' || props.visible === true;\n    return !(isAlphaVisible && isRenderable && isVisible);\n  },\n  createTextInstance: function createTextInstance(text, rootContainerInstance, internalInstanceHandler) {\n    invariant(false, \"Error trying to add text node \\\"\".concat(text, \"\\\"\"), 'text strings as children of a Pixi component is not supported. ' + 'To add some text, use &lt;Text text={string} /&gt;');\n  },\n  unhideTextInstance: function unhideTextInstance(textInstance, text) {\n    // noop\n  },\n  mountEventComponent: function mountEventComponent() {\n    // noop\n  },\n  updateEventComponent: function updateEventComponent() {\n    // noop\n  },\n  handleEventTarget: function handleEventTarget() {\n    // noop\n  },\n  scheduleTimeout: setTimeout,\n  cancelTimeout: clearTimeout,\n  noTimeout: -1,\n  warnsIfNotActing: false,\n  now: performanceNowExports,\n  isPrimaryRenderer: false,\n  supportsMutation: true,\n  supportsPersistence: false,\n  supportsHydration: false,\n  supportsMicrotasks: true,\n  scheduleMicrotask: queueMicrotask,\n  /**\n  * -------------------------------------------\n  * Mutation\n  * -------------------------------------------\n  */\n  appendInitialChild: function appendInitialChild() {\n    var _args$0$__reactpixi, _args$0$__reactpixi$r;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var res = _appendChild.apply(null, args);\n    (_args$0$__reactpixi = args[0].__reactpixi) === null || _args$0$__reactpixi === void 0 ? void 0 : (_args$0$__reactpixi$r = _args$0$__reactpixi.root) === null || _args$0$__reactpixi$r === void 0 ? void 0 : _args$0$__reactpixi$r.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'appendInitialChild'\n    });\n    return res;\n  },\n  appendChild: function appendChild() {\n    var _args$0$__reactpixi2, _args$0$__reactpixi2$;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    var res = _appendChild.apply(null, args);\n    (_args$0$__reactpixi2 = args[0].__reactpixi) === null || _args$0$__reactpixi2 === void 0 ? void 0 : (_args$0$__reactpixi2$ = _args$0$__reactpixi2.root) === null || _args$0$__reactpixi2$ === void 0 ? void 0 : _args$0$__reactpixi2$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'appendChild'\n    });\n    return res;\n  },\n  appendChildToContainer: function appendChildToContainer() {\n    var _args$0$__reactpixi3, _args$0$__reactpixi3$;\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    var res = _appendChild.apply(null, args);\n    (_args$0$__reactpixi3 = args[0].__reactpixi) === null || _args$0$__reactpixi3 === void 0 ? void 0 : (_args$0$__reactpixi3$ = _args$0$__reactpixi3.root) === null || _args$0$__reactpixi3$ === void 0 ? void 0 : _args$0$__reactpixi3$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'appendChildToContainer'\n    });\n    return res;\n  },\n  removeChild: function removeChild() {\n    var _args$0$__reactpixi4, _args$0$__reactpixi4$;\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    var res = _removeChild.apply(null, args);\n    (_args$0$__reactpixi4 = args[0].__reactpixi) === null || _args$0$__reactpixi4 === void 0 ? void 0 : (_args$0$__reactpixi4$ = _args$0$__reactpixi4.root) === null || _args$0$__reactpixi4$ === void 0 ? void 0 : _args$0$__reactpixi4$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'removeChild'\n    });\n    return res;\n  },\n  removeChildFromContainer: function removeChildFromContainer() {\n    var _args$0$__reactpixi5, _args$0$__reactpixi5$;\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    var res = _removeChild.apply(null, args);\n    (_args$0$__reactpixi5 = args[0].__reactpixi) === null || _args$0$__reactpixi5 === void 0 ? void 0 : (_args$0$__reactpixi5$ = _args$0$__reactpixi5.root) === null || _args$0$__reactpixi5$ === void 0 ? void 0 : _args$0$__reactpixi5$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'removeChildFromContainer'\n    });\n    return res;\n  },\n  insertBefore: insertBefore,\n  insertInContainerBefore: function insertInContainerBefore() {\n    var _args$0$__reactpixi6, _args$0$__reactpixi6$;\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    var res = insertBefore.apply(null, args);\n    (_args$0$__reactpixi6 = args[0].__reactpixi) === null || _args$0$__reactpixi6 === void 0 ? void 0 : (_args$0$__reactpixi6$ = _args$0$__reactpixi6.root) === null || _args$0$__reactpixi6$ === void 0 ? void 0 : _args$0$__reactpixi6$.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n      detail: 'insertInContainerBefore'\n    });\n    return res;\n  },\n  commitUpdate: function commitUpdate(instance, updatePayload, type, oldProps, newProps) {\n    var applyProps = instance && instance.applyProps;\n    if (typeof applyProps !== 'function') {\n      applyProps = applyDefaultProps;\n    }\n    var changed = applyProps(instance, oldProps, newProps);\n    if (changed || prepareChanged) {\n      var _instance$__reactpixi, _instance$__reactpixi2;\n      (_instance$__reactpixi = instance.__reactpixi) === null || _instance$__reactpixi === void 0 ? void 0 : (_instance$__reactpixi2 = _instance$__reactpixi.root) === null || _instance$__reactpixi2 === void 0 ? void 0 : _instance$__reactpixi2.emit(\"__REACT_PIXI_REQUEST_RENDER__\", {\n        detail: 'commitUpdate'\n      });\n    }\n  },\n  commitMount: function commitMount(instance, updatePayload, type, oldProps, newProps) {\n    // noop\n  },\n  commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {\n    // noop\n  },\n  resetTextContent: function resetTextContent(pixiElement) {\n    // noop\n  },\n  clearContainer: function clearContainer(container) {\n    // TODO implement this\n  },\n  getFundamentalComponentInstance: function getFundamentalComponentInstance(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  mountFundamentalComponent: function mountFundamentalComponent(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  shouldUpdateFundamentalComponent: function shouldUpdateFundamentalComponent(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  unmountFundamentalComponent: function unmountFundamentalComponent(fundamentalInstance) {\n    throw new Error('Not yet implemented.');\n  },\n  getInstanceFromNode: function getInstanceFromNode(node) {\n    throw new Error('Not yet implemented.');\n  },\n  isOpaqueHydratingObject: function isOpaqueHydratingObject(value) {\n    throw new Error('Not yet implemented');\n  },\n  makeOpaqueHydratingObject: function makeOpaqueHydratingObject(attemptToReadValue) {\n    throw new Error('Not yet implemented.');\n  },\n  makeClientIdInDEV: function makeClientIdInDEV(warnOnAccessInDEV) {\n    throw new Error('Not yet implemented');\n  },\n  beforeActiveInstanceBlur: function beforeActiveInstanceBlur(internalInstanceHandle) {\n    // noop\n  },\n  afterActiveInstanceBlur: function afterActiveInstanceBlur() {\n    // noop\n  },\n  detachDeletedInstance: function detachDeletedInstance() {\n    // noop\n  },\n  preparePortalMount: function preparePortalMount(portalInstance) {\n    // noop\n  }\n};\nvar hostconfig = HostConfig;\nvar PixiFiber = Reconciler(hostconfig);\nvar REACT_DOM_VERSION = pkg.dependencies['react-dom'].replace(/[^0-9.]/g, '');\nvar PACKAGE_NAME = pkg.name;\nPixiFiber.injectIntoDevTools({\n  bundleType: 1,\n  version: REACT_DOM_VERSION,\n  rendererPackageName: PACKAGE_NAME,\n  findHostInstanceByFiber: PixiFiber.findHostInstance\n});\n\n// cache both root PixiFiber containers and React roots\nvar roots = new Map();\n\n/**\n * @param {Container} container\n */\nfunction unmountComponent(container) {\n  invariant(Container$3.prototype.isPrototypeOf(container), 'Invalid argument `container`, expected instance of `Container`.');\n  if (roots.has(container)) {\n    var _roots$get = roots.get(container),\n      pixiFiberContainer = _roots$get.pixiFiberContainer;\n\n    // unmount component\n    PixiFiber.updateContainer(null, pixiFiberContainer, undefined, function () {\n      roots.delete(container);\n    });\n  }\n}\n\n/**\n * Custom Renderer with react 18 API\n * Use this without React-DOM\n *\n * @param {Container} container\n * @returns {{ render: Function, unmount: Function}}\n */\nfunction createRoot(container) {\n  invariant(Container$3.prototype.isPrototypeOf(container), 'Invalid argument `container`, expected instance of `Container`.');\n  var root = roots.get(container);\n  invariant(!root, 'createRoot should only be called once');\n  if (!root) {\n    var pixiFiberContainer = PixiFiber.createContainer(container);\n    var reactRoot = {\n      render: function render(element) {\n        // schedules a top level update\n        PixiFiber.updateContainer(element, pixiFiberContainer, undefined);\n        return PixiFiber.getPublicRootInstance(pixiFiberContainer);\n      },\n      unmount: function unmount() {\n        unmountComponent(container);\n        roots.delete(container);\n      }\n    };\n    root = {\n      pixiFiberContainer: pixiFiberContainer,\n      reactRoot: reactRoot\n    };\n    roots.set(container, root);\n  }\n  return root.reactRoot;\n}\n\n/**\n * Custom Renderer\n * Use this without React-DOM\n *\n * @deprecated use createRoot instead\n *\n * @param {React.ReactNode} element\n * @param {Container} container (i.e. the Stage)\n * @param {Function} callback\n */\nfunction render(element, container, callback) {\n  console.warn('Pixi React Deprecation Warning: render is deprecated, use createRoot instead');\n  if (callback !== undefined) {\n    console.warn('Pixi React Deprecation Warning: render callback no longer exists in React 18');\n  }\n  var reactRoot;\n  if (roots.has(container)) {\n    var _roots$get2 = roots.get(container);\n    reactRoot = _roots$get2.reactRoot;\n  } else {\n    reactRoot = createRoot(container);\n  }\n  return reactRoot.render(element);\n}\n\n/**\n * @deprecated use root.unmount() instead\n * @param {Container} container\n */\nfunction unmountComponentAtNode(container) {\n  unmountComponent(container);\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nvar Context = /*#__PURE__*/React.createContext(null);\nvar AppProvider = Context.Provider;\nvar AppConsumer = Context.Consumer;\nvar withPixiApp = function withPixiApp(BaseComponent) {\n  var wrapper = /*#__PURE__*/React.forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(AppConsumer, null, function (app) {\n      return /*#__PURE__*/React.createElement(BaseComponent, _extends({}, props, {\n        ref: ref,\n        app: app\n      }));\n    });\n  });\n  wrapper.displayName = \"withPIXIApp(\".concat(BaseComponent.displayName || BaseComponent.name, \")\");\n  return wrapper;\n};\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct$1();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar noop = function noop() {};\n\n/**\n * -------------------------------------------\n * Stage React Component (use this in react-dom)\n *\n * @usage\n *\n * const App = () => (\n *   <Stage\n *     width={500}\n *     height={500}\n *     options={ backgroundColor: 0xff0000 }\n *     onMount={( renderer, canvas ) => {\n *       console.log('PIXI renderer: ', renderer)\n *       console.log('Canvas element: ', canvas)\n *     }}>\n * );\n *\n * -------------------------------------------\n */\n\nvar propTypes = {\n  // dimensions\n  width: PropTypes.number,\n  height: PropTypes.number,\n  // will return renderer\n  onMount: PropTypes.func,\n  onUnmount: PropTypes.func,\n  // run ticker at start?\n  raf: PropTypes.bool,\n  // render component on component lifecycle changes?\n  renderOnComponentChange: PropTypes.bool,\n  children: PropTypes.node,\n  // PIXI options, see https://pixijs.download/v7.x/docs/PIXI.Application.html\n  options: PropTypes.shape({\n    autoStart: PropTypes.bool,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    useContextAlpha: PropTypes.bool,\n    backgroundAlpha: PropTypes.number,\n    autoDensity: PropTypes.bool,\n    antialias: PropTypes.bool,\n    preserveDrawingBuffer: PropTypes.bool,\n    resolution: PropTypes.number,\n    forceCanvas: PropTypes.bool,\n    backgroundColor: PropTypes.number,\n    clearBeforeRender: PropTypes.bool,\n    powerPreference: PropTypes.string,\n    sharedTicker: PropTypes.bool,\n    sharedLoader: PropTypes.bool,\n    // resizeTo needs to be a window or HTMLElement\n    resizeTo: function resizeTo(props, propName) {\n      var el = props[propName];\n      el && invariant(el === window || el instanceof HTMLElement, \"Invalid prop `resizeTo` of type \".concat(_typeof(el), \", expect `window` or an `HTMLElement`.\"));\n    },\n    // view is optional, use if provided\n    view: function view(props, propName, componentName) {\n      var el = props[propName];\n      el && invariant(el instanceof HTMLCanvasElement, \"Invalid prop `view` of type \".concat(_typeof(el), \", supplied to \").concat(componentName, \", expected `<canvas> Element`\"));\n    }\n  })\n};\nvar defaultProps = {\n  width: 800,\n  height: 600,\n  onMount: noop,\n  onUnmount: noop,\n  raf: true,\n  renderOnComponentChange: true\n};\nfunction getCanvasProps(props) {\n  var reserved = [].concat(_toConsumableArray(Object.keys(propTypes)), _toConsumableArray(Object.keys(PROPS_DISPLAY_OBJECT)));\n  return Object.keys(props).filter(function (p) {\n    return !reserved.includes(p);\n  }).reduce(function (all, prop) {\n    return _objectSpread$1(_objectSpread$1({}, all), {}, _defineProperty({}, prop, props[prop]));\n  }, {});\n}\nvar Stage = /*#__PURE__*/function (_React$Component) {\n  _inherits(Stage, _React$Component);\n  var _super = _createSuper(Stage);\n  function Stage() {\n    var _this;\n    _classCallCheck(this, Stage);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _defineProperty(_assertThisInitialized(_this), \"_canvas\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_mediaQuery\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_ticker\", null);\n    _defineProperty(_assertThisInitialized(_this), \"_needsUpdate\", true);\n    _defineProperty(_assertThisInitialized(_this), \"app\", null);\n    _defineProperty(_assertThisInitialized(_this), \"updateSize\", function () {\n      var _this$props = _this.props,\n        width = _this$props.width,\n        height = _this$props.height,\n        options = _this$props.options;\n      if (!(options !== null && options !== void 0 && options.resolution)) {\n        _this.app.renderer.resolution = window.devicePixelRatio;\n        _this.resetInteractionManager();\n      }\n      _this.app.renderer.resize(width, height);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"needsRenderUpdate\", function () {\n      _this._needsUpdate = true;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderStage\", function () {\n      var _this$props2 = _this.props,\n        renderOnComponentChange = _this$props2.renderOnComponentChange,\n        raf = _this$props2.raf;\n      if (!raf && renderOnComponentChange && _this._needsUpdate) {\n        _this._needsUpdate = false;\n        _this.app.renderer.render(_this.app.stage);\n      }\n    });\n    return _this;\n  }\n  _createClass(Stage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props3 = this.props,\n        onMount = _this$props3.onMount,\n        width = _this$props3.width,\n        height = _this$props3.height,\n        options = _this$props3.options,\n        raf = _this$props3.raf,\n        renderOnComponentChange = _this$props3.renderOnComponentChange;\n      this.app = new Application(_objectSpread$1(_objectSpread$1({\n        width: width,\n        height: height,\n        view: this._canvas\n      }, options), {}, {\n        autoDensity: (options === null || options === void 0 ? void 0 : options.autoDensity) !== false\n      }));\n      {\n        var _this$app$renderer$co;\n        // workaround for React 18 Strict Mode unmount causing\n        // webgl canvas context to be lost\n        if ((_this$app$renderer$co = this.app.renderer.context) !== null && _this$app$renderer$co !== void 0 && _this$app$renderer$co.extensions) {\n          this.app.renderer.context.extensions.loseContext = null;\n        }\n      }\n      this.app.ticker.autoStart = false;\n      this.app.ticker[raf ? 'start' : 'stop']();\n      this.app.stage.__reactpixi = {\n        root: this.app.stage\n      };\n      this.mountNode = PixiFiber.createContainer(this.app.stage);\n      PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n      onMount(this.app);\n\n      // update size on media query resolution change?\n      // only if autoDensity = true\n      if (options !== null && options !== void 0 && options.autoDensity && window.matchMedia && (options === null || options === void 0 ? void 0 : options.resolution) === undefined) {\n        this._mediaQuery = window.matchMedia(\"(-webkit-min-device-pixel-ratio: 1.3), (min-resolution: 120dpi)\");\n        this._mediaQuery.addListener(this.updateSize);\n      }\n\n      // listen for reconciler changes\n      if (renderOnComponentChange && !raf) {\n        this._ticker = new Ticker();\n        this._ticker.autoStart = true;\n        this._ticker.add(this.renderStage);\n        this.app.stage.on('__REACT_PIXI_REQUEST_RENDER__', this.needsRenderUpdate);\n      }\n      this.updateSize();\n      this.renderStage();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, prevContext) {\n      var _prevProps$options;\n      var _this$props4 = this.props,\n        width = _this$props4.width,\n        height = _this$props4.height,\n        raf = _this$props4.raf,\n        renderOnComponentChange = _this$props4.renderOnComponentChange,\n        options = _this$props4.options;\n\n      // update resolution\n      if ((options === null || options === void 0 ? void 0 : options.resolution) !== undefined && (prevProps === null || prevProps === void 0 ? void 0 : prevProps.options.resolution) !== (options === null || options === void 0 ? void 0 : options.resolution)) {\n        this.app.renderer.resolution = options.resolution;\n        this.resetInteractionManager();\n      }\n\n      // update size\n      if (prevProps.height !== height || prevProps.width !== width || ((_prevProps$options = prevProps.options) === null || _prevProps$options === void 0 ? void 0 : _prevProps$options.resolution) !== (options === null || options === void 0 ? void 0 : options.resolution)) {\n        this.updateSize();\n      }\n\n      // handle raf change\n      if (prevProps.raf !== raf) {\n        this.app.ticker[raf ? 'start' : 'stop']();\n      }\n\n      // flush fiber\n      PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n      if (prevProps.width !== width || prevProps.height !== height || prevProps.raf !== raf || prevProps.renderOnComponentChange !== renderOnComponentChange || prevProps.options !== options) {\n        this._needsUpdate = true;\n        this.renderStage();\n      }\n    }\n  }, {\n    key: \"resetInteractionManager\",\n    value:\n    // provide support for Pixi v6 still\n    function resetInteractionManager() {\n      // `interaction` property is absent in Pixi v7 and in v6 if user has installed Federated Events API plugin.\n      // https://api.pixijs.io/@pixi/events.html\n      // in v7 however, there's a stub object which displays a deprecation warning, so also check the resolution property:\n      var maybeInteraction = this.app.renderer.plugins.interaction;\n      if (maybeInteraction !== null && maybeInteraction !== void 0 && maybeInteraction.resolution) {\n        maybeInteraction.resolution = this.app.renderer.resolution;\n      }\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      var children = this.props.children;\n      return /*#__PURE__*/React.createElement(AppProvider, {\n        value: this.app\n      }, children);\n    }\n  }, {\n    key: \"componentDidCatch\",\n    value: function componentDidCatch(error, errorInfo) {\n      console.error(\"Error occurred in `Stage`.\");\n      console.error(error);\n      console.error(errorInfo);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onUnmount(this.app);\n      if (this._ticker) {\n        this._ticker.remove(this.renderStage);\n        this._ticker.destroy();\n      }\n      this.app.stage.off('__REACT_PIXI_REQUEST_RENDER__', this.needsRenderUpdate);\n      PixiFiber.updateContainer(null, this.mountNode, this);\n      if (this._mediaQuery) {\n        this._mediaQuery.removeListener(this.updateSize);\n        this._mediaQuery = null;\n      }\n      this.app.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var options = this.props.options;\n      if (options && options.view) {\n        invariant(options.view instanceof HTMLCanvasElement, 'options.view needs to be a `HTMLCanvasElement`');\n        return null;\n      }\n      return /*#__PURE__*/React.createElement(\"canvas\", _extends({}, getCanvasProps(this.props), {\n        ref: function ref(c) {\n          return _this2._canvas = c;\n        }\n      }));\n    }\n  }]);\n  return Stage;\n}(React.Component);\nStage.propTypes = propTypes;\nStage.defaultProps = defaultProps;\nvar Stage$1 = Stage;\nfunction useApp() {\n  var app = useContext(Context);\n  invariant(app instanceof Application, 'No Context found with `%s`. Make sure to wrap component with `%s`', 'Application', 'AppProvider');\n  return app;\n}\nfunction useTick(callback) {\n  var enabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var app = useApp();\n  invariant(typeof callback === 'function', '`useTick` needs a callback function.');\n  invariant(app instanceof Application, 'No Context found with `%s`. Make sure to wrap component with `%s`', 'Application', 'AppProvider');\n  var savedRef = useRef(null);\n  useEffect(function () {\n    savedRef.current = callback;\n  }, [callback]);\n\n  // eslint-disable-next-line consistent-return\n  useEffect(function () {\n    if (enabled) {\n      var tick = function tick(delta) {\n        return savedRef.current.apply(app.ticker, [delta, app.ticker]);\n      };\n      app.ticker.add(tick);\n      return function () {\n        if (app.ticker) {\n          app.ticker.remove(tick);\n        }\n      };\n    }\n  }, [enabled]);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nvar _excluded = [\"children\", \"apply\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar withFilters = function withFilters(WrapperComponent, filters) {\n  invariant(_typeof(filters) === 'object', 'Second argument needs to be an indexed object with { prop: Filter }');\n  var keys = Object.keys(filters);\n  var Wrapper = function Wrapper(_ref) {\n    var children = _ref.children,\n      apply = _ref.apply,\n      props = _objectWithoutProperties(_ref, _excluded);\n    // create filters\n    var filterList = useRef(useMemo(function () {\n      return keys.map(function (prop) {\n        var _props$prop;\n        var constructorArgs = (props === null || props === void 0 ? void 0 : (_props$prop = props[prop]) === null || _props$prop === void 0 ? void 0 : _props$prop.construct) || [];\n        return _construct(filters[prop], _toConsumableArray(constructorArgs));\n      });\n    }, [keys]));\n    var filterObj = useMemo(function () {\n      return keys.reduce(function (all, c, i) {\n        return _objectSpread(_objectSpread({}, all), {}, _defineProperty({}, c, filterList.current[i]));\n      }, {});\n    }, [keys]);\n\n    // get rest props\n    var restProps = useMemo(function () {\n      return Object.keys(props).filter(not(hasKey(keys))).reduce(function (all, c) {\n        return _objectSpread(_objectSpread({}, all), {}, _defineProperty({}, c, props[c]));\n      }, {});\n    }, [props, keys]);\n\n    // update filter params\n    keys.forEach(function (k, i) {\n      return Object.assign(filterList.current[i], props[k]);\n    });\n\n    // use apply ?\n    if (apply && isFunction(apply)) {\n      apply.call(WrapperComponent, filterObj);\n    }\n    return /*#__PURE__*/React.createElement(WrapperComponent, _extends({}, restProps, {\n      filters: filterList.current\n    }), children);\n  };\n  Wrapper.displayName = 'FilterWrapper';\n  Wrapper.propTypes = {\n    children: PropTypes.node,\n    apply: PropTypes.func\n  };\n  return Wrapper;\n};\nvar BitmapText = TYPES.BitmapText;\nvar Container = TYPES.Container;\nvar Graphics = TYPES.Graphics;\nvar NineSlicePlane = TYPES.NineSlicePlane;\nvar ParticleContainer = TYPES.ParticleContainer;\nvar Sprite = TYPES.Sprite;\nvar AnimatedSprite = TYPES.AnimatedSprite;\nvar Text = TYPES.Text;\nvar TilingSprite = TYPES.TilingSprite;\nvar SimpleMesh = TYPES.SimpleMesh;\nvar SimpleRope = TYPES.SimpleRope;\nexport { AnimatedSprite, AppConsumer, Context as AppContext, AppProvider, BitmapText, Container, Graphics, NineSlicePlane, ParticleContainer, PixiComponent, PixiFiber, SimpleMesh, SimpleRope, Sprite, Stage$1 as Stage, TYPES, Text, TilingSprite, applyDefaultProps, createRoot, eventHandlers, render, unmountComponentAtNode, useApp, useTick, withFilters, withPixiApp };","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toPrimitive","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","Number","_toPropertyKey","arg","key","_defineProperty","value","Object","defineProperty","enumerable","configurable","writable","_arrayLikeToArray","arr","len","length","i","arr2","Array","_arrayWithoutHoles","isArray","_iterableToArray","iter","from","_unsupportedIterableToArray","o","minLen","n","toString","slice","name","test","_nonIterableSpread","_toConsumableArray","invariant","condition","format","_len","arguments","args","_key","error","Error","argIndex","replace","framesToPop","isNil","lodash_isnil","parsePoint","split","x","y","filter","p","isNaN","map","pointsAreEqual","oldValue","newValue","isPointType","Point","ObservablePoint","eventHandlers","setValue","instance","prop","copyFrom","coordinates","JSON","stringify","set","shift","isFunction","every","v","isObject","hasKey","collection","coll","keys","index","forEach","not","boolFn","apply","CHILDREN","PROPS_RESERVED","_PROPS_RESERVED","PROPS_DISPLAY_OBJECT","alpha","buttonMode","cacheAsBitmap","cursor","filterArea","filters","hitArea","interactive","mask","pivot","position","renderable","rotation","scale","skew","transform","visible","getTextureFromProps","elementType","root","props","emitChange","texture","requestAnimationFrame","_texture$__reactpixi","_texture$__reactpixi$","__reactpixi","emit","check","inType","validator","hasOwnProperty","valid","typeofs","some","t","instanceofs","concat","Texture","result","HTMLImageElement","HTMLVideoElement","HTMLCanvasElement","once","filterProps","applyDefaultProps","oldProps","newProps","changed","DisplayObject","isPrototypeOf","ignoreEvents","hasRemoveListener","removeListener","hasOn","on","evt","newPropKeys","overwriteProps","_i","_i2","console","warn","BitmapText$1","BitmapText","text","style","BitmapText$3","BitmapText$2","Container$1","Container","Container$3","Container$2","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","indexOf","_objectWithoutProperties","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Graphics$1","Graphics","_ref","geometry","Graphics$3","g","applyProps","draw","_excluded$7","Graphics$2","NineSlicePlane$1","NineSlicePlane","_props$leftWidth","leftWidth","_props$topHeight","topHeight","_props$rightWidth","rightWidth","_props$bottomHeight","bottomHeight","nineSlicePlane","NineSlicePlane$3","image","_excluded$6","NineSlicePlane$2","ParticleContainer$1","ParticleContainer","_props$maxSize","maxSize","_props$batchSize","batchSize","_props$autoResize","autoResize","properties","_objectSpread$3","vertices","uvs","tint","destroyOptions","children","baseTexture","container","ParticleContainer$3","willUnmount","child","parent","destroy","ParticleContainer$2","Sprite$1","Sprite","sprite","Sprite$3","_excluded$5","Sprite$2","AnimatedSprite$1","AnimatedSprite","textures","images","_props$isPlaying","isPlaying","initialFrame","makeTexture","animatedSprite","AnimatedSprite$3","fromImages","_excluded$4","newTextures","push","frame","currentFrame","AnimatedSprite$2","Text$1","Text","_props$text","_props$style","isSprite","pixiText","Text$3","updateText","Text$2","TilingSprite$1","TilingSprite","_props$width","width","_props$height","height","ts","TilingSprite$3","tileScale","tilePosition","_excluded$3","_instance$tilePositio","newTilePosition","_instance$tileScale","newTileScale","TilingSprite$2","SimpleMesh$1","SimpleMesh","indices","_props$drawMode","drawMode","DRAW_MODES","TRIANGLES","simpleMesh","SimpleMesh$3","_excluded$2","SimpleMesh$2","SimpleRope$1","SimpleRope","points","rope","SimpleRope$3","_excluded$1","SimpleRope$2","TYPES","ELEMENTS","reduce","elements","type","_objectSpread$2","components","TYPES_INJECTED","createElement","fn","injected","create","didMount","bind","config","_instance","PixiComponent","lifecycle","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","enableSchedulerDebugging","enableProfiling","frameYieldMs","heap","node","siftUp","peek","pop","first","last","siftDown","parentIndex","compare","halfLength","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","ms","hasPerformanceNow","performance","now","localPerformance","exports","unstable_now","localDate","Date","initialTime","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","localSetTimeout","setTimeout","localClearTimeout","clearTimeout","localSetImmediate","setImmediate","navigator","scheduling","isInputPending","advanceTimers","currentTime","timer","callback","startTime","expirationTime","handleTimeout","requestHostCallback","flushWork","firstTimer","requestHostTimeout","hasTimeRemaining","cancelHostTimeout","previousPriorityLevel","workLoop","shouldYieldToHost","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","frameInterval","timeElapsed","requestPaint","forceFrameRate","fps","Math","floor","performWorkUntilDeadline","hasMoreWork","schedulePerformWorkUntilDeadline","MessageChannel","channel","port","port2","port1","onmessage","postMessage","unstable_requestPaint","unstable_Profiling","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority","unstable_forceFrameRate","unstable_shouldYield","registerInternalModuleStop","module","requireScheduler_development","reactReconciler_development","$$$reconciler","$$$hostConfig","React$1","React","Scheduler","requireScheduler","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","suppressWarning","setSuppressWarning","newSuppressWarning","printWarning","_len2","_key2","level","ReactDebugCurrentFrame","stack","getStackAddendum","argsWithFormat","item","unshift","Function","assign","get","_reactInternals","enableNewReconciler","enableLazyContextPropagation","enableLegacyHidden","enableSuspenseAvoidThisFallback","warnAboutStringRefs","enableSchedulingProfiler","enableProfilerTimer","enableProfilerCommitHooks","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","getContextName","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","getWrappedName$1","getContextName$1","getComponentNameFromFiber","fiber","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","MountLayoutDev","MountPassiveDev","BeforeMutationMask","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","stateNode","_warnedAboutRefsInRender","assertIsMounted","findCurrentFiberUsingSlowPath","parentA","parentB","nextParent","sibling","didFindChild","_child","findCurrentHostFiber","currentParent","findCurrentHostFiberImpl","match","findCurrentHostFiberWithNoPortals","findCurrentHostFiberWithNoPortalsImpl","isArrayImpl","getPublicInstance","getRootHostContext","getChildHostContext","prepareForCommit","resetAfterCommit","createInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","shouldSetTextContent","createTextInstance","scheduleTimeout","cancelTimeout","noTimeout","isPrimaryRenderer","warnsIfNotActing","supportsMutation","supportsPersistence","supportsHydration","getInstanceFromNode","beforeActiveInstanceBlur","afterActiveInstanceBlur","preparePortalMount","prepareScopeUpdate","getInstanceFromScope","getCurrentEventPriority","detachDeletedInstance","supportsMicrotasks","scheduleMicrotask","supportsTestSelectors","findFiberRoot","getBoundingRect","getTextContent","isHiddenSubtree","matchAccessibilityRole","setFocusIfFocusable","setupIntersectionObserver","appendChild","appendChildToContainer","commitTextUpdate","commitMount","commitUpdate","insertBefore","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clearContainer","cloneInstance","createContainerChildSet","appendChildToContainerChildSet","finalizeContainerChildren","replaceContainerChildren","cloneHiddenInstance","cloneHiddenTextInstance","canHydrateInstance","canHydrateTextInstance","canHydrateSuspenseInstance","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","getNextHydratableSibling","getFirstHydratableChild","getFirstHydratableChildWithinContainer","getFirstHydratableChildWithinSuspenseInstance","hydrateInstance","hydrateTextInstance","hydrateSuspenseInstance","getNextHydratableInstanceAfterSuspenseInstance","commitHydratedContainer","commitHydratedSuspenseInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","shouldDeleteUnhydratedTailInstances","didNotMatchHydratedContainerTextInstance","didNotMatchHydratedTextInstance","didNotHydrateInstanceWithinContainer","didNotHydrateInstanceWithinSuspenseInstance","didNotHydrateInstance","didNotFindHydratableInstanceWithinContainer","didNotFindHydratableTextInstanceWithinContainer","didNotFindHydratableSuspenseInstanceWithinContainer","didNotFindHydratableInstanceWithinSuspenseInstance","didNotFindHydratableTextInstanceWithinSuspenseInstance","didNotFindHydratableSuspenseInstanceWithinSuspenseInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","didNotFindHydratableSuspenseInstance","errorHydratingContainer","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","log","info","group","groupCollapsed","groupEnd","defineProperties","reenableLogs","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","ownerFn","trim","reentry","componentFrameCache","PossiblyWeakMap","WeakMap","Map","describeNativeComponentFrame","construct","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","Reflect","sample","sampleLines","controlLines","s","c","_frame","includes","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","typeSpecName","error$1","err","ex","message","valueStack","fiberStack","createCursor","defaultValue","warnedAboutMissingGetChildContext","emptyContextObject","freeze","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","clz32","clz32Fallback","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","getLabelForLane","lane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","pickArbitraryLaneIndex","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","markStarvedLanesAsExpired","expirationTimes","expiredLanes","getHighestPriorityPendingLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","higherPriorityLane","createLaneMap","initial","laneMap","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","markRootEntangled","rootEntangledLanes","getBumpedLaneForHydration","renderLanes","renderLane","addFiberToLanesMap","isDevToolsPresent","pendingUpdatersLaneMap","updaters","add","movePendingFibersToMemoized","memoizedUpdaters","size","clear","getTransitionsForLanes","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","runWithPriority","priority","previousPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","scheduleCallback","cancelCallback","shouldYield","unstable_yieldValue","unstable_setDisableYieldValue","rendererID","injectedHook","injectedProfilingHooks","hasLoggedError","injectInternals","internals","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","checkDCE","onScheduleRoot","onScheduleFiberRoot","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","setIsStrictModeForDevtools","newIsStrictMode","setStrictMode","profilingHooks","label","markCommitStarted","markCommitStopped","markComponentRenderStarted","markComponentRenderStopped","markComponentPassiveEffectMountStarted","markComponentPassiveEffectMountStopped","markComponentPassiveEffectUnmountStarted","markComponentPassiveEffectUnmountStopped","markComponentLayoutEffectMountStarted","markComponentLayoutEffectMountStopped","markComponentLayoutEffectUnmountStarted","markComponentLayoutEffectUnmountStopped","markComponentErrored","thrownValue","markComponentSuspended","wakeable","markLayoutEffectsStarted","markLayoutEffectsStopped","markPassiveEffectsStarted","markPassiveEffectsStopped","markRenderStarted","markRenderYielded","markRenderStopped","markRenderScheduled","markForceUpdateScheduled","markStateUpdateScheduled","is","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","isRootDehydrated","currentState","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","isForkedChild","warnIfNotHydrating","getForksAtLevel","getTreeId","overflow","idWithLeadingBit","getLeadingBit","pushTreeFork","totalChildren","pushTreeId","baseIdWithLeadingBit","baseOverflow","baseLength","getBitLength","baseId","slot","numberOfOverflowBits","newOverflowBits","newOverflow","restOfBaseId","restOfBaseLength","restOfLength","restOfNewBits","newBits","_id","_overflow","pushMaterializedTreeId","returnFiber","numberOfForks","slotIndex","number","popTreeContext","getSuspendedTreeContext","restoreSuspendedTreeContext","suspendedContext","getIsHydrating","hydrationParentFiber","nextHydratableInstance","isHydrating","didSuspendOrErrorDEV","hydrationErrors","warnIfHydrating","markDidThrowWhileHydratingDEV","didSuspendOrErrorWhileHydratingDEV","enterHydrationState","parentInstance","containerInfo","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","warnUnhydratedInstance","isConcurrentMode","mode","memoizedProps","suspenseState","dehydrated","deleteHydratableInstance","childToDelete","createFiberFromHostInstanceForDeletion","deletions","warnNonhydratedInstance","parentContainer","pendingProps","parentType","parentProps","_type","_props","_text","_isConcurrentMode","_parentInstance","_type2","_props2","_text2","insertNonHydratedInstance","tryHydrate","nextInstance","textInstance","retryLane","dehydratedFragment","createFiberFromDehydratedFragment","shouldClientRenderOnMismatch","throwOnHydrationMismatch","tryToClaimNextHydratableInstance","firstAttemptedInstance","prevHydrationParentFiber","prepareToHydrateHostInstance","rootContainerInstance","hostContext","shouldWarnIfMismatchDev","updatePayload","updateQueue","prepareToHydrateHostTextInstance","textContent","shouldUpdate","_isConcurrentMode2","prepareToHydrateHostSuspenseInstance","skipPastDehydratedSuspenseInstance","popToNextHostParent","popHydrationState","warnIfUnhydratedTailNodes","hasUnhydratedTailNodes","resetHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keysB","currentKey","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","ReactDebugCurrentFrame$1","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","getCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","sortedNames","_sortedNames","_sortedNames2","_sortedNames3","_sortedNames4","_sortedNames5","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","typeName","hasToStringTag","toStringTag","willCoercionThrow","testStringCoercion","e","checkKeyStringCoercion","checkPropStringCoercion","propName","resolveDefaultProps","baseProps","defaultProps","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue","_currentRenderer","_currentValue2","_currentRenderer2","popProvider","currentValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","sharedQueue","shared","pending","next","parentSuspense","_alternate","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","memoizedValue","concurrentQueues","pushConcurrentUpdateQueue","finishQueueingConcurrentUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","enqueueConcurrentHookUpdate","markUpdateLaneFromFiberToRoot","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","warnAboutUpdateOnNotYetMountedFiberInDEV","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","_clone","_lastPendingUpdate","_firstPendingUpdate","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","_state","adoptClassInstance","updater","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","_componentName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","_fiberFlags","_fiberFlags2","updateClassInstance","unresolvedOldProps","unresolvedNewProps","nextUnmaskedContext","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","_store","validated","coerceRef","mixedRef","ref","_self","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","warnOnFunctionType","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","_created","_created2","_created3","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","_matchedFiber","_matchedFiber2","_matchedFiber3","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","_newFiber","_numberOfForks","_newFiber2","delete","_numberOfForks2","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","_newChildren","_step","done","step","_newFiber3","_numberOfForks3","_newFiber4","_numberOfForks4","reconcileSingleTextNode","reconcileSingleElement","_existing","_created4","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","NO_CONTEXT","contextStackCursor$1","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","findFirstSuspended","row","revealOrder","didSuspend","NoFlags$1","HasEffect","Insertion","Layout","Passive$1","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionPrimary","_workInProgressVersionSecondary","registerMutableSourceForHydration","getVersion","_getVersion","version","mutableSourceEagerHydrationData","ReactCurrentDispatcher$1","ReactCurrentBatchConfig$1","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","localIdCounter","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","baseFirst","pendingFirst","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","cachedSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","firstEffect","mountRef","initialValue","_ref2","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","mountInsertionEffect","updateInsertionEffect","mountLayoutEffect","updateLayoutEffect","imperativeHandleEffect","refCallback","_inst","refObject","_inst2","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","prevTransition","currentTransition","_updatedFibers","updatedFibersCount","mountTransition","_mountState","isPending","start","updateTransition","_updateState","rerenderTransition","_rerenderState","getIsUpdatingOpaqueValueInRenderPhaseInDEV","mountId","identifierPrefix","treeId","localId","globalClientId","updateId","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","markUpdateInDevTools","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","now$1","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValueAtFiber","digest","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","PossiblyWeakMap$1","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","ping","pingSuspendedRoot","restorePendingUpdaters","then","attachRetryListener","suspenseBoundary","wakeables","resetSuspendedComponent","rootRenderLanes","currentSource","getNearestSuspenseBoundaryToCapture","markSuspenseBoundaryShouldCapture","currentSourceFiber","throwException","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","_suspenseBoundary","renderDidError","_errorInfo","isAlreadyFailedLegacyErrorBoundary","_lane","_update","getSuspendedCache","ReactCurrentOwner$1","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","_innerPropTypes","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","baseLanes","cachePool","transitions","pushRenderLanes","spawnedCachePool","nextBaseLanes","prevBaseLanes","_nextState","_nextState2","subtreeRenderLanes","_subtreeRenderLanes","updateMode","updateProfiler","markRef","updateClassComponent","shouldError","tempInstance","hasContext","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","overrideState","cache","pendingSuspenseBoundaries","recoverableError","mountHostRootWithoutHydrating","_recoverableError","updateHostComponent","isDirectTextChild","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","mountIncompleteClassComponent","mountIndeterminateComponent","_componentName2","ownerName","warningKey","debugSource","fileName","lineNumber","_componentName3","_componentName4","SUSPENDED_MARKER","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","_dehydrated","updateDehydratedSuspenseComponent","_nextFallbackChildren","_nextPrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","_primaryChildFragment2","_nextPrimaryChildren2","_primaryChildFragment3","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","_getSuspenseInstanceF","capturedValue","attemptHydrationAtLane","_capturedValue","retry","retryDehydratedSuspenseBoundary","_capturedValue2","_primaryChildFragment4","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","initSuspenseListRenderState","isBackwards","tail","renderState","renderingStartTime","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","_tail","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","providerPropTypes","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","_hasChildWork","beginWork","_debugNeedsRemount","unresolvedProps","_Component","_unresolvedProps","_resolvedProps","_unresolvedProps2","_resolvedProps2","_unresolvedProps3","_resolvedProps3","_Component2","_unresolvedProps4","_resolvedProps4","markUpdate","markRef$1","hadNoMutationsEffects","completedWork","didBailout","appendAllChildren","updateHostContainer","updateHostComponent$1","updateHostText$1","needsVisibilityToggle","isHidden","currentHostContext","oldText","newText","appendAllChildrenToContainer","containerChildSet","_instance2","portalOrRoot","childrenUnchanged","newChildSet","pendingChildren","currentInstance","recyclableInstance","newInstance","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","_tailNode","_lastTailNode","bubbleProperties","newChildLanes","_treeBaseDuration","_child2","_child3","completeDehydratedSuspenseBoundary","wasHydrated","isTimedOutSuspense","_isTimedOutSuspense","_primaryChildFragment","completeWork","fiberRoot","_wasHydrated","_rootContainerInstance","_currentHostContext","_wasHydrated2","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","_offscreenFiber2","hasInvisibleChildContext","unstable_avoidThisFallback","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","_suspended","_newThenables","previousSibling","popRenderLanes","nextIsHidden","_prevState","prevIsHidden","unwindWork","_flags","_flags2","unwindInterruptedWork","interruptedWork","invokeGuardedCallbackProd","func","d","f","funcArgs","onError","invokeGuardedCallbackImpl","window","dispatchEvent","document","createEvent","fakeNode","invokeGuardedCallbackDev","didCall","windowEvent","event","windowEventDescriptor","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","addEventListener","initEvent","invokeGuardedCallbackImpl$1","hasError","caughtError","reporter","invokeGuardedCallback","hasCaughtError","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallCommitHookLayoutEffectListMount","nearestMountedAncestor","commitHookEffectListMount","captureCommitPhaseError","safelyCallComponentWillUnmount","safelyCallComponentDidMount","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","setIsRunningInsertionEffect","commitPassiveEffectDurations","finishedRoot","_finishedWork$memoize","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","_updateQueue","_finishedWork$memoize2","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitSuspenseHydrationCallbacks","reappearLayoutEffectsOnFiber","hideOrUnhideAllChildren","hostSubtreeRoot","_instance3","instanceToUse","detachFiberMutation","detachFiberAfterEffects","hostInstance","emptyPortalContainer","emptyChildSet","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","before","insertOrAppendPlacementNode","_parent","_before","insertOrAppendPlacementNodeIntoContainer","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","prevHostParent","prevHostParentIsContainer","_prevHostParent","_prevHostParentIsContainer","_effect","prevOffscreenSubtreeWasHidden","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","resolveRetryWakeable","commitMutationEffects","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","prevDebugFiber","commitReconciliationEffects","_instance4","prevRootState","_containerInfo","_pendingChildren","offscreenFiber","offscreenInstance","wasHidden","markCommitTimeOfFallback","_wasHidden","_offscreenInstance","_newState","_isHidden","offscreenBoundary","offscreenChild","disappearLayoutEffects_begin","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","newOffscreenSubtreeIsHidden","commitLayoutMountEffects_complete","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","reappearLayoutEffects_begin","disappearLayoutEffects_complete","reappearLayoutEffects_complete","commitPassiveMountEffects","committedTransitions","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","createComponentSelector","createHasPseudoClassSelector","selectors","createRoleSelector","role","createTextSelector","createTestNameSelector","findFiberRootForHostRoot","hostRoot","maybeFiber","matchSelector","selector","hasMatchingPaths","dataTestID","selectorToString","findPaths","matchingFibers","selectorIndex","findAllNodes","instanceRoots","getFindAllNodesFailureDescription","maxSelectorIndex","matchedNames","unmatchedNames","findBoundingRects","boundingRects","targetRect","targetLeft","targetRight","targetTop","targetBottom","j","otherRect","otherLeft","otherRight","otherTop","otherBottom","splice","focusWithin","commitHooks","onCommitRoot$1","commitHook","observeVisibleRects","_setupIntersectionObs","disconnect","observe","unobserve","nextInstanceRoots","ReactCurrentActQueue","isLegacyActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","jestIsDefined","jest","isConcurrentActEnvironment","ceil","ReactCurrentDispatcher$2","ReactCurrentOwner$2","ReactCurrentBatchConfig$2","ReactCurrentActQueue$1","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","isFlushingPassiveEffects","didScheduleUpdateDuringPassiveEffects","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","currentEventTime","currentEventTransitionLane","isRunningInsertionEffect","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","markRootSuspended$1","ensureRootIsScheduled","isBatchingLegacy","scheduleInitialHydrationOnRoot","existingCallbackNode","callbackNode","cancelCallback$1","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","scheduleCallback$1","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","_errorRetryLanes","_fatalError","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","_msUntilTimeout","jnd","checks","renderedValue","flushRoot","deferredUpdates","batchedUpdates","prevExecutionContext","discreteUpdates","flushSync","isAlreadyRendering","flushControlled","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","beginWork$1","_next","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","rootDidHavePassiveEffects","commitDoubleInvokeEffectsInDEV","onRecoverableError","renderPriority","flushPassiveEffectsImpl","profilerEffects","_fiber","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","hasPassiveEffects","invokeEffectsInDev","invokeEffectFn","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","dummyFiber","originalWorkInProgressCopy","assignFiberPropertiesInDEV","originalError","replayError","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","renderingComponentName","dedupeKey","setStateComponentName","schedulingFiber","actQueue","isRunning","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","_root","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","NaN","createFiber","shouldConstruct$1","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","primaryChildInstance","content","dehydratedNode","FiberRootNode","hydrate","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","_initialState","ReactVersion","createPortal","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","findHostInstance","hostFiber","findHostInstanceWithWarning","methodName","createContainer","createHydrationContainer","current$1","getPublicRootInstance","containerFiber","attemptSynchronousHydration","markRetryLaneIfNotHydrated","markRetryLaneImpl","attemptDiscreteHydration","attemptContinuousHydration","attemptHydrationAtCurrentPriority","findHostInstanceWithNoPortals","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","reconcilerVersion","requireReactReconciler_development","getNanoSeconds","hrtime","loadTime","moduleLoadTime","nodeLoadTime","upTime","performanceNow","process","hr","uptime","getTime","commonjsGlobal","reactReconcilerConstants_development","requireReactReconcilerConstants_development","getEventPriority","_window","_window$event","constantsExports","_appendChild","addChild","willUnmountRecursive","_child$willUnmount","_child$config","_child$children","destroyChildren","_removeChild","_child$config2","_ref$destroy","_ref$destroyChildren","_ref$destroyTexture","destroyTexture","_ref$destroyBaseTextu","destroyBaseTexture","beforeChild","_parent$__reactpixi","_parent$__reactpixi$r","childExists","getChildIndex","addChildAt","detail","diffProperties","pixiElement","lastProps","propKey","_propKey","nextProp","lastProp","prepareChanged","HostConfig","parentHostContext","getChildHostContextForEventComponent","wordElement","shouldDeprioritizeSubtree","isAlphaVisible","isRenderable","isVisible","internalInstanceHandler","mountEventComponent","updateEventComponent","handleEventTarget","performanceNowExports","queueMicrotask","_args$0$__reactpixi","_args$0$__reactpixi$r","_args$0$__reactpixi2","_args$0$__reactpixi2$","_args$0$__reactpixi3","_args$0$__reactpixi3$","_len3","_key3","_args$0$__reactpixi4","_args$0$__reactpixi4$","_len4","_key4","_args$0$__reactpixi5","_args$0$__reactpixi5$","_len5","_key5","_args$0$__reactpixi6","_args$0$__reactpixi6$","_len6","_key6","_instance$__reactpixi","_instance$__reactpixi2","getFundamentalComponentInstance","fundamentalInstance","mountFundamentalComponent","shouldUpdateFundamentalComponent","unmountFundamentalComponent","isOpaqueHydratingObject","makeOpaqueHydratingObject","attemptToReadValue","makeClientIdInDEV","warnOnAccessInDEV","internalInstanceHandle","portalInstance","hostconfig","PixiFiber","Reconciler","REACT_DOM_VERSION","pkg","PACKAGE_NAME","roots","unmountComponent","_roots$get","pixiFiberContainer","createRoot","reactRoot","unmount","_roots$get2","unmountComponentAtNode","_extends","_classCallCheck","Constructor","_defineProperties","descriptor","_createClass","protoProps","staticProps","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","setPrototypeOf","__proto__","_inherits","subClass","superClass","_possibleConstructorReturn","_getPrototypeOf","getPrototypeOf","Context","createContext","AppProvider","Provider","AppConsumer","withPixiApp","BaseComponent","wrapper","forwardRef","app","noop","PropTypes","onMount","onUnmount","raf","bool","renderOnComponentChange","shape","autoStart","useContextAlpha","backgroundAlpha","autoDensity","antialias","preserveDrawingBuffer","resolution","forceCanvas","backgroundColor","clearBeforeRender","powerPreference","string","sharedTicker","sharedLoader","resizeTo","el","HTMLElement","view","getCanvasProps","reserved","all","_objectSpread$1","Stage","_React$Component","_super","_createSuper","_this","_this$props","renderer","devicePixelRatio","resetInteractionManager","resize","_needsUpdate","_this$props2","stage","_this$props3","Application","_canvas","_this$app$renderer$co","extensions","loseContext","ticker","mountNode","getChildren","matchMedia","_mediaQuery","addListener","updateSize","_ticker","Ticker","renderStage","needsRenderUpdate","prevContext","_prevProps$options","_this$props4","maybeInteraction","plugins","interaction","remove","off","_this2","Stage$1","useApp","useTick","enabled","savedRef","tick","delta","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_construct","Parent","Class","withFilters","WrapperComponent","Wrapper","_excluded","filterList","_props$prop","constructorArgs","filterObj","_objectSpread","restProps","k"],"sources":["/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/typeof.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/toPrimitive.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/defineProperty.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","/home/ryoitsu/node_modules/@pixi/react/src/utils/invariant.js","/home/ryoitsu/node_modules/node_modules/lodash.isnil/index.js","/home/ryoitsu/node_modules/@pixi/react/src/utils/pixi.js","/home/ryoitsu/node_modules/@pixi/react/src/helpers/index.js","/home/ryoitsu/node_modules/@pixi/react/src/utils/props.js","/home/ryoitsu/node_modules/@pixi/react/src/components/BitmapText.js","/home/ryoitsu/node_modules/@pixi/react/src/components/Container.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","/home/ryoitsu/node_modules/@pixi/react/src/components/Graphics.js","/home/ryoitsu/node_modules/@pixi/react/src/components/NineSlicePlane.js","/home/ryoitsu/node_modules/@pixi/react/src/components/ParticleContainer.js","/home/ryoitsu/node_modules/@pixi/react/src/components/Sprite.js","/home/ryoitsu/node_modules/@pixi/react/src/components/AnimatedSprite.js","/home/ryoitsu/node_modules/@pixi/react/src/components/Text.js","/home/ryoitsu/node_modules/@pixi/react/src/components/TilingSprite.js","/home/ryoitsu/node_modules/@pixi/react/src/components/SimpleMesh.js","/home/ryoitsu/node_modules/@pixi/react/src/components/SimpleRope.js","/home/ryoitsu/node_modules/@pixi/react/src/utils/element.js","/home/ryoitsu/node_modules/node_modules/scheduler/cjs/scheduler.development.js","/home/ryoitsu/node_modules/node_modules/scheduler/index.js","/home/ryoitsu/node_modules/node_modules/react-reconciler/cjs/react-reconciler.development.js","/home/ryoitsu/node_modules/node_modules/react-reconciler/index.js","/home/ryoitsu/node_modules/node_modules/performance-now/lib/performance-now.js","/home/ryoitsu/node_modules/node_modules/react-reconciler/cjs/react-reconciler-constants.development.js","/home/ryoitsu/node_modules/node_modules/react-reconciler/constants.js","/home/ryoitsu/node_modules/@pixi/react/src/reconciler/hostconfig.js","/home/ryoitsu/node_modules/@pixi/react/src/reconciler/index.js","/home/ryoitsu/node_modules/@pixi/react/src/render/index.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/extends.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/createClass.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/inherits.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","/home/ryoitsu/node_modules/@pixi/react/src/stage/provider.js","/home/ryoitsu/node_modules/@pixi/react/src/stage/index.js","/home/ryoitsu/node_modules/@pixi/react/src/hooks/useApp.js","/home/ryoitsu/node_modules/@pixi/react/src/hooks/useTick.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","/home/ryoitsu/node_modules/node_modules/@babel/runtime/helpers/esm/construct.js","/home/ryoitsu/node_modules/@pixi/react/src/hoc/withFilters.js","/home/ryoitsu/node_modules/@pixi/react/src/index.js"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","// borrowed from fbjs\nexport default function invariant(condition, format, ...args)\n{\n    if (process.env.NODE_ENV === 'production')\n    {\n        return;\n    }\n\n    if (!condition)\n    {\n        let error;\n\n        if (format === undefined)\n        {\n            error = new Error(\n                'Minified exception occurred; use the non-minified dev environment '\n          + 'for the full error message and additional helpful warnings.'\n            );\n        }\n        else\n        {\n            let argIndex = 0;\n\n            error = new Error(format.replace(/%s/g, () => String(args[argIndex++])));\n            error.name = 'Invariant Violation';\n        }\n\n        error.framesToPop = 1; // Skip invariant's own stack frame.\n        throw error;\n    }\n}\n","/**\n * lodash 4.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","import { Point, ObservablePoint } from '@pixi/math';\nimport invariant from '../utils/invariant';\nimport isNil from 'lodash.isnil';\n\n/**\n * Parse PIXI point value to array of coordinates\n *\n * @param {*} value\n * @returns {Array}\n */\nexport function parsePoint(value)\n{\n    let arr = [];\n\n    if (typeof value === 'undefined')\n    {\n        return arr;\n    }\n    else if (typeof value === 'string')\n    {\n        arr = value.split(',');\n    }\n    else if (typeof value === 'number')\n    {\n        arr = [value];\n    }\n    else if (Array.isArray(value))\n    {\n        arr = [...value];\n    }\n    else if (value !== null && typeof value === 'object')\n    {\n        const x = (value && value?.x) || 0;\n        const y = (value && value?.y) || 0;\n\n        arr = [x, y];\n    }\n    else\n    {\n        return arr;\n    }\n\n    return arr.filter((p) => !isNil(p) && !isNaN(p)).map(Number);\n}\n\n/**\n * Check if two points are equal\n *\n * @param {*} oldValue\n * @param {*} newValue\n * @returns {boolean}\n */\nexport function pointsAreEqual(oldValue, newValue)\n{\n    if (oldValue.length !== newValue.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < oldValue.length; i++)\n    {\n        if (oldValue[i] !== newValue[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Determine value is type of Point or ObservablePoint\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/utils.js#L48\n *\n * @param {*} value\n * @returns {boolean}\n */\nexport function isPointType(value)\n{\n    return value instanceof Point || value instanceof ObservablePoint;\n}\n\n/**\n * Event handlers\n *\n * @type {string[]}\n */\nexport const eventHandlers = [\n    'click',\n    'mousedown',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'mouseupoutside',\n    'tap',\n    'touchstart',\n    'touchmove',\n    'touchend',\n    'touchendoutside',\n    'pointercancel',\n    'pointerout',\n    'pointerover',\n    'pointertap',\n    'pointerdown',\n    'pointerup',\n    'pointerupoutside',\n    'pointermove',\n    'rightclick',\n    'rightdown',\n    'rightup',\n    'rightupoutside',\n    'touchcancel',\n    'touchendoutside',\n    'touchmove',\n    'touchstart',\n];\n\n/**\n * Set value on a PIXI.DisplayObject\n * See https://github.com/Izzimach/react-pixi/blob/a25196251a13ed9bb116a8576d93e9fceac2a14c/src/ReactPIXI.js#L114\n *\n * @param {PIXI.DisplayObject} instance\n * @param {string} prop\n * @param {*} value\n */\nexport function setValue(instance, prop, value)\n{\n    if (isPointType(instance[prop]) && isPointType(value))\n    {\n    // copy value\n        instance[prop].copyFrom(value);\n    }\n    else if (isPointType(instance[prop]))\n    {\n    // parse value if a non-Point type is being assigned to a Point type\n        const coordinates = parsePoint(value);\n\n        invariant(\n            typeof coordinates !== 'undefined' && coordinates.length > 0 && coordinates.length < 3,\n            'The property `%s` is a `Point` and must be set to a comma-separated string of '\n        + 'either coordinates, an array containing coordinates, or a Point.',\n            prop,\n            JSON.stringify(value),\n            typeof value\n        );\n\n        instance[prop].set(coordinates.shift(), coordinates.shift());\n    }\n    else\n    {\n    // just hard assign value\n        instance[prop] = value;\n    }\n}\n","export const isFunction = (...args) => args.every((v) => typeof v === 'function');\n\nexport const isObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]';\n\nexport const hasKey = (collection) =>\n{\n    let coll = collection;\n\n    if (!Array.isArray(coll))\n    {\n        if (isObject(collection))\n        {\n            coll = Object.keys(collection);\n        }\n        else\n        {\n            throw new Error('collection needs to be an Array or Object');\n        }\n    }\n\n    const index = {};\n\n    coll.forEach((key) =>\n    {\n        index[key] = true;\n    });\n\n    return (key) => typeof index[key] !== 'undefined';\n};\n\nexport const not\n  = (boolFn) =>\n      (...args) =>\n          !boolFn(...args);\n\nexport const lcFirst = (value) =>\n    value.charAt(0).toLowerCase() + value.substring(1);\n","import { Texture } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nimport { eventHandlers, setValue } from './pixi';\nimport invariant from '../utils/invariant';\nimport { not, hasKey } from '../helpers';\n\nexport const CHILDREN = 'children';\n/**\n * Reserved props\n *\n * @type {Object}\n */\nexport const PROPS_RESERVED = {\n    [CHILDREN]: true,\n    parent: true,\n    worldAlpha: true,\n    worldTransform: true,\n    worldVisible: true,\n};\n\n/**\n * Default display object props\n * See https://github.com/michalochman/react-pixi-fiber/blob/a4dbddbef0ffbf0f563c64d30766ea28222a51ea/src/props.js#L9\n *\n * @type {Object}\n */\nexport const PROPS_DISPLAY_OBJECT = {\n    alpha: 1,\n    buttonMode: false,\n    cacheAsBitmap: false,\n    cursor: null,\n    filterArea: null,\n    filters: null,\n    hitArea: null,\n    interactive: false,\n    mask: null,\n    pivot: 0,\n    position: 0,\n    renderable: true,\n    rotation: 0,\n    scale: 1,\n    skew: 0,\n    transform: null,\n    visible: true,\n    x: 0,\n    y: 0,\n};\n\n/**\n * Helper util for fetching the texture from props\n * Can be either texture or image\n *\n * @param {string} elementType\n * @param {PIXI.Container} root\n * @param {object} props\n * @returns {PIXI.Texture|null}\n */\nexport const getTextureFromProps = (elementType, root, props = {}) =>\n{\n    const emitChange = (texture) =>\n        requestAnimationFrame(() =>\n        {\n            texture?.__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`);\n        });\n\n    // eslint-disable-next-line consistent-return\n    const check = (inType, validator) =>\n    {\n        if (props.hasOwnProperty(inType))\n        {\n            const valid\n        = validator.typeofs.some((t) => typeof props[inType] === t)\n        || validator.instanceofs.some((i) => props[inType] instanceof i);\n\n            invariant(valid, `${elementType} ${inType} prop is invalid`);\n\n            return props[inType];\n        }\n    };\n\n    if (props.texture)\n    {\n        invariant(props.texture instanceof Texture, `${elementType} texture needs to be typeof \\`Texture\\``);\n\n        return props.texture;\n    }\n    const result\n      = check('image', { typeofs: ['string'], instanceofs: [HTMLImageElement] })\n      || check('video', { typeofs: ['string'], instanceofs: [HTMLVideoElement] })\n      || check('source', {\n          typeofs: ['string', 'number'],\n          instanceofs: [HTMLImageElement, HTMLVideoElement, HTMLCanvasElement, Texture],\n      });\n\n    invariant(!!result, `${elementType} could not get texture from props`);\n\n    const texture = Texture.from(result);\n\n    texture.__reactpixi = { root };\n    texture.once('update', emitChange);\n    texture.once('loaded', emitChange);\n\n    if (texture.valid)\n    {\n        emitChange(texture);\n    }\n\n    return texture;\n};\n\nconst filterProps = not(hasKey([...Object.keys(PROPS_RESERVED), ...eventHandlers]));\n\n/**\n * Apply default props on Display Object instance (which are all components)\n *\n * @param {PIXI.DisplayObject} instance\n * @param {Object} oldProps\n * @param {Object} newProps\n */\nexport function applyDefaultProps(instance, oldProps, newProps)\n{\n    let changed = false;\n\n    invariant(\n        DisplayObject.prototype.isPrototypeOf(instance),\n        'instance needs to be typeof `DisplayObject`, got `%s`',\n        typeof instance\n    );\n\n    // update event handlers\n    if (!newProps.ignoreEvents)\n    {\n        const hasRemoveListener = typeof instance.removeListener === 'function';\n        const hasOn = typeof instance.on === 'function';\n\n        for (let i = 0; i < eventHandlers.length; i++)\n        {\n            const evt = eventHandlers[i];\n\n            if (oldProps[evt] !== newProps[evt])\n            {\n                changed = true;\n                if (typeof oldProps[evt] === 'function' && hasRemoveListener)\n                {\n                    instance.removeListener(evt, oldProps[evt]);\n                }\n                if (typeof newProps[evt] === 'function' && hasOn)\n                {\n                    instance.on(evt, newProps[evt]);\n                }\n            }\n        }\n    }\n\n    const newPropKeys = Object.keys(newProps || {});\n\n    // hard overwrite all props? can speed up performance\n    if (newProps.overwriteProps)\n    {\n        for (let i = 0; i < newPropKeys.length; i++)\n        {\n            const p = newPropKeys[i];\n\n            if (oldProps[p] !== newProps[p])\n            {\n                changed = true;\n                setValue(instance, p, newProps[p]);\n            }\n        }\n\n        // TODO: previously this returned nothing ie. falsy, should we explicitly return false here instead or was it always\n        // a subtle bug, test the intention\n        return changed;\n    }\n\n    const props = newPropKeys.filter(filterProps);\n\n    for (let i = 0; i < props.length; i++)\n    {\n        const prop = props[i];\n        const value = newProps[prop];\n\n        if (newProps[prop] !== oldProps[prop])\n        {\n            changed = true;\n        }\n\n        if (value !== undefined)\n        {\n            // set value if defined\n            setValue(instance, prop, value);\n        }\n        else if (prop in PROPS_DISPLAY_OBJECT)\n        {\n            // is a default value, use that\n            console.warn(`setting default value: ${prop}, from: ${instance[prop]} to: ${value} for`, instance);\n            changed = true;\n            setValue(instance, prop, PROPS_DISPLAY_OBJECT[prop]);\n        }\n        else\n        {\n            console.warn(`ignoring prop: ${prop}, from ${instance[prop]} to ${value} for`, instance);\n        }\n    }\n\n    return changed;\n}\n","import { BitmapText as PixiBitmapText } from '@pixi/text-bitmap';\n\nconst BitmapText = (root, props) =>\n{\n    const { text, style } = props;\n\n    return new PixiBitmapText(text, style);\n};\n\nexport default BitmapText;\n","import { Container as PixiContainer } from '@pixi/display';\n\nconst Container = () => new PixiContainer();\n\nexport default Container;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","import { Graphics as PixiGraphics } from '@pixi/graphics';\nimport { applyDefaultProps } from '../utils/props';\nimport invariant from '../utils/invariant';\n\nconst Graphics = (root, { geometry }) =>\n{\n    invariant(!geometry || geometry instanceof PixiGraphics, `Graphics geometry needs to be a \\`Graphics\\``);\n    const g = geometry ? new PixiGraphics(geometry.geometry) : new PixiGraphics();\n\n    g.applyProps = (instance, oldProps, newProps) =>\n    {\n        const { draw, geometry, ...props } = newProps;\n        let changed = applyDefaultProps(instance, oldProps, props);\n\n        if (oldProps.draw !== draw && typeof draw === 'function')\n        {\n            changed = true;\n            draw.call(g, g);\n        }\n\n        return changed;\n    };\n\n    return g;\n};\n\nexport default Graphics;\n","import { NineSlicePlane as PixiNineSlicePlane } from '@pixi/mesh-extras';\nimport { getTextureFromProps, applyDefaultProps } from '../utils/props';\n\nconst NineSlicePlane = (root, props) =>\n{\n    const { leftWidth = 10, topHeight = 10, rightWidth = 10, bottomHeight = 10 } = props;\n    const texture = getTextureFromProps('NineSlicePlane', root, props);\n\n    const nineSlicePlane = new PixiNineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight);\n\n    nineSlicePlane.applyProps = (instance, oldProps, newProps) =>\n    {\n        const { image, texture, ...props } = newProps;\n        let changed = applyDefaultProps(instance, oldProps, props);\n\n        if (image || texture)\n        {\n            // change = true not required for image, getTextureFromProps will call update\n            if (texture !== oldProps.texture)\n            {\n                changed = true;\n            }\n            instance.texture = getTextureFromProps('NineSlicePlane', root, newProps);\n        }\n\n        return changed;\n    };\n\n    return nineSlicePlane;\n};\n\nexport default NineSlicePlane;\n","import { ParticleContainer as PixiParticleContainer } from '@pixi/particle-container';\n\nconst ParticleContainer = (root, props) =>\n{\n    const { maxSize = 1500, batchSize = 16384, autoResize = false } = props;\n\n    const properties = {\n        ...{\n            vertices: false,\n            scale: true,\n            position: true,\n            rotation: true,\n            uvs: true,\n            tint: true,\n        },\n        ...(props.properties || {}),\n    };\n\n    const destroyOptions = {\n        ...{\n            children: false,\n            texture: false,\n            baseTexture: false,\n        },\n        ...(props.destroyOptions || {}),\n    };\n\n    const container = new PixiParticleContainer(maxSize, properties, batchSize, autoResize);\n\n    container.willUnmount = (instance, child, parent) =>\n    {\n        instance.destroy(destroyOptions);\n    };\n\n    return container;\n};\n\nexport default ParticleContainer;\n","import { Sprite as PixiSprite } from '@pixi/sprite';\nimport { getTextureFromProps, applyDefaultProps } from '../utils/props';\n\nconst Sprite = (root, props) =>\n{\n    const sprite = new PixiSprite(getTextureFromProps('Sprite', root, props));\n\n    sprite.applyProps = (instance, oldProps, newProps) =>\n    {\n        const { image, texture, ...props } = newProps;\n        let changed = applyDefaultProps(instance, oldProps, props);\n\n        if ((texture && oldProps.texture !== newProps.texture) || (image && oldProps.image !== newProps.image))\n        {\n            // getTextureFromProps will call update for image\n            if (oldProps.texture !== newProps.texture)\n            {\n                changed = true;\n            }\n            instance.texture = getTextureFromProps('Sprite', root, newProps);\n        }\n\n        return changed;\n    };\n\n    return sprite;\n};\n\nexport default Sprite;\n","import { Texture } from '@pixi/core';\nimport { AnimatedSprite as PixiAnimatedSprite } from '@pixi/sprite-animated';\nimport { applyDefaultProps } from '../utils/props';\nimport invariant from '../utils/invariant';\n\nconst AnimatedSprite = (root, props) =>\n{\n    const { textures, images, isPlaying = true, initialFrame } = props;\n\n    const makeTexture = (textures) =>\n        textures.map((texture) =>\n        {\n            invariant(\n                texture instanceof Texture || texture?.texture,\n                `AnimationSprite texture needs to be an array of \\`Texture\\` or \\`{ texture: Texture, time:\n                number }\\``\n            );\n\n            return texture;\n        });\n\n    const animatedSprite = images ? PixiAnimatedSprite.fromImages(images) : new PixiAnimatedSprite(makeTexture(textures));\n\n    animatedSprite[isPlaying ? 'gotoAndPlay' : 'gotoAndStop'](initialFrame || 0);\n    animatedSprite.applyProps = (instance, oldProps, newProps) =>\n    {\n        const { textures, isPlaying, initialFrame, images, ...props } = newProps;\n\n        let changed = applyDefaultProps(instance, oldProps, props);\n\n        if (images && oldProps.images !== images)\n        {\n            const newTextures = [];\n\n            for (let i = 0; i < images.length; ++i)\n            {\n                newTextures.push(Texture.from(images[i]));\n            }\n            instance.textures = newTextures;\n            changed = true;\n        }\n\n        if (textures && oldProps.textures !== textures)\n        {\n            instance.textures = makeTexture(textures);\n            changed = true;\n        }\n\n        if (isPlaying !== oldProps.isPlaying || initialFrame !== oldProps.initialFrame)\n        {\n            const frame = typeof initialFrame === 'number' ? initialFrame : animatedSprite.currentFrame || 0;\n\n            animatedSprite[isPlaying ? 'gotoAndPlay' : 'gotoAndStop'](frame);\n            changed = true;\n        }\n\n        return changed;\n    };\n\n    return animatedSprite;\n};\n\nexport default AnimatedSprite;\n","import { Text as PixiText } from '@pixi/text';\nimport { Sprite as PixiSprite } from '@pixi/sprite';\n\nconst Text = (root, props) =>\n{\n    const { text = '', style = {}, isSprite } = props;\n    const pixiText = new PixiText(text, style);\n\n    if (isSprite)\n    {\n        pixiText.updateText();\n\n        return new PixiSprite(pixiText.texture);\n    }\n\n    return pixiText;\n};\n\nexport default Text;\n","import { TilingSprite as PixiTilingSprite } from '@pixi/sprite-tiling';\nimport { getTextureFromProps, applyDefaultProps } from '../utils/props';\nimport { parsePoint, pointsAreEqual } from '../utils/pixi';\n\nconst TilingSprite = (root, props) =>\n{\n    const { width = 100, height = 100 } = props;\n    const texture = getTextureFromProps('TilingSprite', root, props);\n\n    const ts = new PixiTilingSprite(texture, width, height);\n\n    ts.applyProps = (instance, oldProps, newProps) =>\n    {\n        const { tileScale, tilePosition, image, texture, ...props } = newProps;\n        let changed = applyDefaultProps(instance, oldProps, props);\n\n        if (tilePosition)\n        {\n            const newTilePosition = parsePoint(tilePosition);\n\n            instance.tilePosition.set(...newTilePosition);\n            changed\n                = !pointsAreEqual(\n                    parsePoint(oldProps.tilePosition),\n                    newTilePosition\n                ) || changed;\n        }\n\n        if (tileScale)\n        {\n            const newTileScale = parsePoint(tileScale);\n\n            instance.tileScale.set(...newTileScale);\n            changed\n                = !pointsAreEqual(parsePoint(oldProps.tileScale), newTileScale)\n                || changed;\n        }\n\n        if (image || texture)\n        {\n            // change = true not required for image, getTextureFromProps will call update\n            if (texture !== oldProps.texture)\n            {\n                changed = true;\n            }\n\n            instance.texture = getTextureFromProps('Sprite', root, newProps);\n        }\n\n        return changed;\n    };\n\n    return ts;\n};\n\nexport default TilingSprite;\n","import { DRAW_MODES } from '@pixi/constants';\nimport { SimpleMesh as PixiSimpleMesh } from '@pixi/mesh-extras';\nimport { applyDefaultProps, getTextureFromProps } from '../utils/props';\n\nconst SimpleMesh = (root, props) =>\n{\n    const texture = getTextureFromProps('Mesh', root, props);\n    const { vertices, uvs, indices, drawMode = DRAW_MODES.TRIANGLES } = props;\n\n    const simpleMesh = new PixiSimpleMesh(texture, vertices, uvs, indices, drawMode);\n\n    simpleMesh.applyProps = (instance, oldProps, newProps) =>\n    {\n        const { image, texture, ...props } = newProps;\n        let changed = applyDefaultProps(instance, oldProps, props);\n\n        if (image || texture)\n        {\n            // change = true not required for image, getTextureFromProps will call update\n            if (texture !== oldProps.texture)\n            {\n                changed = true;\n            }\n            instance.texture = getTextureFromProps('Mesh', root, newProps);\n        }\n\n        return changed;\n    };\n\n    return simpleMesh;\n};\n\nexport default SimpleMesh;\n","import { SimpleRope as PixiSimpleRope } from '@pixi/mesh-extras';\nimport invariant from '../utils/invariant';\nimport { getTextureFromProps, applyDefaultProps } from '../utils/props';\n\nconst SimpleRope = (root, props) =>\n{\n    const texture = getTextureFromProps('SimpleRope', root, props);\n    const { points } = props;\n\n    const rope = new PixiSimpleRope(texture, points);\n\n    rope.applyProps = (instance, oldProps, newProps) =>\n    {\n        const { image, texture, ...props } = newProps;\n\n        invariant(Array.isArray(newProps.points), 'SimpleRope points needs to be %s', 'Array<Point>');\n        let changed = applyDefaultProps(instance, oldProps, props);\n\n        if (image || texture)\n        {\n            if (texture !== oldProps.texture)\n            {\n                changed = true;\n            }\n            instance.texture = getTextureFromProps('SimpleRope', root, newProps);\n        }\n\n        return changed;\n    };\n\n    return rope;\n};\n\nexport default SimpleRope;\n","import { applyDefaultProps } from './props';\nimport * as components from '../components';\nimport invariant from '../utils/invariant';\n\n/**\n * Available tag types\n *\n * @type {Object}\n */\nexport const TYPES = {\n    BitmapText: 'BitmapText',\n    Container: 'Container',\n    Graphics: 'Graphics',\n    NineSlicePlane: 'NineSlicePlane',\n    ParticleContainer: 'ParticleContainer',\n    Sprite: 'Sprite',\n    AnimatedSprite: 'AnimatedSprite',\n    Text: 'Text',\n    TilingSprite: 'TilingSprite',\n    SimpleMesh: 'SimpleMesh',\n    SimpleRope: 'SimpleRope',\n};\n\nconst ELEMENTS = Object.keys(TYPES).reduce((elements, type) => ({ ...elements, [type]: components[type] }), {});\n\n/**\n * Inject types\n *\n * @type {Object}\n */\nexport const TYPES_INJECTED = {};\n\n/**\n * Create an element based on tag type\n * Similar to react-dom's `React.createElement()`\n *\n * @param {string} type Element type\n * @param {Object} props Component props\n * @param {Object} root Root instance\n */\nexport function createElement(type, props = {}, root = null)\n{\n    const fn = ELEMENTS[type];\n\n    let instance;\n    let applyProps;\n\n    if (typeof fn === 'function')\n    {\n        instance = fn(root, props);\n    }\n\n    if (!instance)\n    {\n    // not found, is there any injected custom component?\n        const injected = TYPES_INJECTED[type];\n\n        if (injected)\n        {\n            instance = injected.create(props, { root });\n            instance.didMount = injected.didMount ? injected.didMount.bind(instance) : undefined;\n            instance.willUnmount = injected.willUnmount ? injected.willUnmount.bind(instance) : undefined;\n            instance.applyProps = injected.applyProps ? injected.applyProps.bind(instance) : undefined;\n            instance.config = injected.config;\n        }\n    }\n\n    // apply initial props!\n    if (instance)\n    {\n        instance.__reactpixi = {\n            root\n        };\n\n        applyProps = typeof instance?.applyProps === 'function' ? instance.applyProps : applyDefaultProps;\n        applyProps(instance, {}, props);\n    }\n\n    return instance;\n}\n\n/**\n * Create Component\n *\n * @param {string} type\n * @param {Object} lifecycle methods\n */\nexport function PixiComponent(type, lifecycle)\n{\n    invariant(!!type, 'Expect type to be defined, got `%s`', type);\n    invariant(!TYPES[type], 'Component `%s` could not be created, already exists in default components.', type);\n\n    TYPES_INJECTED[type] = lifecycle;\n\n    return type;\n}\n","/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var enableSchedulerDebugging = false;\nvar enableProfiling = false;\nvar frameYieldMs = 5;\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  return heap.length === 0 ? null : heap[0];\n}\nfunction pop(heap) {\n  if (heap.length === 0) {\n    return null;\n  }\n\n  var first = heap[0];\n  var last = heap.pop();\n\n  if (last !== first) {\n    heap[0] = last;\n    siftDown(heap, last, 0);\n  }\n\n  return first;\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (index > 0) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n  var halfLength = length >>> 1;\n\n  while (index < halfLength) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nfunction markTaskErrored(task, ms) {\n}\n\n/* eslint-disable no-var */\n\nvar hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  var localPerformance = performance;\n\n  exports.unstable_now = function () {\n    return localPerformance.now();\n  };\n} else {\n  var localDate = Date;\n  var initialTime = localDate.now();\n\n  exports.unstable_now = function () {\n    return localDate.now() - initialTime;\n  };\n} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;\nvar localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nvar isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n      } else {\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nvar isMessageLoopRunning = false;\nvar scheduledHostCallback = null;\nvar taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\n\nvar frameInterval = frameYieldMs;\nvar startTime = -1;\n\nfunction shouldYieldToHost() {\n  var timeElapsed = exports.unstable_now() - startTime;\n\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  } // The main thread has been blocked for a non-negligible amount of time. We\n\n\n  return true;\n}\n\nfunction requestPaint() {\n\n}\n\nfunction forceFrameRate(fps) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');\n    return;\n  }\n\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nvar performWorkUntilDeadline = function () {\n  if (scheduledHostCallback !== null) {\n    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n\n    startTime = currentTime;\n    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `scheduledHostCallback` errors, then\n    // `hasMoreWork` will remain true, and we'll continue the work loop.\n\n    var hasMoreWork = true;\n\n    try {\n      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n        scheduledHostCallback = null;\n      }\n    }\n  } else {\n    isMessageLoopRunning = false;\n  } // Yielding to the browser will give it a chance to paint, so we can\n};\n\nvar schedulePerformWorkUntilDeadline;\n\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = function () {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  schedulePerformWorkUntilDeadline = function () {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = function () {\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback(callback) {\n  scheduledHostCallback = callback;\n\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(callback, ms) {\n  taskTimeoutID = localSetTimeout(function () {\n    callback(exports.unstable_now());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = -1;\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  null;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = shouldYieldToHost;\nexports.unstable_wrapCallback = unstable_wrapCallback;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","/**\n * @license React\n * react-reconciler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  module.exports = function $$$reconciler($$$hostConfig) {\n    var exports = {};\n'use strict';\n\nvar React = require('react');\nvar Scheduler = require('scheduler');\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nvar suppressWarning = false;\nfunction setSuppressWarning(newSuppressWarning) {\n  {\n    suppressWarning = newSuppressWarning;\n  }\n} // In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      printWarning('warn', format, args);\n    }\n  }\n}\nfunction error(format) {\n  {\n    if (!suppressWarning) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar assign = Object.assign;\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\nfunction get(key) {\n  return key._reactInternals;\n}\nfunction set(key, value) {\n  key._reactInternals = value;\n}\n\n// -----------------------------------------------------------------------------\n// the react-reconciler package.\n\nvar enableNewReconciler = false; // Support legacy Primer support on internal FB www\n\nvar enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\nvar enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz\nvar warnAboutStringRefs = false; // -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\n\nvar enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState\n\nvar enableProfilerTimer = true; // Record durations for commit and passive effects phases.\n\nvar enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\n\nvar FunctionComponent = 0;\nvar ClassComponent = 1;\nvar IndeterminateComponent = 2; // Before we know whether it is function or class\n\nvar HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\nvar HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\nvar HostComponent = 5;\nvar HostText = 6;\nvar Fragment = 7;\nvar Mode = 8;\nvar ContextConsumer = 9;\nvar ContextProvider = 10;\nvar ForwardRef = 11;\nvar Profiler = 12;\nvar SuspenseComponent = 13;\nvar MemoComponent = 14;\nvar SimpleMemoComponent = 15;\nvar LazyComponent = 16;\nvar IncompleteClassComponent = 17;\nvar DehydratedFragment = 18;\nvar SuspenseListComponent = 19;\nvar ScopeComponent = 21;\nvar OffscreenComponent = 22;\nvar LegacyHiddenComponent = 23;\nvar CacheComponent = 24;\nvar TracingMarkerComponent = 25;\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_SCOPE_TYPE = Symbol.for('react.scope');\nvar REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nfunction getWrappedName$1(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n} // Keep in sync with shared/getComponentNameFromType\n\n\nfunction getContextName$1(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentNameFromFiber(fiber) {\n  var tag = fiber.tag,\n      type = fiber.type;\n\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n\n    case ContextConsumer:\n      var context = type;\n      return getContextName$1(context) + '.Consumer';\n\n    case ContextProvider:\n      var provider = type;\n      return getContextName$1(provider._context) + '.Provider';\n\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n\n    case ForwardRef:\n      return getWrappedName$1(type, type.render, 'ForwardRef');\n\n    case Fragment:\n      return 'Fragment';\n\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n\n    case HostPortal:\n      return 'Portal';\n\n    case HostRoot:\n      return 'Root';\n\n    case HostText:\n      return 'Text';\n\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n\n      return 'Mode';\n\n    case OffscreenComponent:\n      return 'Offscreen';\n\n    case Profiler:\n      return 'Profiler';\n\n    case ScopeComponent:\n      return 'Scope';\n\n    case SuspenseComponent:\n      return 'Suspense';\n\n    case SuspenseListComponent:\n      return 'SuspenseList';\n\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      break;\n\n  }\n\n  return null;\n}\n\n// Don't change these two values. They're used by React Dev Tools.\nvar NoFlags =\n/*                      */\n0;\nvar PerformedWork =\n/*                */\n1; // You can change the rest (and add more).\n\nvar Placement =\n/*                    */\n2;\nvar Update =\n/*                       */\n4;\nvar ChildDeletion =\n/*                */\n16;\nvar ContentReset =\n/*                 */\n32;\nvar Callback =\n/*                     */\n64;\nvar DidCapture =\n/*                   */\n128;\nvar ForceClientRender =\n/*            */\n256;\nvar Ref =\n/*                          */\n512;\nvar Snapshot =\n/*                     */\n1024;\nvar Passive =\n/*                      */\n2048;\nvar Hydrating =\n/*                    */\n4096;\nvar Visibility =\n/*                   */\n8192;\nvar StoreConsistency =\n/*             */\n16384;\nvar LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\nvar HostEffectMask =\n/*               */\n32767; // These are not really side effects, but we still reuse this field.\n\nvar Incomplete =\n/*                   */\n32768;\nvar ShouldCapture =\n/*                */\n65536;\nvar ForceUpdateForLegacySuspense =\n/* */\n131072;\nvar Forked =\n/*                       */\n1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\n\nvar RefStatic =\n/*                    */\n2097152;\nvar LayoutStatic =\n/*                 */\n4194304;\nvar PassiveStatic =\n/*                */\n8388608; // These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\n\nvar MountLayoutDev =\n/*               */\n16777216;\nvar MountPassiveDev =\n/*              */\n33554432; // Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nvar BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n// flag logic (see #20043)\nUpdate | Snapshot | ( 0);\nvar MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\nvar LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\nvar PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\n\nvar StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nfunction getNearestMountedFiber(fiber) {\n  var node = fiber;\n  var nearestMounted = fiber;\n\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    var nextNode = node;\n\n    do {\n      node = nextNode;\n\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  } // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n\n\n  return null;\n}\nfunction isFiberMounted(fiber) {\n  return getNearestMountedFiber(fiber) === fiber;\n}\nfunction isMounted(component) {\n  {\n    var owner = ReactCurrentOwner.current;\n\n    if (owner !== null && owner.tag === ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n\n      if (!instance._warnedAboutRefsInRender) {\n        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');\n      }\n\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = get(component);\n\n  if (!fiber) {\n    return false;\n  }\n\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n\n    return fiber;\n  } // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n\n\n  var a = fiber;\n  var b = alternate;\n\n  while (true) {\n    var parentA = a.return;\n\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n\n    var parentB = parentA.alternate;\n\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      var nextParent = parentA.return;\n\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      } // If there's no parent, we're at the root.\n\n\n      break;\n    } // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n\n\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n\n        child = child.sibling;\n      } // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n\n\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n\n        _child = _child.sibling;\n      }\n\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n\n          _child = _child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  } // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n\n\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  } // Otherwise B has to be current branch.\n\n\n  return alternate;\n}\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    var match = findCurrentHostFiberImpl(child);\n\n    if (match !== null) {\n      return match;\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nfunction findCurrentHostFiberWithNoPortals(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  var child = node.child;\n\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      var match = findCurrentHostFiberWithNoPortalsImpl(child);\n\n      if (match !== null) {\n        return match;\n      }\n    }\n\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// This is a host config that's used for the `react-reconciler` package on npm.\n// It is only used by third-party renderers.\n//\n// Its API lets you pass the host config as an argument.\n// However, inside the `react-reconciler` we treat host config as a module.\n// This file is a shim between two worlds.\n//\n// It works because the `react-reconciler` bundle is wrapped in something like:\n//\n// module.exports = function ($$$config) {\n//   /* reconciler code */\n// }\n//\n// So `$$$config` looks like a global variable, but it's\n// really an argument to a top-level wrapping function.\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\n// eslint-disable-line no-undef\nvar getPublicInstance = $$$hostConfig.getPublicInstance;\nvar getRootHostContext = $$$hostConfig.getRootHostContext;\nvar getChildHostContext = $$$hostConfig.getChildHostContext;\nvar prepareForCommit = $$$hostConfig.prepareForCommit;\nvar resetAfterCommit = $$$hostConfig.resetAfterCommit;\nvar createInstance = $$$hostConfig.createInstance;\nvar appendInitialChild = $$$hostConfig.appendInitialChild;\nvar finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\nvar prepareUpdate = $$$hostConfig.prepareUpdate;\nvar shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\nvar createTextInstance = $$$hostConfig.createTextInstance;\nvar scheduleTimeout = $$$hostConfig.scheduleTimeout;\nvar cancelTimeout = $$$hostConfig.cancelTimeout;\nvar noTimeout = $$$hostConfig.noTimeout;\nvar isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\nvar warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\nvar supportsMutation = $$$hostConfig.supportsMutation;\nvar supportsPersistence = $$$hostConfig.supportsPersistence;\nvar supportsHydration = $$$hostConfig.supportsHydration;\nvar getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\nvar beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\nvar afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\nvar preparePortalMount = $$$hostConfig.preparePortalMount;\nvar prepareScopeUpdate = $$$hostConfig.prepareScopeUpdate;\nvar getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\nvar getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\nvar detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------\n//      Microtasks\n//     (optional)\n// -------------------\n\nvar supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\nvar scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------\n//      Test selectors\n//     (optional)\n// -------------------\n\nvar supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\nvar findFiberRoot = $$$hostConfig.findFiberRoot;\nvar getBoundingRect = $$$hostConfig.getBoundingRect;\nvar getTextContent = $$$hostConfig.getTextContent;\nvar isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\nvar matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\nvar setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\nvar setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------\n//      Mutation\n//     (optional)\n// -------------------\n\nvar appendChild = $$$hostConfig.appendChild;\nvar appendChildToContainer = $$$hostConfig.appendChildToContainer;\nvar commitTextUpdate = $$$hostConfig.commitTextUpdate;\nvar commitMount = $$$hostConfig.commitMount;\nvar commitUpdate = $$$hostConfig.commitUpdate;\nvar insertBefore = $$$hostConfig.insertBefore;\nvar insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\nvar removeChild = $$$hostConfig.removeChild;\nvar removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\nvar resetTextContent = $$$hostConfig.resetTextContent;\nvar hideInstance = $$$hostConfig.hideInstance;\nvar hideTextInstance = $$$hostConfig.hideTextInstance;\nvar unhideInstance = $$$hostConfig.unhideInstance;\nvar unhideTextInstance = $$$hostConfig.unhideTextInstance;\nvar clearContainer = $$$hostConfig.clearContainer; // -------------------\n//     Persistence\n//     (optional)\n// -------------------\n\nvar cloneInstance = $$$hostConfig.cloneInstance;\nvar createContainerChildSet = $$$hostConfig.createContainerChildSet;\nvar appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;\nvar finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;\nvar replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\nvar cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\nvar cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------\n//     Hydration\n//     (optional)\n// -------------------\n\nvar canHydrateInstance = $$$hostConfig.canHydrateInstance;\nvar canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\nvar canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;\nvar isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;\nvar isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;\nvar getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\nvar registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;\nvar getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\nvar getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\nvar getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;\nvar getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\nvar hydrateInstance = $$$hostConfig.hydrateInstance;\nvar hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\nvar hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\nvar getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\nvar commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\nvar commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;\nvar clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\nvar clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;\nvar shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;\nvar didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;\nvar didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;\nvar didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;\nvar didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\nvar didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\nvar didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\nvar didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\nvar didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\nvar didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\nvar didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\nvar didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\nvar didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;\nvar didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;\nvar didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;\nvar errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\n\nfunction describeClassComponentFrame(ctor, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(ctor, true);\n  }\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar valueStack = [];\nvar fiberStack;\n\n{\n  fiberStack = [];\n}\n\nvar index = -1;\n\nfunction createCursor(defaultValue) {\n  return {\n    current: defaultValue\n  };\n}\n\nfunction pop(cursor, fiber) {\n  if (index < 0) {\n    {\n      error('Unexpected pop.');\n    }\n\n    return;\n  }\n\n  {\n    if (fiber !== fiberStack[index]) {\n      error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n  valueStack[index] = null;\n\n  {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push(cursor, value, fiber) {\n  index++;\n  valueStack[index] = cursor.current;\n\n  {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nvar warnedAboutMissingGetChildContext;\n\n{\n  warnedAboutMissingGetChildContext = {};\n}\n\nvar emptyContextObject = {};\n\n{\n  Object.freeze(emptyContextObject);\n} // A cursor to the current merged context object on the stack.\n\n\nvar contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\nvar didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\n\nvar previousContext = emptyContextObject;\n\nfunction getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n  {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(workInProgress, unmaskedContext, maskedContext) {\n  {\n    var instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(workInProgress, unmaskedContext) {\n  {\n    var type = workInProgress.type;\n    var contextTypes = type.contextTypes;\n\n    if (!contextTypes) {\n      return emptyContextObject;\n    } // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n\n    var instance = workInProgress.stateNode;\n\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    var context = {};\n\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    {\n      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n\n\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged() {\n  {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type) {\n  {\n    var childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber) {\n  {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(fiber, context, didChange) {\n  {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(fiber, type, parentContext) {\n  {\n    var instance = fiber.stateNode;\n    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n    if (typeof instance.getChildContext !== 'function') {\n      {\n        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n\n          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n\n      return parentContext;\n    }\n\n    var childContext = instance.getChildContext();\n\n    for (var contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\");\n      }\n    }\n\n    {\n      var name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return assign({}, parentContext, childContext);\n  }\n}\n\nfunction pushContextProvider(workInProgress) {\n  {\n    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n\n    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(workInProgress, type, didChange) {\n  {\n    var instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      var mergedContext = processChildContext(workInProgress, type, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.\n\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber) {\n  {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    var node = fiber;\n\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n\n        case ClassComponent:\n          {\n            var Component = node.type;\n\n            if (isContextProvider(Component)) {\n              return node.stateNode.__reactInternalMemoizedMergedChildContext;\n            }\n\n            break;\n          }\n      }\n\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar LegacyRoot = 0;\nvar ConcurrentRoot = 1;\n\nvar NoMode =\n/*                         */\n0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\nvar ConcurrentMode =\n/*                 */\n1;\nvar ProfileMode =\n/*                    */\n2;\nvar StrictLegacyMode =\n/*               */\n8;\nvar StrictEffectsMode =\n/*              */\n16;\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\nvar clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\nvar log = Math.log;\nvar LN2 = Math.LN2;\n\nfunction clz32Fallback(x) {\n  var asUint = x >>> 0;\n\n  if (asUint === 0) {\n    return 32;\n  }\n\n  return 31 - (log(asUint) / LN2 | 0) | 0;\n}\n\n// If those values are changed that package should be rebuilt and redeployed.\n\nvar TotalLanes = 31;\nvar NoLanes =\n/*                        */\n0;\nvar NoLane =\n/*                          */\n0;\nvar SyncLane =\n/*                        */\n1;\nvar InputContinuousHydrationLane =\n/*    */\n2;\nvar InputContinuousLane =\n/*             */\n4;\nvar DefaultHydrationLane =\n/*            */\n8;\nvar DefaultLane =\n/*                     */\n16;\nvar TransitionHydrationLane =\n/*                */\n32;\nvar TransitionLanes =\n/*                       */\n4194240;\nvar TransitionLane1 =\n/*                        */\n64;\nvar TransitionLane2 =\n/*                        */\n128;\nvar TransitionLane3 =\n/*                        */\n256;\nvar TransitionLane4 =\n/*                        */\n512;\nvar TransitionLane5 =\n/*                        */\n1024;\nvar TransitionLane6 =\n/*                        */\n2048;\nvar TransitionLane7 =\n/*                        */\n4096;\nvar TransitionLane8 =\n/*                        */\n8192;\nvar TransitionLane9 =\n/*                        */\n16384;\nvar TransitionLane10 =\n/*                       */\n32768;\nvar TransitionLane11 =\n/*                       */\n65536;\nvar TransitionLane12 =\n/*                       */\n131072;\nvar TransitionLane13 =\n/*                       */\n262144;\nvar TransitionLane14 =\n/*                       */\n524288;\nvar TransitionLane15 =\n/*                       */\n1048576;\nvar TransitionLane16 =\n/*                       */\n2097152;\nvar RetryLanes =\n/*                            */\n130023424;\nvar RetryLane1 =\n/*                             */\n4194304;\nvar RetryLane2 =\n/*                             */\n8388608;\nvar RetryLane3 =\n/*                             */\n16777216;\nvar RetryLane4 =\n/*                             */\n33554432;\nvar RetryLane5 =\n/*                             */\n67108864;\nvar SomeRetryLane = RetryLane1;\nvar SelectiveHydrationLane =\n/*          */\n134217728;\nvar NonIdleLanes =\n/*                          */\n268435455;\nvar IdleHydrationLane =\n/*               */\n268435456;\nvar IdleLane =\n/*                        */\n536870912;\nvar OffscreenLane =\n/*                   */\n1073741824; // This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\n\nfunction getLabelForLane(lane) {\n  {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\nvar NoTimestamp = -1;\nvar nextTransitionLane = TransitionLane1;\nvar nextRetryLane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes) {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n\n    case InputContinuousLane:\n      return InputContinuousLane;\n\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n\n    case DefaultLane:\n      return DefaultLane;\n\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n\n    case IdleLane:\n      return IdleLane;\n\n    case OffscreenLane:\n      return OffscreenLane;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n\n      return lanes;\n  }\n}\n\nfunction getNextLanes(root, wipLanes) {\n  // Early bailout if there's no pending work left.\n  var pendingLanes = root.pendingLanes;\n\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  var nextLanes = NoLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n\n  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n  if (nonIdlePendingLanes !== NoLanes) {\n    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  } // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n\n\n  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n  // bother waiting until the root is complete.\n  (wipLanes & suspendedLanes) === NoLanes) {\n    var nextLane = getHighestPriorityLane(nextLanes);\n    var wipLane = getHighestPriorityLane(wipLanes);\n\n    if ( // Tests whether the next lane is equal or lower priority than the wip\n    // one. This works because the bits decrease in priority as you go left.\n    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n    // only difference between default updates and transition updates is that\n    // default updates do not support refresh transitions.\n    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  } // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n\n\n  var entangledLanes = root.entangledLanes;\n\n  if (entangledLanes !== NoLanes) {\n    var entanglements = root.entanglements;\n    var lanes = nextLanes & entangledLanes;\n\n    while (lanes > 0) {\n      var index = pickArbitraryLaneIndex(lanes);\n      var lane = 1 << index;\n      nextLanes |= entanglements[index];\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\nfunction getMostRecentEventTime(root, lanes) {\n  var eventTimes = root.eventTimes;\n  var mostRecentEventTime = NoTimestamp;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var eventTime = eventTimes[index];\n\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane, currentTime) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n\n    default:\n      {\n        error('Should have found matching lanes. This is a bug in React.');\n      }\n\n      return NoTimestamp;\n  }\n}\n\nfunction markStarvedLanesAsExpired(root, currentTime) {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n  var pendingLanes = root.pendingLanes;\n  var suspendedLanes = root.suspendedLanes;\n  var pingedLanes = root.pingedLanes;\n  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n\n  var lanes = pendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    var expirationTime = expirationTimes[index];\n\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n} // This returns the highest priority pending lanes regardless of whether they\n// are suspended.\n\nfunction getHighestPriorityPendingLanes(root) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\nfunction getLanesToRetrySynchronouslyOnError(root) {\n  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n\n  return NoLanes;\n}\nfunction includesSyncLane(lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\nfunction includesNonIdleWork(lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nfunction includesOnlyRetries(lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nfunction includesOnlyNonUrgentLanes(lanes) {\n  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nfunction includesOnlyTransitions(lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\nfunction includesBlockingLane(root, lanes) {\n\n  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\nfunction includesExpiredLane(root, lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\nfunction isTransitionLane(lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\nfunction claimNextTransitionLane() {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  var lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n\n  return lane;\n}\nfunction claimNextRetryLane() {\n  var lane = nextRetryLane;\n  nextRetryLane <<= 1;\n\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n\n  return lane;\n}\nfunction getHighestPriorityLane(lanes) {\n  return lanes & -lanes;\n}\nfunction pickArbitraryLane(lanes) {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nfunction includesSomeLane(a, b) {\n  return (a & b) !== NoLanes;\n}\nfunction isSubsetOfLanes(set, subset) {\n  return (set & subset) === subset;\n}\nfunction mergeLanes(a, b) {\n  return a | b;\n}\nfunction removeLanes(set, subset) {\n  return set & ~subset;\n}\nfunction intersectLanes(a, b) {\n  return a & b;\n} // Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\n\nfunction laneToLanes(lane) {\n  return lane;\n}\nfunction higherPriorityLane(a, b) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\nfunction createLaneMap(initial) {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  var laneMap = [];\n\n  for (var i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n\n  return laneMap;\n}\nfunction markRootUpdated(root, updateLane, eventTime) {\n  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  var eventTimes = root.eventTimes;\n  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n\n  eventTimes[index] = eventTime;\n}\nfunction markRootSuspended(root, suspendedLanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n  var expirationTimes = root.expirationTimes;\n  var lanes = suspendedLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootPinged(root, pingedLanes, eventTime) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\nfunction markRootFinished(root, remainingLanes) {\n  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n  root.pendingLanes = remainingLanes; // Let's try everything again\n\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n  root.entangledLanes &= remainingLanes;\n  var entanglements = root.entanglements;\n  var eventTimes = root.eventTimes;\n  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work\n\n  var lanes = noLongerPendingLanes;\n\n  while (lanes > 0) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n    lanes &= ~lane;\n  }\n}\nfunction markRootEntangled(root, entangledLanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n  var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n  var entanglements = root.entanglements;\n  var lanes = rootEntangledLanes;\n\n  while (lanes) {\n    var index = pickArbitraryLaneIndex(lanes);\n    var lane = 1 << index;\n\n    if ( // Is this one of the newly entangled lanes?\n    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?\n    entanglements[index] & entangledLanes) {\n      entanglements[index] |= entangledLanes;\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction getBumpedLaneForHydration(root, renderLanes) {\n  var renderLane = getHighestPriorityLane(renderLanes);\n  var lane;\n\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  } // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n\n\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\nfunction addFiberToLanesMap(root, fiber, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n    lanes &= ~lane;\n  }\n}\nfunction movePendingFibersToMemoized(root, lanes) {\n\n  if (!isDevToolsPresent) {\n    return;\n  }\n\n  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  var memoizedUpdaters = root.memoizedUpdaters;\n\n  while (lanes > 0) {\n    var index = laneToIndex(lanes);\n    var lane = 1 << index;\n    var updaters = pendingUpdatersLaneMap[index];\n\n    if (updaters.size > 0) {\n      updaters.forEach(function (fiber) {\n        var alternate = fiber.alternate;\n\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\nfunction getTransitionsForLanes(root, lanes) {\n  {\n    return null;\n  }\n}\n\nvar DiscreteEventPriority = SyncLane;\nvar ContinuousEventPriority = InputContinuousLane;\nvar DefaultEventPriority = DefaultLane;\nvar IdleEventPriority = IdleLane;\nvar currentUpdatePriority = NoLane;\nfunction getCurrentUpdatePriority() {\n  return currentUpdatePriority;\n}\nfunction setCurrentUpdatePriority(newPriority) {\n  currentUpdatePriority = newPriority;\n}\nfunction runWithPriority(priority, fn) {\n  var previousPriority = currentUpdatePriority;\n\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\nfunction higherEventPriority(a, b) {\n  return a !== 0 && a < b ? a : b;\n}\nfunction lowerEventPriority(a, b) {\n  return a === 0 || a > b ? a : b;\n}\nfunction isHigherEventPriority(a, b) {\n  return a !== 0 && a < b;\n}\nfunction lanesToEventPriority(lanes) {\n  var lane = getHighestPriorityLane(lanes);\n\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n\n  return IdleEventPriority;\n}\n\n// This module only exists as an ESM wrapper around the external CommonJS\nvar scheduleCallback = Scheduler.unstable_scheduleCallback;\nvar cancelCallback = Scheduler.unstable_cancelCallback;\nvar shouldYield = Scheduler.unstable_shouldYield;\nvar requestPaint = Scheduler.unstable_requestPaint;\nvar now = Scheduler.unstable_now;\nvar ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nvar UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nvar NormalPriority = Scheduler.unstable_NormalPriority;\nvar IdlePriority = Scheduler.unstable_IdlePriority;\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nvar unstable_yieldValue = Scheduler.unstable_yieldValue;\nvar unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;\n\nvar rendererID = null;\nvar injectedHook = null;\nvar injectedProfilingHooks = null;\nvar hasLoggedError = false;\nvar isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n\n  if (!hook.supportsFiber) {\n    {\n      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');\n    } // DevTools exists, even though it doesn't support Fiber.\n\n\n    return true;\n  }\n\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = assign({}, internals, {\n        getLaneLabelMap: getLaneLabelMap,\n        injectProfilingHooks: injectProfilingHooks\n      });\n    }\n\n    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    {\n      error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\nfunction onScheduleRoot(root, children) {\n  {\n    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if ( !hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitRoot(root, eventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      var didError = (root.current.flags & DidCapture) === DidCapture;\n\n      if (enableProfilerTimer) {\n        var schedulerPriority;\n\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriority = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriority = IdlePriority;\n            break;\n\n          default:\n            schedulerPriority = NormalPriority;\n            break;\n        }\n\n        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onPostCommitRoot(root) {\n  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction onCommitUnmount(fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n\n          error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\nfunction setIsStrictModeForDevtools(newIsStrictMode) {\n  {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n\n            error('React instrumentation encountered an error: %s', err);\n          }\n        }\n      }\n    }\n  }\n} // Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks) {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap() {\n  {\n    var map = new Map();\n    var lane = 1;\n\n    for (var index = 0; index < TotalLanes; index++) {\n      var label = getLabelForLane(lane);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  }\n}\n\nfunction markCommitStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\nfunction markCommitStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\nfunction markComponentRenderStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\nfunction markComponentRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentPassiveEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectMountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStarted(fiber) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\nfunction markComponentLayoutEffectUnmountStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\nfunction markComponentErrored(fiber, thrownValue, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\nfunction markComponentSuspended(fiber, wakeable, lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\nfunction markLayoutEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\nfunction markPassiveEffectsStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\nfunction markPassiveEffectsStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\nfunction markRenderStarted(lanes) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\nfunction markRenderYielded() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\nfunction markRenderStopped() {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\nfunction markRenderScheduled(lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\nfunction markForceUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\nfunction markStateUpdateScheduled(fiber, lane) {\n  {\n    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar syncQueue = null;\nvar includesLegacySyncCallbacks = false;\nvar isFlushingSyncQueue = false;\nfunction scheduleSyncCallback(callback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\nfunction scheduleLegacySyncCallback(callback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\nfunction flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\nfunction flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    var i = 0;\n    var previousUpdatePriority = getCurrentUpdatePriority();\n\n    try {\n      var isSync = true;\n      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n\n      setCurrentUpdatePriority(DiscreteEventPriority);\n\n      for (; i < queue.length; i++) {\n        var callback = queue[i];\n\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      } // Resume flushing in the next tick\n\n\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n\n  return null;\n}\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nfunction isRootDehydrated(root) {\n  var currentState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nvar forkStack = [];\nvar forkStackIndex = 0;\nvar treeForkProvider = null;\nvar treeForkCount = 0;\nvar idStack = [];\nvar idStackIndex = 0;\nvar treeContextProvider = null;\nvar treeContextId = 1;\nvar treeContextOverflow = '';\nfunction isForkedChild(workInProgress) {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\nfunction getForksAtLevel(workInProgress) {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\nfunction getTreeId() {\n  var overflow = treeContextOverflow;\n  var idWithLeadingBit = treeContextId;\n  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\nfunction pushTreeFork(workInProgress, totalChildren) {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n  warnIfNotHydrating();\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\nfunction pushTreeId(workInProgress, totalChildren, index) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextProvider = workInProgress;\n  var baseIdWithLeadingBit = treeContextId;\n  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n\n  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n  var slot = index + 1;\n  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.\n\n    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.\n\n    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.\n\n    var restOfBaseId = baseId >> numberOfOverflowBits;\n    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n\n    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    var restOfNewBits = slot << restOfBaseLength;\n    var id = restOfNewBits | restOfBaseId;\n    var overflow = newOverflow + baseOverflow;\n    treeContextId = 1 << restOfLength | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    var newBits = slot << baseLength;\n\n    var _id = newBits | baseId;\n\n    var _overflow = baseOverflow;\n    treeContextId = 1 << length | _id;\n    treeContextOverflow = _overflow;\n  }\n}\nfunction pushMaterializedTreeId(workInProgress) {\n  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear\n  // in its children.\n\n  var returnFiber = workInProgress.return;\n\n  if (returnFiber !== null) {\n    var numberOfForks = 1;\n    var slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number) {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id) {\n  return 1 << getBitLength(id) - 1;\n}\n\nfunction popTreeContext(workInProgress) {\n  // Restore the previous values.\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\nfunction getSuspendedTreeContext() {\n  warnIfNotHydrating();\n\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow\n    };\n  } else {\n    return null;\n  }\n}\nfunction restoreSuspendedTreeContext(workInProgress, suspendedContext) {\n  warnIfNotHydrating();\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  {\n    if (!getIsHydrating()) {\n      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');\n    }\n  }\n}\n\n// This may have been an insertion or a hydration.\n\nvar hydrationParentFiber = null;\nvar nextHydratableInstance = null;\nvar isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\n\nvar didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\nvar hydrationErrors = null;\n\nfunction warnIfHydrating() {\n  {\n    if (isHydrating) {\n      error('We should not be hydrating here. This is a bug in React. Please file a bug.');\n    }\n  }\n}\n\nfunction markDidThrowWhileHydratingDEV() {\n  {\n    didSuspendOrErrorDEV = true;\n  }\n}\nfunction didSuspendOrErrorWhileHydratingDEV() {\n  {\n    return didSuspendOrErrorDEV;\n  }\n}\n\nfunction enterHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  var parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n\n  return true;\n}\n\nfunction warnUnhydratedInstance(returnFiber, instance) {\n  {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);\n          break;\n        }\n\n      case HostComponent:\n        {\n          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode);\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          var suspenseState = returnFiber.memoizedState;\n          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);\n          break;\n        }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(returnFiber, instance) {\n  warnUnhydratedInstance(returnFiber, instance);\n  var childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  var deletions = returnFiber.deletions;\n\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber, fiber) {\n  {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot:\n        {\n          var parentContainer = returnFiber.stateNode.containerInfo;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              var type = fiber.type;\n              var props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);\n              break;\n\n            case HostText:\n              var text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);\n              break;\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var parentType = returnFiber.type;\n          var parentProps = returnFiber.memoizedProps;\n          var parentInstance = returnFiber.stateNode;\n\n          switch (fiber.tag) {\n            case HostComponent:\n              {\n                var _type = fiber.type;\n                var _props = fiber.pendingProps;\n                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.\n                isConcurrentMode);\n                break;\n              }\n\n            case HostText:\n              {\n                var _text = fiber.pendingProps;\n\n                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.\n                _isConcurrentMode);\n                break;\n              }\n\n            case SuspenseComponent:\n              {\n                didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);\n                break;\n              }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          var suspenseState = returnFiber.memoizedState;\n          var _parentInstance = suspenseState.dehydrated;\n          if (_parentInstance !== null) switch (fiber.tag) {\n            case HostComponent:\n              var _type2 = fiber.type;\n              var _props2 = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);\n              break;\n\n            case HostText:\n              var _text2 = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);\n              break;\n\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);\n              break;\n          }\n          break;\n        }\n\n      default:\n        return;\n    }\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber, fiber) {\n  fiber.flags = fiber.flags & ~Hydrating | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent:\n      {\n        var type = fiber.type;\n        var props = fiber.pendingProps;\n        var instance = canHydrateInstance(nextInstance, type, props);\n\n        if (instance !== null) {\n          fiber.stateNode = instance;\n          hydrationParentFiber = fiber;\n          nextHydratableInstance = getFirstHydratableChild(instance);\n          return true;\n        }\n\n        return false;\n      }\n\n    case HostText:\n      {\n        var text = fiber.pendingProps;\n        var textInstance = canHydrateTextInstance(nextInstance, text);\n\n        if (textInstance !== null) {\n          fiber.stateNode = textInstance;\n          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.\n\n          nextHydratableInstance = null;\n          return true;\n        }\n\n        return false;\n      }\n\n    case SuspenseComponent:\n      {\n        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);\n\n        if (suspenseInstance !== null) {\n          var suspenseState = {\n            dehydrated: suspenseInstance,\n            treeContext: getSuspendedTreeContext(),\n            retryLane: OffscreenLane\n          };\n          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n\n          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into\n          // it during the first pass. Instead, we'll reenter it later.\n\n          nextHydratableInstance = null;\n          return true;\n        }\n\n        return false;\n      }\n\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber) {\n  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;\n}\n\nfunction throwOnHydrationMismatch(fiber) {\n  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');\n}\n\nfunction tryToClaimNextHydratableInstance(fiber) {\n  if (!isHydrating) {\n    return;\n  }\n\n  var nextInstance = nextHydratableInstance;\n\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // Nothing to hydrate. Make it an insertion.\n\n\n    insertNonHydratedInstance(hydrationParentFiber, fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n\n  var firstAttemptedInstance = nextInstance;\n\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance(hydrationParentFiber, fiber);\n      throwOnHydrationMismatch();\n    } // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n\n\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    var prevHydrationParentFiber = hydrationParentFiber;\n\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    } // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n\n\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var instance = fiber.stateNode;\n  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.\n\n  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n\n  if (updatePayload !== null) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var textInstance = fiber.stateNode;\n  var textContent = fiber.memoizedProps;\n  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);\n\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    var returnFiber = hydrationParentFiber;\n\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot:\n          {\n            var parentContainer = returnFiber.stateNode.containerInfo;\n            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode);\n            break;\n          }\n\n        case HostComponent:\n          {\n            var parentType = returnFiber.type;\n            var parentProps = returnFiber.memoizedProps;\n            var parentInstance = returnFiber.stateNode;\n\n            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;\n\n            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.\n            _isConcurrentMode2);\n            break;\n          }\n      }\n    }\n  }\n\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(fiber) {\n  if (!supportsHydration) {\n    throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  var suspenseState = fiber.memoizedState;\n  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {\n    parent = parent.return;\n  }\n\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber) {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  } // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n\n\n  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {\n    var nextInstance = nextHydratableInstance;\n\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch();\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n\n  popToNextHostParent(fiber);\n\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n  }\n\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber) {\n  var nextInstance = nextHydratableInstance;\n\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState() {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nfunction upgradeHydrationErrorsToRecoverable() {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating() {\n  return isHydrating;\n}\n\nfunction queueHydrationError(error) {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nvar ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;\nvar NoTransition = null;\nfunction requestCurrentTransition() {\n  return ReactCurrentBatchConfig.transition;\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\n\nfunction shallowEqual(objA, objB) {\n  if (objectIs(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    var currentKey = keysA[i];\n\n    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction describeFiber(fiber) {\n  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;\n  var source =  fiber._debugSource ;\n\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy');\n\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n\n    default:\n      return '';\n  }\n}\n\nfunction getStackByFiberInDevAndProd(workInProgress) {\n  try {\n    var info = '';\n    var node = workInProgress;\n\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\nvar current = null;\nvar isRendering = false;\nfunction getCurrentFiberOwnerNameInDevOrNull() {\n  {\n    if (current === null) {\n      return null;\n    }\n\n    var owner = current._debugOwner;\n\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n\n  return null;\n}\n\nfunction getCurrentFiberStackInDev() {\n  {\n    if (current === null) {\n      return '';\n    } // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n\n\n    return getStackByFiberInDevAndProd(current);\n  }\n}\n\nfunction resetCurrentFiber() {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\nfunction setCurrentFiber(fiber) {\n  {\n    ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\nfunction getCurrentFiber() {\n  {\n    return current;\n  }\n}\nfunction setIsRendering(rendering) {\n  {\n    isRendering = rendering;\n  }\n}\n\nvar ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n  flushPendingUnsafeLifecycleWarnings: function () {},\n  recordLegacyContextWarning: function (fiber, instance) {},\n  flushLegacyContextWarning: function () {},\n  discardPendingWarnings: function () {}\n};\n\n{\n  var findStrictRoot = function (fiber) {\n    var maybeStrictRoot = null;\n    var node = fiber;\n\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  var setToSortedString = function (set) {\n    var array = [];\n    set.forEach(function (value) {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  var pendingComponentWillMountWarnings = [];\n  var pendingUNSAFE_ComponentWillMountWarnings = [];\n  var pendingComponentWillReceivePropsWarnings = [];\n  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n  var pendingComponentWillUpdateWarnings = [];\n  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n  var didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.\n    instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n    // We do an initial pass to gather component names\n    var componentWillMountUniqueNames = new Set();\n\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(function (fiber) {\n        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    var UNSAFE_componentWillMountUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    var componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    var componentWillUpdateUniqueNames = new Set();\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    } // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n\n      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '\\nPlease update the following components: %s', sortedNames);\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n\n      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, \" + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '\\nPlease update the following components: %s', _sortedNames);\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n\n      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '\\nPlease update the following components: %s', _sortedNames2);\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n\n      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames3);\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n\n      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + \"* If you're updating state whenever props change, refactor your \" + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames4);\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n\n      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move data fetching code or side effects to componentDidUpdate.\\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' + '\\nPlease update the following components: %s', _sortedNames5);\n    }\n  };\n\n  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n  var didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n    var strictRoot = findStrictRoot(fiber);\n\n    if (strictRoot === null) {\n      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n      return;\n    } // Dedup strategy: Warn once per component.\n\n\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n      if (fiberArray.length === 0) {\n        return;\n      }\n\n      var firstFiber = fiberArray[0];\n      var uniqueNames = new Set();\n      fiberArray.forEach(function (fiber) {\n        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n        didWarnAboutLegacyContext.add(fiber.type);\n      });\n      var sortedNames = setToSortedString(uniqueNames);\n\n      try {\n        setCurrentFiber(firstFiber);\n\n        error('Legacy context API has been detected within a strict-mode tree.' + '\\n\\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);\n      } finally {\n        resetCurrentFiber();\n      }\n    });\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = function () {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\nfunction checkPropStringCoercion(value, propName) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nfunction resolveDefaultProps(Component, baseProps) {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    var props = assign({}, baseProps);\n    var defaultProps = Component.defaultProps;\n\n    for (var propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    return props;\n  }\n\n  return baseProps;\n}\n\nvar valueCursor = createCursor(null);\nvar rendererSigil;\n\n{\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nvar currentlyRenderingFiber = null;\nvar lastContextDependency = null;\nvar lastFullyObservedContext = null;\nvar isDisallowedContextReadInDEV = false;\nfunction resetContextDependencies() {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction enterDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = true;\n  }\n}\nfunction exitDisallowedContextReadInDEV() {\n  {\n    isDisallowedContextReadInDEV = false;\n  }\n}\nfunction pushProvider(providerFiber, context, nextValue) {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n    context._currentValue = nextValue;\n\n    {\n      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n    context._currentValue2 = nextValue;\n\n    {\n      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {\n        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      }\n\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\nfunction popProvider(context, providerFiber) {\n  var currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n\n  if (isPrimaryRenderer) {\n    {\n      context._currentValue = currentValue;\n    }\n  } else {\n    {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\nfunction scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  var node = parent;\n\n  while (node !== null) {\n    var alternate = node.alternate;\n\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    }\n\n    if (node === propagationRoot) {\n      break;\n    }\n\n    node = node.return;\n  }\n\n  {\n    if (node !== propagationRoot) {\n      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n}\nfunction propagateContextChange(workInProgress, context, renderLanes) {\n  {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager(workInProgress, context, renderLanes) {\n\n  var fiber = workInProgress.child;\n\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n\n  while (fiber !== null) {\n    var nextFiber = void 0; // Visit this fiber.\n\n    var list = fiber.dependencies;\n\n    if (list !== null) {\n      nextFiber = fiber.child;\n      var dependency = list.firstContext;\n\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            var lane = pickArbitraryLane(renderLanes);\n            var update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            // Inlined `enqueueUpdate` to remove interleaved update check\n\n            var updateQueue = fiber.updateQueue;\n\n            if (updateQueue === null) ; else {\n              var sharedQueue = updateQueue.shared;\n              var pending = sharedQueue.pending;\n\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          var alternate = fiber.alternate;\n\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n\n          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.\n\n          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n          // dependency list.\n\n          break;\n        }\n\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      var parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      var _alternate = parentSuspense.alternate;\n\n      if (_alternate !== null) {\n        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n      } // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n\n\n      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n\n        var sibling = nextFiber.sibling;\n\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        } // No more siblings. Traverse up.\n\n\n        nextFiber = nextFiber.return;\n      }\n    }\n\n    fiber = nextFiber;\n  }\n}\nfunction prepareToReadContext(workInProgress, renderLanes) {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  var dependencies = workInProgress.dependencies;\n\n  if (dependencies !== null) {\n    {\n      var firstContext = dependencies.firstContext;\n\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        } // Reset the work-in-progress list\n\n\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\nfunction readContext(context) {\n  {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;\n\n  if (lastFullyObservedContext === context) ; else {\n    var contextItem = {\n      context: context,\n      memoizedValue: value,\n      next: null\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n      } // This is the first dependency for this component. Create a new list.\n\n\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n\n  return value;\n}\n\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\n\nvar concurrentQueues = null;\nfunction pushConcurrentUpdateQueue(queue) {\n  if (concurrentQueues === null) {\n    concurrentQueues = [queue];\n  } else {\n    concurrentQueues.push(queue);\n  }\n}\nfunction finishQueueingConcurrentUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (concurrentQueues !== null) {\n    for (var i = 0; i < concurrentQueues.length; i++) {\n      var queue = concurrentQueues[i];\n      var lastInterleavedUpdate = queue.interleaved;\n\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        var firstInterleavedUpdate = lastInterleavedUpdate.next;\n        var lastPendingUpdate = queue.pending;\n\n        if (lastPendingUpdate !== null) {\n          var firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = firstInterleavedUpdate;\n          lastInterleavedUpdate.next = firstPendingUpdate;\n        }\n\n        queue.pending = lastInterleavedUpdate;\n      }\n    }\n\n    concurrentQueues = null;\n  }\n}\nfunction enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\nfunction enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n}\nfunction enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n  var interleaved = queue.interleaved;\n\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update; // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n\n  queue.interleaved = update;\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\nfunction enqueueConcurrentRenderForLane(fiber, lane) {\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n} // Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\n\nvar unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\nfunction markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  var alternate = sourceFiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n\n  {\n    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  } // Walk the parent path to the root and update the child lanes.\n\n\n  var node = sourceFiber;\n  var parent = sourceFiber.return;\n\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (node.tag === HostRoot) {\n    var root = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\nvar UpdateState = 0;\nvar ReplaceState = 1;\nvar ForceUpdate = 2;\nvar CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\n\nvar hasForceUpdate = false;\nvar didWarnUpdateInsideUpdate;\nvar currentlyProcessingQueue;\n\n{\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n}\n\nfunction initializeUpdateQueue(fiber) {\n  var queue = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes\n    },\n    effects: null\n  };\n  fiber.updateQueue = queue;\n}\nfunction cloneUpdateQueue(current, workInProgress) {\n  // Clone the update queue from current. Unless it's already a clone.\n  var queue = workInProgress.updateQueue;\n  var currentQueue = current.updateQueue;\n\n  if (queue === currentQueue) {\n    var clone = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\nfunction createUpdate(eventTime, lane) {\n  var update = {\n    eventTime: eventTime,\n    lane: lane,\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n    next: null\n  };\n  return update;\n}\nfunction enqueueUpdate(fiber, update, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  {\n    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate()) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    var pending = sharedQueue.pending;\n\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n\n    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\nfunction entangleTransitions(root, fiber, lane) {\n  var updateQueue = fiber.updateQueue;\n\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  var sharedQueue = updateQueue.shared;\n\n  if (isTransitionLane(lane)) {\n    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\nfunction enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n  var current = workInProgress.alternate;\n\n  if (current !== null) {\n    var currentQueue = current.updateQueue;\n\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      var newFirst = null;\n      var newLast = null;\n      var firstBaseUpdate = queue.firstBaseUpdate;\n\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        var update = firstBaseUpdate;\n\n        do {\n          var clone = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n\n          update = update.next;\n        } while (update !== null); // Append the captured update the end of the cloned list.\n\n\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  } // Append the update to the end of the list.\n\n\n  var lastBaseUpdate = queue.lastBaseUpdate;\n\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n  switch (update.tag) {\n    case ReplaceState:\n      {\n        var payload = update.payload;\n\n        if (typeof payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          var nextState = payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n\n          return nextState;\n        } // State object\n\n\n        return payload;\n      }\n\n    case CaptureUpdate:\n      {\n        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n      }\n    // Intentional fallthrough\n\n    case UpdateState:\n      {\n        var _payload = update.payload;\n        var partialState;\n\n        if (typeof _payload === 'function') {\n          // Updater function\n          {\n            enterDisallowedContextReadInDEV();\n          }\n\n          partialState = _payload.call(instance, prevState, nextProps);\n\n          {\n            if ( workInProgress.mode & StrictLegacyMode) {\n              setIsStrictModeForDevtools(true);\n\n              try {\n                _payload.call(instance, prevState, nextProps);\n              } finally {\n                setIsStrictModeForDevtools(false);\n              }\n            }\n\n            exitDisallowedContextReadInDEV();\n          }\n        } else {\n          // Partial state object\n          partialState = _payload;\n        }\n\n        if (partialState === null || partialState === undefined) {\n          // Null and undefined are treated as no-ops.\n          return prevState;\n        } // Merge the partial state and the previous state.\n\n\n        return assign({}, prevState, partialState);\n      }\n\n    case ForceUpdate:\n      {\n        hasForceUpdate = true;\n        return prevState;\n      }\n  }\n\n  return prevState;\n}\n\nfunction processUpdateQueue(workInProgress, props, instance, renderLanes) {\n  // This is always non-null on a ClassComponent or HostRoot\n  var queue = workInProgress.updateQueue;\n  hasForceUpdate = false;\n\n  {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  var firstBaseUpdate = queue.firstBaseUpdate;\n  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n  var pendingQueue = queue.shared.pending;\n\n  if (pendingQueue !== null) {\n    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n\n    var lastPendingUpdate = pendingQueue;\n    var firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null; // Append pending updates to base queue\n\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n\n    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n\n    var current = workInProgress.alternate;\n\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      var currentQueue = current.updateQueue;\n      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  } // These values may change as we process the queue.\n\n\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n\n    var newLanes = NoLanes;\n    var newBaseState = null;\n    var newFirstBaseUpdate = null;\n    var newLastBaseUpdate = null;\n    var update = firstBaseUpdate;\n\n    do {\n      var updateLane = update.lane;\n      var updateEventTime = update.eventTime;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n          next: null\n        };\n\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        } // Update the remaining priority in the queue.\n\n\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newLastBaseUpdate !== null) {\n          var _clone = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n            next: null\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n        } // Process this update.\n\n\n        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n        var callback = update.callback;\n\n        if (callback !== null && // If the update was already committed, we should not queue its\n        // callback again.\n        update.lane !== NoLane) {\n          workInProgress.flags |= Callback;\n          var effects = queue.effects;\n\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n\n      update = update.next;\n\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n\n          var _firstPendingUpdate = _lastPendingUpdate.next;\n          _lastPendingUpdate.next = null;\n          update = _firstPendingUpdate;\n          queue.lastBaseUpdate = _lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = newBaseState;\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n\n    var lastInterleaved = queue.shared.interleaved;\n\n    if (lastInterleaved !== null) {\n      var interleaved = lastInterleaved;\n\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = interleaved.next;\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    } // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n\n\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + (\"received: \" + callback));\n  }\n\n  callback.call(context);\n}\n\nfunction resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\nfunction checkHasForceUpdateAfterProcessing() {\n  return hasForceUpdate;\n}\nfunction commitUpdateQueue(finishedWork, finishedQueue, instance) {\n  // Commit the effects\n  var effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n\n  if (effects !== null) {\n    for (var i = 0; i < effects.length; i++) {\n      var effect = effects[i];\n      var callback = effect.callback;\n\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n\nvar fakeInternalInstance = {}; // React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\n\nvar emptyRefsObject = new React.Component().refs;\nvar didWarnAboutStateAssignmentForComponent;\nvar didWarnAboutUninitializedState;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nvar didWarnAboutLegacyLifecyclesAndDerivedState;\nvar didWarnAboutUndefinedDerivedState;\nvar warnOnUndefinedDerivedState;\nvar warnOnInvalidCallback;\nvar didWarnAboutDirectlyAssigningPropsToState;\nvar didWarnAboutContextTypeAndContextTypes;\nvar didWarnAboutInvalidateContextType;\n\n{\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n  var didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function (callback, callerName) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n\n    var key = callerName + '_' + callback;\n\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n\n      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n    }\n  };\n\n  warnOnUndefinedDerivedState = function (type, partialState) {\n    if (partialState === undefined) {\n      var componentName = getComponentNameFromType(type) || 'Component';\n\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n\n        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n      }\n    }\n  }; // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n\n\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function () {\n      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');\n    }\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n  var prevState = workInProgress.memoizedState;\n  var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    warnOnUndefinedDerivedState(ctor, partialState);\n  } // Merge the partial state and the previous state.\n\n\n  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n  // base state.\n\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    var updateQueue = workInProgress.updateQueue;\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nvar classComponentUpdater = {\n  isMounted: isMounted,\n  enqueueSetState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState: function (inst, payload, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate: function (inst, callback) {\n    var fiber = get(inst);\n    var eventTime = requestEventTime();\n    var lane = requestUpdateLane(fiber);\n    var update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n\n      update.callback = callback;\n    }\n\n    var root = enqueueUpdate(fiber, update, lane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  }\n};\n\nfunction checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n  var instance = workInProgress.stateNode;\n\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n\n    {\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      if (shouldUpdate === undefined) {\n        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress, ctor, newProps) {\n  var instance = workInProgress.stateNode;\n\n  {\n    var name = getComponentNameFromType(ctor) || 'Component';\n    var renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n      } else {\n        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n      }\n    }\n\n    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n    }\n\n    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n    }\n\n    if (instance.propTypes) {\n      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n    }\n\n    if (instance.contextType) {\n      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);\n    }\n\n    {\n      if (instance.contextTypes) {\n        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      }\n\n      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');\n    }\n\n    if (typeof instance.componentDidUnmount === 'function') {\n      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n    }\n\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n    }\n\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n    }\n\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n    }\n\n    var hasMutatedProps = instance.props !== newProps;\n\n    if (instance.props !== undefined && hasMutatedProps) {\n      error('%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n    }\n\n    if (instance.defaultProps) {\n      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n    }\n\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n    }\n\n    var _state = instance.state;\n\n    if (_state && (typeof _state !== 'object' || isArray(_state))) {\n      error('%s.state: must be set to an object or null', name);\n    }\n\n    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {\n      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress, instance) {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n  set(instance, workInProgress);\n\n  {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(workInProgress, ctor, props) {\n  var isLegacyContextConsumer = false;\n  var unmaskedContext = emptyContextObject;\n  var context = emptyContextObject;\n  var contextType = ctor.contextType;\n\n  {\n    if ('contextType' in ctor) {\n      var isValid = // Allow null for conditional declaration\n      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n        var addendum = '';\n\n        if (contextType === undefined) {\n          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n        }\n\n        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext(contextType);\n  } else {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    var contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n  }\n\n  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n  {\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n  adoptClassInstance(workInProgress, instance);\n\n  {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n\n        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);\n      }\n    } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n\n    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n      var foundWillMountName = null;\n      var foundWillReceivePropsName = null;\n      var foundWillUpdateName = null;\n\n      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n\n      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n\n      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n\n      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n        var _componentName = getComponentNameFromType(ctor) || 'Component';\n\n        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : '', foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : '', foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : '');\n        }\n      }\n    }\n  } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    {\n      error('%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n  var oldState = instance.state;\n\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    {\n      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';\n\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n\n        error('%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n      }\n    }\n\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n} // Invokes the mount life-cycles on a previously never rendered instance.\n\n\nfunction mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  var instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n  initializeUpdateQueue(workInProgress);\n  var contextType = ctor.contextType;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else {\n    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  {\n    if (instance.state === newProps) {\n      var componentName = getComponentNameFromType(ctor) || 'Component';\n\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n        error('%s: It is not recommended to assign props directly to state ' + \"because updates to props won't be reflected in state. \" + 'In most cases, it is better to use props directly.', componentName);\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n    }\n\n    {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    instance.state = workInProgress.memoizedState;\n  } // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n\n  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n    // process them now.\n\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    var fiberFlags = Update;\n\n    {\n      fiberFlags |= LayoutStatic;\n    }\n\n    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n      fiberFlags |= MountLayoutDev;\n    }\n\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  var oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var fiberFlags = Update;\n\n      {\n        fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= fiberFlags;\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags = Update;\n\n      {\n        _fiberFlags |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      var _fiberFlags2 = Update;\n\n      {\n        _fiberFlags2 |= LayoutStatic;\n      }\n\n      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        _fiberFlags2 |= MountLayoutDev;\n      }\n\n      workInProgress.flags |= _fiberFlags2;\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n} // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n\nfunction updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n  var instance = workInProgress.stateNode;\n  cloneUpdateQueue(current, workInProgress);\n  var unresolvedOldProps = workInProgress.memoizedProps;\n  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  var unresolvedNewProps = workInProgress.pendingProps;\n  var oldContext = instance.context;\n  var contextType = ctor.contextType;\n  var nextContext = emptyContextObject;\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else {\n    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n  var oldState = workInProgress.memoizedState;\n  var newState = instance.state = oldState;\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n    newState = workInProgress.memoizedState;\n  }\n\n  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,\n  // both before and after `shouldComponentUpdate` has been called. Not ideal,\n  // but I'm loath to refactor this function. This only happens for memoized\n  // components so it's not that common.\n  enableLazyContextPropagation   ;\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Update;\n      }\n    }\n\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n        workInProgress.flags |= Snapshot;\n      }\n    } // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n\n\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  } // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n\n\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n  return shouldUpdate;\n}\n\nvar didWarnAboutMaps;\nvar didWarnAboutGenerators;\nvar didWarnAboutStringRefs;\nvar ownerHasKeyUseWarning;\nvar ownerHasFunctionTypeWarning;\n\nvar warnForMissingKey = function (child, returnFiber) {};\n\n{\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = function (child, returnFiber) {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    }\n\n    child._store.validated = true;\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[componentName] = true;\n\n    error('Each child in a list should have a unique ' + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');\n  };\n}\n\nfunction coerceRef(returnFiber, current, element) {\n  var mixedRef = element.ref;\n\n  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {\n    {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs\n      // because these cannot be automatically converted to an arrow function\n      // using a codemod. Therefore, we don't have to warn about string refs again.\n      !(element._owner && element._self && element._owner.stateNode !== element._self)) {\n        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n        if (!didWarnAboutStringRefs[componentName]) {\n          {\n            error('A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);\n          }\n\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      var owner = element._owner;\n      var inst;\n\n      if (owner) {\n        var ownerFiber = owner;\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + 'bug in React. Please file an issue.');\n      } // Assigning this to a const so Flow knows it won't change in the closure\n\n\n      var resolvedInst = inst;\n\n      {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n\n      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref\n\n      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n\n      var ref = function (value) {\n        var refs = resolvedInst.refs;\n\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');\n      }\n\n      if (!element._owner) {\n        throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + ' the following reasons:\\n' + '1. You may be adding a ref to a function component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');\n      }\n    }\n  }\n\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  var childString = Object.prototype.toString.call(newChild);\n  throw new Error(\"Objects are not valid as a React child (found: \" + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + \"). \" + 'If you meant to render a collection of children, use an array ' + 'instead.');\n}\n\nfunction warnOnFunctionType(returnFiber) {\n  {\n    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  var payload = lazyType._payload;\n  var init = lazyType._init;\n  return init(payload);\n} // This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\n\n\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n\n\n    var childToDelete = currentFirstChild;\n\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    var existingChildren = new Map();\n    var existingChild = currentFirstChild;\n\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n\n      existingChild = existingChild.sibling;\n    }\n\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    var clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n\n    var current = newFiber.alternate;\n\n    if (current !== null) {\n      var oldIndex = current.index;\n\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, lanes) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, lanes) {\n    var elementType = element.type;\n\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n    }\n\n    if (current !== null) {\n      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.\n      // We need to do this after the Hot Reloading check above,\n      // because hot reloading has different semantics than prod because\n      // it doesn't resuspend. So we can't let the call below suspend.\n      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n        // Move based on index\n        var existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n\n        {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n\n        return existing;\n      }\n    } // Insert\n\n\n    var created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(returnFiber, current, portal, lanes) {\n    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, lanes, key) {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n\n            _created.ref = coerceRef(returnFiber, null, newChild);\n            _created.return = returnFiber;\n            return _created;\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n\n            _created2.return = returnFiber;\n            return _created2;\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n\n        _created3.return = returnFiber;\n        return _created3;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n    // Update the fiber if the keys match, otherwise return null.\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              return updateElement(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, lanes);\n            } else {\n              return null;\n            }\n          }\n\n        case REACT_LAZY_TYPE:\n          {\n            var payload = newChild._payload;\n            var init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n          }\n\n        case REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n\n            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n          }\n\n        case REACT_LAZY_TYPE:\n          var payload = newChild._payload;\n          var init = newChild._init;\n          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n\n\n  function warnOnInvalidKey(child, knownKeys, returnFiber) {\n    {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          var key = child.key;\n\n          if (typeof key !== 'string') {\n            break;\n          }\n\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n\n          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);\n\n          break;\n\n        case REACT_LAZY_TYPE:\n          var payload = child._payload;\n          var init = child._init;\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n      }\n    }\n\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n    {\n      // First, validate keys.\n      var knownKeys = null;\n\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n\n        if (_newFiber === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n\n        previousNewFiber = _newFiber;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\n      if (_newFiber2 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks2 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks2);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n    var iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    }\n\n    {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag\n      newChildrenIterable[Symbol.toStringTag] === 'Generator') {\n        if (!didWarnAboutGenerators) {\n          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');\n        }\n\n        didWarnAboutGenerators = true;\n      } // Warn about using Maps as children\n\n\n      if (newChildrenIterable.entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n        }\n\n        didWarnAboutMaps = true;\n      } // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n\n\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n\n      if (_newChildren) {\n        var knownKeys = null;\n\n        var _step = _newChildren.next();\n\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    var step = newChildren.next();\n\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n\n        break;\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n\n      if (getIsHydrating()) {\n        var numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n        if (_newFiber3 === null) {\n          continue;\n        }\n\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n\n        previousNewFiber = _newFiber3;\n      }\n\n      if (getIsHydrating()) {\n        var _numberOfForks3 = newIdx;\n        pushTreeFork(returnFiber, _numberOfForks3);\n      }\n\n      return resultingFirstChild;\n    } // Add all children to a key map for quick lookups.\n\n\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    if (getIsHydrating()) {\n      var _numberOfForks4 = newIdx;\n      pushTreeFork(returnFiber, _numberOfForks4);\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    } // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n\n\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n    var key = element.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            var existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n\n            {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n\n            return existing;\n          }\n        } else {\n          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:\n           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.\n          // We need to do this after the Hot Reloading check above,\n          // because hot reloading has different semantics than prod because\n          // it doesn't resuspend. So we can't let the call below suspend.\n          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n\n            var _existing = useFiber(child, element.props);\n\n            _existing.ref = coerceRef(returnFiber, child, element);\n            _existing.return = returnFiber;\n\n            {\n              _existing._debugSource = element._source;\n              _existing._debugOwner = element._owner;\n            }\n\n            return _existing;\n          }\n        } // Didn't match.\n\n\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n\n      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n      _created4.return = returnFiber;\n      return _created4;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n    var key = portal.key;\n    var child = currentFirstChild;\n\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n\n      child = child.sibling;\n    }\n\n    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  } // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n\n\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    } // Handle object types\n\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n\n        case REACT_LAZY_TYPE:\n          var payload = newChild._payload;\n          var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\n    {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    } // Remaining cases are all treated as empty.\n\n\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = ChildReconciler(true);\nvar mountChildFibers = ChildReconciler(false);\nfunction cloneChildFibers(current, workInProgress) {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n  newChild.return = workInProgress;\n\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n    newChild.return = workInProgress;\n  }\n\n  newChild.sibling = null;\n} // Reset a workInProgress child set to prepare it for a second pass.\n\nfunction resetChildFibers(workInProgress, lanes) {\n  var child = workInProgress.child;\n\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n\nvar NO_CONTEXT = {};\nvar contextStackCursor$1 = createCursor(NO_CONTEXT);\nvar contextFiberStackCursor = createCursor(NO_CONTEXT);\nvar rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\nfunction requiredContext(c) {\n  if (c === NO_CONTEXT) {\n    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n\n  return c;\n}\n\nfunction getRootHostContainer() {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber, nextRootInstance) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n\n  push(contextStackCursor$1, NO_CONTEXT, fiber);\n  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.\n\n  pop(contextStackCursor$1, fiber);\n  push(contextStackCursor$1, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber) {\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext() {\n  var context = requiredContext(contextStackCursor$1.current);\n  return context;\n}\n\nfunction pushHostContext(fiber) {\n  var rootInstance = requiredContext(rootInstanceStackCursor.current);\n  var context = requiredContext(contextStackCursor$1.current);\n  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.\n\n  if (context === nextContext) {\n    return;\n  } // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n\n\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor$1, nextContext, fiber);\n}\n\nfunction popHostContext(fiber) {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor$1, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nvar DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\n\nvar SubtreeSuspenseContextMask = 1; // Subtree Flags:\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\n\nvar InvisibleParentSuspenseContext = 1; // Shallow Flags:\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\n\nvar ForceSuspenseFallback = 2;\nvar suspenseStackCursor = createCursor(DefaultSuspenseContext);\nfunction hasSuspenseContext(parentContext, flag) {\n  return (parentContext & flag) !== 0;\n}\nfunction setDefaultShallowSuspenseContext(parentContext) {\n  return parentContext & SubtreeSuspenseContextMask;\n}\nfunction setShallowSuspenseContext(parentContext, shallowContext) {\n  return parentContext & SubtreeSuspenseContextMask | shallowContext;\n}\nfunction addSubtreeSuspenseContext(parentContext, subtreeContext) {\n  return parentContext | subtreeContext;\n}\nfunction pushSuspenseContext(fiber, newContext) {\n  push(suspenseStackCursor, newContext, fiber);\n}\nfunction popSuspenseContext(fiber) {\n  pop(suspenseStackCursor, fiber);\n}\n\nfunction shouldCaptureSuspense(workInProgress, hasInvisibleParent) {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  var nextState = workInProgress.memoizedState;\n\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n\n    return false;\n  }\n\n  var props = workInProgress.memoizedProps; // Regular boundaries always capture.\n\n  {\n    return true;\n  } // If it's a boundary we should avoid, then we prefer to bubble up to the\n}\nfunction findFirstSuspended(row) {\n  var node = row;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        var dehydrated = state.dehydrated;\n\n        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {\n          return node;\n        }\n      }\n    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n    // keep track of whether it suspended or not.\n    node.memoizedProps.revealOrder !== undefined) {\n      var didSuspend = (node.flags & DidCapture) !== NoFlags;\n\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === row) {\n      return null;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n\n  return null;\n}\n\nvar NoFlags$1 =\n/*   */\n0; // Represents whether effect should fire.\n\nvar HasEffect =\n/* */\n1; // Represents the phase in which the effect (not the clean-up) fires.\n\nvar Insertion =\n/*  */\n2;\nvar Layout =\n/*    */\n4;\nvar Passive$1 =\n/*   */\n8;\n\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\n\nvar workInProgressSources = [];\nfunction resetWorkInProgressVersions() {\n  for (var i = 0; i < workInProgressSources.length; i++) {\n    var mutableSource = workInProgressSources[i];\n\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n\n  workInProgressSources.length = 0;\n}\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\n\nfunction registerMutableSourceForHydration(root, mutableSource) {\n  var getVersion = mutableSource._getVersion;\n  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\nvar didWarnAboutMismatchedHooksForComponent;\nvar didWarnUncachedGetSnapshot;\n\n{\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\n// These are set right before calling the component.\nvar renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\n\nvar currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\n\nvar currentHook = null;\nvar workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\n\nvar didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\nvar didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.\n\nvar localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\n\nvar globalClientIdCounter = 0;\nvar RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\n\nvar hookTypesDev = null;\nvar hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\nvar ignorePreviousDependencies = false;\n\nfunction mountHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  {\n    var hookName = currentHookNameInDev;\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps) {\n  {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName) {\n  {\n    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        var table = '';\n        var secondColumnStart = 30;\n\n        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n          var oldHookName = hookTypesDev[i];\n          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n          var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n          table += row;\n        }\n\n        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' + '   Previous render            Next render\\n' + '   ------------------------------------------------------\\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n', componentName, table);\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + prevDeps.join(', ') + \"]\", \"[\" + nextDeps.join(', ') + \"]\");\n    }\n  }\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber$1 = workInProgress;\n\n  {\n    hookTypesDev = current !== null ? current._debugHookTypes : null;\n    hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes; // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n\n  {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n    }\n  }\n\n  var children = Component(props, secondArg); // Check if there was a render phase update\n\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    var numberOfReRenders = 0;\n\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');\n      }\n\n      numberOfReRenders += 1;\n\n      {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      } // Start over from the beginning of the list\n\n\n      currentHook = null;\n      workInProgressHook = null;\n      workInProgress.updateQueue = null;\n\n      {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  } // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n\n\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  {\n    workInProgress._debugHookTypes = hookTypesDev;\n  } // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n\n  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n\n    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n    // and creates false positives. To make this work in legacy mode, we'd\n    // need to mark fibers that commit in an incomplete state, somehow. For\n    // now I'll disable the warning that most of the bugs that would trigger\n    // it are either exclusive to concurrent mode or exist in both.\n    (current.mode & ConcurrentMode) !== NoMode) {\n      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');\n  }\n\n  return children;\n}\nfunction checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  var didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\nfunction bailoutHooks(current, workInProgress, lanes) {\n  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n\n  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);\n  } else {\n    workInProgress.flags &= ~(Passive | Update);\n  }\n\n  current.lanes = removeLanes(current.lanes, lanes);\n}\nfunction resetHooksAfterThrow() {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    var hook = currentlyRenderingFiber$1.memoizedState;\n\n    while (hook !== null) {\n      var queue = hook.queue;\n\n      if (queue !== null) {\n        queue.pending = null;\n      }\n\n      hook = hook.next;\n    }\n\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber$1 = null;\n  currentHook = null;\n  workInProgressHook = null;\n\n  {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n    currentHookNameInDev = null;\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook() {\n  var hook = {\n    memoizedState: null,\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n    next: null\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook() {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  var nextCurrentHook;\n\n  if (currentHook === null) {\n    var current = currentlyRenderingFiber$1.alternate;\n\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  var nextWorkInProgressHook;\n\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n    var newHook = {\n      memoizedState: currentHook.memoizedState,\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n      next: null\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue() {\n  return {\n    lastEffect: null,\n    stores: null\n  };\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer(reducer, initialArg, init) {\n  var hook = mountWorkInProgressHook();\n  var initialState;\n\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = initialArg;\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer;\n  var current = currentHook; // The last rebase update that is NOT part of the base state.\n\n  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.\n\n  var pendingQueue = queue.pending;\n\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      var baseFirst = baseQueue.next;\n      var pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');\n      }\n    }\n\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    var first = baseQueue.next;\n    var newState = current.baseState;\n    var newBaseState = null;\n    var newBaseQueueFirst = null;\n    var newBaseQueueLast = null;\n    var update = first;\n\n    do {\n      var updateLane = update.lane;\n\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        var clone = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: null\n        };\n\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        } // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n\n\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n        if (newBaseQueueLast !== null) {\n          var _clone = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: null\n          };\n          newBaseQueueLast = newBaseQueueLast.next = _clone;\n        } // Process this update.\n\n\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = update.eagerState;\n        } else {\n          var action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = newBaseQueueFirst;\n    } // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n    queue.lastRenderedState = newState;\n  } // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n\n\n  var lastInterleaved = queue.interleaved;\n\n  if (lastInterleaved !== null) {\n    var interleaved = lastInterleaved;\n\n    do {\n      var interleavedLane = interleaved.lane;\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = interleaved.next;\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  var dispatch = queue.dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer(reducer, initialArg, init) {\n  var hook = updateWorkInProgressHook();\n  var queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');\n  }\n\n  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n\n  var dispatch = queue.dispatch;\n  var lastRenderPhaseUpdate = queue.pending;\n  var newState = hook.memoizedState;\n\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    var update = firstRenderPhaseUpdate;\n\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      var action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n\n\n    if (!objectIs(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n\n  return [newState, dispatch];\n}\n\nfunction mountMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction updateMutableSource(source, getSnapshot, subscribe) {\n  {\n    return undefined;\n  }\n}\n\nfunction mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = mountWorkInProgressHook();\n  var nextSnapshot;\n  var isHydrating = getIsHydrating();\n\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');\n    }\n\n    nextSnapshot = getServerSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          error('The result of getServerSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n\n    {\n      if (!didWarnUncachedGetSnapshot) {\n        var cachedSnapshot = getSnapshot();\n\n        if (!objectIs(nextSnapshot, cachedSnapshot)) {\n          error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    } // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  } // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n\n  hook.memoizedState = nextSnapshot;\n  var inst = {\n    value: nextSnapshot,\n    getSnapshot: getSnapshot\n  };\n  hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n\n  fiber.flags |= Passive;\n  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  var fiber = currentlyRenderingFiber$1;\n  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n\n  var nextSnapshot = getSnapshot();\n\n  {\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedSnapshot = getSnapshot();\n\n      if (!objectIs(nextSnapshot, cachedSnapshot)) {\n        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  var prevSnapshot = hook.memoizedState;\n  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n\n  var inst = hook.queue;\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n\n  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by\n  // checking whether we scheduled a subscription effect above.\n  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n    fiber.flags |= Passive;\n    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n\n    var root = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n  fiber.flags |= StoreConsistency;\n  var check = {\n    getSnapshot: getSnapshot,\n    value: renderedSnapshot\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.stores = [check];\n  } else {\n    var stores = componentUpdateQueue.stores;\n\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  var handleStoreChange = function () {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  }; // Subscribe to the store and return a clean-up function.\n\n\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  var prevValue = inst.value;\n\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState(initialState) {\n  var hook = mountWorkInProgressHook();\n\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n\n  hook.memoizedState = hook.baseState = initialState;\n  var queue = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialState\n  };\n  hook.queue = queue;\n  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState(initialState) {\n  return updateReducer(basicStateReducer);\n}\n\nfunction rerenderState(initialState) {\n  return rerenderReducer(basicStateReducer);\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  var effect = {\n    tag: tag,\n    create: create,\n    destroy: destroy,\n    deps: deps,\n    // Circular\n    next: null\n  };\n  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    var lastEffect = componentUpdateQueue.lastEffect;\n\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      var firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n\n  return effect;\n}\n\nfunction mountRef(initialValue) {\n  var hook = mountWorkInProgressHook();\n\n  {\n    var _ref2 = {\n      current: initialValue\n    };\n    hook.memoizedState = _ref2;\n    return _ref2;\n  }\n}\n\nfunction updateRef(initialValue) {\n  var hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var destroy = undefined;\n\n  if (currentHook !== null) {\n    var prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n\n    if (nextDeps !== null) {\n      var prevDeps = prevEffect.deps;\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber$1.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);\n}\n\nfunction mountEffect(create, deps) {\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);\n  } else {\n    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);\n  }\n}\n\nfunction updateEffect(create, deps) {\n  return updateEffectImpl(Passive, Passive$1, create, deps);\n}\n\nfunction mountInsertionEffect(create, deps) {\n  return mountEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction updateInsertionEffect(create, deps) {\n  return updateEffectImpl(Update, Insertion, create, deps);\n}\n\nfunction mountLayoutEffect(create, deps) {\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, create, deps);\n}\n\nfunction updateLayoutEffect(create, deps) {\n  return updateEffectImpl(Update, Layout, create, deps);\n}\n\nfunction imperativeHandleEffect(create, ref) {\n  if (typeof ref === 'function') {\n    var refCallback = ref;\n\n    var _inst = create();\n\n    refCallback(_inst);\n    return function () {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    var refObject = ref;\n\n    {\n      if (!refObject.hasOwnProperty('current')) {\n        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');\n      }\n    }\n\n    var _inst2 = create();\n\n    refObject.current = _inst2;\n    return function () {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  var fiberFlags = Update;\n\n  {\n    fiberFlags |= LayoutStatic;\n  }\n\n  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n    fiberFlags |= MountLayoutDev;\n  }\n\n  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction updateImperativeHandle(ref, create, deps) {\n  {\n    if (typeof create !== 'function') {\n      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');\n    }\n  } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n\n  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n}\n\nfunction mountDebugValue(value, formatterFn) {// This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nvar updateDebugValue = mountDebugValue;\n\nfunction mountCallback(callback, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback(callback, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo(nextCreate, deps) {\n  var hook = mountWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo(nextCreate, deps) {\n  var hook = updateWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = hook.memoizedState;\n\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      var prevDeps = prevState[1];\n\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n\n  var nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue(value) {\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue(value) {\n  var hook = updateWorkInProgressHook();\n  var resolvedCurrentHook = currentHook;\n  var prevValue = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue(value) {\n  var hook = updateWorkInProgressHook();\n\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    var prevValue = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl(hook, prevValue, value) {\n  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n    if (!objectIs(value, prevValue)) {\n      // Schedule a deferred render\n      var deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n\n      hook.baseState = true;\n    } // Reuse the previous value\n\n\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  var previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n  setPending(true);\n  var prevTransition = ReactCurrentBatchConfig$1.transition;\n  ReactCurrentBatchConfig$1.transition = {};\n  var currentTransition = ReactCurrentBatchConfig$1.transition;\n\n  {\n    ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$1.transition = prevTransition;\n\n    {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        var updatedFibersCount = currentTransition._updatedFibers.size;\n\n        if (updatedFibersCount > 10) {\n          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');\n        }\n\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition() {\n  var _mountState = mountState(false),\n      isPending = _mountState[0],\n      setPending = _mountState[1]; // The `start` method never changes.\n\n\n  var start = startTransition.bind(null, setPending);\n  var hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition() {\n  var _updateState = updateState(),\n      isPending = _updateState[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition() {\n  var _rerenderState = rerenderState(),\n      isPending = _rerenderState[0];\n\n  var hook = updateWorkInProgressHook();\n  var start = hook.memoizedState;\n  return [isPending, start];\n}\n\nvar isUpdatingOpaqueValueInRenderPhase = false;\nfunction getIsUpdatingOpaqueValueInRenderPhaseInDEV() {\n  {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId() {\n  var hook = mountWorkInProgressHook();\n  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n\n  var identifierPrefix = root.identifierPrefix;\n  var id;\n\n  if (getIsHydrating()) {\n    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.\n\n    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n\n    var localId = localIdCounter++;\n\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    var globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId() {\n  var hook = updateWorkInProgressHook();\n  var id = hook.memoizedState;\n  return id;\n}\n\nfunction dispatchReducerAction(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      var eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction dispatchSetState(fiber, queue, action) {\n  {\n    if (typeof arguments[3] === 'function') {\n      error(\"State updates from the useState() and useReducer() Hooks don't support the \" + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');\n    }\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var update = {\n    lane: lane,\n    action: action,\n    hasEagerState: false,\n    eagerState: null,\n    next: null\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    var alternate = fiber.alternate;\n\n    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      var lastRenderedReducer = queue.lastRenderedReducer;\n\n      if (lastRenderedReducer !== null) {\n        var prevDispatcher;\n\n        {\n          prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n\n        try {\n          var currentState = queue.lastRenderedState;\n          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n\n          if (objectIs(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);\n            return;\n          }\n        } catch (error) {// Suppress the error. It will throw again in the render phase.\n        } finally {\n          {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n    if (root !== null) {\n      var eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane);\n}\n\nfunction isRenderPhaseUpdate(fiber) {\n  var alternate = fiber.alternate;\n  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n}\n\nfunction enqueueRenderPhaseUpdate(queue, update) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  var pending = queue.pending;\n\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n\n  queue.pending = update;\n} // TODO: Move to ReactFiberConcurrentUpdates?\n\n\nfunction entangleTransitionUpdate(root, queue, lane) {\n  if (isTransitionLane(lane)) {\n    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n    var newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n\n  {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nvar ContextOnlyDispatcher = {\n  readContext: readContext,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n  unstable_isNewReconciler: enableNewReconciler\n};\n\nvar HooksDispatcherOnMountInDEV = null;\nvar HooksDispatcherOnMountWithHookTypesInDEV = null;\nvar HooksDispatcherOnUpdateInDEV = null;\nvar HooksDispatcherOnRerenderInDEV = null;\nvar InvalidNestedHooksDispatcherOnMountInDEV = null;\nvar InvalidNestedHooksDispatcherOnUpdateInDEV = null;\nvar InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n{\n  var warnInvalidContextAccess = function () {\n    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n  };\n\n  var warnInvalidHookAccess = function () {\n    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext: function (context) {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback: function (callback, deps) {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext: function (context) {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect: function (create, deps) {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle: function (ref, create, deps) {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect: function (create, deps) {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect: function (create, deps) {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo: function (create, deps) {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useReducer: function (reducer, initialArg, init) {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useRef: function (initialValue) {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef();\n    },\n    useState: function (initialState) {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      var prevDispatcher = ReactCurrentDispatcher$1.current;\n      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n      }\n    },\n    useDebugValue: function (value, formatterFn) {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue();\n    },\n    useDeferredValue: function (value) {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition: function () {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource: function (source, getSnapshot, subscribe) {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource();\n    },\n    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot);\n    },\n    useId: function () {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    unstable_isNewReconciler: enableNewReconciler\n  };\n}\n\nvar now$1 = Scheduler.unstable_now;\nvar commitTime = 0;\nvar layoutEffectStartTime = -1;\nvar profilerStartTime = -1;\nvar passiveEffectStartTime = -1;\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\n\nvar currentUpdateIsNested = false;\nvar nestedUpdateScheduled = false;\n\nfunction isCurrentUpdateNested() {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled() {\n  {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag() {\n  {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime() {\n  return commitTime;\n}\n\nfunction recordCommitTime() {\n\n  commitTime = now$1();\n}\n\nfunction startProfilerTimer(fiber) {\n\n  profilerStartTime = now$1();\n\n  if (fiber.actualStartTime < 0) {\n    fiber.actualStartTime = now$1();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber) {\n\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n\n  if (profilerStartTime >= 0) {\n    var elapsedTime = now$1() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber) {\n\n  if (layoutEffectStartTime >= 0) {\n    var elapsedTime = now$1() - layoutEffectStartTime;\n    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber) {\n\n  if (passiveEffectStartTime >= 0) {\n    var elapsedTime = now$1() - passiveEffectStartTime;\n    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n\n    var parentFiber = fiber.return;\n\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          var root = parentFiber.stateNode;\n\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n\n        case Profiler:\n          var parentStateNode = parentFiber.stateNode;\n\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n\n          return;\n      }\n\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer() {\n\n  layoutEffectStartTime = now$1();\n}\n\nfunction startPassiveEffectTimer() {\n\n  passiveEffectStartTime = now$1();\n}\n\nfunction transferActualDuration(fiber) {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  var child = fiber.child;\n\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nfunction createCapturedValueAtFiber(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value: value,\n    source: source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null\n  };\n}\nfunction createCapturedValue(value, digest, stack) {\n  return {\n    value: value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null\n  };\n}\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(boundary, errorInfo) {\n  return true;\n}\n\nfunction logCapturedError(boundary, errorInfo) {\n  try {\n    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n\n    if (logError === false) {\n      return;\n    }\n\n    var error = errorInfo.value;\n\n    if (true) {\n      var source = errorInfo.source;\n      var stack = errorInfo.stack;\n      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        } // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n\n\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      var componentName = source ? getComponentNameFromFiber(source) : null;\n      var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : 'The above error occurred in one of your React components:';\n      var errorBoundaryMessage;\n\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n      }\n\n      var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nvar PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.\n\n  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: null\n  };\n  var error = errorInfo.value;\n\n  update.callback = function () {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n\n  return update;\n}\n\nfunction createClassErrorUpdate(fiber, errorInfo, lane) {\n  var update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n  if (typeof getDerivedStateFromError === 'function') {\n    var error$1 = errorInfo.value;\n\n    update.payload = function () {\n      return getDerivedStateFromError(error$1);\n    };\n\n    update.callback = function () {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  var inst = fiber.stateNode;\n\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n\n      logCapturedError(fiber, errorInfo);\n\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n\n      var error$1 = errorInfo.value;\n      var stack = errorInfo.stack;\n      this.componentDidCatch(error$1, {\n        componentStack: stack !== null ? stack : ''\n      });\n\n      {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, SyncLane)) {\n            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');\n          }\n        }\n      }\n    };\n  }\n\n  return update;\n}\n\nfunction attachPingListener(root, wakeable, lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  var pingCache = root.pingCache;\n  var threadIDs;\n\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap$1();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n    {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(suspenseBoundary, root, wakeable, lanes) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  var wakeables = suspenseBoundary.updateQueue;\n\n  if (wakeables === null) {\n    var updateQueue = new Set();\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n  // A legacy mode Suspense quirk, only relevant to hook components.\n\n\n  var tag = sourceFiber.tag;\n\n  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n    var currentSource = sourceFiber.alternate;\n\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber) {\n  var node = returnFiber;\n\n  do {\n    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {\n      return node;\n    } // This boundary already captured during this render. Continue to the next\n    // boundary.\n\n\n    node = node.return;\n  } while (node !== null);\n\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        var currentSourceFiber = sourceFiber.alternate;\n\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          var update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      } // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n\n\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n\n    return suspenseBoundary;\n  } // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n\n\n  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {\n    // This is a wakeable. The component suspended.\n    var wakeable = value;\n    resetSuspendedComponent(sourceFiber);\n\n    {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n\n    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n\n      attachRetryListener(suspenseBoundary, root, wakeable);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      } // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n\n\n      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n\n      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n\n\n      if (_suspenseBoundary !== null) {\n        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          _suspenseBoundary.flags |= ForceClientRender;\n        }\n\n        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n  var workInProgress = returnFiber;\n\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot:\n        {\n          var _errorInfo = value;\n          workInProgress.flags |= ShouldCapture;\n          var lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n\n      case ClassComponent:\n        // Capture and retry\n        var errorInfo = value;\n        var ctor = workInProgress.type;\n        var instance = workInProgress.stateNode;\n\n        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n          workInProgress.flags |= ShouldCapture;\n\n          var _lane = pickArbitraryLane(rootRenderLanes);\n\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n\n          enqueueCapturedUpdate(workInProgress, _update);\n          return;\n        }\n\n        break;\n    }\n\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nfunction getSuspendedCache() {\n  {\n    return null;\n  } // This function is called when a Suspense boundary suspends. It returns the\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar didReceiveUpdate = false;\nvar didWarnAboutBadClass;\nvar didWarnAboutModulePatternComponent;\nvar didWarnAboutContextTypeOnFunctionComponent;\nvar didWarnAboutGetDerivedStateOnFunctionComponent;\nvar didWarnAboutFunctionRefs;\nvar didWarnAboutReassigningProps;\nvar didWarnAboutRevealOrder;\nvar didWarnAboutTailOptions;\n\n{\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n}\n\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n\n  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n}\n\nfunction updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var render = Component.render;\n  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  if (current === null) {\n    var type = Component.type;\n\n    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n    Component.defaultProps === undefined) {\n      var resolvedType = type;\n\n      {\n        resolvedType = resolveFunctionForHotReloading(type);\n      } // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n\n\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n\n      {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n\n      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n    }\n\n    {\n      var innerPropTypes = type.propTypes;\n\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(type));\n      }\n    }\n\n    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n\n  {\n    var _type = Component.type;\n    var _innerPropTypes = _type.propTypes;\n\n    if (_innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(_innerPropTypes, nextProps, // Resolved props\n      'prop', getComponentNameFromType(_type));\n    }\n  }\n\n  var currentChild = current.child; // This is always exactly one child\n\n  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n    var compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  var newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var outerMemoType = workInProgress.elementType;\n\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        var lazyComponent = outerMemoType;\n        var payload = lazyComponent._payload;\n        var init = lazyComponent._init;\n\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        } // Inner propTypes will be validated in the function component path.\n\n\n        var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n        if (outerPropTypes) {\n          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n          'prop', getComponentNameFromType(outerMemoType));\n        }\n      }\n    }\n  }\n\n  if (current !== null) {\n    var prevProps = current.memoizedProps;\n\n    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.\n     workInProgress.type === current.type )) {\n      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n\n  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n}\n\nfunction updateOffscreenComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  var prevState = current !== null ? current.memoizedState : null;\n\n  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      var nextState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null\n      };\n      workInProgress.memoizedState = nextState;\n\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      var nextBaseLanes;\n\n      if (prevState !== null) {\n        var prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      } // Schedule this fiber to re-render at offscreen priority. Then bailout.\n\n\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n      var _nextState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n        transitions: null\n      };\n      workInProgress.memoizedState = _nextState;\n      workInProgress.updateQueue = null;\n      // to avoid a push/pop misalignment.\n\n\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n      // Rendering at offscreen, so we can clear the base lanes.\n      var _nextState2 = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null\n      };\n      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.\n\n      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    var _subtreeRenderLanes;\n\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      _subtreeRenderLanes = renderLanes;\n    }\n\n    pushRenderLanes(workInProgress, _subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n} // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\nfunction updateFragment(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(current, workInProgress, renderLanes) {\n  var nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(current, workInProgress, renderLanes) {\n  {\n    workInProgress.flags |= Update;\n\n    {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      var stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current, workInProgress) {\n  var ref = workInProgress.ref;\n\n  if (current === null && ref !== null || current !== null && current.ref !== ref) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n\n    {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  }\n\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  var nextChildren;\n  var hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n\n    if ( workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n\n      try {\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n  {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false:\n        {\n          var _instance = workInProgress.stateNode;\n          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n          // Is there a better way to do this?\n\n          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n          var state = tempInstance.state;\n\n          _instance.updater.enqueueSetState(_instance, state, null);\n\n          break;\n        }\n\n      case true:\n        {\n          workInProgress.flags |= DidCapture;\n          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n          var error$1 = new Error('Simulated error coming from DevTools');\n          var lane = pickArbitraryLane(renderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n          enqueueCapturedUpdate(workInProgress, update);\n          break;\n        }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      var innerPropTypes = Component.propTypes;\n\n      if (innerPropTypes) {\n        checkPropTypes(innerPropTypes, nextProps, // Resolved props\n        'prop', getComponentNameFromType(Component));\n      }\n    }\n  } // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var instance = workInProgress.stateNode;\n  var shouldUpdate;\n\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  } else {\n    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n  }\n\n  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n\n  {\n    var inst = workInProgress.stateNode;\n\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');\n      }\n\n      didWarnAboutReassigningProps = true;\n    }\n  }\n\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  var instance = workInProgress.stateNode; // Rerender\n\n  ReactCurrentOwner$1.current = workInProgress;\n  var nextChildren;\n\n  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    {\n      stopProfilerTimerIfRunning();\n    }\n  } else {\n    {\n      markComponentRenderStarted(workInProgress);\n    }\n\n    {\n      setIsRendering(true);\n      nextChildren = instance.render();\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      setIsRendering(false);\n    }\n\n    {\n      markComponentRenderStopped();\n    }\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  } // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n\n\n  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  var root = workInProgress.stateNode;\n\n  if (root.pendingContext) {\n    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  var nextProps = workInProgress.pendingProps;\n  var prevState = workInProgress.memoizedState;\n  var prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  var nextState = workInProgress.memoizedState;\n  var root = workInProgress.stateNode;\n  // being called \"element\".\n\n\n  var nextChildren = nextState.element;\n\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    var overrideState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n      transitions: nextState.transitions\n    };\n    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);\n    } else if (nextChildren !== prevChildren) {\n      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);\n\n      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n\n      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      workInProgress.child = child;\n      var node = child;\n\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = node.flags & ~Placement | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {\n  // Revert to client rendering.\n  resetHydrationState();\n  queueHydrationError(recoverableError);\n  workInProgress.flags |= ForceClientRender;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(current, workInProgress, renderLanes) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  var type = workInProgress.type;\n  var nextProps = workInProgress.pendingProps;\n  var prevProps = current !== null ? current.memoizedProps : null;\n  var nextChildren = nextProps.children;\n  var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  } // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n\n\n  return null;\n}\n\nfunction mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  var props = workInProgress.pendingProps;\n  var lazyComponent = elementType;\n  var payload = lazyComponent._payload;\n  var init = lazyComponent._init;\n  var Component = init(payload); // Store the unwrapped component in the type.\n\n  workInProgress.type = Component;\n  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n  var resolvedProps = resolveDefaultProps(Component, props);\n  var child;\n\n  switch (resolvedTag) {\n    case FunctionComponent:\n      {\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n          workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n        }\n\n        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ClassComponent:\n      {\n        {\n          workInProgress.type = Component = resolveClassForHotReloading(Component);\n        }\n\n        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case ForwardRef:\n      {\n        {\n          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n        }\n\n        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n        return child;\n      }\n\n    case MemoComponent:\n      {\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = Component.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only\n              'prop', getComponentNameFromType(Component));\n            }\n          }\n        }\n\n        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes);\n        return child;\n      }\n  }\n\n  var hint = '';\n\n  {\n    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  } // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n\n\n  throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n}\n\nfunction mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n\n  var hasContext;\n\n  if (isContextProvider(Component)) {\n    hasContext = true;\n    pushContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n}\n\nfunction mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n  var props = workInProgress.pendingProps;\n  var context;\n\n  {\n    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var value;\n  var hasId;\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  {\n    if (Component.prototype && typeof Component.prototype.render === 'function') {\n      var componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner$1.current = workInProgress;\n    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n\n  {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var _componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);\n\n        didWarnAboutModulePatternComponent[_componentName] = true;\n      }\n    }\n  }\n\n  if ( // Run these checks in production only if the flag is off.\n  // Eventually we'll delete this branch altogether.\n   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n    {\n      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutModulePatternComponent[_componentName2]) {\n        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);\n\n        didWarnAboutModulePatternComponent[_componentName2] = true;\n      }\n    } // Proceed under the assumption that this is a class instance\n\n\n    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n\n    var hasContext = false;\n\n    if (isContextProvider(Component)) {\n      hasContext = true;\n      pushContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n    initializeUpdateQueue(workInProgress);\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n\n    {\n\n      if ( workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n\n        try {\n          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n\n    {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress, Component) {\n  {\n    if (Component) {\n      if (Component.childContextTypes) {\n        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');\n      }\n    }\n\n    if (workInProgress.ref !== null) {\n      var info = '';\n      var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      var warningKey = ownerName || '';\n      var debugSource = workInProgress._debugSource;\n\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n\n        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {\n        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);\n\n        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;\n      }\n    }\n\n    if (typeof Component.contextType === 'object' && Component.contextType !== null) {\n      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {\n        error('%s: Function components do not support contextType.', _componentName4);\n\n        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;\n      }\n    }\n  }\n}\n\nvar SUSPENDED_MARKER = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane\n};\n\nfunction mountSuspenseOffscreenState(renderLanes) {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n    transitions: null\n  };\n}\n\nfunction updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n  var cachePool = null;\n\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool: cachePool,\n    transitions: prevOffscreenState.transitions\n  };\n} // TODO: Probably should inline this back\n\n\nfunction shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    var suspenseState = current.memoizedState;\n\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  } // Not currently showing content. Consult the Suspense context.\n\n\n  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n}\n\nfunction getRemainingWorkInPrimaryTree(current, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n  {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  var suspenseContext = suspenseStackCursor.current;\n  var showFallback = false;\n  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (current === null || current.memoizedState !== null) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      {\n        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n\n  if (current === null) {\n    // Initial mount\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.\n\n    var suspenseState = workInProgress.memoizedState;\n\n    if (suspenseState !== null) {\n      var dehydrated = suspenseState.dehydrated;\n\n      if (dehydrated !== null) {\n        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);\n      }\n    }\n\n    var nextPrimaryChildren = nextProps.children;\n    var nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var primaryChildFragment = workInProgress.child;\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n    }\n  } else {\n    // This is an update.\n    // Special path for hydration\n    var prevState = current.memoizedState;\n\n    if (prevState !== null) {\n      var _dehydrated = prevState.dehydrated;\n\n      if (_dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);\n      }\n    }\n\n    if (showFallback) {\n      var _nextFallbackChildren = nextProps.fallback;\n      var _nextPrimaryChildren = nextProps.children;\n      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n      var _primaryChildFragment2 = workInProgress.child;\n      var prevOffscreenState = current.child.memoizedState;\n      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      var _nextPrimaryChildren2 = nextProps.children;\n\n      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n\n      workInProgress.memoizedState = null;\n      return _primaryChildFragment3;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var progressedPrimaryFragment = workInProgress.child;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n  var fallbackChildFragment;\n\n  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n    mode: 'visible',\n    children: primaryChildren\n  });\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    var deletions = workInProgress.deletions;\n\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var mode = workInProgress.mode;\n  var currentPrimaryChildFragment = current.child;\n  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n  var primaryChildProps = {\n    mode: 'hidden',\n    children: primaryChildren\n  };\n  var primaryChildFragment;\n\n  if ( // In legacy mode, we commit the primary tree as if it successfully\n  // completed, even though it's in an inconsistent state.\n  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n  // already cloned. In legacy mode, the only case where this isn't true is\n  // when DevTools forces us to display a fallback; we skip the first render\n  // pass entirely and go straight to rendering the fallback. (In Concurrent\n  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n  // only codepath.)\n  workInProgress.child !== currentPrimaryChildFragment) {\n    var progressedPrimaryFragment = workInProgress.child;\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if ( workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n    } // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n\n\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n\n    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n\n  var fallbackChildFragment;\n\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n  } else {\n    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  } // This will add the old fiber to the deletion list\n\n\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n  var nextProps = workInProgress.pendingProps;\n  var primaryChildren = nextProps.children;\n  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n  var fiberMode = workInProgress.mode;\n  var primaryChildProps = {\n    mode: 'visible',\n    children: primaryChildren\n  };\n  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n\n  fallbackChildFragment.flags |= Placement;\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    {\n      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');\n    }\n\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument\n      // required — every concurrent mode path that causes hydration to\n      // de-opt to client rendering should have an error message.\n      null);\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      var digest, message, stack;\n\n      {\n        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);\n\n        digest = _getSuspenseInstanceF.digest;\n        message = _getSuspenseInstanceF.message;\n        stack = _getSuspenseInstanceF.stack;\n      }\n\n      var error;\n\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');\n      }\n\n      var capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n    }\n    // any context has changed, we need to treat is as if the input might have changed.\n\n\n    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      var root = getWorkInProgressRoot();\n\n      if (root !== null) {\n        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n\n        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render\n\n          var eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);\n        }\n      } // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n\n\n      renderDidSuspendDelayIfPossible();\n\n      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n      var retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      workInProgress.flags &= ~ForceClientRender;\n\n      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));\n\n      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);\n    } else if (workInProgress.memoizedState !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      var nextPrimaryChildren = nextProps.children;\n      var nextFallbackChildren = nextProps.fallback;\n      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n      var _primaryChildFragment4 = workInProgress.child;\n      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  var node = firstChild;\n\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      var state = node.memoizedState;\n\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n\n    if (node === workInProgress) {\n      return;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild) {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  var row = firstChild;\n  var lastContentRow = null;\n\n  while (row !== null) {\n    var currentRow = row.alternate; // New rows can't be content rows.\n\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n\n    row = row.sibling;\n  }\n\n  return lastContentRow;\n}\n\nfunction validateRevealOrder(revealOrder) {\n  {\n    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          case 'forward':\n          case 'backward':\n            {\n              error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n\n              break;\n            }\n\n          default:\n            error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n\n            break;\n        }\n      } else {\n        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(tailMode, revealOrder) {\n  {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n\n        error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot, index) {\n  {\n    var isAnArray = isArray(childSlot);\n    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n\n    if (isAnArray || isIterable) {\n      var type = isAnArray ? 'array' : 'iterable';\n\n      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);\n\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateSuspenseListChildren(children, revealOrder) {\n  {\n    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {\n      if (isArray(children)) {\n        for (var i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        var iteratorFn = getIteratorFn(children);\n\n        if (typeof iteratorFn === 'function') {\n          var childrenIterator = iteratorFn.call(children);\n\n          if (childrenIterator) {\n            var step = childrenIterator.next();\n            var _i = 0;\n\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, _i)) {\n                return;\n              }\n\n              _i++;\n            }\n          }\n        } else {\n          error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n  var renderState = workInProgress.memoizedState;\n\n  if (renderState === null) {\n    workInProgress.memoizedState = {\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode\n    };\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n} // This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\n\n\nfunction updateSuspenseListComponent(current, workInProgress, renderLanes) {\n  var nextProps = workInProgress.pendingProps;\n  var revealOrder = nextProps.revealOrder;\n  var tailMode = nextProps.tail;\n  var newChildren = nextProps.children;\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  var suspenseContext = suspenseStackCursor.current;\n  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);\n\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n    workInProgress.flags |= DidCapture;\n  } else {\n    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;\n\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n    }\n\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards':\n        {\n          var lastContentRow = findLastContentRow(workInProgress.child);\n          var tail;\n\n          if (lastContentRow === null) {\n            // The whole list is part of the tail.\n            // TODO: We could fast path by just rendering the tail now.\n            tail = workInProgress.child;\n            workInProgress.child = null;\n          } else {\n            // Disconnect the tail rows after the content row.\n            // We're going to render them separately later.\n            tail = lastContentRow.sibling;\n            lastContentRow.sibling = null;\n          }\n\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          tail, lastContentRow, tailMode);\n          break;\n        }\n\n      case 'backwards':\n        {\n          // We're going to find the first row that has existing content.\n          // At the same time we're going to reverse the list of everything\n          // we pass in the meantime. That's going to be our tail in reverse\n          // order.\n          var _tail = null;\n          var row = workInProgress.child;\n          workInProgress.child = null;\n\n          while (row !== null) {\n            var currentRow = row.alternate; // New rows can't be content rows.\n\n            if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n              // This is the beginning of the main content.\n              workInProgress.child = row;\n              break;\n            }\n\n            var nextRow = row.sibling;\n            row.sibling = _tail;\n            _tail = row;\n            row = nextRow;\n          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n\n          initSuspenseListRenderState(workInProgress, true, // isBackwards\n          _tail, null, // last\n          tailMode);\n          break;\n        }\n\n      case 'together':\n        {\n          initSuspenseListRenderState(workInProgress, false, // isBackwards\n          null, // tail\n          null, // last\n          undefined);\n          break;\n        }\n\n      default:\n        {\n          // The default reveal order is the same as not having\n          // a boundary.\n          workInProgress.memoizedState = null;\n        }\n    }\n  }\n\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(current, workInProgress, renderLanes) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  var nextChildren = workInProgress.pendingProps;\n\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(current, workInProgress, renderLanes) {\n  var providerType = workInProgress.type;\n  var context = providerType._context;\n  var newProps = workInProgress.pendingProps;\n  var oldProps = workInProgress.memoizedProps;\n  var newValue = newProps.value;\n\n  {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');\n      }\n    }\n\n    var providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  {\n    if (oldProps !== null) {\n      var oldValue = oldProps.value;\n\n      if (objectIs(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (oldProps.children === newProps.children && !hasContextChanged()) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  var newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nvar hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(current, workInProgress, renderLanes) {\n  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n\n  {\n    if (context._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n\n          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n        }\n      }\n    } else {\n      context = context._context;\n    }\n  }\n\n  var newProps = workInProgress.pendingProps;\n  var render = newProps.children;\n\n  {\n    if (typeof render !== 'function') {\n      error('A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  var newValue = readContext(context);\n\n  {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  var newChildren;\n\n  {\n    ReactCurrentOwner$1.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  }\n\n  {\n    markComponentRenderStopped();\n  } // React DevTools reads this flag.\n\n\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning();\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    {\n      return null;\n    }\n  } // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n\n\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n  {\n    var returnFiber = oldWorkInProgress.return;\n\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    } // Disconnect from the old current.\n    // It will get deleted.\n\n\n    current.alternate = null;\n    oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      var prevSibling = returnFiber.child;\n\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n\n      prevSibling.sibling = newWorkInProgress;\n    } // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n\n\n    var deletions = returnFiber.deletions;\n\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n    return newWorkInProgress;\n  }\n}\n\nfunction checkScheduledUpdateOrContext(current, renderLanes) {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  var updateLanes = current.lanes;\n\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  } // No pending update, but because context is propagated lazily, we need\n\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      var root = workInProgress.stateNode;\n\n      resetHydrationState();\n      break;\n\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          pushContextProvider(workInProgress);\n        }\n\n        break;\n      }\n\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n\n    case ContextProvider:\n      {\n        var newValue = workInProgress.memoizedProps.value;\n        var context = workInProgress.type._context;\n        pushProvider(workInProgress, context, newValue);\n        break;\n      }\n\n    case Profiler:\n      {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n\n      break;\n\n    case SuspenseComponent:\n      {\n        var state = workInProgress.memoizedState;\n\n        if (state !== null) {\n          if (state.dehydrated !== null) {\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has\n            // been unsuspended it has committed as a resolved Suspense component.\n            // If it needs to be retried, it should have work scheduled on it.\n\n            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n            return null;\n          } // If this boundary is currently timed out, we need to decide\n          // whether to retry the primary children, or to skip over it and\n          // go straight to the fallback. Check the priority of the primary\n          // child fragment.\n\n\n          var primaryChildFragment = workInProgress.child;\n          var primaryChildLanes = primaryChildFragment.childLanes;\n\n          if (includesSomeLane(renderLanes, primaryChildLanes)) {\n            // The primary children have pending work. Use the normal path\n            // to attempt to render the primary children again.\n            return updateSuspenseComponent(current, workInProgress, renderLanes);\n          } else {\n            // The primary child fragment does not have pending work marked\n            // on it\n            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient\n            // priority. Bailout.\n\n            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n\n            if (child !== null) {\n              // The fallback children have pending work. Skip over the\n              // primary children and work on the fallback.\n              return child.sibling;\n            } else {\n              // Note: We can return `null` here because we already checked\n              // whether there were nested context consumers, via the call to\n              // `bailoutOnAlreadyFinishedWork` above.\n              return null;\n            }\n          }\n        } else {\n          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));\n        }\n\n        break;\n      }\n\n    case SuspenseListComponent:\n      {\n        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n\n        if (didSuspendBefore) {\n          if (_hasChildWork) {\n            // If something was in fallback state last time, and we have all the\n            // same children then we're still in progressive loading state.\n            // Something might get unblocked by state updates or retries in the\n            // tree which will affect the tail. So we need to use the normal\n            // path to compute the correct tail.\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          } // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n\n\n          workInProgress.flags |= DidCapture;\n        } // If nothing suspended before and we're rendering the same children,\n        // then the tail doesn't matter. Anything new that suspends will work\n        // in the \"together\" mode, so we can continue from the state we had.\n\n\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState !== null) {\n          // Reset to the \"together\" mode in case we've started a different\n          // update in the past but didn't complete it.\n          renderState.rendering = null;\n          renderState.tail = null;\n          renderState.lastEffect = null;\n        }\n\n        pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n        if (_hasChildWork) {\n          break;\n        } else {\n          // If none of the children had any work, that means that none of\n          // them got retried so they'll still be blocked in the same way\n          // as before. We can fast bail out.\n          return null;\n        }\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        // Need to check if the tree still needs to be deferred. This is\n        // almost identical to the logic used in the normal update path,\n        // so we'll just enter that. The only difference is we'll bail out\n        // at the next level instead of this one, because the child props\n        // have not changed. Which is fine.\n        // TODO: Probably should refactor `beginWork` to split the bailout\n        // path from the normal path. I'm tempted to do a labeled break here\n        // but I won't :)\n        workInProgress.lanes = NoLanes;\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(current, workInProgress, renderLanes) {\n  {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n    }\n  }\n\n  if (current !== null) {\n    var oldProps = current.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n\n    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:\n     workInProgress.type !== current.type )) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n\n      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n      // may not be work scheduled on `current`, so we check for this flag.\n      (workInProgress.flags & DidCapture) === NoFlags) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n      }\n\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      var slotIndex = workInProgress.index;\n      var numberOfForks = getForksAtLevel();\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  } // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n\n\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n      {\n        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n      }\n\n    case LazyComponent:\n      {\n        var elementType = workInProgress.elementType;\n        return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n      }\n\n    case FunctionComponent:\n      {\n        var Component = workInProgress.type;\n        var unresolvedProps = workInProgress.pendingProps;\n        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n      }\n\n    case ClassComponent:\n      {\n        var _Component = workInProgress.type;\n        var _unresolvedProps = workInProgress.pendingProps;\n\n        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n\n        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n      }\n\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n\n    case HostText:\n      return updateHostText(current, workInProgress);\n\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n\n    case ForwardRef:\n      {\n        var type = workInProgress.type;\n        var _unresolvedProps2 = workInProgress.pendingProps;\n\n        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n\n        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n      }\n\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n\n    case MemoComponent:\n      {\n        var _type2 = workInProgress.type;\n        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n        {\n          if (workInProgress.type !== workInProgress.elementType) {\n            var outerPropTypes = _type2.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only\n              'prop', getComponentNameFromType(_type2));\n            }\n          }\n        }\n\n        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n      }\n\n    case SimpleMemoComponent:\n      {\n        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n      }\n\n    case IncompleteClassComponent:\n      {\n        var _Component2 = workInProgress.type;\n        var _unresolvedProps4 = workInProgress.pendingProps;\n\n        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n      }\n\n    case SuspenseListComponent:\n      {\n        return updateSuspenseListComponent(current, workInProgress, renderLanes);\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n      {\n        return updateOffscreenComponent(current, workInProgress, renderLanes);\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction markUpdate(workInProgress) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef$1(workInProgress) {\n  workInProgress.flags |= Ref;\n\n  {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current, completedWork) {\n  var didBailout = current !== null && current.child === completedWork.child;\n\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n\n\n  var child = completedWork.child;\n\n  while (child !== null) {\n    if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {\n      return false;\n    }\n\n    child = child.sibling;\n  }\n\n  return true;\n}\n\nvar appendAllChildren;\nvar updateHostContainer;\nvar updateHostComponent$1;\nvar updateHostText$1;\n\nif (supportsMutation) {\n  // Mutation mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    var oldProps = current.memoizedProps;\n\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    } // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n\n\n    var instance = workInProgress.stateNode;\n    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n\n    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.\n\n    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        var _instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance = cloneHiddenTextInstance(_instance, text, node);\n        }\n\n        appendInitialChild(parent, _instance);\n      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        var child = node.child;\n\n        if (child !== null) {\n          child.return = node;\n        }\n\n        appendAllChildren(parent, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }; // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n\n  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n       if (node.tag === HostComponent) {\n        var instance = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var props = node.memoizedProps;\n          var type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        var _instance2 = node.stateNode;\n\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          var text = node.memoizedProps;\n          _instance2 = cloneHiddenTextInstance(_instance2, text, node);\n        }\n\n        appendChildToContainerChildSet(containerChildSet, _instance2);\n      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        var child = node.child;\n\n        if (child !== null) {\n          child.return = node;\n        }\n\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      } // $FlowFixMe This is correct but Flow is confused by the labeled break.\n\n\n      node = node;\n\n      if (node === workInProgress) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function (current, workInProgress) {\n    var portalOrRoot = workInProgress.stateNode;\n    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n    if (childrenUnchanged) ; else {\n      var container = portalOrRoot.containerInfo;\n      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.\n\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.\n\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {\n    var currentInstance = current.stateNode;\n    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n\n    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var recyclableInstance = workInProgress.stateNode;\n    var currentHostContext = getHostContext();\n    var updatePayload = null;\n\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n    }\n\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n\n    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n\n    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n      markUpdate(workInProgress);\n    }\n\n    workInProgress.stateNode = newInstance;\n\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      var rootContainerInstance = getRootHostContainer();\n      var currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function (current, workInProgress) {// Noop\n  };\n\n  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop\n  };\n\n  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n\n  switch (renderState.tailMode) {\n    case 'hidden':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var tailNode = renderState.tail;\n        var lastTailNode = null;\n\n        while (tailNode !== null) {\n          if (tailNode.alternate !== null) {\n            lastTailNode = tailNode;\n          }\n\n          tailNode = tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          renderState.tail = null;\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n\n    case 'collapsed':\n      {\n        // Any insertions at the end of the tail list after this point\n        // should be invisible. If there are already mounted boundaries\n        // anything before them are not considered for collapsing.\n        // Therefore we need to go through the whole tail to find if\n        // there are any.\n        var _tailNode = renderState.tail;\n        var _lastTailNode = null;\n\n        while (_tailNode !== null) {\n          if (_tailNode.alternate !== null) {\n            _lastTailNode = _tailNode;\n          }\n\n          _tailNode = _tailNode.sibling;\n        } // Next we're simply going to delete all insertions after the\n        // last rendered item.\n\n\n        if (_lastTailNode === null) {\n          // All remaining items in the tail are insertions.\n          if (!hasRenderedATailFallback && renderState.tail !== null) {\n            // We suspended during the head. We want to show at least one\n            // row at the tail. So we'll keep on and cut off the rest.\n            renderState.tail.sibling = null;\n          } else {\n            renderState.tail = null;\n          }\n        } else {\n          // Detach the insertion after the last node that was already\n          // inserted.\n          _lastTailNode.sibling = null;\n        }\n\n        break;\n      }\n  }\n}\n\nfunction bubbleProperties(completedWork) {\n  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n  var newChildLanes = NoLanes;\n  var subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var actualDuration = completedWork.actualDuration;\n      var treeBaseDuration = completedWork.selfBaseDuration;\n      var child = completedWork.child;\n\n      while (child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n\n        actualDuration += child.actualDuration;\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      var _child = completedWork.child;\n\n      while (_child !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n        subtreeFlags |= _child.subtreeFlags;\n        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child.return = completedWork;\n        _child = _child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if ( (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      var _treeBaseDuration = completedWork.selfBaseDuration;\n      var _child2 = completedWork.child;\n\n      while (_child2 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child2.subtreeFlags & StaticMask;\n        subtreeFlags |= _child2.flags & StaticMask;\n        _treeBaseDuration += _child2.treeBaseDuration;\n        _child2 = _child2.sibling;\n      }\n\n      completedWork.treeBaseDuration = _treeBaseDuration;\n    } else {\n      var _child3 = completedWork.child;\n\n      while (_child3 !== null) {\n        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n\n        subtreeFlags |= _child3.subtreeFlags & StaticMask;\n        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n\n        _child3.return = completedWork;\n        _child3 = _child3.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n    return false;\n  }\n\n  var wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');\n      }\n\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n\n      {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          var isTimedOutSuspense = nextState !== null;\n\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            var primaryChildFragment = workInProgress.child;\n\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n            }\n          }\n        }\n      }\n\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      } // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n\n\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n\n      {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          var _isTimedOutSuspense = nextState !== null;\n\n          if (_isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            var _primaryChildFragment = workInProgress.child;\n\n            if (_primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n    return true;\n  }\n}\n\nfunction completeWork(current, workInProgress, renderLanes) {\n  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var fiberRoot = workInProgress.stateNode;\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n\n        if (fiberRoot.pendingContext) {\n          fiberRoot.context = fiberRoot.pendingContext;\n          fiberRoot.pendingContext = null;\n        }\n\n        if (current === null || current.child === null) {\n          // If we hydrated, pop so that we can delete any remaining children\n          // that weren't hydrated.\n          var wasHydrated = popHydrationState(workInProgress);\n\n          if (wasHydrated) {\n            // If we hydrated, then we'll need to schedule an update for\n            // the commit side-effects on the root.\n            markUpdate(workInProgress);\n          } else {\n            if (current !== null) {\n              var prevState = current.memoizedState;\n\n              if ( // Check if this is a client root\n              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags) {\n                // Schedule an effect to clear this container at the start of the\n                // next commit. This handles the case of React rendering into a\n                // container with previous children. It's also safe to do for\n                // updates too, because current.child would only be null if the\n                // previous render was null (so the container would already\n                // be empty).\n                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                // recoverable errors during first hydration attempt. If so, add\n                // them to a queue so we can log them in the commit phase.\n\n                upgradeHydrationErrorsToRecoverable();\n              }\n            }\n          }\n        }\n\n        updateHostContainer(current, workInProgress);\n        bubbleProperties(workInProgress);\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(workInProgress);\n        var rootContainerInstance = getRootHostContainer();\n        var type = workInProgress.type;\n\n        if (current !== null && workInProgress.stateNode != null) {\n          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);\n\n          if (current.ref !== workInProgress.ref) {\n            markRef$1(workInProgress);\n          }\n        } else {\n          if (!newProps) {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n          // \"stack\" as the parent. Then append children as we go in beginWork\n          // or completeWork depending on whether we want to add them top->down or\n          // bottom->up. Top->down is faster in IE11.\n\n          var _wasHydrated = popHydrationState(workInProgress);\n\n          if (_wasHydrated) {\n            // TODO: Move this and createInstance step into the beginPhase\n            // to consolidate.\n            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {\n              // If changes to the hydrated node need to be applied at the\n              // commit-phase we mark this as such.\n              markUpdate(workInProgress);\n            }\n          } else {\n            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\n            appendAllChildren(instance, workInProgress, false, false);\n            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.\n            // (eg DOM renderer supports auto-focus for certain elements).\n            // Make sure such renderers get scheduled for later work.\n\n            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {\n              markUpdate(workInProgress);\n            }\n          }\n\n          if (workInProgress.ref !== null) {\n            // If there is a ref on a host node we need to schedule a callback\n            markRef$1(workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case HostText:\n      {\n        var newText = newProps;\n\n        if (current && workInProgress.stateNode != null) {\n          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n          // to schedule a side-effect to do the updates.\n\n          updateHostText$1(current, workInProgress, oldText, newText);\n        } else {\n          if (typeof newText !== 'string') {\n            if (workInProgress.stateNode === null) {\n              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            } // This can happen when we abort work.\n\n          }\n\n          var _rootContainerInstance = getRootHostContainer();\n\n          var _currentHostContext = getHostContext();\n\n          var _wasHydrated2 = popHydrationState(workInProgress);\n\n          if (_wasHydrated2) {\n            if (prepareToHydrateHostTextInstance(workInProgress)) {\n              markUpdate(workInProgress);\n            }\n          } else {\n            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);\n          }\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n        // to its own fiber type so that we can add other kinds of hydration\n        // boundaries that aren't associated with a Suspense tree. In anticipation\n        // of such a refactor, all the hydration logic is contained in\n        // this branch.\n\n        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n\n          if (!fallthroughToNormalSuspensePath) {\n            if (workInProgress.flags & ShouldCapture) {\n              // Special case. There were remaining unhydrated nodes. We treat\n              // this as a mismatch. Revert to client rendering.\n              return workInProgress;\n            } else {\n              // Did not finish hydrating, either because this is the initial\n              // render or because something suspended.\n              return null;\n            }\n          } // Continue with the normal Suspense path.\n\n        }\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n          // Something suspended. Re-render with the fallback children.\n          workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          } // Don't bubble properties in this case.\n\n\n          return workInProgress;\n        }\n\n        var nextDidTimeout = nextState !== null;\n        var prevDidTimeout = current !== null && current.memoizedState !== null;\n        // a passive effect, which is when we process the transitions\n\n\n        if (nextDidTimeout !== prevDidTimeout) {\n          // an effect to toggle the subtree's visibility. When we switch from\n          // fallback -> primary, the inner Offscreen fiber schedules this effect\n          // as part of its normal complete phase. But when we switch from\n          // primary -> fallback, the inner Offscreen fiber does not have a complete\n          // phase. So we need to schedule its effect here.\n          //\n          // We also use this flag to connect/disconnect the effects, but the same\n          // logic applies: when re-connecting, the Offscreen fiber's complete\n          // phase will handle scheduling the effect. It's only when the fallback\n          // is active that we have to do anything special.\n\n\n          if (nextDidTimeout) {\n            var _offscreenFiber2 = workInProgress.child;\n            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything\n            // in the concurrent tree already suspended during this render.\n            // This is a known bug.\n\n            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n              // TODO: Move this back to throwException because this is too late\n              // if this is a large tree which is common for initial loads. We\n              // don't know if we should restart a render or not until we get\n              // this marker, and this is too late.\n              // If this render already had a ping or lower pri updates,\n              // and this is the first time we know we're going to suspend we\n              // should be able to immediately restart from within throwException.\n              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);\n\n              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {\n                // If this was in an invisible tree or a new render, then showing\n                // this boundary is ok.\n                renderDidSuspend();\n              } else {\n                // Otherwise, we're going to have to hide content so we should\n                // suspend for longer if possible.\n                renderDidSuspendDelayIfPossible();\n              }\n            }\n          }\n        }\n\n        var wakeables = workInProgress.updateQueue;\n\n        if (wakeables !== null) {\n          // Schedule an effect to attach a retry listener to the promise.\n          // TODO: Move to passive phase\n          workInProgress.flags |= Update;\n        }\n\n        bubbleProperties(workInProgress);\n\n        {\n          if ((workInProgress.mode & ProfileMode) !== NoMode) {\n            if (nextDidTimeout) {\n              // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n              var primaryChildFragment = workInProgress.child;\n\n              if (primaryChildFragment !== null) {\n                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n              }\n            }\n          }\n        }\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n\n      bubbleProperties(workInProgress);\n      return null;\n\n    case ContextProvider:\n      // Pop provider fiber\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n\n    case IncompleteClassComponent:\n      {\n        // Same as class component case. I put it down here so that the tags are\n        // sequential to ensure this switch is compiled to a jump table.\n        var _Component = workInProgress.type;\n\n        if (isContextProvider(_Component)) {\n          popContext(workInProgress);\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var renderState = workInProgress.memoizedState;\n\n        if (renderState === null) {\n          // We're running in the default, \"independent\" mode.\n          // We don't do anything in this mode.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n        var renderedTail = renderState.rendering;\n\n        if (renderedTail === null) {\n          // We just rendered the head.\n          if (!didSuspendAlready) {\n            // This is the first pass. We need to figure out if anything is still\n            // suspended in the rendered set.\n            // If new content unsuspended, but there's still some content that\n            // didn't. Then we need to do a second pass that forces everything\n            // to keep showing their fallbacks.\n            // We might be suspended if something in this render pass suspended, or\n            // something in the previous committed pass suspended. Otherwise,\n            // there's no chance so we can skip the expensive call to\n            // findFirstSuspended.\n            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);\n\n            if (!cannotBeSuspended) {\n              var row = workInProgress.child;\n\n              while (row !== null) {\n                var suspended = findFirstSuspended(row);\n\n                if (suspended !== null) {\n                  didSuspendAlready = true;\n                  workInProgress.flags |= DidCapture;\n                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                  // part of the second pass. In that case nothing will subscribe to\n                  // its thenables. Instead, we'll transfer its thenables to the\n                  // SuspenseList so that it can retry if they resolve.\n                  // There might be multiple of these in the list but since we're\n                  // going to wait for all of them anyway, it doesn't really matter\n                  // which ones gets to ping. In theory we could get clever and keep\n                  // track of how many dependencies remain but it gets tricky because\n                  // in the meantime, we can add/remove/change items and dependencies.\n                  // We might bail out of the loop before finding any but that\n                  // doesn't matter since that means that the other boundaries that\n                  // we did find already has their listeners attached.\n\n                  var newThenables = suspended.updateQueue;\n\n                  if (newThenables !== null) {\n                    workInProgress.updateQueue = newThenables;\n                    workInProgress.flags |= Update;\n                  } // Rerender the whole list, but this time, we'll force fallbacks\n                  // to stay in place.\n                  // Reset the effect flags before doing the second pass since that's now invalid.\n                  // Reset the child fibers to their original state.\n\n\n                  workInProgress.subtreeFlags = NoFlags;\n                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately\n                  // rerender the children.\n\n                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.\n\n                  return workInProgress.child;\n                }\n\n                row = row.sibling;\n              }\n            }\n\n            if (renderState.tail !== null && now() > getRenderTargetTime()) {\n              // We have already passed our CPU deadline but we still have rows\n              // left in the tail. We'll just give up further attempts to render\n              // the main content and only render fallbacks.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          } else {\n            cutOffTailIfNeeded(renderState, false);\n          } // Next we're going to render the tail.\n\n        } else {\n          // Append the rendered row to the child list.\n          if (!didSuspendAlready) {\n            var _suspended = findFirstSuspended(renderedTail);\n\n            if (_suspended !== null) {\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n              // get lost if this row ends up dropped during a second pass.\n\n              var _newThenables = _suspended.updateQueue;\n\n              if (_newThenables !== null) {\n                workInProgress.updateQueue = _newThenables;\n                workInProgress.flags |= Update;\n              }\n\n              cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.\n              ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n            } else if ( // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n              // We have now passed our CPU deadline and we'll just give up further\n              // attempts to render the main content and only render fallbacks.\n              // The assumption is that this is usually faster.\n              workInProgress.flags |= DidCapture;\n              didSuspendAlready = true;\n              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n              // to get it started back up to attempt the next item. While in terms\n              // of priority this work has the same priority as this current render,\n              // it's not part of the same transition once the transition has\n              // committed. If it's sync, we still want to yield so that it can be\n              // painted. Conceptually, this is really the same as pinging.\n              // We can use any RetryLane even if it's the one currently rendering\n              // since we're leaving it behind on this node.\n\n              workInProgress.lanes = SomeRetryLane;\n            }\n          }\n\n          if (renderState.isBackwards) {\n            // The effect list of the backwards tail will have been added\n            // to the end. This breaks the guarantee that life-cycles fire in\n            // sibling order but that isn't a strong guarantee promised by React.\n            // Especially since these might also just pop in during future commits.\n            // Append to the beginning of the list.\n            renderedTail.sibling = workInProgress.child;\n            workInProgress.child = renderedTail;\n          } else {\n            var previousSibling = renderState.last;\n\n            if (previousSibling !== null) {\n              previousSibling.sibling = renderedTail;\n            } else {\n              workInProgress.child = renderedTail;\n            }\n\n            renderState.last = renderedTail;\n          }\n        }\n\n        if (renderState.tail !== null) {\n          // We still have tail rows to render.\n          // Pop a row.\n          var next = renderState.tail;\n          renderState.rendering = next;\n          renderState.tail = next.sibling;\n          renderState.renderingStartTime = now();\n          next.sibling = null; // Restore the context.\n          // TODO: We can probably just avoid popping it instead and only\n          // setting it the first time we go from not suspended to suspended.\n\n          var suspenseContext = suspenseStackCursor.current;\n\n          if (didSuspendAlready) {\n            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);\n          } else {\n            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n          }\n\n          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.\n          // Don't bubble properties in this case.\n\n          return next;\n        }\n\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n    case ScopeComponent:\n      {\n\n        break;\n      }\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      {\n        popRenderLanes(workInProgress);\n        var _nextState = workInProgress.memoizedState;\n        var nextIsHidden = _nextState !== null;\n\n        if (current !== null) {\n          var _prevState = current.memoizedState;\n          var prevIsHidden = _prevState !== null;\n\n          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.\n          !enableLegacyHidden )) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n\n        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n          bubbleProperties(workInProgress);\n        } else {\n          // Don't bubble properties for hidden children unless we're rendering\n          // at offscreen priority.\n          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {\n            bubbleProperties(workInProgress);\n\n            if (supportsMutation) {\n              // Check if there was an insertion or update in the hidden subtree.\n              // If so, we need to hide those nodes in the commit phase, so\n              // schedule a visibility effect.\n              if ( workInProgress.subtreeFlags & (Placement | Update)) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n        }\n        return null;\n      }\n\n    case CacheComponent:\n      {\n\n        return null;\n      }\n\n    case TracingMarkerComponent:\n      {\n\n        return null;\n      }\n  }\n\n  throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + 'React. Please file an issue.');\n}\n\nfunction unwindWork(current, workInProgress, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n\n  switch (workInProgress.tag) {\n    case ClassComponent:\n      {\n        var Component = workInProgress.type;\n\n        if (isContextProvider(Component)) {\n          popContext(workInProgress);\n        }\n\n        var flags = workInProgress.flags;\n\n        if (flags & ShouldCapture) {\n          workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case HostRoot:\n      {\n        var root = workInProgress.stateNode;\n        popHostContainer(workInProgress);\n        popTopLevelContextObject(workInProgress);\n        resetWorkInProgressVersions();\n        var _flags = workInProgress.flags;\n\n        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {\n          // There was an error during render that wasn't captured by a suspense\n          // boundary. Do a second pass on the root to unmount the children.\n          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n          return workInProgress;\n        } // We unwound to the root without completing it. Exit.\n\n\n        return null;\n      }\n\n    case HostComponent:\n      {\n        // TODO: popHydrationState\n        popHostContext(workInProgress);\n        return null;\n      }\n\n    case SuspenseComponent:\n      {\n        popSuspenseContext(workInProgress);\n        var suspenseState = workInProgress.memoizedState;\n\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          if (workInProgress.alternate === null) {\n            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');\n          }\n\n          resetHydrationState();\n        }\n\n        var _flags2 = workInProgress.flags;\n\n        if (_flags2 & ShouldCapture) {\n          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n          if ( (workInProgress.mode & ProfileMode) !== NoMode) {\n            transferActualDuration(workInProgress);\n          }\n\n          return workInProgress;\n        }\n\n        return null;\n      }\n\n    case SuspenseListComponent:\n      {\n        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n        // caught by a nested boundary. If not, it should bubble through.\n\n        return null;\n      }\n\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n\n    case ContextProvider:\n      var context = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n\n    case CacheComponent:\n\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(current, interruptedWork, renderLanes) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n\n  switch (interruptedWork.tag) {\n    case ClassComponent:\n      {\n        var childContextTypes = interruptedWork.type.childContextTypes;\n\n        if (childContextTypes !== null && childContextTypes !== undefined) {\n          popContext(interruptedWork);\n        }\n\n        break;\n      }\n\n    case HostRoot:\n      {\n        var root = interruptedWork.stateNode;\n        popHostContainer(interruptedWork);\n        popTopLevelContextObject(interruptedWork);\n        resetWorkInProgressVersions();\n        break;\n      }\n\n    case HostComponent:\n      {\n        popHostContext(interruptedWork);\n        break;\n      }\n\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n\n    case ContextProvider:\n      var context = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n  }\n}\n\nfunction invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nvar invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\n{\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebook/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      if (typeof document === 'undefined' || document === null) {\n        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n      }\n\n      var evt = document.createEvent('Event');\n      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n\n      var didError = true; // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n\n      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n\n      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n\n        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {\n          window.event = windowEvent;\n        }\n      } // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n\n\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      } // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n\n\n      var error; // Use this to track whether the error event is ever called.\n\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {// Ignore.\n            }\n          }\n        }\n      } // Create a fake event type.\n\n\n      var evtType = \"react-\" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers\n\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');\n        }\n\n        this.onError(error);\n      } // Remove our event listeners\n\n\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nvar invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;\n\nvar hasError = false;\nvar caughtError = null; // Used by event system to capture/rethrow the first error.\nvar reporter = {\n  onError: function (error) {\n    hasError = true;\n    caughtError = error;\n  }\n};\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\n\nfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\n}\nfunction hasCaughtError() {\n  return hasError;\n}\nfunction clearCaughtError() {\n  if (hasError) {\n    var error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n  }\n}\n\nvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n{\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n} // Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\n\n\nvar offscreenSubtreeIsHidden = false;\nvar offscreenSubtreeWasHidden = false;\nvar PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\nvar nextEffect = null; // Used for Profiling builds to track updaters.\n\nvar inProgressLanes = null;\nvar inProgressRoot = null;\nfunction reportUncaughtErrorInDEV(error) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  {\n    invokeGuardedCallback(null, function () {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nvar callComponentWillUnmountWithTimer = function (current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n\n  if ( current.mode & ProfileMode) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n}; // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {\n  try {\n    commitHookEffectListMount(Layout, current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt unmounting.\n\n\nfunction safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n} // Capture errors so they don't interrupt mounting.\n\n\nfunction safelyAttachRef(current, nearestMountedAncestor) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current, nearestMountedAncestor) {\n  var ref = current.ref;\n\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      var retVal;\n\n      try {\n        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nvar focusedInstanceHandle = null;\nvar shouldFireAfterActiveInstanceBlur = false;\nfunction commitBeforeMutationEffects(root, firstChild) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n  var shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n    var child = fiber.child;\n\n    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    setCurrentFiber(fiber);\n\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags;\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentFiber(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          break;\n        }\n\n      case ClassComponent:\n        {\n          if (current !== null) {\n            var prevProps = current.memoizedProps;\n            var prevState = current.memoizedState;\n            var instance = finishedWork.stateNode; // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            }\n\n            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n\n            {\n              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                didWarnSet.add(finishedWork.type);\n\n                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));\n              }\n            }\n\n            instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          if (supportsMutation) {\n            var root = finishedWork.stateNode;\n            clearContainer(root.containerInfo);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n\n      default:\n        {\n          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        var destroy = effect.destroy;\n        effect.destroy = undefined;\n\n        if (destroy !== undefined) {\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          {\n            if ((flags & Insertion) !== NoFlags$1) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n          {\n            if ((flags & Insertion) !== NoFlags$1) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          {\n            if ((flags & Passive$1) !== NoFlags$1) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & Layout) !== NoFlags$1) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags, finishedWork) {\n  var updateQueue = finishedWork.updateQueue;\n  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n  if (lastEffect !== null) {\n    var firstEffect = lastEffect.next;\n    var effect = firstEffect;\n\n    do {\n      if ((effect.tag & flags) === flags) {\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        } // Mount\n\n\n        var create = effect.create;\n\n        {\n          if ((flags & Insertion) !== NoFlags$1) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n\n        effect.destroy = create();\n\n        {\n          if ((flags & Insertion) !== NoFlags$1) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        {\n          if ((flags & Passive$1) !== NoFlags$1) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & Layout) !== NoFlags$1) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        {\n          var destroy = effect.destroy;\n\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            var hookName = void 0;\n\n            if ((effect.tag & Layout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & Insertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n\n            var addendum = void 0;\n\n            if (destroy === null) {\n              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum = '\\n\\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + hookName + '(() => {\\n' + '  async function fetchData() {\\n' + '    // You can await here\\n' + '    const response = await MyAPI.getData(someId);\\n' + '    // ...\\n' + '  }\\n' + '  fetchData();\\n' + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n\n            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);\n          }\n        }\n      }\n\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitPassiveEffectDurations(finishedRoot, finishedWork) {\n  {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler:\n          {\n            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n            var _finishedWork$memoize = finishedWork.memoizedProps,\n                id = _finishedWork$memoize.id,\n                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n            // It does not get reset until the start of the next commit phase.\n\n            var commitTime = getCommitTime();\n            var phase = finishedWork.alternate === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onPostCommit === 'function') {\n              onPostCommit(id, phase, passiveEffectDuration, commitTime);\n            } // Bubble times to the next nearest ancestor Profiler.\n            // After we process that Profiler, we'll bubble further up.\n\n\n            var parentFiber = finishedWork.return;\n\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                  break outer;\n              }\n\n              parentFiber = parentFiber.return;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          if ( !offscreenSubtreeWasHidden) {\n            // At this point layout effects have already been destroyed (during mutation phase).\n            // This is done to prevent sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n            if ( finishedWork.mode & ProfileMode) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListMount(Layout | HasEffect, finishedWork);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListMount(Layout | HasEffect, finishedWork);\n            }\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = finishedWork.stateNode;\n\n          if (finishedWork.flags & Update) {\n            if (!offscreenSubtreeWasHidden) {\n              if (current === null) {\n                // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidMount();\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidMount();\n                }\n              } else {\n                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n                var prevState = current.memoizedState; // We could update instance props and state here,\n                // but instead we rely on them being set during last render.\n                // TODO: revisit this when we implement resuming.\n\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                    }\n                  }\n                }\n\n                if ( finishedWork.mode & ProfileMode) {\n                  try {\n                    startLayoutEffectTimer();\n                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                  } finally {\n                    recordLayoutEffectDuration(finishedWork);\n                  }\n                } else {\n                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n                }\n              }\n            }\n          } // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n\n\n          var updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            {\n              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                if (instance.props !== finishedWork.memoizedProps) {\n                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n\n                if (instance.state !== finishedWork.memoizedState) {\n                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');\n                }\n              }\n            } // We could update instance props and state here,\n            // but instead we rely on them being set during last render.\n            // TODO: revisit this when we implement resuming.\n\n\n            commitUpdateQueue(finishedWork, updateQueue, instance);\n          }\n\n          break;\n        }\n\n      case HostRoot:\n        {\n          // TODO: I think this is now always non-null by the time it reaches the\n          // commit phase. Consider removing the type check.\n          var _updateQueue = finishedWork.updateQueue;\n\n          if (_updateQueue !== null) {\n            var _instance = null;\n\n            if (finishedWork.child !== null) {\n              switch (finishedWork.child.tag) {\n                case HostComponent:\n                  _instance = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n\n                case ClassComponent:\n                  _instance = finishedWork.child.stateNode;\n                  break;\n              }\n            }\n\n            commitUpdateQueue(finishedWork, _updateQueue, _instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (current === null && finishedWork.flags & Update) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n            commitMount(_instance2, type, props, finishedWork);\n          }\n\n          break;\n        }\n\n      case HostText:\n        {\n          // We have no life-cycles associated with text.\n          break;\n        }\n\n      case HostPortal:\n        {\n          // We have no life-cycles associated with portals.\n          break;\n        }\n\n      case Profiler:\n        {\n          {\n            var _finishedWork$memoize2 = finishedWork.memoizedProps,\n                onCommit = _finishedWork$memoize2.onCommit,\n                onRender = _finishedWork$memoize2.onRender;\n            var effectDuration = finishedWork.stateNode.effectDuration;\n            var commitTime = getCommitTime();\n            var phase = current === null ? 'mount' : 'update';\n\n            {\n              if (isCurrentUpdateNested()) {\n                phase = 'nested-update';\n              }\n            }\n\n            if (typeof onRender === 'function') {\n              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n            }\n\n            {\n              if (typeof onCommit === 'function') {\n                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n              // because the effect is also where times bubble to parent Profilers.\n\n\n              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n              // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n              var parentFiber = finishedWork.return;\n\n              outer: while (parentFiber !== null) {\n                switch (parentFiber.tag) {\n                  case HostRoot:\n                    var root = parentFiber.stateNode;\n                    root.effectDuration += effectDuration;\n                    break outer;\n\n                  case Profiler:\n                    var parentStateNode = parentFiber.stateNode;\n                    parentStateNode.effectDuration += effectDuration;\n                    break outer;\n                }\n\n                parentFiber = parentFiber.return;\n              }\n            }\n          }\n\n          break;\n        }\n\n      case SuspenseComponent:\n        {\n          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n          break;\n        }\n\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n      case TracingMarkerComponent:\n        {\n          break;\n        }\n\n      default:\n        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  if ( !offscreenSubtreeWasHidden) {\n    {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( node.mode & ProfileMode) {\n          try {\n            startLayoutEffectTimer();\n            safelyCallCommitHookLayoutEffectListMount(node, node.return);\n          } finally {\n            recordLayoutEffectDuration(node);\n          }\n        } else {\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        }\n\n        break;\n      }\n\n    case ClassComponent:\n      {\n        var instance = node.stateNode;\n\n        if (typeof instance.componentDidMount === 'function') {\n          safelyCallComponentDidMount(node, node.return, instance);\n        }\n\n        safelyAttachRef(node, node.return);\n        break;\n      }\n\n    case HostComponent:\n      {\n        safelyAttachRef(node, node.return);\n        break;\n      }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  var hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n\n          try {\n            var instance = node.stateNode;\n\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            var _instance3 = node.stateNode;\n\n            if (isHidden) {\n              hideTextInstance(_instance3);\n            } else {\n              unhideTextInstance(_instance3, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork) {\n  var ref = finishedWork.ref;\n\n  if (ref !== null) {\n    var instance = finishedWork.stateNode;\n    var instanceToUse;\n\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n\n      default:\n        instanceToUse = instance;\n    } // Moved outside to ensure DCE works with this flag\n\n    if (typeof ref === 'function') {\n      var retVal;\n\n      if ( finishedWork.mode & ProfileMode) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n\n      {\n        if (typeof retVal === 'function') {\n          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));\n        }\n      }\n    } else {\n      {\n        if (!ref.hasOwnProperty('current')) {\n          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber) {\n  var alternate = fiber.alternate;\n\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  } // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n\n\n  {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n\n    if (fiber.tag === HostComponent) {\n      var hostInstance = fiber.stateNode;\n\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n\n    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    {\n      fiber._debugOwner = null;\n    }\n\n    {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  var portal = current.stateNode;\n  var containerInfo = portal.containerInfo;\n  var emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction getHostParentFiber(fiber) {\n  var parent = fiber.return;\n\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n\n    parent = parent.return;\n  }\n\n  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n}\n\nfunction isHostParent(fiber) {\n  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;\n}\n\nfunction getHostSibling(fiber) {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  var node = fiber;\n\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n\n    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      } // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n\n\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    } // Check if this host node is stable or about to be placed.\n\n\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork) {\n  if (!supportsMutation) {\n    return;\n  } // Recursively insert all host nodes into the parent.\n\n\n  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.\n\n  switch (parentFiber.tag) {\n    case HostComponent:\n      {\n        var parent = parentFiber.stateNode;\n\n        if (parentFiber.flags & ContentReset) {\n          // Reset the text content of the parent before doing any insertions\n          resetTextContent(parent); // Clear ContentReset from the effect tag\n\n          parentFiber.flags &= ~ContentReset;\n        }\n\n        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n\n        insertOrAppendPlacementNode(finishedWork, before, parent);\n        break;\n      }\n\n    case HostRoot:\n    case HostPortal:\n      {\n        var _parent = parentFiber.stateNode.containerInfo;\n\n        var _before = getHostSibling(finishedWork);\n\n        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);\n        break;\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    default:\n      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(node, before, parent) {\n  var tag = node.tag;\n  var isHost = tag === HostComponent || tag === HostText;\n\n  if (isHost) {\n    var stateNode = node.stateNode;\n\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) ; else {\n    var child = node.child;\n\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      var sibling = child.sibling;\n\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n} // These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\n\n\nvar hostParent = null;\nvar hostParentIsContainer = false;\n\nfunction commitDeletionEffects(root, returnFiber, deletedFiber) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    var parent = returnFiber;\n\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent:\n          {\n            hostParent = parent.stateNode;\n            hostParentIsContainer = false;\n            break findParent;\n          }\n\n        case HostRoot:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n\n        case HostPortal:\n          {\n            hostParent = parent.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            break findParent;\n          }\n      }\n\n      parent = parent.return;\n    }\n\n    if (hostParent === null) {\n      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n    }\n\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  var child = parent.child;\n\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n\n  switch (deletedFiber.tag) {\n    case HostComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        } // Intentional fallthrough to next branch\n\n      }\n    // eslint-disable-next-line-no-fallthrough\n\n    case HostText:\n      {\n        // We only need to remove the nearest host child. Set the host parent\n        // to `null` on the stack to indicate that nested children don't\n        // need to be removed.\n        if (supportsMutation) {\n          var prevHostParent = hostParent;\n          var prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = prevHostParent;\n          hostParentIsContainer = prevHostParentIsContainer;\n\n          if (hostParent !== null) {\n            // Now that all the child effects have unmounted, we can remove the\n            // node from the tree.\n            if (hostParentIsContainer) {\n              removeChildFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              removeChild(hostParent, deletedFiber.stateNode);\n            }\n          }\n        } else {\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        return;\n      }\n\n    case DehydratedFragment:\n      {\n        // Delete the dehydrated suspense boundary and all of its content.\n\n\n        if (supportsMutation) {\n          if (hostParent !== null) {\n            if (hostParentIsContainer) {\n              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);\n            } else {\n              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        if (supportsMutation) {\n          // When we go into a portal, it becomes the parent to remove from.\n          var _prevHostParent = hostParent;\n          var _prevHostParentIsContainer = hostParentIsContainer;\n          hostParent = deletedFiber.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          hostParent = _prevHostParent;\n          hostParentIsContainer = _prevHostParentIsContainer;\n        } else {\n          emptyPortalContainer(deletedFiber);\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        return;\n      }\n\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          var updateQueue = deletedFiber.updateQueue;\n\n          if (updateQueue !== null) {\n            var lastEffect = updateQueue.lastEffect;\n\n            if (lastEffect !== null) {\n              var firstEffect = lastEffect.next;\n              var effect = firstEffect;\n\n              do {\n                var _effect = effect,\n                    destroy = _effect.destroy,\n                    tag = _effect.tag;\n\n                if (destroy !== undefined) {\n                  if ((tag & Insertion) !== NoFlags$1) {\n                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                  } else if ((tag & Layout) !== NoFlags$1) {\n                    {\n                      markComponentLayoutEffectUnmountStarted(deletedFiber);\n                    }\n\n                    if ( deletedFiber.mode & ProfileMode) {\n                      startLayoutEffectTimer();\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                      recordLayoutEffectDuration(deletedFiber);\n                    } else {\n                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                    }\n\n                    {\n                      markComponentLayoutEffectUnmountStopped();\n                    }\n                  }\n                }\n\n                effect = effect.next;\n              } while (effect !== firstEffect);\n            }\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ClassComponent:\n      {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          var instance = deletedFiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n          }\n        }\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        if ( // TODO: Remove this dead flag\n         deletedFiber.mode & ConcurrentMode) {\n          // If this offscreen component is hidden, we already unmounted it. Before\n          // deleting the children, track that it's already unmounted so that we\n          // don't attempt to unmount the effects again.\n          // TODO: If the tree is hidden, in most cases we should be able to skip\n          // over the nested children entirely. An exception is we haven't yet found\n          // the topmost host node to delete, which we already track on the stack.\n          // But the other case is portals, which need to be detached no matter how\n          // deeply they are nested. We should use a subtree flag to track whether a\n          // subtree includes a nested portal.\n          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        } else {\n          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        }\n\n        break;\n      }\n\n    default:\n      {\n        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n        return;\n      }\n  }\n}\n\nfunction commitSuspenseCallback(finishedWork) {\n  // TODO: Move this to passive phase\n  var newState = finishedWork.memoizedState;\n}\n\nfunction commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {\n  if (!supportsHydration) {\n    return;\n  }\n\n  var newState = finishedWork.memoizedState;\n\n  if (newState === null) {\n    var current = finishedWork.alternate;\n\n    if (current !== null) {\n      var prevState = current.memoizedState;\n\n      if (prevState !== null) {\n        var suspenseInstance = prevState.dehydrated;\n\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  var wakeables = finishedWork.updateQueue;\n\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    var retryCache = finishedWork.stateNode;\n\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n\n    wakeables.forEach(function (wakeable) {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error('Expected finished root and lanes to be set. This is a bug in React.');\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n} // This function detects when a Suspense boundary goes from visible to hidden.\nfunction commitMutationEffects(root, finishedWork, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  setCurrentFiber(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root);\n  setCurrentFiber(finishedWork);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  var deletions = parentFiber.deletions;\n\n  if (deletions !== null) {\n    for (var i = 0; i < deletions.length; i++) {\n      var childToDelete = deletions[i];\n\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  var prevDebugFiber = getCurrentFiber();\n\n  if (parentFiber.subtreeFlags & MutationMask) {\n    var child = parentFiber.child;\n\n    while (child !== null) {\n      setCurrentFiber(child);\n      commitMutationEffectsOnFiber(child, root);\n      child = child.sibling;\n    }\n  }\n\n  setCurrentFiber(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n  var current = finishedWork.alternate;\n  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          try {\n            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n            commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          } // Layout effects are destroyed during the mutation phase so that all\n          // destroy functions for all fibers are called before any create functions.\n          // This prevents sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n\n\n          if ( finishedWork.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n\n            recordLayoutEffectDuration(finishedWork);\n          } else {\n            try {\n              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case ClassComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        return;\n      }\n\n    case HostComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: ContentReset gets cleared by the children during the commit\n          // phase. This is a refactor hazard because it means we must read\n          // flags the flags after `commitReconciliationEffects` has already run;\n          // the order matters. We should refactor so that ContentReset does not\n          // rely on mutating the flag during commit. Like by setting a flag\n          // during the render phase instead.\n          if (finishedWork.flags & ContentReset) {\n            var instance = finishedWork.stateNode;\n\n            try {\n              resetTextContent(instance);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n\n          if (flags & Update) {\n            var _instance4 = finishedWork.stateNode;\n\n            if (_instance4 != null) {\n              // Commit the work prepared earlier.\n              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              var oldProps = current !== null ? current.memoizedProps : newProps;\n              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n              var updatePayload = finishedWork.updateQueue;\n              finishedWork.updateQueue = null;\n\n              if (updatePayload !== null) {\n                try {\n                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostText:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          if (supportsMutation) {\n            if (finishedWork.stateNode === null) {\n              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n            }\n\n            var textInstance = finishedWork.stateNode;\n            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n\n            var oldText = current !== null ? current.memoizedProps : newText;\n\n            try {\n              commitTextUpdate(textInstance, oldText, newText);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostRoot:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          if (supportsMutation && supportsHydration) {\n            if (current !== null) {\n              var prevRootState = current.memoizedState;\n\n              if (prevRootState.isDehydrated) {\n                try {\n                  commitHydratedContainer(root.containerInfo);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n          }\n\n          if (supportsPersistence) {\n            var containerInfo = root.containerInfo;\n            var pendingChildren = root.pendingChildren;\n\n            try {\n              replaceContainerChildren(containerInfo, pendingChildren);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case HostPortal:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          if (supportsPersistence) {\n            var portal = finishedWork.stateNode;\n            var _containerInfo = portal.containerInfo;\n            var _pendingChildren = portal.pendingChildren;\n\n            try {\n              replaceContainerChildren(_containerInfo, _pendingChildren);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n\n        return;\n      }\n\n    case SuspenseComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n        var offscreenFiber = finishedWork.child;\n\n        if (offscreenFiber.flags & Visibility) {\n          var offscreenInstance = offscreenFiber.stateNode;\n          var newState = offscreenFiber.memoizedState;\n          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can\n          // read it during an event\n\n          offscreenInstance.isHidden = isHidden;\n\n          if (isHidden) {\n            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;\n\n            if (!wasHidden) {\n              // TODO: Move to passive phase\n              markCommitTimeOfFallback();\n            }\n          }\n        }\n\n        if (flags & Update) {\n          try {\n            commitSuspenseCallback(finishedWork);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          attachSuspenseRetryListeners(finishedWork);\n        }\n\n        return;\n      }\n\n    case OffscreenComponent:\n      {\n        var _wasHidden = current !== null && current.memoizedState !== null;\n\n        if ( // TODO: Remove this dead flag\n         finishedWork.mode & ConcurrentMode) {\n          // Before committing the children, track on the stack whether this\n          // offscreen subtree was already hidden, so that we don't unmount the\n          // effects again.\n          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        } else {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n        }\n\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Visibility) {\n          var _offscreenInstance = finishedWork.stateNode;\n          var _newState = finishedWork.memoizedState;\n\n          var _isHidden = _newState !== null;\n\n          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can\n          // read it during an event\n\n          _offscreenInstance.isHidden = _isHidden;\n\n          {\n            if (_isHidden) {\n              if (!_wasHidden) {\n                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                  nextEffect = offscreenBoundary;\n                  var offscreenChild = offscreenBoundary.child;\n\n                  while (offscreenChild !== null) {\n                    nextEffect = offscreenChild;\n                    disappearLayoutEffects_begin(offscreenChild);\n                    offscreenChild = offscreenChild.sibling;\n                  }\n                }\n              }\n            }\n          }\n\n          if (supportsMutation) {\n            // TODO: This needs to run whenever there's an insertion or update\n            // inside a hidden Offscreen tree.\n            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);\n          }\n        }\n\n        return;\n      }\n\n    case SuspenseListComponent:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n\n        if (flags & Update) {\n          attachSuspenseRetryListeners(finishedWork);\n        }\n\n        return;\n      }\n\n    case ScopeComponent:\n      {\n\n        return;\n      }\n\n    default:\n      {\n        recursivelyTraverseMutationEffects(root, finishedWork);\n        commitReconciliationEffects(finishedWork);\n        return;\n      }\n  }\n}\n\nfunction commitReconciliationEffects(finishedWork) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  var flags = finishedWork.flags;\n\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    } // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n\n\n    finishedWork.flags &= ~Placement;\n  }\n\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nfunction commitLayoutEffects(finishedWork, root, committedLanes) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ( fiber.tag === OffscreenComponent && isModernRoot) {\n      // Keep track of the current Offscreen stack's state.\n      var isHidden = fiber.memoizedState !== null;\n      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        var current = fiber.alternate;\n        var wasHidden = current !== null && current.memoizedState !== null;\n        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.\n\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        var child = firstChild;\n\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.\n          root, committedLanes);\n          child = child.sibling;\n        } // Restore Offscreen state and resume in our-progress traversal.\n\n\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      var current = fiber.alternate;\n      setCurrentFiber(fiber);\n\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ( fiber.mode & ProfileMode) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(Layout, fiber, fiber.return);\n            } finally {\n              recordLayoutEffectDuration(fiber);\n            }\n          } else {\n            commitHookEffectListUnmount(Layout, fiber, fiber.return);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(fiber, fiber.return);\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n\n      case HostComponent:\n        {\n          safelyDetachRef(fiber, fiber.return);\n          break;\n        }\n\n      case OffscreenComponent:\n        {\n          // Check if this is a\n          var isHidden = fiber.memoizedState !== null;\n\n          if (isHidden) {\n            // Nested Offscreen tree is already hidden. Don't disappear\n            // its effects.\n            disappearLayoutEffects_complete(subtreeRoot);\n            continue;\n          }\n\n          break;\n        }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      var isHidden = fiber.memoizedState !== null;\n\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n\n\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic\n\n    setCurrentFiber(fiber);\n\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n\n    resetCurrentFiber();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);\n}\n\nfunction commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var firstChild = fiber.child;\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n\n      try {\n        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n\n      resetCurrentFiber();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n          } finally {\n            recordPassiveEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffects(firstChild) {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      var deletions = fiber.deletions;\n\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);\n        }\n\n        {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          var previousFiber = fiber.alternate;\n\n          if (previousFiber !== null) {\n            var detachedChild = previousFiber.child;\n\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n\n              do {\n                var detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentFiber(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentFiber();\n    }\n\n    var sibling = fiber.sibling;\n\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork) {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( finishedWork.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n          recordPassiveEffectDuration(finishedWork);\n        } else {\n          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);\n        }\n\n        break;\n      }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect; // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n\n    setCurrentFiber(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentFiber();\n    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n  while (nextEffect !== null) {\n    var fiber = nextEffect;\n    var sibling = fiber.sibling;\n    var returnFiber = fiber.return;\n\n    {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n      {\n        if ( current.mode & ProfileMode) {\n          startPassiveEffectTimer();\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n          recordPassiveEffectDuration(current);\n        } else {\n          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);\n        }\n\n        break;\n      }\n  }\n} // TODO: Reuse reappearLayoutEffects traversal here?\n\n\nfunction invokeLayoutEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Layout | HasEffect, fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListMount(Passive$1 | HasEffect, fiber);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n\n          break;\n        }\n\n      case ClassComponent:\n        {\n          var instance = fiber.stateNode;\n\n          if (typeof instance.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n          }\n\n          break;\n        }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent:\n        {\n          try {\n            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);\n          } catch (error) {\n            captureCommitPhaseError(fiber, fiber.return, error);\n          }\n        }\n    }\n  }\n}\n\nvar COMPONENT_TYPE = 0;\nvar HAS_PSEUDO_CLASS_TYPE = 1;\nvar ROLE_TYPE = 2;\nvar TEST_NAME_TYPE = 3;\nvar TEXT_TYPE = 4;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\nfunction createComponentSelector(component) {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component\n  };\n}\nfunction createHasPseudoClassSelector(selectors) {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors\n  };\n}\nfunction createRoleSelector(role) {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role\n  };\n}\nfunction createTextSelector(text) {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text\n  };\n}\nfunction createTestNameSelector(id) {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot) {\n  var maybeFiber = getInstanceFromNode(hostRoot);\n\n  if (maybeFiber != null) {\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n      throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');\n    }\n\n    return maybeFiber;\n  } else {\n    var fiberRoot = findFiberRoot(hostRoot);\n\n    if (fiberRoot === null) {\n      throw new Error('Could not find React container within specified host subtree.');\n    } // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n\n\n    return fiberRoot.stateNode.current;\n  }\n}\n\nfunction matchSelector(fiber, selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n\n      break;\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(fiber, selector.value);\n\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        var node = fiber.stateNode;\n\n        if (matchAccessibilityRole(node, selector.value)) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        var textContent = getTextContent(fiber);\n\n        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {\n          return true;\n        }\n      }\n\n      break;\n\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        var dataTestID = fiber.memoizedProps['data-testname'];\n\n        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {\n          return true;\n        }\n      }\n\n      break;\n\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector) {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      var displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return \"<\" + displayName + \">\";\n\n    case HAS_PSEUDO_CLASS_TYPE:\n      return \":has(\" + (selectorToString(selector) || '') + \")\";\n\n    case ROLE_TYPE:\n      return \"[role=\\\"\" + selector.value + \"\\\"]\";\n\n    case TEXT_TYPE:\n      return \"\\\"\" + selector.value + \"\\\"\";\n\n    case TEST_NAME_TYPE:\n      return \"[data-testname=\\\"\" + selector.value + \"\\\"]\";\n\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n}\n\nfunction findPaths(root, selectors) {\n  var matchingFibers = [];\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n} // Same as findPaths but with eager bailout on first match\n\n\nfunction hasMatchingPaths(root, selectors) {\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction findAllNodes(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var instanceRoots = [];\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var node = stack[index++];\n\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n\n      instanceRoots.push(node.stateNode);\n    } else {\n      var child = node.child;\n\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\nfunction getFindAllNodesFailureDescription(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var maxSelectorIndex = 0;\n  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()\n\n  var stack = [root, 0];\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n    var selectorIndex = stack[index++];\n    var selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      var child = fiber.child;\n\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    var unmatchedNames = [];\n\n    for (var i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return 'findAllNodes was able to match part of the selector:\\n' + (\"  \" + matchedNames.join(' > ') + \"\\n\\n\") + 'No matching component was found for:\\n' + (\"  \" + unmatchedNames.join(' > '));\n  }\n\n  return null;\n}\nfunction findBoundingRects(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n  var boundingRects = [];\n\n  for (var i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (var _i = boundingRects.length - 1; _i > 0; _i--) {\n    var targetRect = boundingRects[_i];\n    var targetLeft = targetRect.x;\n    var targetRight = targetLeft + targetRect.width;\n    var targetTop = targetRect.y;\n    var targetBottom = targetTop + targetRect.height;\n\n    for (var j = _i - 1; j >= 0; j--) {\n      if (_i !== j) {\n        var otherRect = boundingRects[j];\n        var otherLeft = otherRect.x;\n        var otherRight = otherLeft + otherRect.width;\n        var otherTop = otherRect.y;\n        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(_i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\nfunction focusWithin(hostRoot, selectors) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var root = findFiberRootForHostRoot(hostRoot);\n  var matchingFibers = findPaths(root, selectors);\n  var stack = Array.from(matchingFibers);\n  var index = 0;\n\n  while (index < stack.length) {\n    var fiber = stack[index++];\n\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n\n    if (fiber.tag === HostComponent) {\n      var node = fiber.stateNode;\n\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n\n    var child = fiber.child;\n\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\nvar commitHooks = [];\nfunction onCommitRoot$1() {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(function (commitHook) {\n      return commitHook();\n    });\n  }\n}\nfunction observeVisibleRects(hostRoot, selectors, callback, options) {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  var instanceRoots = findAllNodes(hostRoot, selectors);\n\n  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),\n      disconnect = _setupIntersectionObs.disconnect,\n      observe = _setupIntersectionObs.observe,\n      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.\n\n\n  var commitHook = function () {\n    var nextInstanceRoots = findAllNodes(hostRoot, selectors);\n    instanceRoots.forEach(function (target) {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n    nextInstanceRoots.forEach(function (target) {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n  return {\n    disconnect: function () {\n      // Stop listening for React mutations:\n      var index = commitHooks.indexOf(commitHook);\n\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      } // Disconnect the host observer:\n\n\n      disconnect();\n    }\n  };\n}\n\nvar ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\nfunction isLegacyActEnvironment(fiber) {\n  {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest\n\n    var jestIsDefined = typeof jest !== 'undefined';\n    return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;\n  }\n}\nfunction isConcurrentActEnvironment() {\n  {\n    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      error('The current testing environment is not configured to support ' + 'act(...)');\n    }\n\n    return isReactActEnvironmentGlobal;\n  }\n}\n\nvar ceil = Math.ceil;\nvar ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,\n    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,\n    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,\n    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\nvar NoContext =\n/*             */\n0;\nvar BatchedContext =\n/*               */\n1;\nvar RenderContext =\n/*                */\n2;\nvar CommitContext =\n/*                */\n4;\nvar RootInProgress = 0;\nvar RootFatalErrored = 1;\nvar RootErrored = 2;\nvar RootSuspended = 3;\nvar RootSuspendedWithDelay = 4;\nvar RootCompleted = 5;\nvar RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\nvar executionContext = NoContext; // The root we're working on\n\nvar workInProgressRoot = null; // The fiber we're working on\n\nvar workInProgress = null; // The lanes we're rendering\n\nvar workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\n\nvar subtreeRenderLanes = NoLanes;\nvar subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.\n\nvar workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\nvar workInProgressRootFatalError = null; // \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\n\nvar workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\n\nvar workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\nvar workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\nvar workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.\n\nvar workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\n\nvar workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\n\nvar globalMostRecentFallbackTime = 0;\nvar FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\n\nvar workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\n\nvar RENDER_TIMEOUT_MS = 500;\nvar workInProgressTransitions = null;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nfunction getRenderTargetTime() {\n  return workInProgressRootRenderTargetTime;\n}\nvar hasUncaughtError = false;\nvar firstUncaughtError = null;\nvar legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\nvar rootDoesHavePassiveEffects = false;\nvar rootWithPendingPassiveEffects = null;\nvar pendingPassiveEffectsLanes = NoLanes;\nvar pendingPassiveProfilerEffects = [];\nvar pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates\n\nvar NESTED_UPDATE_LIMIT = 50;\nvar nestedUpdateCount = 0;\nvar rootWithNestedUpdates = null;\nvar isFlushingPassiveEffects = false;\nvar didScheduleUpdateDuringPassiveEffects = false;\nvar NESTED_PASSIVE_UPDATE_LIMIT = 50;\nvar nestedPassiveUpdateCount = 0;\nvar rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\n\nvar currentEventTime = NoTimestamp;\nvar currentEventTransitionLane = NoLanes;\nvar isRunningInsertionEffect = false;\nfunction getWorkInProgressRoot() {\n  return workInProgressRoot;\n}\nfunction requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  } // We're not inside React, so we may be in the middle of a browser event.\n\n\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  } // This is the first update since React yielded. Compute a new start time.\n\n\n  currentEventTime = now();\n  return currentEventTime;\n}\nfunction requestUpdateLane(fiber) {\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  var isTransition = requestCurrentTransition() !== NoTransition;\n\n  if (isTransition) {\n    if ( ReactCurrentBatchConfig$2.transition !== null) {\n      var transition = ReactCurrentBatchConfig$2.transition;\n\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    } // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n\n\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n\n    return currentEventTransitionLane;\n  } // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var updateLane = getCurrentUpdatePriority();\n\n  if (updateLane !== NoLane) {\n    return updateLane;\n  } // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n\n\n  var eventLane = getCurrentEventPriority();\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  // Special cases\n  var mode = fiber.mode;\n\n  if ((mode & ConcurrentMode) === NoMode) {\n    return SyncLane;\n  }\n\n  return claimNextRetryLane();\n}\n\nfunction scheduleUpdateOnFiber(root, fiber, lane, eventTime) {\n  checkForNestedUpdates();\n\n  {\n    if (isRunningInsertionEffect) {\n      error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  } // Mark that the root has a pending update.\n\n\n  markRootUpdated(root, lane, eventTime);\n\n  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if ( (executionContext & RenderContext) === NoContext) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n      }\n\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended$1(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n\n    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\nfunction scheduleInitialHydrationOnRoot(root, lane, eventTime) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  var current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\nfunction isUnsafeClassRenderPhaseUpdate(fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n     (executionContext & RenderContext) !== NoContext\n  );\n} // Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\n\nfunction ensureRootIsScheduled(root, currentTime) {\n  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n\n  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback$1(existingCallbackNode);\n    }\n\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  } // We use the highest priority lane to represent the priority of the callback.\n\n\n  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.\n\n  var existingCallbackPriority = root.callbackPriority;\n\n  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n  // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n  // on the `act` queue.\n  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {\n    {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {\n        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');\n      }\n    } // The priority hasn't changed. We can reuse the existing task. Exit.\n\n\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback$1(existingCallbackNode);\n  } // Schedule a new callback.\n\n\n  var newCallbackNode;\n\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {\n        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;\n      }\n\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if ( ReactCurrentActQueue$1.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(function () {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);\n    }\n\n    newCallbackNode = null;\n  } else {\n    var schedulerPriorityLevel;\n\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediatePriority;\n        break;\n\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingPriority;\n        break;\n\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdlePriority;\n        break;\n\n      default:\n        schedulerPriorityLevel = NormalPriority;\n        break;\n    }\n\n    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n} // This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\n\n\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  {\n    resetNestedUpdateFlag();\n  } // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n\n\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  } // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n\n\n  var originalCallbackNode = root.callbackNode;\n  var didFlushPassiveEffects = flushPassiveEffects();\n\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    }\n  } // Determine the next lanes to work on, using the fields stored\n  // on the root.\n\n\n  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  } // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n\n\n  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);\n  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      var fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended$1(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended$1(root, lanes);\n    } else {\n      // The render completed.\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      var renderWasConcurrent = !includesBlockingLane(root, lanes);\n      var finishedWork = root.current.alternate;\n\n      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw\n\n        if (exitStatus === RootErrored) {\n          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n          if (_errorRetryLanes !== NoLanes) {\n            lanes = _errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n\n        if (exitStatus === RootFatalErrored) {\n          var _fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended$1(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw _fatalError;\n        }\n      } // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n\n\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n  // Before rendering again, save the errors from the previous attempt.\n  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n\n    {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  var exitStatus = renderRootSync(root, errorRetryLanes);\n\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  }\n\n  return exitStatus;\n}\n\nfunction queueRecoverableErrors(errors) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored:\n      {\n        throw new Error('Root did not complete. This is a bug in React.');\n      }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n\n    case RootErrored:\n      {\n        // We should have already attempted to retry this tree. If we reached\n        // this point, it errored again. Commit it.\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootSuspended:\n      {\n        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we\n        // should immediately commit it or wait a bit.\n\n        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work on this root.\n              break;\n            }\n\n            var suspendedLanes = root.suspendedLanes;\n\n            if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n              // We should prefer to render the fallback of at the last\n              // suspended level. Ping the last suspended level to try\n              // rendering it again.\n              // FIXME: What if the suspended lanes are Idle? Should not restart.\n              var eventTime = requestEventTime();\n              markRootPinged(root, suspendedLanes);\n              break;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n\n\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);\n            break;\n          }\n        } // The work expired. Commit immediately.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootSuspendedWithDelay:\n      {\n        markRootSuspended$1(root, lanes);\n\n        if (includesOnlyTransitions(lanes)) {\n          // This is a transition, so we should exit without committing a\n          // placeholder and without scheduling a timeout. Delay indefinitely\n          // until we receive more data.\n          break;\n        }\n\n        if (!shouldForceFlushFallbacksInDEV()) {\n          // This is not a transition, but we did trigger an avoided state.\n          // Schedule a placeholder to display after a short delay, using the Just\n          // Noticeable Difference.\n          // TODO: Is the JND optimization worth the added complexity? If this is\n          // the only reason we track the event time, then probably not.\n          // Consider removing.\n          var mostRecentEventTime = getMostRecentEventTime(root, lanes);\n          var eventTimeMs = mostRecentEventTime;\n          var timeElapsedMs = now() - eventTimeMs;\n\n          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.\n\n\n          if (_msUntilTimeout > 10) {\n            // Instead of committing the fallback immediately, wait for more data\n            // to arrive.\n            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);\n            break;\n          }\n        } // Commit the placeholder.\n\n\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    case RootCompleted:\n      {\n        // The work completed. Ready to commit.\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);\n        break;\n      }\n\n    default:\n      {\n        throw new Error('Unknown root exit status.');\n      }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork) {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  var node = finishedWork;\n\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      var updateQueue = node.updateQueue;\n\n      if (updateQueue !== null) {\n        var checks = updateQueue.stores;\n\n        if (checks !== null) {\n          for (var i = 0; i < checks.length; i++) {\n            var check = checks[i];\n            var getSnapshot = check.getSnapshot;\n            var renderedValue = check.value;\n\n            try {\n              if (!objectIs(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    var child = node.child;\n\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n\n    if (node === finishedWork) {\n      return true;\n    }\n\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n\n      node = node.return;\n    }\n\n    node.sibling.return = node.return;\n    node = node.sibling;\n  } // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n\n\n  return true;\n}\n\nfunction markRootSuspended$1(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n  markRootSuspended(root, suspendedLanes);\n} // This is the entry point for synchronous tasks that don't go\n// through Scheduler\n\n\nfunction performSyncWorkOnRoot(root) {\n  {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n  var lanes = getNextLanes(root, NoLanes);\n\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  var exitStatus = renderRootSync(root, lanes);\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    var fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended$1(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  } // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n\n\n  var finishedWork = root.current.alternate;\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n\n  ensureRootIsScheduled(root, now());\n  return null;\n}\n\nfunction flushRoot(root, lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction deferredUpdates(fn) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n  }\n}\nfunction batchedUpdates(fn, a) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n\n    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n    !( ReactCurrentActQueue$1.isBatchingLegacy)) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\nfunction discreteUpdates(fn, a, b, c, d) {\n  var previousPriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n} // Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n\n// eslint-disable-next-line no-redeclare\nfunction flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n    flushPassiveEffects();\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;\n}\nfunction flushControlled(fn) {\n  var prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n  var previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    executionContext = prevExecutionContext;\n\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\nfunction pushRenderLanes(fiber, lanes) {\n  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);\n}\nfunction popRenderLanes(fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  pop(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root, lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n  var timeoutHandle = root.timeoutHandle;\n\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    var interruptedWork = workInProgress.return;\n\n    while (interruptedWork !== null) {\n      var current = interruptedWork.alternate;\n      unwindInterruptedWork(current, interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n\n  workInProgressRoot = root;\n  var rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n  finishQueueingConcurrentUpdates();\n\n  {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue) {\n  do {\n    var erroredWork = workInProgress;\n\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n\n      ReactCurrentOwner$2.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {\n          var wakeable = thrownValue;\n          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);\n        } else {\n          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);\n        }\n      }\n\n      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n\n      continue;\n    } // Return to the normal work loop.\n\n\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  var prevDispatcher = ReactCurrentDispatcher$2.current;\n  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;\n\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher$2.current = prevDispatcher;\n}\n\nfunction markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\nfunction markSkippedUpdateLanes(lane) {\n  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n}\nfunction renderDidSuspend() {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\nfunction renderDidSuspendDelayIfPossible() {\n  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  } // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n\n\n  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\nfunction renderDidError(error) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n} // Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\n\nfunction renderHasNotSuspendedYet() {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes();\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n  }\n\n  {\n    markRenderStopped();\n  } // Set this to null to indicate there's no in-progress render.\n\n\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n  return workInProgressRootExitStatus;\n} // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n/** @noinline */\n\n\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root, lanes) {\n  var prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    {\n      if (isDevToolsPresent) {\n        var memoizedUpdaters = root.memoizedUpdaters;\n\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n\n\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes();\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n\n  resetContextDependencies();\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n\n  if (workInProgress !== null) {\n    // Still work remaining.\n    {\n      markRenderYielded();\n    }\n\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    {\n      markRenderStopped();\n    } // Set this to null to indicate there's no in-progress render.\n\n\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.\n\n    return workInProgressRootExitStatus;\n  }\n}\n/** @noinline */\n\n\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork) {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  var current = unitOfWork.alternate;\n  setCurrentFiber(unitOfWork);\n  var next;\n\n  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentFiber();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner$2.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork) {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  var completedWork = unitOfWork;\n\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    var current = completedWork.alternate;\n    var returnFiber = completedWork.return; // Check if the work completed or if something threw.\n\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentFiber(completedWork);\n      var next = void 0;\n\n      if ( (completedWork.mode & ProfileMode) === NoMode) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.\n\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n\n      resetCurrentFiber();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.\n\n\n      if (_next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        _next.flags &= HostEffectMask;\n        workInProgress = _next;\n        return;\n      }\n\n      if ( (completedWork.mode & ProfileMode) !== NoMode) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.\n\n        var actualDuration = completedWork.actualDuration;\n        var child = completedWork.child;\n\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    var siblingFiber = completedWork.sibling;\n\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    } // Otherwise, return to the parent\n\n\n    completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n    workInProgress = completedWork;\n  } while (completedWork !== null); // We've reached the root.\n\n\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(root, recoverableErrors, transitions) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  var previousUpdateLanePriority = getCurrentUpdatePriority();\n  var prevTransition = ReactCurrentBatchConfig$2.transition;\n\n  try {\n    ReactCurrentBatchConfig$2.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);\n  } finally {\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  var finishedWork = root.finishedWork;\n  var lanes = root.finishedLanes;\n\n  {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n\n    {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    {\n      if (lanes === NoLanes) {\n        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');\n      }\n    }\n  }\n\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n  } // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n\n\n  root.callbackNode = null;\n  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n\n  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n\n\n  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n\n      pendingPassiveTransitions = transitions;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n        return null;\n      });\n    }\n  } // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n\n\n  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    ReactCurrentBatchConfig$2.transition = null;\n    var previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    var prevExecutionContext = executionContext;\n    executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n\n    var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);\n\n    {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n\n    commitMutationEffects(root, finishedWork, lanes);\n\n    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n\n    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n    {\n      markLayoutEffectsStarted(lanes);\n    }\n\n    commitLayoutEffects(finishedWork, root, lanes);\n\n    {\n      markLayoutEffectsStopped();\n    }\n    // opportunity to paint.\n\n\n    requestPaint();\n    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig$2.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n\n    {\n      recordCommitTime();\n    }\n  }\n\n  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n\n    {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  } // Read this again, since an effect might have updated it\n\n\n  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n  {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  {\n    onCommitRoot$1();\n  } // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n\n\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    var onRecoverableError = root.onRecoverableError;\n\n    for (var i = 0; i < recoverableErrors.length; i++) {\n      var recoverableError = recoverableErrors[i];\n      var componentStack = recoverableError.stack;\n      var digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {\n        componentStack: componentStack,\n        digest: digest\n      });\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    var error$1 = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error$1;\n  } // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n\n\n  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {\n    flushPassiveEffects();\n  } // Read this again, since a passive effect might have updated it\n\n\n  remainingLanes = root.pendingLanes;\n\n  if (includesSomeLane(remainingLanes, SyncLane)) {\n    {\n      markNestedUpdateScheduled();\n    } // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n\n\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  } // If layout work was scheduled, flush it now.\n\n\n  flushSyncCallbacks();\n\n  {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction flushPassiveEffects() {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    var prevTransition = ReactCurrentBatchConfig$2.transition;\n    var previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig$2.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n    }\n  }\n\n  return false;\n}\nfunction enqueuePendingPassiveProfilerEffect(fiber) {\n  {\n    pendingPassiveProfilerEffects.push(fiber);\n\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback$1(NormalPriority, function () {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  } // Cache and clear the transitions flag\n\n\n  var transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n  var root = rootWithPendingPassiveEffects;\n  var lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  var prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects\n\n  {\n    var profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n\n    for (var i = 0; i < profilerEffects.length; i++) {\n      var _fiber = profilerEffects[i];\n      commitPassiveEffectDurations(root, _fiber);\n    }\n  }\n\n  {\n    markPassiveEffectsStopped();\n  }\n\n  {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n  flushSyncCallbacks();\n\n  {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  } // TODO: Move to commitPassiveMountEffects\n\n\n  onPostCommitRoot(root);\n\n  {\n    var stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nfunction isAlreadyFailedLegacyErrorBoundary(instance) {\n  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n}\nfunction markLegacyErrorBoundaryAsFailed(instance) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\n\nvar onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n  var root = enqueueUpdate(rootFiber, update, SyncLane);\n  var eventTime = requestEventTime();\n\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n  {\n    reportUncaughtErrorInDEV(error$1);\n    setIsRunningInsertionEffect(false);\n  }\n\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n    return;\n  }\n\n  var fiber = null;\n\n  {\n    fiber = nearestMountedAncestor;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      var ctor = fiber.type;\n      var instance = fiber.stateNode;\n\n      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n        var root = enqueueUpdate(fiber, update, SyncLane);\n        var eventTime = requestEventTime();\n\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n\n        return;\n      }\n    }\n\n    fiber = fiber.return;\n  }\n\n  {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\\n\\n' + 'Error message:\\n\\n%s', error$1);\n  }\n}\nfunction pingSuspendedRoot(root, wakeable, pingedLanes) {\n  var pingCache = root.pingCache;\n\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  var eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes);\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber, retryLane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  } // TODO: Special case idle priority?\n\n\n  var eventTime = requestEventTime();\n  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nfunction retryDehydratedSuspenseBoundary(boundaryFiber) {\n  var suspenseState = boundaryFiber.memoizedState;\n  var retryLane = NoLane;\n\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\nfunction resolveRetryWakeable(boundaryFiber, wakeable) {\n  var retryLane = NoLane; // Default\n\n  var retryCache;\n\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      var suspenseState = boundaryFiber.memoizedState;\n\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n\n      break;\n\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n\n    default:\n      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n} // Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\n\nfunction jnd(timeElapsed) {\n  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');\n  }\n\n  {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      error('Maximum update depth exceeded. This can happen when a component ' + \"calls setState inside useEffect, but useEffect either doesn't \" + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n  {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n    setCurrentFiber(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n\n    resetCurrentFiber();\n  }\n}\n\nfunction invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n  {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    var current = firstChild;\n    var subtreeRoot = null;\n\n    while (current !== null) {\n      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nvar didWarnStateUpdateForNotYetMountedComponent = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    var tag = fiber.tag;\n\n    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    } // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n\n\n    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    var previousFiber = current;\n\n    try {\n      setCurrentFiber(fiber);\n\n      error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');\n    } finally {\n      if (previousFiber) {\n        setCurrentFiber(fiber);\n      } else {\n        resetCurrentFiber();\n      }\n    }\n  }\n}\nvar beginWork$1;\n\n{\n  var dummyFiber = null;\n\n  beginWork$1 = function (current, unitOfWork, lanes) {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n\n    try {\n      return beginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      } // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n\n\n      resetContextDependencies();\n      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n      // Unwind the failed stack frame\n\n      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if ( unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      } // Run beginWork again.\n\n\n      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);\n\n      if (hasCaughtError()) {\n        var replayError = clearCaughtError();\n\n        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      } // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n\n      throw originalError;\n    }\n  };\n}\n\nvar didWarnAboutUpdateInRender = false;\nvar didWarnAboutUpdateInRenderForAnotherComponent;\n\n{\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  {\n    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n            var dedupeKey = renderingComponentName;\n\n            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);\n            }\n\n            break;\n          }\n\n        case ClassComponent:\n          {\n            if (!didWarnAboutUpdateInRender) {\n              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');\n\n              didWarnAboutUpdateInRender = true;\n            }\n\n            break;\n          }\n      }\n    }\n  }\n}\n\nfunction restorePendingUpdaters(root, lanes) {\n  {\n    if (isDevToolsPresent) {\n      var memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(function (schedulingFiber) {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      }); // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\nvar fakeActCallbackNode = {};\n\nfunction scheduleCallback$1(priorityLevel, callback) {\n  {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    var actQueue = ReactCurrentActQueue$1.current;\n\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return scheduleCallback(priorityLevel, callback);\n    }\n  }\n}\n\nfunction cancelCallback$1(callbackNode) {\n  if ( callbackNode === fakeActCallbackNode) {\n    return;\n  } // In production, always call Scheduler. This function will be stripped out.\n\n\n  return cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return  ReactCurrentActQueue$1.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber) {\n  {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n\n      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue$1.current === null) {\n      var previousFiber = current;\n\n      try {\n        setCurrentFiber(fiber);\n\n        error('An update to %s inside a test was not wrapped in act(...).\\n\\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\\n\\n' + 'act(() => {\\n' + '  /* fire events that update state */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));\n      } finally {\n        if (previousFiber) {\n          setCurrentFiber(fiber);\n        } else {\n          resetCurrentFiber();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n  {\n    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {\n      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\\n\\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\\n\\n' + 'act(() => {\\n' + '  /* finish loading suspended data */\\n' + '});\\n' + '/* assert on the output */\\n\\n' + \"This ensures that you're testing the behavior the user would see \" + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');\n    }\n  }\n}\n\nfunction setIsRunningInsertionEffect(isRunning) {\n  {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n\n/* eslint-disable react-internal/prod-error-codes */\nvar resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.\n\nvar failedBoundaries = null;\nvar setRefreshHandler = function (handler) {\n  {\n    resolveFamily = handler;\n  }\n};\nfunction resolveFunctionForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction resolveClassForHotReloading(type) {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\nfunction resolveForwardRefForHotReloading(type) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n\n    var family = resolveFamily(type);\n\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (type !== null && type !== undefined && typeof type.render === 'function') {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        var currentRender = resolveFunctionForHotReloading(type.render);\n\n        if (type.render !== currentRender) {\n          var syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender\n          };\n\n          if (type.displayName !== undefined) {\n            syntheticType.displayName = type.displayName;\n          }\n\n          return syntheticType;\n        }\n      }\n\n      return type;\n    } // Use the latest known implementation.\n\n\n    return family.current;\n  }\n}\nfunction isCompatibleFamilyForHotReloading(fiber, element) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    var prevType = fiber.elementType;\n    var nextType = element.type; // If we got here, we know types aren't === equal.\n\n    var needsCompareFamilies = false;\n    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;\n\n    switch (fiber.tag) {\n      case ClassComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case FunctionComponent:\n        {\n          if (typeof nextType === 'function') {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            // We don't know the inner type yet.\n            // We're going to assume that the lazy inner type is stable,\n            // and so it is sufficient to avoid reconciling it away.\n            // We're not going to unwrap or actually use the new lazy type.\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case ForwardRef:\n        {\n          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      case MemoComponent:\n      case SimpleMemoComponent:\n        {\n          if ($$typeofNextType === REACT_MEMO_TYPE) {\n            // TODO: if it was but can no longer be simple,\n            // we shouldn't set this.\n            needsCompareFamilies = true;\n          } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n            needsCompareFamilies = true;\n          }\n\n          break;\n        }\n\n      default:\n        return false;\n    } // Check if both types have a family and it's the same one.\n\n\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      var prevFamily = resolveFamily(prevType);\n\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\nfunction markFailedErrorBoundaryForHotReloading(fiber) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n\n    failedBoundaries.add(fiber);\n  }\n}\nvar scheduleRefresh = function (root, update) {\n  {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n\n    var staleFamilies = update.staleFamilies,\n        updatedFamilies = update.updatedFamilies;\n    flushPassiveEffects();\n    flushSync(function () {\n      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n    });\n  }\n};\nvar scheduleRoot = function (root, element) {\n  {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n\n    flushPassiveEffects();\n    flushSync(function () {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n  {\n    var alternate = fiber.alternate,\n        child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    var needsRender = false;\n    var needsRemount = false;\n\n    if (candidateType !== null) {\n      var family = resolveFamily(candidateType);\n\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n\n    if (failedBoundaries !== null) {\n      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n\n    if (needsRemount || needsRender) {\n      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (_root !== null) {\n        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n    }\n\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n    }\n  }\n}\n\nvar findHostInstancesForRefresh = function (root, families) {\n  {\n    var hostInstances = new Set();\n    var types = new Set(families.map(function (family) {\n      return family.current;\n    }));\n    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n    return hostInstances;\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n  {\n    var child = fiber.child,\n        sibling = fiber.sibling,\n        tag = fiber.tag,\n        type = fiber.type;\n    var candidateType = null;\n\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n    }\n\n    var didMatch = false;\n\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n\n    if (foundHostInstances) {\n      return;\n    } // If we didn't find any host children, fallback to closest host parent.\n\n\n    var node = fiber;\n\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n  {\n    var node = fiber;\n    var foundHostInstances = false;\n\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n\n        node = node.return;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  return false;\n}\n\nvar hasBadMapPolyfill;\n\n{\n  hasBadMapPolyfill = false;\n\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null; // Fiber\n\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n  this.ref = null;\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n  this.mode = mode; // Effects\n\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n  this.alternate = null;\n\n  {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n} // This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\n\n\nvar createFiber = function (tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct$1(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction isSimpleFunctionComponent(type) {\n  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;\n}\nfunction resolveLazyComponentTag(Component) {\n  if (typeof Component === 'function') {\n    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    var $$typeof = Component.$$typeof;\n\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n\n  return IndeterminateComponent;\n} // This is used to create an alternate fiber to do work on.\n\nfunction createWorkInProgress(current, pendingProps) {\n  var workInProgress = current.alternate;\n\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    {\n      // DEV-only fields\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // We already have an alternate.\n    // Reset the effect tag.\n\n    workInProgress.flags = NoFlags; // The effects are no longer valid.\n\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  } // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n\n\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n\n  var currentDependencies = current.dependencies;\n  workInProgress.dependencies = currentDependencies === null ? null : {\n    lanes: currentDependencies.lanes,\n    firstContext: currentDependencies.firstContext\n  }; // These will be overridden during the parent's reconciliation\n\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n    }\n  }\n\n  return workInProgress;\n} // Used to reuse a Fiber for a second pass.\n\nfunction resetWorkInProgress(workInProgress, renderLanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n  var current = workInProgress.alternate;\n\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n    workInProgress.dependencies = null;\n    workInProgress.stateNode = null;\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n\n    var currentDependencies = current.dependencies;\n    workInProgress.dependencies = currentDependencies === null ? null : {\n      lanes: currentDependencies.lanes,\n      firstContext: currentDependencies.firstContext\n    };\n\n    {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\nfunction createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n  var mode;\n\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      {\n        mode |= StrictEffectsMode;\n      }\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if ( isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\nfunction createFiberFromTypeAndProps(type, // React$ElementType\nkey, pendingProps, owner, mode, lanes) {\n  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n  var resolvedType = type;\n\n  if (typeof type === 'function') {\n    if (shouldConstruct$1(type)) {\n      fiberTag = ClassComponent;\n\n      {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n\n        if ( (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n\n        break;\n\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n      case REACT_LEGACY_HIDDEN_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_SCOPE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_CACHE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_TRACING_MARKER_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          if (typeof type === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case REACT_PROVIDER_TYPE:\n                fiberTag = ContextProvider;\n                break getTag;\n\n              case REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = ContextConsumer;\n                break getTag;\n\n              case REACT_FORWARD_REF_TYPE:\n                fiberTag = ForwardRef;\n\n                {\n                  resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                }\n\n                break getTag;\n\n              case REACT_MEMO_TYPE:\n                fiberTag = MemoComponent;\n                break getTag;\n\n              case REACT_LAZY_TYPE:\n                fiberTag = LazyComponent;\n                resolvedType = null;\n                break getTag;\n            }\n          }\n\n          var info = '';\n\n          {\n            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n              info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n            }\n\n            var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n            if (ownerName) {\n              info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n            }\n          }\n\n          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n        }\n    }\n  }\n\n  var fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromElement(element, mode, lanes) {\n  var owner = null;\n\n  {\n    owner = element._owner;\n  }\n\n  var type = element.type;\n  var key = element.key;\n  var pendingProps = element.props;\n  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n\n  {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\nfunction createFiberFromFragment(elements, mode, lanes, key) {\n  var fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(pendingProps, mode, lanes, key) {\n  {\n    if (typeof pendingProps.id !== 'string') {\n      error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n    }\n  }\n\n  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0\n    };\n  }\n\n  return fiber;\n}\n\nfunction createFiberFromSuspense(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  var primaryChildInstance = {\n    isHidden: false\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nfunction createFiberFromText(content, mode, lanes) {\n  var fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\nfunction createFiberFromHostInstanceForDeletion() {\n  var fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\nfunction createFiberFromDehydratedFragment(dehydratedNode) {\n  var fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\nfunction createFiberFromPortal(portal, mode, lanes) {\n  var pendingProps = portal.children !== null ? portal.children : [];\n  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null,\n    // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n} // Used for stashing WIP properties to replay failed work in DEV.\n\nfunction assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  } // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n\n  {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n\nfunction FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  {\n    this.memoizedUpdaters = new Set();\n    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n\n    for (var _i = 0; _i < TotalLanes; _i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nfunction createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n// host config, but because they are passed in at runtime, we have to thread\n// them through the root constructor. Perhaps we should put them all into a\n// single type, like a DynamicHostConfig that is defined by the renderer.\nidentifierPrefix, onRecoverableError, transitionCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);\n  // stateNode is any.\n\n\n  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  {\n    var _initialState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: null,\n      // not enabled yet\n      transitions: null,\n      pendingSuspenseBoundaries: null\n    };\n    uninitializedFiber.memoizedState = _initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n\nvar ReactVersion = '18.2.0';\n\nfunction createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  {\n    checkKeyStringCoercion(key);\n  }\n\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n}\n\nvar didWarnAboutNestedUpdates;\nvar didWarnAboutFindNodeInStrictMode;\n\n{\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(parentComponent) {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  var fiber = get(parentComponent);\n  var parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    var Component = fiber.type;\n\n    if (isContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component) {\n  var fiber = get(component);\n\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      var keys = Object.keys(component).join(',');\n      throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n    }\n  }\n\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(component, methodName) {\n  {\n    var fiber = get(component);\n\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        var keys = Object.keys(component).join(',');\n        throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n      }\n    }\n\n    var hostFiber = findCurrentHostFiber(fiber);\n\n    if (hostFiber === null) {\n      return null;\n    }\n\n    if (hostFiber.mode & StrictLegacyMode) {\n      var componentName = getComponentNameFromFiber(fiber) || 'Component';\n\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(hostFiber);\n\n          if (fiber.mode & StrictLegacyMode) {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          } else {\n            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentFiber(previousFiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n\n    return hostFiber.stateNode;\n  }\n}\n\nfunction createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = false;\n  var initialChildren = null;\n  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);\n}\nfunction createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.\ncallback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n  var hydrate = true;\n  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor\n\n  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n\n  var current = root.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current);\n  var update = createUpdate(eventTime, lane);\n  update.callback = callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n  return root;\n}\nfunction updateContainer(element, container, parentComponent, callback) {\n  {\n    onScheduleRoot(container, element);\n  }\n\n  var current$1 = container.current;\n  var eventTime = requestEventTime();\n  var lane = requestUpdateLane(current$1);\n\n  {\n    markRenderScheduled(lane);\n  }\n\n  var context = getContextForSubtree(parentComponent);\n\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  {\n    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n      didWarnAboutNestedUpdates = true;\n\n      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');\n    }\n  }\n\n  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n\n  update.payload = {\n    element: element\n  };\n  callback = callback === undefined ? null : callback;\n\n  if (callback !== null) {\n    {\n      if (typeof callback !== 'function') {\n        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n      }\n    }\n\n    update.callback = callback;\n  }\n\n  var root = enqueueUpdate(current$1, update, lane);\n\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current$1, lane, eventTime);\n    entangleTransitions(root, current$1, lane);\n  }\n\n  return lane;\n}\nfunction getPublicRootInstance(container) {\n  var containerFiber = container.current;\n\n  if (!containerFiber.child) {\n    return null;\n  }\n\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\nfunction attemptSynchronousHydration(fiber) {\n  switch (fiber.tag) {\n    case HostRoot:\n      {\n        var root = fiber.stateNode;\n\n        if (isRootDehydrated(root)) {\n          // Flush the first scheduled \"update\".\n          var lanes = getHighestPriorityPendingLanes(root);\n          flushRoot(root, lanes);\n        }\n\n        break;\n      }\n\n    case SuspenseComponent:\n      {\n        flushSync(function () {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            var eventTime = requestEventTime();\n            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n          }\n        }); // If we're still blocked after this, we need to increase\n        // the priority of any promises resolving within this\n        // boundary so that they next attempt also has higher pri.\n\n        var retryLane = SyncLane;\n        markRetryLaneIfNotHydrated(fiber, retryLane);\n        break;\n      }\n  }\n}\n\nfunction markRetryLaneImpl(fiber, retryLane) {\n  var suspenseState = fiber.memoizedState;\n\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);\n  }\n} // Increases the priority of thenables when they resolve within this boundary.\n\n\nfunction markRetryLaneIfNotHydrated(fiber, retryLane) {\n  markRetryLaneImpl(fiber, retryLane);\n  var alternate = fiber.alternate;\n\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nfunction attemptDiscreteHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var lane = SyncLane;\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptContinuousHydration(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n\n  var lane = SelectiveHydrationLane;\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction attemptHydrationAtCurrentPriority(fiber) {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n\n  var lane = requestUpdateLane(fiber);\n  var root = enqueueConcurrentRenderForLane(fiber, lane);\n\n  if (root !== null) {\n    var eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\nfunction findHostInstanceWithNoPortals(fiber) {\n  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nvar shouldErrorImpl = function (fiber) {\n  return null;\n};\n\nfunction shouldError(fiber) {\n  return shouldErrorImpl(fiber);\n}\n\nvar shouldSuspendImpl = function (fiber) {\n  return false;\n};\n\nfunction shouldSuspend(fiber) {\n  return shouldSuspendImpl(fiber);\n}\nvar overrideHookState = null;\nvar overrideHookStateDeletePath = null;\nvar overrideHookStateRenamePath = null;\nvar overrideProps = null;\nvar overridePropsDeletePath = null;\nvar overridePropsRenamePath = null;\nvar scheduleUpdate = null;\nvar setErrorHandler = null;\nvar setSuspenseHandler = null;\n\n{\n  var copyWithDeleteImpl = function (obj, path, index) {\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(key, 1);\n      } else {\n        delete updated[key];\n      }\n\n      return updated;\n    } // $FlowFixMe number or string is fine here\n\n\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  var copyWithDelete = function (obj, path) {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n    var oldKey = oldPath[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n    if (index + 1 === oldPath.length) {\n      var newKey = newPath[index]; // $FlowFixMe number or string is fine here\n\n      updated[newKey] = updated[oldKey];\n\n      if (isArray(updated)) {\n        updated.splice(oldKey, 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here\n      obj[oldKey], oldPath, newPath, index + 1);\n    }\n\n    return updated;\n  };\n\n  var copyWithRename = function (obj, oldPath, newPath) {\n    if (oldPath.length !== newPath.length) {\n      warn('copyWithRename() expects paths of the same length');\n\n      return;\n    } else {\n      for (var i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          warn('copyWithRename() expects paths to be the same except for the deepest key');\n\n          return;\n        }\n      }\n    }\n\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  var copyWithSetImpl = function (obj, path, index, value) {\n    if (index >= path.length) {\n      return value;\n    }\n\n    var key = path[index];\n    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here\n\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  var copyWithSet = function (obj, path, value) {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  var findHook = function (fiber, id) {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    var currentHook = fiber.memoizedState;\n\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n\n    return currentHook;\n  }; // Support DevTools editable values for useState and useReducer.\n\n\n  overrideHookState = function (fiber, id, path, value) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  overrideHookStateDeletePath = function (fiber, id, path) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n    var hook = findHook(fiber, id);\n\n    if (hook !== null) {\n      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState; // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n      fiber.memoizedProps = assign({}, fiber.memoizedProps);\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n\n  overrideProps = function (fiber, path, value) {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overridePropsDeletePath = function (fiber, path) {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  overridePropsRenamePath = function (fiber, oldPath, newPath) {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = function (fiber) {\n    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = function (newShouldErrorImpl) {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = function (newShouldSuspendImpl) {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber) {\n  var hostFiber = findCurrentHostFiber(fiber);\n\n  if (hostFiber === null) {\n    return null;\n  }\n\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(instance) {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return current;\n}\n\nfunction injectIntoDevTools(devToolsConfig) {\n  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState: overrideHookState,\n    overrideHookStateDeletePath: overrideHookStateDeletePath,\n    overrideHookStateRenamePath: overrideHookStateRenamePath,\n    overrideProps: overrideProps,\n    overridePropsDeletePath: overridePropsDeletePath,\n    overridePropsRenamePath: overridePropsRenamePath,\n    setErrorHandler: setErrorHandler,\n    setSuspenseHandler: setSuspenseHandler,\n    scheduleUpdate: scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber: findHostInstanceByFiber,\n    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh:  findHostInstancesForRefresh ,\n    scheduleRefresh:  scheduleRefresh ,\n    scheduleRoot:  scheduleRoot ,\n    setRefreshHandler:  setRefreshHandler ,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber:  getCurrentFiberForDevTools ,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion\n  });\n}\n\nexports.attemptContinuousHydration = attemptContinuousHydration;\nexports.attemptDiscreteHydration = attemptDiscreteHydration;\nexports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;\nexports.attemptSynchronousHydration = attemptSynchronousHydration;\nexports.batchedUpdates = batchedUpdates;\nexports.createComponentSelector = createComponentSelector;\nexports.createContainer = createContainer;\nexports.createHasPseudoClassSelector = createHasPseudoClassSelector;\nexports.createHydrationContainer = createHydrationContainer;\nexports.createPortal = createPortal;\nexports.createRoleSelector = createRoleSelector;\nexports.createTestNameSelector = createTestNameSelector;\nexports.createTextSelector = createTextSelector;\nexports.deferredUpdates = deferredUpdates;\nexports.discreteUpdates = discreteUpdates;\nexports.findAllNodes = findAllNodes;\nexports.findBoundingRects = findBoundingRects;\nexports.findHostInstance = findHostInstance;\nexports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;\nexports.findHostInstanceWithWarning = findHostInstanceWithWarning;\nexports.flushControlled = flushControlled;\nexports.flushPassiveEffects = flushPassiveEffects;\nexports.flushSync = flushSync;\nexports.focusWithin = focusWithin;\nexports.getCurrentUpdatePriority = getCurrentUpdatePriority;\nexports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;\nexports.getPublicRootInstance = getPublicRootInstance;\nexports.injectIntoDevTools = injectIntoDevTools;\nexports.isAlreadyRendering = isAlreadyRendering;\nexports.observeVisibleRects = observeVisibleRects;\nexports.registerMutableSourceForHydration = registerMutableSourceForHydration;\nexports.runWithPriority = runWithPriority;\nexports.shouldError = shouldError;\nexports.shouldSuspend = shouldSuspend;\nexports.updateContainer = updateContainer;\n    return exports;\n  };\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-reconciler.production.min.js');\n} else {\n  module.exports = require('./cjs/react-reconciler.development.js');\n}\n","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","/**\n * @license React\n * react-reconciler-constants.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar SyncLane =\n/*                        */\n1;\nvar InputContinuousLane =\n/*             */\n4;\nvar DefaultLane =\n/*                     */\n16;\nvar IdleLane =\n/*                        */\n536870912;\n\nvar DiscreteEventPriority = SyncLane;\nvar ContinuousEventPriority = InputContinuousLane;\nvar DefaultEventPriority = DefaultLane;\nvar IdleEventPriority = IdleLane;\n\nvar LegacyRoot = 0;\nvar ConcurrentRoot = 1;\n\nexports.ConcurrentRoot = ConcurrentRoot;\nexports.ContinuousEventPriority = ContinuousEventPriority;\nexports.DefaultEventPriority = DefaultEventPriority;\nexports.DiscreteEventPriority = DiscreteEventPriority;\nexports.IdleEventPriority = IdleEventPriority;\nexports.LegacyRoot = LegacyRoot;\n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-reconciler-constants.production.min.js');\n} else {\n  module.exports = require('./cjs/react-reconciler-constants.development.js');\n}\n","/**\n * -------------------------------------------\n * Host Config file.\n *\n * See:\n *   https://github.com/facebook/react/tree/master/packages/react-reconciler\n *   https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\n * -------------------------------------------\n */\n\nimport performanceNow from 'performance-now';\nimport { ContinuousEventPriority, DiscreteEventPriority, DefaultEventPriority } from 'react-reconciler/constants';\nimport invariant from '../utils/invariant';\nimport { createElement } from '../utils/element';\nimport { CHILDREN, applyDefaultProps } from '../utils/props';\n\nconst NO_CONTEXT = {};\n\nfunction getEventPriority()\n{\n    if (typeof window === 'undefined')\n    {\n        return DefaultEventPriority;\n    }\n\n    const name = window?.event?.type;\n\n    switch (name)\n    {\n        case 'click':\n        case 'contextmenu':\n        case 'dblclick':\n        case 'pointercancel':\n        case 'pointerdown':\n        case 'pointerup':\n            return DiscreteEventPriority;\n        case 'pointermove':\n        case 'pointerout':\n        case 'pointerover':\n        case 'pointerenter':\n        case 'pointerleave':\n        case 'wheel':\n            return ContinuousEventPriority;\n        default:\n            return DefaultEventPriority;\n    }\n}\n\nfunction appendChild(parent, child)\n{\n    if (parent.addChild)\n    {\n        parent.addChild(child);\n\n        if (typeof child.didMount === 'function')\n        {\n            child.didMount(child, parent);\n        }\n    }\n}\n\nfunction willUnmountRecursive(child, parent)\n{\n    child.willUnmount?.(child, parent);\n\n    // ensure willUnmount is called on children, but don't actually destroy them\n    if (child.config?.destroyChildren !== false && child.children?.length)\n    {\n        [...child.children].forEach((c) =>\n        {\n            // TODO: should we call willUnmount anyway irrespective of whether destroyChildren is true?\n            willUnmountRecursive(c, child);\n        });\n    }\n}\n\nfunction removeChild(parent, child)\n{\n    // call willUnmount on child and iteratively on its descendants\n    willUnmountRecursive(child, parent);\n\n    parent.removeChild(child);\n\n    const {\n        destroy = true,\n        destroyChildren = true,\n        destroyTexture = false,\n        destroyBaseTexture = false\n    } = child.config ?? {};\n\n    if (destroy)\n    {\n        // defer to PIXI to actually destroy children\n        child.destroy({\n            children: destroyChildren,\n            texture: destroyTexture,\n            baseTexture: destroyBaseTexture\n        });\n    }\n}\n\nfunction insertBefore(parent, child, beforeChild)\n{\n    invariant(child !== beforeChild, 'Cannot insert node before itself');\n\n    const childExists = parent.children.indexOf(child) !== -1;\n\n    if (childExists)\n    {\n        parent.removeChild(child);\n    }\n\n    const index = parent.getChildIndex(beforeChild);\n\n    parent.addChildAt(child, index);\n\n    parent.__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'insertBefore' });\n}\n\n// get diff between 2 objects\n// https://github.com/facebook/react/blob/97e2911/packages/react-dom/src/client/ReactDOMFiberComponent.js#L546\nfunction diffProperties(pixiElement, type, lastProps, nextProps)\n{\n    let updatePayload = null;\n\n    for (const propKey in lastProps)\n    {\n        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] === null)\n        {\n            continue;\n        }\n        if (propKey === CHILDREN)\n        {\n            // Noop. Text children not supported\n        }\n        else\n        {\n            // For all other deleted properties we add it to the queue. We use\n            // the whitelist in the commit phase instead.\n            if (!updatePayload)\n            {\n                updatePayload = [];\n            }\n            updatePayload.push(propKey, null);\n        }\n    }\n\n    for (const propKey in nextProps)\n    {\n        const nextProp = nextProps[propKey];\n        const lastProp = lastProps !== null ? lastProps[propKey] : undefined;\n\n        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || (nextProp === null && lastProp === null))\n        {\n            continue;\n        }\n\n        if (propKey === CHILDREN)\n        {\n            // Noop. Text children not supported\n        }\n        else\n        {\n            // For any other property we always add it to the queue and then we\n            // filter it out using the whitelist during the commit.\n            if (!updatePayload)\n            {\n                updatePayload = [];\n            }\n            updatePayload.push(propKey, nextProp);\n        }\n    }\n\n    return updatePayload;\n}\n\nlet prepareChanged = null;\n\nconst HostConfig = {\n    getRootHostContext()\n    {\n        return NO_CONTEXT;\n    },\n\n    getChildHostContext(parentHostContext)\n    {\n        return parentHostContext;\n    },\n\n    getChildHostContextForEventComponent(parentHostContext)\n    {\n        return parentHostContext;\n    },\n\n    getPublicInstance(instance)\n    {\n        return instance;\n    },\n\n    // TODO: Implement a proper version of getCurrentEventPriority\n    getCurrentEventPriority()\n    {\n        return getEventPriority();\n    },\n\n    prepareForCommit()\n    {\n    // noop\n        return null;\n    },\n\n    resetAfterCommit()\n    {\n    // noop\n    },\n\n    createInstance: createElement,\n\n    hideInstance(instance)\n    {\n        instance.visible = false;\n    },\n\n    unhideInstance(instance, props)\n    {\n        const visible = props !== undefined && props !== null && props.hasOwnProperty('visible') ? props.visible : true;\n\n        instance.visible = visible;\n    },\n\n    finalizeInitialChildren(wordElement, type, props)\n    {\n        return false;\n    },\n\n    prepareUpdate(pixiElement, type, oldProps, newProps, rootContainerInstance, hostContext)\n    {\n        prepareChanged = diffProperties(pixiElement, type, oldProps, newProps);\n\n        return prepareChanged;\n    },\n\n    shouldSetTextContent(type, props)\n    {\n        return false;\n    },\n\n    shouldDeprioritizeSubtree(type, props)\n    {\n        const isAlphaVisible = typeof props.alpha === 'undefined' || props.alpha > 0;\n        const isRenderable = typeof props.renderable === 'undefined' || props.renderable === true;\n        const isVisible = typeof props.visible === 'undefined' || props.visible === true;\n\n        return !(isAlphaVisible && isRenderable && isVisible);\n    },\n\n    createTextInstance(text, rootContainerInstance, internalInstanceHandler)\n    {\n        invariant(\n            false,\n            `Error trying to add text node \"${text}\"`,\n            'text strings as children of a Pixi component is not supported. '\n        + 'To add some text, use &lt;Text text={string} /&gt;'\n        );\n    },\n\n    unhideTextInstance(textInstance, text)\n    {\n    // noop\n    },\n\n    mountEventComponent()\n    {\n    // noop\n    },\n\n    updateEventComponent()\n    {\n    // noop\n    },\n\n    handleEventTarget()\n    {\n    // noop\n    },\n\n    scheduleTimeout: setTimeout,\n\n    cancelTimeout: clearTimeout,\n\n    noTimeout: -1,\n\n    warnsIfNotActing: false,\n\n    now: performanceNow,\n\n    isPrimaryRenderer: false,\n\n    supportsMutation: true,\n\n    supportsPersistence: false,\n\n    supportsHydration: false,\n\n    supportsMicrotasks: true,\n\n    scheduleMicrotask: queueMicrotask,\n\n    /**\n   * -------------------------------------------\n   * Mutation\n   * -------------------------------------------\n   */\n\n    appendInitialChild(...args)\n    {\n        const res = appendChild.apply(null, args);\n\n        args[0].__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'appendInitialChild' });\n\n        return res;\n    },\n\n    appendChild(...args)\n    {\n        const res = appendChild.apply(null, args);\n\n        args[0].__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'appendChild' });\n\n        return res;\n    },\n\n    appendChildToContainer(...args)\n    {\n        const res = appendChild.apply(null, args);\n\n        args[0].__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'appendChildToContainer' });\n\n        return res;\n    },\n\n    removeChild(...args)\n    {\n        const res = removeChild.apply(null, args);\n\n        args[0].__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'removeChild' });\n\n        return res;\n    },\n\n    removeChildFromContainer(...args)\n    {\n        const res = removeChild.apply(null, args);\n\n        args[0].__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'removeChildFromContainer' });\n\n        return res;\n    },\n\n    insertBefore,\n\n    insertInContainerBefore(...args)\n    {\n        const res = insertBefore.apply(null, args);\n\n        args[0].__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'insertInContainerBefore' });\n\n        return res;\n    },\n\n    commitUpdate(instance, updatePayload, type, oldProps, newProps)\n    {\n        let applyProps = instance && instance.applyProps;\n\n        if (typeof applyProps !== 'function')\n        {\n            applyProps = applyDefaultProps;\n        }\n\n        const changed = applyProps(instance, oldProps, newProps);\n\n        if (changed || prepareChanged)\n        {\n            instance.__reactpixi?.root?.emit(`__REACT_PIXI_REQUEST_RENDER__`, { detail: 'commitUpdate' });\n        }\n    },\n\n    commitMount(instance, updatePayload, type, oldProps, newProps)\n    {\n    // noop\n    },\n\n    commitTextUpdate(textInstance, oldText, newText)\n    {\n    // noop\n    },\n\n    resetTextContent(pixiElement)\n    {\n    // noop\n    },\n\n    clearContainer(container)\n    {\n    // TODO implement this\n    },\n\n    getFundamentalComponentInstance(fundamentalInstance)\n    {\n        throw new Error('Not yet implemented.');\n    },\n\n    mountFundamentalComponent(fundamentalInstance)\n    {\n        throw new Error('Not yet implemented.');\n    },\n\n    shouldUpdateFundamentalComponent(fundamentalInstance)\n    {\n        throw new Error('Not yet implemented.');\n    },\n\n    unmountFundamentalComponent(fundamentalInstance)\n    {\n        throw new Error('Not yet implemented.');\n    },\n\n    getInstanceFromNode(node)\n    {\n        throw new Error('Not yet implemented.');\n    },\n\n    isOpaqueHydratingObject(value)\n    {\n        throw new Error('Not yet implemented');\n    },\n\n    makeOpaqueHydratingObject(attemptToReadValue)\n    {\n        throw new Error('Not yet implemented.');\n    },\n\n    makeClientIdInDEV(warnOnAccessInDEV)\n    {\n        throw new Error('Not yet implemented');\n    },\n\n    beforeActiveInstanceBlur(internalInstanceHandle)\n    {\n    // noop\n    },\n\n    afterActiveInstanceBlur()\n    {\n    // noop\n    },\n\n    detachDeletedInstance()\n    {\n    // noop\n    },\n\n    preparePortalMount(portalInstance)\n    {\n    // noop\n    },\n};\n\nexport default HostConfig;\n","import Reconciler from 'react-reconciler';\nimport pkg from '../../../../package.json';\nimport hostconfig from './hostconfig';\n\nexport const PixiFiber = Reconciler(hostconfig);\n\nexport const VERSION = pkg.version;\nexport const REACT_DOM_VERSION = pkg.dependencies['react-dom'].replace(/[^0-9.]/g, '');\nexport const PACKAGE_NAME = pkg.name;\n\nPixiFiber.injectIntoDevTools({\n    bundleType: process.env.NODE_ENV !== 'production' ? 1 : 0,\n    version: REACT_DOM_VERSION,\n    rendererPackageName: PACKAGE_NAME,\n    findHostInstanceByFiber: PixiFiber.findHostInstance,\n});\n","import { Container } from '@pixi/display';\nimport invariant from '../utils/invariant';\nimport { PixiFiber } from '../reconciler';\n\n// cache both root PixiFiber containers and React roots\nexport const roots = new Map();\n\n/**\n * @param {Container} container\n */\nfunction unmountComponent(container)\n{\n    invariant(\n        Container.prototype.isPrototypeOf(container),\n        'Invalid argument `container`, expected instance of `Container`.'\n    );\n\n    if (roots.has(container))\n    {\n        const { pixiFiberContainer } = roots.get(container);\n\n        // unmount component\n        PixiFiber.updateContainer(null, pixiFiberContainer, undefined, () =>\n        {\n            roots.delete(container);\n        });\n    }\n}\n\n/**\n * Custom Renderer with react 18 API\n * Use this without React-DOM\n *\n * @param {Container} container\n * @returns {{ render: Function, unmount: Function}}\n */\nexport function createRoot(container)\n{\n    invariant(\n        Container.prototype.isPrototypeOf(container),\n        'Invalid argument `container`, expected instance of `Container`.'\n    );\n\n    let root = roots.get(container);\n\n    invariant(!root, 'createRoot should only be called once');\n\n    if (!root)\n    {\n        const pixiFiberContainer = PixiFiber.createContainer(container);\n\n        const reactRoot = {\n            render(element)\n            {\n                // schedules a top level update\n                PixiFiber.updateContainer(\n                    element,\n                    pixiFiberContainer,\n                    undefined\n                );\n\n                return PixiFiber.getPublicRootInstance(pixiFiberContainer);\n            },\n            unmount()\n            {\n                unmountComponent(container);\n                roots.delete(container);\n            },\n        };\n\n        root = { pixiFiberContainer, reactRoot };\n        roots.set(container, root);\n    }\n\n    return root.reactRoot;\n}\n\n/**\n * Custom Renderer\n * Use this without React-DOM\n *\n * @deprecated use createRoot instead\n *\n * @param {React.ReactNode} element\n * @param {Container} container (i.e. the Stage)\n * @param {Function} callback\n */\nexport function render(element, container, callback)\n{\n    console.warn(\n        'Pixi React Deprecation Warning: render is deprecated, use createRoot instead'\n    );\n\n    if (callback !== undefined)\n    {\n        console.warn(\n            'Pixi React Deprecation Warning: render callback no longer exists in React 18'\n        );\n    }\n\n    let reactRoot;\n\n    if (roots.has(container))\n    {\n        ({ reactRoot } = roots.get(container));\n    }\n    else\n    {\n        reactRoot = createRoot(container);\n    }\n\n    return reactRoot.render(element);\n}\n\n/**\n * @deprecated use root.unmount() instead\n * @param {Container} container\n */\nexport function unmountComponentAtNode(container)\n{\n    unmountComponent(container);\n}\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import React from 'react';\n\nconst Context = React.createContext(null);\n\nconst AppProvider = Context.Provider;\nconst AppConsumer = Context.Consumer;\n\nconst withPixiApp = (BaseComponent) =>\n{\n    const wrapper = React.forwardRef((props, ref) => (\n        <AppConsumer>{(app) => <BaseComponent {...props} ref={ref} app={app} />}</AppConsumer>\n    ));\n\n    wrapper.displayName = `withPIXIApp(${BaseComponent.displayName || BaseComponent.name})`;\n\n    return wrapper;\n};\n\nexport { withPixiApp, AppProvider, AppConsumer, Context };\n","import React from 'react';\nimport { Application } from '@pixi/app';\nimport { Ticker } from '@pixi/ticker';\nimport PropTypes from 'prop-types';\nimport invariant from '../utils/invariant';\nimport { PROPS_DISPLAY_OBJECT } from '../utils/props';\nimport { PixiFiber } from '../reconciler';\nimport { AppProvider } from './provider';\n\nconst noop = () => {};\n\n/**\n * -------------------------------------------\n * Stage React Component (use this in react-dom)\n *\n * @usage\n *\n * const App = () => (\n *   <Stage\n *     width={500}\n *     height={500}\n *     options={ backgroundColor: 0xff0000 }\n *     onMount={( renderer, canvas ) => {\n *       console.log('PIXI renderer: ', renderer)\n *       console.log('Canvas element: ', canvas)\n *     }}>\n * );\n *\n * -------------------------------------------\n */\n\nconst propTypes = {\n    // dimensions\n    width: PropTypes.number,\n    height: PropTypes.number,\n\n    // will return renderer\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n\n    // run ticker at start?\n    raf: PropTypes.bool,\n\n    // render component on component lifecycle changes?\n    renderOnComponentChange: PropTypes.bool,\n\n    children: PropTypes.node,\n\n    // PIXI options, see https://pixijs.download/v7.x/docs/PIXI.Application.html\n    options: PropTypes.shape({\n        autoStart: PropTypes.bool,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        useContextAlpha: PropTypes.bool,\n        backgroundAlpha: PropTypes.number,\n        autoDensity: PropTypes.bool,\n        antialias: PropTypes.bool,\n        preserveDrawingBuffer: PropTypes.bool,\n        resolution: PropTypes.number,\n        forceCanvas: PropTypes.bool,\n        backgroundColor: PropTypes.number,\n        clearBeforeRender: PropTypes.bool,\n        powerPreference: PropTypes.string,\n        sharedTicker: PropTypes.bool,\n        sharedLoader: PropTypes.bool,\n\n        // resizeTo needs to be a window or HTMLElement\n        resizeTo: (props, propName) =>\n        {\n            const el = props[propName];\n\n            el\n                && invariant(\n                    el === window || el instanceof HTMLElement,\n                    `Invalid prop \\`resizeTo\\` of type ${typeof el}, expect \\`window\\` or an \\`HTMLElement\\`.`\n                );\n        },\n\n        // view is optional, use if provided\n        view: (props, propName, componentName) =>\n        {\n            const el = props[propName];\n\n            el\n                && invariant(\n                    el instanceof HTMLCanvasElement,\n                    `Invalid prop \\`view\\` of type ${typeof el}, supplied to ${componentName}, expected \\`<canvas> Element\\``\n                );\n        },\n    }),\n};\n\nconst defaultProps = {\n    width: 800,\n    height: 600,\n    onMount: noop,\n    onUnmount: noop,\n    raf: true,\n    renderOnComponentChange: true,\n};\n\nexport function getCanvasProps(props)\n{\n    const reserved = [\n        ...Object.keys(propTypes),\n        ...Object.keys(PROPS_DISPLAY_OBJECT),\n    ];\n\n    return Object.keys(props)\n        .filter((p) => !reserved.includes(p))\n        .reduce((all, prop) => ({ ...all, [prop]: props[prop] }), {});\n}\n\nclass Stage extends React.Component\n{\n    _canvas = null;\n    _mediaQuery = null;\n    _ticker = null;\n    _needsUpdate = true;\n    app = null;\n\n    componentDidMount()\n    {\n        const {\n            onMount,\n            width,\n            height,\n            options,\n            raf,\n            renderOnComponentChange,\n        } = this.props;\n\n        this.app = new Application({\n            width,\n            height,\n            view: this._canvas,\n            ...options,\n            autoDensity: options?.autoDensity !== false,\n        });\n\n        if (process.env.NODE_ENV === 'development')\n        {\n            // workaround for React 18 Strict Mode unmount causing\n            // webgl canvas context to be lost\n            if (this.app.renderer.context?.extensions)\n            {\n                this.app.renderer.context.extensions.loseContext = null;\n            }\n        }\n\n        this.app.ticker.autoStart = false;\n        this.app.ticker[raf ? 'start' : 'stop']();\n\n        this.app.stage.__reactpixi = { root: this.app.stage };\n        this.mountNode = PixiFiber.createContainer(this.app.stage);\n        PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n\n        onMount(this.app);\n\n        // update size on media query resolution change?\n        // only if autoDensity = true\n        if (\n            options?.autoDensity\n            && window.matchMedia\n            && options?.resolution === undefined\n        )\n        {\n            this._mediaQuery = window.matchMedia(\n                `(-webkit-min-device-pixel-ratio: 1.3), (min-resolution: 120dpi)`\n            );\n            this._mediaQuery.addListener(this.updateSize);\n        }\n\n        // listen for reconciler changes\n        if (renderOnComponentChange && !raf)\n        {\n            this._ticker = new Ticker();\n            this._ticker.autoStart = true;\n            this._ticker.add(this.renderStage);\n            this.app.stage.on(\n                '__REACT_PIXI_REQUEST_RENDER__',\n                this.needsRenderUpdate\n            );\n        }\n\n        this.updateSize();\n        this.renderStage();\n    }\n\n    componentDidUpdate(prevProps, prevState, prevContext)\n    {\n        const { width, height, raf, renderOnComponentChange, options }\n            = this.props;\n\n        // update resolution\n        if (\n            options?.resolution !== undefined\n            && prevProps?.options.resolution !== options?.resolution\n        )\n        {\n            this.app.renderer.resolution = options.resolution;\n            this.resetInteractionManager();\n        }\n\n        // update size\n        if (\n            prevProps.height !== height\n            || prevProps.width !== width\n            || prevProps.options?.resolution !== options?.resolution\n        )\n        {\n            this.updateSize();\n        }\n\n        // handle raf change\n        if (prevProps.raf !== raf)\n        {\n            this.app.ticker[raf ? 'start' : 'stop']();\n        }\n\n        // flush fiber\n        PixiFiber.updateContainer(this.getChildren(), this.mountNode, this);\n\n        if (\n            prevProps.width !== width\n            || prevProps.height !== height\n            || prevProps.raf !== raf\n            || prevProps.renderOnComponentChange !== renderOnComponentChange\n            || prevProps.options !== options\n        )\n        {\n            this._needsUpdate = true;\n            this.renderStage();\n        }\n    }\n\n    updateSize = () =>\n    {\n        const { width, height, options } = this.props;\n\n        if (!options?.resolution)\n        {\n            this.app.renderer.resolution = window.devicePixelRatio;\n            this.resetInteractionManager();\n        }\n\n        this.app.renderer.resize(width, height);\n    };\n\n    needsRenderUpdate = () =>\n    {\n        this._needsUpdate = true;\n    };\n\n    renderStage = () =>\n    {\n        const { renderOnComponentChange, raf } = this.props;\n\n        if (!raf && renderOnComponentChange && this._needsUpdate)\n        {\n            this._needsUpdate = false;\n            this.app.renderer.render(this.app.stage);\n        }\n    };\n\n    // provide support for Pixi v6 still\n    resetInteractionManager()\n    {\n        // `interaction` property is absent in Pixi v7 and in v6 if user has installed Federated Events API plugin.\n        // https://api.pixijs.io/@pixi/events.html\n        // in v7 however, there's a stub object which displays a deprecation warning, so also check the resolution property:\n        const { interaction: maybeInteraction } = this.app.renderer.plugins;\n\n        if (maybeInteraction?.resolution)\n        {\n            maybeInteraction.resolution = this.app.renderer.resolution;\n        }\n    }\n\n    getChildren()\n    {\n        const { children } = this.props;\n\n        return <AppProvider value={this.app}>{children}</AppProvider>;\n    }\n\n    componentDidCatch(error, errorInfo)\n    {\n        console.error(`Error occurred in \\`Stage\\`.`);\n        console.error(error);\n        console.error(errorInfo);\n    }\n\n    componentWillUnmount()\n    {\n        this.props.onUnmount(this.app);\n\n        if (this._ticker)\n        {\n            this._ticker.remove(this.renderStage);\n            this._ticker.destroy();\n        }\n\n        this.app.stage.off(\n            '__REACT_PIXI_REQUEST_RENDER__',\n            this.needsRenderUpdate\n        );\n\n        PixiFiber.updateContainer(null, this.mountNode, this);\n\n        if (this._mediaQuery)\n        {\n            this._mediaQuery.removeListener(this.updateSize);\n            this._mediaQuery = null;\n        }\n\n        this.app.destroy();\n    }\n\n    render()\n    {\n        const { options } = this.props;\n\n        if (options && options.view)\n        {\n            invariant(\n                options.view instanceof HTMLCanvasElement,\n                'options.view needs to be a `HTMLCanvasElement`'\n            );\n\n            return null;\n        }\n\n        return (\n            <canvas\n                {...getCanvasProps(this.props)}\n                ref={(c) => (this._canvas = c)}\n            />\n        );\n    }\n}\n\nStage.propTypes = propTypes;\nStage.defaultProps = defaultProps;\n\nexport default Stage;\n","import { Application } from '@pixi/app';\nimport { useContext } from 'react';\nimport invariant from '../utils/invariant';\nimport { Context } from '../stage/provider';\n\nexport function useApp()\n{\n    const app = useContext(Context);\n\n    invariant(\n        app instanceof Application,\n        'No Context found with `%s`. Make sure to wrap component with `%s`',\n        'Application',\n        'AppProvider'\n    );\n\n    return app;\n}\n","import { Application } from '@pixi/app';\nimport { useEffect, useRef } from 'react';\nimport { useApp } from './useApp';\nimport invariant from '../utils/invariant';\n\nfunction useTick(callback, enabled = true)\n{\n    const app = useApp();\n\n    invariant(typeof callback === 'function', '`useTick` needs a callback function.');\n    invariant(\n        app instanceof Application,\n        'No Context found with `%s`. Make sure to wrap component with `%s`',\n        'Application',\n        'AppProvider'\n    );\n\n    const savedRef = useRef(null);\n\n    useEffect(() =>\n    {\n        savedRef.current = callback;\n    }, [callback]);\n\n    // eslint-disable-next-line consistent-return\n    useEffect(() =>\n    {\n        if (enabled)\n        {\n            const tick = (delta) => savedRef.current.apply(app.ticker, [delta, app.ticker]);\n\n            app.ticker.add(tick);\n\n            return () =>\n            {\n                if (app.ticker)\n                {\n                    app.ticker.remove(tick);\n                }\n            };\n        }\n    }, [enabled]);\n}\n\nexport { useTick };\n","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import React, { useMemo, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport invariant from '../utils/invariant';\nimport { hasKey, isFunction, not } from '../helpers';\n\nexport const withFilters = (WrapperComponent, filters) =>\n{\n    invariant(typeof filters === 'object', 'Second argument needs to be an indexed object with { prop: Filter }');\n\n    const keys = Object.keys(filters);\n\n    const Wrapper = ({ children, apply, ...props }) =>\n    {\n    // create filters\n        const filterList = useRef(\n            useMemo(() =>\n                keys.map((prop) =>\n                {\n                    const constructorArgs = props?.[prop]?.construct || [];\n\n                    return new filters[prop](...constructorArgs);\n                }), [keys])\n        );\n\n        const filterObj = useMemo(() =>\n            keys.reduce((all, c, i) => ({ ...all, [c]: filterList.current[i] }), {}), [keys]);\n\n        // get rest props\n        const restProps = useMemo(() =>\n            Object.keys(props)\n                .filter(not(hasKey(keys)))\n                .reduce((all, c) => ({ ...all, [c]: props[c] }), {}), [props, keys]);\n\n        // update filter params\n        keys.forEach((k, i) => Object.assign(filterList.current[i], props[k]));\n\n        // use apply ?\n        if (apply && isFunction(apply))\n        {\n            apply.call(WrapperComponent, filterObj);\n        }\n\n        return (\n            <WrapperComponent {...restProps} filters={filterList.current}>\n                {children}\n            </WrapperComponent>\n        );\n    };\n\n    Wrapper.displayName = 'FilterWrapper';\n\n    Wrapper.propTypes = {\n        children: PropTypes.node,\n        apply: PropTypes.func,\n    };\n\n    return Wrapper;\n};\n","import { TYPES } from './utils/element';\n\n/**\n * -------------------------------------------\n * Public API\n * -------------------------------------------\n */\n\nexport * from './exports';\n\nexport const BitmapText = TYPES.BitmapText;\nexport const Container = TYPES.Container;\nexport const Graphics = TYPES.Graphics;\nexport const NineSlicePlane = TYPES.NineSlicePlane;\nexport const ParticleContainer = TYPES.ParticleContainer;\nexport const Sprite = TYPES.Sprite;\nexport const AnimatedSprite = TYPES.AnimatedSprite;\nexport const Text = TYPES.Text;\nexport const TilingSprite = TYPES.TilingSprite;\nexport const SimpleMesh = TYPES.SimpleMesh;\nexport const SimpleRope = TYPES.SimpleRope;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}