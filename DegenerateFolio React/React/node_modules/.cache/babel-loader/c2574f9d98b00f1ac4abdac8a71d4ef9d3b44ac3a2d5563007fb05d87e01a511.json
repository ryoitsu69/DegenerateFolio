{"ast":null,"code":"/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport function assertNumber(n) {\n  if (!Number.isSafeInteger(n)) throw new Error(\"Wrong integer: \".concat(n));\n}\nfunction isBytes(a) {\n  return a instanceof Uint8Array || a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array';\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain() {\n  const id = a => a;\n  // Wrap call in closure so JIT can inline calls\n  const wrap = (a, b) => c => a(b(c));\n  // Construct chain of args[-1].encode(args[-2].encode([...]))\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const encode = args.map(x => x.encode).reduceRight(wrap, id);\n  // Construct chain of args[0].decode(args[1].decode(...))\n  const decode = args.map(x => x.decode).reduce(wrap, id);\n  return {\n    encode,\n    decode\n  };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n  return {\n    encode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('alphabet.encode input should be an array of numbers');\n      return digits.map(i => {\n        assertNumber(i);\n        if (i < 0 || i >= alphabet.length) throw new Error(\"Digit index outside alphabet: \".concat(i, \" (alphabet: \").concat(alphabet.length, \")\"));\n        return alphabet[i];\n      });\n    },\n    decode: input => {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('alphabet.decode input should be array of strings');\n      return input.map(letter => {\n        if (typeof letter !== 'string') throw new Error(\"alphabet.decode: not string element=\".concat(letter));\n        const index = alphabet.indexOf(letter);\n        if (index === -1) throw new Error(\"Unknown letter: \\\"\".concat(letter, \"\\\". Allowed: \").concat(alphabet));\n        return index;\n      });\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join() {\n  let separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  if (typeof separator !== 'string') throw new Error('join separator should be string');\n  return {\n    encode: from => {\n      if (!Array.isArray(from) || from.length && typeof from[0] !== 'string') throw new Error('join.encode input should be array of strings');\n      for (let i of from) if (typeof i !== 'string') throw new Error(\"join.encode: non-string input=\".concat(i));\n      return from.join(separator);\n    },\n    decode: to => {\n      if (typeof to !== 'string') throw new Error('join.decode input should be string');\n      return to.split(separator);\n    }\n  };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits) {\n  let chr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '=';\n  assertNumber(bits);\n  if (typeof chr !== 'string') throw new Error('padding chr should be string');\n  return {\n    encode(data) {\n      if (!Array.isArray(data) || data.length && typeof data[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of data) if (typeof i !== 'string') throw new Error(\"padding.encode: non-string input=\".concat(i));\n      while (data.length * bits % 8) data.push(chr);\n      return data;\n    },\n    decode(input) {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of input) if (typeof i !== 'string') throw new Error(\"padding.decode: non-string input=\".concat(i));\n      let end = input.length;\n      if (end * bits % 8) throw new Error('Invalid padding: string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        if (!((end - 1) * bits % 8)) throw new Error('Invalid padding: string has too much padding');\n      }\n      return input.slice(0, end);\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n  if (typeof fn !== 'function') throw new Error('normalize fn should be function');\n  return {\n    encode: from => from,\n    decode: to => fn(to)\n  };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n  // base 1 is impossible\n  if (from < 2) throw new Error(\"convertRadix: wrong from=\".concat(from, \", base cannot be less than 2\"));\n  if (to < 2) throw new Error(\"convertRadix: wrong to=\".concat(to, \", base cannot be less than 2\"));\n  if (!Array.isArray(data)) throw new Error('convertRadix: data should be array');\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data);\n  digits.forEach(d => {\n    assertNumber(d);\n    if (d < 0 || d >= from) throw new Error(\"Wrong integer: \".concat(d));\n  });\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < digits.length; i++) {\n      const digit = digits[i];\n      const digitBase = from * carry + digit;\n      if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      carry = digitBase % to;\n      const rounded = Math.floor(digitBase / to);\n      digits[i] = rounded;\n      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase) throw new Error('convertRadix: carry overflow');\n      if (!done) continue;else if (!rounded) pos = i;else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */(a, b) => !b ? a : gcd(b, a % b);\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */(from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n  if (!Array.isArray(data)) throw new Error('convertRadix2: data should be array');\n  if (from <= 0 || from > 32) throw new Error(\"convertRadix2: wrong from=\".concat(from));\n  if (to <= 0 || to > 32) throw new Error(\"convertRadix2: wrong to=\".concat(to));\n  if (radix2carry(from, to) > 32) {\n    throw new Error(\"convertRadix2: carry overflow from=\".concat(from, \" to=\").concat(to, \" carryBits=\").concat(radix2carry(from, to)));\n  }\n  let carry = 0;\n  let pos = 0; // bitwise position in current element\n  const mask = 2 ** to - 1;\n  const res = [];\n  for (const n of data) {\n    assertNumber(n);\n    if (n >= 2 ** from) throw new Error(\"convertRadix2: invalid data word=\".concat(n, \" from=\").concat(from));\n    carry = carry << from | n;\n    if (pos + from > 32) throw new Error(\"convertRadix2: carry overflow pos=\".concat(pos, \" from=\").concat(from));\n    pos += from;\n    for (; pos >= to; pos -= to) res.push((carry >> pos - to & mask) >>> 0);\n    carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n  }\n  carry = carry << to - pos & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry) throw new Error(\"Non-zero padding: \".concat(carry));\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n  assertNumber(num);\n  return {\n    encode: bytes => {\n      if (!isBytes(bytes)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), 2 ** 8, num);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix.decode input should be array of numbers');\n      return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n    }\n  };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits) {\n  let revPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  assertNumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error('radix2: carry overflow');\n  return {\n    encode: bytes => {\n      if (!isBytes(bytes)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix2.decode input should be array of numbers');\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    }\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n  if (typeof fn !== 'function') throw new Error('unsafeWrapper fn should be function');\n  return function () {\n    try {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n  assertNumber(len);\n  if (typeof fn !== 'function') throw new Error('checksum fn should be function');\n  return {\n    encode(data) {\n      if (!isBytes(data)) throw new Error('checksum.encode: input should be Uint8Array');\n      const checksum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(checksum, data.length);\n      return res;\n    },\n    decode(data) {\n      if (!isBytes(data)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const newChecksum = fn(payload).slice(0, len);\n      const oldChecksum = data.slice(-len);\n      for (let i = 0; i < len; i++) if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    }\n  };\n}\n// prettier-ignore\nexport const utils = {\n  alphabet,\n  chain,\n  checksum,\n  convertRadix,\n  convertRadix2,\n  radix,\n  radix2,\n  join,\n  padding\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexport const base16 = /* @__PURE__ */chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = /* @__PURE__ */chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = /* @__PURE__ */chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = /* @__PURE__ */chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize(s => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64nopad = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\nexport const base64url = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = /* @__PURE__ */chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = abc => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = /* @__PURE__ */genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = /* @__PURE__ */genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = /* @__PURE__ */genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n  encode(data) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n    }\n    return res;\n  },\n  decode(str) {\n    let res = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  }\n};\nexport const createBase58check = /* @__PURE__ */sha256 => chain(checksum(4, data => sha256(sha256(data))), base58);\n// legacy export, bad name\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];\n  }\n  return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words) {\n  let encodingConst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(\"Invalid prefix (\".concat(prefix, \")\"));\n    chk = bech32Polymod(chk) ^ c >> 5;\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 0x1f;\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n  function encode(prefix, words) {\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 90;\n    if (typeof prefix !== 'string') throw new Error(\"bech32.encode prefix should be string, not \".concat(typeof prefix));\n    if (!Array.isArray(words) || words.length && typeof words[0] !== 'number') throw new Error(\"bech32.encode words should be array of numbers, not \".concat(typeof words));\n    if (prefix.length === 0) throw new TypeError(\"Invalid prefix length \".concat(prefix.length));\n    const actualLength = prefix.length + 7 + words.length;\n    if (limit !== false && actualLength > limit) throw new TypeError(\"Length \".concat(actualLength, \" exceeds limit \").concat(limit));\n    const lowered = prefix.toLowerCase();\n    const sum = bechChecksum(lowered, words, ENCODING_CONST);\n    return \"\".concat(lowered, \"1\").concat(BECH_ALPHABET.encode(words)).concat(sum);\n  }\n  function decode(str) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 90;\n    if (typeof str !== 'string') throw new Error(\"bech32.decode input should be string, not \".concat(typeof str));\n    if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError(\"Wrong string length: \".concat(str.length, \" (\").concat(str, \"). Expected (8..\").concat(limit, \")\"));\n    // don't allow mixed case\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase()) throw new Error(\"String must be lowercase or uppercase\");\n    const sepIndex = lowered.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1) throw new Error(\"Letter \\\"1\\\" must be present between prefix and data only\");\n    const prefix = lowered.slice(0, sepIndex);\n    const data = lowered.slice(sepIndex + 1);\n    if (data.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(data).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!data.endsWith(sum)) throw new Error(\"Invalid checksum in \".concat(str, \": expected \\\"\").concat(sum, \"\\\"\"));\n    return {\n      prefix,\n      words\n    };\n  }\n  const decodeUnsafe = unsafeWrapper(decode);\n  function decodeToBytes(str) {\n    const {\n      prefix,\n      words\n    } = decode(str, false);\n    return {\n      prefix,\n      words,\n      bytes: fromWords(words)\n    };\n  }\n  return {\n    encode,\n    decode,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords\n  };\n}\nexport const bech32 = /* @__PURE__ */genBech32('bech32');\nexport const bech32m = /* @__PURE__ */genBech32('bech32m');\nexport const utf8 = {\n  encode: data => new TextDecoder().decode(data),\n  decode: str => new TextEncoder().encode(str)\n};\nexport const hex = /* @__PURE__ */chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize(s => {\n  if (typeof s !== 'string' || s.length % 2) throw new TypeError(\"hex.decode: expected string, got \".concat(typeof s, \" with length \").concat(s.length));\n  return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n  utf8,\n  hex,\n  base16,\n  base32,\n  base64,\n  base64url,\n  base58,\n  base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!isBytes(bytes)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;","map":{"version":3,"names":["assertNumber","n","Number","isSafeInteger","Error","concat","isBytes","a","Uint8Array","constructor","name","chain","id","wrap","b","c","_len","arguments","length","args","Array","_key","encode","map","x","reduceRight","decode","reduce","alphabet","digits","isArray","i","input","letter","index","indexOf","join","separator","undefined","from","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","rounded","Math","floor","reverse","gcd","radix2carry","convertRadix2","mask","radix","num","bytes","radix2","revPadding","unsafeWrapper","_len2","_key2","apply","e","checksum","len","set","payload","newChecksum","oldChecksum","utils","base16","base32","base32hex","base32crockford","s","toUpperCase","replace","base64","base64nopad","base64url","base64urlnopad","genBase58","abc","base58","base58flickr","base58xrp","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","j","createBase58check","sha256","base58check","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","TypeError","actualLength","lowered","toLowerCase","sum","sepIndex","lastIndexOf","endsWith","decodeUnsafe","decodeToBytes","bech32","bech32m","utf8","TextDecoder","TextEncoder","hex","CODERS","coderTypeError","bytesToString","type","hasOwnProperty","stringToBytes"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@scure/base/lib/esm/index.js"],"sourcesContent":["/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexport const utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexport const base16 = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64nopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\nexport const base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = /* @__PURE__ */ genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = /* @__PURE__ */ genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const createBase58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n// legacy export, bad name\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        if (prefix.length === 0)\n            throw new TypeError(`Invalid prefix length ${prefix.length}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        const sepIndex = lowered.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = lowered.slice(0, sepIndex);\n        const data = lowered.slice(sepIndex + 1);\n        if (data.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(data).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!data.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = /* @__PURE__ */ genBech32('bech32');\nexport const bech32m = /* @__PURE__ */ genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n//# sourceMappingURL=index.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}