{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1Wallet = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n  /**\n   * Creates a DirectSecp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey, prefix = \"cosmos\") {\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signDirect(address, signDoc) {\n    const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n    if (address !== this.address) {\n      throw new Error(`Address ${address} not found in wallet`);\n    }\n    const hashedMessage = (0, crypto_1.sha256)(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = (0, amino_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;","map":{"version":3,"names":["amino_1","require","crypto_1","encoding_1","signing_1","DirectSecp256k1Wallet","fromKey","privkey","prefix","uncompressed","Secp256k1","makeKeypair","pubkey","compressPubkey","constructor","address","toBech32","rawSecp256k1PubkeyToRawAddress","getAccounts","algo","signDirect","signDoc","signBytes","makeSignBytes","Error","hashedMessage","sha256","signature","createSignature","signatureBytes","Uint8Array","r","s","stdSignature","encodeSecp256k1Signature","signed","exports"],"sources":["../src/directsecp256k1wallet.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AAIA,MAAAG,SAAA,GAAAH,OAAA;AAEA;;;;;AAKA,MAAaI,qBAAqB;EAChC;;;;;;EAMO,aAAaC,OAAOA,CAACC,OAAmB,EAAEC,MAAM,GAAG,QAAQ;IAChE,MAAMC,YAAY,GAAG,CAAC,MAAMP,QAAA,CAAAQ,SAAS,CAACC,WAAW,CAACJ,OAAO,CAAC,EAAEK,MAAM;IAClE,OAAO,IAAIP,qBAAqB,CAACE,OAAO,EAAEL,QAAA,CAAAQ,SAAS,CAACG,cAAc,CAACJ,YAAY,CAAC,EAAED,MAAM,CAAC;EAC3F;EAMAM,YAAoBP,OAAmB,EAAEK,MAAkB,EAAEJ,MAAc;IACzE,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACK,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACJ,MAAM,GAAGA,MAAM;EACtB;EAEA,IAAYO,OAAOA,CAAA;IACjB,OAAO,IAAAZ,UAAA,CAAAa,QAAQ,EAAC,IAAI,CAACR,MAAM,EAAE,IAAAR,OAAA,CAAAiB,8BAA8B,EAAC,IAAI,CAACL,MAAM,CAAC,CAAC;EAC3E;EAEO,MAAMM,WAAWA,CAAA;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WAAW;MACjBJ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBH,MAAM,EAAE,IAAI,CAACA;KACd,CACF;EACH;EAEO,MAAMQ,UAAUA,CAACL,OAAe,EAAEM,OAAgB;IACvD,MAAMC,SAAS,GAAG,IAAAlB,SAAA,CAAAmB,aAAa,EAACF,OAAO,CAAC;IACxC,IAAIN,OAAO,KAAK,IAAI,CAACA,OAAO,EAAE;MAC5B,MAAM,IAAIS,KAAK,CAAC,WAAWT,OAAO,sBAAsB,CAAC;;IAE3D,MAAMU,aAAa,GAAG,IAAAvB,QAAA,CAAAwB,MAAM,EAACJ,SAAS,CAAC;IACvC,MAAMK,SAAS,GAAG,MAAMzB,QAAA,CAAAQ,SAAS,CAACkB,eAAe,CAACH,aAAa,EAAE,IAAI,CAAClB,OAAO,CAAC;IAC9E,MAAMsB,cAAc,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAGH,SAAS,CAACI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGJ,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAMC,YAAY,GAAG,IAAAjC,OAAA,CAAAkC,wBAAwB,EAAC,IAAI,CAACtB,MAAM,EAAEiB,cAAc,CAAC;IAC1E,OAAO;MACLM,MAAM,EAAEd,OAAO;MACfM,SAAS,EAAEM;KACZ;EACH;;AAjDFG,OAAA,CAAA/B,qBAAA,GAAAA,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}