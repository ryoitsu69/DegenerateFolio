{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStorageSlotNumForLongString = exports.soliditySha3Raw = exports.soliditySha3 = exports.encodePacked = exports.processSolidityEncodePackedArgs = exports.keccak256 = exports.keccak256Wrapper = exports.sha3Raw = exports.sha3 = void 0;\n/**\n * This package provides utility functions for Ethereum dapps and other web3.js packages.\n *\n * For using Utils functions, first install Web3 package using `npm i web3` or `yarn add web3`.\n * After that, Web3 Utils functions will be available as mentioned below.\n * ```ts\n * import { Web3 } from 'web3';\n * const web3 = new Web3();\n *\n * const value = web3.utils.fromWei(\"1\", \"ether\")\n *\n * ```\n *\n * For using individual package install `web3-utils` package using `npm i web3-utils` or `yarn add web3-utils` and only import required functions.\n * This is more efficient approach for building lightweight applications.\n * ```ts\n * import { fromWei, soliditySha3Raw } from 'web3-utils';\n *\n * console.log(fromWei(\"1\", \"ether\"));\n * console.log(soliditySha3Raw({ type: \"string\", value: \"helloworld\" }))\n *\n * ```\n * @module Utils\n */\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst utils_js_1 = require(\"ethereum-cryptography/utils.js\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst converters_js_1 = require(\"./converters.js\");\nconst string_manipulation_js_1 = require(\"./string_manipulation.js\");\nconst SHA3_EMPTY_BYTES = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * computes the Keccak-256 hash of the input and returns a hexstring\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.sha3('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3(''));\n * > undefined\n * ```\n */\nconst sha3 = data => {\n  let updatedData;\n  if (typeof data === 'string') {\n    if (data.startsWith('0x') && (0, web3_validator_1.isHexStrict)(data)) {\n      updatedData = (0, converters_js_1.hexToBytes)(data);\n    } else {\n      updatedData = (0, utils_js_1.utf8ToBytes)(data);\n    }\n  } else {\n    updatedData = data;\n  }\n  const hash = (0, converters_js_1.bytesToHex)((0, keccak_js_1.keccak256)(web3_validator_1.utils.ensureIfUint8Array(updatedData)));\n  // EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n  return hash === SHA3_EMPTY_BYTES ? undefined : hash;\n};\nexports.sha3 = sha3;\n/**\n * Will calculate the sha3 of the input but does return the hash value instead of null if for example a empty string is passed.\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * conosle.log(web3.utils.sha3Raw('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3Raw(''));\n * > 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n * ```\n */\nconst sha3Raw = data => {\n  const hash = (0, exports.sha3)(data);\n  if ((0, web3_validator_1.isNullish)(hash)) {\n    return SHA3_EMPTY_BYTES;\n  }\n  return hash;\n};\nexports.sha3Raw = sha3Raw;\n/**\n * A wrapper for ethereum-cryptography/keccak256 to allow hashing a `string` and a `bigint` in addition to `UInt8Array`\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.keccak256Wrapper('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.keccak256Wrapper(1));\n * > 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\n *\n * console.log(web3.utils.keccak256Wrapper(0xaf12fd));\n * > 0x358640fd4719fa923525d74ab5ae80a594301aba5543e3492b052bf4598b794c\n * ```\n */\nconst keccak256Wrapper = data => {\n  let processedData;\n  if (typeof data === 'bigint' || typeof data === 'number') {\n    processedData = (0, utils_js_1.utf8ToBytes)(data.toString());\n  } else if (Array.isArray(data)) {\n    processedData = new Uint8Array(data);\n  } else if (typeof data === 'string' && !(0, web3_validator_1.isHexStrict)(data)) {\n    processedData = (0, utils_js_1.utf8ToBytes)(data);\n  } else {\n    processedData = (0, converters_js_1.bytesToUint8Array)(data);\n  }\n  return (0, converters_js_1.bytesToHex)((0, keccak_js_1.keccak256)(web3_validator_1.utils.ensureIfUint8Array(processedData)));\n};\nexports.keccak256Wrapper = keccak256Wrapper;\nexports.keccak256 = exports.keccak256Wrapper;\n/**\n * returns type and value\n * @param arg - the input to return the type and value\n * @returns - the type and value of the input\n */\nconst getType = arg => {\n  if (Array.isArray(arg)) {\n    throw new Error('Autodetection of array types is not supported.');\n  }\n  let type;\n  let value;\n  // if type is given\n  if (typeof arg === 'object' && ('t' in arg || 'type' in arg) && ('v' in arg || 'value' in arg)) {\n    type = 't' in arg ? arg.t : arg.type;\n    value = 'v' in arg ? arg.v : arg.value;\n    type = type.toLowerCase() === 'bigint' ? 'int' : type;\n  } else if (typeof arg === 'bigint') {\n    return ['int', arg];\n  }\n  // otherwise try to guess the type\n  else {\n    type = (0, converters_js_1.toHex)(arg, true);\n    value = (0, converters_js_1.toHex)(arg);\n    if (!type.startsWith('int') && !type.startsWith('uint')) {\n      type = 'bytes';\n    }\n  }\n  if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n    value = (0, converters_js_1.toBigInt)(value);\n  }\n  return [type, value];\n};\n/**\n * returns the type with size if uint or int\n * @param name - the input to return the type with size\n * @returns - the type with size of the input\n */\nconst elementaryName = name => {\n  if (name.startsWith('int[')) {\n    return \"int256\".concat(name.slice(3));\n  }\n  if (name === 'int') {\n    return 'int256';\n  }\n  if (name.startsWith('uint[')) {\n    return \"uint256'\".concat(name.slice(4));\n  }\n  if (name === 'uint') {\n    return 'uint256';\n  }\n  return name;\n};\n/**\n * returns the size of the value of type 'byte'\n */\nconst parseTypeN = (value, typeLength) => {\n  const typesize = /^(\\d+).*$/.exec(value.slice(typeLength));\n  return typesize ? parseInt(typesize[1], 10) : 0;\n};\n/**\n * returns the bit length of the value\n * @param value - the input to return the bit length\n * @returns - the bit length of the input\n */\nconst bitLength = value => {\n  const updatedVal = value.toString(2);\n  return updatedVal.length;\n};\n/**\n * Pads the value based on size and type\n * returns a string of the padded value\n * @param type - the input to pad\n * @returns = the padded value\n */\nconst solidityPack = (type, val) => {\n  const value = val.toString();\n  if (type === 'string') {\n    if (typeof val === 'string') return (0, converters_js_1.utf8ToHex)(val);\n    throw new web3_errors_1.InvalidStringError(val);\n  }\n  if (type === 'bool' || type === 'boolean') {\n    if (typeof val === 'boolean') return val ? '01' : '00';\n    throw new web3_errors_1.InvalidBooleanError(val);\n  }\n  if (type === 'address') {\n    if (!(0, web3_validator_1.isAddress)(value)) {\n      throw new web3_errors_1.InvalidAddressError(value);\n    }\n    return value;\n  }\n  const name = elementaryName(type);\n  if (type.startsWith('uint')) {\n    const size = parseTypeN(name, 'uint'.length);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new web3_errors_1.InvalidSizeError(value);\n    }\n    const num = (0, converters_js_1.toNumber)(value);\n    if (bitLength(num) > size) {\n      throw new web3_errors_1.InvalidLargeValueError(value);\n    }\n    if (num < BigInt(0)) {\n      throw new web3_errors_1.InvalidUnsignedIntegerError(value);\n    }\n    return size ? (0, string_manipulation_js_1.leftPad)(num.toString(16), size / 8 * 2) : num.toString(16);\n  }\n  if (type.startsWith('int')) {\n    const size = parseTypeN(name, 'int'.length);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new web3_errors_1.InvalidSizeError(type);\n    }\n    const num = (0, converters_js_1.toNumber)(value);\n    if (bitLength(num) > size) {\n      throw new web3_errors_1.InvalidLargeValueError(value);\n    }\n    if (num < BigInt(0)) {\n      return (0, string_manipulation_js_1.toTwosComplement)(num.toString(), size / 8 * 2);\n    }\n    return size ? (0, string_manipulation_js_1.leftPad)(num.toString(16), size / 4) : num.toString(16);\n  }\n  if (name === 'bytes') {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new web3_errors_1.InvalidBytesError(value);\n    }\n    return value;\n  }\n  if (type.startsWith('bytes')) {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new web3_errors_1.InvalidBytesError(value);\n    }\n    const size = parseTypeN(type, 'bytes'.length);\n    if (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, '').length / 2) {\n      throw new web3_errors_1.InvalidBytesError(value);\n    }\n    return (0, string_manipulation_js_1.rightPad)(value, size * 2);\n  }\n  return '';\n};\n/**\n * returns a string of the tightly packed value given based on the type\n * @param arg - the input to return the tightly packed value\n * @returns - the tightly packed value\n */\nconst processSolidityEncodePackedArgs = arg => {\n  const [type, val] = getType(arg);\n  // array case\n  if (Array.isArray(val)) {\n    // go through each element of the array and use map function to create new hexarg list\n    const hexArg = val.map(v => solidityPack(type, v).replace('0x', ''));\n    return hexArg.join('');\n  }\n  const hexArg = solidityPack(type, val);\n  return hexArg.replace('0x', '');\n};\nexports.processSolidityEncodePackedArgs = processSolidityEncodePackedArgs;\n/**\n * Encode packed arguments to a hexstring\n */\nconst encodePacked = function () {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n  const hexArgs = values.map(exports.processSolidityEncodePackedArgs);\n  return \"0x\".concat(hexArgs.join('').toLowerCase());\n};\nexports.encodePacked = encodePacked;\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, or null if input is empty\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n * console.log(web3.utils.soliditySha3({ type: \"string\", value: \"31323334\" }));\n * > 0xf15f8da2ad27e486d632dc37d24912f634398918d6f9913a0a0ff84e388be62b\n * ```\n */\nconst soliditySha3 = function () {\n  return (0, exports.sha3)((0, exports.encodePacked)(...arguments));\n};\nexports.soliditySha3 = soliditySha3;\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, if input is empty will return `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n * console.log(web3.utils.soliditySha3Raw({ type: \"string\", value: \"helloworld\" }))\n * > 0xfa26db7ca85ead399216e7c6316bc50ed24393c3122b582735e7f3b0f91b93f0\n * ```\n */\nconst soliditySha3Raw = function () {\n  return (0, exports.sha3Raw)((0, exports.encodePacked)(...arguments));\n};\nexports.soliditySha3Raw = soliditySha3Raw;\n/**\n * Get slot number for storage long string in contract. Basically for getStorage method\n * returns slotNumber where will data placed\n * @param mainSlotNumber - the slot number where will be stored hash of long string\n * @returns - the slot number where will be stored long string\n */\nconst getStorageSlotNumForLongString = mainSlotNumber => (0, exports.sha3)(\"0x\".concat((typeof mainSlotNumber === 'number' ? mainSlotNumber.toString() : mainSlotNumber).padStart(64, '0')));\nexports.getStorageSlotNumForLongString = getStorageSlotNumForLongString;","map":{"version":3,"names":["keccak_js_1","require","utils_js_1","web3_errors_1","web3_validator_1","converters_js_1","string_manipulation_js_1","SHA3_EMPTY_BYTES","sha3","data","updatedData","startsWith","isHexStrict","hexToBytes","utf8ToBytes","hash","bytesToHex","keccak256","utils","ensureIfUint8Array","undefined","exports","sha3Raw","isNullish","keccak256Wrapper","processedData","toString","Array","isArray","Uint8Array","bytesToUint8Array","getType","arg","Error","type","value","t","v","toLowerCase","toHex","test","toBigInt","elementaryName","name","concat","slice","parseTypeN","typeLength","typesize","exec","parseInt","bitLength","updatedVal","length","solidityPack","val","utf8ToHex","InvalidStringError","InvalidBooleanError","isAddress","InvalidAddressError","size","InvalidSizeError","num","toNumber","InvalidLargeValueError","BigInt","InvalidUnsignedIntegerError","leftPad","toTwosComplement","replace","InvalidBytesError","rightPad","processSolidityEncodePackedArgs","hexArg","map","join","encodePacked","_len","arguments","values","_key","hexArgs","soliditySha3","soliditySha3Raw","getStorageSlotNumForLongString","mainSlotNumber","padStart"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-utils/src/hash.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * This package provides utility functions for Ethereum dapps and other web3.js packages.\n * \n * For using Utils functions, first install Web3 package using `npm i web3` or `yarn add web3`.\n * After that, Web3 Utils functions will be available as mentioned below. \n * ```ts\n * import { Web3 } from 'web3';\n * const web3 = new Web3();\n * \n * const value = web3.utils.fromWei(\"1\", \"ether\")\n * \n * ```\n * \n * For using individual package install `web3-utils` package using `npm i web3-utils` or `yarn add web3-utils` and only import required functions.\n * This is more efficient approach for building lightweight applications. \n * ```ts\n * import { fromWei, soliditySha3Raw } from 'web3-utils';\n * \n * console.log(fromWei(\"1\", \"ether\"));\n * console.log(soliditySha3Raw({ type: \"string\", value: \"helloworld\" }))\n * \n * ```\n * @module Utils\n */\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { utf8ToBytes } from 'ethereum-cryptography/utils.js';\nimport {\n\tInvalidAddressError,\n\tInvalidBooleanError,\n\tInvalidBytesError,\n\tInvalidLargeValueError,\n\tInvalidSizeError,\n\tInvalidStringError,\n\tInvalidUnsignedIntegerError,\n} from 'web3-errors';\nimport {\n\tBytes,\n\tEncodingTypes,\n\tNumbers,\n\tSha3Input,\n\tTypedObject,\n\tTypedObjectAbbreviated,\n} from 'web3-types';\nimport { utils as validatorUtils, isAddress, isNullish, isHexStrict } from 'web3-validator';\nimport {\n\tbytesToUint8Array,\n\tbytesToHex,\n\thexToBytes,\n\ttoBigInt,\n\ttoHex,\n\ttoNumber,\n\tutf8ToHex,\n} from './converters.js';\nimport { leftPad, rightPad, toTwosComplement } from './string_manipulation.js';\n\nconst SHA3_EMPTY_BYTES = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n\n/**\n * computes the Keccak-256 hash of the input and returns a hexstring\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.sha3('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3(''));\n * > undefined\n * ```\n */\nexport const sha3 = (data: Bytes): string | undefined => {\n\tlet updatedData: Uint8Array;\n\n\tif (typeof data === 'string') {\n\t\tif (data.startsWith('0x') && isHexStrict(data)) {\n\t\t\tupdatedData = hexToBytes(data);\n\t\t} else {\n\t\t\tupdatedData = utf8ToBytes(data);\n\t\t}\n\t} else {\n\t\tupdatedData = data;\n\t}\n\tconst hash = bytesToHex(keccak256(validatorUtils.ensureIfUint8Array(updatedData)));\n\n\t// EIP-1052 if hash is equal to c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470, keccak was given empty data\n\treturn hash === SHA3_EMPTY_BYTES ? undefined : hash;\n};\n\n/**\n * Will calculate the sha3 of the input but does return the hash value instead of null if for example a empty string is passed.\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * conosle.log(web3.utils.sha3Raw('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.sha3Raw(''));\n * > 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n * ```\n */\nexport const sha3Raw = (data: Bytes): string => {\n\tconst hash = sha3(data);\n\tif (isNullish(hash)) {\n\t\treturn SHA3_EMPTY_BYTES;\n\t}\n\n\treturn hash;\n};\n\n/**\n * A wrapper for ethereum-cryptography/keccak256 to allow hashing a `string` and a `bigint` in addition to `UInt8Array`\n * @param data - the input to hash\n * @returns - the Keccak-256 hash of the input\n *\n * @example\n * ```ts\n * console.log(web3.utils.keccak256Wrapper('web3.js'));\n * > 0x63667efb1961039c9bb0d6ea7a5abdd223a3aca7daa5044ad894226e1f83919a\n *\n * console.log(web3.utils.keccak256Wrapper(1));\n * > 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\n *\n * console.log(web3.utils.keccak256Wrapper(0xaf12fd));\n * > 0x358640fd4719fa923525d74ab5ae80a594301aba5543e3492b052bf4598b794c\n * ```\n */\nexport const keccak256Wrapper = (\n\tdata: Bytes | Numbers | string | ReadonlyArray<number>,\n): string => {\n\tlet processedData;\n\tif (typeof data === 'bigint' || typeof data === 'number') {\n\t\tprocessedData = utf8ToBytes(data.toString());\n\t} else if (Array.isArray(data)) {\n\t\tprocessedData = new Uint8Array(data);\n\t} else if (typeof data === 'string' && !isHexStrict(data)) {\n\t\tprocessedData = utf8ToBytes(data);\n\t} else {\n\t\tprocessedData = bytesToUint8Array(data as Bytes);\n\t}\n\treturn bytesToHex(keccak256(validatorUtils.ensureIfUint8Array(processedData)));\n};\n\nexport { keccak256Wrapper as keccak256 };\n\n/**\n * returns type and value\n * @param arg - the input to return the type and value\n * @returns - the type and value of the input\n */\nconst getType = (arg: Sha3Input): [string, EncodingTypes] => {\n\tif (Array.isArray(arg)) {\n\t\tthrow new Error('Autodetection of array types is not supported.');\n\t}\n\n\tlet type;\n\tlet value;\n\t// if type is given\n\tif (\n\t\ttypeof arg === 'object' &&\n\t\t('t' in arg || 'type' in arg) &&\n\t\t('v' in arg || 'value' in arg)\n\t) {\n\t\ttype = 't' in arg ? arg.t : arg.type;\n\t\tvalue = 'v' in arg ? arg.v : arg.value;\n\n\t\ttype = type.toLowerCase() === 'bigint' ? 'int' : type;\n\t} else if (typeof arg === 'bigint') {\n\t\treturn ['int', arg];\n\t}\n\t// otherwise try to guess the type\n\telse {\n\t\ttype = toHex(arg, true);\n\t\tvalue = toHex(arg);\n\n\t\tif (!type.startsWith('int') && !type.startsWith('uint')) {\n\t\t\ttype = 'bytes';\n\t\t}\n\t}\n\n\tif (\n\t\t(type.startsWith('int') || type.startsWith('uint')) &&\n\t\ttypeof value === 'string' &&\n\t\t!/^(-)?0x/i.test(value)\n\t) {\n\t\tvalue = toBigInt(value);\n\t}\n\treturn [type, value];\n};\n\n/**\n * returns the type with size if uint or int\n * @param name - the input to return the type with size\n * @returns - the type with size of the input\n */\nconst elementaryName = (name: string): string => {\n\tif (name.startsWith('int[')) {\n\t\treturn `int256${name.slice(3)}`;\n\t}\n\tif (name === 'int') {\n\t\treturn 'int256';\n\t}\n\tif (name.startsWith('uint[')) {\n\t\treturn `uint256'${name.slice(4)}`;\n\t}\n\tif (name === 'uint') {\n\t\treturn 'uint256';\n\t}\n\treturn name;\n};\n\n/**\n * returns the size of the value of type 'byte'\n */\nconst parseTypeN = (value: string, typeLength: number): number => {\n\tconst typesize = /^(\\d+).*$/.exec(value.slice(typeLength));\n\treturn typesize ? parseInt(typesize[1], 10) : 0;\n};\n\n/**\n * returns the bit length of the value\n * @param value - the input to return the bit length\n * @returns - the bit length of the input\n */\nconst bitLength = (value: bigint | number): number => {\n\tconst updatedVal = value.toString(2);\n\treturn updatedVal.length;\n};\n\n/**\n * Pads the value based on size and type\n * returns a string of the padded value\n * @param type - the input to pad\n * @returns = the padded value\n */\nconst solidityPack = (type: string, val: EncodingTypes): string => {\n\tconst value = val.toString();\n\tif (type === 'string') {\n\t\tif (typeof val === 'string') return utf8ToHex(val);\n\t\tthrow new InvalidStringError(val);\n\t}\n\tif (type === 'bool' || type === 'boolean') {\n\t\tif (typeof val === 'boolean') return val ? '01' : '00';\n\t\tthrow new InvalidBooleanError(val);\n\t}\n\n\tif (type === 'address') {\n\t\tif (!isAddress(value)) {\n\t\t\tthrow new InvalidAddressError(value);\n\t\t}\n\t\treturn value;\n\t}\n\tconst name = elementaryName(type);\n\tif (type.startsWith('uint')) {\n\t\tconst size = parseTypeN(name, 'uint'.length);\n\n\t\tif (size % 8 || size < 8 || size > 256) {\n\t\t\tthrow new InvalidSizeError(value);\n\t\t}\n\t\tconst num = toNumber(value);\n\t\tif (bitLength(num) > size) {\n\t\t\tthrow new InvalidLargeValueError(value);\n\t\t}\n\t\tif (num < BigInt(0)) {\n\t\t\tthrow new InvalidUnsignedIntegerError(value);\n\t\t}\n\n\t\treturn size ? leftPad(num.toString(16), (size / 8) * 2) : num.toString(16);\n\t}\n\n\tif (type.startsWith('int')) {\n\t\tconst size = parseTypeN(name, 'int'.length);\n\t\tif (size % 8 || size < 8 || size > 256) {\n\t\t\tthrow new InvalidSizeError(type);\n\t\t}\n\n\t\tconst num = toNumber(value);\n\t\tif (bitLength(num) > size) {\n\t\t\tthrow new InvalidLargeValueError(value);\n\t\t}\n\t\tif (num < BigInt(0)) {\n\t\t\treturn toTwosComplement(num.toString(), (size / 8) * 2);\n\t\t}\n\t\treturn size ? leftPad(num.toString(16), size / 4) : num.toString(16);\n\t}\n\n\tif (name === 'bytes') {\n\t\tif (value.replace(/^0x/i, '').length % 2 !== 0) {\n\t\t\tthrow new InvalidBytesError(value);\n\t\t}\n\t\treturn value;\n\t}\n\n\tif (type.startsWith('bytes')) {\n\t\tif (value.replace(/^0x/i, '').length % 2 !== 0) {\n\t\t\tthrow new InvalidBytesError(value);\n\t\t}\n\n\t\tconst size = parseTypeN(type, 'bytes'.length);\n\n\t\tif (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, '').length / 2) {\n\t\t\tthrow new InvalidBytesError(value);\n\t\t}\n\n\t\treturn rightPad(value, size * 2);\n\t}\n\treturn '';\n};\n\n/**\n * returns a string of the tightly packed value given based on the type\n * @param arg - the input to return the tightly packed value\n * @returns - the tightly packed value\n */\nexport const processSolidityEncodePackedArgs = (arg: Sha3Input): string => {\n\tconst [type, val] = getType(arg);\n\n\t// array case\n\tif (Array.isArray(val)) {\n\t\t// go through each element of the array and use map function to create new hexarg list\n\t\tconst hexArg = val.map((v: Numbers | boolean) => solidityPack(type, v).replace('0x', ''));\n\t\treturn hexArg.join('');\n\t}\n\n\tconst hexArg = solidityPack(type, val);\n\treturn hexArg.replace('0x', '');\n};\n\n/**\n * Encode packed arguments to a hexstring\n */\nexport const encodePacked = (...values: Sha3Input[]): string => {\n\tconst hexArgs = values.map(processSolidityEncodePackedArgs);\n\treturn `0x${hexArgs.join('').toLowerCase()}`;\n};\n\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, or null if input is empty\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n * console.log(web3.utils.soliditySha3({ type: \"string\", value: \"31323334\" }));\n * > 0xf15f8da2ad27e486d632dc37d24912f634398918d6f9913a0a0ff84e388be62b\n * ```\n */\nexport const soliditySha3 = (...values: Sha3Input[]): string | undefined =>\n\tsha3(encodePacked(...values));\n\n/**\n * Will tightly pack values given in the same way solidity would then hash.\n * returns a hash string, if input is empty will return `0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470`\n * @param values - the input to return the tightly packed values\n * @returns - the keccack246 of the tightly packed values\n *\n * @example\n * ```ts\n * console.log(web3.utils.soliditySha3Raw({ type: \"string\", value: \"helloworld\" }))\n * > 0xfa26db7ca85ead399216e7c6316bc50ed24393c3122b582735e7f3b0f91b93f0\n * ```\n */\nexport const soliditySha3Raw = (...values: TypedObject[] | TypedObjectAbbreviated[]): string =>\n\tsha3Raw(encodePacked(...values));\n\n/**\n * Get slot number for storage long string in contract. Basically for getStorage method\n * returns slotNumber where will data placed\n * @param mainSlotNumber - the slot number where will be stored hash of long string\n * @returns - the slot number where will be stored long string\n */\nexport const getStorageSlotNumForLongString = (mainSlotNumber: number | string) =>\n\tsha3(\n\t\t`0x${(typeof mainSlotNumber === 'number'\n\t\t\t? mainSlotNumber.toString()\n\t\t\t: mainSlotNumber\n\t\t).padStart(64, '0')}`,\n\t);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}