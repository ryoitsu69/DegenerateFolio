{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isContractAddressInBloom = exports.isUserEthereumAddressInBloom = exports.isInBloom = exports.isBloom = void 0;\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst utils_js_1 = require(\"../utils.js\");\nconst address_js_1 = require(\"./address.js\");\nconst string_js_1 = require(\"./string.js\");\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n */\nconst isBloom = bloom => {\n  if (typeof bloom !== 'string') {\n    return false;\n  }\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  }\n  if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n  return false;\n};\nexports.isBloom = isBloom;\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n */\nconst isInBloom = (bloom, value) => {\n  if (typeof value === 'string' && !(0, string_js_1.isHexStrict)(value)) {\n    return false;\n  }\n  if (!(0, exports.isBloom)(bloom)) {\n    return false;\n  }\n  const uint8Array = typeof value === 'string' ? (0, utils_js_1.hexToUint8Array)(value) : value;\n  const hash = (0, utils_js_1.uint8ArrayToHexString)((0, keccak_js_1.keccak256)(uint8Array)).slice(2);\n  for (let i = 0; i < 12; i += 4) {\n    // calculate bit position in bloom filter that must be active\n    const bitpos =\n    // eslint-disable-next-line no-bitwise\n    (parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16) & 2047;\n    // test if bitpos in bloom is active\n    const code = (0, utils_js_1.codePointToInt)(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\n    // eslint-disable-next-line no-bitwise\n    const offset = 1 << bitpos % 4;\n    // eslint-disable-next-line no-bitwise\n    if ((code & offset) !== offset) {\n      return false;\n    }\n  }\n  return true;\n};\nexports.isInBloom = isInBloom;\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n */\nconst isUserEthereumAddressInBloom = (bloom, ethereumAddress) => {\n  if (!(0, exports.isBloom)(bloom)) {\n    return false;\n  }\n  if (!(0, address_js_1.isAddress)(ethereumAddress)) {\n    return false;\n  }\n  // you have to pad the ethereum address to 32 bytes\n  // else the bloom filter does not work\n  // this is only if your matching the USERS\n  // ethereum address. Contract address do not need this\n  // hence why we have 2 methods\n  // (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n  const address = (0, utils_js_1.padLeft)(ethereumAddress, 64);\n  return (0, exports.isInBloom)(bloom, address);\n};\nexports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n */\nconst isContractAddressInBloom = (bloom, contractAddress) => {\n  if (!(0, exports.isBloom)(bloom)) {\n    return false;\n  }\n  if (!(0, address_js_1.isAddress)(contractAddress)) {\n    return false;\n  }\n  return (0, exports.isInBloom)(bloom, contractAddress);\n};\nexports.isContractAddressInBloom = isContractAddressInBloom;","map":{"version":3,"names":["keccak_js_1","require","utils_js_1","address_js_1","string_js_1","isBloom","bloom","test","exports","isInBloom","value","isHexStrict","uint8Array","hexToUint8Array","hash","uint8ArrayToHexString","keccak256","slice","i","bitpos","parseInt","code","codePointToInt","charCodeAt","length","Math","floor","offset","isUserEthereumAddressInBloom","ethereumAddress","isAddress","address","padLeft","isContractAddressInBloom","contractAddress"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-validator/src/validation/bloom.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { ValidInputTypes } from '../types.js';\nimport { codePointToInt, hexToUint8Array, padLeft, uint8ArrayToHexString } from '../utils.js';\nimport { isAddress } from './address.js';\nimport { isHexStrict } from './string.js';\n\n/**\n * Returns true if the bloom is a valid bloom\n * https://github.com/joshstevens19/ethereum-bloom-filters/blob/fbeb47b70b46243c3963fe1c2988d7461ef17236/src/index.ts#L7\n */\nexport const isBloom = (bloom: ValidInputTypes): boolean => {\n\tif (typeof bloom !== 'string') {\n\t\treturn false;\n\t}\n\n\tif (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Returns true if the value is part of the given bloom\n * note: false positives are possible.\n */\nexport const isInBloom = (bloom: string, value: string | Uint8Array): boolean => {\n\tif (typeof value === 'string' && !isHexStrict(value)) {\n\t\treturn false;\n\t}\n\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tconst uint8Array = typeof value === 'string' ? hexToUint8Array(value) : value;\n\n\tconst hash = uint8ArrayToHexString(keccak256(uint8Array)).slice(2);\n\n\tfor (let i = 0; i < 12; i += 4) {\n\t\t// calculate bit position in bloom filter that must be active\n\t\tconst bitpos =\n\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t((parseInt(hash.slice(i, i + 2), 16) << 8) + parseInt(hash.slice(i + 2, i + 4), 16)) &\n\t\t\t2047;\n\n\t\t// test if bitpos in bloom is active\n\t\tconst code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\n\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst offset = 1 << bitpos % 4;\n\n\t\t// eslint-disable-next-line no-bitwise\n\t\tif ((code & offset) !== offset) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Returns true if the ethereum users address is part of the given bloom note: false positives are possible.\n */\nexport const isUserEthereumAddressInBloom = (bloom: string, ethereumAddress: string): boolean => {\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (!isAddress(ethereumAddress)) {\n\t\treturn false;\n\t}\n\n\t// you have to pad the ethereum address to 32 bytes\n\t// else the bloom filter does not work\n\t// this is only if your matching the USERS\n\t// ethereum address. Contract address do not need this\n\t// hence why we have 2 methods\n\t// (0x is not in the 2nd parameter of padleft so 64 chars is fine)\n\n\tconst address = padLeft(ethereumAddress, 64);\n\n\treturn isInBloom(bloom, address);\n};\n\n/**\n * Returns true if the contract address is part of the given bloom.\n * note: false positives are possible.\n */\nexport const isContractAddressInBloom = (bloom: string, contractAddress: string): boolean => {\n\tif (!isBloom(bloom)) {\n\t\treturn false;\n\t}\n\n\tif (!isAddress(contractAddress)) {\n\t\treturn false;\n\t}\n\n\treturn isInBloom(bloom, contractAddress);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}