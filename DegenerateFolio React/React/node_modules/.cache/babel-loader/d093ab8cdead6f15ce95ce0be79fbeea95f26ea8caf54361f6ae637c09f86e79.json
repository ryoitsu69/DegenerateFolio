{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Address = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst constants_js_1 = require(\"./constants.js\");\nconst utils_js_1 = require(\"../common/utils.js\");\nclass Address {\n  constructor(buf) {\n    if (buf.length !== 20) {\n      throw new Error('Invalid address length');\n    }\n    this.buf = buf;\n  }\n  /**\n   * Returns the zero address.\n   */\n  static zero() {\n    return new Address((0, utils_js_1.zeros)(20));\n  }\n  /**\n   * Is address equal to another.\n   */\n  equals(address) {\n    return (0, web3_utils_1.uint8ArrayEquals)(this.buf, address.buf);\n  }\n  /**\n   * Is address zero.\n   */\n  isZero() {\n    return this.equals(Address.zero());\n  }\n  /**\n   * Returns hex encoding of address.\n   */\n  toString() {\n    return (0, web3_utils_1.bytesToHex)(this.buf);\n  }\n  /**\n   * Returns Uint8Array representation of address.\n   */\n  toArray() {\n    return this.buf;\n  }\n  /**\n   * Returns the ethereum address of a given public key.\n   * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n   * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n   * @param sanitize Accept public keys in other formats\n   */\n  static publicToAddress(_pubKey, sanitize = false) {\n    let pubKey = _pubKey;\n    (0, utils_js_1.assertIsUint8Array)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n      pubKey = constants_js_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n      throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return (0, keccak_js_1.keccak256)(pubKey).slice(-20);\n  }\n}\nexports.Address = Address;","map":{"version":3,"names":["keccak_js_1","require","web3_utils_1","constants_js_1","utils_js_1","Address","constructor","buf","length","Error","zero","zeros","equals","address","uint8ArrayEquals","isZero","toString","bytesToHex","toArray","publicToAddress","_pubKey","sanitize","pubKey","assertIsUint8Array","secp256k1","ProjectivePoint","fromHex","toRawBytes","slice","keccak256","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-accounts/src/tx/address.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex, uint8ArrayEquals } from 'web3-utils';\nimport { secp256k1 } from './constants.js';\nimport { assertIsUint8Array, zeros } from '../common/utils.js';\n\nexport class Address {\n\tpublic readonly buf: Uint8Array;\n\n\tpublic constructor(buf: Uint8Array) {\n\t\tif (buf.length !== 20) {\n\t\t\tthrow new Error('Invalid address length');\n\t\t}\n\t\tthis.buf = buf;\n\t}\n\n\t/**\n\t * Returns the zero address.\n\t */\n\tpublic static zero(): Address {\n\t\treturn new Address(zeros(20));\n\t}\n\n\t/**\n\t * Is address equal to another.\n\t */\n\tpublic equals(address: Address): boolean {\n\t\treturn uint8ArrayEquals(this.buf, address.buf);\n\t}\n\n\t/**\n\t * Is address zero.\n\t */\n\tpublic isZero(): boolean {\n\t\treturn this.equals(Address.zero());\n\t}\n\n\t/**\n\t * Returns hex encoding of address.\n\t */\n\tpublic toString(): string {\n\t\treturn bytesToHex(this.buf);\n\t}\n\n\t/**\n\t * Returns Uint8Array representation of address.\n\t */\n\tpublic toArray(): Uint8Array {\n\t\treturn this.buf;\n\t}\n\n\t/**\n\t * Returns the ethereum address of a given public key.\n\t * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n\t * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n\t * @param sanitize Accept public keys in other formats\n\t */\n\tpublic static publicToAddress(_pubKey: Uint8Array, sanitize = false): Uint8Array {\n\t\tlet pubKey = _pubKey;\n\t\tassertIsUint8Array(pubKey);\n\t\tif (sanitize && pubKey.length !== 64) {\n\t\t\tpubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n\t\t}\n\t\tif (pubKey.length !== 64) {\n\t\t\tthrow new Error('Expected pubKey to be of length 64');\n\t\t}\n\t\t// Only take the lower 160bits of the hash\n\t\treturn keccak256(pubKey).slice(-20);\n\t}\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,cAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AAEA,MAAaI,OAAO;EAGnBC,YAAmBC,GAAe;IACjC,IAAIA,GAAG,CAACC,MAAM,KAAK,EAAE,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;;IAE1C,IAAI,CAACF,GAAG,GAAGA,GAAG;EACf;EAEA;;;EAGO,OAAOG,IAAIA,CAAA;IACjB,OAAO,IAAIL,OAAO,CAAC,IAAAD,UAAA,CAAAO,KAAK,EAAC,EAAE,CAAC,CAAC;EAC9B;EAEA;;;EAGOC,MAAMA,CAACC,OAAgB;IAC7B,OAAO,IAAAX,YAAA,CAAAY,gBAAgB,EAAC,IAAI,CAACP,GAAG,EAAEM,OAAO,CAACN,GAAG,CAAC;EAC/C;EAEA;;;EAGOQ,MAAMA,CAAA;IACZ,OAAO,IAAI,CAACH,MAAM,CAACP,OAAO,CAACK,IAAI,EAAE,CAAC;EACnC;EAEA;;;EAGOM,QAAQA,CAAA;IACd,OAAO,IAAAd,YAAA,CAAAe,UAAU,EAAC,IAAI,CAACV,GAAG,CAAC;EAC5B;EAEA;;;EAGOW,OAAOA,CAAA;IACb,OAAO,IAAI,CAACX,GAAG;EAChB;EAEA;;;;;;EAMO,OAAOY,eAAeA,CAACC,OAAmB,EAAEC,QAAQ,GAAG,KAAK;IAClE,IAAIC,MAAM,GAAGF,OAAO;IACpB,IAAAhB,UAAA,CAAAmB,kBAAkB,EAACD,MAAM,CAAC;IAC1B,IAAID,QAAQ,IAAIC,MAAM,CAACd,MAAM,KAAK,EAAE,EAAE;MACrCc,MAAM,GAAGnB,cAAA,CAAAqB,SAAS,CAACC,eAAe,CAACC,OAAO,CAACJ,MAAM,CAAC,CAACK,UAAU,CAAC,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;;IAE9E,IAAIN,MAAM,CAACd,MAAM,KAAK,EAAE,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;;IAEtD;IACA,OAAO,IAAAT,WAAA,CAAA6B,SAAS,EAACP,MAAM,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC;EACpC;;AA9DDE,OAAA,CAAAzB,OAAA,GAAAA,OAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}