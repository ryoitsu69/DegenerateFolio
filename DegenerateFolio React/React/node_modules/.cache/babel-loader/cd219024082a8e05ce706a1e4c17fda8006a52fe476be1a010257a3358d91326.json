{"ast":null,"code":"import { groupD8 } from '../../../../maths/matrix/groupD8.mjs';\n\"use strict\";\nclass TextureUvs {\n  constructor() {\n    this.x0 = 0;\n    this.y0 = 0;\n    this.x1 = 1;\n    this.y1 = 0;\n    this.x2 = 1;\n    this.y2 = 1;\n    this.x3 = 0;\n    this.y3 = 1;\n    this.uvsFloat32 = new Float32Array(8);\n  }\n  /**\n   * Sets the texture Uvs based on the given frame information.\n   * @protected\n   * @param frame - The frame of the texture\n   * @param baseFrame - The base frame of the texture\n   * @param rotate - Rotation of frame, see {@link groupD8}\n   */\n  set(frame, baseFrame, rotate) {\n    const tw = baseFrame.width;\n    const th = baseFrame.height;\n    if (rotate) {\n      const w2 = frame.width / 2 / tw;\n      const h2 = frame.height / 2 / th;\n      const cX = frame.x / tw + w2;\n      const cY = frame.y / th + h2;\n      rotate = groupD8.add(rotate, groupD8.NW);\n      this.x0 = cX + w2 * groupD8.uX(rotate);\n      this.y0 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      this.x1 = cX + w2 * groupD8.uX(rotate);\n      this.y1 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      this.x2 = cX + w2 * groupD8.uX(rotate);\n      this.y2 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      this.x3 = cX + w2 * groupD8.uX(rotate);\n      this.y3 = cY + h2 * groupD8.uY(rotate);\n    } else {\n      this.x0 = frame.x / tw;\n      this.y0 = frame.y / th;\n      this.x1 = (frame.x + frame.width) / tw;\n      this.y1 = frame.y / th;\n      this.x2 = (frame.x + frame.width) / tw;\n      this.y2 = (frame.y + frame.height) / th;\n      this.x3 = frame.x / tw;\n      this.y3 = (frame.y + frame.height) / th;\n    }\n    this.uvsFloat32[0] = this.x0;\n    this.uvsFloat32[1] = this.y0;\n    this.uvsFloat32[2] = this.x1;\n    this.uvsFloat32[3] = this.y1;\n    this.uvsFloat32[4] = this.x2;\n    this.uvsFloat32[5] = this.y2;\n    this.uvsFloat32[6] = this.x3;\n    this.uvsFloat32[7] = this.y3;\n  }\n  toString() {\n    return `[pixi.js/core:TextureUvs x0=${this.x0} y0=${this.y0} x1=${this.x1} y1=${this.y1} x2=${this.x2} y2=${this.y2} x3=${this.x3} y3=${this.y3}]`;\n  }\n}\nexport { TextureUvs };","map":{"version":3,"names":["TextureUvs","constructor","x0","y0","x1","y1","x2","y2","x3","y3","uvsFloat32","Float32Array","set","frame","baseFrame","rotate","tw","width","th","height","w2","h2","cX","x","cY","y","groupD8","add","NW","uX","uY","toString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureUvs.ts"],"sourcesContent":["import { groupD8 } from '../../../../maths/matrix/groupD8';\n\nimport type { Size } from '../../../../maths/misc/Size';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\n\n/**\n * Stores a texture's frame in UV coordinates, in\n * which everything lies in the rectangle `[(0,0), (1,0),\n * (1,1), (0,1)]`.\n *\n * | Corner       | Coordinates |\n * |--------------|-------------|\n * | Top-Left     | `(x0,y0)`   |\n * | Top-Right    | `(x1,y1)`   |\n * | Bottom-Right | `(x2,y2)`   |\n * | Bottom-Left  | `(x3,y3)`   |\n * @protected\n * @memberof rendering\n */\nexport class TextureUvs\n{\n    /** X-component of top-left corner `(x0,y0)`. */\n    public x0: number;\n\n    /** Y-component of top-left corner `(x0,y0)`. */\n    public y0: number;\n\n    /** X-component of top-right corner `(x1,y1)`. */\n    public x1: number;\n\n    /** Y-component of top-right corner `(x1,y1)`. */\n    public y1: number;\n\n    /** X-component of bottom-right corner `(x2,y2)`. */\n    public x2: number;\n\n    /** Y-component of bottom-right corner `(x2,y2)`. */\n    public y2: number;\n\n    /** X-component of bottom-left corner `(x3,y3)`. */\n    public x3: number;\n\n    /** Y-component of bottom-right corner `(x3,y3)`. */\n    public y3: number;\n    public uvsFloat32: Float32Array;\n\n    constructor()\n    {\n        this.x0 = 0;\n        this.y0 = 0;\n        this.x1 = 1;\n        this.y1 = 0;\n        this.x2 = 1;\n        this.y2 = 1;\n        this.x3 = 0;\n        this.y3 = 1;\n\n        this.uvsFloat32 = new Float32Array(8);\n    }\n\n    /**\n     * Sets the texture Uvs based on the given frame information.\n     * @protected\n     * @param frame - The frame of the texture\n     * @param baseFrame - The base frame of the texture\n     * @param rotate - Rotation of frame, see {@link groupD8}\n     */\n    public set(frame: Rectangle, baseFrame: Size, rotate: number): void\n    {\n        const tw = baseFrame.width;\n        const th = baseFrame.height;\n\n        if (rotate)\n        {\n            // width and height div 2 div baseFrame size\n            const w2 = frame.width / 2 / tw;\n            const h2 = frame.height / 2 / th;\n\n            // coordinates of center\n            const cX = (frame.x / tw) + w2;\n            const cY = (frame.y / th) + h2;\n\n            rotate = groupD8.add(rotate, groupD8.NW); // NW is top-left corner\n            this.x0 = cX + (w2 * groupD8.uX(rotate));\n            this.y0 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n            this.x1 = cX + (w2 * groupD8.uX(rotate));\n            this.y1 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x2 = cX + (w2 * groupD8.uX(rotate));\n            this.y2 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x3 = cX + (w2 * groupD8.uX(rotate));\n            this.y3 = cY + (h2 * groupD8.uY(rotate));\n        }\n        else\n        {\n            this.x0 = frame.x / tw;\n            this.y0 = frame.y / th;\n\n            this.x1 = (frame.x + frame.width) / tw;\n            this.y1 = frame.y / th;\n\n            this.x2 = (frame.x + frame.width) / tw;\n            this.y2 = (frame.y + frame.height) / th;\n\n            this.x3 = frame.x / tw;\n            this.y3 = (frame.y + frame.height) / th;\n        }\n\n        this.uvsFloat32[0] = this.x0;\n        this.uvsFloat32[1] = this.y0;\n        this.uvsFloat32[2] = this.x1;\n        this.uvsFloat32[3] = this.y1;\n        this.uvsFloat32[4] = this.x2;\n        this.uvsFloat32[5] = this.y2;\n        this.uvsFloat32[6] = this.x3;\n        this.uvsFloat32[7] = this.y3;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:TextureUvs `\n            + `x0=${this.x0} y0=${this.y0} `\n            + `x1=${this.x1} y1=${this.y1} x2=${this.x2} `\n            + `y2=${this.y2} x3=${this.x3} y3=${this.y3}`\n            + `]`;\n    }\n    // #endif\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}