{"ast":null,"code":"import { hasBigInt, u8aToU8a } from '@polkadot/util';\nimport { isReady, twox } from '@polkadot/wasm-crypto';\nimport { createAsHex } from '../helpers.js';\nimport { xxhash64 } from './xxhash64.js';\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { xxhashAsU8a } from '@polkadot/util-crypto';\n *\n * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999\n * ```\n */\nexport function xxhashAsU8a(data) {\n  let bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n  let onlyJs = arguments.length > 2 ? arguments[2] : undefined;\n  const rounds = Math.ceil(bitLength / 64);\n  const u8a = u8aToU8a(data);\n  if (!hasBigInt || !onlyJs && isReady()) {\n    return twox(u8a, rounds);\n  }\n  const result = new Uint8Array(rounds * 8);\n  for (let seed = 0; seed < rounds; seed++) {\n    result.set(xxhash64(u8a, seed).reverse(), seed * 8);\n  }\n  return result;\n}\n/**\n * @name xxhashAsHex\n * @description Creates a xxhash64 hex from the input.\n */\nexport const xxhashAsHex = /*#__PURE__*/createAsHex(xxhashAsU8a);","map":{"version":3,"names":["hasBigInt","u8aToU8a","isReady","twox","createAsHex","xxhash64","xxhashAsU8a","data","bitLength","arguments","length","undefined","onlyJs","rounds","Math","ceil","u8a","result","Uint8Array","seed","set","reverse","xxhashAsHex"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/xxhash/asU8a.js"],"sourcesContent":["import { hasBigInt, u8aToU8a } from '@polkadot/util';\nimport { isReady, twox } from '@polkadot/wasm-crypto';\nimport { createAsHex } from '../helpers.js';\nimport { xxhash64 } from './xxhash64.js';\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { xxhashAsU8a } from '@polkadot/util-crypto';\n *\n * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999\n * ```\n */\nexport function xxhashAsU8a(data, bitLength = 64, onlyJs) {\n    const rounds = Math.ceil(bitLength / 64);\n    const u8a = u8aToU8a(data);\n    if (!hasBigInt || (!onlyJs && isReady())) {\n        return twox(u8a, rounds);\n    }\n    const result = new Uint8Array(rounds * 8);\n    for (let seed = 0; seed < rounds; seed++) {\n        result.set(xxhash64(u8a, seed).reverse(), seed * 8);\n    }\n    return result;\n}\n/**\n * @name xxhashAsHex\n * @description Creates a xxhash64 hex from the input.\n */\nexport const xxhashAsHex = /*#__PURE__*/ createAsHex(xxhashAsU8a);\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,gBAAgB;AACpD,SAASC,OAAO,EAAEC,IAAI,QAAQ,uBAAuB;AACrD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,QAAQ,QAAQ,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAA0B;EAAA,IAAxBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACpD,MAAME,MAAM,GAAGC,IAAI,CAACC,IAAI,CAACP,SAAS,GAAG,EAAE,CAAC;EACxC,MAAMQ,GAAG,GAAGf,QAAQ,CAACM,IAAI,CAAC;EAC1B,IAAI,CAACP,SAAS,IAAK,CAACY,MAAM,IAAIV,OAAO,CAAC,CAAE,EAAE;IACtC,OAAOC,IAAI,CAACa,GAAG,EAAEH,MAAM,CAAC;EAC5B;EACA,MAAMI,MAAM,GAAG,IAAIC,UAAU,CAACL,MAAM,GAAG,CAAC,CAAC;EACzC,KAAK,IAAIM,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGN,MAAM,EAAEM,IAAI,EAAE,EAAE;IACtCF,MAAM,CAACG,GAAG,CAACf,QAAQ,CAACW,GAAG,EAAEG,IAAI,CAAC,CAACE,OAAO,CAAC,CAAC,EAAEF,IAAI,GAAG,CAAC,CAAC;EACvD;EACA,OAAOF,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,WAAW,GAAG,aAAclB,WAAW,CAACE,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}