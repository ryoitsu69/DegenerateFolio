{"ast":null,"code":"import { mixHexColors } from './mixHexColors.mjs';\n\"use strict\";\nconst WHITE_BGR = 16777215;\nfunction mixColors(localBGRColor, parentBGRColor) {\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    return localBGRColor + parentBGRColor - WHITE_BGR;\n  }\n  return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\nfunction mixStandardAnd32BitColors(localColorRGB, localAlpha, parentColor) {\n  const parentAlpha = (parentColor >> 24 & 255) / 255;\n  const globalAlpha = localAlpha * parentAlpha * 255;\n  const localBGRColor = ((localColorRGB & 255) << 16) + (localColorRGB & 65280) + (localColorRGB >> 16 & 255);\n  const parentBGRColor = parentColor & 16777215;\n  let sharedBGRColor;\n  if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR) {\n    sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n  } else {\n    sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n  }\n  return sharedBGRColor + (globalAlpha << 24);\n}\nexport { mixColors, mixStandardAnd32BitColors };","map":{"version":3,"names":["WHITE_BGR","mixColors","localBGRColor","parentBGRColor","mixHexColors","mixStandardAnd32BitColors","localColorRGB","localAlpha","parentColor","parentAlpha","globalAlpha","sharedBGRColor"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/container/utils/mixColors.ts"],"sourcesContent":["import { mixHexColors } from './mixHexColors';\n\nconst WHITE_BGR = 0xFFFFFF;\n\nexport function mixColors(localBGRColor: number, parentBGRColor: number)\n{\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        return localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n\n    return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\n\nexport function mixStandardAnd32BitColors(localColorRGB: number, localAlpha: number, parentColor: number)\n{\n    const parentAlpha = ((parentColor >> 24) & 0xFF) / 255;\n\n    const globalAlpha = ((localAlpha * parentAlpha) * 255);\n\n    // flip rgb to bgr\n    const localBGRColor = ((localColorRGB & 0xFF) << 16) + (localColorRGB & 0xFF00) + ((localColorRGB >> 16) & 0xFF);\n\n    const parentBGRColor = parentColor & 0x00FFFFFF;\n\n    let sharedBGRColor: number;\n\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n    else\n    {\n        sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n    }\n\n    return sharedBGRColor + (globalAlpha << 24);\n}\n"],"mappings":";;AAEA,MAAMA,SAAY;AAEF,SAAAC,UAAUC,aAAA,EAAuBC,cACjD;EACQ,IAAAD,aAAA,KAAkBF,SAAa,IAAAG,cAAA,KAAmBH,SACtD;IACI,OAAOE,aAAA,GAAgBC,cAAiB,GAAAH,SAAA;EAAA;EAGrC,OAAAI,YAAA,CAAaF,aAAe,EAAAC,cAAA,EAAgB,GAAG;AAC1D;AAEgB,SAAAE,0BAA0BC,aAAuB,EAAAC,UAAA,EAAoBC,WACrF;EACU,MAAAC,WAAA,IAAgBD,WAAe,SAAM,GAAQ;EAE7C,MAAAE,WAAA,GAAgBH,UAAA,GAAaE,WAAe;EAGlD,MAAMP,aAAA,KAAkBI,aAAgB,WAAS,OAAOA,aAAgB,aAAYA,aAAA,IAAiB,EAAM;EAE3G,MAAMH,cAAA,GAAiBK,WAAc;EAEjC,IAAAG,cAAA;EAEA,IAAAT,aAAA,KAAkBF,SAAa,IAAAG,cAAA,KAAmBH,SACtD;IACIW,cAAA,GAAiBT,aAAA,GAAgBC,cAAiB,GAAAH,SAAA;EAAA,CAGtD;IACqBW,cAAA,GAAAP,YAAA,CAAaF,aAAe,EAAAC,cAAA,EAAgB,GAAG;EAAA;EAGpE,OAAOQ,cAAA,IAAkBD,WAAe;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}