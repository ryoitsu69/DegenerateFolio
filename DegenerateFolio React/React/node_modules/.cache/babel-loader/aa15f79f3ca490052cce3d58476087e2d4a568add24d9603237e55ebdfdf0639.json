{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCreateAccessListParams = exports.isWeb3ContractContext = exports.getEstimateGasParams = exports.getEthTxCallParams = exports.getSendTxParams = void 0;\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst encoding_js_1 = require(\"./encoding.js\");\nconst dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill) => {\n  var _a, _b;\n  const tx = {};\n  if (!(0, web3_utils_1.isNullish)(txParams.data) || dataInputFill === 'both') {\n    tx.data = (0, encoding_js_1.encodeMethodABI)(abi, params, (_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input);\n  }\n  if (!(0, web3_utils_1.isNullish)(txParams.input) || dataInputFill === 'both') {\n    tx.input = (0, encoding_js_1.encodeMethodABI)(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);\n  }\n  // if input and data is empty, use web3config default\n  if ((0, web3_utils_1.isNullish)(tx.input) && (0, web3_utils_1.isNullish)(tx.data)) {\n    tx[dataInputFill] = (0, encoding_js_1.encodeMethodABI)(abi, params);\n  }\n  return {\n    data: tx.data,\n    input: tx.input\n  };\n};\nconst getSendTxParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  var _a, _b, _c;\n  const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;\n  if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new web3_errors_1.Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new web3_errors_1.Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexports.getSendTxParams = getSendTxParams;\nconst getEthTxCallParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new web3_errors_1.Web3ContractError('Contract address not specified');\n  }\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexports.getEthTxCallParams = getEthTxCallParams;\nconst getEstimateGasParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexports.getEstimateGasParams = getEstimateGasParams;\nconst isWeb3ContractContext = options => typeof options === 'object' && !(0, web3_utils_1.isNullish)(options) && Object.keys(options).length !== 0 && !(0, web3_utils_1.isContractInitOptions)(options);\nexports.isWeb3ContractContext = isWeb3ContractContext;\nconst getCreateAccessListParams = ({\n  abi,\n  params,\n  options,\n  contractOptions\n}) => {\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new web3_errors_1.Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new web3_errors_1.Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = (0, web3_utils_1.mergeDeep)({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexports.getCreateAccessListParams = getCreateAccessListParams;","map":{"version":3,"names":["web3_errors_1","require","web3_utils_1","encoding_js_1","dataInputEncodeMethodHelper","txParams","abi","params","dataInputFill","tx","isNullish","data","encodeMethodABI","_a","input","_b","getSendTxParams","options","contractOptions","deploymentCall","_c","to","address","Web3ContractError","from","mergeDeep","gas","gasPrice","maxPriorityFeePerGas","maxFeePerGas","dataInput","Object","assign","exports","getEthTxCallParams","getEstimateGasParams","isWeb3ContractContext","keys","length","isContractInitOptions","getCreateAccessListParams"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-contract/src/utils.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContractError } from 'web3-errors';\nimport {\n\tTransactionForAccessList,\n\tAbiFunctionFragment,\n\tTransactionWithSenderAPI,\n\tTransactionCall,\n\tHexString,\n\tAddress,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tContractOptions,\n} from 'web3-types';\nimport { isNullish, mergeDeep, isContractInitOptions } from 'web3-utils';\nimport { encodeMethodABI } from './encoding.js';\nimport { Web3ContractContext } from './types.js';\n\nconst dataInputEncodeMethodHelper = (\n\ttxParams: TransactionCall | TransactionForAccessList,\n\tabi: AbiFunctionFragment,\n\tparams: unknown[],\n\tdataInputFill?: 'data' | 'input' | 'both',\n): { data?: HexString; input?: HexString } => {\n\tconst tx: { data?: HexString; input?: HexString } = {};\n\tif (!isNullish(txParams.data) || dataInputFill === 'both') {\n\t\ttx.data = encodeMethodABI(abi, params, (txParams.data ?? txParams.input) as HexString);\n\t}\n\tif (!isNullish(txParams.input) || dataInputFill === 'both') {\n\t\ttx.input = encodeMethodABI(abi, params, (txParams.input ?? txParams.data) as HexString);\n\t}\n\t// if input and data is empty, use web3config default\n\tif (isNullish(tx.input) && isNullish(tx.data)) {\n\t\ttx[dataInputFill as 'data' | 'input'] = encodeMethodABI(abi, params);\n\t}\n\treturn { data: tx.data as HexString, input: tx.input as HexString };\n};\n\nexport const getSendTxParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tinput?: HexString;\n\t\tdata?: HexString;\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tconst deploymentCall =\n\t\toptions?.input ?? options?.data ?? contractOptions.input ?? contractOptions.data;\n\tif (!deploymentCall && !options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n\nexport const getEthTxCallParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n\nexport const getEstimateGasParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): Partial<TransactionWithSenderAPI> => {\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams as TransactionWithSenderAPI;\n};\n\nexport const isWeb3ContractContext = (options: unknown): options is Web3ContractContext =>\n\ttypeof options === 'object' &&\n\t!isNullish(options) &&\n\tObject.keys(options).length !== 0 &&\n\t!isContractInitOptions(options);\n\nexport const getCreateAccessListParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionForAccessList => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionForAccessList;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}