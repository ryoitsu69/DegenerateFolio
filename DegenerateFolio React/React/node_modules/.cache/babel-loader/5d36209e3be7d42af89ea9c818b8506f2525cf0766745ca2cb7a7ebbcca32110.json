{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AccessListEIP2930Transaction = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst constants_js_1 = require(\"./constants.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst utils_js_2 = require(\"../common/utils.js\");\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_UINT8ARRAY = (0, web3_utils_1.hexToBytes)(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n// eslint-disable-next-line no-use-before-define\nclass AccessListEIP2930Transaction extends baseTransaction_js_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    var _a;\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = 'berlin';\n    const {\n      chainId,\n      accessList,\n      gasPrice\n    } = txData;\n    this.common = this._getCommon(opts.common, chainId);\n    this.chainId = this.common.chainId();\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n    // Populate the access list fields\n    const accessListData = (0, utils_js_1.getAccessListData)(accessList !== null && accessList !== void 0 ? accessList : []);\n    this.accessList = accessListData.accessList;\n    this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    (0, utils_js_1.verifyAccessList)(this.accessList);\n    this.gasPrice = (0, utils_js_2.uint8ArrayToBigInt)((0, utils_js_2.toUint8Array)(gasPrice === '' ? '0x' : gasPrice));\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n    if (this.gasPrice * this.gasLimit > constants_js_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n      throw new Error(msg);\n    }\n    this._validateYParity();\n    this._validateHighS();\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  static fromTxData(txData, opts = {}) {\n    return new AccessListEIP2930Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  static fromSerializedTx(serialized, opts = {}) {\n    if (!(0, web3_utils_1.uint8ArrayEquals)(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n      throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${(0, web3_utils_1.bytesToHex)(serialized.subarray(0, 1))}`);\n    }\n    const values = rlp_1.RLP.decode(Uint8Array.from(serialized.subarray(1)));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  static fromValuesArray(values, opts = {}) {\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n    }\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n    this._validateNotArray({\n      chainId,\n      v\n    });\n    (0, web3_validator_1.validateNoLeadingZeroes)({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    const emptyAccessList = [];\n    return new AccessListEIP2930Transaction({\n      chainId: (0, utils_js_2.uint8ArrayToBigInt)(chainId),\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n      v: v !== undefined ? (0, utils_js_2.uint8ArrayToBigInt)(v) : undefined,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    let cost = super.getDataFee();\n    cost += BigInt((0, utils_js_1.getDataFeeEIP2930)(this.accessList, this.common));\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork()\n      };\n    }\n    return cost;\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty UINT8ARRAY values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  raw() {\n    return [(0, utils_js_2.bigIntToUnpaddedUint8Array)(this.chainId), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.nonce), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.gasPrice), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.value), this.data, this.accessList, this.v !== undefined ? (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]), this.r !== undefined ? (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]), this.s !== undefined ? (0, utils_js_2.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize() {\n    const base = this.raw();\n    return (0, web3_utils_1.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, rlp_1.RLP.encode(base));\n  }\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true) {\n    const base = this.raw().slice(0, 8);\n    const message = (0, web3_utils_1.uint8ArrayConcat)(TRANSACTION_TYPE_UINT8ARRAY, rlp_1.RLP.encode(base));\n    if (hashMessage) {\n      return (0, keccak_js_1.keccak256)(message);\n    }\n    return message;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, keccak_js_1.keccak256)(this.serialize());\n      }\n      return this.cache.hash;\n    }\n    return (0, keccak_js_1.keccak256)(this.serialize());\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    return this.getMessageToSign();\n  }\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n      throw new Error(msg);\n    }\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return (0, utils_js_2.ecrecover)(msgHash, v + BigInt(27),\n      // Recover the 27 which was stripped from ecsign\n      (0, utils_js_2.bigIntToUnpaddedUint8Array)(r), (0, utils_js_2.bigIntToUnpaddedUint8Array)(s));\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  _processSignature(v, r, s) {\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return AccessListEIP2930Transaction.fromTxData({\n      chainId: this.chainId,\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      accessList: this.accessList,\n      v: v - BigInt(27),\n      r: (0, utils_js_2.uint8ArrayToBigInt)(r),\n      s: (0, utils_js_2.uint8ArrayToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON() {\n    const accessListJSON = (0, utils_js_1.getAccessListJSON)(this.accessList);\n    return {\n      chainId: (0, utils_js_2.bigIntToHex)(this.chainId),\n      nonce: (0, utils_js_2.bigIntToHex)(this.nonce),\n      gasPrice: (0, utils_js_2.bigIntToHex)(this.gasPrice),\n      gasLimit: (0, utils_js_2.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, utils_js_2.bigIntToHex)(this.value),\n      data: (0, web3_utils_1.bytesToHex)(this.data),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? (0, utils_js_2.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, utils_js_2.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, utils_js_2.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n  errorStr() {\n    var _a, _b;\n    let errorStr = this._getSharedErrorPostfix();\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}\nexports.AccessListEIP2930Transaction = AccessListEIP2930Transaction;","map":{"version":3,"names":["keccak_js_1","require","web3_validator_1","rlp_1","web3_utils_1","constants_js_1","utils_js_1","utils_js_2","baseTransaction_js_1","TRANSACTION_TYPE","TRANSACTION_TYPE_UINT8ARRAY","hexToBytes","toString","padStart","AccessListEIP2930Transaction","BaseTransaction","constructor","txData","opts","Object","assign","type","DEFAULT_HARDFORK","chainId","accessList","gasPrice","common","_getCommon","isActivatedEIP","Error","activeCapabilities","concat","accessListData","getAccessListData","AccessListJSON","verifyAccessList","uint8ArrayToBigInt","toUint8Array","_validateCannotExceedMaxInteger","_validateNotArray","gasLimit","MAX_INTEGER","msg","_errorMsg","_validateYParity","_validateHighS","freeze","_a","fromTxData","fromSerializedTx","serialized","uint8ArrayEquals","subarray","bytesToHex","values","RLP","decode","Uint8Array","from","Array","isArray","fromValuesArray","length","nonce","to","value","data","v","r","s","validateNoLeadingZeroes","emptyAccessList","undefined","getDataFee","cache","dataFee","hardfork","cost","BigInt","getDataFeeEIP2930","isFrozen","getUpfrontCost","raw","bigIntToUnpaddedUint8Array","buf","serialize","base","uint8ArrayConcat","encode","getMessageToSign","hashMessage","slice","message","keccak256","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","ecrecover","e","_processSignature","txOptions","toJSON","accessListJSON","getAccessListJSON","bigIntToHex","errorStr","_getSharedErrorPostfix","_b","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-accounts/src/tx/eip2930Transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport {\n\tgetAccessListData,\n\tverifyAccessList,\n\tgetAccessListJSON,\n\tgetDataFeeEIP2930,\n} from './utils.js';\nimport {\n\tbigIntToHex,\n\ttoUint8Array,\n\tecrecover,\n\tuint8ArrayToBigInt,\n\tbigIntToUnpaddedUint8Array,\n} from '../common/utils.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport type {\n\tAccessList,\n\tAccessListUint8Array,\n\tAccessListEIP2930TxData,\n\tAccessListEIP2930ValuesArray,\n\tJsonTx,\n\tTxOptions,\n} from './types.js';\nimport type { Common } from '../common/common.js';\n\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n// eslint-disable-next-line no-use-before-define\nexport class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\n\tpublic readonly chainId: bigint;\n\tpublic readonly accessList: AccessListUint8Array;\n\tpublic readonly AccessListJSON: AccessList;\n\tpublic readonly gasPrice: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK = 'berlin';\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * v, r, s }\n\t *\n\t * Notes:\n\t * - `chainId` will be set automatically if not provided\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n\t\treturn new AccessListEIP2930Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tif (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(\n\t\t\t\t\tserialized.subarray(0, 1),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t\tconst values = RLP.decode(Uint8Array.from(serialized.subarray(1)));\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input: must be array');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn AccessListEIP2930Transaction.fromValuesArray(values as any, opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\n\t */\n\tpublic static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\n\t\tif (values.length !== 8 && values.length !== 11) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n\n\t\tthis._validateNotArray({ chainId, v });\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\n\n\t\tconst emptyAccessList: AccessList = [];\n\n\t\treturn new AccessListEIP2930Transaction(\n\t\t\t{\n\t\t\t\tchainId: uint8ArrayToBigInt(chainId),\n\t\t\t\tnonce,\n\t\t\t\tgasPrice,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\taccessList: accessList ?? emptyAccessList,\n\t\t\t\tv: v !== undefined ? uint8ArrayToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\t\tconst { chainId, accessList, gasPrice } = txData;\n\n\t\tthis.common = this._getCommon(opts.common, chainId);\n\t\tthis.chainId = this.common.chainId();\n\n\t\t// EIP-2718 check is done in Common\n\t\tif (!this.common.isActivatedEIP(2930)) {\n\t\t\tthrow new Error('EIP-2930 not enabled on Common');\n\t\t}\n\t\tthis.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n\n\t\t// Populate the access list fields\n\t\tconst accessListData = getAccessListData(accessList ?? []);\n\t\tthis.accessList = accessListData.accessList;\n\t\tthis.AccessListJSON = accessListData.AccessListJSON;\n\t\t// Verify the access list format.\n\t\tverifyAccessList(this.accessList);\n\n\t\tthis.gasPrice = uint8ArrayToBigInt(toUint8Array(gasPrice === '' ? '0x' : gasPrice));\n\n\t\tthis._validateCannotExceedMaxInteger({\n\t\t\tgasPrice: this.gasPrice,\n\t\t});\n\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tthis._validateYParity();\n\t\tthis._validateHighS();\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tlet cost = super.getDataFee();\n\t\tcost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: cost,\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic getUpfrontCost(): bigint {\n\t\treturn this.gasLimit * this.gasPrice + this.value;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\n\t *\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\n\t *\n\t * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty UINT8ARRAY values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): AccessListEIP2930ValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.chainId),\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.accessList,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the EIP-2930 transaction.\n\t *\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\n\t *\n\t * Note that in contrast to the legacy tx serialization format this is not\n\t * valid RLP any more due to the raw tx type preceding and concatenated to\n\t * the RLP encoding of the values.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\tconst base = this.raw();\n\t\treturn uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t}\n\n\t/**\n\t * Returns the serialized unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: in contrast to the legacy tx the raw message format is already\n\t * serialized and doesn't need to be RLP encoded any more.\n\t *\n\t * ```javascript\n\t * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage = true): Uint8Array {\n\t\tconst base = this.raw().slice(0, 8);\n\t\tconst message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(message);\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(this.serialize());\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(this.serialize());\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature(): Uint8Array {\n\t\treturn this.getMessageToSign();\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv! + BigInt(27), // Recover the 27 which was stripped from ecsign\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\tpublic _processSignature(v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tchainId: this.chainId,\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tgasPrice: this.gasPrice,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\taccessList: this.accessList,\n\t\t\t\tv: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic toJSON(): JsonTx {\n\t\tconst accessListJSON = getAccessListJSON(this.accessList);\n\n\t\treturn {\n\t\t\tchainId: bigIntToHex(this.chainId),\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\taccessList: accessListJSON,\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\t// Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n\t\terrorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,gBAAA,GAAAD,OAAA;AACA,MAAAE,KAAA,GAAAF,OAAA;AACA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,cAAA,GAAAJ,OAAA;AACA,MAAAK,UAAA,GAAAL,OAAA;AAMA,MAAAM,UAAA,GAAAN,OAAA;AAOA,MAAAO,oBAAA,GAAAP,OAAA;AAWA,MAAMQ,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,2BAA2B,GAAG,IAAAN,YAAA,CAAAO,UAAU,EAACF,gBAAgB,CAACG,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAE9F;;;;;;AAMA;AACA,MAAaC,4BAA6B,SAAQN,oBAAA,CAAAO,eAA6C;EA2F9F;;;;;;;EAOAC,YAAmBC,MAA+B,EAAEC,IAAA,GAAkB,EAAE;;IACvE,KAAK,CAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAMH,MAAM;MAAEI,IAAI,EAAEZ;IAAgB,IAAIS,IAAI,CAAC;IA3FnD;;;;;;IAMU,KAAAI,gBAAgB,GAAG,QAAQ;IAsFpC,MAAM;MAAEC,OAAO;MAAEC,UAAU;MAAEC;IAAQ,CAAE,GAAGR,MAAM;IAEhD,IAAI,CAACS,MAAM,GAAG,IAAI,CAACC,UAAU,CAACT,IAAI,CAACQ,MAAM,EAAEH,OAAO,CAAC;IACnD,IAAI,CAACA,OAAO,GAAG,IAAI,CAACG,MAAM,CAACH,OAAO,EAAE;IAEpC;IACA,IAAI,CAAC,IAAI,CAACG,MAAM,CAACE,cAAc,CAAC,IAAI,CAAC,EAAE;MACtC,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;;IAElD,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAEtE;IACA,MAAMC,cAAc,GAAG,IAAA1B,UAAA,CAAA2B,iBAAiB,EAACT,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI,EAAE,CAAC;IAC1D,IAAI,CAACA,UAAU,GAAGQ,cAAc,CAACR,UAAU;IAC3C,IAAI,CAACU,cAAc,GAAGF,cAAc,CAACE,cAAc;IACnD;IACA,IAAA5B,UAAA,CAAA6B,gBAAgB,EAAC,IAAI,CAACX,UAAU,CAAC;IAEjC,IAAI,CAACC,QAAQ,GAAG,IAAAlB,UAAA,CAAA6B,kBAAkB,EAAC,IAAA7B,UAAA,CAAA8B,YAAY,EAACZ,QAAQ,KAAK,EAAE,GAAG,IAAI,GAAGA,QAAQ,CAAC,CAAC;IAEnF,IAAI,CAACa,+BAA+B,CAAC;MACpCb,QAAQ,EAAE,IAAI,CAACA;KACf,CAAC;IAEFjB,oBAAA,CAAAO,eAAe,CAACwB,iBAAiB,CAACtB,MAAM,CAAC;IAEzC,IAAI,IAAI,CAACQ,QAAQ,GAAG,IAAI,CAACe,QAAQ,GAAGnC,cAAA,CAAAoC,WAAW,EAAE;MAChD,MAAMC,GAAG,GAAG,IAAI,CAACC,SAAS,CAAC,+CAA+C,CAAC;MAC3E,MAAM,IAAId,KAAK,CAACa,GAAG,CAAC;;IAGrB,IAAI,CAACE,gBAAgB,EAAE;IACvB,IAAI,CAACC,cAAc,EAAE;IAErB,MAAMC,MAAM,GAAG,CAAAC,EAAA,GAAA7B,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE4B,MAAM,cAAAC,EAAA,cAAAA,EAAA,GAAI,IAAI;IACnC,IAAID,MAAM,EAAE;MACX3B,MAAM,CAAC2B,MAAM,CAAC,IAAI,CAAC;;EAErB;EA1HA;;;;;;;;;;EAUO,OAAOE,UAAUA,CAAC/B,MAA+B,EAAEC,IAAA,GAAkB,EAAE;IAC7E,OAAO,IAAIJ,4BAA4B,CAACG,MAAM,EAAEC,IAAI,CAAC;EACtD;EAEA;;;;;;EAMO,OAAO+B,gBAAgBA,CAACC,UAAsB,EAAEhC,IAAA,GAAkB,EAAE;IAC1E,IAAI,CAAC,IAAAd,YAAA,CAAA+C,gBAAgB,EAACD,UAAU,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE1C,2BAA2B,CAAC,EAAE;MAC9E,MAAM,IAAImB,KAAK,CACd,sFAAsFpB,gBAAgB,eAAe,IAAAL,YAAA,CAAAiD,UAAU,EAC9HH,UAAU,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CACzB,EAAE,CACH;;IAEF,MAAME,MAAM,GAAGnD,KAAA,CAAAoD,GAAG,CAACC,MAAM,CAACC,UAAU,CAACC,IAAI,CAACR,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAElE,IAAI,CAACO,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,EAAE;MAC3B,MAAM,IAAIzB,KAAK,CAAC,4CAA4C,CAAC;;IAE9D;IACA,OAAOf,4BAA4B,CAAC+C,eAAe,CAACP,MAAa,EAAEpC,IAAI,CAAC;EACzE;EAEA;;;;;;EAMO,OAAO2C,eAAeA,CAACP,MAAoC,EAAEpC,IAAA,GAAkB,EAAE;IACvF,IAAIoC,MAAM,CAACQ,MAAM,KAAK,CAAC,IAAIR,MAAM,CAACQ,MAAM,KAAK,EAAE,EAAE;MAChD,MAAM,IAAIjC,KAAK,CACd,uGAAuG,CACvG;;IAGF,MAAM,CAACN,OAAO,EAAEwC,KAAK,EAAEtC,QAAQ,EAAEe,QAAQ,EAAEwB,EAAE,EAAEC,KAAK,EAAEC,IAAI,EAAE1C,UAAU,EAAE2C,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAGf,MAAM;IAEzF,IAAI,CAACf,iBAAiB,CAAC;MAAEhB,OAAO;MAAE4C;IAAC,CAAE,CAAC;IACtC,IAAAjE,gBAAA,CAAAoE,uBAAuB,EAAC;MAAEP,KAAK;MAAEtC,QAAQ;MAAEe,QAAQ;MAAEyB,KAAK;MAAEE,CAAC;MAAEC,CAAC;MAAEC;IAAC,CAAE,CAAC;IAEtE,MAAME,eAAe,GAAe,EAAE;IAEtC,OAAO,IAAIzD,4BAA4B,CACtC;MACCS,OAAO,EAAE,IAAAhB,UAAA,CAAA6B,kBAAkB,EAACb,OAAO,CAAC;MACpCwC,KAAK;MACLtC,QAAQ;MACRe,QAAQ;MACRwB,EAAE;MACFC,KAAK;MACLC,IAAI;MACJ1C,UAAU,EAAEA,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAI+C,eAAe;MACzCJ,CAAC,EAAEA,CAAC,KAAKK,SAAS,GAAG,IAAAjE,UAAA,CAAA6B,kBAAkB,EAAC+B,CAAC,CAAC,GAAGK,SAAS;MACtDJ,CAAC;MACDC;KACA,EACDnD,IAAI,CACJ;EACF;EAmDA;;;EAGOuD,UAAUA,CAAA;IAChB,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,IAAI,IAAI,CAACD,KAAK,CAACC,OAAO,CAACC,QAAQ,KAAK,IAAI,CAAClD,MAAM,CAACkD,QAAQ,EAAE,EAAE;MACjF,OAAO,IAAI,CAACF,KAAK,CAACC,OAAO,CAACV,KAAK;;IAGhC,IAAIY,IAAI,GAAG,KAAK,CAACJ,UAAU,EAAE;IAC7BI,IAAI,IAAIC,MAAM,CAAC,IAAAxE,UAAA,CAAAyE,iBAAiB,EAAC,IAAI,CAACvD,UAAU,EAAE,IAAI,CAACE,MAAM,CAAC,CAAC;IAE/D,IAAIP,MAAM,CAAC6D,QAAQ,CAAC,IAAI,CAAC,EAAE;MAC1B,IAAI,CAACN,KAAK,CAACC,OAAO,GAAG;QACpBV,KAAK,EAAEY,IAAI;QACXD,QAAQ,EAAE,IAAI,CAAClD,MAAM,CAACkD,QAAQ;OAC9B;;IAGF,OAAOC,IAAI;EACZ;EAEA;;;EAGOI,cAAcA,CAAA;IACpB,OAAO,IAAI,CAACzC,QAAQ,GAAG,IAAI,CAACf,QAAQ,GAAG,IAAI,CAACwC,KAAK;EAClD;EAEA;;;;;;;;;;;;;EAaOiB,GAAGA,CAAA;IACT,OAAO,CACN,IAAA3E,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAAC5D,OAAO,CAAC,EACxC,IAAAhB,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAACpB,KAAK,CAAC,EACtC,IAAAxD,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAAC1D,QAAQ,CAAC,EACzC,IAAAlB,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAAC3C,QAAQ,CAAC,EACzC,IAAI,CAACwB,EAAE,KAAKQ,SAAS,GAAG,IAAI,CAACR,EAAE,CAACoB,GAAG,GAAG3B,UAAU,CAACC,IAAI,CAAC,EAAE,CAAC,EACzD,IAAAnD,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAAClB,KAAK,CAAC,EACtC,IAAI,CAACC,IAAI,EACT,IAAI,CAAC1C,UAAU,EACf,IAAI,CAAC2C,CAAC,KAAKK,SAAS,GAAG,IAAAjE,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAAChB,CAAC,CAAC,GAAGV,UAAU,CAACC,IAAI,CAAC,EAAE,CAAC,EAC/E,IAAI,CAACU,CAAC,KAAKI,SAAS,GAAG,IAAAjE,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAACf,CAAC,CAAC,GAAGX,UAAU,CAACC,IAAI,CAAC,EAAE,CAAC,EAC/E,IAAI,CAACW,CAAC,KAAKG,SAAS,GAAG,IAAAjE,UAAA,CAAA4E,0BAA0B,EAAC,IAAI,CAACd,CAAC,CAAC,GAAGZ,UAAU,CAACC,IAAI,CAAC,EAAE,CAAC,CAC/E;EACF;EAEA;;;;;;;;;;EAUO2B,SAASA,CAAA;IACf,MAAMC,IAAI,GAAG,IAAI,CAACJ,GAAG,EAAE;IACvB,OAAO,IAAA9E,YAAA,CAAAmF,gBAAgB,EAAC7E,2BAA2B,EAAEP,KAAA,CAAAoD,GAAG,CAACiC,MAAM,CAACF,IAAI,CAAC,CAAC;EACvE;EAEA;;;;;;;;;;;;;EAaOG,gBAAgBA,CAACC,WAAW,GAAG,IAAI;IACzC,MAAMJ,IAAI,GAAG,IAAI,CAACJ,GAAG,EAAE,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACnC,MAAMC,OAAO,GAAG,IAAAxF,YAAA,CAAAmF,gBAAgB,EAAC7E,2BAA2B,EAAEP,KAAA,CAAAoD,GAAG,CAACiC,MAAM,CAACF,IAAI,CAAC,CAAC;IAC/E,IAAII,WAAW,EAAE;MAChB,OAAO,IAAA1F,WAAA,CAAA6F,SAAS,EAACD,OAAO,CAAC;;IAE1B,OAAOA,OAAO;EACf;EAEA;;;;;;EAMOE,IAAIA,CAAA;IACV,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE,EAAE;MACrB,MAAMrD,GAAG,GAAG,IAAI,CAACC,SAAS,CAAC,sDAAsD,CAAC;MAClF,MAAM,IAAId,KAAK,CAACa,GAAG,CAAC;;IAGrB,IAAIvB,MAAM,CAAC6D,QAAQ,CAAC,IAAI,CAAC,EAAE;MAC1B,IAAI,CAAC,IAAI,CAACN,KAAK,CAACoB,IAAI,EAAE;QACrB,IAAI,CAACpB,KAAK,CAACoB,IAAI,GAAG,IAAA9F,WAAA,CAAA6F,SAAS,EAAC,IAAI,CAACR,SAAS,EAAE,CAAC;;MAE9C,OAAO,IAAI,CAACX,KAAK,CAACoB,IAAI;;IAGvB,OAAO,IAAA9F,WAAA,CAAA6F,SAAS,EAAC,IAAI,CAACR,SAAS,EAAE,CAAC;EACnC;EAEA;;;EAGOW,2BAA2BA,CAAA;IACjC,OAAO,IAAI,CAACP,gBAAgB,EAAE;EAC/B;EAEA;;;EAGOQ,kBAAkBA,CAAA;IACxB,IAAI,CAAC,IAAI,CAACF,QAAQ,EAAE,EAAE;MACrB,MAAMrD,GAAG,GAAG,IAAI,CAACC,SAAS,CAAC,sDAAsD,CAAC;MAClF,MAAM,IAAId,KAAK,CAACa,GAAG,CAAC;;IAGrB,MAAMwD,OAAO,GAAG,IAAI,CAACF,2BAA2B,EAAE;IAClD,MAAM;MAAE7B,CAAC;MAAEC,CAAC;MAAEC;IAAC,CAAE,GAAG,IAAI;IAExB,IAAI,CAACxB,cAAc,EAAE;IAErB,IAAI;MACH,OAAO,IAAAtC,UAAA,CAAA4F,SAAS,EACfD,OAAO,EACP/B,CAAE,GAAGW,MAAM,CAAC,EAAE,CAAC;MAAE;MACjB,IAAAvE,UAAA,CAAA4E,0BAA0B,EAACf,CAAE,CAAC,EAC9B,IAAA7D,UAAA,CAAA4E,0BAA0B,EAACd,CAAE,CAAC,CAC9B;KACD,CAAC,OAAO+B,CAAM,EAAE;MAChB,MAAM1D,GAAG,GAAG,IAAI,CAACC,SAAS,CAAC,mBAAmB,CAAC;MAC/C,MAAM,IAAId,KAAK,CAACa,GAAG,CAAC;;EAEtB;EAEO2D,iBAAiBA,CAAClC,CAAS,EAAEC,CAAa,EAAEC,CAAa;IAC/D,MAAMnD,IAAI,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQ,IAAI,CAACkF,SAAS;MAAE5E,MAAM,EAAE,IAAI,CAACA;IAAM,EAAE;IAEvD,OAAOZ,4BAA4B,CAACkC,UAAU,CAC7C;MACCzB,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBwC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBtC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBe,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBwB,EAAE,EAAE,IAAI,CAACA,EAAE;MACXC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,IAAI,EAAE,IAAI,CAACA,IAAI;MACf1C,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3B2C,CAAC,EAAEA,CAAC,GAAGW,MAAM,CAAC,EAAE,CAAC;MACjBV,CAAC,EAAE,IAAA7D,UAAA,CAAA6B,kBAAkB,EAACgC,CAAC,CAAC;MACxBC,CAAC,EAAE,IAAA9D,UAAA,CAAA6B,kBAAkB,EAACiC,CAAC;KACvB,EACDnD,IAAI,CACJ;EACF;EAEA;;;EAGOqF,MAAMA,CAAA;IACZ,MAAMC,cAAc,GAAG,IAAAlG,UAAA,CAAAmG,iBAAiB,EAAC,IAAI,CAACjF,UAAU,CAAC;IAEzD,OAAO;MACND,OAAO,EAAE,IAAAhB,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAACnF,OAAO,CAAC;MAClCwC,KAAK,EAAE,IAAAxD,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAAC3C,KAAK,CAAC;MAC9BtC,QAAQ,EAAE,IAAAlB,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAACjF,QAAQ,CAAC;MACpCe,QAAQ,EAAE,IAAAjC,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAAClE,QAAQ,CAAC;MACpCwB,EAAE,EAAE,IAAI,CAACA,EAAE,KAAKQ,SAAS,GAAG,IAAI,CAACR,EAAE,CAACpD,QAAQ,EAAE,GAAG4D,SAAS;MAC1DP,KAAK,EAAE,IAAA1D,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAACzC,KAAK,CAAC;MAC9BC,IAAI,EAAE,IAAA9D,YAAA,CAAAiD,UAAU,EAAC,IAAI,CAACa,IAAI,CAAC;MAC3B1C,UAAU,EAAEgF,cAAc;MAC1BrC,CAAC,EAAE,IAAI,CAACA,CAAC,KAAKK,SAAS,GAAG,IAAAjE,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAACvC,CAAC,CAAC,GAAGK,SAAS;MACzDJ,CAAC,EAAE,IAAI,CAACA,CAAC,KAAKI,SAAS,GAAG,IAAAjE,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAACtC,CAAC,CAAC,GAAGI,SAAS;MACzDH,CAAC,EAAE,IAAI,CAACA,CAAC,KAAKG,SAAS,GAAG,IAAAjE,UAAA,CAAAmG,WAAW,EAAC,IAAI,CAACrC,CAAC,CAAC,GAAGG;KAChD;EACF;EAEA;;;EAGOmC,QAAQA,CAAA;;IACd,IAAIA,QAAQ,GAAG,IAAI,CAACC,sBAAsB,EAAE;IAC5C;IACAD,QAAQ,IAAI,aAAa,IAAI,CAAClF,QAAQ,oBAAoB,CAAAoF,EAAA,IAAA9D,EAAA,OAAI,CAACvB,UAAU,cAAAuB,EAAA,uBAAAA,EAAA,CAAEe,MAAM,cAAA+C,EAAA,cAAAA,EAAA,GAAI,CAAC,EAAE;IACxF,OAAOF,QAAQ;EAChB;EAEA;;;;;;EAMUhE,SAASA,CAACD,GAAW;IAC9B,OAAO,GAAGA,GAAG,KAAK,IAAI,CAACiE,QAAQ,EAAE,GAAG;EACrC;;AA9VDG,OAAA,CAAAhG,4BAAA,GAAAA,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}