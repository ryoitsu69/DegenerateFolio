{"ast":null,"code":"import { hexToBn } from '../hex/toBn.js';\nimport { isBigInt } from '../is/bigInt.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\nimport { BN } from './bn.js';\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\nexport function bnToBn(value) {\n  return value ? BN.isBN(value) ? value : isHex(value) ? hexToBn(value.toString()) : isBigInt(value) ? new BN(value.toString()) : isToBn(value) ? value.toBn() : isToBigInt(value) ? new BN(value.toBigInt().toString()) : new BN(value) : new BN(0);\n}","map":{"version":3,"names":["hexToBn","isBigInt","isHex","isToBigInt","isToBn","BN","bnToBn","value","isBN","toString","toBn","toBigInt"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/bn/toBn.js"],"sourcesContent":["import { hexToBn } from '../hex/toBn.js';\nimport { isBigInt } from '../is/bigInt.js';\nimport { isHex } from '../is/hex.js';\nimport { isToBigInt } from '../is/toBigInt.js';\nimport { isToBn } from '../is/toBn.js';\nimport { BN } from './bn.js';\n/**\n * @name bnToBn\n * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.\n * @description\n * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnToBn } from '@polkadot/util';\n *\n * bnToBn(0x1234); // => BN(0x1234)\n * bnToBn(new BN(0x1234)); // => BN(0x1234)\n * ```\n */\nexport function bnToBn(value) {\n    return value\n        ? BN.isBN(value)\n            ? value\n            : isHex(value)\n                ? hexToBn(value.toString())\n                : isBigInt(value)\n                    ? new BN(value.toString())\n                    : isToBn(value)\n                        ? value.toBn()\n                        : isToBigInt(value)\n                            ? new BN(value.toBigInt().toString())\n                            : new BN(value)\n        : new BN(0);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,gBAAgB;AACxC,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,KAAK,QAAQ,cAAc;AACpC,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,EAAE,QAAQ,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAE;EAC1B,OAAOA,KAAK,GACNF,EAAE,CAACG,IAAI,CAACD,KAAK,CAAC,GACVA,KAAK,GACLL,KAAK,CAACK,KAAK,CAAC,GACRP,OAAO,CAACO,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,GACzBR,QAAQ,CAACM,KAAK,CAAC,GACX,IAAIF,EAAE,CAACE,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,GACxBL,MAAM,CAACG,KAAK,CAAC,GACTA,KAAK,CAACG,IAAI,CAAC,CAAC,GACZP,UAAU,CAACI,KAAK,CAAC,GACb,IAAIF,EAAE,CAACE,KAAK,CAACI,QAAQ,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,CAAC,GACnC,IAAIJ,EAAE,CAACE,KAAK,CAAC,GACjC,IAAIF,EAAE,CAAC,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}