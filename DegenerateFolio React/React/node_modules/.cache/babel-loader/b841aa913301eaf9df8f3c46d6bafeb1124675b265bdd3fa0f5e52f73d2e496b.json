{"ast":null,"code":"import { nextPow2 } from '../../../../maths/misc/pow2.mjs';\nimport { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\"use strict\";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new TextureSource({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: true\n    });\n    return new Texture({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = nextPow2(po2Width);\n    po2Height = nextPow2(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\nexport { TexturePool, TexturePoolClass };","map":{"version":3,"names":["count","TexturePoolClass","constructor","textureOptions","_poolKeyHash","Object","create","_texturePool","enableFullScreen","createTexture","pixelWidth","pixelHeight","antialias","textureSource","TextureSource","width","height","resolution","autoGarbageCollect","Texture","source","label","getOptimalTexture","frameWidth","frameHeight","po2Width","Math","ceil","po2Height","nextPow2","key","texture","pop","_resolution","frame","x","y","updateUvs","uid","getSameSizeTexture","returnTexture","renderTexture","push","clear","destroyTextures","i","textures","j","length","destroy","TexturePool"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/TexturePool.ts"],"sourcesContent":["import { nextPow2 } from '../../../../maths/misc/pow2';\nimport { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\nlet count = 0;\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in default pool\n * @memberof rendering\n * @name TexturePool\n */\nexport class TexturePoolClass\n{\n    /** The default options for texture pool */\n    public textureOptions: TextureSourceOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n\n    private _texturePool: {[x in string | number]: Texture[]};\n    private _poolKeyHash: Record<number, number> = Object.create(null);\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n     */\n    constructor(textureOptions?: TextureSourceOptions)\n    {\n        this._texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     * @param antialias\n     */\n    public createTexture(pixelWidth: number, pixelHeight: number, antialias: boolean): Texture\n    {\n        const textureSource = new TextureSource({\n            ...this.textureOptions,\n\n            width: pixelWidth,\n            height: pixelHeight,\n            resolution: 1,\n            antialias,\n            autoGarbageCollect: true,\n        });\n\n        return new Texture({\n            source: textureSource,\n            label: `texturePool_${count++}`,\n        });\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param frameWidth - The minimum width of the render texture.\n     * @param frameHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param antialias\n     * @returns The new render texture.\n     */\n    public getOptimalTexture(frameWidth: number, frameHeight: number, resolution = 1, antialias: boolean): Texture\n    {\n        let po2Width = Math.ceil((frameWidth * resolution) - 1e-6);\n        let po2Height = Math.ceil((frameHeight * resolution) - 1e-6);\n\n        po2Width = nextPow2(po2Width);\n        po2Height = nextPow2(po2Height);\n\n        const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n\n        if (!this._texturePool[key])\n        {\n            this._texturePool[key] = [];\n        }\n\n        let texture = this._texturePool[key].pop();\n\n        if (!texture)\n        {\n            texture = this.createTexture(po2Width, po2Height, antialias);\n        }\n\n        texture.source._resolution = resolution;\n        texture.source.width = po2Width / resolution;\n        texture.source.height = po2Height / resolution;\n        texture.source.pixelWidth = po2Width;\n        texture.source.pixelHeight = po2Height;\n\n        // fit the layout to the requested original size\n        texture.frame.x = 0;\n        texture.frame.y = 0;\n        texture.frame.width = frameWidth;\n        texture.frame.height = frameHeight;\n\n        texture.updateUvs();\n\n        this._poolKeyHash[texture.uid] = key;\n\n        return texture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     * @param texture - The texture to check what size it is.\n     * @param antialias - Whether to use antialias.\n     * @returns A texture that is a power of two\n     */\n    public getSameSizeTexture(texture: Texture, antialias = false)\n    {\n        const source = texture.source;\n\n        return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    public returnTexture(renderTexture: Texture): void\n    {\n        const key = this._poolKeyHash[renderTexture.uid];\n\n        this._texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    public clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this._texturePool)\n            {\n                const textures = this._texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this._texturePool = {};\n    }\n}\n\nexport const TexturePool = new TexturePoolClass();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}