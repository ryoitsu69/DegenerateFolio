{"ast":null,"code":"import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { State } from '../../shared/state/State.mjs';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi.mjs';\n\"use strict\";\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _GlStateSystem = class _GlStateSystem {\n  constructor() {\n    this.gl = null;\n    this.stateId = 0;\n    this.polygonOffset = 0;\n    this.blendMode = \"none\";\n    this._blendEq = false;\n    this.map = [];\n    this.map[BLEND] = this.setBlend;\n    this.map[OFFSET] = this.setOffset;\n    this.map[CULLING] = this.setCullFace;\n    this.map[DEPTH_TEST] = this.setDepthTest;\n    this.map[WINDING] = this.setFrontFace;\n    this.map[DEPTH_MASK] = this.setDepthMask;\n    this.checks = [];\n    this.defaultState = State.for2d();\n  }\n  contextChange(gl) {\n    this.gl = gl;\n    this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n    this.reset();\n  }\n  /**\n   * Sets the current state\n   * @param {*} state - The state to set.\n   */\n  set(state) {\n    state = state || this.defaultState;\n    if (this.stateId !== state.data) {\n      let diff = this.stateId ^ state.data;\n      let i = 0;\n      while (diff) {\n        if (diff & 1) {\n          this.map[i].call(this, !!(state.data & 1 << i));\n        }\n        diff = diff >> 1;\n        i++;\n      }\n      this.stateId = state.data;\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n  }\n  /**\n   * Sets the state, when previous state is unknown.\n   * @param {*} state - The state to set\n   */\n  forceState(state) {\n    state = state || this.defaultState;\n    for (let i = 0; i < this.map.length; i++) {\n      this.map[i].call(this, !!(state.data & 1 << i));\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n    this.stateId = state.data;\n  }\n  /**\n   * Sets whether to enable or disable blending.\n   * @param value - Turn on or off WebGl blending.\n   */\n  setBlend(value) {\n    this._updateCheck(_GlStateSystem._checkBlendMode, value);\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.BLEND);\n  }\n  /**\n   * Sets whether to enable or disable polygon offset fill.\n   * @param value - Turn on or off webgl polygon offset testing.\n   */\n  setOffset(value) {\n    this._updateCheck(_GlStateSystem._checkPolygonOffset, value);\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.POLYGON_OFFSET_FILL);\n  }\n  /**\n   * Sets whether to enable or disable depth test.\n   * @param value - Turn on or off webgl depth testing.\n   */\n  setDepthTest(value) {\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.DEPTH_TEST);\n  }\n  /**\n   * Sets whether to enable or disable depth mask.\n   * @param value - Turn on or off webgl depth mask.\n   */\n  setDepthMask(value) {\n    this.gl.depthMask(value);\n  }\n  /**\n   * Sets whether to enable or disable cull face.\n   * @param {boolean} value - Turn on or off webgl cull face.\n   */\n  setCullFace(value) {\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.CULL_FACE);\n  }\n  /**\n   * Sets the gl front face.\n   * @param {boolean} value - true is clockwise and false is counter-clockwise\n   */\n  setFrontFace(value) {\n    this.gl.frontFace(this.gl[value ? \"CW\" : \"CCW\"]);\n  }\n  /**\n   * Sets the blend mode.\n   * @param {number} value - The blend mode to set to.\n   */\n  setBlendMode(value) {\n    if (!this.blendModesMap[value]) {\n      value = \"normal\";\n    }\n    if (value === this.blendMode) {\n      return;\n    }\n    this.blendMode = value;\n    const mode = this.blendModesMap[value];\n    const gl = this.gl;\n    if (mode.length === 2) {\n      gl.blendFunc(mode[0], mode[1]);\n    } else {\n      gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n    }\n    if (mode.length === 6) {\n      this._blendEq = true;\n      gl.blendEquationSeparate(mode[4], mode[5]);\n    } else if (this._blendEq) {\n      this._blendEq = false;\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    }\n  }\n  /**\n   * Sets the polygon offset.\n   * @param {number} value - the polygon offset\n   * @param {number} scale - the polygon offset scale\n   */\n  setPolygonOffset(value, scale) {\n    this.gl.polygonOffset(value, scale);\n  }\n  // used\n  /** Resets all the logic and disables the VAOs. */\n  reset() {\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n    this.forceState(this.defaultState);\n    this._blendEq = true;\n    this.blendMode = \"\";\n    this.setBlendMode(\"normal\");\n  }\n  /**\n   * Checks to see which updates should be checked based on which settings have been activated.\n   *\n   * For example, if blend is enabled then we should check the blend modes each time the state is changed\n   * or if polygon fill is activated then we need to check if the polygon offset changes.\n   * The idea is that we only check what we have too.\n   * @param func - the checking function to add or remove\n   * @param value - should the check function be added or removed.\n   */\n  _updateCheck(func, value) {\n    const index = this.checks.indexOf(func);\n    if (value && index === -1) {\n      this.checks.push(func);\n    } else if (!value && index !== -1) {\n      this.checks.splice(index, 1);\n    }\n  }\n  /**\n   * A private little wrapper function that we call to check the blend mode.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkBlendMode(system, state) {\n    system.setBlendMode(state.blendMode);\n  }\n  /**\n   * A private little wrapper function that we call to check the polygon offset.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkPolygonOffset(system, state) {\n    system.setPolygonOffset(1, state.polygonOffset);\n  }\n  /**\n   * @ignore\n   */\n  destroy() {\n    this.gl = null;\n    this.checks.length = 0;\n  }\n};\n/** @ignore */\n_GlStateSystem.extension = {\n  type: [ExtensionType.WebGLSystem],\n  name: \"state\"\n};\nlet GlStateSystem = _GlStateSystem;\nexport { GlStateSystem };","map":{"version":3,"names":["BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_GlStateSystem","constructor","gl","stateId","polygonOffset","blendMode","_blendEq","map","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","State","for2d","contextChange","blendModesMap","mapWebGLBlendModesToPixi","reset","set","state","data","diff","i","call","length","forceState","value","_updateCheck","_checkBlendMode","_checkPolygonOffset","POLYGON_OFFSET_FILL","depthMask","CULL_FACE","frontFace","setBlendMode","mode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","index","indexOf","push","splice","system","destroy","extension","type","ExtensionType","WebGLSystem","name","GlStateSystem"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/state/GlStateSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines\n * @memberof rendering\n */\nexport class GlStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'state',\n    } as const;\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: GlRenderingContext;\n\n    protected blendModesMap: Record<BLEND_MODES, number[]>;\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: ((value: boolean) => void)[];\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: ((system: this, state: State) => void)[];\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 'none';\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = State.for2d();\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    public set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    public forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    public setBlend(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    public setOffset(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    public setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    public setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    public setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    public setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    public setBlendMode(value: BLEND_MODES): void\n    {\n        if (!this.blendModesMap[value])\n        {\n            value = 'normal';\n        }\n\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModesMap[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    public setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    public reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        // setting to '' means the blend mode will be set as soon as we set the first blend mode when rendering!\n        this.blendMode = '' as BLEND_MODES;\n        this.setBlendMode('normal');\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    private _updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkBlendMode(system: GlStateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkPolygonOffset(system: GlStateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this.gl = null;\n        this.checks.length = 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}