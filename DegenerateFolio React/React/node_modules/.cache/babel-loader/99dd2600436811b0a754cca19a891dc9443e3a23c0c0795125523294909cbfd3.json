{"ast":null,"code":"import { ALPHA_MODES } from \"@pixi/constants\";\nlet promise;\nasync function detectVideoAlphaMode() {\n  return promise ?? (promise = (async () => {\n    const gl = document.createElement(\"canvas\").getContext(\"webgl\");\n    if (!gl) return ALPHA_MODES.UNPACK;\n    const video = await new Promise(resolve => {\n      const video2 = document.createElement(\"video\");\n      video2.onloadeddata = () => resolve(video2), video2.onerror = () => resolve(null), video2.autoplay = !1, video2.crossOrigin = \"anonymous\", video2.preload = \"auto\", video2.src = \"data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=\", video2.load();\n    });\n    if (!video) return ALPHA_MODES.UNPACK;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer), gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0), gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1), gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE), gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n    const pixel = new Uint8Array(4);\n    return gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel), gl.deleteFramebuffer(framebuffer), gl.deleteTexture(texture), gl.getExtension(\"WEBGL_lose_context\")?.loseContext(), pixel[0] <= pixel[3] ? ALPHA_MODES.PMA : ALPHA_MODES.UNPACK;\n  })()), promise;\n}\nexport { detectVideoAlphaMode };","map":{"version":3,"names":["promise","detectVideoAlphaMode","gl","document","createElement","getContext","ALPHA_MODES","UNPACK","video","Promise","resolve","video2","onloadeddata","onerror","autoplay","crossOrigin","preload","src","load","texture","createTexture","bindTexture","TEXTURE_2D","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","texImage2D","RGBA","UNSIGNED_BYTE","pixel","Uint8Array","readPixels","deleteFramebuffer","deleteTexture","getExtension","loseContext","PMA"],"sources":["/home/ryoitsu/node_modules/@pixi/utils/src/browser/detectVideoAlphaMode.ts"],"sourcesContent":["import { ALPHA_MODES } from '@pixi/constants';\n\nlet promise: Promise<ALPHA_MODES> | undefined;\n\n/**\n * Helper for detecting the correct alpha mode for video textures.\n * For some reason, some browsers/devices/WebGL implementations premultiply the alpha\n * of a video before and then a second time if `UNPACK_PREMULTIPLY_ALPHA_WEBGL`\n * is true. So the video is premultiplied twice if the alpha mode is `UNPACK`.\n * In this case we need the alpha mode to be `PMA`. This function detects\n * the upload behavior by uploading a white 2x2 webm with 50% alpha\n * without `UNPACK_PREMULTIPLY_ALPHA_WEBGL` and then checking whether\n * the uploaded pixels are premultiplied.\n * @memberof PIXI.utils\n * @function detectVideoAlphaMode\n * @returns {Promise<PIXI.ALPHA_MODES>} The correct alpha mode for video textures.\n */\nexport async function detectVideoAlphaMode(): Promise<ALPHA_MODES>\n{\n    promise ??= (async () =>\n    {\n        const canvas = document.createElement('canvas');\n        const gl = canvas.getContext('webgl');\n\n        if (!gl)\n        {\n            return ALPHA_MODES.UNPACK;\n        }\n\n        const video = await new Promise<HTMLVideoElement | null>((resolve) =>\n        {\n            const video = document.createElement('video');\n\n            video.onloadeddata = () => resolve(video);\n            video.onerror = () => resolve(null);\n            video.autoplay = false;\n            video.crossOrigin = 'anonymous';\n            video.preload = 'auto';\n            // eslint-disable-next-line max-len\n            video.src = 'data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=';\n            video.load();\n        });\n\n        if (!video)\n        {\n            return ALPHA_MODES.UNPACK;\n        }\n\n        const texture = gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        const framebuffer = gl.createFramebuffer();\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            gl.COLOR_ATTACHMENT0,\n            gl.TEXTURE_2D,\n            texture,\n            0\n        );\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n\n        const pixel = new Uint8Array(4);\n\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n        gl.deleteFramebuffer(framebuffer);\n        gl.deleteTexture(texture);\n        gl.getExtension('WEBGL_lose_context')?.loseContext();\n\n        return pixel[0] <= pixel[3] ? ALPHA_MODES.PMA : ALPHA_MODES.UNPACK;\n    })();\n\n    return promise;\n}\n"],"mappings":";AAEA,IAAIA,OAAA;AAeJ,eAAsBC,qBAAA,EACtB;EACI,OAAAD,OAAA,KAAAA,OAAA,IAAa,YACb;IAEI,MAAME,EAAA,GADSC,QAAA,CAASC,aAAA,CAAc,QAAQ,EAC5BC,UAAA,CAAW,OAAO;IAEpC,IAAI,CAACH,EAAA,EAED,OAAOI,WAAA,CAAYC,MAAA;IAGvB,MAAMC,KAAA,GAAQ,MAAM,IAAIC,OAAA,CAAkCC,OAAA,IAC1D;MACU,MAAAC,MAAA,GAAQR,QAAA,CAASC,aAAA,CAAc,OAAO;MAE5CO,MAAA,CAAMC,YAAA,GAAe,MAAMF,OAAA,CAAQC,MAAK,GACxCA,MAAA,CAAME,OAAA,GAAU,MAAMH,OAAA,CAAQ,IAAI,GAClCC,MAAA,CAAMG,QAAA,GAAW,IACjBH,MAAA,CAAMI,WAAA,GAAc,aACpBJ,MAAA,CAAMK,OAAA,GAAU,QAEhBL,MAAA,CAAMM,GAAA,GAAM,2sBACZN,MAAA,CAAMO,IAAA,CAAK;IAAA,CACd;IAED,IAAI,CAACV,KAAA,EAED,OAAOF,WAAA,CAAYC,MAAA;IAGjB,MAAAY,OAAA,GAAUjB,EAAA,CAAGkB,aAAA;IAEhBlB,EAAA,CAAAmB,WAAA,CAAYnB,EAAA,CAAGoB,UAAA,EAAYH,OAAO;IAE/B,MAAAI,WAAA,GAAcrB,EAAA,CAAGsB,iBAAA;IAEvBtB,EAAA,CAAGuB,eAAA,CAAgBvB,EAAA,CAAGwB,WAAA,EAAaH,WAAW,GAC9CrB,EAAA,CAAGyB,oBAAA,CACCzB,EAAA,CAAGwB,WAAA,EACHxB,EAAA,CAAG0B,iBAAA,EACH1B,EAAA,CAAGoB,UAAA,EACHH,OAAA,EACA,CACJ,GAEAjB,EAAA,CAAG2B,WAAA,CAAY3B,EAAA,CAAG4B,8BAAA,EAAgC,EAAK,GACvD5B,EAAA,CAAG2B,WAAA,CAAY3B,EAAA,CAAG6B,kCAAA,EAAoC7B,EAAA,CAAG8B,IAAI,GAC7D9B,EAAA,CAAG+B,UAAA,CAAW/B,EAAA,CAAGoB,UAAA,EAAY,GAAGpB,EAAA,CAAGgC,IAAA,EAAMhC,EAAA,CAAGgC,IAAA,EAAMhC,EAAA,CAAGiC,aAAA,EAAe3B,KAAK;IAEnE,MAAA4B,KAAA,GAAQ,IAAIC,UAAA,CAAW,CAAC;IAE9B,OAAAnC,EAAA,CAAGoC,UAAA,CAAW,GAAG,GAAG,GAAG,GAAGpC,EAAA,CAAGgC,IAAA,EAAMhC,EAAA,CAAGiC,aAAA,EAAeC,KAAK,GAE1DlC,EAAA,CAAGqC,iBAAA,CAAkBhB,WAAW,GAChCrB,EAAA,CAAGsC,aAAA,CAAcrB,OAAO,GACxBjB,EAAA,CAAGuC,YAAA,CAAa,oBAAoB,GAAGC,WAAA,IAEhCN,KAAA,CAAM,CAAC,KAAKA,KAAA,CAAM,CAAC,IAAI9B,WAAA,CAAYqC,GAAA,GAAMrC,WAAA,CAAYC,MAAA;EAAA,GAGzD,IAAAP,OAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}