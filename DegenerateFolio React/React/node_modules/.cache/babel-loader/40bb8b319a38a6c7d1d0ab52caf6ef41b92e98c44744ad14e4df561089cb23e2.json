{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { assertReturn, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { memo } from '../util/index.js';\n/**\n * @name accountId\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An [[AccountId]]\n */\nexport function accountId(instanceId, api) {\n  return memo(instanceId, address => {\n    const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());\n    if (decoded.length > 8) {\n      return of(api.registry.createType('AccountId', decoded));\n    }\n    const accountIndex = api.registry.createType('AccountIndex', decoded);\n    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(a => assertReturn(a, 'Unable to retrieve accountId')));\n  });\n}","map":{"version":3,"names":["map","of","assertReturn","isU8a","decodeAddress","memo","accountId","instanceId","api","address","decoded","toString","length","registry","createType","accountIndex","derive","accounts","indexToId","pipe","a"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/accounts/accountId.js"],"sourcesContent":["import { map, of } from 'rxjs';\nimport { assertReturn, isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { memo } from '../util/index.js';\n/**\n * @name accountId\n * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.\n * @description  An [[AccountId]]\n */\nexport function accountId(instanceId, api) {\n    return memo(instanceId, (address) => {\n        const decoded = isU8a(address)\n            ? address\n            : decodeAddress((address || '').toString());\n        if (decoded.length > 8) {\n            return of(api.registry.createType('AccountId', decoded));\n        }\n        const accountIndex = api.registry.createType('AccountIndex', decoded);\n        return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map((a) => assertReturn(a, 'Unable to retrieve accountId')));\n    });\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,EAAE,QAAQ,MAAM;AAC9B,SAASC,YAAY,EAAEC,KAAK,QAAQ,gBAAgB;AACpD,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,IAAI,QAAQ,kBAAkB;AACvC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,UAAU,EAAEC,GAAG,EAAE;EACvC,OAAOH,IAAI,CAACE,UAAU,EAAGE,OAAO,IAAK;IACjC,MAAMC,OAAO,GAAGP,KAAK,CAACM,OAAO,CAAC,GACxBA,OAAO,GACPL,aAAa,CAAC,CAACK,OAAO,IAAI,EAAE,EAAEE,QAAQ,CAAC,CAAC,CAAC;IAC/C,IAAID,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;MACpB,OAAOX,EAAE,CAACO,GAAG,CAACK,QAAQ,CAACC,UAAU,CAAC,WAAW,EAAEJ,OAAO,CAAC,CAAC;IAC5D;IACA,MAAMK,YAAY,GAAGP,GAAG,CAACK,QAAQ,CAACC,UAAU,CAAC,cAAc,EAAEJ,OAAO,CAAC;IACrE,OAAOF,GAAG,CAACQ,MAAM,CAACC,QAAQ,CAACC,SAAS,CAACH,YAAY,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAACQ,IAAI,CAACnB,GAAG,CAAEoB,CAAC,IAAKlB,YAAY,CAACkB,CAAC,EAAE,8BAA8B,CAAC,CAAC,CAAC;EACnI,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}