{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\"use strict\";\nclass BindGroupSystem {\n  constructor(renderer) {\n    this._hash = /* @__PURE__ */Object.create(null);\n    this._renderer = renderer;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getBindGroup(bindGroup, program, groupIndex) {\n    bindGroup._updateKey();\n    const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n    return gpuBindGroup;\n  }\n  _createBindGroup(group, program, groupIndex) {\n    const device = this._gpu.device;\n    const groupLayout = program.layout[groupIndex];\n    const entries = [];\n    const renderer = this._renderer;\n    for (const j in groupLayout) {\n      const resource = group.resources[j] ?? group.resources[groupLayout[j]];\n      let gpuResource;\n      if (resource._resourceType === \"uniformGroup\") {\n        const uniformGroup = resource;\n        renderer.ubo.updateUniformGroup(uniformGroup);\n        const buffer = uniformGroup.buffer;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"buffer\") {\n        const buffer = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"bufferResource\") {\n        const bufferResource = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n          offset: bufferResource.offset,\n          size: bufferResource.size\n        };\n      } else if (resource._resourceType === \"textureSampler\") {\n        const sampler = resource;\n        gpuResource = renderer.texture.getGpuSampler(sampler);\n      } else if (resource._resourceType === \"textureSource\") {\n        const texture = resource;\n        gpuResource = renderer.texture.getGpuSource(texture).createView({});\n      }\n      entries.push({\n        binding: groupLayout[j],\n        resource: gpuResource\n      });\n    }\n    const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n    const gpuBindGroup = device.createBindGroup({\n      layout,\n      entries\n    });\n    this._hash[group._key] = gpuBindGroup;\n    return gpuBindGroup;\n  }\n  destroy() {\n    for (const key of Object.keys(this._hash)) {\n      this._hash[key] = null;\n    }\n    this._hash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBindGroupSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"bindGroup\"\n};\nexport { BindGroupSystem };","map":{"version":3,"names":["BindGroupSystem","constructor","renderer","_hash","Object","create","_renderer","contextChange","gpu","_gpu","getBindGroup","bindGroup","program","groupIndex","_updateKey","gpuBindGroup","_key","_createBindGroup","group","device","groupLayout","layout","entries","j","resource","resources","gpuResource","_resourceType","uniformGroup","ubo","updateUniformGroup","buffer","getGPUBuffer","offset","size","descriptor","bufferResource","sampler","texture","getGpuSampler","getGpuSource","createView","push","binding","shader","getProgramData","bindGroups","createBindGroup","destroy","key","keys","extension","type","ExtensionType","WebGPUSystem","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/BindGroupSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Buffer } from '../shared/buffer/Buffer';\nimport type { BufferResource } from '../shared/buffer/BufferResource';\nimport type { UniformGroup } from '../shared/shader/UniformGroup';\nimport type { System } from '../shared/system/System';\nimport type { TextureSource } from '../shared/texture/sources/TextureSource';\nimport type { TextureStyle } from '../shared/texture/TextureStyle';\nimport type { GPU } from './GpuDeviceSystem';\nimport type { BindGroup } from './shader/BindGroup';\nimport type { BindResource } from './shader/BindResource';\nimport type { GpuProgram } from './shader/GpuProgram';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/**\n * This manages the WebGPU bind groups. this is how data is bound to a shader when rendering\n * @memberof rendering\n */\nexport class BindGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'bindGroup',\n    } as const;\n\n    private readonly _renderer: WebGPURenderer;\n\n    private _hash: Record<string, GPUBindGroup> = Object.create(null);\n    private _gpu: GPU;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this._gpu = gpu;\n    }\n\n    public getBindGroup(bindGroup: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        bindGroup._updateKey();\n\n        const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n\n        return gpuBindGroup;\n    }\n\n    private _createBindGroup(group: BindGroup, program: GpuProgram, groupIndex: number): GPUBindGroup\n    {\n        const device = this._gpu.device;\n        const groupLayout = program.layout[groupIndex];\n        const entries: GPUBindGroupEntry[] = [];\n        const renderer = this._renderer;\n\n        for (const j in groupLayout)\n        {\n            const resource: BindResource = group.resources[j] ?? group.resources[groupLayout[j]];\n            let gpuResource: GPUSampler | GPUTextureView | GPUExternalTexture | GPUBufferBinding;\n            // TODO make this dynamic..\n\n            if (resource._resourceType === 'uniformGroup')\n            {\n                const uniformGroup = resource as UniformGroup;\n\n                renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n\n                const buffer = uniformGroup.buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'buffer')\n            {\n                const buffer = resource as Buffer;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(buffer),\n                    offset: 0,\n                    size: buffer.descriptor.size,\n                };\n            }\n            else if (resource._resourceType === 'bufferResource')\n            {\n                const bufferResource = resource as BufferResource;\n\n                gpuResource = {\n                    buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n                    offset: bufferResource.offset,\n                    size: bufferResource.size,\n                };\n            }\n            else if (resource._resourceType === 'textureSampler')\n            {\n                const sampler = resource as TextureStyle;\n\n                gpuResource = renderer.texture.getGpuSampler(sampler);\n            }\n            else if (resource._resourceType === 'textureSource')\n            {\n                const texture = resource as TextureSource;\n\n                gpuResource = renderer.texture.getGpuSource(texture).createView({\n\n                });\n            }\n\n            entries.push({\n                binding: groupLayout[j],\n                resource: gpuResource,\n            });\n        }\n\n        const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n\n        const gpuBindGroup = device.createBindGroup({\n            layout,\n            entries,\n        });\n\n        this._hash[group._key] = gpuBindGroup;\n\n        return gpuBindGroup;\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._hash))\n        {\n            this._hash[key] = null;\n        }\n\n        this._hash = null;\n\n        (this._renderer as null) = null;\n    }\n}\n"],"mappings":";;AAkBO,MAAMA,eACb;EAcIC,YAAYC,QACZ;IAJQ,KAAAC,KAAA,kBAA6CC,MAAA,CAAAC,MAAA,CAAO,IAAI;IAK5D,KAAKC,SAAY,GAAAJ,QAAA;EAAA;EAGXK,cAAcC,GACxB;IACI,KAAKC,IAAO,GAAAD,GAAA;EAAA;EAGTE,aAAaC,SAAsB,EAAAC,OAAA,EAAqBC,UAC/D;IACIF,SAAA,CAAUG,UAAW;IAEf,MAAAC,YAAA,GAAe,IAAK,CAAAZ,KAAA,CAAMQ,SAAU,CAAAK,IAAI,KAAK,IAAK,CAAAC,gBAAA,CAAiBN,SAAW,EAAAC,OAAA,EAASC,UAAU;IAEhG,OAAAE,YAAA;EAAA;EAGHE,iBAAiBC,KAAkB,EAAAN,OAAA,EAAqBC,UAChE;IACU,MAAAM,MAAA,GAAS,KAAKV,IAAK,CAAAU,MAAA;IACnB,MAAAC,WAAA,GAAcR,OAAQ,CAAAS,MAAA,CAAOR,UAAU;IAC7C,MAAMS,OAAA,GAA+B,EAAC;IACtC,MAAMpB,QAAA,GAAW,IAAK,CAAAI,SAAA;IAEtB,WAAWiB,CAAA,IAAKH,WAChB;MACU,MAAAI,QAAA,GAAyBN,KAAA,CAAMO,SAAU,CAAAF,CAAC,KAAKL,KAAM,CAAAO,SAAA,CAAUL,WAAY,CAAAG,CAAC,CAAC;MAC/E,IAAAG,WAAA;MAGA,IAAAF,QAAA,CAASG,aAAA,KAAkB,cAC/B;QACI,MAAMC,YAAe,GAAAJ,QAAA;QAEZtB,QAAA,CAAA2B,GAAA,CAAIC,kBAAA,CAAmBF,YAA4B;QAE5D,MAAMG,MAAA,GAASH,YAAa,CAAAG,MAAA;QAEdL,WAAA;UACVK,MAAQ,EAAA7B,QAAA,CAAS6B,MAAO,CAAAC,YAAA,CAAaD,MAAM;UAC3CE,MAAQ;UACRC,IAAA,EAAMH,MAAA,CAAOI,UAAW,CAAAD;QAAA,CAC5B;MAAA,CACJ,UACSV,QAAS,CAAAG,aAAA,KAAkB,QACpC;QACI,MAAMI,MAAS,GAAAP,QAAA;QAEDE,WAAA;UACVK,MAAQ,EAAA7B,QAAA,CAAS6B,MAAO,CAAAC,YAAA,CAAaD,MAAM;UAC3CE,MAAQ;UACRC,IAAA,EAAMH,MAAA,CAAOI,UAAW,CAAAD;QAAA,CAC5B;MAAA,CACJ,UACSV,QAAS,CAAAG,aAAA,KAAkB,gBACpC;QACI,MAAMS,cAAiB,GAAAZ,QAAA;QAETE,WAAA;UACVK,MAAQ,EAAA7B,QAAA,CAAS6B,MAAO,CAAAC,YAAA,CAAaI,cAAA,CAAeL,MAAM;UAC1DE,MAAA,EAAQG,cAAe,CAAAH,MAAA;UACvBC,IAAA,EAAME,cAAe,CAAAF;QAAA,CACzB;MAAA,CACJ,UACSV,QAAS,CAAAG,aAAA,KAAkB,gBACpC;QACI,MAAMU,OAAU,GAAAb,QAAA;QAEFE,WAAA,GAAAxB,QAAA,CAASoC,OAAQ,CAAAC,aAAA,CAAcF,OAAO;MAAA,CACxD,UACSb,QAAS,CAAAG,aAAA,KAAkB,eACpC;QACI,MAAMW,OAAU,GAAAd,QAAA;QAEhBE,WAAA,GAAcxB,QAAA,CAASoC,OAAQ,CAAAE,YAAA,CAAaF,OAAO,CAAE,CAAAG,UAAA,CAAW,EAE/D;MAAA;MAGLnB,OAAA,CAAQoB,IAAK;QACTC,OAAA,EAASvB,WAAA,CAAYG,CAAC;QACtBC,QAAU,EAAAE;MAAA,CACb;IAAA;IAGL,MAAML,MAAA,GAASnB,QAAS,CAAA0C,MAAA,CAAOC,cAAA,CAAejC,OAAO,EAAEkC,UAAA,CAAWjC,UAAU;IAEtE,MAAAE,YAAA,GAAeI,MAAA,CAAO4B,eAAgB;MACxC1B,MAAA;MACAC;IAAA,CACH;IAEI,KAAAnB,KAAA,CAAMe,KAAM,CAAAF,IAAI,CAAI,GAAAD,YAAA;IAElB,OAAAA,YAAA;EAAA;EAGJiC,OACPA,CAAA;IACI,WAAWC,GAAO,IAAA7C,MAAA,CAAO8C,IAAK,MAAK/C,KAAK,CACxC;MACS,KAAAA,KAAA,CAAM8C,GAAG,CAAI;IAAA;IAGtB,KAAK9C,KAAQ;IAEZ,KAAKG,SAAqB;EAAA;AAEnC;AAAA;AA7HaN,eAAA,CAGKmD,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,YAAA,CAClB;EACAC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}