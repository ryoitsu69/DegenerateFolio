{"ast":null,"code":"import { keyExtractPath } from '../key/index.js';\nimport { sr25519DerivePublic } from '../sr25519/index.js';\nimport { decodeAddress } from './decode.js';\nimport { encodeAddress } from './encode.js';\nfunction filterHard(_ref) {\n  let {\n    isHard\n  } = _ref;\n  return isHard;\n}\n/**\n * @name deriveAddress\n * @summary Creates a sr25519 derived address from the supplied and path.\n * @description\n * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.\n */\nexport function deriveAddress(who, suri, ss58Format) {\n  const {\n    path\n  } = keyExtractPath(suri);\n  if (!path.length || path.every(filterHard)) {\n    throw new Error('Expected suri to contain a combination of non-hard paths');\n  }\n  let publicKey = decodeAddress(who);\n  for (const {\n    chainCode\n  } of path) {\n    publicKey = sr25519DerivePublic(publicKey, chainCode);\n  }\n  return encodeAddress(publicKey, ss58Format);\n}","map":{"version":3,"names":["keyExtractPath","sr25519DerivePublic","decodeAddress","encodeAddress","filterHard","_ref","isHard","deriveAddress","who","suri","ss58Format","path","length","every","Error","publicKey","chainCode"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/address/derive.js"],"sourcesContent":["import { keyExtractPath } from '../key/index.js';\nimport { sr25519DerivePublic } from '../sr25519/index.js';\nimport { decodeAddress } from './decode.js';\nimport { encodeAddress } from './encode.js';\nfunction filterHard({ isHard }) {\n    return isHard;\n}\n/**\n * @name deriveAddress\n * @summary Creates a sr25519 derived address from the supplied and path.\n * @description\n * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.\n */\nexport function deriveAddress(who, suri, ss58Format) {\n    const { path } = keyExtractPath(suri);\n    if (!path.length || path.every(filterHard)) {\n        throw new Error('Expected suri to contain a combination of non-hard paths');\n    }\n    let publicKey = decodeAddress(who);\n    for (const { chainCode } of path) {\n        publicKey = sr25519DerivePublic(publicKey, chainCode);\n    }\n    return encodeAddress(publicKey, ss58Format);\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,iBAAiB;AAChD,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,UAAUA,CAAAC,IAAA,EAAa;EAAA,IAAZ;IAAEC;EAAO,CAAC,GAAAD,IAAA;EAC1B,OAAOC,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,GAAG,EAAEC,IAAI,EAAEC,UAAU,EAAE;EACjD,MAAM;IAAEC;EAAK,CAAC,GAAGX,cAAc,CAACS,IAAI,CAAC;EACrC,IAAI,CAACE,IAAI,CAACC,MAAM,IAAID,IAAI,CAACE,KAAK,CAACT,UAAU,CAAC,EAAE;IACxC,MAAM,IAAIU,KAAK,CAAC,0DAA0D,CAAC;EAC/E;EACA,IAAIC,SAAS,GAAGb,aAAa,CAACM,GAAG,CAAC;EAClC,KAAK,MAAM;IAAEQ;EAAU,CAAC,IAAIL,IAAI,EAAE;IAC9BI,SAAS,GAAGd,mBAAmB,CAACc,SAAS,EAAEC,SAAS,CAAC;EACzD;EACA,OAAOb,aAAa,CAACY,SAAS,EAAEL,UAAU,CAAC;AAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}