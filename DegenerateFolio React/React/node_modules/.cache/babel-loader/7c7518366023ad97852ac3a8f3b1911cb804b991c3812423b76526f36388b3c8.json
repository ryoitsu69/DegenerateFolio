{"ast":null,"code":"import { definedProps } from '../container/utils/definedProps.mjs';\nimport { Mesh } from '../mesh/shared/Mesh.mjs';\nimport { PlaneGeometry } from './PlaneGeometry.mjs';\n\"use strict\";\nclass MeshPlane extends Mesh {\n  /**\n   * @param options - Options to be applied to MeshPlane\n   */\n  constructor(options) {\n    const {\n      texture,\n      verticesX,\n      verticesY,\n      ...rest\n    } = options;\n    const planeGeometry = new PlaneGeometry(definedProps({\n      width: texture.width,\n      height: texture.height,\n      verticesX,\n      verticesY\n    }));\n    super(definedProps({\n      ...rest,\n      geometry: planeGeometry,\n      texture\n    }));\n    this.texture = texture;\n    this.autoResize = true;\n  }\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n  textureUpdated() {\n    const geometry = this.geometry;\n    const {\n      width,\n      height\n    } = this.texture;\n    if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n      geometry.width = width;\n      geometry.height = height;\n      geometry.build({});\n    }\n  }\n  set texture(value) {\n    this._texture?.off(\"update\", this.textureUpdated, this);\n    super.texture = value;\n    value.on(\"update\", this.textureUpdated, this);\n    this.textureUpdated();\n  }\n  /** The texture of the MeshPlane */\n  get texture() {\n    return this._texture;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options) {\n    this.texture.off(\"update\", this.textureUpdated, this);\n    super.destroy(options);\n  }\n}\nexport { MeshPlane };","map":{"version":3,"names":["MeshPlane","Mesh","constructor","options","texture","verticesX","verticesY","rest","planeGeometry","PlaneGeometry","definedProps","width","height","geometry","autoResize","textureUpdated","build","value","_texture","off","on","destroy"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/mesh-plane/MeshPlane.ts"],"sourcesContent":["import { definedProps } from '../container/utils/definedProps';\nimport { Mesh } from '../mesh/shared/Mesh';\nimport { PlaneGeometry } from './PlaneGeometry';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { DestroyOptions } from '../container/destroyTypes';\nimport type { MeshOptions } from '../mesh/shared/Mesh';\n\n/**\n * Constructor options used for `MeshPlane` instances.\n * ```js\n * const meshPlane = new MeshPlane({\n *    texture: Texture.from('snake.png'),\n *    verticesX: 20,\n *    verticesY: 20,\n * });\n * ```\n * @see {@link scene.MeshPlane}\n * @memberof scene\n */\nexport interface MeshPlaneOptions extends Omit<MeshOptions, 'geometry'>\n{\n    /** The texture to use on the plane. */\n    texture: Texture;\n    /** The number of vertices in the x-axis */\n    verticesX?: number;\n    /** The number of vertices in the y-axis */\n    verticesY?: number;\n}\n\n/**\n * The MeshPlane allows you to draw a texture across several points and then manipulate these points\n * @example\n * import { Point, MeshPlane, Texture } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * }\n * const MeshPlane = new MeshPlane({ texture: Texture.from('snake.png'), verticesX: points });\n * @memberof scene\n */\nexport class MeshPlane extends Mesh\n{\n    /** The geometry is automatically updated when the texture size changes. */\n    public autoResize: boolean;\n    protected _textureID: number;\n\n    /**\n     * @param options - Options to be applied to MeshPlane\n     */\n    constructor(options: MeshPlaneOptions)\n    {\n        const { texture, verticesX, verticesY, ...rest } = options;\n        const planeGeometry = new PlaneGeometry(definedProps({\n            width: texture.width,\n            height: texture.height,\n            verticesX,\n            verticesY,\n        }));\n\n        super(definedProps({ ...rest, geometry: planeGeometry, texture }));\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n        this.autoResize = true;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    public textureUpdated(): void\n    {\n        const geometry: PlaneGeometry = this.geometry as any;\n        const { width, height } = this.texture;\n\n        if (this.autoResize && (geometry.width !== width || geometry.height !== height))\n        {\n            geometry.width = width;\n            geometry.height = height;\n            geometry.build({});\n        }\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture?.off('update', this.textureUpdated, this);\n\n        super.texture = value;\n\n        value.on('update', this.textureUpdated, this);\n\n        this.textureUpdated();\n    }\n\n    /** The texture of the MeshPlane */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n     */\n    public destroy(options?: DestroyOptions): void\n    {\n        this.texture.off('update', this.textureUpdated, this);\n        super.destroy(options);\n    }\n}\n"],"mappings":";;;;AAyCO,MAAMA,SAAA,SAAkBC,IAC/B;EAAA;AAAA;AAAA;EAQIC,YAAYC,OACZ;IACI,MAAM;MAAEC,OAAS;MAAAC,SAAA;MAAWC,SAAW;MAAA,GAAGC;IAAA,CAAS,GAAAJ,OAAA;IAC7C,MAAAK,aAAA,GAAgB,IAAIC,aAAA,CAAcC,YAAa;MACjDC,KAAA,EAAOP,OAAQ,CAAAO,KAAA;MACfC,MAAA,EAAQR,OAAQ,CAAAQ,MAAA;MAChBP,SAAA;MACAC;IAAA,CACH,CAAC;IAEI,MAAAI,YAAA,CAAa;MAAE,GAAGH,IAAA;MAAMM,QAAA,EAAUL,aAAe;MAAAJ;IAAA,CAAS,CAAC;IAGjE,KAAKA,OAAU,GAAAA,OAAA;IACf,KAAKU,UAAa;EAAA;EACtB;AAAA;AAAA;AAAA;EAMOC,cACPA,CAAA;IACI,MAAMF,QAAA,GAA0B,IAAK,CAAAA,QAAA;IACrC,MAAM;MAAEF,KAAA;MAAOC;IAAO,IAAI,IAAK,CAAAR,OAAA;IAE/B,IAAI,KAAKU,UAAe,KAAAD,QAAA,CAASF,KAAA,KAAUA,KAAS,IAAAE,QAAA,CAASD,MAAA,KAAWA,MACxE;MACIC,QAAA,CAASF,KAAQ,GAAAA,KAAA;MACjBE,QAAA,CAASD,MAAS,GAAAA,MAAA;MACTC,QAAA,CAAAG,KAAA,CAAM,EAAE;IAAA;EACrB;EAGJ,IAAIZ,QAAQa,KACZ;IACI,KAAKC,QAAU,EAAAC,GAAA,CAAI,QAAU,OAAKJ,cAAA,EAAgB,IAAI;IAEtD,MAAMX,OAAU,GAAAa,KAAA;IAEhBA,KAAA,CAAMG,EAAG,WAAU,IAAK,CAAAL,cAAA,EAAgB,IAAI;IAE5C,KAAKA,cAAe;EAAA;EACxB;EAGA,IAAIX,OACJA,CAAA;IACI,OAAO,IAAK,CAAAc,QAAA;EAAA;EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOG,QAAQlB,OACf;IACI,KAAKC,OAAQ,CAAAe,GAAA,CAAI,QAAU,OAAKJ,cAAA,EAAgB,IAAI;IACpD,MAAMM,OAAA,CAAQlB,OAAO;EAAA;AAE7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}