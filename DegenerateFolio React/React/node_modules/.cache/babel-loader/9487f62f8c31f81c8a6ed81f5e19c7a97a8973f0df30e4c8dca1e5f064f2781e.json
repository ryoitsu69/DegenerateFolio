{"ast":null,"code":"import { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { Filter } from '../Filter.mjs';\nimport blendTemplateFrag from './blend-template.frag.mjs';\nimport blendTemplateVert from './blend-template.vert.mjs';\nimport blendTemplate from './blend-template.wgsl.mjs';\n\"use strict\";\nclass BlendModeFilter extends Filter {\n  constructor(options) {\n    const gpuOptions = options.gpu;\n    const gpuSource = compileBlendModeShader({\n      source: blendTemplate,\n      ...gpuOptions\n    });\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source: gpuSource,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source: gpuSource,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glOptions = options.gl;\n    const glSource = compileBlendModeShader({\n      source: blendTemplateFrag,\n      ...glOptions\n    });\n    const glProgram = GlProgram.from({\n      vertex: blendTemplateVert,\n      fragment: glSource\n    });\n    const uniformGroup = new UniformGroup({\n      uBlend: {\n        value: 1,\n        type: \"f32\"\n      }\n    });\n    super({\n      gpuProgram,\n      glProgram,\n      blendRequired: true,\n      resources: {\n        blendUniforms: uniformGroup,\n        uBackTexture: Texture.EMPTY\n      }\n    });\n  }\n}\nfunction compileBlendModeShader(options) {\n  const {\n    source,\n    functions,\n    main\n  } = options;\n  return source.replace(\"{FUNCTIONS}\", functions).replace(\"{MAIN}\", main);\n}\nexport { BlendModeFilter };","map":{"version":3,"names":["BlendModeFilter","Filter","constructor","options","gpuOptions","gpu","gpuSource","compileBlendModeShader","source","blendTemplate","gpuProgram","GpuProgram","from","vertex","entryPoint","fragment","glOptions","gl","glSource","blendTemplateFrag","glProgram","GlProgram","blendTemplateVert","uniformGroup","UniformGroup","uBlend","value","type","blendRequired","resources","blendUniforms","uBackTexture","Texture","EMPTY","functions","main","replace"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/filters/blend-modes/BlendModeFilter.ts"],"sourcesContent":["import { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { Filter } from '../Filter';\nimport blendTemplateFrag from './blend-template.frag';\nimport blendTemplateVert from './blend-template.vert';\nimport blendTemplate from './blend-template.wgsl';\n\nexport interface BlendModeFilterOptions\n{\n    source?: string;\n    gpu?: {\n        functions?: string;\n        main?: string;\n    }\n    gl?: {\n        functions?: string;\n        main?: string;\n    }\n}\n\nexport class BlendModeFilter extends Filter\n{\n    constructor(options: BlendModeFilterOptions)\n    {\n        const gpuOptions = options.gpu;\n\n        const gpuSource = compileBlendModeShader({ source: blendTemplate, ...gpuOptions });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source: gpuSource,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source: gpuSource,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glOptions = options.gl;\n\n        const glSource = compileBlendModeShader({ source: blendTemplateFrag, ...glOptions });\n\n        const glProgram = GlProgram.from({\n            vertex: blendTemplateVert,\n            fragment: glSource\n        });\n\n        const uniformGroup = new UniformGroup({\n            uBlend: {\n                value: 1,\n                type: 'f32'\n            }\n        });\n\n        super({\n            gpuProgram,\n            glProgram,\n            blendRequired: true,\n            resources: {\n                blendUniforms: uniformGroup,\n                uBackTexture: Texture.EMPTY\n            }\n        });\n    }\n}\n\nfunction compileBlendModeShader(options: {source: string, functions?: string, main?: string}): string\n{\n    const { source, functions, main } = options;\n\n    return source.replace('{FUNCTIONS}', functions).replace('{MAIN}', main);\n}\n"],"mappings":";;;;;;;;;AAsBO,MAAMA,eAAA,SAAwBC,MACrC;EACIC,YAAYC,OACZ;IACI,MAAMC,UAAA,GAAaD,OAAQ,CAAAE,GAAA;IAE3B,MAAMC,SAAA,GAAYC,sBAAuB;MAAEC,MAAA,EAAQC,aAAe;MAAA,GAAGL;IAAA,CAAY;IAE3E,MAAAM,UAAA,GAAaC,UAAA,CAAWC,IAAK;MAC/BC,MAAQ;QACJL,MAAQ,EAAAF,SAAA;QACRQ,UAAY;MAAA,CAChB;MACAC,QAAU;QACNP,MAAQ,EAAAF,SAAA;QACRQ,UAAY;MAAA;IAChB,CACH;IAED,MAAME,SAAA,GAAYb,OAAQ,CAAAc,EAAA;IAE1B,MAAMC,QAAA,GAAWX,sBAAuB;MAAEC,MAAA,EAAQW,iBAAmB;MAAA,GAAGH;IAAA,CAAW;IAE7E,MAAAI,SAAA,GAAYC,SAAA,CAAUT,IAAK;MAC7BC,MAAQ,EAAAS,iBAAA;MACRP,QAAU,EAAAG;IAAA,CACb;IAEK,MAAAK,YAAA,GAAe,IAAIC,YAAa;MAClCC,MAAQ;QACJC,KAAO;QACPC,IAAM;MAAA;IACV,CACH;IAEK;MACFjB,UAAA;MACAU,SAAA;MACAQ,aAAe;MACfC,SAAW;QACPC,aAAe,EAAAP,YAAA;QACfQ,YAAA,EAAcC,OAAQ,CAAAC;MAAA;IAC1B,CACH;EAAA;AAET;AAEA,SAAS1B,uBAAuBJ,OAChC;EACI,MAAM;IAAEK,MAAA;IAAQ0B,SAAW;IAAAC;EAAA,CAAS,GAAAhC,OAAA;EAEpC,OAAOK,MAAA,CAAO4B,OAAQ,gBAAeF,SAAS,CAAE,CAAAE,OAAA,CAAQ,UAAUD,IAAI;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}