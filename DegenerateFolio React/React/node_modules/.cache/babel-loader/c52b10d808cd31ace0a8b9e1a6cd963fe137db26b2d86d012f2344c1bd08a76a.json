{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupIbcExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst query_1 = require(\"cosmjs-types/ibc/applications/transfer/v1/query\");\nconst channel_1 = require(\"cosmjs-types/ibc/core/channel/v1/channel\");\nconst query_2 = require(\"cosmjs-types/ibc/core/channel/v1/query\");\nconst query_3 = require(\"cosmjs-types/ibc/core/client/v1/query\");\nconst query_4 = require(\"cosmjs-types/ibc/core/connection/v1/query\");\nconst tendermint_1 = require(\"cosmjs-types/ibc/lightclients/tendermint/v1/tendermint\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction decodeTendermintClientStateAny(clientState) {\n  if (clientState?.typeUrl !== \"/ibc.lightclients.tendermint.v1.ClientState\") {\n    throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);\n  }\n  return tendermint_1.ClientState.decode(clientState.value);\n}\nfunction decodeTendermintConsensusStateAny(clientState) {\n  if (clientState?.typeUrl !== \"/ibc.lightclients.tendermint.v1.ConsensusState\") {\n    throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);\n  }\n  return tendermint_1.ConsensusState.decode(clientState.value);\n}\nfunction setupIbcExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use these services to get easy typed access to query methods\n  // These cannot be used for proof verification\n  const channelQueryService = new query_2.QueryClientImpl(rpc);\n  const clientQueryService = new query_3.QueryClientImpl(rpc);\n  const connectionQueryService = new query_4.QueryClientImpl(rpc);\n  const transferQueryService = new query_1.QueryClientImpl(rpc);\n  return {\n    ibc: {\n      channel: {\n        channel: async (portId, channelId) => channelQueryService.Channel({\n          portId: portId,\n          channelId: channelId\n        }),\n        channels: async paginationKey => channelQueryService.Channels({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allChannels: async () => {\n          const channels = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.Channels({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_2.QueryChannelsResponse.fromPartial({\n            channels: channels,\n            height: response.height\n          });\n        },\n        connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({\n          connection: connection,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnectionChannels: async connection => {\n          const channels = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.ConnectionChannels({\n              connection: connection,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            channels.push(...response.channels);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_2.QueryConnectionChannelsResponse.fromPartial({\n            channels: channels,\n            height: response.height\n          });\n        },\n        clientState: async (portId, channelId) => channelQueryService.ChannelClientState({\n          portId: portId,\n          channelId: channelId\n        }),\n        consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({\n          portId: portId,\n          channelId: channelId,\n          revisionNumber: BigInt(revisionNumber),\n          revisionHeight: BigInt(revisionHeight)\n        }),\n        packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({\n          portId: portId,\n          channelId: channelId,\n          sequence: (0, queryclient_1.longify)(sequence)\n        }),\n        packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({\n          channelId: channelId,\n          portId: portId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allPacketCommitments: async (portId, channelId) => {\n          const commitments = [];\n          let response;\n          let key;\n          do {\n            response = await channelQueryService.PacketCommitments({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            commitments.push(...response.commitments);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_2.QueryPacketCommitmentsResponse.fromPartial({\n            commitments: commitments,\n            height: response.height\n          });\n        },\n        packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({\n          portId: portId,\n          channelId: channelId,\n          sequence: (0, queryclient_1.longify)(sequence)\n        }),\n        packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({\n          portId: portId,\n          channelId: channelId,\n          sequence: (0, queryclient_1.longify)(sequence)\n        }),\n        packetAcknowledgements: async (portId, channelId, paginationKey) => {\n          const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({\n            portId: portId,\n            channelId: channelId,\n            pagination: (0, queryclient_1.createPagination)(paginationKey)\n          });\n          return channelQueryService.PacketAcknowledgements(request);\n        },\n        allPacketAcknowledgements: async (portId, channelId) => {\n          const acknowledgements = [];\n          let response;\n          let key;\n          do {\n            const request = query_2.QueryPacketAcknowledgementsRequest.fromPartial({\n              channelId: channelId,\n              portId: portId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            response = await channelQueryService.PacketAcknowledgements(request);\n            acknowledgements.push(...response.acknowledgements);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_2.QueryPacketAcknowledgementsResponse.fromPartial({\n            acknowledgements: acknowledgements,\n            height: response.height\n          });\n        },\n        unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({\n          portId: portId,\n          channelId: channelId,\n          packetCommitmentSequences: packetCommitmentSequences.map(s => BigInt(s))\n        }),\n        unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({\n          portId: portId,\n          channelId: channelId,\n          packetAckSequences: packetAckSequences.map(s => BigInt(s))\n        }),\n        nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({\n          portId: portId,\n          channelId: channelId\n        })\n      },\n      client: {\n        state: async clientId => clientQueryService.ClientState({\n          clientId\n        }),\n        states: async paginationKey => clientQueryService.ClientStates({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allStates: async () => {\n          const clientStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_3.QueryClientStatesResponse.fromPartial({\n            clientStates: clientStates\n          });\n        },\n        consensusState: async (clientId, consensusHeight) => clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n          clientId: clientId,\n          revisionHeight: consensusHeight !== undefined ? BigInt(consensusHeight) : undefined,\n          latestHeight: consensusHeight === undefined\n        })),\n        consensusStates: async (clientId, paginationKey) => clientQueryService.ConsensusStates({\n          clientId: clientId,\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConsensusStates: async clientId => {\n          const consensusStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ConsensusStates({\n              clientId: clientId,\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            consensusStates.push(...response.consensusStates);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_3.QueryConsensusStatesResponse.fromPartial({\n            consensusStates: consensusStates\n          });\n        },\n        params: async () => clientQueryService.ClientParams({}),\n        stateTm: async clientId => {\n          const response = await clientQueryService.ClientState({\n            clientId\n          });\n          return decodeTendermintClientStateAny(response.clientState);\n        },\n        statesTm: async paginationKey => {\n          const {\n            clientStates\n          } = await clientQueryService.ClientStates({\n            pagination: (0, queryclient_1.createPagination)(paginationKey)\n          });\n          return clientStates.map(({\n            clientState\n          }) => decodeTendermintClientStateAny(clientState));\n        },\n        allStatesTm: async () => {\n          const clientStates = [];\n          let response;\n          let key;\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return clientStates.map(({\n            clientState\n          }) => decodeTendermintClientStateAny(clientState));\n        },\n        consensusStateTm: async (clientId, consensusHeight) => {\n          const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n            clientId: clientId,\n            revisionHeight: consensusHeight?.revisionHeight,\n            revisionNumber: consensusHeight?.revisionNumber,\n            latestHeight: consensusHeight === undefined\n          }));\n          return decodeTendermintConsensusStateAny(response.consensusState);\n        }\n      },\n      connection: {\n        connection: async connectionId => connectionQueryService.Connection({\n          connectionId: connectionId\n        }),\n        connections: async paginationKey => connectionQueryService.Connections({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allConnections: async () => {\n          const connections = [];\n          let response;\n          let key;\n          do {\n            response = await connectionQueryService.Connections({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            connections.push(...response.connections);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_4.QueryConnectionsResponse.fromPartial({\n            connections: connections,\n            height: response.height\n          });\n        },\n        clientConnections: async clientId => connectionQueryService.ClientConnections({\n          clientId: clientId\n        }),\n        clientState: async connectionId => connectionQueryService.ConnectionClientState({\n          connectionId: connectionId\n        }),\n        consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({\n          connectionId: connectionId,\n          revisionHeight: BigInt(revisionHeight)\n        }))\n      },\n      transfer: {\n        denomTrace: async hash => transferQueryService.DenomTrace({\n          hash: hash\n        }),\n        denomTraces: async paginationKey => transferQueryService.DenomTraces({\n          pagination: (0, queryclient_1.createPagination)(paginationKey)\n        }),\n        allDenomTraces: async () => {\n          const denomTraces = [];\n          let response;\n          let key;\n          do {\n            response = await transferQueryService.DenomTraces({\n              pagination: (0, queryclient_1.createPagination)(key)\n            });\n            denomTraces.push(...response.denomTraces);\n            key = response.pagination?.nextKey;\n          } while (key && key.length);\n          return query_1.QueryDenomTracesResponse.fromPartial({\n            denomTraces: denomTraces\n          });\n        },\n        params: async () => transferQueryService.Params({})\n      },\n      verified: {\n        channel: {\n          channel: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n            const key = (0, encoding_1.toAscii)(`channelEnds/ports/${portId}/channels/${channelId}`);\n            const {\n              value\n            } = await base.queryStoreVerified(\"ibc\", key);\n            return value.length ? channel_1.Channel.decode(value) : null;\n          },\n          packetCommitment: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185\n            const key = (0, encoding_1.toAscii)(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);\n            const {\n              value\n            } = await base.queryStoreVerified(\"ibc\", key);\n            // keeper code doesn't parse, but returns raw\n            return value;\n          },\n          packetAcknowledgement: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156\n            const key = (0, encoding_1.toAscii)(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);\n            const {\n              value\n            } = await base.queryStoreVerified(\"ibc\", key);\n            // keeper code doesn't parse, but returns raw\n            return value;\n          },\n          nextSequenceReceive: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136\n            const key = (0, encoding_1.toAscii)(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);\n            const {\n              value\n            } = await base.queryStoreVerified(\"ibc\", key);\n            return value.length ? math_1.Uint64.fromBytes(value).toNumber() : null;\n          }\n        }\n      }\n    }\n  };\n}\nexports.setupIbcExtension = setupIbcExtension;","map":{"version":3,"names":["encoding_1","require","math_1","query_1","channel_1","query_2","query_3","query_4","tendermint_1","queryclient_1","decodeTendermintClientStateAny","clientState","typeUrl","Error","ClientState","decode","value","decodeTendermintConsensusStateAny","ConsensusState","setupIbcExtension","base","rpc","createProtobufRpcClient","channelQueryService","QueryClientImpl","clientQueryService","connectionQueryService","transferQueryService","ibc","channel","portId","channelId","Channel","channels","paginationKey","Channels","pagination","createPagination","allChannels","response","key","push","nextKey","length","QueryChannelsResponse","fromPartial","height","connectionChannels","connection","ConnectionChannels","allConnectionChannels","QueryConnectionChannelsResponse","ChannelClientState","consensusState","revisionNumber","revisionHeight","ChannelConsensusState","BigInt","packetCommitment","sequence","PacketCommitment","longify","packetCommitments","PacketCommitments","allPacketCommitments","commitments","QueryPacketCommitmentsResponse","packetReceipt","PacketReceipt","packetAcknowledgement","PacketAcknowledgement","packetAcknowledgements","request","QueryPacketAcknowledgementsRequest","PacketAcknowledgements","allPacketAcknowledgements","acknowledgements","QueryPacketAcknowledgementsResponse","unreceivedPackets","packetCommitmentSequences","UnreceivedPackets","map","s","unreceivedAcks","packetAckSequences","UnreceivedAcks","nextSequenceReceive","NextSequenceReceive","client","state","clientId","states","ClientStates","allStates","clientStates","QueryClientStatesResponse","consensusHeight","QueryConsensusStateRequest","undefined","latestHeight","consensusStates","ConsensusStates","allConsensusStates","QueryConsensusStatesResponse","params","ClientParams","stateTm","statesTm","allStatesTm","consensusStateTm","connectionId","Connection","connections","Connections","allConnections","QueryConnectionsResponse","clientConnections","ClientConnections","ConnectionClientState","ConnectionConsensusState","QueryConnectionConsensusStateRequest","transfer","denomTrace","hash","DenomTrace","denomTraces","DenomTraces","allDenomTraces","QueryDenomTracesResponse","Params","verified","toAscii","queryStoreVerified","Uint64","fromBytes","toNumber","exports"],"sources":["../../../src/modules/ibc/queries.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}