{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an abstract {@linkplain Driver WebDriver} client for\n * Chromium-based web browsers. These classes should not be instantiated\n * directly.\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages a WebDriver server child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Chromium\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *     let {Builder} = require('selenium-webdriver');\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options())\n *         .build();\n *\n * __Customizing the Chromium WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * Subclasses of {@link Driver} are expected to provide a static\n * getDefaultService method. By default, this method will be called every time\n * a {@link Driver} instance is created to obtain the default driver service\n * for that specific browser (e.g. Chrome or Chromium Edge). Subclasses are\n * responsible for managing the lifetime of the default service.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *\n *     let service = new chrome.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     let options = new chrome.Options();\n *     // configure browser options ...\n *\n *     let driver = chrome.Driver.createSession(options, service);\n */\n\n'use strict';\n\nconst http = require('./http');\nconst io = require('./io');\nconst {\n  Capabilities,\n  Capability\n} = require('./lib/capabilities');\nconst command = require('./lib/command');\nconst error = require('./lib/error');\nconst Symbols = require('./lib/symbols');\nconst webdriver = require('./lib/webdriver');\nconst remote = require('./remote');\nconst {\n  getPath\n} = require('./common/driverFinder');\n\n/**\n * Custom command names supported by Chromium WebDriver.\n * @enum {string}\n */\nconst Command = {\n  LAUNCH_APP: 'launchApp',\n  GET_NETWORK_CONDITIONS: 'getNetworkConditions',\n  SET_NETWORK_CONDITIONS: 'setNetworkConditions',\n  DELETE_NETWORK_CONDITIONS: 'deleteNetworkConditions',\n  SEND_DEVTOOLS_COMMAND: 'sendDevToolsCommand',\n  SEND_AND_GET_DEVTOOLS_COMMAND: 'sendAndGetDevToolsCommand',\n  SET_PERMISSION: 'setPermission',\n  GET_CAST_SINKS: 'getCastSinks',\n  SET_CAST_SINK_TO_USE: 'setCastSinkToUse',\n  START_CAST_DESKTOP_MIRRORING: 'startDesktopMirroring',\n  START_CAST_TAB_MIRRORING: 'setCastTabMirroring',\n  GET_CAST_ISSUE_MESSAGE: 'getCastIssueMessage',\n  STOP_CASTING: 'stopCasting'\n};\n\n/**\n * Creates a command executor with support for Chromium's custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @param vendorPrefix\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(url, vendorPrefix) {\n  const agent = new http.Agent({\n    keepAlive: true\n  });\n  const client = url.then(url => new http.HttpClient(url, agent));\n  const executor = new http.Executor(client);\n  configureExecutor(executor, vendorPrefix);\n  return executor;\n}\n\n/**\n * Configures the given executor with Chromium-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor, vendorPrefix) {\n  executor.defineCommand(Command.LAUNCH_APP, 'POST', '/session/:sessionId/chromium/launch_app');\n  executor.defineCommand(Command.GET_NETWORK_CONDITIONS, 'GET', '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(Command.SET_NETWORK_CONDITIONS, 'POST', '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(Command.DELETE_NETWORK_CONDITIONS, 'DELETE', '/session/:sessionId/chromium/network_conditions');\n  executor.defineCommand(Command.SEND_DEVTOOLS_COMMAND, 'POST', '/session/:sessionId/chromium/send_command');\n  executor.defineCommand(Command.SEND_AND_GET_DEVTOOLS_COMMAND, 'POST', '/session/:sessionId/chromium/send_command_and_get_result');\n  executor.defineCommand(Command.SET_PERMISSION, 'POST', '/session/:sessionId/permissions');\n  executor.defineCommand(Command.GET_CAST_SINKS, 'GET', `/session/:sessionId/${vendorPrefix}/cast/get_sinks`);\n  executor.defineCommand(Command.SET_CAST_SINK_TO_USE, 'POST', `/session/:sessionId/${vendorPrefix}/cast/set_sink_to_use`);\n  executor.defineCommand(Command.START_CAST_DESKTOP_MIRRORING, 'POST', `/session/:sessionId/${vendorPrefix}/cast/start_desktop_mirroring`);\n  executor.defineCommand(Command.START_CAST_TAB_MIRRORING, 'POST', `/session/:sessionId/${vendorPrefix}/cast/start_tab_mirroring`);\n  executor.defineCommand(Command.GET_CAST_ISSUE_MESSAGE, 'GET', `/session/:sessionId/${vendorPrefix}/cast/get_issue_message`);\n  executor.defineCommand(Command.STOP_CASTING, 'POST', `/session/:sessionId/${vendorPrefix}/cast/stop_casting`);\n}\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a WebDriver server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} exe Path to the server executable to use. Subclasses\n   * should ensure a valid path to the appropriate exe is provided.\n   */\n  constructor(exe) {\n    super(exe);\n    this.setLoopback(true); // Required\n  }\n\n  /**\n   * Sets which port adb is listening to. _The driver will connect to adb\n   * if an {@linkplain Options#androidPackage Android session} is requested, but\n   * adb **must** be started beforehand._\n   *\n   * @param {number} port Which port adb is running on.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setAdbPort(port) {\n    return this.addArguments('--adb-port=' + port);\n  }\n\n  /**\n   * Sets the path of the log file the driver should log to. If a log file is\n   * not specified, the driver will log to stderr.\n   * @param {string} path Path of the log file to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  loggingTo(path) {\n    return this.addArguments('--log-path=' + path);\n  }\n\n  /**\n   * Enables Chrome logging.\n   * @returns {!ServiceBuilder} A self reference.\n   */\n  enableChromeLogging() {\n    return this.addArguments('--enable-chrome-logs');\n  }\n\n  /**\n   * Enables verbose logging.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging() {\n    return this.addArguments('--verbose');\n  }\n\n  /**\n   * Sets the number of threads the driver should use to manage HTTP requests.\n   * By default, the driver will use 4 threads.\n   * @param {number} n The number of threads to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setNumHttpThreads(n) {\n    return this.addArguments('--http-threads=' + n);\n  }\n\n  /**\n   * @override\n   */\n  setPath(path) {\n    super.setPath(path);\n    return this.addArguments('--url-base=' + path);\n  }\n}\n\n/**\n * Class for managing WebDriver options specific to a Chromium-based browser.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    super(other);\n\n    /** @private {!Object} */\n    this.options_ = this.get(this.CAPABILITY_KEY) || {};\n    this.setBrowserName(this.BROWSER_NAME_VALUE);\n    this.set(this.CAPABILITY_KEY, this.options_);\n  }\n\n  /**\n   * Add additional command line arguments to use when launching the browser.\n   * Each argument may be specified with or without the \"--\" prefix\n   * (e.g. \"--foo\" and \"foo\"). Arguments with an associated value should be\n   * delimited by an \"=\": \"foo=bar\".\n   *\n   * @param {...(string|!Array<string>)} args The arguments to add.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    let newArgs = (this.options_.args || []).concat(...args);\n    if (newArgs.length) {\n      this.options_.args = newArgs;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the address of a Chromium remote debugging server to connect to.\n   * Address should be of the form \"{hostname|IP address}:port\"\n   * (e.g. \"localhost:9222\").\n   *\n   * @param {string} address The address to connect to.\n   * @return {!Options} A self reference.\n   */\n  debuggerAddress(address) {\n    this.options_.debuggerAddress = address;\n    return this;\n  }\n\n  /**\n   * Sets the initial window size.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({\n    width,\n    height\n  }) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0');\n      }\n    }\n    checkArg(width);\n    checkArg(height);\n    return this.addArguments(`window-size=${width},${height}`);\n  }\n\n  /**\n   * List of Chrome command line switches to exclude that ChromeDriver by default\n   * passes when starting Chrome.  Do not prefix switches with \"--\".\n   *\n   * @param {...(string|!Array<string>)} args The switches to exclude.\n   * @return {!Options} A self reference.\n   */\n  excludeSwitches(...args) {\n    let switches = (this.options_.excludeSwitches || []).concat(...args);\n    if (switches.length) {\n      this.options_.excludeSwitches = switches;\n    }\n    return this;\n  }\n\n  /**\n   * Add additional extensions to install when launching the browser. Each extension\n   * should be specified as the path to the packed CRX file, or a Buffer for an\n   * extension.\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n   *     extensions to add.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(...args) {\n    let extensions = this.options_.extensions || new Extensions();\n    extensions.add(...args);\n    if (extensions.length) {\n      this.options_.extensions = extensions;\n    }\n    return this;\n  }\n\n  /**\n   * Sets the path to the browser binary to use. On Mac OS X, this path should\n   * reference the actual Chromium executable, not just the application binary\n   * (e.g. \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\").\n   *\n   * The binary path can be absolute or relative to the WebDriver server\n   * executable, but it must exist on the machine that will launch the browser.\n   *\n   * @param {string} path The path to the browser binary to use.\n   * @return {!Options} A self reference.\n   */\n  setBinaryPath(path) {\n    this.options_.binary = path;\n    return this;\n  }\n\n  /**\n   * Sets whether to leave the started browser process running if the controlling\n   * driver service is killed before {@link webdriver.WebDriver#quit()} is\n   * called.\n   * @param {boolean} detach Whether to leave the browser running if the\n   *     driver service is killed before the session.\n   * @return {!Options} A self reference.\n   */\n  detachDriver(detach) {\n    this.options_.detach = detach;\n    return this;\n  }\n\n  /**\n   * Sets the user preferences for Chrome's user profile. See the \"Preferences\"\n   * file in Chrome's user data directory for examples.\n   * @param {!Object} prefs Dictionary of user preferences to use.\n   * @return {!Options} A self reference.\n   */\n  setUserPreferences(prefs) {\n    this.options_.prefs = prefs;\n    return this;\n  }\n\n  /**\n   * Sets the performance logging preferences. Options include:\n   *\n   * - `enableNetwork`: Whether or not to collect events from Network domain.\n   * - `enablePage`: Whether or not to collect events from Page domain.\n   * - `enableTimeline`: Whether or not to collect events from Timeline domain.\n   *     Note: when tracing is enabled, Timeline domain is implicitly disabled,\n   *     unless `enableTimeline` is explicitly set to true.\n   * - `traceCategories`: A comma-separated string of Chromium tracing\n   *     categories for which trace events should be collected. An unspecified\n   *     or empty string disables tracing.\n   * - `bufferUsageReportingInterval`: The requested number of milliseconds\n   *     between DevTools trace buffer usage events. For example, if 1000, then\n   *     once per second, DevTools will report how full the trace buffer is. If\n   *     a report indicates the buffer usage is 100%, a warning will be issued.\n   *\n   * @param {{enableNetwork: boolean,\n   *          enablePage: boolean,\n   *          enableTimeline: boolean,\n   *          traceCategories: string,\n   *          bufferUsageReportingInterval: number}} prefs The performance\n   *     logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setPerfLoggingPrefs(prefs) {\n    this.options_.perfLoggingPrefs = prefs;\n    return this;\n  }\n\n  /**\n   * Sets preferences for the \"Local State\" file in Chrome's user data\n   * directory.\n   * @param {!Object} state Dictionary of local state preferences.\n   * @return {!Options} A self reference.\n   */\n  setLocalState(state) {\n    this.options_.localState = state;\n    return this;\n  }\n\n  /**\n   * Sets the name of the activity hosting a Chrome-based Android WebView. This\n   * option must be set to connect to an [Android WebView](\n   * https://chromedriver.chromium.org/getting-started/getting-started---android)\n   *\n   * @param {string} name The activity name.\n   * @return {!Options} A self reference.\n   */\n  androidActivity(name) {\n    this.options_.androidActivity = name;\n    return this;\n  }\n\n  /**\n   * Sets the device serial number to connect to via ADB. If not specified, the\n   * WebDriver server will select an unused device at random. An error will be\n   * returned if all devices already have active sessions.\n   *\n   * @param {string} serial The device serial number to connect to.\n   * @return {!Options} A self reference.\n   */\n  androidDeviceSerial(serial) {\n    this.options_.androidDeviceSerial = serial;\n    return this;\n  }\n\n  /**\n   * Sets the package name of the Chrome or WebView app.\n   *\n   * @param {?string} pkg The package to connect to, or `null` to disable Android\n   *     and switch back to using desktop browser.\n   * @return {!Options} A self reference.\n   */\n  androidPackage(pkg) {\n    this.options_.androidPackage = pkg;\n    return this;\n  }\n\n  /**\n   * Sets the process name of the Activity hosting the WebView (as given by\n   * `ps`). If not specified, the process name is assumed to be the same as\n   * {@link #androidPackage}.\n   *\n   * @param {string} processName The main activity name.\n   * @return {!Options} A self reference.\n   */\n  androidProcess(processName) {\n    this.options_.androidProcess = processName;\n    return this;\n  }\n\n  /**\n   * Sets whether to connect to an already-running instead of the specified\n   * {@linkplain #androidProcess app} instead of launching the app with a clean\n   * data directory.\n   *\n   * @param {boolean} useRunning Whether to connect to a running instance.\n   * @return {!Options} A self reference.\n   */\n  androidUseRunningApp(useRunning) {\n    this.options_.androidUseRunningApp = useRunning;\n    return this;\n  }\n\n  /**\n   * Sets the path to the browser's log file. This path should exist on the machine\n   * that will launch the browser.\n   * @param {string} path Path to the log file to use.\n   * @return {!Options} A self reference.\n   */\n  setBrowserLogFile(path) {\n    this.options_.logPath = path;\n    return this;\n  }\n\n  /**\n   * Sets the directory to store browser minidumps in. This option is only\n   * supported when the driver is running on Linux.\n   * @param {string} path The directory path.\n   * @return {!Options} A self reference.\n   */\n  setBrowserMinidumpPath(path) {\n    this.options_.minidumpPath = path;\n    return this;\n  }\n\n  /**\n   * Configures the browser to emulate a mobile device. For more information, refer\n   * to the ChromeDriver project page on [mobile emulation][em]. Configuration\n   * options include:\n   *\n   * - `deviceName`: The name of a pre-configured [emulated device][devem]\n   * - `width`: screen width, in pixels\n   * - `height`: screen height, in pixels\n   * - `pixelRatio`: screen pixel ratio\n   *\n   * __Example 1: Using a Pre-configured Device__\n   *\n   *     let options = new chrome.Options().setMobileEmulation(\n   *         {deviceName: 'Google Nexus 5'});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   * __Example 2: Using Custom Screen Configuration__\n   *\n   *     let options = new chrome.Options().setMobileEmulation({deviceMetrics: {\n   *         width: 360,\n   *         height: 640,\n   *         pixelRatio: 3.0\n   *     }});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   *\n   * [em]: https://chromedriver.chromium.org/mobile-emulation\n   * [devem]: https://developer.chrome.com/devtools/docs/device-mode\n   *\n   * @param {?({deviceName: string}|\n   *           {width: number, height: number, pixelRatio: number})} config The\n   *     mobile emulation configuration, or `null` to disable emulation.\n   * @return {!Options} A self reference.\n   */\n  setMobileEmulation(config) {\n    this.options_.mobileEmulation = config;\n    return this;\n  }\n\n  /**\n   * Sets a list of the window types that will appear when getting window\n   * handles. For access to <webview> elements, include \"webview\" in the list.\n   * @param {...(string|!Array<string>)} args The window types that will appear\n   * when getting window handles.\n   * @return {!Options} A self reference.\n   */\n  windowTypes(...args) {\n    let windowTypes = (this.options_.windowTypes || []).concat(...args);\n    if (windowTypes.length) {\n      this.options_.windowTypes = windowTypes;\n    }\n    return this;\n  }\n\n  /**\n   * Enable bidi connection\n   * @returns {!Capabilities}\n   */\n  enableBidi() {\n    return this.set('webSocketUrl', true);\n  }\n}\n\n/**\n * A list of extensions to install when launching the browser.\n */\nclass Extensions {\n  constructor() {\n    this.extensions = [];\n  }\n\n  /**\n   * @return {number} The length of the extensions list.\n   */\n  get length() {\n    return this.extensions.length;\n  }\n\n  /**\n   * Add additional extensions to install when launching the browser. Each\n   * extension should be specified as the path to the packed CRX file, or a\n   * Buffer for an extension.\n   *\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n   *     extensions to add.\n   */\n  add(...args) {\n    this.extensions = this.extensions.concat(...args);\n  }\n\n  /**\n   * @return {!Object} A serialized representation of this Extensions object.\n   */\n  [Symbols.serialize]() {\n    return this.extensions.map(function (extension) {\n      if (Buffer.isBuffer(extension)) {\n        return extension.toString('base64');\n      }\n      return io.read( /** @type {string} */extension).then(buffer => buffer.toString('base64'));\n    });\n  }\n}\n\n/**\n * Creates a new WebDriver client for Chromium-based browsers.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new session with the WebDriver server.\n   *\n   * @param {(Capabilities|Options)=} caps The configuration options.\n   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either\n   *     a  DriverService to use for the remote end, or a preconfigured executor\n   *     for an externally managed endpoint. If neither is provided, the\n   *     {@linkplain ##getDefaultService default service} will be used by\n   *     default.\n   * @param vendorPrefix Either 'goog' or 'ms'\n   * @param vendorCapabilityKey Either 'goog:chromeOptions' or 'ms:edgeOptions'\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(caps, opt_serviceExecutor, vendorPrefix = '', vendorCapabilityKey = '') {\n    let executor;\n    let onQuit;\n    if (opt_serviceExecutor instanceof http.Executor) {\n      executor = opt_serviceExecutor;\n      configureExecutor(executor, vendorPrefix);\n    } else {\n      let service = opt_serviceExecutor || this.getDefaultService();\n      if (!service.getExecutable()) {\n        const {\n          driverPath,\n          browserPath\n        } = getPath(caps);\n        service.setExecutable(driverPath);\n        const vendorOptions = caps.get(vendorCapabilityKey);\n        if (vendorOptions) {\n          vendorOptions['binary'] = browserPath;\n          caps.set(vendorCapabilityKey, vendorOptions);\n        } else {\n          caps.set(vendorCapabilityKey, {\n            binary: browserPath\n          });\n        }\n      }\n      onQuit = () => service.kill();\n      executor = createExecutor(service.start(), vendorPrefix);\n    }\n\n    // W3C spec requires noProxy value to be an array of strings, but Chromium\n    // expects a single host as a string.\n    let proxy = caps.get(Capability.PROXY);\n    if (proxy && Array.isArray(proxy.noProxy)) {\n      proxy.noProxy = proxy.noProxy[0];\n      if (!proxy.noProxy) {\n        proxy.noProxy = undefined;\n      }\n    }\n    return /** @type {!Driver} */super.createSession(executor, caps, onQuit);\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Schedules a command to launch Chrome App with given ID.\n   * @param {string} id ID of the App to launch.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when app is launched.\n   */\n  launchApp(id) {\n    return this.execute(new command.Command(Command.LAUNCH_APP).setParameter('id', id));\n  }\n\n  /**\n   * Schedules a command to get Chromium network emulation settings.\n   * @return {!Promise} A promise that will be resolved when network\n   *     emulation settings are retrieved.\n   */\n  getNetworkConditions() {\n    return this.execute(new command.Command(Command.GET_NETWORK_CONDITIONS));\n  }\n\n  /**\n   * Schedules a command to delete Chromium network emulation settings.\n   * @return {!Promise} A promise that will be resolved when network\n   *     emulation settings have been deleted.\n   */\n  deleteNetworkConditions() {\n    return this.execute(new command.Command(Command.DELETE_NETWORK_CONDITIONS));\n  }\n\n  /**\n   * Schedules a command to set Chromium network emulation settings.\n   *\n   * __Sample Usage:__\n   *\n   *  driver.setNetworkConditions({\n   *    offline: false,\n   *    latency: 5, // Additional latency (ms).\n   *    download_throughput: 500 * 1024, // Maximal aggregated download throughput.\n   *    upload_throughput: 500 * 1024 // Maximal aggregated upload throughput.\n   * });\n   *\n   * @param {Object} spec Defines the network conditions to set\n   * @return {!Promise<void>} A promise that will be resolved when network\n   *     emulation settings are set.\n   */\n  setNetworkConditions(spec) {\n    if (!spec || typeof spec !== 'object') {\n      throw TypeError('setNetworkConditions called with non-network-conditions parameter');\n    }\n    return this.execute(new command.Command(Command.SET_NETWORK_CONDITIONS).setParameter('network_conditions', spec));\n  }\n\n  /**\n   * Sends an arbitrary devtools command to the browser.\n   *\n   * @param {string} cmd The name of the command to send.\n   * @param {Object=} params The command parameters.\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has finished.\n   * @see <https://chromedevtools.github.io/devtools-protocol/>\n   */\n  sendDevToolsCommand(cmd, params = {}) {\n    return this.execute(new command.Command(Command.SEND_DEVTOOLS_COMMAND).setParameter('cmd', cmd).setParameter('params', params));\n  }\n\n  /**\n   * Sends an arbitrary devtools command to the browser and get the result.\n   *\n   * @param {string} cmd The name of the command to send.\n   * @param {Object=} params The command parameters.\n   * @return {!Promise<string>} A promise that will be resolved when the command\n   *     has finished.\n   * @see <https://chromedevtools.github.io/devtools-protocol/>\n   */\n  sendAndGetDevToolsCommand(cmd, params = {}) {\n    return this.execute(new command.Command(Command.SEND_AND_GET_DEVTOOLS_COMMAND).setParameter('cmd', cmd).setParameter('params', params));\n  }\n\n  /**\n   * Set a permission state to the given value.\n   *\n   * @param {string} name A name of the permission to update.\n   * @param {('granted'|'denied'|'prompt')} state State to set permission to.\n   * @returns {!Promise<Object>} A promise that will be resolved when the\n   *     command has finished.\n   * @see <https://w3c.github.io/permissions/#permission-registry> for valid\n   *     names\n   */\n  setPermission(name, state) {\n    return this.execute(new command.Command(Command.SET_PERMISSION).setParameter('descriptor', {\n      name\n    }).setParameter('state', state));\n  }\n\n  /**\n   * Sends a DevTools command to change the browser's download directory.\n   *\n   * @param {string} path The desired download directory.\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has finished.\n   * @see #sendDevToolsCommand\n   */\n  async setDownloadPath(path) {\n    if (!path || typeof path !== 'string') {\n      throw new error.InvalidArgumentError('invalid download path');\n    }\n    const stat = await io.stat(path);\n    if (!stat.isDirectory()) {\n      throw new error.InvalidArgumentError('not a directory: ' + path);\n    }\n    return this.sendDevToolsCommand('Page.setDownloadBehavior', {\n      behavior: 'allow',\n      downloadPath: path\n    });\n  }\n\n  /**\n   * Returns the list of cast sinks (Cast devices) available to the Chrome media router.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved with an array of Strings\n   *   containing the friendly device names of available cast sink targets.\n   */\n  getCastSinks() {\n    return this.execute(new command.Command(Command.GET_CAST_SINKS));\n  }\n\n  /**\n   * Selects a cast sink (Cast device) as the recipient of media router intents (connect or play).\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the target device has been selected to respond further webdriver commands.\n   */\n  setCastSinkToUse(deviceName) {\n    return this.execute(new command.Command(Command.SET_CAST_SINK_TO_USE).setParameter('sinkName', deviceName));\n  }\n\n  /**\n   * Initiates desktop mirroring for the current browser tab on the specified device.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  startDesktopMirroring(deviceName) {\n    return this.execute(new command.Command(Command.START_CAST_DESKTOP_MIRRORING).setParameter('sinkName', deviceName));\n  }\n\n  /**\n   * Initiates tab mirroring for the current browser tab on the specified device.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  startCastTabMirroring(deviceName) {\n    return this.execute(new command.Command(Command.START_CAST_TAB_MIRRORING).setParameter('sinkName', deviceName));\n  }\n\n  /**\n   * Returns an error message when there is any issue in a Cast session.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  getCastIssueMessage() {\n    return this.execute(new command.Command(Command.GET_CAST_ISSUE_MESSAGE));\n  }\n\n  /**\n   * Stops casting from media router to the specified device, if connected.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the stop command has been issued to the device.\n   */\n  stopCasting(deviceName) {\n    return this.execute(new command.Command(Command.STOP_CASTING).setParameter('sinkName', deviceName));\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder\n};","map":{"version":3,"names":["http","require","io","Capabilities","Capability","command","error","Symbols","webdriver","remote","getPath","Command","LAUNCH_APP","GET_NETWORK_CONDITIONS","SET_NETWORK_CONDITIONS","DELETE_NETWORK_CONDITIONS","SEND_DEVTOOLS_COMMAND","SEND_AND_GET_DEVTOOLS_COMMAND","SET_PERMISSION","GET_CAST_SINKS","SET_CAST_SINK_TO_USE","START_CAST_DESKTOP_MIRRORING","START_CAST_TAB_MIRRORING","GET_CAST_ISSUE_MESSAGE","STOP_CASTING","createExecutor","url","vendorPrefix","agent","Agent","keepAlive","client","then","HttpClient","executor","Executor","configureExecutor","defineCommand","ServiceBuilder","DriverService","Builder","constructor","exe","setLoopback","setAdbPort","port","addArguments","loggingTo","path","enableChromeLogging","enableVerboseLogging","setNumHttpThreads","n","setPath","Options","other","undefined","options_","get","CAPABILITY_KEY","setBrowserName","BROWSER_NAME_VALUE","set","args","newArgs","concat","length","debuggerAddress","address","windowSize","width","height","checkArg","arg","TypeError","excludeSwitches","switches","addExtensions","extensions","Extensions","add","setBinaryPath","binary","detachDriver","detach","setUserPreferences","prefs","setPerfLoggingPrefs","perfLoggingPrefs","setLocalState","state","localState","androidActivity","name","androidDeviceSerial","serial","androidPackage","pkg","androidProcess","processName","androidUseRunningApp","useRunning","setBrowserLogFile","logPath","setBrowserMinidumpPath","minidumpPath","setMobileEmulation","config","mobileEmulation","windowTypes","enableBidi","serialize","map","extension","Buffer","isBuffer","toString","read","buffer","Driver","WebDriver","createSession","caps","opt_serviceExecutor","vendorCapabilityKey","onQuit","service","getDefaultService","getExecutable","driverPath","browserPath","setExecutable","vendorOptions","kill","start","proxy","PROXY","Array","isArray","noProxy","setFileDetector","launchApp","id","execute","setParameter","getNetworkConditions","deleteNetworkConditions","setNetworkConditions","spec","sendDevToolsCommand","cmd","params","sendAndGetDevToolsCommand","setPermission","setDownloadPath","InvalidArgumentError","stat","isDirectory","behavior","downloadPath","getCastSinks","setCastSinkToUse","deviceName","startDesktopMirroring","startCastTabMirroring","getCastIssueMessage","stopCasting","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/chromium.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an abstract {@linkplain Driver WebDriver} client for\n * Chromium-based web browsers. These classes should not be instantiated\n * directly.\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages a WebDriver server child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Chromium\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *     let {Builder} = require('selenium-webdriver');\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options())\n *         .build();\n *\n * __Customizing the Chromium WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * Subclasses of {@link Driver} are expected to provide a static\n * getDefaultService method. By default, this method will be called every time\n * a {@link Driver} instance is created to obtain the default driver service\n * for that specific browser (e.g. Chrome or Chromium Edge). Subclasses are\n * responsible for managing the lifetime of the default service.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *\n *     let service = new chrome.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     let options = new chrome.Options();\n *     // configure browser options ...\n *\n *     let driver = chrome.Driver.createSession(options, service);\n */\n\n'use strict'\n\nconst http = require('./http')\nconst io = require('./io')\nconst { Capabilities, Capability } = require('./lib/capabilities')\nconst command = require('./lib/command')\nconst error = require('./lib/error')\nconst Symbols = require('./lib/symbols')\nconst webdriver = require('./lib/webdriver')\nconst remote = require('./remote')\nconst { getPath } = require('./common/driverFinder')\n\n/**\n * Custom command names supported by Chromium WebDriver.\n * @enum {string}\n */\nconst Command = {\n  LAUNCH_APP: 'launchApp',\n  GET_NETWORK_CONDITIONS: 'getNetworkConditions',\n  SET_NETWORK_CONDITIONS: 'setNetworkConditions',\n  DELETE_NETWORK_CONDITIONS: 'deleteNetworkConditions',\n  SEND_DEVTOOLS_COMMAND: 'sendDevToolsCommand',\n  SEND_AND_GET_DEVTOOLS_COMMAND: 'sendAndGetDevToolsCommand',\n  SET_PERMISSION: 'setPermission',\n  GET_CAST_SINKS: 'getCastSinks',\n  SET_CAST_SINK_TO_USE: 'setCastSinkToUse',\n  START_CAST_DESKTOP_MIRRORING: 'startDesktopMirroring',\n  START_CAST_TAB_MIRRORING: 'setCastTabMirroring',\n  GET_CAST_ISSUE_MESSAGE: 'getCastIssueMessage',\n  STOP_CASTING: 'stopCasting',\n}\n\n/**\n * Creates a command executor with support for Chromium's custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @param vendorPrefix\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(url, vendorPrefix) {\n  const agent = new http.Agent({ keepAlive: true })\n  const client = url.then((url) => new http.HttpClient(url, agent))\n  const executor = new http.Executor(client)\n  configureExecutor(executor, vendorPrefix)\n  return executor\n}\n\n/**\n * Configures the given executor with Chromium-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor, vendorPrefix) {\n  executor.defineCommand(Command.LAUNCH_APP, 'POST', '/session/:sessionId/chromium/launch_app')\n  executor.defineCommand(Command.GET_NETWORK_CONDITIONS, 'GET', '/session/:sessionId/chromium/network_conditions')\n  executor.defineCommand(Command.SET_NETWORK_CONDITIONS, 'POST', '/session/:sessionId/chromium/network_conditions')\n  executor.defineCommand(Command.DELETE_NETWORK_CONDITIONS, 'DELETE', '/session/:sessionId/chromium/network_conditions')\n  executor.defineCommand(Command.SEND_DEVTOOLS_COMMAND, 'POST', '/session/:sessionId/chromium/send_command')\n  executor.defineCommand(\n    Command.SEND_AND_GET_DEVTOOLS_COMMAND,\n    'POST',\n    '/session/:sessionId/chromium/send_command_and_get_result',\n  )\n  executor.defineCommand(Command.SET_PERMISSION, 'POST', '/session/:sessionId/permissions')\n  executor.defineCommand(Command.GET_CAST_SINKS, 'GET', `/session/:sessionId/${vendorPrefix}/cast/get_sinks`)\n  executor.defineCommand(\n    Command.SET_CAST_SINK_TO_USE,\n    'POST',\n    `/session/:sessionId/${vendorPrefix}/cast/set_sink_to_use`,\n  )\n  executor.defineCommand(\n    Command.START_CAST_DESKTOP_MIRRORING,\n    'POST',\n    `/session/:sessionId/${vendorPrefix}/cast/start_desktop_mirroring`,\n  )\n  executor.defineCommand(\n    Command.START_CAST_TAB_MIRRORING,\n    'POST',\n    `/session/:sessionId/${vendorPrefix}/cast/start_tab_mirroring`,\n  )\n  executor.defineCommand(\n    Command.GET_CAST_ISSUE_MESSAGE,\n    'GET',\n    `/session/:sessionId/${vendorPrefix}/cast/get_issue_message`,\n  )\n  executor.defineCommand(Command.STOP_CASTING, 'POST', `/session/:sessionId/${vendorPrefix}/cast/stop_casting`)\n}\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a WebDriver server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} exe Path to the server executable to use. Subclasses\n   * should ensure a valid path to the appropriate exe is provided.\n   */\n  constructor(exe) {\n    super(exe)\n    this.setLoopback(true) // Required\n  }\n\n  /**\n   * Sets which port adb is listening to. _The driver will connect to adb\n   * if an {@linkplain Options#androidPackage Android session} is requested, but\n   * adb **must** be started beforehand._\n   *\n   * @param {number} port Which port adb is running on.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setAdbPort(port) {\n    return this.addArguments('--adb-port=' + port)\n  }\n\n  /**\n   * Sets the path of the log file the driver should log to. If a log file is\n   * not specified, the driver will log to stderr.\n   * @param {string} path Path of the log file to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  loggingTo(path) {\n    return this.addArguments('--log-path=' + path)\n  }\n\n  /**\n   * Enables Chrome logging.\n   * @returns {!ServiceBuilder} A self reference.\n   */\n  enableChromeLogging() {\n    return this.addArguments('--enable-chrome-logs')\n  }\n\n  /**\n   * Enables verbose logging.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging() {\n    return this.addArguments('--verbose')\n  }\n\n  /**\n   * Sets the number of threads the driver should use to manage HTTP requests.\n   * By default, the driver will use 4 threads.\n   * @param {number} n The number of threads to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setNumHttpThreads(n) {\n    return this.addArguments('--http-threads=' + n)\n  }\n\n  /**\n   * @override\n   */\n  setPath(path) {\n    super.setPath(path)\n    return this.addArguments('--url-base=' + path)\n  }\n}\n\n/**\n * Class for managing WebDriver options specific to a Chromium-based browser.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    super(other)\n\n    /** @private {!Object} */\n    this.options_ = this.get(this.CAPABILITY_KEY) || {}\n\n    this.setBrowserName(this.BROWSER_NAME_VALUE)\n    this.set(this.CAPABILITY_KEY, this.options_)\n  }\n\n  /**\n   * Add additional command line arguments to use when launching the browser.\n   * Each argument may be specified with or without the \"--\" prefix\n   * (e.g. \"--foo\" and \"foo\"). Arguments with an associated value should be\n   * delimited by an \"=\": \"foo=bar\".\n   *\n   * @param {...(string|!Array<string>)} args The arguments to add.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    let newArgs = (this.options_.args || []).concat(...args)\n    if (newArgs.length) {\n      this.options_.args = newArgs\n    }\n    return this\n  }\n\n  /**\n   * Sets the address of a Chromium remote debugging server to connect to.\n   * Address should be of the form \"{hostname|IP address}:port\"\n   * (e.g. \"localhost:9222\").\n   *\n   * @param {string} address The address to connect to.\n   * @return {!Options} A self reference.\n   */\n  debuggerAddress(address) {\n    this.options_.debuggerAddress = address\n    return this\n  }\n\n  /**\n   * Sets the initial window size.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({ width, height }) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0')\n      }\n    }\n\n    checkArg(width)\n    checkArg(height)\n    return this.addArguments(`window-size=${width},${height}`)\n  }\n\n  /**\n   * List of Chrome command line switches to exclude that ChromeDriver by default\n   * passes when starting Chrome.  Do not prefix switches with \"--\".\n   *\n   * @param {...(string|!Array<string>)} args The switches to exclude.\n   * @return {!Options} A self reference.\n   */\n  excludeSwitches(...args) {\n    let switches = (this.options_.excludeSwitches || []).concat(...args)\n    if (switches.length) {\n      this.options_.excludeSwitches = switches\n    }\n    return this\n  }\n\n  /**\n   * Add additional extensions to install when launching the browser. Each extension\n   * should be specified as the path to the packed CRX file, or a Buffer for an\n   * extension.\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n   *     extensions to add.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(...args) {\n    let extensions = this.options_.extensions || new Extensions()\n    extensions.add(...args)\n    if (extensions.length) {\n      this.options_.extensions = extensions\n    }\n    return this\n  }\n\n  /**\n   * Sets the path to the browser binary to use. On Mac OS X, this path should\n   * reference the actual Chromium executable, not just the application binary\n   * (e.g. \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\").\n   *\n   * The binary path can be absolute or relative to the WebDriver server\n   * executable, but it must exist on the machine that will launch the browser.\n   *\n   * @param {string} path The path to the browser binary to use.\n   * @return {!Options} A self reference.\n   */\n  setBinaryPath(path) {\n    this.options_.binary = path\n    return this\n  }\n\n  /**\n   * Sets whether to leave the started browser process running if the controlling\n   * driver service is killed before {@link webdriver.WebDriver#quit()} is\n   * called.\n   * @param {boolean} detach Whether to leave the browser running if the\n   *     driver service is killed before the session.\n   * @return {!Options} A self reference.\n   */\n  detachDriver(detach) {\n    this.options_.detach = detach\n    return this\n  }\n\n  /**\n   * Sets the user preferences for Chrome's user profile. See the \"Preferences\"\n   * file in Chrome's user data directory for examples.\n   * @param {!Object} prefs Dictionary of user preferences to use.\n   * @return {!Options} A self reference.\n   */\n  setUserPreferences(prefs) {\n    this.options_.prefs = prefs\n    return this\n  }\n\n  /**\n   * Sets the performance logging preferences. Options include:\n   *\n   * - `enableNetwork`: Whether or not to collect events from Network domain.\n   * - `enablePage`: Whether or not to collect events from Page domain.\n   * - `enableTimeline`: Whether or not to collect events from Timeline domain.\n   *     Note: when tracing is enabled, Timeline domain is implicitly disabled,\n   *     unless `enableTimeline` is explicitly set to true.\n   * - `traceCategories`: A comma-separated string of Chromium tracing\n   *     categories for which trace events should be collected. An unspecified\n   *     or empty string disables tracing.\n   * - `bufferUsageReportingInterval`: The requested number of milliseconds\n   *     between DevTools trace buffer usage events. For example, if 1000, then\n   *     once per second, DevTools will report how full the trace buffer is. If\n   *     a report indicates the buffer usage is 100%, a warning will be issued.\n   *\n   * @param {{enableNetwork: boolean,\n   *          enablePage: boolean,\n   *          enableTimeline: boolean,\n   *          traceCategories: string,\n   *          bufferUsageReportingInterval: number}} prefs The performance\n   *     logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setPerfLoggingPrefs(prefs) {\n    this.options_.perfLoggingPrefs = prefs\n    return this\n  }\n\n  /**\n   * Sets preferences for the \"Local State\" file in Chrome's user data\n   * directory.\n   * @param {!Object} state Dictionary of local state preferences.\n   * @return {!Options} A self reference.\n   */\n  setLocalState(state) {\n    this.options_.localState = state\n    return this\n  }\n\n  /**\n   * Sets the name of the activity hosting a Chrome-based Android WebView. This\n   * option must be set to connect to an [Android WebView](\n   * https://chromedriver.chromium.org/getting-started/getting-started---android)\n   *\n   * @param {string} name The activity name.\n   * @return {!Options} A self reference.\n   */\n  androidActivity(name) {\n    this.options_.androidActivity = name\n    return this\n  }\n\n  /**\n   * Sets the device serial number to connect to via ADB. If not specified, the\n   * WebDriver server will select an unused device at random. An error will be\n   * returned if all devices already have active sessions.\n   *\n   * @param {string} serial The device serial number to connect to.\n   * @return {!Options} A self reference.\n   */\n  androidDeviceSerial(serial) {\n    this.options_.androidDeviceSerial = serial\n    return this\n  }\n\n  /**\n   * Sets the package name of the Chrome or WebView app.\n   *\n   * @param {?string} pkg The package to connect to, or `null` to disable Android\n   *     and switch back to using desktop browser.\n   * @return {!Options} A self reference.\n   */\n  androidPackage(pkg) {\n    this.options_.androidPackage = pkg\n    return this\n  }\n\n  /**\n   * Sets the process name of the Activity hosting the WebView (as given by\n   * `ps`). If not specified, the process name is assumed to be the same as\n   * {@link #androidPackage}.\n   *\n   * @param {string} processName The main activity name.\n   * @return {!Options} A self reference.\n   */\n  androidProcess(processName) {\n    this.options_.androidProcess = processName\n    return this\n  }\n\n  /**\n   * Sets whether to connect to an already-running instead of the specified\n   * {@linkplain #androidProcess app} instead of launching the app with a clean\n   * data directory.\n   *\n   * @param {boolean} useRunning Whether to connect to a running instance.\n   * @return {!Options} A self reference.\n   */\n  androidUseRunningApp(useRunning) {\n    this.options_.androidUseRunningApp = useRunning\n    return this\n  }\n\n  /**\n   * Sets the path to the browser's log file. This path should exist on the machine\n   * that will launch the browser.\n   * @param {string} path Path to the log file to use.\n   * @return {!Options} A self reference.\n   */\n  setBrowserLogFile(path) {\n    this.options_.logPath = path\n    return this\n  }\n\n  /**\n   * Sets the directory to store browser minidumps in. This option is only\n   * supported when the driver is running on Linux.\n   * @param {string} path The directory path.\n   * @return {!Options} A self reference.\n   */\n  setBrowserMinidumpPath(path) {\n    this.options_.minidumpPath = path\n    return this\n  }\n\n  /**\n   * Configures the browser to emulate a mobile device. For more information, refer\n   * to the ChromeDriver project page on [mobile emulation][em]. Configuration\n   * options include:\n   *\n   * - `deviceName`: The name of a pre-configured [emulated device][devem]\n   * - `width`: screen width, in pixels\n   * - `height`: screen height, in pixels\n   * - `pixelRatio`: screen pixel ratio\n   *\n   * __Example 1: Using a Pre-configured Device__\n   *\n   *     let options = new chrome.Options().setMobileEmulation(\n   *         {deviceName: 'Google Nexus 5'});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   * __Example 2: Using Custom Screen Configuration__\n   *\n   *     let options = new chrome.Options().setMobileEmulation({deviceMetrics: {\n   *         width: 360,\n   *         height: 640,\n   *         pixelRatio: 3.0\n   *     }});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   *\n   * [em]: https://chromedriver.chromium.org/mobile-emulation\n   * [devem]: https://developer.chrome.com/devtools/docs/device-mode\n   *\n   * @param {?({deviceName: string}|\n   *           {width: number, height: number, pixelRatio: number})} config The\n   *     mobile emulation configuration, or `null` to disable emulation.\n   * @return {!Options} A self reference.\n   */\n  setMobileEmulation(config) {\n    this.options_.mobileEmulation = config\n    return this\n  }\n\n  /**\n   * Sets a list of the window types that will appear when getting window\n   * handles. For access to <webview> elements, include \"webview\" in the list.\n   * @param {...(string|!Array<string>)} args The window types that will appear\n   * when getting window handles.\n   * @return {!Options} A self reference.\n   */\n  windowTypes(...args) {\n    let windowTypes = (this.options_.windowTypes || []).concat(...args)\n    if (windowTypes.length) {\n      this.options_.windowTypes = windowTypes\n    }\n    return this\n  }\n\n  /**\n   * Enable bidi connection\n   * @returns {!Capabilities}\n   */\n  enableBidi() {\n    return this.set('webSocketUrl', true)\n  }\n}\n\n/**\n * A list of extensions to install when launching the browser.\n */\nclass Extensions {\n  constructor() {\n    this.extensions = []\n  }\n\n  /**\n   * @return {number} The length of the extensions list.\n   */\n  get length() {\n    return this.extensions.length\n  }\n\n  /**\n   * Add additional extensions to install when launching the browser. Each\n   * extension should be specified as the path to the packed CRX file, or a\n   * Buffer for an extension.\n   *\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n   *     extensions to add.\n   */\n  add(...args) {\n    this.extensions = this.extensions.concat(...args)\n  }\n\n  /**\n   * @return {!Object} A serialized representation of this Extensions object.\n   */\n  [Symbols.serialize]() {\n    return this.extensions.map(function (extension) {\n      if (Buffer.isBuffer(extension)) {\n        return extension.toString('base64')\n      }\n      return io.read(/** @type {string} */ (extension)).then((buffer) => buffer.toString('base64'))\n    })\n  }\n}\n\n/**\n * Creates a new WebDriver client for Chromium-based browsers.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new session with the WebDriver server.\n   *\n   * @param {(Capabilities|Options)=} caps The configuration options.\n   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either\n   *     a  DriverService to use for the remote end, or a preconfigured executor\n   *     for an externally managed endpoint. If neither is provided, the\n   *     {@linkplain ##getDefaultService default service} will be used by\n   *     default.\n   * @param vendorPrefix Either 'goog' or 'ms'\n   * @param vendorCapabilityKey Either 'goog:chromeOptions' or 'ms:edgeOptions'\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(caps, opt_serviceExecutor, vendorPrefix = '', vendorCapabilityKey = '') {\n    let executor\n    let onQuit\n    if (opt_serviceExecutor instanceof http.Executor) {\n      executor = opt_serviceExecutor\n      configureExecutor(executor, vendorPrefix)\n    } else {\n      let service = opt_serviceExecutor || this.getDefaultService()\n      if (!service.getExecutable()) {\n        const { driverPath, browserPath } = getPath(caps)\n        service.setExecutable(driverPath)\n        const vendorOptions = caps.get(vendorCapabilityKey)\n        if (vendorOptions) {\n          vendorOptions['binary'] = browserPath\n          caps.set(vendorCapabilityKey, vendorOptions)\n        } else {\n          caps.set(vendorCapabilityKey, { binary: browserPath })\n        }\n      }\n      onQuit = () => service.kill()\n      executor = createExecutor(service.start(), vendorPrefix)\n    }\n\n    // W3C spec requires noProxy value to be an array of strings, but Chromium\n    // expects a single host as a string.\n    let proxy = caps.get(Capability.PROXY)\n    if (proxy && Array.isArray(proxy.noProxy)) {\n      proxy.noProxy = proxy.noProxy[0]\n      if (!proxy.noProxy) {\n        proxy.noProxy = undefined\n      }\n    }\n\n    return /** @type {!Driver} */ (super.createSession(executor, caps, onQuit))\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Schedules a command to launch Chrome App with given ID.\n   * @param {string} id ID of the App to launch.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when app is launched.\n   */\n  launchApp(id) {\n    return this.execute(new command.Command(Command.LAUNCH_APP).setParameter('id', id))\n  }\n\n  /**\n   * Schedules a command to get Chromium network emulation settings.\n   * @return {!Promise} A promise that will be resolved when network\n   *     emulation settings are retrieved.\n   */\n  getNetworkConditions() {\n    return this.execute(new command.Command(Command.GET_NETWORK_CONDITIONS))\n  }\n\n  /**\n   * Schedules a command to delete Chromium network emulation settings.\n   * @return {!Promise} A promise that will be resolved when network\n   *     emulation settings have been deleted.\n   */\n  deleteNetworkConditions() {\n    return this.execute(new command.Command(Command.DELETE_NETWORK_CONDITIONS))\n  }\n\n  /**\n   * Schedules a command to set Chromium network emulation settings.\n   *\n   * __Sample Usage:__\n   *\n   *  driver.setNetworkConditions({\n   *    offline: false,\n   *    latency: 5, // Additional latency (ms).\n   *    download_throughput: 500 * 1024, // Maximal aggregated download throughput.\n   *    upload_throughput: 500 * 1024 // Maximal aggregated upload throughput.\n   * });\n   *\n   * @param {Object} spec Defines the network conditions to set\n   * @return {!Promise<void>} A promise that will be resolved when network\n   *     emulation settings are set.\n   */\n  setNetworkConditions(spec) {\n    if (!spec || typeof spec !== 'object') {\n      throw TypeError('setNetworkConditions called with non-network-conditions parameter')\n    }\n    return this.execute(new command.Command(Command.SET_NETWORK_CONDITIONS).setParameter('network_conditions', spec))\n  }\n\n  /**\n   * Sends an arbitrary devtools command to the browser.\n   *\n   * @param {string} cmd The name of the command to send.\n   * @param {Object=} params The command parameters.\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has finished.\n   * @see <https://chromedevtools.github.io/devtools-protocol/>\n   */\n  sendDevToolsCommand(cmd, params = {}) {\n    return this.execute(\n      new command.Command(Command.SEND_DEVTOOLS_COMMAND).setParameter('cmd', cmd).setParameter('params', params),\n    )\n  }\n\n  /**\n   * Sends an arbitrary devtools command to the browser and get the result.\n   *\n   * @param {string} cmd The name of the command to send.\n   * @param {Object=} params The command parameters.\n   * @return {!Promise<string>} A promise that will be resolved when the command\n   *     has finished.\n   * @see <https://chromedevtools.github.io/devtools-protocol/>\n   */\n  sendAndGetDevToolsCommand(cmd, params = {}) {\n    return this.execute(\n      new command.Command(Command.SEND_AND_GET_DEVTOOLS_COMMAND)\n        .setParameter('cmd', cmd)\n        .setParameter('params', params),\n    )\n  }\n\n  /**\n   * Set a permission state to the given value.\n   *\n   * @param {string} name A name of the permission to update.\n   * @param {('granted'|'denied'|'prompt')} state State to set permission to.\n   * @returns {!Promise<Object>} A promise that will be resolved when the\n   *     command has finished.\n   * @see <https://w3c.github.io/permissions/#permission-registry> for valid\n   *     names\n   */\n  setPermission(name, state) {\n    return this.execute(\n      new command.Command(Command.SET_PERMISSION).setParameter('descriptor', { name }).setParameter('state', state),\n    )\n  }\n\n  /**\n   * Sends a DevTools command to change the browser's download directory.\n   *\n   * @param {string} path The desired download directory.\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has finished.\n   * @see #sendDevToolsCommand\n   */\n  async setDownloadPath(path) {\n    if (!path || typeof path !== 'string') {\n      throw new error.InvalidArgumentError('invalid download path')\n    }\n    const stat = await io.stat(path)\n    if (!stat.isDirectory()) {\n      throw new error.InvalidArgumentError('not a directory: ' + path)\n    }\n    return this.sendDevToolsCommand('Page.setDownloadBehavior', {\n      behavior: 'allow',\n      downloadPath: path,\n    })\n  }\n\n  /**\n   * Returns the list of cast sinks (Cast devices) available to the Chrome media router.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved with an array of Strings\n   *   containing the friendly device names of available cast sink targets.\n   */\n  getCastSinks() {\n    return this.execute(new command.Command(Command.GET_CAST_SINKS))\n  }\n\n  /**\n   * Selects a cast sink (Cast device) as the recipient of media router intents (connect or play).\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the target device has been selected to respond further webdriver commands.\n   */\n  setCastSinkToUse(deviceName) {\n    return this.execute(new command.Command(Command.SET_CAST_SINK_TO_USE).setParameter('sinkName', deviceName))\n  }\n\n  /**\n   * Initiates desktop mirroring for the current browser tab on the specified device.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  startDesktopMirroring(deviceName) {\n    return this.execute(new command.Command(Command.START_CAST_DESKTOP_MIRRORING).setParameter('sinkName', deviceName))\n  }\n\n  /**\n   * Initiates tab mirroring for the current browser tab on the specified device.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  startCastTabMirroring(deviceName) {\n    return this.execute(new command.Command(Command.START_CAST_TAB_MIRRORING).setParameter('sinkName', deviceName))\n  }\n\n  /**\n   * Returns an error message when there is any issue in a Cast session.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  getCastIssueMessage() {\n    return this.execute(new command.Command(Command.GET_CAST_ISSUE_MESSAGE))\n  }\n\n  /**\n   * Stops casting from media router to the specified device, if connected.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the stop command has been issued to the device.\n   */\n  stopCasting(deviceName) {\n    return this.execute(new command.Command(Command.STOP_CASTING).setParameter('sinkName', deviceName))\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder,\n}\n"],"mappings":"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hC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,eAAeA,CAACC,IAAI,EAAE;IACpB,IAAI,CAACpC,QAAQ,CAACmC,eAAe,GAAGC,IAAI;IACpC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,mBAAmBA,CAACC,MAAM,EAAE;IAC1B,IAAI,CAACtC,QAAQ,CAACqC,mBAAmB,GAAGC,MAAM;IAC1C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,cAAcA,CAACC,GAAG,EAAE;IAClB,IAAI,CAACxC,QAAQ,CAACuC,cAAc,GAAGC,GAAG;IAClC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,cAAcA,CAACC,WAAW,EAAE;IAC1B,IAAI,CAAC1C,QAAQ,CAACyC,cAAc,GAAGC,WAAW;IAC1C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoBA,CAACC,UAAU,EAAE;IAC/B,IAAI,CAAC5C,QAAQ,CAAC2C,oBAAoB,GAAGC,UAAU;IAC/C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,iBAAiBA,CAACtD,IAAI,EAAE;IACtB,IAAI,CAACS,QAAQ,CAAC8C,OAAO,GAAGvD,IAAI;IAC5B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEwD,sBAAsBA,CAACxD,IAAI,EAAE;IAC3B,IAAI,CAACS,QAAQ,CAACgD,YAAY,GAAGzD,IAAI;IACjC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0D,kBAAkBA,CAACC,MAAM,EAAE;IACzB,IAAI,CAAClD,QAAQ,CAACm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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}