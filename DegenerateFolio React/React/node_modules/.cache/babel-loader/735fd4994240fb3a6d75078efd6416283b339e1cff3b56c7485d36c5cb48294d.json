{"ast":null,"code":"const WORKER_CODE = \"(function () {\\n    'use strict';\\n\\n    async function loadImageBitmap(url) {\\n      const response = await fetch(url);\\n      if (!response.ok) {\\n        throw new Error(`[WorkerManager.loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\\n      }\\n      const imageBlob = await response.blob();\\n      const imageBitmap = await createImageBitmap(imageBlob);\\n      return imageBitmap;\\n    }\\n    self.onmessage = async (event) => {\\n      try {\\n        const imageBitmap = await loadImageBitmap(event.data.data[0]);\\n        self.postMessage({\\n          data: imageBitmap,\\n          uuid: event.data.uuid,\\n          id: event.data.id\\n        }, [imageBitmap]);\\n      } catch (e) {\\n        self.postMessage({\\n          error: e,\\n          uuid: event.data.uuid,\\n          id: event.data.id\\n        });\\n      }\\n    };\\n\\n})();\\n\";\nlet WORKER_URL = null;\nclass WorkerInstance {\n  constructor() {\n    if (!WORKER_URL) {\n      WORKER_URL = URL.createObjectURL(new Blob([WORKER_CODE], {\n        type: 'application/javascript'\n      }));\n    }\n    this.worker = new Worker(WORKER_URL);\n  }\n}\nWorkerInstance.revokeObjectURL = function revokeObjectURL() {\n  if (WORKER_URL) {\n    URL.revokeObjectURL(WORKER_URL);\n    WORKER_URL = null;\n  }\n};\nexport { WorkerInstance as default };","map":{"version":3,"names":[],"sources":[],"sourcesContent":["const WORKER_CODE = \"(function () {\\n    'use strict';\\n\\n    async function loadImageBitmap(url) {\\n      const response = await fetch(url);\\n      if (!response.ok) {\\n        throw new Error(`[WorkerManager.loadImageBitmap] Failed to fetch ${url}: ${response.status} ${response.statusText}`);\\n      }\\n      const imageBlob = await response.blob();\\n      const imageBitmap = await createImageBitmap(imageBlob);\\n      return imageBitmap;\\n    }\\n    self.onmessage = async (event) => {\\n      try {\\n        const imageBitmap = await loadImageBitmap(event.data.data[0]);\\n        self.postMessage({\\n          data: imageBitmap,\\n          uuid: event.data.uuid,\\n          id: event.data.id\\n        }, [imageBitmap]);\\n      } catch (e) {\\n        self.postMessage({\\n          error: e,\\n          uuid: event.data.uuid,\\n          id: event.data.id\\n        });\\n      }\\n    };\\n\\n})();\\n\";\nlet WORKER_URL = null;\nclass WorkerInstance\n{\n    constructor()\n    {\n        if (!WORKER_URL)\n        {\n            WORKER_URL = URL.createObjectURL(new Blob([WORKER_CODE], { type: 'application/javascript' }));\n        }\n        this.worker = new Worker(WORKER_URL);\n    }\n}\nWorkerInstance.revokeObjectURL = function revokeObjectURL()\n{\n    if (WORKER_URL)\n    {\n        URL.revokeObjectURL(WORKER_URL);\n        WORKER_URL = null;\n    }\n};\n\nexport { WorkerInstance as default };\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}