{"ast":null,"code":"import { Color } from \"@pixi/color\";\nimport { BLEND_MODES } from \"@pixi/constants\";\nimport { deprecation } from \"../logging/deprecation.mjs\";\nfunction mapPremultipliedBlendModes() {\n  const pm = [],\n    npm = [];\n  for (let i = 0; i < 32; i++) pm[i] = i, npm[i] = i;\n  pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL, pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD, pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN, npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM, npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM, npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n  const array = [];\n  return array.push(npm), array.push(pm), array;\n}\nconst premultiplyBlendMode = mapPremultipliedBlendModes();\nfunction correctBlendMode(blendMode, premultiplied) {\n  return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\nfunction premultiplyRgba(rgb, alpha, out, premultiply = !0) {\n  return deprecation(\"7.2.0\", \"utils.premultiplyRgba has moved to Color.premultiply\"), Color.shared.setValue(rgb).premultiply(alpha, premultiply).toArray(out ?? new Float32Array(4));\n}\nfunction premultiplyTint(tint, alpha) {\n  return deprecation(\"7.2.0\", \"utils.premultiplyTint has moved to Color.toPremultiplied\"), Color.shared.setValue(tint).toPremultiplied(alpha);\n}\nfunction premultiplyTintToRgba(tint, alpha, out, premultiply = !0) {\n  return deprecation(\"7.2.0\", \"utils.premultiplyTintToRgba has moved to Color.premultiply\"), Color.shared.setValue(tint).premultiply(alpha, premultiply).toArray(out ?? new Float32Array(4));\n}\nexport { correctBlendMode, premultiplyBlendMode, premultiplyRgba, premultiplyTint, premultiplyTintToRgba };","map":{"version":3,"names":["mapPremultipliedBlendModes","pm","npm","i","BLEND_MODES","NORMAL_NPM","NORMAL","ADD_NPM","ADD","SCREEN_NPM","SCREEN","array","push","premultiplyBlendMode","correctBlendMode","blendMode","premultiplied","premultiplyRgba","rgb","alpha","out","premultiply","deprecation","Color","shared","setValue","toArray","Float32Array","premultiplyTint","tint","toPremultiplied","premultiplyTintToRgba"],"sources":["/home/ryoitsu/node_modules/@pixi/utils/src/color/premultiply.ts"],"sourcesContent":["import { Color } from '@pixi/color';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { deprecation } from '../logging/deprecation';\n\n/**\n * Corrects PixiJS blend, takes premultiplied alpha into account\n * @memberof PIXI.utils\n * @function mapPremultipliedBlendModes\n * @private\n * @returns {Array<number[]>} Mapped modes.\n */\nfunction mapPremultipliedBlendModes(): number[][]\n{\n    const pm = [];\n    const npm = [];\n\n    for (let i = 0; i < 32; i++)\n    {\n        pm[i] = i;\n        npm[i] = i;\n    }\n\n    pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;\n    pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;\n    pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;\n\n    npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;\n    npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;\n    npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n\n    const array: number[][] = [];\n\n    array.push(npm);\n    array.push(pm);\n\n    return array;\n}\n\n/**\n * maps premultiply flag and blendMode to adjusted blendMode\n * @memberof PIXI.utils\n * @type {Array<number[]>}\n */\nexport const premultiplyBlendMode = mapPremultipliedBlendModes();\n\n/**\n * changes blendMode according to texture format\n * @memberof PIXI.utils\n * @function correctBlendMode\n * @param {number} blendMode - supposed blend mode\n * @param {boolean} premultiplied - whether source is premultiplied\n * @returns {number} true blend mode for this texture\n */\nexport function correctBlendMode(blendMode: number, premultiplied: boolean): number\n{\n    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyRgba\n * @deprecated since 7.2.0\n * @see PIXI.Color.premultiply\n * @param {Float32Array|number[]} rgb -\n * @param {number} alpha -\n * @param {Float32Array} [out] -\n * @param {boolean} [premultiply=true] -\n */\nexport function premultiplyRgba(\n    rgb: Float32Array | number[],\n    alpha: number,\n    out?: Float32Array,\n    premultiply = true\n): Float32Array\n{\n    if (process.env.DEBUG)\n    {\n        deprecation('7.2.0', `utils.premultiplyRgba has moved to Color.premultiply`);\n    }\n\n    return Color.shared\n        .setValue(rgb)\n        .premultiply(alpha, premultiply)\n        .toArray(out ?? new Float32Array(4));\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyTint\n * @deprecated since 7.2.0\n * @see PIXI.Color.toPremultiplied\n * @param {number} tint -\n * @param {number} alpha -\n */\nexport function premultiplyTint(tint: number, alpha: number): number\n{\n    if (process.env.DEBUG)\n    {\n        deprecation('7.2.0', `utils.premultiplyTint has moved to Color.toPremultiplied`);\n    }\n\n    return Color.shared\n        .setValue(tint)\n        .toPremultiplied(alpha);\n}\n\n/**\n * @memberof PIXI.utils\n * @function premultiplyTintToRgba\n * @deprecated since 7.2.0\n * @see PIXI.Color.premultiply\n * @param {number} tint -\n * @param {number} alpha -\n * @param {Float32Array} [out] -\n * @param {boolean} [premultiply=true] -\n */\nexport function premultiplyTintToRgba(tint: number, alpha: number, out?: Float32Array, premultiply = true): Float32Array\n{\n    if (process.env.DEBUG)\n    {\n        deprecation('7.2.0', `utils.premultiplyTintToRgba has moved to Color.premultiply`);\n    }\n\n    return Color.shared\n        .setValue(tint)\n        .premultiply(alpha, premultiply)\n        .toArray(out ?? new Float32Array(4));\n}\n"],"mappings":";;;AAWA,SAASA,2BAAA,EACT;EACI,MAAMC,EAAA,GAAK;IACLC,GAAA,GAAM;EAEH,SAAAC,CAAA,GAAI,GAAGA,CAAA,GAAI,IAAIA,CAAA,IAEpBF,EAAA,CAAGE,CAAC,IAAIA,CAAA,EACRD,GAAA,CAAIC,CAAC,IAAIA,CAAA;EAGbF,EAAA,CAAGG,WAAA,CAAYC,UAAU,IAAID,WAAA,CAAYE,MAAA,EACzCL,EAAA,CAAGG,WAAA,CAAYG,OAAO,IAAIH,WAAA,CAAYI,GAAA,EACtCP,EAAA,CAAGG,WAAA,CAAYK,UAAU,IAAIL,WAAA,CAAYM,MAAA,EAEzCR,GAAA,CAAIE,WAAA,CAAYE,MAAM,IAAIF,WAAA,CAAYC,UAAA,EACtCH,GAAA,CAAIE,WAAA,CAAYI,GAAG,IAAIJ,WAAA,CAAYG,OAAA,EACnCL,GAAA,CAAIE,WAAA,CAAYM,MAAM,IAAIN,WAAA,CAAYK,UAAA;EAEtC,MAAME,KAAA,GAAoB;EAE1B,OAAAA,KAAA,CAAMC,IAAA,CAAKV,GAAG,GACdS,KAAA,CAAMC,IAAA,CAAKX,EAAE,GAENU,KAAA;AACX;AAOO,MAAME,oBAAA,GAAuBb,0BAAA,CAA2B;AAU/C,SAAAc,iBAAiBC,SAAA,EAAmBC,aAAA,EACpD;EACI,OAAOH,oBAAA,CAAqBG,aAAA,GAAgB,IAAI,CAAC,EAAED,SAAS;AAChE;AAYO,SAASE,gBACZC,GAAA,EACAC,KAAA,EACAC,GAAA,EACAC,WAAA,GAAc,IAElB;EAGQ,OAAAC,WAAA,CAAY,SAAS,sDAAsD,GAGxEC,KAAA,CAAMC,MAAA,CACRC,QAAA,CAASP,GAAG,EACZG,WAAA,CAAYF,KAAA,EAAOE,WAAW,EAC9BK,OAAA,CAAQN,GAAA,IAAO,IAAIO,YAAA,CAAa,CAAC,CAAC;AAC3C;AAUgB,SAAAC,gBAAgBC,IAAA,EAAcV,KAAA,EAC9C;EAGoB,OAAAG,WAAA,UAAS,0DAA0D,GAG5EC,KAAA,CAAMC,MAAA,CACRC,QAAA,CAASI,IAAI,EACbC,eAAA,CAAgBX,KAAK;AAC9B;AAYO,SAASY,sBAAsBF,IAAA,EAAcV,KAAA,EAAeC,GAAA,EAAoBC,WAAA,GAAc,IACrG;EAGQ,OAAAC,WAAA,CAAY,SAAS,4DAA4D,GAG9EC,KAAA,CAAMC,MAAA,CACRC,QAAA,CAASI,IAAI,EACbR,WAAA,CAAYF,KAAA,EAAOE,WAAW,EAC9BK,OAAA,CAAQN,GAAA,IAAO,IAAIO,YAAA,CAAa,CAAC,CAAC;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}