{"ast":null,"code":"\"use strict\";\n\nclass BatchableSprite {\n  constructor() {\n    // batch specific..\n    this.vertexSize = 4;\n    this.indexSize = 6;\n    this.location = 0;\n    // location in the buffer\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const sprite = this.renderable;\n    const texture = this.texture;\n    const wt = sprite.groupTransform;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const bounds = this.bounds;\n    const w0 = bounds.maxX;\n    const w1 = bounds.minX;\n    const h0 = bounds.maxY;\n    const h1 = bounds.minY;\n    const uvs = texture.uvs;\n    const argb = sprite.groupColorAlpha;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    float32View[index + 0] = a * w1 + c * h1 + tx;\n    float32View[index + 1] = d * h1 + b * w1 + ty;\n    float32View[index + 2] = uvs.x0;\n    float32View[index + 3] = uvs.y0;\n    uint32View[index + 4] = argb;\n    uint32View[index + 5] = textureIdAndRound;\n    float32View[index + 6] = a * w0 + c * h1 + tx;\n    float32View[index + 7] = d * h1 + b * w0 + ty;\n    float32View[index + 8] = uvs.x1;\n    float32View[index + 9] = uvs.y1;\n    uint32View[index + 10] = argb;\n    uint32View[index + 11] = textureIdAndRound;\n    float32View[index + 12] = a * w0 + c * h0 + tx;\n    float32View[index + 13] = d * h0 + b * w0 + ty;\n    float32View[index + 14] = uvs.x2;\n    float32View[index + 15] = uvs.y2;\n    uint32View[index + 16] = argb;\n    uint32View[index + 17] = textureIdAndRound;\n    float32View[index + 18] = a * w1 + c * h0 + tx;\n    float32View[index + 19] = d * h0 + b * w1 + ty;\n    float32View[index + 20] = uvs.x3;\n    float32View[index + 21] = uvs.y3;\n    uint32View[index + 22] = argb;\n    uint32View[index + 23] = textureIdAndRound;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    indexBuffer[index] = indicesOffset + 0;\n    indexBuffer[index + 1] = indicesOffset + 1;\n    indexBuffer[index + 2] = indicesOffset + 2;\n    indexBuffer[index + 3] = indicesOffset + 0;\n    indexBuffer[index + 4] = indicesOffset + 2;\n    indexBuffer[index + 5] = indicesOffset + 3;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n    this.bounds = null;\n  }\n}\nexport { BatchableSprite };","map":{"version":3,"names":["BatchableSprite","constructor","vertexSize","indexSize","location","batcher","batch","roundPixels","blendMode","renderable","groupBlendMode","packAttributes","float32View","uint32View","index","textureId","sprite","texture","wt","groupTransform","a","b","c","d","tx","ty","bounds","w0","maxX","w1","minX","h0","maxY","h1","minY","uvs","argb","groupColorAlpha","textureIdAndRound","x0","y0","x1","y1","x2","y2","x3","y3","packIndex","indexBuffer","indicesOffset","reset"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts"],"sourcesContent":["import type { Batch, BatchableObject, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements BatchableObject\n{\n    public indexStart: number;\n    public renderable: Container;\n\n    // batch specific..\n    public vertexSize = 4;\n    public indexSize = 6;\n    public texture: Texture;\n\n    public textureId: number;\n    public location = 0; // location in the buffer\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public bounds: BoundsData;\n    public roundPixels: 0 | 1 = 0;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number,\n    )\n    {\n        const sprite = this.renderable;\n        const texture = this.texture;\n\n        const wt = sprite.groupTransform;\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const bounds = this.bounds;\n\n        const w0 = bounds.maxX;\n        const w1 = bounds.minX;\n        const h0 = bounds.maxY;\n        const h1 = bounds.minY;\n\n        const uvs = texture.uvs;\n\n        // _ _ _ _\n        // a b g r\n        const argb = sprite.groupColorAlpha;\n\n        const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n        float32View[index + 0] = (a * w1) + (c * h1) + tx;\n        float32View[index + 1] = (d * h1) + (b * w1) + ty;\n\n        float32View[index + 2] = uvs.x0;\n        float32View[index + 3] = uvs.y0;\n\n        uint32View[index + 4] = argb;\n        uint32View[index + 5] = textureIdAndRound;\n\n        // xy\n        float32View[index + 6] = (a * w0) + (c * h1) + tx;\n        float32View[index + 7] = (d * h1) + (b * w0) + ty;\n\n        float32View[index + 8] = uvs.x1;\n        float32View[index + 9] = uvs.y1;\n\n        uint32View[index + 10] = argb;\n        uint32View[index + 11] = textureIdAndRound;\n\n        // xy\n        float32View[index + 12] = (a * w0) + (c * h0) + tx;\n        float32View[index + 13] = (d * h0) + (b * w0) + ty;\n\n        float32View[index + 14] = uvs.x2;\n        float32View[index + 15] = uvs.y2;\n\n        uint32View[index + 16] = argb;\n        uint32View[index + 17] = textureIdAndRound;\n\n        // xy\n        float32View[index + 18] = (a * w1) + (c * h0) + tx;\n        float32View[index + 19] = (d * h0) + (b * w1) + ty;\n\n        float32View[index + 20] = uvs.x3;\n        float32View[index + 21] = uvs.y3;\n\n        uint32View[index + 22] = argb;\n        uint32View[index + 23] = textureIdAndRound;\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        indexBuffer[index] = indicesOffset + 0;\n        indexBuffer[index + 1] = indicesOffset + 1;\n        indexBuffer[index + 2] = indicesOffset + 2;\n\n        indexBuffer[index + 3] = indicesOffset + 0;\n        indexBuffer[index + 4] = indicesOffset + 2;\n        indexBuffer[index + 5] = indicesOffset + 3;\n    }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this.batcher = null;\n        this.batch = null;\n        this.bounds = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}