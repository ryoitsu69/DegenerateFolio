{"ast":null,"code":"import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport createRpc from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\nvar _class;\nlet _Symbol$toStringTag;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\n_Symbol$toStringTag = Symbol.toStringTag;\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [_Symbol$toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_class = PublicKey;\nPublicKey.default = new _class('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nvar objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var name in obj) {\n    keys.push(name);\n  }\n  return keys;\n};\nfunction stringify(val, isArrayProp) {\n  var i, max, str, keys, key, propVal, toStr;\n  if (val === true) {\n    return \"true\";\n  }\n  if (val === false) {\n    return \"false\";\n  }\n  switch (typeof val) {\n    case \"object\":\n      if (val === null) {\n        return null;\n      } else if (val.toJSON && typeof val.toJSON === \"function\") {\n        return stringify(val.toJSON(), isArrayProp);\n      } else {\n        toStr = objToString.call(val);\n        if (toStr === \"[object Array]\") {\n          str = '[';\n          max = val.length - 1;\n          for (i = 0; i < max; i++) {\n            str += stringify(val[i], true) + ',';\n          }\n          if (max > -1) {\n            str += stringify(val[i], true);\n          }\n          return str + ']';\n        } else if (toStr === \"[object Object]\") {\n          // only object is left\n          keys = objKeys(val).sort();\n          max = keys.length;\n          str = \"\";\n          i = 0;\n          while (i < max) {\n            key = keys[i];\n            propVal = stringify(val[key], false);\n            if (propVal !== undefined) {\n              if (str) {\n                str += ',';\n              }\n              str += JSON.stringify(key) + ':' + propVal;\n            }\n            i++;\n          }\n          return '{' + str + '}';\n        } else {\n          return JSON.stringify(val);\n        }\n      }\n    case \"function\":\n    case \"undefined\":\n      return isArrayProp ? null : undefined;\n    case \"string\":\n      return JSON.stringify(val);\n    default:\n      return isFinite(val) ? val : null;\n  }\n}\nvar fastStableStringify = function (val) {\n  var returnVal = stringify(val, false);\n  if (returnVal !== undefined) {\n    return '' + returnVal;\n  }\n};\nvar fastStableStringify$1 = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringify);\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n    this.logs = void 0;\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\nvar fetchImpl = globalThis.fetch;\nclass RpcWebSocketClient extends RpcWebSocketCommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  })))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"0.0.0-development\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify$1(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', configWithoutEncoding);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              if (e instanceof Error) {\n                console.error(`${method} error for argument`, args, e.message);\n              }\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify$1([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(publicKey, callback, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64');\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, filters ? {\n      filters: filters\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\nvar _class2;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_class2 = Lockup;\nLockup.default = new _class2(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","_Symbol$toStringTag","Symbol","toStringTag","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","_class","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","objToString","objKeys","obj","name","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","fetchImpl","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","webSocketFactory","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","decodeData","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify$1","unsafeRes","wsEndpoint","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_class2","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","rentExemptReserve","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","updateValidatorIdentity","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assert$1","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/ed25519.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/to-buffer.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/borsh-schema.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/publickey.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/account.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/transaction/constants.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/message/account-keys.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/layout.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/assert.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/message/compiled-keys.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/guarded-array-utils.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/message/legacy.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/message/v0.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/message/versioned.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/transaction/legacy.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/transaction/message.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/transaction/versioned.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/timing.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/sysvar.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/sleep.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/instruction.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/fee-calculator.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/nonce-account.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/bigint.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/system.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/loader.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/bpf-loader.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/epoch-schedule.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/errors.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/rpc-websocket.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/account-data.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/connection.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/keypair.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/compute-budget.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/ed25519.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/secp256k1.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/secp256k1.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/stake.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/programs/vote.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/validator-info.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/vote-account.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/cluster.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","/home/ryoitsu/Documents/test/react-todo-app/node_modules/@solana/web3.js/src/index.ts"],"sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}