{"ast":null,"code":"import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter(fontFamily => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const {\n        url\n      } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\nexport { FontStylePromiseCache, getFontCss };","map":{"version":3,"names":["FontStylePromiseCache","Map","getFontCss","fontFamilies","style","defaultOptions","fontPromises","filter","fontFamily","Cache","has","map","i","url","get","set","loadFontCSS","fontWeight","fontStyle","Promise","all","join"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts"],"sourcesContent":["import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n"],"mappings":";;;AAKa,MAAAA,qBAAA,sBAA4BC,GAA6B;AAYhD,eAAAC,WAClBC,YACA,EAAAC,KAAA,EACAC,cAEJ;EACI,MAAMC,YAAe,GAAAH,YAAA,CAChBI,MAAO,CAACC,UAAA,IAAeC,KAAM,CAAAC,GAAA,CAAO,GAAAF,UAAU,UAAU,CAAC,EACzDG,GAAI,EAACH,UAAA,EAAYI,CAClB;IACI,IAAI,CAACZ,qBAAA,CAAsBU,GAAI,CAAAF,UAAU,CACzC;MACI,MAAM;QAAEK;MAAI,IAAIJ,KAAA,CAAMK,GAAI,IAAGN,UAAoB;MAEjD,IAAII,CAAA,KAAM,CACV;QACIZ,qBAAA,CAAsBe,GAAI,CAAAP,UAAA,EAAYQ,WAAY,CAAAZ,KAAA,EAAOS,GAAG,CAAC;MAAA,CAIjE;QAC0Bb,qBAAA,CAAAe,GAAA,CAAIP,UAAA,EAAYQ,WAAY;UAC9CC,UAAA,EAAYZ,cAAe,CAAAY,UAAA;UAC3BC,SAAA,EAAWb,cAAe,CAAAa,SAAA;UAC1BV;QAAA,CACJ,EAAGK,GAAG,CAAC;MAAA;IACX;IAGG,OAAAb,qBAAA,CAAsBc,GAAA,CAAIN,UAAU;EAAA,CAC9C;EAEL,QAAQ,MAAMW,OAAQ,CAAAC,GAAA,CAAId,YAAY,GAAGe,IAAA,CAAK,IAAI;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}