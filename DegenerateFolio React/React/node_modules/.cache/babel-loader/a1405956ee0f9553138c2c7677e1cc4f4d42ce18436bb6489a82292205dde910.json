{"ast":null,"code":"\"use strict\";\n\nfunction processX(base, ids, depth, result, tags) {\n  const id = ids[depth];\n  for (let i = 0; i < id.length; i++) {\n    const value = id[i];\n    if (depth < ids.length - 1) {\n      processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n    } else {\n      tags.push(base.replace(result[depth], value));\n    }\n  }\n}\nfunction createStringVariations(string) {\n  const regex = /\\{(.*?)\\}/g;\n  const result = string.match(regex);\n  const tags = [];\n  if (result) {\n    const ids = [];\n    result.forEach(vars => {\n      const split = vars.substring(1, vars.length - 1).split(\",\");\n      ids.push(split);\n    });\n    processX(string, ids, 0, result, tags);\n  } else {\n    tags.push(string);\n  }\n  return tags;\n}\nexport { createStringVariations };","map":{"version":3,"names":["processX","base","ids","depth","result","tags","id","i","length","value","replace","push","createStringVariations","string","regex","match","forEach","vars","split","substring"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/assets/utils/createStringVariations.ts"],"sourcesContent":["function processX(base: string, ids: string[][], depth: number, result: string[], tags: string[])\n{\n    const id = ids[depth];\n\n    for (let i = 0; i < id.length; i++)\n    {\n        const value = id[i];\n\n        if (depth < ids.length - 1)\n        {\n            processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n        }\n        else\n        {\n            tags.push(base.replace(result[depth], value));\n        }\n    }\n}\n\n/**\n * Creates a list of all possible combinations of the given strings.\n * @example\n * const out2 = createStringVariations('name is {chicken,wolf,sheep}');\n * console.log(out2); // [ 'name is chicken', 'name is wolf', 'name is sheep' ]\n * @param string - The string to process\n */\nexport function createStringVariations(string: string): string[]\n{\n    const regex = /\\{(.*?)\\}/g;\n\n    const result = string.match(regex);\n\n    const tags: string[] = [];\n\n    if (result)\n    {\n        const ids: string[][] = [];\n\n        result.forEach((vars) =>\n        {\n            // first remove the brackets...\n            const split = vars.substring(1, vars.length - 1).split(',');\n\n            ids.push(split);\n        });\n\n        processX(string, ids, 0, result, tags);\n    }\n    else\n    {\n        tags.push(string);\n    }\n\n    return tags;\n}\n"],"mappings":";;AAAA,SAASA,QAASA,CAAAC,IAAA,EAAcC,GAAiB,EAAAC,KAAA,EAAeC,MAAA,EAAkBC,IAClF;EACU,MAAAC,EAAA,GAAKJ,GAAA,CAAIC,KAAK;EAEpB,SAASI,CAAI,MAAGA,CAAI,GAAAD,EAAA,CAAGE,MAAA,EAAQD,CAC/B;IACU,MAAAE,KAAA,GAAQH,EAAA,CAAGC,CAAC;IAEd,IAAAJ,KAAA,GAAQD,GAAI,CAAAM,MAAA,GAAS,CACzB;MACaR,QAAA,CAAAC,IAAA,CAAKS,OAAQ,CAAAN,MAAA,CAAOD,KAAK,GAAGM,KAAK,GAAGP,GAAK,EAAAC,KAAA,GAAQ,CAAG,EAAAC,MAAA,EAAQC,IAAI;IAAA,CAG7E;MACIA,IAAA,CAAKM,IAAA,CAAKV,IAAK,CAAAS,OAAA,CAAQN,MAAA,CAAOD,KAAK,GAAGM,KAAK,CAAC;IAAA;EAChD;AAER;AASO,SAASG,uBAAuBC,MACvC;EACI,MAAMC,KAAQ;EAER,MAAAV,MAAA,GAASS,MAAO,CAAAE,KAAA,CAAMD,KAAK;EAEjC,MAAMT,IAAA,GAAiB,EAAC;EAExB,IAAID,MACJ;IACI,MAAMF,GAAA,GAAkB,EAAC;IAElBE,MAAA,CAAAY,OAAA,CAASC,IAChB;MAEU,MAAAC,KAAA,GAAQD,IAAA,CAAKE,SAAU,IAAGF,IAAA,CAAKT,MAAS,IAAC,CAAE,CAAAU,KAAA,CAAM,GAAG;MAE1DhB,GAAA,CAAIS,IAAA,CAAKO,KAAK;IAAA,CACjB;IAEDlB,QAAA,CAASa,MAAQ,EAAAX,GAAA,EAAK,CAAG,EAAAE,MAAA,EAAQC,IAAI;EAAA,CAGzC;IACIA,IAAA,CAAKM,IAAA,CAAKE,MAAM;EAAA;EAGb,OAAAR,IAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}