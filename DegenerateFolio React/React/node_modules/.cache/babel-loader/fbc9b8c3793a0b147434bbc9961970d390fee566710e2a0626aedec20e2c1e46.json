{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\"use strict\";\nclass GpuDeviceSystem {\n  /**\n   * @param {WebGPURenderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  async init(options) {\n    if (this._initPromise) return this._initPromise;\n    this._initPromise = this._createDeviceAndAdaptor(options).then(gpu => {\n      this.gpu = gpu;\n      this._renderer.runners.contextChange.emit(this.gpu);\n    });\n    return this._initPromise;\n  }\n  /**\n   * Handle the context change event\n   * @param gpu\n   */\n  contextChange(gpu) {\n    this._renderer.gpu = gpu;\n  }\n  /**\n   * Helper class to create a WebGL Context\n   * @param {object} options - An options object that gets passed in to the canvas element containing the\n   *    context attributes\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n   * @returns {WebGLRenderingContext} the WebGL context\n   */\n  async _createDeviceAndAdaptor(options) {\n    const adapter = await navigator.gpu.requestAdapter({\n      powerPreference: options.powerPreference,\n      forceFallbackAdapter: options.forceFallbackAdapter\n    });\n    const requiredFeatures = [\"texture-compression-bc\", \"texture-compression-astc\", \"texture-compression-etc2\"].filter(feature => adapter.features.has(feature));\n    const device = await adapter.requestDevice({\n      requiredFeatures\n    });\n    return {\n      adapter,\n      device\n    };\n  }\n  destroy() {\n    this.gpu = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuDeviceSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"device\"\n};\n/** The default options for the GpuDeviceSystem. */\nGpuDeviceSystem.defaultOptions = {\n  /**\n   * {@link WebGPUOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * Force the use of the fallback adapter\n   * @default false\n   */\n  forceFallbackAdapter: false\n};\nexport { GpuDeviceSystem };","map":{"version":3,"names":["GpuDeviceSystem","constructor","renderer","_renderer","init","options","_initPromise","_createDeviceAndAdaptor","then","gpu","runners","contextChange","emit","adapter","navigator","requestAdapter","powerPreference","forceFallbackAdapter","requiredFeatures","filter","feature","features","has","device","requestDevice","destroy","extension","type","ExtensionType","WebGPUSystem","name","defaultOptions"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/GpuDeviceSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { GpuPowerPreference } from '../types';\nimport type { WebGPURenderer } from './WebGPURenderer';\n\n/** The GPU object. */\nexport interface GPU\n{\n    /** The GPU adapter */\n    adapter: GPUAdapter;\n    /** The GPU device */\n    device: GPUDevice;\n}\n\n/**\n * Options for the WebGPU context.\n * @property {GpuPowerPreference} [powerPreference=default] - An optional hint indicating what configuration of GPU\n * is suitable for the WebGPU context, can be `'high-performance'` or `'low-power'`.\n * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n * while setting to `'low-power'` will prioritize power saving over rendering performance.\n * @property {boolean} [forceFallbackAdapter=false] - Force the use of the fallback adapter\n * @memberof rendering\n */\nexport interface GpuContextOptions\n{\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGPU context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @default undefined\n     * @memberof rendering.WebGPUOptions\n     */\n    powerPreference?: GpuPowerPreference;\n    /**\n     * Force the use of the fallback adapter\n     * @default false\n     * @memberof rendering.WebGPUOptions\n     */\n    forceFallbackAdapter: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @class\n * @memberof rendering\n */\nexport class GpuDeviceSystem implements System<GpuContextOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'device',\n    } as const;\n\n    /** The default options for the GpuDeviceSystem. */\n    public static defaultOptions: GpuContextOptions = {\n        /**\n         * {@link WebGPUOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * Force the use of the fallback adapter\n         * @default false\n         */\n        forceFallbackAdapter: false,\n    };\n\n    /** The GPU device */\n    public gpu: GPU;\n\n    private _renderer: WebGPURenderer;\n    private _initPromise: Promise<void>;\n\n    /**\n     * @param {WebGPURenderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGPURenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public async init(options: GpuContextOptions): Promise<void>\n    {\n        if (this._initPromise) return this._initPromise;\n\n        this._initPromise = this._createDeviceAndAdaptor(options)\n            .then((gpu) =>\n            {\n                this.gpu = gpu;\n\n                this._renderer.runners.contextChange.emit(this.gpu);\n            });\n\n        return this._initPromise;\n    }\n\n    /**\n     * Handle the context change event\n     * @param gpu\n     */\n    protected contextChange(gpu: GPU): void\n    {\n        this._renderer.gpu = gpu;\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param {object} options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    private async _createDeviceAndAdaptor(options: GpuContextOptions): Promise<GPU>\n    {\n        // TODO we only need one of these..\n        const adapter = await navigator.gpu.requestAdapter({\n            powerPreference: options.powerPreference,\n            forceFallbackAdapter: options.forceFallbackAdapter,\n        });\n\n        const requiredFeatures = [\n            'texture-compression-bc',\n            'texture-compression-astc',\n            'texture-compression-etc2',\n        ].filter((feature) => adapter.features.has(feature)) as GPUFeatureName[];\n\n        // TODO and one of these!\n        const device = await adapter.requestDevice({\n            requiredFeatures\n        });\n\n        return { adapter, device };\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n        this._renderer = null;\n    }\n}\n"],"mappings":";;AAgDO,MAAMA,eACb;EAAA;AAAA;AAAA;EAgCIC,YAAYC,QACZ;IACI,KAAKC,SAAY,GAAAD,QAAA;EAAA;EAGrB,MAAaE,KAAKC,OAClB;IACI,IAAI,IAAK,CAAAC,YAAA,EAAc,OAAO,IAAK,CAAAA,YAAA;IAEnC,KAAKA,YAAA,GAAe,IAAK,CAAAC,uBAAA,CAAwBF,OAAO,CACnD,CAAAG,IAAA,CAAMC,GACP;MACI,KAAKA,GAAM,GAAAA,GAAA;MAEX,KAAKN,SAAU,CAAAO,OAAA,CAAQC,aAAc,CAAAC,IAAA,CAAK,KAAKH,GAAG;IAAA,CACrD;IAEL,OAAO,IAAK,CAAAH,YAAA;EAAA;EAChB;AAAA;AAAA;AAAA;EAMUK,cAAcF,GACxB;IACI,KAAKN,SAAA,CAAUM,GAAM,GAAAA,GAAA;EAAA;EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAcF,wBAAwBF,OACtC;IAEI,MAAMQ,OAAU,SAAMC,SAAU,CAAAL,GAAA,CAAIM,cAAe;MAC/CC,eAAA,EAAiBX,OAAQ,CAAAW,eAAA;MACzBC,oBAAA,EAAsBZ,OAAQ,CAAAY;IAAA,CACjC;IAED,MAAMC,gBAAmB,IACrB,0BACA,4BACA,2BACJ,CAAEC,MAAA,CAAQC,OAAA,IAAYP,OAAA,CAAQQ,QAAS,CAAAC,GAAA,CAAIF,OAAO,CAAC;IAG7C,MAAAG,MAAA,GAAS,MAAMV,OAAA,CAAQW,aAAc;MACvCN;IAAA,CACH;IAEM;MAAEL,OAAA;MAASU;IAAO;EAAA;EAGtBE,OACPA,CAAA;IACI,KAAKhB,GAAM;IACX,KAAKN,SAAY;EAAA;AAEzB;AAAA;AAhGaH,eAAA,CAGK0B,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,YAAA,CAClB;EACAC,IAAM;AACV;AAAA;AARS9B,eAAA,CAWK+B,cAAoC;EAAA;AAAA;AAAA;AAAA;EAK9Cf,eAAiB;EAAA;AAAA;AAAA;AAAA;EAKjBC,oBAAsB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}