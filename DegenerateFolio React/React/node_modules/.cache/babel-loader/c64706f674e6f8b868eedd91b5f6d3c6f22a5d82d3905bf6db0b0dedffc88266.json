{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction getPrev(api) {\n  return api.query.society.candidates().pipe(switchMap(candidates => combineLatest([of(candidates), api.query.society['suspendedCandidates'].multi(candidates.map(_ref => {\n    let {\n      who\n    } = _ref;\n    return who;\n  }))])), map(_ref2 => {\n    let [candidates, suspended] = _ref2;\n    return candidates.map((_ref3, index) => {\n      let {\n        kind,\n        value,\n        who\n      } = _ref3;\n      return {\n        accountId: who,\n        isSuspended: suspended[index].isSome,\n        kind,\n        value\n      };\n    });\n  }));\n}\nfunction getCurr(api) {\n  return api.query.society.candidates.entries().pipe(map(entries => entries.filter(_ref4 => {\n    let [, opt] = _ref4;\n    return opt.isSome;\n  }).map(_ref5 => {\n    let [{\n      args: [accountId]\n    }, opt] = _ref5;\n    return [accountId, opt.unwrap()];\n  })\n  // FIXME We are missing the new fields from the candidate record\n  .map(_ref6 => {\n    let [accountId, {\n      bid,\n      kind\n    }] = _ref6;\n    return {\n      accountId,\n      isSuspended: false,\n      kind,\n      value: bid\n    };\n  })));\n}\n/**\n * @description Get the candidate info for a society\n */\nexport function candidates(instanceId, api) {\n  return memo(instanceId, () => api.query.society['suspendedCandidates'] && api.query.society.candidates.creator.meta.type.isPlain ? getPrev(api) : getCurr(api));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","memo","getPrev","api","query","society","candidates","pipe","multi","_ref","who","_ref2","suspended","_ref3","index","kind","value","accountId","isSuspended","isSome","getCurr","entries","filter","_ref4","opt","_ref5","args","unwrap","_ref6","bid","instanceId","creator","meta","type","isPlain"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/society/candidates.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction getPrev(api) {\n    return api.query.society.candidates().pipe(switchMap((candidates) => combineLatest([\n        of(candidates),\n        api.query.society['suspendedCandidates'].multi(candidates.map(({ who }) => who))\n    ])), map(([candidates, suspended]) => candidates.map(({ kind, value, who }, index) => ({\n        accountId: who,\n        isSuspended: suspended[index].isSome,\n        kind,\n        value\n    }))));\n}\nfunction getCurr(api) {\n    return api.query.society.candidates.entries().pipe(map((entries) => entries\n        .filter(([, opt]) => opt.isSome)\n        .map(([{ args: [accountId] }, opt]) => [accountId, opt.unwrap()])\n        // FIXME We are missing the new fields from the candidate record\n        .map(([accountId, { bid, kind }]) => ({\n        accountId,\n        isSuspended: false,\n        kind,\n        value: bid\n    }))));\n}\n/**\n * @description Get the candidate info for a society\n */\nexport function candidates(instanceId, api) {\n    return memo(instanceId, () => api.query.society['suspendedCandidates'] && api.query.society.candidates.creator.meta.type.isPlain\n        ? getPrev(api)\n        : getCurr(api));\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACxD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,OAAOA,CAACC,GAAG,EAAE;EAClB,OAAOA,GAAG,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAACP,SAAS,CAAEM,UAAU,IAAKT,aAAa,CAAC,CAC/EE,EAAE,CAACO,UAAU,CAAC,EACdH,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAACG,KAAK,CAACF,UAAU,CAACR,GAAG,CAACW,IAAA;IAAA,IAAC;MAAEC;IAAI,CAAC,GAAAD,IAAA;IAAA,OAAKC,GAAG;EAAA,EAAC,CAAC,CACnF,CAAC,CAAC,EAAEZ,GAAG,CAACa,KAAA;IAAA,IAAC,CAACL,UAAU,EAAEM,SAAS,CAAC,GAAAD,KAAA;IAAA,OAAKL,UAAU,CAACR,GAAG,CAAC,CAAAe,KAAA,EAAuBC,KAAK;MAAA,IAA3B;QAAEC,IAAI;QAAEC,KAAK;QAAEN;MAAI,CAAC,GAAAG,KAAA;MAAA,OAAa;QACnFI,SAAS,EAAEP,GAAG;QACdQ,WAAW,EAAEN,SAAS,CAACE,KAAK,CAAC,CAACK,MAAM;QACpCJ,IAAI;QACJC;MACJ,CAAC;IAAA,CAAC,CAAC;EAAA,EAAC,CAAC;AACT;AACA,SAASI,OAAOA,CAACjB,GAAG,EAAE;EAClB,OAAOA,GAAG,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAACe,OAAO,CAAC,CAAC,CAACd,IAAI,CAACT,GAAG,CAAEuB,OAAO,IAAKA,OAAO,CACtEC,MAAM,CAACC,KAAA;IAAA,IAAC,GAAGC,GAAG,CAAC,GAAAD,KAAA;IAAA,OAAKC,GAAG,CAACL,MAAM;EAAA,EAAC,CAC/BrB,GAAG,CAAC2B,KAAA;IAAA,IAAC,CAAC;MAAEC,IAAI,EAAE,CAACT,SAAS;IAAE,CAAC,EAAEO,GAAG,CAAC,GAAAC,KAAA;IAAA,OAAK,CAACR,SAAS,EAAEO,GAAG,CAACG,MAAM,CAAC,CAAC,CAAC;EAAA;EAChE;EAAA,CACC7B,GAAG,CAAC8B,KAAA;IAAA,IAAC,CAACX,SAAS,EAAE;MAAEY,GAAG;MAAEd;IAAK,CAAC,CAAC,GAAAa,KAAA;IAAA,OAAM;MACtCX,SAAS;MACTC,WAAW,EAAE,KAAK;MAClBH,IAAI;MACJC,KAAK,EAAEa;IACX,CAAC;EAAA,CAAC,CAAC,CAAC,CAAC;AACT;AACA;AACA;AACA;AACA,OAAO,SAASvB,UAAUA,CAACwB,UAAU,EAAE3B,GAAG,EAAE;EACxC,OAAOF,IAAI,CAAC6B,UAAU,EAAE,MAAM3B,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC,qBAAqB,CAAC,IAAIF,GAAG,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAACyB,OAAO,CAACC,IAAI,CAACC,IAAI,CAACC,OAAO,GAC1HhC,OAAO,CAACC,GAAG,CAAC,GACZiB,OAAO,CAACjB,GAAG,CAAC,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}