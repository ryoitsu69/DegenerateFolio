{"ast":null,"code":"import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { ObservablePoint } from '../../maths/point/ObservablePoint.mjs';\n\"use strict\";\nclass Transform {\n  /**\n   * @param options - Options for the transform.\n   * @param options.matrix - The matrix to use.\n   * @param options.observer - The observer to use.\n   */\n  constructor({\n    matrix,\n    observer\n  } = {}) {\n    this.dirty = true;\n    this._matrix = matrix ?? new Matrix();\n    this.observer = observer;\n    this.position = new ObservablePoint(this, 0, 0);\n    this.scale = new ObservablePoint(this, 1, 1);\n    this.pivot = new ObservablePoint(this, 0, 0);\n    this.skew = new ObservablePoint(this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n  }\n  /**\n   * This matrix is computed by combining this Transforms position, scale, rotation, skew, and pivot\n   * properties into a single matrix.\n   * @readonly\n   */\n  get matrix() {\n    const lt = this._matrix;\n    if (!this.dirty) return lt;\n    lt.a = this._cx * this.scale.x;\n    lt.b = this._sx * this.scale.x;\n    lt.c = this._cy * this.scale.y;\n    lt.d = this._sy * this.scale.y;\n    lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n    lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n    this.dirty = false;\n    return lt;\n  }\n  /**\n   * Called when a value changes.\n   * @param point\n   * @internal\n   * @private\n   */\n  _onUpdate(point) {\n    this.dirty = true;\n    if (point === this.skew) {\n      this.updateSkew();\n    }\n    this.observer?._onUpdate(this);\n  }\n  /** Called when the skew or the rotation changes. */\n  updateSkew() {\n    this._cx = Math.cos(this._rotation + this.skew.y);\n    this._sx = Math.sin(this._rotation + this.skew.y);\n    this._cy = -Math.sin(this._rotation - this.skew.x);\n    this._sy = Math.cos(this._rotation - this.skew.x);\n    this.dirty = true;\n  }\n  toString() {\n    return `[pixi.js/math:Transform position=(${this.position.x}, ${this.position.y}) rotation=${this.rotation} scale=(${this.scale.x}, ${this.scale.y}) skew=(${this.skew.x}, ${this.skew.y}) ]`;\n  }\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   * @param matrix - The matrix to decompose\n   */\n  setFromMatrix(matrix) {\n    matrix.decompose(this);\n    this.dirty = true;\n  }\n  /** The rotation of the object in radians. */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation !== value) {\n      this._rotation = value;\n      this._onUpdate(this.skew);\n    }\n  }\n}\nexport { Transform };","map":{"version":3,"names":["Transform","constructor","matrix","observer","dirty","_matrix","Matrix","position","ObservablePoint","scale","pivot","skew","_rotation","_cx","_sx","_cy","_sy","lt","a","x","b","c","y","d","tx","ty","_onUpdate","point","updateSkew","Math","cos","sin","toString","rotation","setFromMatrix","decompose","value"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/misc/Transform.ts"],"sourcesContent":["import { Matrix } from '../../maths/matrix/Matrix';\nimport { ObservablePoint } from '../../maths/point/ObservablePoint';\n\nimport type { Observer } from '../../maths/point/ObservablePoint';\n\n/**\n * Options for the {@link utils.Transform} constructor.\n * @memberof utils.Transform\n */\nexport interface TransformOptions\n{\n    /** The matrix to use. */\n    matrix?: Matrix;\n    /** The observer to use. */\n    observer?: {_onUpdate: (transform: Transform) => void}\n}\n\n/**\n * The Transform class facilitates the manipulation of a 2D transformation matrix through\n * user-friendly properties: position, scale, rotation, skew, and pivot.\n * @memberof utils\n */\nexport class Transform\n{\n    /**\n     * The local transformation matrix.\n     * @internal\n     * @private\n     */\n    public _matrix: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the container that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    protected dirty = true;\n    protected observer: Observer<Transform>;\n\n    /**\n     * @param options - Options for the transform.\n     * @param options.matrix - The matrix to use.\n     * @param options.observer - The observer to use.\n     */\n    constructor({ matrix, observer }: TransformOptions = {})\n    {\n        this._matrix = matrix ?? new Matrix();\n        this.observer = observer;\n\n        this.position = new ObservablePoint(this, 0, 0);\n        this.scale = new ObservablePoint(this, 1, 1);\n        this.pivot = new ObservablePoint(this, 0, 0);\n        this.skew = new ObservablePoint(this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n    }\n\n    /**\n     * This matrix is computed by combining this Transforms position, scale, rotation, skew, and pivot\n     * properties into a single matrix.\n     * @readonly\n     */\n    get matrix(): Matrix\n    {\n        const lt = this._matrix;\n\n        if (!this.dirty) return lt;\n\n        lt.a = this._cx * this.scale.x;\n        lt.b = this._sx * this.scale.x;\n        lt.c = this._cy * this.scale.y;\n        lt.d = this._sy * this.scale.y;\n\n        lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n        lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n\n        this.dirty = false;\n\n        return lt;\n    }\n    /**\n     * Called when a value changes.\n     * @param point\n     * @internal\n     * @private\n     */\n    public _onUpdate(point?: ObservablePoint): void\n    {\n        this.dirty = true;\n\n        if (point === this.skew)\n        {\n            this.updateSkew();\n        }\n\n        this.observer?._onUpdate(this);\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this.dirty = true;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    public setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this.dirty = true;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this._onUpdate(this.skew);\n        }\n    }\n}\n"],"mappings":";;;AAsBO,MAAMA,SACb;EAAA;AAAA;AAAA;AAAA;AAAA;EAuDIC,YAAY;IAAEC,MAAA;IAAQC;EAAS,IAAsB,EACrD;IATA,KAAUC,KAAQ;IAUT,KAAAC,OAAA,GAAUH,MAAU,QAAII,MAAO;IACpC,KAAKH,QAAW,GAAAA,QAAA;IAEhB,KAAKI,QAAW,OAAIC,eAAgB,OAAM,GAAG,CAAC;IAC9C,KAAKC,KAAQ,OAAID,eAAgB,OAAM,GAAG,CAAC;IAC3C,KAAKE,KAAQ,OAAIF,eAAgB,OAAM,GAAG,CAAC;IAC3C,KAAKG,IAAO,OAAIH,eAAgB,OAAM,GAAG,CAAC;IAE1C,KAAKI,SAAY;IACjB,KAAKC,GAAM;IACX,KAAKC,GAAM;IACX,KAAKC,GAAM;IACX,KAAKC,GAAM;EAAA;EACf;AAAA;AAAA;AAAA;AAAA;EAOA,IAAId,MACJA,CAAA;IACI,MAAMe,EAAA,GAAK,IAAK,CAAAZ,OAAA;IAEhB,IAAI,CAAC,IAAK,CAAAD,KAAA,EAAc,OAAAa,EAAA;IAExBA,EAAA,CAAGC,CAAI,QAAKL,GAAM,QAAKJ,KAAM,CAAAU,CAAA;IAC7BF,EAAA,CAAGG,CAAI,QAAKN,GAAM,QAAKL,KAAM,CAAAU,CAAA;IAC7BF,EAAA,CAAGI,CAAI,QAAKN,GAAM,QAAKN,KAAM,CAAAa,CAAA;IAC7BL,EAAA,CAAGM,CAAI,QAAKP,GAAM,QAAKP,KAAM,CAAAa,CAAA;IAE7BL,EAAA,CAAGO,EAAK,QAAKjB,QAAS,CAAAY,CAAA,IAAM,IAAK,CAAAT,KAAA,CAAMS,CAAI,GAAAF,EAAA,CAAGC,CAAM,QAAKR,KAAM,CAAAY,CAAA,GAAIL,EAAG,CAAAI,CAAA;IACtEJ,EAAA,CAAGQ,EAAK,QAAKlB,QAAS,CAAAe,CAAA,IAAM,IAAK,CAAAZ,KAAA,CAAMS,CAAI,GAAAF,EAAA,CAAGG,CAAM,QAAKV,KAAM,CAAAY,CAAA,GAAIL,EAAG,CAAAM,CAAA;IAEtE,KAAKnB,KAAQ;IAEN,OAAAa,EAAA;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;AAAA;EAOOS,UAAUC,KACjB;IACI,KAAKvB,KAAQ;IAET,IAAAuB,KAAA,KAAU,KAAKhB,IACnB;MACI,KAAKiB,UAAW;IAAA;IAGf,KAAAzB,QAAA,EAAUuB,SAAA,CAAU,IAAI;EAAA;EACjC;EAGUE,UACVA,CAAA;IACI,KAAKf,GAAA,GAAMgB,IAAK,CAAAC,GAAA,CAAI,KAAKlB,SAAY,QAAKD,IAAA,CAAKW,CAAC;IAChD,KAAKR,GAAA,GAAMe,IAAK,CAAAE,GAAA,CAAI,KAAKnB,SAAY,QAAKD,IAAA,CAAKW,CAAC;IAC3C,KAAAP,GAAA,GAAM,CAACc,IAAK,CAAAE,GAAA,CAAI,KAAKnB,SAAY,QAAKD,IAAA,CAAKQ,CAAC;IACjD,KAAKH,GAAA,GAAMa,IAAK,CAAAC,GAAA,CAAI,KAAKlB,SAAY,QAAKD,IAAA,CAAKQ,CAAC;IAEhD,KAAKf,KAAQ;EAAA;EAIV4B,QACPA,CAAA;IACW,4CACY,IAAK,CAAAzB,QAAA,CAASY,CAAC,KAAK,IAAK,CAAAZ,QAAA,CAASe,CAAC,cACpC,IAAK,CAAAW,QACP,gBAAKxB,KAAA,CAAMU,CAAC,KAAK,IAAK,CAAAV,KAAA,CAAMa,CAAC,WAC9B,IAAK,CAAAX,IAAA,CAAKQ,CAAC,KAAK,IAAK,CAAAR,IAAA,CAAKW,CAAC;EAAA;EAE9C;AAAA;AAAA;AAAA;EAOOY,cAAchC,MACrB;IACIA,MAAA,CAAOiC,SAAA,CAAU,IAAI;IACrB,KAAK/B,KAAQ;EAAA;EACjB;EAGA,IAAI6B,QACJA,CAAA;IACI,OAAO,IAAK,CAAArB,SAAA;EAAA;EAGhB,IAAIqB,SAASG,KACb;IACQ,SAAKxB,SAAA,KAAcwB,KACvB;MACI,KAAKxB,SAAY,GAAAwB,KAAA;MACZ,KAAAV,SAAA,CAAU,KAAKf,IAAI;IAAA;EAC5B;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}