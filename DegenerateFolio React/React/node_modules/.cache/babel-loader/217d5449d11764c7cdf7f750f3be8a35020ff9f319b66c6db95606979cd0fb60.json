{"ast":null,"code":"import { isWebGLSupported } from '../../../../../utils/browser/isWebGLSupported.mjs';\nimport { isWebGPUSupported } from '../../../../../utils/browser/isWebGPUSupported.mjs';\nimport { getSupportedGlCompressedTextureFormats } from '../../../gl/texture/utils/getSupportedGlCompressedTextureFormats.mjs';\nimport { getSupportedGPUCompressedTextureFormats } from '../../../gpu/texture/utils/getSupportedGPUCompressedTextureFormats.mjs';\n\"use strict\";\nlet supportedCompressedTextureFormats;\nasync function getSupportedCompressedTextureFormats() {\n  if (supportedCompressedTextureFormats !== void 0) return supportedCompressedTextureFormats;\n  supportedCompressedTextureFormats = await (async () => {\n    const _isWebGPUSupported = await isWebGPUSupported();\n    const _isWebGLSupported = isWebGLSupported();\n    if (_isWebGPUSupported && _isWebGLSupported) {\n      const gpuTextureFormats = await getSupportedGPUCompressedTextureFormats();\n      const glTextureFormats = getSupportedGlCompressedTextureFormats();\n      return gpuTextureFormats.filter(format => glTextureFormats.includes(format));\n    } else if (_isWebGPUSupported) {\n      return await getSupportedGPUCompressedTextureFormats();\n    } else if (_isWebGLSupported) {\n      return getSupportedGlCompressedTextureFormats();\n    }\n    return [];\n  })();\n  return supportedCompressedTextureFormats;\n}\nexport { getSupportedCompressedTextureFormats };","map":{"version":3,"names":["supportedCompressedTextureFormats","getSupportedCompressedTextureFormats","_isWebGPUSupported","isWebGPUSupported","_isWebGLSupported","isWebGLSupported","gpuTextureFormats","getSupportedGPUCompressedTextureFormats","glTextureFormats","getSupportedGlCompressedTextureFormats","filter","format","includes"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/getSupportedCompressedTextureFormats.ts"],"sourcesContent":["import { isWebGLSupported } from '../../../../../utils/browser/isWebGLSupported';\nimport { isWebGPUSupported } from '../../../../../utils/browser/isWebGPUSupported';\nimport { getSupportedGlCompressedTextureFormats } from '../../../gl/texture/utils/getSupportedGlCompressedTextureFormats';\nimport { getSupportedGPUCompressedTextureFormats } from '../../../gpu/texture/utils/getSupportedGPUCompressedTextureFormats';\n\nimport type { TEXTURE_FORMATS } from '../const';\n\nlet supportedCompressedTextureFormats: TEXTURE_FORMATS[];\n\nexport async function getSupportedCompressedTextureFormats(): Promise<TEXTURE_FORMATS[]>\n{\n    if (supportedCompressedTextureFormats !== undefined) return supportedCompressedTextureFormats;\n\n    supportedCompressedTextureFormats = await (async (): Promise<TEXTURE_FORMATS[]> =>\n    {\n        // find only overlapping ones..\n        const _isWebGPUSupported = await isWebGPUSupported();\n        const _isWebGLSupported = isWebGLSupported();\n\n        if (_isWebGPUSupported && _isWebGLSupported)\n        {\n            const gpuTextureFormats = await getSupportedGPUCompressedTextureFormats();\n            const glTextureFormats = getSupportedGlCompressedTextureFormats();\n\n            return gpuTextureFormats.filter((format) => glTextureFormats.includes(format));\n        }\n        else if (_isWebGPUSupported)\n        {\n            return await getSupportedGPUCompressedTextureFormats();\n        }\n        else if (_isWebGLSupported)\n        {\n            return getSupportedGlCompressedTextureFormats();\n        }\n\n        return [];\n    })();\n\n    return supportedCompressedTextureFormats;\n}\n"],"mappings":";;;;;AAOA,IAAIA,iCAAA;AAEJ,eAAsBC,oCACtBA,CAAA;EACI,IAAID,iCAAsC,aAAkB,OAAAA,iCAAA;EAE5DA,iCAAA,GAAoC,OAAO,YAC3C;IAEU,MAAAE,kBAAA,GAAqB,MAAMC,iBAAkB;IACnD,MAAMC,iBAAA,GAAoBC,gBAAiB;IAE3C,IAAIH,kBAAA,IAAsBE,iBAC1B;MACU,MAAAE,iBAAA,GAAoB,MAAMC,uCAAwC;MACxE,MAAMC,gBAAA,GAAmBC,sCAAuC;MAEhE,OAAOH,iBAAA,CAAkBI,MAAO,CAACC,MAAA,IAAWH,gBAAiB,CAAAI,QAAA,CAASD,MAAM,CAAC;IAAA,WAExET,kBACT;MACI,OAAO,MAAMK,uCAAwC;IAAA,WAEhDH,iBACT;MACI,OAAOK,sCAAuC;IAAA;IAGlD,OAAO,EAAC;EAAA,CACT;EAEI,OAAAT,iCAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}