{"ast":null,"code":"import { ENV, BUFFER_BITS, MSAA_QUALITY } from \"@pixi/constants\";\nimport { ExtensionType, extensions } from \"@pixi/extensions\";\nimport { Rectangle } from \"@pixi/math\";\nimport { settings } from \"@pixi/settings\";\nimport { Framebuffer } from \"./Framebuffer.mjs\";\nimport { GLFramebuffer } from \"./GLFramebuffer.mjs\";\nconst tempRectangle = new Rectangle();\nclass FramebufferSystem {\n  /**\n   * @param renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer, this.managedFramebuffers = [], this.unknownFramebuffer = new Framebuffer(10, 10), this.msaaSamples = null;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    this.disposeAll(!0);\n    const gl = this.gl = this.renderer.gl;\n    if (this.CONTEXT_UID = this.renderer.CONTEXT_UID, this.current = this.unknownFramebuffer, this.viewport = new Rectangle(), this.hasMRT = !0, this.writeDepthTexture = !0, this.renderer.context.webGLVersion === 1) {\n      let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers,\n        nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n      settings.PREFER_ENV === ENV.WEBGL_LEGACY && (nativeDrawBuffersExtension = null, nativeDepthTextureExtension = null), nativeDrawBuffersExtension ? gl.drawBuffers = activeTextures => nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures) : (this.hasMRT = !1, gl.drawBuffers = () => {}), nativeDepthTextureExtension || (this.writeDepthTexture = !1);\n    } else this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n  }\n  /**\n   * Bind a framebuffer.\n   * @param framebuffer\n   * @param frame - frame, default is framebuffer size\n   * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n   */\n  bind(framebuffer, frame, mipLevel = 0) {\n    const {\n      gl\n    } = this;\n    if (framebuffer) {\n      const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n      this.current !== framebuffer && (this.current = framebuffer, gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer)), fbo.mipLevel !== mipLevel && (framebuffer.dirtyId++, framebuffer.dirtyFormat++, fbo.mipLevel = mipLevel), fbo.dirtyId !== framebuffer.dirtyId && (fbo.dirtyId = framebuffer.dirtyId, fbo.dirtyFormat !== framebuffer.dirtyFormat ? (fbo.dirtyFormat = framebuffer.dirtyFormat, fbo.dirtySize = framebuffer.dirtySize, this.updateFramebuffer(framebuffer, mipLevel)) : fbo.dirtySize !== framebuffer.dirtySize && (fbo.dirtySize = framebuffer.dirtySize, this.resizeFramebuffer(framebuffer)));\n      for (let i = 0; i < framebuffer.colorTextures.length; i++) {\n        const tex = framebuffer.colorTextures[i];\n        this.renderer.texture.unbind(tex.parentTextureArray || tex);\n      }\n      if (framebuffer.depthTexture && this.renderer.texture.unbind(framebuffer.depthTexture), frame) {\n        const mipWidth = frame.width >> mipLevel,\n          mipHeight = frame.height >> mipLevel,\n          scale = mipWidth / frame.width;\n        this.setViewport(frame.x * scale, frame.y * scale, mipWidth, mipHeight);\n      } else {\n        const mipWidth = framebuffer.width >> mipLevel,\n          mipHeight = framebuffer.height >> mipLevel;\n        this.setViewport(0, 0, mipWidth, mipHeight);\n      }\n    } else this.current && (this.current = null, gl.bindFramebuffer(gl.FRAMEBUFFER, null)), frame ? this.setViewport(frame.x, frame.y, frame.width, frame.height) : this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n  }\n  /**\n   * Set the WebGLRenderingContext's viewport.\n   * @param x - X position of viewport\n   * @param y - Y position of viewport\n   * @param width - Width of viewport\n   * @param height - Height of viewport\n   */\n  setViewport(x, y, width, height) {\n    const v = this.viewport;\n    x = Math.round(x), y = Math.round(y), width = Math.round(width), height = Math.round(height), (v.width !== width || v.height !== height || v.x !== x || v.y !== y) && (v.x = x, v.y = y, v.width = width, v.height = height, this.gl.viewport(x, y, width, height));\n  }\n  /**\n   * Get the size of the current width and height. Returns object with `width` and `height` values.\n   * @readonly\n   */\n  get size() {\n    return this.current ? {\n      x: 0,\n      y: 0,\n      width: this.current.width,\n      height: this.current.height\n    } : {\n      x: 0,\n      y: 0,\n      width: this.renderer.width,\n      height: this.renderer.height\n    };\n  }\n  /**\n   * Clear the color of the context\n   * @param r - Red value from 0 to 1\n   * @param g - Green value from 0 to 1\n   * @param b - Blue value from 0 to 1\n   * @param a - Alpha value from 0 to 1\n   * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n   *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n   */\n  clear(r, g, b, a, mask = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH) {\n    const {\n      gl\n    } = this;\n    gl.clearColor(r, g, b, a), gl.clear(mask);\n  }\n  /**\n   * Initialize framebuffer for this context\n   * @protected\n   * @param framebuffer\n   * @returns - created GLFramebuffer\n   */\n  initFramebuffer(framebuffer) {\n    const {\n        gl\n      } = this,\n      fbo = new GLFramebuffer(gl.createFramebuffer());\n    return fbo.multisample = this.detectSamples(framebuffer.multisample), framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo, this.managedFramebuffers.push(framebuffer), framebuffer.disposeRunner.add(this), fbo;\n  }\n  /**\n   * Resize the framebuffer\n   * @param framebuffer\n   * @protected\n   */\n  resizeFramebuffer(framebuffer) {\n    const {\n        gl\n      } = this,\n      fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (fbo.stencil) {\n      gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n      let stencilFormat;\n      this.renderer.context.webGLVersion === 1 ? stencilFormat = gl.DEPTH_STENCIL : framebuffer.depth && framebuffer.stencil ? stencilFormat = gl.DEPTH24_STENCIL8 : framebuffer.depth ? stencilFormat = gl.DEPTH_COMPONENT24 : stencilFormat = gl.STENCIL_INDEX8, fbo.msaaBuffer ? gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, stencilFormat, framebuffer.width, framebuffer.height) : gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, framebuffer.width, framebuffer.height);\n    }\n    const colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    gl.drawBuffers || (count = Math.min(count, 1));\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i],\n        parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0), i === 0 && fbo.msaaBuffer && (gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer), gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height));\n    }\n    framebuffer.depthTexture && this.writeDepthTexture && this.renderer.texture.bind(framebuffer.depthTexture, 0);\n  }\n  /**\n   * Update the framebuffer\n   * @param framebuffer\n   * @param mipLevel\n   * @protected\n   */\n  updateFramebuffer(framebuffer, mipLevel) {\n    const {\n        gl\n      } = this,\n      fbo = framebuffer.glFramebuffers[this.CONTEXT_UID],\n      colorTextures = framebuffer.colorTextures;\n    let count = colorTextures.length;\n    gl.drawBuffers || (count = Math.min(count, 1)), fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer) ? fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer() : fbo.msaaBuffer && (gl.deleteRenderbuffer(fbo.msaaBuffer), fbo.msaaBuffer = null, fbo.blitFramebuffer && (fbo.blitFramebuffer.dispose(), fbo.blitFramebuffer = null));\n    const activeTextures = [];\n    for (let i = 0; i < count; i++) {\n      const texture = colorTextures[i],\n        parentTexture = texture.parentTextureArray || texture;\n      this.renderer.texture.bind(parentTexture, 0), i === 0 && fbo.msaaBuffer ? (gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer), gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height), gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer)) : (gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, texture.target, parentTexture._glTextures[this.CONTEXT_UID].texture, mipLevel), activeTextures.push(gl.COLOR_ATTACHMENT0 + i));\n    }\n    if (activeTextures.length > 1 && gl.drawBuffers(activeTextures), framebuffer.depthTexture && this.writeDepthTexture) {\n      const depthTexture = framebuffer.depthTexture;\n      this.renderer.texture.bind(depthTexture, 0), gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTexture._glTextures[this.CONTEXT_UID].texture, mipLevel);\n    }\n    if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture)) {\n      fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n      let stencilAttachment, stencilFormat;\n      this.renderer.context.webGLVersion === 1 ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH_STENCIL) : framebuffer.depth && framebuffer.stencil ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH24_STENCIL8) : framebuffer.depth ? (stencilAttachment = gl.DEPTH_ATTACHMENT, stencilFormat = gl.DEPTH_COMPONENT24) : (stencilAttachment = gl.STENCIL_ATTACHMENT, stencilFormat = gl.STENCIL_INDEX8), gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil), fbo.msaaBuffer ? gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, stencilFormat, framebuffer.width, framebuffer.height) : gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, framebuffer.width, framebuffer.height), gl.framebufferRenderbuffer(gl.FRAMEBUFFER, stencilAttachment, gl.RENDERBUFFER, fbo.stencil);\n    } else fbo.stencil && (gl.deleteRenderbuffer(fbo.stencil), fbo.stencil = null);\n  }\n  /**\n   * Returns true if the frame buffer can be multisampled.\n   * @param framebuffer\n   */\n  canMultisampleFramebuffer(framebuffer) {\n    return this.renderer.context.webGLVersion !== 1 && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n  }\n  /**\n   * Detects number of samples that is not more than a param but as close to it as possible\n   * @param samples - number of samples\n   * @returns - recommended number of samples\n   */\n  detectSamples(samples) {\n    const {\n      msaaSamples\n    } = this;\n    let res = MSAA_QUALITY.NONE;\n    if (samples <= 1 || msaaSamples === null) return res;\n    for (let i = 0; i < msaaSamples.length; i++) if (msaaSamples[i] <= samples) {\n      res = msaaSamples[i];\n      break;\n    }\n    return res === 1 && (res = MSAA_QUALITY.NONE), res;\n  }\n  /**\n   * Only works with WebGL2\n   *\n   * blits framebuffer to another of the same or bigger size\n   * after that target framebuffer is bound\n   *\n   * Fails with WebGL warning if blits multisample framebuffer to different size\n   * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n   * @param sourcePixels - source rectangle in pixels\n   * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n   */\n  blit(framebuffer, sourcePixels, destPixels) {\n    const {\n      current,\n      renderer,\n      gl,\n      CONTEXT_UID\n    } = this;\n    if (renderer.context.webGLVersion !== 2 || !current) return;\n    const fbo = current.glFramebuffers[CONTEXT_UID];\n    if (!fbo) return;\n    if (!framebuffer) {\n      if (!fbo.msaaBuffer) return;\n      const colorTexture = current.colorTextures[0];\n      if (!colorTexture) return;\n      fbo.blitFramebuffer || (fbo.blitFramebuffer = new Framebuffer(current.width, current.height), fbo.blitFramebuffer.addColorTexture(0, colorTexture)), framebuffer = fbo.blitFramebuffer, framebuffer.colorTextures[0] !== colorTexture && (framebuffer.colorTextures[0] = colorTexture, framebuffer.dirtyId++, framebuffer.dirtyFormat++), (framebuffer.width !== current.width || framebuffer.height !== current.height) && (framebuffer.width = current.width, framebuffer.height = current.height, framebuffer.dirtyId++, framebuffer.dirtySize++);\n    }\n    sourcePixels || (sourcePixels = tempRectangle, sourcePixels.width = current.width, sourcePixels.height = current.height), destPixels || (destPixels = sourcePixels);\n    const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n    this.bind(framebuffer), gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer), gl.blitFramebuffer(sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom, destPixels.left, destPixels.top, destPixels.right, destPixels.bottom, gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR), gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebuffer.glFramebuffers[this.CONTEXT_UID].framebuffer);\n  }\n  /**\n   * Disposes framebuffer.\n   * @param framebuffer - framebuffer that has to be disposed of\n   * @param contextLost - If context was lost, we suppress all delete function calls\n   */\n  disposeFramebuffer(framebuffer, contextLost) {\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID],\n      gl = this.gl;\n    if (!fbo) return;\n    delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n    const index = this.managedFramebuffers.indexOf(framebuffer);\n    index >= 0 && this.managedFramebuffers.splice(index, 1), framebuffer.disposeRunner.remove(this), contextLost || (gl.deleteFramebuffer(fbo.framebuffer), fbo.msaaBuffer && gl.deleteRenderbuffer(fbo.msaaBuffer), fbo.stencil && gl.deleteRenderbuffer(fbo.stencil)), fbo.blitFramebuffer && this.disposeFramebuffer(fbo.blitFramebuffer, contextLost);\n  }\n  /**\n   * Disposes all framebuffers, but not textures bound to them.\n   * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n   */\n  disposeAll(contextLost) {\n    const list = this.managedFramebuffers;\n    this.managedFramebuffers = [];\n    for (let i = 0; i < list.length; i++) this.disposeFramebuffer(list[i], contextLost);\n  }\n  /**\n   * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n   * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n   *\n   * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n   * @private\n   */\n  forceStencil() {\n    const framebuffer = this.current;\n    if (!framebuffer) return;\n    const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n    if (!fbo || fbo.stencil && framebuffer.stencil) return;\n    framebuffer.stencil = !0;\n    const w = framebuffer.width,\n      h = framebuffer.height,\n      gl = this.gl,\n      stencil = fbo.stencil = gl.createRenderbuffer();\n    gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n    let stencilAttachment, stencilFormat;\n    this.renderer.context.webGLVersion === 1 ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH_STENCIL) : framebuffer.depth ? (stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT, stencilFormat = gl.DEPTH24_STENCIL8) : (stencilAttachment = gl.STENCIL_ATTACHMENT, stencilFormat = gl.STENCIL_INDEX8), fbo.msaaBuffer ? gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, stencilFormat, w, h) : gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, w, h), gl.framebufferRenderbuffer(gl.FRAMEBUFFER, stencilAttachment, gl.RENDERBUFFER, stencil);\n  }\n  /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n  reset() {\n    this.current = this.unknownFramebuffer, this.viewport = new Rectangle();\n  }\n  destroy() {\n    this.renderer = null;\n  }\n}\nFramebufferSystem.extension = {\n  type: ExtensionType.RendererSystem,\n  name: \"framebuffer\"\n};\nextensions.add(FramebufferSystem);\nexport { FramebufferSystem };","map":{"version":3,"names":["tempRectangle","Rectangle","FramebufferSystem","constructor","renderer","managedFramebuffers","unknownFramebuffer","Framebuffer","msaaSamples","contextChange","disposeAll","gl","CONTEXT_UID","current","viewport","hasMRT","writeDepthTexture","context","webGLVersion","nativeDrawBuffersExtension","extensions","drawBuffers","nativeDepthTextureExtension","depthTexture","settings","PREFER_ENV","ENV","WEBGL_LEGACY","activeTextures","drawBuffersWEBGL","getInternalformatParameter","RENDERBUFFER","RGBA8","SAMPLES","bind","framebuffer","frame","mipLevel","fbo","glFramebuffers","initFramebuffer","bindFramebuffer","FRAMEBUFFER","dirtyId","dirtyFormat","dirtySize","updateFramebuffer","resizeFramebuffer","i","colorTextures","length","tex","texture","unbind","parentTextureArray","mipWidth","width","mipHeight","height","scale","setViewport","x","y","v","Math","round","size","clear","r","g","b","a","mask","BUFFER_BITS","COLOR","DEPTH","clearColor","GLFramebuffer","createFramebuffer","multisample","detectSamples","push","disposeRunner","add","stencil","bindRenderbuffer","stencilFormat","DEPTH_STENCIL","depth","DEPTH24_STENCIL8","DEPTH_COMPONENT24","STENCIL_INDEX8","msaaBuffer","renderbufferStorageMultisample","renderbufferStorage","count","min","parentTexture","_glTextures","internalFormat","canMultisampleFramebuffer","createRenderbuffer","deleteRenderbuffer","blitFramebuffer","dispose","framebufferRenderbuffer","COLOR_ATTACHMENT0","framebufferTexture2D","target","DEPTH_ATTACHMENT","TEXTURE_2D","stencilAttachment","DEPTH_STENCIL_ATTACHMENT","STENCIL_ATTACHMENT","samples","res","MSAA_QUALITY","NONE","blit","sourcePixels","destPixels","colorTexture","addColorTexture","sameSize","READ_FRAMEBUFFER","left","top","right","bottom","COLOR_BUFFER_BIT","NEAREST","LINEAR","disposeFramebuffer","contextLost","index","indexOf","splice","remove","deleteFramebuffer","list","forceStencil","w","h","reset","destroy","extension","type","ExtensionType","RendererSystem","name"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/framebuffer/FramebufferSystem.ts"],"sourcesContent":["import { BUFFER_BITS, ENV, MSAA_QUALITY } from '@pixi/constants';\nimport { extensions, ExtensionType } from '@pixi/extensions';\nimport { Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Framebuffer } from './Framebuffer';\nimport { GLFramebuffer } from './GLFramebuffer';\n\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport type { IRenderingContext } from '../IRenderer';\nimport type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * System plugin to the renderer to manage framebuffers.\n * @memberof PIXI\n */\nexport class FramebufferSystem implements ISystem\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = {\n        type: ExtensionType.RendererSystem,\n        name: 'framebuffer',\n    };\n\n    /** A list of managed framebuffers. */\n    public readonly managedFramebuffers: Array<Framebuffer>;\n    public current: Framebuffer;\n    public viewport: Rectangle;\n    public hasMRT: boolean;\n    public writeDepthTexture: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /** Framebuffer value that shows that we don't know what is bound. */\n    protected unknownFramebuffer: Framebuffer;\n    protected msaaSamples: Array<number>;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedFramebuffers = [];\n        this.unknownFramebuffer = new Framebuffer(10, 10);\n\n        this.msaaSamples = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n        this.hasMRT = true;\n        this.writeDepthTexture = true;\n\n        // webgl2\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            // webgl 1!\n            let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n            let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeDrawBuffersExtension = null;\n                nativeDepthTextureExtension = null;\n            }\n\n            if (nativeDrawBuffersExtension)\n            {\n                gl.drawBuffers = (activeTextures: number[]): void =>\n                    nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n            }\n            else\n            {\n                this.hasMRT = false;\n                gl.drawBuffers = (): void =>\n                {\n                    // empty\n                };\n            }\n\n            if (!nativeDepthTextureExtension)\n            {\n                this.writeDepthTexture = false;\n            }\n        }\n        else\n        {\n            // WebGL2\n            // cache possible MSAA samples\n            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n        }\n    }\n\n    /**\n     * Bind a framebuffer.\n     * @param framebuffer\n     * @param frame - frame, default is framebuffer size\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n     */\n    bind(framebuffer?: Framebuffer, frame?: Rectangle, mipLevel = 0): void\n    {\n        const { gl } = this;\n\n        if (framebuffer)\n        {\n            // TODO caching layer!\n\n            const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            if (this.current !== framebuffer)\n            {\n                this.current = framebuffer;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            }\n            // make sure all textures are unbound..\n\n            if (fbo.mipLevel !== mipLevel)\n            {\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n                fbo.mipLevel = mipLevel;\n            }\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.updateFramebuffer(framebuffer, mipLevel);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                const tex = framebuffer.colorTextures[i];\n\n                this.renderer.texture.unbind(tex.parentTextureArray || tex);\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            if (frame)\n            {\n                const mipWidth = (frame.width >> mipLevel);\n                const mipHeight = (frame.height >> mipLevel);\n\n                const scale = mipWidth / frame.width;\n\n                this.setViewport(\n                    frame.x * scale,\n                    frame.y * scale,\n                    mipWidth,\n                    mipHeight\n                );\n            }\n            else\n            {\n                const mipWidth = (framebuffer.width >> mipLevel);\n                const mipHeight = (framebuffer.height >> mipLevel);\n\n                this.setViewport(0, 0, mipWidth, mipHeight);\n            }\n        }\n        else\n        {\n            if (this.current)\n            {\n                this.current = null;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n            }\n        }\n    }\n\n    /**\n     * Set the WebGLRenderingContext's viewport.\n     * @param x - X position of viewport\n     * @param y - Y position of viewport\n     * @param width - Width of viewport\n     * @param height - Height of viewport\n     */\n    setViewport(x: number, y: number, width: number, height: number): void\n    {\n        const v = this.viewport;\n\n        x = Math.round(x);\n        y = Math.round(y);\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)\n        {\n            v.x = x;\n            v.y = y;\n            v.width = width;\n            v.height = height;\n\n            this.gl.viewport(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\n     * @readonly\n     */\n    get size(): { x: number; y: number; width: number; height: number }\n    {\n        if (this.current)\n        {\n            // TODO store temp\n            return { x: 0, y: 0, width: this.current.width, height: this.current.height };\n        }\n\n        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n    }\n\n    /**\n     * Clear the color of the context\n     * @param r - Red value from 0 to 1\n     * @param g - Green value from 0 to 1\n     * @param b - Blue value from 0 to 1\n     * @param a - Alpha value from 0 to 1\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(r: number, g: number, b: number, a: number, mask: BUFFER_BITS = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH): void\n    {\n        const { gl } = this;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(mask);\n    }\n\n    /**\n     * Initialize framebuffer for this context\n     * @protected\n     * @param framebuffer\n     * @returns - created GLFramebuffer\n     */\n    initFramebuffer(framebuffer: Framebuffer): GLFramebuffer\n    {\n        const { gl } = this;\n        const fbo = new GLFramebuffer(gl.createFramebuffer());\n\n        fbo.multisample = this.detectSamples(framebuffer.multisample);\n        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n\n        this.managedFramebuffers.push(framebuffer);\n        framebuffer.disposeRunner.add(this);\n\n        return fbo;\n    }\n\n    /**\n     * Resize the framebuffer\n     * @param framebuffer\n     * @protected\n     */\n    resizeFramebuffer(framebuffer: Framebuffer): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (fbo.stencil)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            let stencilFormat: number;\n\n            if (this.renderer.context.webGLVersion === 1)\n            {\n                stencilFormat = gl.DEPTH_STENCIL;\n            }\n            else if (framebuffer.depth && framebuffer.stencil)\n            {\n                stencilFormat = gl.DEPTH24_STENCIL8;\n            }\n            else if (framebuffer.depth)\n            {\n                stencilFormat = gl.DEPTH_COMPONENT24;\n            }\n            else\n            {\n                stencilFormat = gl.STENCIL_INDEX8;\n            }\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    stencilFormat, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        if (framebuffer.depthTexture && this.writeDepthTexture)\n        {\n            this.renderer.texture.bind(framebuffer.depthTexture, 0);\n        }\n    }\n\n    /**\n     * Update the framebuffer\n     * @param framebuffer\n     * @param mipLevel\n     * @protected\n     */\n    updateFramebuffer(framebuffer: Framebuffer, mipLevel: number): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer))\n        {\n            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n        }\n        else if (fbo.msaaBuffer)\n        {\n            gl.deleteRenderbuffer(fbo.msaaBuffer);\n            fbo.msaaBuffer = null;\n\n            if (fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer.dispose();\n                fbo.blitFramebuffer = null;\n            }\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    parentTexture._glTextures[this.CONTEXT_UID].internalFormat, framebuffer.width, framebuffer.height);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n            }\n            else\n            {\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    texture.target,\n                    parentTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n\n                activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n            }\n        }\n\n        if (activeTextures.length > 1)\n        {\n            gl.drawBuffers(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const writeDepthTexture = this.writeDepthTexture;\n\n            if (writeDepthTexture)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.DEPTH_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    depthTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n            }\n        }\n\n        if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture))\n        {\n            fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n\n            let stencilAttachment: number;\n            let stencilFormat: number;\n\n            if (this.renderer.context.webGLVersion === 1)\n            {\n                stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n                stencilFormat = gl.DEPTH_STENCIL;\n            }\n            else if (framebuffer.depth && framebuffer.stencil)\n            {\n                stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n                stencilFormat = gl.DEPTH24_STENCIL8;\n            }\n            else if (framebuffer.depth)\n            {\n                stencilAttachment = gl.DEPTH_ATTACHMENT;\n                stencilFormat = gl.DEPTH_COMPONENT24;\n            }\n            else\n            {\n                stencilAttachment = gl.STENCIL_ATTACHMENT;\n                stencilFormat = gl.STENCIL_INDEX8;\n            }\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, stencilFormat,\n                    framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, framebuffer.width, framebuffer.height);\n            }\n\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, stencilAttachment, gl.RENDERBUFFER, fbo.stencil);\n        }\n        else if (fbo.stencil)\n        {\n            gl.deleteRenderbuffer(fbo.stencil);\n            fbo.stencil = null;\n        }\n    }\n\n    /**\n     * Returns true if the frame buffer can be multisampled.\n     * @param framebuffer\n     */\n    protected canMultisampleFramebuffer(framebuffer: Framebuffer): boolean\n    {\n        return this.renderer.context.webGLVersion !== 1\n            && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n\n    /**\n     * Detects number of samples that is not more than a param but as close to it as possible\n     * @param samples - number of samples\n     * @returns - recommended number of samples\n     */\n    protected detectSamples(samples: MSAA_QUALITY): MSAA_QUALITY\n    {\n        const { msaaSamples } = this;\n        let res: number = MSAA_QUALITY.NONE;\n\n        if (samples <= 1 || msaaSamples === null)\n        {\n            return res;\n        }\n        for (let i = 0; i < msaaSamples.length; i++)\n        {\n            if (msaaSamples[i] <= samples)\n            {\n                res = msaaSamples[i];\n                break;\n            }\n        }\n\n        if (res === 1)\n        {\n            res = MSAA_QUALITY.NONE;\n        }\n\n        return res;\n    }\n\n    /**\n     * Only works with WebGL2\n     *\n     * blits framebuffer to another of the same or bigger size\n     * after that target framebuffer is bound\n     *\n     * Fails with WebGL warning if blits multisample framebuffer to different size\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n     * @param sourcePixels - source rectangle in pixels\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n     */\n    public blit(framebuffer?: Framebuffer, sourcePixels?: Rectangle, destPixels?: Rectangle): void\n    {\n        const { current, renderer, gl, CONTEXT_UID } = this;\n\n        if (renderer.context.webGLVersion !== 2)\n        {\n            return;\n        }\n\n        if (!current)\n        {\n            return;\n        }\n        const fbo = current.glFramebuffers[CONTEXT_UID];\n\n        if (!fbo)\n        {\n            return;\n        }\n        if (!framebuffer)\n        {\n            if (!fbo.msaaBuffer)\n            {\n                return;\n            }\n\n            const colorTexture = current.colorTextures[0];\n\n            if (!colorTexture)\n            {\n                return;\n            }\n\n            if (!fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n                fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n            }\n\n            framebuffer = fbo.blitFramebuffer;\n\n            if (framebuffer.colorTextures[0] !== colorTexture)\n            {\n                framebuffer.colorTextures[0] = colorTexture;\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n            }\n\n            if (framebuffer.width !== current.width || framebuffer.height !== current.height)\n            {\n                framebuffer.width = current.width;\n                framebuffer.height = current.height;\n                framebuffer.dirtyId++;\n                framebuffer.dirtySize++;\n            }\n        }\n\n        if (!sourcePixels)\n        {\n            sourcePixels = tempRectangle;\n            sourcePixels.width = current.width;\n            sourcePixels.height = current.height;\n        }\n        if (!destPixels)\n        {\n            destPixels = sourcePixels;\n        }\n\n        const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n\n        this.bind(framebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n        gl.blitFramebuffer(\n            sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom,\n            destPixels.left, destPixels.top, destPixels.right, destPixels.bottom,\n            gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR\n        );\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebuffer.glFramebuffers[this.CONTEXT_UID].framebuffer);\n    }\n\n    /**\n     * Disposes framebuffer.\n     * @param framebuffer - framebuffer that has to be disposed of\n     * @param contextLost - If context was lost, we suppress all delete function calls\n     */\n    disposeFramebuffer(framebuffer: Framebuffer, contextLost?: boolean): void\n    {\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        if (!fbo)\n        {\n            return;\n        }\n\n        delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        const index = this.managedFramebuffers.indexOf(framebuffer);\n\n        if (index >= 0)\n        {\n            this.managedFramebuffers.splice(index, 1);\n        }\n\n        framebuffer.disposeRunner.remove(this);\n\n        if (!contextLost)\n        {\n            gl.deleteFramebuffer(fbo.framebuffer);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.deleteRenderbuffer(fbo.msaaBuffer);\n            }\n\n            if (fbo.stencil)\n            {\n                gl.deleteRenderbuffer(fbo.stencil);\n            }\n        }\n\n        if (fbo.blitFramebuffer)\n        {\n            this.disposeFramebuffer(fbo.blitFramebuffer, contextLost);\n        }\n    }\n\n    /**\n     * Disposes all framebuffers, but not textures bound to them.\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const list = this.managedFramebuffers;\n\n        (this.managedFramebuffers as any) = [];\n\n        for (let i = 0; i < list.length; i++)\n        {\n            this.disposeFramebuffer(list[i], contextLost);\n        }\n    }\n\n    /**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     * @private\n     */\n    forceStencil(): void\n    {\n        const framebuffer = this.current;\n\n        if (!framebuffer)\n        {\n            return;\n        }\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (!fbo || (fbo.stencil && framebuffer.stencil))\n        {\n            return;\n        }\n\n        framebuffer.stencil = true;\n\n        const w = framebuffer.width;\n        const h = framebuffer.height;\n        const gl = this.gl;\n        const stencil = fbo.stencil = gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n\n        let stencilAttachment: number;\n        let stencilFormat: number;\n\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n            stencilFormat = gl.DEPTH_STENCIL;\n        }\n        else if (framebuffer.depth)\n        {\n            stencilAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n            stencilFormat = gl.DEPTH24_STENCIL8;\n        }\n        else\n        {\n            stencilAttachment = gl.STENCIL_ATTACHMENT;\n            stencilFormat = gl.STENCIL_INDEX8;\n        }\n\n        if (fbo.msaaBuffer)\n        {\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, stencilFormat, w, h);\n        }\n        else\n        {\n            gl.renderbufferStorage(gl.RENDERBUFFER, stencilFormat, w, h);\n        }\n\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, stencilAttachment, gl.RENDERBUFFER, stencil);\n    }\n\n    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n    reset(): void\n    {\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\nextensions.add(FramebufferSystem);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}