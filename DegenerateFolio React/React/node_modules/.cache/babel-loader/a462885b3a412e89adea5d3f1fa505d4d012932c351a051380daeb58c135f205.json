{"ast":null,"code":"import { BN } from './bn.js';\nimport { BN_MAX_INTEGER, BN_ONE, BN_SQRT_MAX_INTEGER } from './consts.js';\nimport { bnToBn } from './toBn.js';\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\nexport function bnSqrt(value) {\n  const n = bnToBn(value);\n  if (n.isNeg()) {\n    throw new Error('square root of negative numbers is not supported');\n  }\n  // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/\n  // shortcut <= 2^53 - 1 to use the JS utils\n  if (n.lte(BN_MAX_INTEGER)) {\n    // ~~ More performant version of Math.floor\n    return new BN(~~Math.sqrt(n.toNumber()));\n  }\n  // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the\n  // output will be larger than this, we expect this to be a safe start\n  let x0 = BN_SQRT_MAX_INTEGER.clone();\n  while (true) {\n    const x1 = n.div(x0).iadd(x0).ishrn(1);\n    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {\n      return x0;\n    }\n    x0 = x1;\n  }\n}","map":{"version":3,"names":["BN","BN_MAX_INTEGER","BN_ONE","BN_SQRT_MAX_INTEGER","bnToBn","bnSqrt","value","n","isNeg","Error","lte","Math","sqrt","toNumber","x0","clone","x1","div","iadd","ishrn","eq","sub"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/bn/sqrt.js"],"sourcesContent":["import { BN } from './bn.js';\nimport { BN_MAX_INTEGER, BN_ONE, BN_SQRT_MAX_INTEGER } from './consts.js';\nimport { bnToBn } from './toBn.js';\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\nexport function bnSqrt(value) {\n    const n = bnToBn(value);\n    if (n.isNeg()) {\n        throw new Error('square root of negative numbers is not supported');\n    }\n    // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/\n    // shortcut <= 2^53 - 1 to use the JS utils\n    if (n.lte(BN_MAX_INTEGER)) {\n        // ~~ More performant version of Math.floor\n        return new BN(~~Math.sqrt(n.toNumber()));\n    }\n    // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the\n    // output will be larger than this, we expect this to be a safe start\n    let x0 = BN_SQRT_MAX_INTEGER.clone();\n    while (true) {\n        const x1 = n.div(x0).iadd(x0).ishrn(1);\n        if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {\n            return x0;\n        }\n        x0 = x1;\n    }\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,SAAS;AAC5B,SAASC,cAAc,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,aAAa;AACzE,SAASC,MAAM,QAAQ,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAE;EAC1B,MAAMC,CAAC,GAAGH,MAAM,CAACE,KAAK,CAAC;EACvB,IAAIC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACvE;EACA;EACA;EACA,IAAIF,CAAC,CAACG,GAAG,CAACT,cAAc,CAAC,EAAE;IACvB;IACA,OAAO,IAAID,EAAE,CAAC,CAAC,CAACW,IAAI,CAACC,IAAI,CAACL,CAAC,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C;EACA;EACA;EACA,IAAIC,EAAE,GAAGX,mBAAmB,CAACY,KAAK,CAAC,CAAC;EACpC,OAAO,IAAI,EAAE;IACT,MAAMC,EAAE,GAAGT,CAAC,CAACU,GAAG,CAACH,EAAE,CAAC,CAACI,IAAI,CAACJ,EAAE,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC;IACtC,IAAIL,EAAE,CAACM,EAAE,CAACJ,EAAE,CAAC,IAAIF,EAAE,CAACM,EAAE,CAACJ,EAAE,CAACK,GAAG,CAACnB,MAAM,CAAC,CAAC,EAAE;MACpC,OAAOY,EAAE;IACb;IACAA,EAAE,GAAGE,EAAE;EACX;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}