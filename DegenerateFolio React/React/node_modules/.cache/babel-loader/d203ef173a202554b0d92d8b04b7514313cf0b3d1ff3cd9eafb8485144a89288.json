{"ast":null,"code":"import { GAUSSIAN_VALUES } from '../const.mjs';\n\"use strict\";\nconst fragTemplate = [\"in vec2 vBlurTexCoords[%size%];\", \"uniform sampler2D uTexture;\", \"out vec4 finalColor;\", \"void main(void)\", \"{\", \"    finalColor = vec4(0.0);\", \"    %blur%\", \"}\"].join(\"\\n\");\nfunction generateBlurFragSource(kernelSize) {\n  const kernel = GAUSSIAN_VALUES[kernelSize];\n  const halfLength = kernel.length;\n  let fragSource = fragTemplate;\n  let blurLoop = \"\";\n  const template = \"finalColor += texture(uTexture, vBlurTexCoords[%index%]) * %value%;\";\n  let value;\n  for (let i = 0; i < kernelSize; i++) {\n    let blur = template.replace(\"%index%\", i.toString());\n    value = i;\n    if (i >= halfLength) {\n      value = kernelSize - i - 1;\n    }\n    blur = blur.replace(\"%value%\", kernel[value].toString());\n    blurLoop += blur;\n    blurLoop += \"\\n\";\n  }\n  fragSource = fragSource.replace(\"%blur%\", blurLoop);\n  fragSource = fragSource.replace(\"%size%\", kernelSize.toString());\n  return fragSource;\n}\nexport { generateBlurFragSource };","map":{"version":3,"names":["fragTemplate","join","generateBlurFragSource","kernelSize","kernel","GAUSSIAN_VALUES","halfLength","length","fragSource","blurLoop","template","value","i","blur","replace","toString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/filters/defaults/blur/gl/generateBlurFragSource.ts"],"sourcesContent":["import { GAUSSIAN_VALUES } from '../const';\n\nconst fragTemplate = [\n    'in vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uTexture;',\n    'out vec4 finalColor;',\n\n    'void main(void)',\n    '{',\n    '    finalColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize: number): string\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'finalColor += texture(uTexture, vBlurTexCoords[%index%]) * %value%;';\n    let value: number;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i.toString());\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value].toString());\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize.toString());\n\n    return fragSource;\n}\n"],"mappings":";;AAEA,MAAMA,YAAe,IACjB,mCACA,+BACA,wBAEA,mBACA,KACA,+BACA,cACA,IAEJ,CAAEC,IAAA,CAAK,IAAI;AAEJ,SAASC,uBAAuBC,UACvC;EACU,MAAAC,MAAA,GAASC,eAAA,CAAgBF,UAAU;EACzC,MAAMG,UAAA,GAAaF,MAAO,CAAAG,MAAA;EAE1B,IAAIC,UAAa,GAAAR,YAAA;EAEjB,IAAIS,QAAW;EACf,MAAMC,QAAW;EACb,IAAAC,KAAA;EAEJ,SAASC,CAAI,MAAGA,CAAI,GAAAT,UAAA,EAAYS,CAChC;IACI,IAAIC,IAAA,GAAOH,QAAS,CAAAI,OAAA,CAAQ,SAAW,EAAAF,CAAA,CAAEG,QAAA,EAAU;IAE3CJ,KAAA,GAAAC,CAAA;IAER,IAAIA,CAAA,IAAKN,UACT;MACIK,KAAA,GAAQR,UAAA,GAAaS,CAAI;IAAA;IAG7BC,IAAA,GAAOA,IAAA,CAAKC,OAAQ,YAAWV,MAAA,CAAOO,KAAK,EAAEI,QAAA,EAAU;IAE3CN,QAAA,IAAAI,IAAA;IACAJ,QAAA;EAAA;EAGHD,UAAA,GAAAA,UAAA,CAAWM,OAAQ,WAAUL,QAAQ;EAClDD,UAAA,GAAaA,UAAW,CAAAM,OAAA,CAAQ,QAAU,EAAAX,UAAA,CAAWY,QAAA,EAAU;EAExD,OAAAP,UAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}