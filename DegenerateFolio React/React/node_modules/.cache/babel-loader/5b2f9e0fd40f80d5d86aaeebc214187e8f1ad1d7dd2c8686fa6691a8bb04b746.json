{"ast":null,"code":"import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { State } from '../../shared/state/State.mjs';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi.mjs';\n\"use strict\";\nclass GpuStateSystem {\n  constructor() {\n    this.defaultState = new State();\n    this.defaultState.blend = true;\n  }\n  contextChange(gpu) {\n    this.gpu = gpu;\n  }\n  /**\n   * Gets the blend mode data for the current state\n   * @param state - The state to get the blend mode from\n   */\n  getColorTargets(state) {\n    const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n    return [{\n      format: \"bgra8unorm\",\n      writeMask: 0,\n      blend\n    }];\n  }\n  destroy() {\n    this.gpu = null;\n  }\n}\n/** @ignore */\nGpuStateSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"state\"\n};\nexport { GpuStateSystem };","map":{"version":3,"names":["GpuStateSystem","constructor","defaultState","State","blend","contextChange","gpu","getColorTargets","state","GpuBlendModesToPixi","blendMode","normal","format","writeMask","destroy","extension","type","ExtensionType","WebGPUSystem","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStateSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GPU } from '../GpuDeviceSystem';\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof rendering\n */\nexport class GpuStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'state',\n    } as const;\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gpu: GPU;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    protected contextChange(gpu: GPU): void\n    {\n        this.gpu = gpu;\n    }\n\n    /**\n     * Gets the blend mode data for the current state\n     * @param state - The state to get the blend mode from\n     */\n    public getColorTargets(state: State): GPUColorTargetState[]\n    {\n        const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n\n        return [\n            {\n                format: 'bgra8unorm',\n                writeMask: 0,\n                blend,\n            },\n        ];\n    }\n\n    public destroy(): void\n    {\n        this.gpu = null;\n    }\n}\n"],"mappings":";;;;AAYO,MAAMA,cACb;EA2CIC,WACAA,CAAA;IACS,KAAAC,YAAA,GAAe,IAAIC,KAAM;IAC9B,KAAKD,YAAA,CAAaE,KAAQ;EAAA;EAGpBC,cAAcC,GACxB;IACI,KAAKA,GAAM,GAAAA,GAAA;EAAA;EACf;AAAA;AAAA;AAAA;EAMOC,gBAAgBC,KACvB;IACI,MAAMJ,KAAQ,GAAAK,mBAAA,CAAoBD,KAAM,CAAAE,SAAS,KAAKD,mBAAoB,CAAAE,MAAA;IAEnE,QACH;MACIC,MAAQ;MACRC,SAAW;MACXT;IAAA,CACJ,CACJ;EAAA;EAGGU,OACPA,CAAA;IACI,KAAKR,GAAM;EAAA;AAEnB;AAAA;AA5EaN,cAAA,CAGKe,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,YAAA,CAClB;EACAC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}