{"ast":null,"code":"import { uid } from '../../../../utils/data/uid.mjs';\n\"use strict\";\nclass InstructionSet {\n  constructor() {\n    /** a unique id for this instruction set used through the renderer */\n    this.uid = uid(\"instructionSet\");\n    /** the array of instructions */\n    this.instructions = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    this.instructionSize = 0;\n  }\n  /** reset the instruction set so it can be reused set size back to 0 */\n  reset() {\n    this.instructionSize = 0;\n  }\n  /**\n   * Add an instruction to the set\n   * @param instruction - add an instruction to the set\n   */\n  add(instruction) {\n    this.instructions[this.instructionSize++] = instruction;\n  }\n  /**\n   * Log the instructions to the console (for debugging)\n   * @internal\n   * @ignore\n   */\n  log() {\n    this.instructions.length = this.instructionSize;\n    console.table(this.instructions, [\"type\", \"action\"]);\n  }\n}\nexport { InstructionSet };","map":{"version":3,"names":["InstructionSet","constructor","uid","instructions","instructionSize","reset","add","instruction","log","length","console","table"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/instructions/InstructionSet.ts"],"sourcesContent":["import { uid } from '../../../../utils/data/uid';\n\nimport type { Instruction } from './Instruction';\n\n/**\n * A set of instructions that can be executed by the renderer.\n * Basically wraps an array, but with some extra properties that help the renderer\n * to keep things nice and optimised.\n *\n * Note:\n * InstructionSet.instructions contains all the instructions, but does not resize (for performance).\n * So for the true length of the instructions you need to use InstructionSet.instructionSize\n * @memberof rendering\n */\nexport class InstructionSet\n{\n    /** a unique id for this instruction set used through the renderer */\n    public readonly uid = uid('instructionSet');\n    /** the array of instructions */\n    public readonly instructions: Instruction[] = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    public instructionSize = 0;\n    /** allows for access to the render pipes of the renderer */\n    public renderPipes: any;\n\n    /** reset the instruction set so it can be reused set size back to 0 */\n    public reset()\n    {\n        this.instructionSize = 0;\n    }\n\n    /**\n     * Add an instruction to the set\n     * @param instruction - add an instruction to the set\n     */\n    public add(instruction: Instruction)\n    {\n        this.instructions[this.instructionSize++] = instruction;\n    }\n\n    /**\n     * Log the instructions to the console (for debugging)\n     * @internal\n     * @ignore\n     */\n    public log()\n    {\n        this.instructions.length = this.instructionSize;\n        // eslint-disable-next-line no-console\n        console.table(this.instructions, ['type', 'action']);\n    }\n}\n"],"mappings":";;AAcO,MAAMA,cACb;EADOC,YAAA;IAGH;IAAgB,KAAAC,GAAA,GAAMA,GAAA,CAAI,gBAAgB;IAE1C;IAAA,KAAgBC,YAAA,GAA8B,EAAC;IAE/C;IAAA,KAAOC,eAAkB;EAAA;EAAA;EAKlBC,KACPA,CAAA;IACI,KAAKD,eAAkB;EAAA;EAC3B;AAAA;AAAA;AAAA;EAMOE,IAAIC,WACX;IACS,KAAAJ,YAAA,CAAa,IAAK,CAAAC,eAAA,EAAiB,CAAI,GAAAG,WAAA;EAAA;EAChD;AAAA;AAAA;AAAA;AAAA;EAOOC,GACPA,CAAA;IACS,KAAAL,YAAA,CAAaM,MAAA,GAAS,IAAK,CAAAL,eAAA;IAEhCM,OAAA,CAAQC,KAAA,CAAM,IAAK,CAAAR,YAAA,EAAc,CAAC,QAAQ,QAAQ,CAAC;EAAA;AAE3D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}