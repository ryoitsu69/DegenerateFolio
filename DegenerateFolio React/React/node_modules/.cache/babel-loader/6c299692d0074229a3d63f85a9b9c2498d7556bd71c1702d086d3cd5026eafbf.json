{"ast":null,"code":"\"use strict\";\n\nconst glUploadImageResource = {\n  id: \"image\",\n  upload(source, glTexture, gl, webGLVersion) {\n    const premultipliedAlpha = source.alphaMode === \"premultiply-alpha-on-upload\";\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n    const glWidth = glTexture.width;\n    const glHeight = glTexture.height;\n    const textureWidth = source.pixelWidth;\n    const textureHeight = source.pixelHeight;\n    const resourceWidth = source.resourceWidth;\n    const resourceHeight = source.resourceHeight;\n    if (resourceWidth < textureWidth || resourceHeight < textureHeight) {\n      if (glWidth !== textureWidth || glHeight !== textureHeight) {\n        gl.texImage2D(glTexture.target, 0, glTexture.internalFormat, textureWidth, textureHeight, 0, glTexture.format, glTexture.type, null);\n      }\n      if (webGLVersion === 2) {\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, resourceWidth, resourceHeight, glTexture.format, glTexture.type, source.resource);\n      } else {\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, glTexture.format, glTexture.type, source.resource);\n      }\n    } else if (glWidth === textureWidth || glHeight === textureHeight) {\n      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, glTexture.format, glTexture.type, source.resource);\n    } else if (webGLVersion === 2) {\n      gl.texImage2D(glTexture.target, 0, glTexture.internalFormat, textureWidth, textureHeight, 0, glTexture.format, glTexture.type, source.resource);\n    } else {\n      gl.texImage2D(glTexture.target, 0, glTexture.internalFormat, glTexture.format, glTexture.type, source.resource);\n    }\n    glTexture.width = textureWidth;\n    glTexture.height = textureHeight;\n  }\n};\nexport { glUploadImageResource };","map":{"version":3,"names":["glUploadImageResource","id","upload","source","glTexture","gl","webGLVersion","premultipliedAlpha","alphaMode","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","glWidth","width","glHeight","height","textureWidth","pixelWidth","textureHeight","pixelHeight","resourceWidth","resourceHeight","texImage2D","target","internalFormat","format","type","texSubImage2D","TEXTURE_2D","resource"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadImageResource.ts"],"sourcesContent":["import type { CanvasSource } from '../../../shared/texture/sources/CanvasSource';\nimport type { ImageSource } from '../../../shared/texture/sources/ImageSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadImageResource = {\n\n    id: 'image',\n\n    upload(source: ImageSource | CanvasSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n\n        const glWidth = glTexture.width;\n        const glHeight = glTexture.height;\n\n        const textureWidth = source.pixelWidth;\n        const textureHeight = source.pixelHeight;\n\n        const resourceWidth = source.resourceWidth;\n        const resourceHeight = source.resourceHeight;\n\n        if (resourceWidth < textureWidth || resourceHeight < textureHeight)\n        {\n            if (glWidth !== textureWidth || glHeight !== textureHeight)\n            {\n                gl.texImage2D(\n                    glTexture.target,\n                    0,\n                    glTexture.internalFormat,\n                    textureWidth,\n                    textureHeight,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    null\n                );\n            }\n\n            if (webGLVersion === 2)\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    resourceWidth,\n                    resourceHeight,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n            else\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n        }\n        else if (glWidth === textureWidth || glHeight === textureHeight)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else if (webGLVersion === 2)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                textureWidth,\n                textureHeight,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n\n        glTexture.width = textureWidth;\n        glTexture.height = textureHeight;\n    }\n} as GLTextureUploader;\n\n"],"mappings":";;AAMO,MAAMA,qBAAwB;EAEjCC,EAAI;EAEJC,MAAOA,CAAAC,MAAA,EAAoCC,SAAsB,EAAAC,EAAA,EAAwBC,YACzF;IACU,MAAAC,kBAAA,GAAqBJ,MAAA,CAAOK,SAAc;IAE7CH,EAAA,CAAAI,WAAA,CAAYJ,EAAG,CAAAK,8BAAA,EAAgCH,kBAAkB;IAEpE,MAAMI,OAAA,GAAUP,SAAU,CAAAQ,KAAA;IAC1B,MAAMC,QAAA,GAAWT,SAAU,CAAAU,MAAA;IAE3B,MAAMC,YAAA,GAAeZ,MAAO,CAAAa,UAAA;IAC5B,MAAMC,aAAA,GAAgBd,MAAO,CAAAe,WAAA;IAE7B,MAAMC,aAAA,GAAgBhB,MAAO,CAAAgB,aAAA;IAC7B,MAAMC,cAAA,GAAiBjB,MAAO,CAAAiB,cAAA;IAE1B,IAAAD,aAAA,GAAgBJ,YAAgB,IAAAK,cAAA,GAAiBH,aACrD;MACQ,IAAAN,OAAA,KAAYI,YAAgB,IAAAF,QAAA,KAAaI,aAC7C;QACOZ,EAAA,CAAAgB,UAAA,CACCjB,SAAU,CAAAkB,MAAA,EACV,GACAlB,SAAU,CAAAmB,cAAA,EACVR,YAAA,EACAE,aAAA,EACA,GACAb,SAAU,CAAAoB,MAAA,EACVpB,SAAU,CAAAqB,IAAA,EACV,KACJ;MAAA;MAGJ,IAAInB,YAAA,KAAiB,CACrB;QACOD,EAAA,CAAAqB,aAAA,CACCrB,EAAG,CAAAsB,UAAA,EACH,GACA,GACA,GACAR,aAAA,EACAC,cAAA,EACAhB,SAAU,CAAAoB,MAAA,EACVpB,SAAU,CAAAqB,IAAA,EACVtB,MAAO,CAAAyB,QAAA,CACX;MAAA,CAGJ;QACOvB,EAAA,CAAAqB,aAAA,CACCrB,EAAG,CAAAsB,UAAA,EACH,GACA,GACA,GACAvB,SAAU,CAAAoB,MAAA,EACVpB,SAAU,CAAAqB,IAAA,EACVtB,MAAO,CAAAyB,QAAA,CACX;MAAA;IACJ,CAEK,UAAAjB,OAAA,KAAYI,YAAgB,IAAAF,QAAA,KAAaI,aAClD;MACOZ,EAAA,CAAAqB,aAAA,CACCrB,EAAG,CAAAsB,UAAA,EACH,GACA,GACA,GACAvB,SAAU,CAAAoB,MAAA,EACVpB,SAAU,CAAAqB,IAAA,EACVtB,MAAO,CAAAyB,QAAA,CACX;IAAA,CACJ,UACStB,YAAA,KAAiB,CAC1B;MACOD,EAAA,CAAAgB,UAAA,CACCjB,SAAU,CAAAkB,MAAA,EACV,GACAlB,SAAU,CAAAmB,cAAA,EACVR,YAAA,EACAE,aAAA,EACA,GACAb,SAAU,CAAAoB,MAAA,EACVpB,SAAU,CAAAqB,IAAA,EACVtB,MAAO,CAAAyB,QAAA,CACX;IAAA,CAGJ;MACOvB,EAAA,CAAAgB,UAAA,CACCjB,SAAU,CAAAkB,MAAA,EACV,GACAlB,SAAU,CAAAmB,cAAA,EACVnB,SAAU,CAAAoB,MAAA,EACVpB,SAAU,CAAAqB,IAAA,EACVtB,MAAO,CAAAyB,QAAA,CACX;IAAA;IAGJxB,SAAA,CAAUQ,KAAQ,GAAAG,YAAA;IAClBX,SAAA,CAAUU,MAAS,GAAAG,aAAA;EAAA;AAE3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}