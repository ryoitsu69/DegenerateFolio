{"ast":null,"code":"import { keccak_256 as keccak256Js, keccak_512 as keccak512Js } from '@noble/hashes/sha3';\nimport { keccak256, keccak512 } from '@polkadot/wasm-crypto';\nimport { createAsHex, createBitHasher, createDualHasher } from '../helpers.js';\n/**\n * @name keccakAsU8a\n * @summary Creates a keccak Uint8Array from the input.\n * @description\n * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { keccakAsU8a } from '@polkadot/util-crypto';\n *\n * keccakAsU8a('123'); // => Uint8Array\n * ```\n */\nexport const keccakAsU8a = /*#__PURE__*/createDualHasher({\n  256: keccak256,\n  512: keccak512\n}, {\n  256: keccak256Js,\n  512: keccak512Js\n});\n/**\n * @name keccak256AsU8a\n * @description Creates a keccak256 Uint8Array from the input.\n */\nexport const keccak256AsU8a = /*#__PURE__*/createBitHasher(256, keccakAsU8a);\n/**\n * @name keccak512AsU8a\n * @description Creates a keccak512 Uint8Array from the input.\n */\nexport const keccak512AsU8a = /*#__PURE__*/createBitHasher(512, keccakAsU8a);\n/**\n * @name keccakAsHex\n * @description Creates a keccak hex string from the input.\n */\nexport const keccakAsHex = /*#__PURE__*/createAsHex(keccakAsU8a);","map":{"version":3,"names":["keccak_256","keccak256Js","keccak_512","keccak512Js","keccak256","keccak512","createAsHex","createBitHasher","createDualHasher","keccakAsU8a","keccak256AsU8a","keccak512AsU8a","keccakAsHex"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/keccak/asU8a.js"],"sourcesContent":["import { keccak_256 as keccak256Js, keccak_512 as keccak512Js } from '@noble/hashes/sha3';\nimport { keccak256, keccak512 } from '@polkadot/wasm-crypto';\nimport { createAsHex, createBitHasher, createDualHasher } from '../helpers.js';\n/**\n * @name keccakAsU8a\n * @summary Creates a keccak Uint8Array from the input.\n * @description\n * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { keccakAsU8a } from '@polkadot/util-crypto';\n *\n * keccakAsU8a('123'); // => Uint8Array\n * ```\n */\nexport const keccakAsU8a = /*#__PURE__*/ createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak256Js, 512: keccak512Js });\n/**\n * @name keccak256AsU8a\n * @description Creates a keccak256 Uint8Array from the input.\n */\nexport const keccak256AsU8a = /*#__PURE__*/ createBitHasher(256, keccakAsU8a);\n/**\n * @name keccak512AsU8a\n * @description Creates a keccak512 Uint8Array from the input.\n */\nexport const keccak512AsU8a = /*#__PURE__*/ createBitHasher(512, keccakAsU8a);\n/**\n * @name keccakAsHex\n * @description Creates a keccak hex string from the input.\n */\nexport const keccakAsHex = /*#__PURE__*/ createAsHex(keccakAsU8a);\n"],"mappings":"AAAA,SAASA,UAAU,IAAIC,WAAW,EAAEC,UAAU,IAAIC,WAAW,QAAQ,oBAAoB;AACzF,SAASC,SAAS,EAAEC,SAAS,QAAQ,uBAAuB;AAC5D,SAASC,WAAW,EAAEC,eAAe,EAAEC,gBAAgB,QAAQ,eAAe;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,aAAcD,gBAAgB,CAAC;EAAE,GAAG,EAAEJ,SAAS;EAAE,GAAG,EAAEC;AAAU,CAAC,EAAE;EAAE,GAAG,EAAEJ,WAAW;EAAE,GAAG,EAAEE;AAAY,CAAC,CAAC;AACrI;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAG,aAAcH,eAAe,CAAC,GAAG,EAAEE,WAAW,CAAC;AAC7E;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAG,aAAcJ,eAAe,CAAC,GAAG,EAAEE,WAAW,CAAC;AAC7E;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAG,aAAcN,WAAW,CAACG,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}