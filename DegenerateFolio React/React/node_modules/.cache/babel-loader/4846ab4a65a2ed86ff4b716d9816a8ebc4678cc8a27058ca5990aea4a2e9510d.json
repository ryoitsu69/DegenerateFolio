{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction parseResult(api, _ref) {\n  let {\n    allIds,\n    allProposals,\n    approvalIds,\n    councilProposals,\n    proposalCount\n  } = _ref;\n  const approvals = [];\n  const proposals = [];\n  const councilTreasury = councilProposals.filter(_ref2 => {\n    let {\n      proposal\n    } = _ref2;\n    return proposal && (api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal));\n  });\n  allIds.forEach((id, index) => {\n    if (allProposals[index].isSome) {\n      const council = councilTreasury.filter(_ref3 => {\n        let {\n          proposal\n        } = _ref3;\n        return proposal && id.eq(proposal.args[0]);\n      }).sort((a, b) => a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);\n      const isApproval = approvalIds.some(approvalId => approvalId.eq(id));\n      const derived = {\n        council,\n        id,\n        proposal: allProposals[index].unwrap()\n      };\n      if (isApproval) {\n        approvals.push(derived);\n      } else {\n        proposals.push(derived);\n      }\n    }\n  });\n  return {\n    approvals,\n    proposalCount,\n    proposals\n  };\n}\nfunction retrieveProposals(api, proposalCount, approvalIds) {\n  const proposalIds = [];\n  const count = proposalCount.toNumber();\n  for (let index = 0; index < count; index++) {\n    if (!approvalIds.some(id => id.eqn(index))) {\n      proposalIds.push(api.registry.createType('ProposalIndex', index));\n    }\n  }\n  const allIds = [...proposalIds, ...approvalIds];\n  return combineLatest([api.query.treasury.proposals.multi(allIds), api.derive.council ? api.derive.council.proposals() : of([])]).pipe(map(_ref4 => {\n    let [allProposals, councilProposals] = _ref4;\n    return parseResult(api, {\n      allIds,\n      allProposals,\n      approvalIds,\n      councilProposals,\n      proposalCount\n    });\n  }));\n}\n/**\n * @description Retrieve all active and approved treasury proposals, along with their info\n */\nexport function proposals(instanceId, api) {\n  return memo(instanceId, () => api.query.treasury ? combineLatest([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe(switchMap(_ref5 => {\n    let [proposalCount, approvalIds] = _ref5;\n    return retrieveProposals(api, proposalCount, approvalIds);\n  })) : of({\n    approvals: [],\n    proposalCount: api.registry.createType('ProposalIndex'),\n    proposals: []\n  }));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","memo","parseResult","api","_ref","allIds","allProposals","approvalIds","councilProposals","proposalCount","approvals","proposals","councilTreasury","filter","_ref2","proposal","tx","treasury","approveProposal","is","rejectProposal","forEach","id","index","isSome","council","_ref3","eq","args","sort","a","b","method","localeCompare","isApproval","some","approvalId","derived","unwrap","push","retrieveProposals","proposalIds","count","toNumber","eqn","registry","createType","query","multi","derive","pipe","_ref4","instanceId","_ref5"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/treasury/proposals.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount }) {\n    const approvals = [];\n    const proposals = [];\n    const councilTreasury = councilProposals.filter(({ proposal }) => proposal && (api.tx.treasury.approveProposal.is(proposal) ||\n        api.tx.treasury.rejectProposal.is(proposal)));\n    allIds.forEach((id, index) => {\n        if (allProposals[index].isSome) {\n            const council = councilTreasury\n                .filter(({ proposal }) => proposal && id.eq(proposal.args[0]))\n                .sort((a, b) => a.proposal && b.proposal\n                ? a.proposal.method.localeCompare(b.proposal.method)\n                : a.proposal\n                    ? -1\n                    : 1);\n            const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));\n            const derived = { council, id, proposal: allProposals[index].unwrap() };\n            if (isApproval) {\n                approvals.push(derived);\n            }\n            else {\n                proposals.push(derived);\n            }\n        }\n    });\n    return { approvals, proposalCount, proposals };\n}\nfunction retrieveProposals(api, proposalCount, approvalIds) {\n    const proposalIds = [];\n    const count = proposalCount.toNumber();\n    for (let index = 0; index < count; index++) {\n        if (!approvalIds.some((id) => id.eqn(index))) {\n            proposalIds.push(api.registry.createType('ProposalIndex', index));\n        }\n    }\n    const allIds = [...proposalIds, ...approvalIds];\n    return combineLatest([\n        api.query.treasury.proposals.multi(allIds),\n        api.derive.council\n            ? api.derive.council.proposals()\n            : of([])\n    ]).pipe(map(([allProposals, councilProposals]) => parseResult(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount })));\n}\n/**\n * @description Retrieve all active and approved treasury proposals, along with their info\n */\nexport function proposals(instanceId, api) {\n    return memo(instanceId, () => api.query.treasury\n        ? combineLatest([\n            api.query.treasury.proposalCount(),\n            api.query.treasury.approvals()\n        ]).pipe(switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds)))\n        : of({\n            approvals: [],\n            proposalCount: api.registry.createType('ProposalIndex'),\n            proposals: []\n        }));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}