{"ast":null,"code":"\"use strict\";\n\nconst findHooksRx = /\\{\\{(.*?)\\}\\}/g;\nfunction compileHooks(programSrc) {\n  const parts = {};\n  const partMatches = programSrc.match(findHooksRx)?.map(hook => hook.replace(/[{()}]/g, \"\")) ?? [];\n  partMatches.forEach(hook => {\n    parts[hook] = [];\n  });\n  return parts;\n}\nexport { compileHooks, findHooksRx };","map":{"version":3,"names":["findHooksRx","compileHooks","programSrc","parts","partMatches","match","map","hook","replace","forEach"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileHooks.ts"],"sourcesContent":["export const findHooksRx = /\\{\\{(.*?)\\}\\}/g;\n\n/**\n * takes a program string and returns an hash mapping the hooks to empty arrays\n * @param programSrc - the program containing hooks\n */\nexport function compileHooks(programSrc: string): Record<string, string[]>\n{\n    const parts: Record<string, string[]> = {};\n\n    const partMatches = programSrc\n        .match(findHooksRx)\n        ?.map((hook) => hook.replace(/[{()}]/g, '')) ?? [];\n\n    partMatches.forEach((hook) =>\n    {\n        parts[hook] = [];\n    });\n\n    return parts;\n}\n"],"mappings":";;AAAO,MAAMA,WAAc;AAMpB,SAASC,aAAaC,UAC7B;EACI,MAAMC,KAAA,GAAkC,EAAC;EAEzC,MAAMC,WAAc,GAAAF,UAAA,CACfG,KAAM,CAAAL,WAAW,GAChBM,GAAI,CAACC,IAAS,IAAAA,IAAA,CAAKC,OAAQ,YAAW,EAAE,CAAC,KAAK,EAAC;EAEzCJ,WAAA,CAAAK,OAAA,CAASF,IACrB;IACUJ,KAAA,CAAAI,IAAI,IAAI,EAAC;EAAA,CAClB;EAEM,OAAAJ,KAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}