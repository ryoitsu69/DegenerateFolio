{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { textureBitGl } from '../../../rendering/high-shader/shader-bits/textureBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\n\"use strict\";\nclass GlMeshAdaptor {\n  init() {\n    const glProgram = compileHighShaderGlProgram({\n      name: \"mesh\",\n      bits: [localUniformBitGl, textureBitGl, roundPixelsBitGl]\n    });\n    this._shader = new Shader({\n      glProgram,\n      resources: {\n        uTexture: Texture.EMPTY.source,\n        textureUniforms: {\n          uTextureMatrix: {\n            type: \"mat3x3<f32>\",\n            value: new Matrix()\n          }\n        }\n      }\n    });\n  }\n  execute(meshPipe, mesh) {\n    const renderer = meshPipe.renderer;\n    let shader = mesh._shader;\n    if (!shader) {\n      shader = this._shader;\n      const texture = mesh.texture;\n      const source = texture.source;\n      shader.resources.uTexture = source;\n      shader.resources.uSampler = source.style;\n      shader.resources.textureUniforms.uniforms.uTextureMatrix = texture.textureMatrix.mapCoord;\n    } else if (!shader.glProgram) {\n      warn(\"Mesh shader has no glProgram\", mesh.shader);\n      return;\n    }\n    shader.groups[100] = renderer.globalUniforms.bindGroup;\n    shader.groups[101] = meshPipe.localUniformsBindGroup;\n    renderer.encoder.draw({\n      geometry: mesh._geometry,\n      shader,\n      state: mesh.state\n    });\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\nGlMeshAdaptor.extension = {\n  type: [ExtensionType.WebGLPipesAdaptor],\n  name: \"mesh\"\n};\nexport { GlMeshAdaptor };","map":{"version":3,"names":["GlMeshAdaptor","init","glProgram","compileHighShaderGlProgram","name","bits","localUniformBitGl","textureBitGl","roundPixelsBitGl","_shader","Shader","resources","uTexture","Texture","EMPTY","source","textureUniforms","uTextureMatrix","type","value","Matrix","execute","meshPipe","mesh","renderer","shader","texture","uSampler","style","uniforms","textureMatrix","mapCoord","warn","groups","globalUniforms","bindGroup","localUniformsBindGroup","encoder","draw","geometry","_geometry","state","destroy","extension","ExtensionType","WebGLPipesAdaptor"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/mesh/gl/GlMeshAdaptor.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBitGl } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * A MeshAdaptor that uses the WebGL to render meshes.\n * @memberof rendering\n * @ignore\n */\nexport class GlMeshAdaptor implements MeshAdaptor\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBitGl,\n                textureBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                uTexture: Texture.EMPTY.source,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh): void\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            const texture = mesh.texture;\n            const source = texture.source;\n\n            shader.resources.uTexture = source;\n            shader.resources.uSampler = source.style;\n            shader.resources.textureUniforms.uniforms.uTextureMatrix = texture.textureMatrix.mapCoord;\n        }\n        else if (!shader.glProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no glProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        // setting the groups to be high to be compatible and not\n        // overlap any other groups\n        shader.groups[100] = renderer.globalUniforms.bindGroup;\n        shader.groups[101] = meshPipe.localUniformsBindGroup;\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state,\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n"],"mappings":";;;;;;;;;;AAkBO,MAAMA,aACb;EAUWC,IACPA,CAAA;IACI,MAAMC,SAAA,GAAYC,0BAA2B;MACzCC,IAAM;MACNC,IAAM,GACFC,iBAAA,EACAC,YAAA,EACAC,gBAAA;IACJ,CACH;IAEI,KAAAC,OAAA,GAAU,IAAIC,MAAO;MACtBR,SAAA;MACAS,SAAW;QACPC,QAAA,EAAUC,OAAA,CAAQC,KAAM,CAAAC,MAAA;QACxBC,eAAiB;UACbC,cAAA,EAAgB;YAAEC,IAAA,EAAM;YAAeC,KAAO,MAAIC,MAAA;UAAS;QAAA;MAC/D;IACJ,CACH;EAAA;EAGEC,QAAQC,QAAA,EAAoBC,IACnC;IACI,MAAMC,QAAA,GAAWF,QAAS,CAAAE,QAAA;IAE1B,IAAIC,MAAA,GAAiBF,IAAK,CAAAd,OAAA;IAE1B,IAAI,CAACgB,MACL;MACIA,MAAA,GAAS,IAAK,CAAAhB,OAAA;MAEd,MAAMiB,OAAA,GAAUH,IAAK,CAAAG,OAAA;MACrB,MAAMX,MAAA,GAASW,OAAQ,CAAAX,MAAA;MAEvBU,MAAA,CAAOd,SAAA,CAAUC,QAAW,GAAAG,MAAA;MACrBU,MAAA,CAAAd,SAAA,CAAUgB,QAAA,GAAWZ,MAAO,CAAAa,KAAA;MACnCH,MAAA,CAAOd,SAAU,CAAAK,eAAA,CAAgBa,QAAS,CAAAZ,cAAA,GAAiBS,OAAA,CAAQI,aAAc,CAAAC,QAAA;IAAA,CACrF,UACS,CAACN,MAAA,CAAOvB,SACjB;MAES8B,IAAA,iCAAgCT,IAAA,CAAKE,MAAM;MAGhD;IAAA;IAKJA,MAAA,CAAOQ,MAAO,IAAG,CAAI,GAAAT,QAAA,CAASU,cAAe,CAAAC,SAAA;IACtCV,MAAA,CAAAQ,MAAA,CAAO,GAAG,IAAIX,QAAS,CAAAc,sBAAA;IAE9BZ,QAAA,CAASa,OAAA,CAAQC,IAAK;MAClBC,QAAA,EAAUhB,IAAK,CAAAiB,SAAA;MACff,MAAA;MACAgB,KAAA,EAAOlB,IAAK,CAAAkB;IAAA,CACf;EAAA;EAGEC,OACPA,CAAA;IACS,KAAAjC,OAAA,CAAQiC,OAAA,CAAQ,IAAI;IACzB,KAAKjC,OAAU;EAAA;AAEvB;AA5EaT,aAAA,CAEK2C,SAAY;EACtBzB,IAAM,GACF0B,aAAc,CAAAC,iBAAA,CAClB;EACAzC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}