{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\"use strict\";\nclass ColorMaskPipe {\n  constructor(renderer) {\n    this._colorStack = [];\n    this._colorStackIndex = 0;\n    this._currentColor = 0;\n    this._renderer = renderer;\n  }\n  buildStart() {\n    this._colorStack[0] = 15;\n    this._colorStackIndex = 1;\n    this._currentColor = 15;\n  }\n  push(mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & mask.mask;\n    const currentColor = this._colorStack[this._colorStackIndex];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n    this._colorStackIndex++;\n  }\n  pop(_mask, _container, instructionSet) {\n    const renderer = this._renderer;\n    renderer.renderPipes.batch.break(instructionSet);\n    const colorStack = this._colorStack;\n    this._colorStackIndex--;\n    const currentColor = colorStack[this._colorStackIndex - 1];\n    if (currentColor !== this._currentColor) {\n      this._currentColor = currentColor;\n      instructionSet.add({\n        renderPipeId: \"colorMask\",\n        colorMask: currentColor,\n        canBundle: false\n      });\n    }\n  }\n  execute(instruction) {\n    const renderer = this._renderer;\n    renderer.colorMask.setMask(instruction.colorMask);\n  }\n  destroy() {\n    this._colorStack = null;\n  }\n}\n/** @ignore */\nColorMaskPipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"colorMask\"\n};\nexport { ColorMaskPipe };","map":{"version":3,"names":["ColorMaskPipe","constructor","renderer","_colorStack","_colorStackIndex","_currentColor","_renderer","buildStart","push","mask","_container","instructionSet","renderPipes","batch","break","colorStack","currentColor","add","renderPipeId","colorMask","canBundle","pop","_mask","execute","instruction","setMask","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/mask/color/ColorMaskPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n"],"mappings":";;AAgBO,MAAMA,aACb;EAgBIC,YAAYC,QACZ;IALA,KAAQC,WAAA,GAAwB,EAAC;IACjC,KAAQC,gBAAmB;IAC3B,KAAQC,aAAgB;IAIpB,KAAKC,SAAY,GAAAJ,QAAA;EAAA;EAGdK,UACPA,CAAA;IACS,KAAAJ,WAAA,CAAY,CAAC,CAAI;IACtB,KAAKC,gBAAmB;IACxB,KAAKC,aAAgB;EAAA;EAGlBG,KAAKC,IAAc,EAAAC,UAAA,EAAuBC,cACjD;IACI,MAAMT,QAAA,GAAW,IAAK,CAAAI,SAAA;IAEbJ,QAAA,CAAAU,WAAA,CAAYC,KAAM,CAAAC,KAAA,CAAMH,cAAc;IAE/C,MAAMI,UAAA,GAAa,IAAK,CAAAZ,WAAA;IAEbY,UAAA,MAAKX,gBAAgB,CAAI,GAAAW,UAAA,CAAW,KAAKX,gBAAmB,IAAC,IAAKK,IAAmB,CAAAA,IAAA;IAEhG,MAAMO,YAAe,QAAKb,WAAY,MAAKC,gBAAgB;IAEvD,IAAAY,YAAA,KAAiB,KAAKX,aAC1B;MACI,KAAKA,aAAgB,GAAAW,YAAA;MACrBL,cAAA,CAAeM,GAAI;QACfC,YAAc;QACdC,SAAW,EAAAH,YAAA;QACXI,SAAW;MAAA,CACU;IAAA;IAGxB,KAAAhB,gBAAA;EAAA;EAGFiB,IAAIC,KAAe,EAAAZ,UAAA,EAAuBC,cACjD;IACI,MAAMT,QAAA,GAAW,IAAK,CAAAI,SAAA;IAEbJ,QAAA,CAAAU,WAAA,CAAYC,KAAM,CAAAC,KAAA,CAAMH,cAAc;IAE/C,MAAMI,UAAA,GAAa,IAAK,CAAAZ,WAAA;IAEnB,KAAAC,gBAAA;IAEL,MAAMY,YAAe,GAAAD,UAAA,CAAW,IAAK,CAAAX,gBAAA,GAAmB,CAAC;IAErD,IAAAY,YAAA,KAAiB,KAAKX,aAC1B;MACI,KAAKA,aAAgB,GAAAW,YAAA;MAErBL,cAAA,CAAeM,GAAI;QACfC,YAAc;QACdC,SAAW,EAAAH,YAAA;QACXI,SAAW;MAAA,CACU;IAAA;EAC7B;EAGGG,QAAQC,WACf;IACI,MAAMtB,QAAA,GAAW,IAAK,CAAAI,SAAA;IAEbJ,QAAA,CAAAiB,SAAA,CAAUM,OAAQ,CAAAD,WAAA,CAAYL,SAAS;EAAA;EAG7CO,OACPA,CAAA;IACI,KAAKvB,WAAc;EAAA;AAE3B;AAAA;AAzFaH,aAAA,CAGK2B,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,UAAA,EACdD,aAAc,CAAAE,WAAA,EACdF,aAAc,CAAAG,WAAA,CAClB;EACAC,IAAM;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}