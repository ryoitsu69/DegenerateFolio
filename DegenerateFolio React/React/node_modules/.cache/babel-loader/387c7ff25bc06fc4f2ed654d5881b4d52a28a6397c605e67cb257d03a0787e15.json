{"ast":null,"code":"import { Matrix } from \"@pixi/math\";\nconst tempMat = new Matrix();\nclass TextureMatrix {\n  /**\n   * @param texture - observed texture\n   * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n   */\n  constructor(texture, clampMargin) {\n    this._texture = texture, this.mapCoord = new Matrix(), this.uClampFrame = new Float32Array(4), this.uClampOffset = new Float32Array(2), this._textureID = -1, this._updateID = 0, this.clampOffset = 0, this.clampMargin = typeof clampMargin > \"u\" ? 0.5 : clampMargin, this.isSimple = !1;\n  }\n  /** Texture property. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    this._texture = value, this._textureID = -1;\n  }\n  /**\n   * Multiplies uvs array to transform\n   * @param uvs - mesh uvs\n   * @param [out=uvs] - output\n   * @returns - output\n   */\n  multiplyUvs(uvs, out) {\n    out === void 0 && (out = uvs);\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i],\n        y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx, out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  /**\n   * Updates matrices if texture was changed.\n   * @param [forceUpdate=false] - if true, matrices will be updated any case\n   * @returns - Whether or not it was updated\n   */\n  update(forceUpdate) {\n    const tex = this._texture;\n    if (!tex || !tex.valid || !forceUpdate && this._textureID === tex._updateID) return !1;\n    this._textureID = tex._updateID, this._updateID++;\n    const uvs = tex._uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig,\n      trim = tex.trim;\n    trim && (tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height, -trim.x / trim.width, -trim.y / trim.height), this.mapCoord.append(tempMat));\n    const texBase = tex.baseTexture,\n      frame = this.uClampFrame,\n      margin = this.clampMargin / texBase.resolution,\n      offset = this.clampOffset;\n    return frame[0] = (tex._frame.x + margin + offset) / texBase.width, frame[1] = (tex._frame.y + margin + offset) / texBase.height, frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width, frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height, this.uClampOffset[0] = offset / texBase.realWidth, this.uClampOffset[1] = offset / texBase.realHeight, this.isSimple = tex._frame.width === texBase.width && tex._frame.height === texBase.height && tex.rotate === 0, !0;\n  }\n}\nexport { TextureMatrix };","map":{"version":3,"names":["tempMat","Matrix","TextureMatrix","constructor","texture","clampMargin","_texture","mapCoord","uClampFrame","Float32Array","uClampOffset","_textureID","_updateID","clampOffset","isSimple","value","multiplyUvs","uvs","out","mat","i","length","x","y","a","c","tx","b","d","ty","update","forceUpdate","tex","valid","_uvs","set","x1","x0","y1","y0","x3","y3","orig","trim","width","height","append","texBase","baseTexture","frame","margin","resolution","offset","_frame","realWidth","realHeight","rotate"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/textures/TextureMatrix.ts"],"sourcesContent":["import { Matrix } from '@pixi/math';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _textureID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _updateID: number;\n    _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n        this.isSimple = false;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture = value;\n        this._textureID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed.\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */\n    update(forceUpdate?: boolean): boolean\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._textureID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._textureID = tex._updateID;\n        this._updateID++;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}