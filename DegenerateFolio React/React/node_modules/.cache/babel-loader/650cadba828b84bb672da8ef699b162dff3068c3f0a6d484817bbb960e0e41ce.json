{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeFunctionCall = exports.encodeFunctionSignature = void 0;\n/**\n *\n *  @module ABI\n */\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst utils_js_1 = require(\"../utils.js\");\nconst parameters_api_js_1 = require(\"./parameters_api.js\");\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json\n * @param functionName - The function name to encode or the `JSON interface` object of the function.\n * If the passed parameter is a string, it has to be in the form of `functionName(param1Type,param2Type,...)`. eg: myFunction(uint256,uint32[],bytes10,bytes)\n * @returns - The ABI signature of the function.\n * @example\n * ```ts\n * const signature = web3.eth.abi.encodeFunctionSignature({\n *   name: \"myMethod\",\n *   type: \"function\",\n *   inputs: [\n *     {\n *       type: \"uint256\",\n *       name: \"myNumber\",\n *     },\n *     {\n *       type: \"string\",\n *       name: \"myString\",\n *     },\n *   ],\n * });\n * console.log(signature);\n * > 0x24ee0097\n *\n * const signature = web3.eth.abi.encodeFunctionSignature('myMethod(uint256,string)')\n * console.log(signature);\n * > 0x24ee0097\n *\n * const signature = web3.eth.abi.encodeFunctionSignature('safeTransferFrom(address,address,uint256,bytes)');\n * console.log(signature);\n * > 0xb88d4fde\n * ```\n */\nconst encodeFunctionSignature = functionName => {\n  if (typeof functionName !== 'string' && !(0, utils_js_1.isAbiFunctionFragment)(functionName)) {\n    throw new web3_errors_1.AbiError('Invalid parameter value in encodeFunctionSignature');\n  }\n  let name;\n  if (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\n    name = (0, utils_js_1.jsonInterfaceMethodToString)(functionName);\n  } else {\n    name = functionName;\n  }\n  return (0, web3_utils_1.sha3Raw)(name).slice(0, 10);\n};\nexports.encodeFunctionSignature = encodeFunctionSignature;\n/**\n * Encodes a function call using its `JSON interface` object and given parameters.\n * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json\n * @param jsonInterface - The `JSON interface` object of the function.\n * @param params - The parameters to encode\n * @returns - The ABI encoded function call, which, means the function signature and the parameters passed.\n * @example\n * ```ts\n * const sig = web3.eth.abi.encodeFunctionCall(\n *   {\n *     name: \"myMethod\",\n *     type: \"function\",\n *     inputs: [\n *       {\n *         type: \"uint256\",\n *         name: \"myNumber\",\n *       },\n *       {\n *         type: \"string\",\n *         name: \"myString\",\n *       },\n *     ],\n *   },\n *   [\"2345675643\", \"Hello!%\"]\n * );\n * console.log(sig);\n * > 0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n *\n *\n *\n * const sig = web3.eth.abi.encodeFunctionCall(\n *   {\n *     inputs: [\n *       {\n *         name: \"account\",\n *         type: \"address\",\n *       },\n *     ],\n *     name: \"balanceOf\",\n *     outputs: [\n *       {\n *         name: \"\",\n *         type: \"uint256\",\n *       },\n *     ],\n *     stateMutability: \"view\",\n *     type: \"function\",\n *   },\n *   [\"0x1234567890123456789012345678901234567890\"]\n * );\n *\n * console.log(sig);\n * > 0x70a082310000000000000000000000001234567890123456789012345678901234567890\n * ```\n */\nconst encodeFunctionCall = (jsonInterface, params) => {\n  var _a;\n  if (!(0, utils_js_1.isAbiFunctionFragment)(jsonInterface)) {\n    throw new web3_errors_1.AbiError('Invalid parameter value in encodeFunctionCall');\n  }\n  return \"\".concat((0, exports.encodeFunctionSignature)(jsonInterface)).concat((0, parameters_api_js_1.encodeParameters)((_a = jsonInterface.inputs) !== null && _a !== void 0 ? _a : [], params !== null && params !== void 0 ? params : []).replace('0x', ''));\n};\nexports.encodeFunctionCall = encodeFunctionCall;","map":{"version":3,"names":["web3_errors_1","require","web3_utils_1","utils_js_1","parameters_api_js_1","encodeFunctionSignature","functionName","isAbiFunctionFragment","AbiError","name","jsonInterfaceMethodToString","sha3Raw","slice","exports","encodeFunctionCall","jsonInterface","params","concat","encodeParameters","_a","inputs","replace"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-abi/src/api/functions_api.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * \n *  @module ABI\n */\nimport { AbiError } from 'web3-errors';\nimport { sha3Raw } from 'web3-utils';\nimport { AbiFunctionFragment } from 'web3-types';\nimport { isAbiFunctionFragment, jsonInterfaceMethodToString } from '../utils.js';\nimport { encodeParameters } from './parameters_api.js';\n\n/**\n * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.\n * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json\n * @param functionName - The function name to encode or the `JSON interface` object of the function.\n * If the passed parameter is a string, it has to be in the form of `functionName(param1Type,param2Type,...)`. eg: myFunction(uint256,uint32[],bytes10,bytes)\n * @returns - The ABI signature of the function.\n * @example\n * ```ts\n * const signature = web3.eth.abi.encodeFunctionSignature({\n *   name: \"myMethod\",\n *   type: \"function\",\n *   inputs: [\n *     {\n *       type: \"uint256\",\n *       name: \"myNumber\",\n *     },\n *     {\n *       type: \"string\",\n *       name: \"myString\",\n *     },\n *   ],\n * });\n * console.log(signature);\n * > 0x24ee0097\n *\n * const signature = web3.eth.abi.encodeFunctionSignature('myMethod(uint256,string)')\n * console.log(signature);\n * > 0x24ee0097\n *\n * const signature = web3.eth.abi.encodeFunctionSignature('safeTransferFrom(address,address,uint256,bytes)');\n * console.log(signature);\n * > 0xb88d4fde\n * ```\n */\nexport const encodeFunctionSignature = (functionName: string | AbiFunctionFragment): string => {\n\tif (typeof functionName !== 'string' && !isAbiFunctionFragment(functionName)) {\n\t\tthrow new AbiError('Invalid parameter value in encodeFunctionSignature');\n\t}\n\n\tlet name: string;\n\n\tif (functionName && (typeof functionName === 'function' || typeof functionName === 'object')) {\n\t\tname = jsonInterfaceMethodToString(functionName);\n\t} else {\n\t\tname = functionName;\n\t}\n\n\treturn sha3Raw(name).slice(0, 10);\n};\n\n/**\n * Encodes a function call using its `JSON interface` object and given parameters.\n * The JSON interface spec documentation https://docs.soliditylang.org/en/latest/abi-spec.html#json\n * @param jsonInterface - The `JSON interface` object of the function.\n * @param params - The parameters to encode\n * @returns - The ABI encoded function call, which, means the function signature and the parameters passed.\n * @example\n * ```ts\n * const sig = web3.eth.abi.encodeFunctionCall(\n *   {\n *     name: \"myMethod\",\n *     type: \"function\",\n *     inputs: [\n *       {\n *         type: \"uint256\",\n *         name: \"myNumber\",\n *       },\n *       {\n *         type: \"string\",\n *         name: \"myString\",\n *       },\n *     ],\n *   },\n *   [\"2345675643\", \"Hello!%\"]\n * );\n * console.log(sig);\n * > 0x24ee0097000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n *\n *\n *\n * const sig = web3.eth.abi.encodeFunctionCall(\n *   {\n *     inputs: [\n *       {\n *         name: \"account\",\n *         type: \"address\",\n *       },\n *     ],\n *     name: \"balanceOf\",\n *     outputs: [\n *       {\n *         name: \"\",\n *         type: \"uint256\",\n *       },\n *     ],\n *     stateMutability: \"view\",\n *     type: \"function\",\n *   },\n *   [\"0x1234567890123456789012345678901234567890\"]\n * );\n *\n * console.log(sig);\n * > 0x70a082310000000000000000000000001234567890123456789012345678901234567890\n * ```\n */\nexport const encodeFunctionCall = (\n\tjsonInterface: AbiFunctionFragment,\n\tparams: unknown[],\n): string => {\n\tif (!isAbiFunctionFragment(jsonInterface)) {\n\t\tthrow new AbiError('Invalid parameter value in encodeFunctionCall');\n\t}\n\n\treturn `${encodeFunctionSignature(jsonInterface)}${encodeParameters(\n\t\tjsonInterface.inputs ?? [],\n\t\tparams ?? [],\n\t).replace('0x', '')}`;\n};\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAiBA;;;;AAIA,MAAAA,aAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AAEA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCO,MAAMI,uBAAuB,GAAIC,YAA0C,IAAY;EAC7F,IAAI,OAAOA,YAAY,KAAK,QAAQ,IAAI,CAAC,IAAAH,UAAA,CAAAI,qBAAqB,EAACD,YAAY,CAAC,EAAE;IAC7E,MAAM,IAAIN,aAAA,CAAAQ,QAAQ,CAAC,oDAAoD,CAAC;;EAGzE,IAAIC,IAAY;EAEhB,IAAIH,YAAY,KAAK,OAAOA,YAAY,KAAK,UAAU,IAAI,OAAOA,YAAY,KAAK,QAAQ,CAAC,EAAE;IAC7FG,IAAI,GAAG,IAAAN,UAAA,CAAAO,2BAA2B,EAACJ,YAAY,CAAC;GAChD,MAAM;IACNG,IAAI,GAAGH,YAAY;;EAGpB,OAAO,IAAAJ,YAAA,CAAAS,OAAO,EAACF,IAAI,CAAC,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAClC,CAAC;AAdYC,OAAA,CAAAR,uBAAuB,GAAAA,uBAAA;AAgBpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDO,MAAMS,kBAAkB,GAAGA,CACjCC,aAAkC,EAClCC,MAAiB,KACN;;EACX,IAAI,CAAC,IAAAb,UAAA,CAAAI,qBAAqB,EAACQ,aAAa,CAAC,EAAE;IAC1C,MAAM,IAAIf,aAAA,CAAAQ,QAAQ,CAAC,+CAA+C,CAAC;;EAGpE,UAAAS,MAAA,CAAU,IAAAJ,OAAA,CAAAR,uBAAuB,EAACU,aAAa,CAAC,EAAAE,MAAA,CAAG,IAAAb,mBAAA,CAAAc,gBAAgB,EAClE,CAAAC,EAAA,GAAAJ,aAAa,CAACK,MAAM,cAAAD,EAAA,cAAAA,EAAA,GAAI,EAAE,EAC1BH,MAAM,aAANA,MAAM,cAANA,MAAM,GAAI,EAAE,CACZ,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;AACpB,CAAC;AAZYR,OAAA,CAAAC,kBAAkB,GAAAA,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}