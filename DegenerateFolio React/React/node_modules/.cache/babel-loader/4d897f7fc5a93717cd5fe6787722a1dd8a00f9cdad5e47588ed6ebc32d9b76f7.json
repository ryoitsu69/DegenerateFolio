{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.watchTransactionBySubscription = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst schemas_js_1 = require(\"../schemas.js\");\nconst watch_transaction_by_polling_js_1 = require(\"./watch_transaction_by_polling.js\");\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\n */\nconst watchTransactionBySubscription = ({\n  web3Context,\n  transactionReceipt,\n  transactionPromiEvent,\n  returnFormat\n}) => {\n  // The following variable will stay true except if the data arrived,\n  //\tor if watching started after an error had occurred.\n  let needToWatchLater = true;\n  let lastCaughtBlockHash;\n  setImmediate(() => {\n    var _a;\n    (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.subscribe('newHeads').then(subscription => {\n      subscription.on('data', newBlockHeader => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        needToWatchLater = false;\n        if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) ||\n        // For some cases, the on-data event is fired couple times for the same block!\n        // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n        lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {\n          return;\n        }\n        lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;\n        const confirmations = BigInt(newBlockHeader.number) - BigInt(transactionReceipt.blockNumber) + BigInt(1);\n        transactionPromiEvent.emit('confirmation', {\n          confirmations: (0, web3_utils_1.format)({\n            format: 'uint'\n          }, confirmations, returnFormat),\n          receipt: (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),\n          latestBlockHash: (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, newBlockHeader.parentHash, returnFormat)\n        });\n        if (confirmations >= web3Context.transactionConfirmationBlocks) {\n          yield (_a = web3Context.subscriptionManager) === null || _a === void 0 ? void 0 : _a.removeSubscription(subscription);\n        }\n      }));\n      subscription.on('error', () => __awaiter(void 0, void 0, void 0, function* () {\n        var _b;\n        yield (_b = web3Context.subscriptionManager) === null || _b === void 0 ? void 0 : _b.removeSubscription(subscription);\n        needToWatchLater = false;\n        (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n          web3Context,\n          transactionReceipt,\n          transactionPromiEvent,\n          returnFormat\n        });\n      }));\n    }).catch(() => {\n      needToWatchLater = false;\n      (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n        web3Context,\n        transactionReceipt,\n        transactionPromiEvent,\n        returnFormat\n      });\n    });\n  });\n  // Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n  setTimeout(() => {\n    if (needToWatchLater) {\n      (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({\n        web3Context,\n        transactionReceipt,\n        transactionPromiEvent,\n        returnFormat\n      });\n    }\n  }, web3Context.blockHeaderTimeout * 1000);\n};\nexports.watchTransactionBySubscription = watchTransactionBySubscription;","map":{"version":3,"names":["web3_utils_1","require","schemas_js_1","watch_transaction_by_polling_js_1","watchTransactionBySubscription","web3Context","transactionReceipt","transactionPromiEvent","returnFormat","needToWatchLater","lastCaughtBlockHash","setImmediate","_a","subscriptionManager","subscribe","then","subscription","on","newBlockHeader","__awaiter","number","parentHash","confirmations","BigInt","blockNumber","emit","format","receipt","transactionReceiptSchema","latestBlockHash","transactionConfirmationBlocks","removeSubscription","_b","watchTransactionByPolling","catch","setTimeout","blockHeaderTimeout","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth/src/utils/watch_transaction_by_subscription.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, Numbers, BlockHeaderOutput, TransactionReceipt } from 'web3-types';\nimport { format } from 'web3-utils';\n\nimport { DataFormat } from 'web3-types';\nimport { NewHeadsSubscription } from '../web3_subscriptions.js';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { WaitProps, watchTransactionByPolling } from './watch_transaction_by_polling.js';\n\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\n */\nexport const watchTransactionBySubscription = <\n\tReturnFormat extends DataFormat,\n\tResolveType = TransactionReceipt,\n>({\n\tweb3Context,\n\ttransactionReceipt,\n\ttransactionPromiEvent,\n\treturnFormat,\n}: WaitProps<ReturnFormat, ResolveType>) => {\n\t// The following variable will stay true except if the data arrived,\n\t//\tor if watching started after an error had occurred.\n\tlet needToWatchLater = true;\n\tlet lastCaughtBlockHash: string;\n\tsetImmediate(() => {\n\t\tweb3Context.subscriptionManager\n\t\t\t?.subscribe('newHeads')\n\t\t\t.then((subscription: NewHeadsSubscription) => {\n\t\t\t\tsubscription.on('data', async (newBlockHeader: BlockHeaderOutput) => {\n\t\t\t\t\tneedToWatchLater = false;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!newBlockHeader?.number ||\n\t\t\t\t\t\t// For some cases, the on-data event is fired couple times for the same block!\n\t\t\t\t\t\t// This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n\t\t\t\t\t\tlastCaughtBlockHash === newBlockHeader?.parentHash\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlastCaughtBlockHash = newBlockHeader?.parentHash as string;\n\n\t\t\t\t\tconst confirmations =\n\t\t\t\t\t\tBigInt(newBlockHeader.number) -\n\t\t\t\t\t\tBigInt(transactionReceipt.blockNumber) +\n\t\t\t\t\t\tBigInt(1);\n\n\t\t\t\t\ttransactionPromiEvent.emit('confirmation', {\n\t\t\t\t\t\tconfirmations: format(\n\t\t\t\t\t\t\t{ format: 'uint' },\n\t\t\t\t\t\t\tconfirmations as Numbers,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t),\n\t\t\t\t\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\tlatestBlockHash: format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\tnewBlockHeader.parentHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks) {\n\t\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsubscription.on('error', async () => {\n\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\n\n\t\t\t\t\tneedToWatchLater = false;\n\t\t\t\t\twatchTransactionByPolling({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\ttransactionPromiEvent,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tneedToWatchLater = false;\n\t\t\t\twatchTransactionByPolling({\n\t\t\t\t\tweb3Context,\n\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\ttransactionPromiEvent,\n\t\t\t\t\treturnFormat,\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\t// Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n\tsetTimeout(() => {\n\t\tif (needToWatchLater) {\n\t\t\twatchTransactionByPolling({\n\t\t\t\tweb3Context,\n\t\t\t\ttransactionReceipt,\n\t\t\t\ttransactionPromiEvent,\n\t\t\t\treturnFormat,\n\t\t\t});\n\t\t}\n\t}, web3Context.blockHeaderTimeout * 1000);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}