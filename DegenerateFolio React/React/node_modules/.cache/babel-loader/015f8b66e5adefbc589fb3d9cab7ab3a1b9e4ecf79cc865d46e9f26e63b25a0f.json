{"ast":null,"code":"import { getLocalBounds } from '../../../scene/container/bounds/getLocalBounds.mjs';\nimport { boundsPool, matrixPool } from '../../../scene/container/bounds/utils/matrixAndBoundsPool.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\n\"use strict\";\nfunction addMaskLocalBounds(mask, bounds, localRoot) {\n  const boundsToMask = boundsPool.get();\n  mask.measurable = true;\n  const tempMatrix = matrixPool.get().identity();\n  const relativeMask = getMatrixRelativeToParent(mask, localRoot, tempMatrix);\n  getLocalBounds(mask, boundsToMask, relativeMask);\n  mask.measurable = false;\n  bounds.addBoundsMask(boundsToMask);\n  matrixPool.return(tempMatrix);\n  boundsPool.return(boundsToMask);\n}\nfunction getMatrixRelativeToParent(target, root, matrix) {\n  if (!target) {\n    warn(\"Mask bounds, renderable is not inside the root container\");\n    return matrix;\n  }\n  if (target !== root) {\n    getMatrixRelativeToParent(target.parent, root, matrix);\n    target.updateLocalTransform();\n    matrix.append(target.localTransform);\n  }\n  return matrix;\n}\nexport { addMaskLocalBounds, getMatrixRelativeToParent };","map":{"version":3,"names":["addMaskLocalBounds","mask","bounds","localRoot","boundsToMask","boundsPool","get","measurable","tempMatrix","matrixPool","identity","relativeMask","getMatrixRelativeToParent","getLocalBounds","addBoundsMask","return","target","root","matrix","warn","parent","updateLocalTransform","append","localTransform"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/mask/utils/addMaskLocalBounds.ts"],"sourcesContent":["import { getLocalBounds } from '../../../scene/container/bounds/getLocalBounds';\nimport { boundsPool, matrixPool } from '../../../scene/container/bounds/utils/matrixAndBoundsPool';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Bounds } from '../../../scene/container/bounds/Bounds';\nimport type { Container } from '../../../scene/container/Container';\n\nexport function addMaskLocalBounds(mask: Container, bounds: Bounds, localRoot: Container): void\n{\n    const boundsToMask = boundsPool.get();\n\n    mask.measurable = true;\n\n    const tempMatrix = matrixPool.get().identity();\n\n    const relativeMask = getMatrixRelativeToParent(mask, localRoot, tempMatrix);\n\n    getLocalBounds(mask, boundsToMask, relativeMask);\n\n    mask.measurable = false;\n\n    bounds.addBoundsMask(boundsToMask);\n\n    matrixPool.return(tempMatrix);\n    boundsPool.return(boundsToMask);\n}\n\nexport function getMatrixRelativeToParent(target: Container, root: Container, matrix: Matrix): Matrix\n{\n    if (!target)\n    {\n        // we have reach the top of the tree!\n        // #if _DEBUG\n        warn('Mask bounds, renderable is not inside the root container');\n        // #endif\n\n        return matrix;\n    }\n\n    if (target !== root)\n    {\n        getMatrixRelativeToParent(target.parent, root, matrix);\n\n        target.updateLocalTransform();\n\n        matrix.append(target.localTransform);\n    }\n\n    return matrix;\n}\n"],"mappings":";;;;AAQgB,SAAAA,mBAAmBC,IAAiB,EAAAC,MAAA,EAAgBC,SACpE;EACU,MAAAC,YAAA,GAAeC,UAAA,CAAWC,GAAI;EAEpCL,IAAA,CAAKM,UAAa;EAElB,MAAMC,UAAa,GAAAC,UAAA,CAAWH,GAAI,GAAEI,QAAS;EAE7C,MAAMC,YAAe,GAAAC,yBAAA,CAA0BX,IAAM,EAAAE,SAAA,EAAWK,UAAU;EAE3DK,cAAA,CAAAZ,IAAA,EAAMG,YAAA,EAAcO,YAAY;EAE/CV,IAAA,CAAKM,UAAa;EAElBL,MAAA,CAAOY,aAAA,CAAcV,YAAY;EAEjCK,UAAA,CAAWM,MAAA,CAAOP,UAAU;EAC5BH,UAAA,CAAWU,MAAA,CAAOX,YAAY;AAClC;AAEgB,SAAAQ,0BAA0BI,MAAmB,EAAAC,IAAA,EAAiBC,MAC9E;EACI,IAAI,CAACF,MACL;IAGIG,IAAA,CAAK,0DAA0D;IAGxD,OAAAD,MAAA;EAAA;EAGX,IAAIF,MAAA,KAAWC,IACf;IAC8BL,yBAAA,CAAAI,MAAA,CAAOI,MAAQ,EAAAH,IAAA,EAAMC,MAAM;IAErDF,MAAA,CAAOK,oBAAqB;IAErBH,MAAA,CAAAI,MAAA,CAAON,MAAA,CAAOO,cAAc;EAAA;EAGhC,OAAAL,MAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}