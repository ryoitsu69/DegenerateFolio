{"ast":null,"code":"function processX(base, ids, depth, result, tags) {\n  const id = ids[depth];\n  for (let i = 0; i < id.length; i++) {\n    const value = id[i];\n    depth < ids.length - 1 ? processX(base.replace(result[depth], value), ids, depth + 1, result, tags) : tags.push(base.replace(result[depth], value));\n  }\n}\nfunction createStringVariations(string) {\n  const regex = /\\{(.*?)\\}/g,\n    result = string.match(regex),\n    tags = [];\n  if (result) {\n    const ids = [];\n    result.forEach(vars => {\n      const split = vars.substring(1, vars.length - 1).split(\",\");\n      ids.push(split);\n    }), processX(string, ids, 0, result, tags);\n  } else tags.push(string);\n  return tags;\n}\nexport { createStringVariations };","map":{"version":3,"names":["processX","base","ids","depth","result","tags","id","i","length","value","replace","push","createStringVariations","string","regex","match","forEach","vars","split","substring"],"sources":["/home/ryoitsu/node_modules/@pixi/assets/src/utils/createStringVariations.ts"],"sourcesContent":["function processX(base: string, ids: string[][], depth: number, result: string[], tags: string[])\n{\n    const id = ids[depth];\n\n    for (let i = 0; i < id.length; i++)\n    {\n        const value = id[i];\n\n        if (depth < ids.length - 1)\n        {\n            processX(base.replace(result[depth], value), ids, depth + 1, result, tags);\n        }\n        else\n        {\n            tags.push(base.replace(result[depth], value));\n        }\n    }\n}\n\n/**\n * Creates a list of all possible combinations of the given strings.\n * @example\n * const out2 = createStringVariations('name is {chicken,wolf,sheep}');\n * console.log(out2); // [ 'name is chicken', 'name is wolf', 'name is sheep' ]\n * @param string - The string to process\n */\nexport function createStringVariations(string: string): string[]\n{\n    const regex = /\\{(.*?)\\}/g;\n\n    const result = string.match(regex);\n\n    const tags: string[] = [];\n\n    if (result)\n    {\n        const ids: string[][] = [];\n\n        result.forEach((vars) =>\n        {\n            // first remove the brackets...\n            const split = vars.substring(1, vars.length - 1).split(',');\n\n            ids.push(split);\n        });\n\n        processX(string, ids, 0, result, tags);\n    }\n    else\n    {\n        tags.push(string);\n    }\n\n    return tags;\n}\n"],"mappings":"AAAA,SAASA,SAASC,IAAA,EAAcC,GAAA,EAAiBC,KAAA,EAAeC,MAAA,EAAkBC,IAAA,EAClF;EACU,MAAAC,EAAA,GAAKJ,GAAA,CAAIC,KAAK;EAEpB,SAASI,CAAA,GAAI,GAAGA,CAAA,GAAID,EAAA,CAAGE,MAAA,EAAQD,CAAA,IAC/B;IACU,MAAAE,KAAA,GAAQH,EAAA,CAAGC,CAAC;IAEdJ,KAAA,GAAQD,GAAA,CAAIM,MAAA,GAAS,IAErBR,QAAA,CAASC,IAAA,CAAKS,OAAA,CAAQN,MAAA,CAAOD,KAAK,GAAGM,KAAK,GAAGP,GAAA,EAAKC,KAAA,GAAQ,GAAGC,MAAA,EAAQC,IAAI,IAIzEA,IAAA,CAAKM,IAAA,CAAKV,IAAA,CAAKS,OAAA,CAAQN,MAAA,CAAOD,KAAK,GAAGM,KAAK,CAAC;EAEpD;AACJ;AASO,SAASG,uBAAuBC,MAAA,EACvC;EACU,MAAAC,KAAA,GAAQ;IAERV,MAAA,GAASS,MAAA,CAAOE,KAAA,CAAMD,KAAK;IAE3BT,IAAA,GAAiB;EAEvB,IAAID,MAAA,EACJ;IACI,MAAMF,GAAA,GAAkB;IAEjBE,MAAA,CAAAY,OAAA,CAASC,IAAA,IAChB;MAEU,MAAAC,KAAA,GAAQD,IAAA,CAAKE,SAAA,CAAU,GAAGF,IAAA,CAAKT,MAAA,GAAS,CAAC,EAAEU,KAAA,CAAM,GAAG;MAE1DhB,GAAA,CAAIS,IAAA,CAAKO,KAAK;IAAA,CACjB,GAEDlB,QAAA,CAASa,MAAA,EAAQX,GAAA,EAAK,GAAGE,MAAA,EAAQC,IAAI;EACzC,OAGIA,IAAA,CAAKM,IAAA,CAAKE,MAAM;EAGb,OAAAR,IAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}