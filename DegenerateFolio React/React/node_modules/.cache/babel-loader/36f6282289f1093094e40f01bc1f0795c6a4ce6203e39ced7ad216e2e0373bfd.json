{"ast":null,"code":"import { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\"use strict\";\nconst _RopeGeometry = class _RopeGeometry extends MeshGeometry {\n  /**\n   * @param options - Options to be applied to rope geometry\n   */\n  constructor(options) {\n    const {\n      width,\n      points,\n      textureScale\n    } = {\n      ..._RopeGeometry.defaultOptions,\n      ...options\n    };\n    super({\n      positions: new Float32Array(points.length * 4),\n      uvs: new Float32Array(points.length * 4),\n      indices: new Uint32Array((points.length - 1) * 6)\n    });\n    this.points = points;\n    this._width = width;\n    this.textureScale = textureScale;\n    this._build();\n  }\n  /**\n   * The width (i.e., thickness) of the rope.\n   * @readonly\n   */\n  get width() {\n    return this._width;\n  }\n  /** Refreshes Rope indices and uvs */\n  _build() {\n    const points = this.points;\n    if (!points) return;\n    const vertexBuffer = this.getBuffer(\"aPosition\");\n    const uvBuffer = this.getBuffer(\"aUV\");\n    const indexBuffer = this.getIndex();\n    if (points.length < 1) {\n      return;\n    }\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n    const uvs = uvBuffer.data;\n    const indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    let amount = 0;\n    let prev = points[0];\n    const textureWidth = this._width * this.textureScale;\n    const total = points.length;\n    for (let i = 0; i < total; i++) {\n      const index = i * 4;\n      if (this.textureScale > 0) {\n        const dx = prev.x - points[i].x;\n        const dy = prev.y - points[i].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        amount = i / (total - 1);\n      }\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n    let indexCount = 0;\n    for (let i = 0; i < total - 1; i++) {\n      const index = i * 2;\n      indices[indexCount++] = index;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 3;\n    }\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  }\n  /** refreshes vertices of Rope mesh */\n  updateVertices() {\n    const points = this.points;\n    if (points.length < 1) {\n      return;\n    }\n    let lastPoint = points[0];\n    let nextPoint;\n    let perpX = 0;\n    let perpY = 0;\n    const vertices = this.buffers[0].data;\n    const total = points.length;\n    const halfWidth = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n    for (let i = 0; i < total; i++) {\n      const point = points[i];\n      const index = i * 4;\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      let ratio = (1 - i / (total - 1)) * 10;\n      if (ratio > 1) {\n        ratio = 1;\n      }\n      const perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      if (perpLength < 1e-6) {\n        perpX = 0;\n        perpY = 0;\n      } else {\n        perpX /= perpLength;\n        perpY /= perpLength;\n        perpX *= halfWidth;\n        perpY *= halfWidth;\n      }\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n    this.buffers[0].update();\n  }\n  /** Refreshes Rope indices and uvs */\n  update() {\n    if (this.textureScale > 0) {\n      this._build();\n    } else {\n      this.updateVertices();\n    }\n  }\n};\n/** Default options for RopeGeometry constructor. */\n_RopeGeometry.defaultOptions = {\n  /** The width (i.e., thickness) of the rope. */\n  width: 200,\n  /** An array of points that determine the rope. */\n  points: [],\n  /** Rope texture scale, if zero then the rope texture is stretched. */\n  textureScale: 0\n};\nlet RopeGeometry = _RopeGeometry;\nexport { RopeGeometry };","map":{"version":3,"names":["_RopeGeometry","MeshGeometry","constructor","options","width","points","textureScale","defaultOptions","positions","Float32Array","length","uvs","indices","Uint32Array","_width","_build","vertexBuffer","getBuffer","uvBuffer","indexBuffer","getIndex","data","Uint16Array","amount","prev","textureWidth","total","i","index","dx","x","dy","y","distance","Math","sqrt","indexCount","update","updateVertices","lastPoint","nextPoint","perpX","perpY","vertices","buffers","halfWidth","point","ratio","perpLength","RopeGeometry"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/mesh-simple/RopeGeometry.ts"],"sourcesContent":["import { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { PointData } from '../../maths/point/PointData';\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `RopeGeometry` instances.\n * ```js\n * const ropeGeometry = new RopeGeometry({\n *    points: [new Point(0, 0), new Point(100, 0)],\n *    width: 10,\n *    textureScale: 0,\n * });\n * ```\n * @see {@link scene.RopeGeometry}\n * @memberof scene\n */\nexport interface RopeGeometryOptions\n{\n    /** The width (i.e., thickness) of the rope. */\n    width?: number;\n    /** An array of points that determine the rope. */\n    points?: PointData[];\n    /**\n     * Rope texture scale, if zero then the rope texture is stretched.\n     * By default the rope texture will be stretched to match\n     * rope length. If textureScale is positive this value will be treated as a scaling\n     * factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     * set baseTexture.wrapMode to 'repeat' and use a power of two texture,\n     * then set textureScale=1 to keep the original texture pixel size.\n     * In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     * i.e. set textureScale=0.5 to scale it down twice.\n     */\n    textureScale?: number;\n}\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n * @example\n * import { Point, RopeGeometry } from 'pixi.js';\n *\n * for (let i = 0; i < 20; i++) {\n *     points.push(new Point(i * 50, 0));\n * };\n * const rope = new RopeGeometry(100, points);\n * @memberof scene\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    /** Default options for RopeGeometry constructor. */\n    public static defaultOptions: RopeGeometryOptions & MeshGeometryOptions = {\n        /** The width (i.e., thickness) of the rope. */\n        width: 200,\n        /** An array of points that determine the rope. */\n        points: [],\n        /** Rope texture scale, if zero then the rope texture is stretched. */\n        textureScale: 0,\n    };\n\n    /** An array of points that determine the rope. */\n    public points: PointData[];\n\n    /** Rope texture scale, if zero then the rope texture is stretched. */\n    public readonly textureScale: number;\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    public _width: number;\n\n    /**\n     * @param options - Options to be applied to rope geometry\n     */\n    constructor(options: RopeGeometryOptions)\n    {\n        const { width, points, textureScale } = { ...RopeGeometry.defaultOptions, ...options };\n\n        super({\n            positions: new Float32Array(points.length * 4),\n            uvs: new Float32Array(points.length * 4),\n            indices: new Uint32Array((points.length - 1) * 6),\n        });\n\n        this.points = points;\n        this._width = width;\n        this.textureScale = textureScale;\n\n        this._build();\n    }\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /** Refreshes Rope indices and uvs */\n    private _build(): void\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aPosition');\n        const uvBuffer = this.getBuffer('aUV');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this._width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /** refreshes vertices of Rope mesh */\n    public updateVertices(): void\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n        const halfWidth = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n\n            if (perpLength < 1e-6)\n            {\n                perpX = 0;\n                perpY = 0;\n            }\n            else\n            {\n                perpX /= perpLength;\n                perpY /= perpLength;\n\n                perpX *= halfWidth;\n                perpY *= halfWidth;\n            }\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    /** Refreshes Rope indices and uvs */\n    public update(): void\n    {\n        if (this.textureScale > 0)\n        {\n            this._build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}