{"ast":null,"code":"import { Resolver } from '../../assets/resolver/Resolver.mjs';\nimport { checkExtension } from '../../assets/utils/checkExtension.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\n\"use strict\";\nconst validFormats = [\"basis\", \"bc7\", \"bc6h\", \"astc\", \"etc2\", \"bc5\", \"bc4\", \"bc3\", \"bc2\", \"bc1\", \"eac\"];\nconst resolveCompressedTextureUrl = {\n  extension: ExtensionType.ResolveParser,\n  test: value => checkExtension(value, [\".ktx\", \".ktx2\", \".dds\"]),\n  parse: value => {\n    let format;\n    const splitValue = value.split(\".\");\n    if (splitValue.length > 2) {\n      const newFormat = splitValue[splitValue.length - 2];\n      if (validFormats.includes(newFormat)) {\n        format = newFormat;\n      }\n    } else {\n      format = splitValue[splitValue.length - 1];\n    }\n    return {\n      resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n      format,\n      src: value\n    };\n  }\n};\nexport { resolveCompressedTextureUrl, validFormats };","map":{"version":3,"names":["validFormats","resolveCompressedTextureUrl","extension","ExtensionType","ResolveParser","test","value","checkExtension","parse","format","splitValue","split","length","newFormat","includes","resolution","parseFloat","Resolver","RETINA_PREFIX","exec","src"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/compressed-textures/shared/resolveCompressedTextureUrl.ts"],"sourcesContent":["import { Resolver } from '../../assets/resolver/Resolver';\nimport { checkExtension } from '../../assets/utils/checkExtension';\nimport { ExtensionType } from '../../extensions/Extensions';\n\nimport type { ResolveURLParser } from '../../assets/resolver/types';\nimport type { UnresolvedAsset } from '../../assets/types';\n\nexport const validFormats = ['basis', 'bc7', 'bc6h', 'astc', 'etc2', 'bc5', 'bc4', 'bc3', 'bc2', 'bc1', 'eac'];\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n        checkExtension(value, ['.ktx', '.ktx2', '.dds']),\n    parse: (value: string): UnresolvedAsset =>\n    {\n        let format;\n\n        const splitValue = value.split('.');\n\n        if (splitValue.length > 2)\n        {\n            const newFormat = splitValue[splitValue.length - 2];\n\n            if (validFormats.includes(newFormat))\n            {\n                format = newFormat;\n            }\n        }\n        else\n        {\n            format = splitValue[splitValue.length - 1];\n        }\n\n        return {\n            resolution: parseFloat(Resolver.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format,\n            src: value,\n        };\n    }\n} as ResolveURLParser;\n"],"mappings":";;;;AAOO,MAAMA,YAAe,IAAC,OAAS,SAAO,MAAQ,UAAQ,MAAQ,SAAO,KAAO,SAAO,KAAO,SAAO,KAAK;AAEtG,MAAMC,2BAA8B;EACvCC,SAAA,EAAWC,aAAc,CAAAC,aAAA;EACzBC,IAAA,EAAOC,KACH,IAAAC,cAAA,CAAeD,KAAA,EAAO,CAAC,QAAQ,OAAS,QAAM,CAAC;EACnDE,KAAA,EAAQF,KACR;IACQ,IAAAG,MAAA;IAEE,MAAAC,UAAA,GAAaJ,KAAM,CAAAK,KAAA,CAAM,GAAG;IAE9B,IAAAD,UAAA,CAAWE,MAAA,GAAS,CACxB;MACI,MAAMC,SAAY,GAAAH,UAAA,CAAWA,UAAW,CAAAE,MAAA,GAAS,CAAC;MAE9C,IAAAZ,YAAA,CAAac,QAAS,CAAAD,SAAS,CACnC;QACaJ,MAAA,GAAAI,SAAA;MAAA;IACb,CAGJ;MACaJ,MAAA,GAAAC,UAAA,CAAWA,UAAW,CAAAE,MAAA,GAAS,CAAC;IAAA;IAGtC;MACHG,UAAA,EAAYC,UAAA,CAAWC,QAAS,CAAAC,aAAA,CAAcC,IAAA,CAAKb,KAAK,IAAI,CAAC,KAAK,GAAG;MACrEG,MAAA;MACAW,GAAK,EAAAd;IAAA,CACT;EAAA;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}