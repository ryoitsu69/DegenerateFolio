{"ast":null,"code":"\"use strict\";\n\nclass Point {\n  /**\n   * Creates a new `Point`\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  constructor(x = 0, y = 0) {\n    /** Position of the point on the x axis */\n    this.x = 0;\n    /** Position of the point on the y axis */\n    this.y = 0;\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Creates a clone of this point\n   * @returns A clone of this point\n   */\n  clone() {\n    return new Point(this.x, this.y);\n  }\n  /**\n   * Copies `x` and `y` from the given point into this point\n   * @param p - The point to copy from\n   * @returns The point instance itself\n   */\n  copyFrom(p) {\n    this.set(p.x, p.y);\n    return this;\n  }\n  /**\n   * Copies this point's x and y into the given point (`p`).\n   * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n   * @returns The point (`p`) with values updated\n   */\n  copyTo(p) {\n    p.set(this.x, this.y);\n    return p;\n  }\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  equals(p) {\n    return p.x === this.x && p.y === this.y;\n  }\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the `x` axis\n   * @param {number} [y=x] - position of the point on the `y` axis\n   * @returns The point instance itself\n   */\n  set(x = 0, y = x) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  toString() {\n    return `[pixi.js/math:Point x=${this.x} y=${this.y}]`;\n  }\n  /**\n   * A static Point object with `x` and `y` values of `0`. Can be used to avoid creating new objects multiple times.\n   * @readonly\n   */\n  static get shared() {\n    tempPoint.x = 0;\n    tempPoint.y = 0;\n    return tempPoint;\n  }\n}\nconst tempPoint = new Point();\nexport { Point };","map":{"version":3,"names":["Point","constructor","x","y","clone","copyFrom","p","set","copyTo","equals","toString","shared","tempPoint"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/point/Point.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport type { PointData } from './PointData';\nimport type { PointLike } from './PointLike';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Point extends PixiMixins.Point { }\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n * <br/>\n * Many Pixi functions accept the `PointData` type as an alternative to `Point`,\n * which only requires `x` and `y` properties.\n * @class\n * @implements {PointLike}\n * @memberof maths\n */\nexport class Point implements PointLike\n{\n    /** Position of the point on the x axis */\n    public x = 0;\n    /** Position of the point on the y axis */\n    public y = 0;\n\n    /**\n     * Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     * @returns A clone of this point\n     */\n    public clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies `x` and `y` from the given point into this point\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    public copyFrom(p: PointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n     * @returns The point (`p`) with values updated\n     */\n    public copyTo<T extends PointLike>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    public equals(p: PointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    public set(x = 0, y: number = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Point x=${this.x} y=${this.y}]`;\n    }\n    // #endif\n\n    /**\n     * A static Point object with `x` and `y` values of `0`. Can be used to avoid creating new objects multiple times.\n     * @readonly\n     */\n    static get shared(): Point\n    {\n        tempPoint.x = 0;\n        tempPoint.y = 0;\n\n        return tempPoint;\n    }\n}\n\nconst tempPoint = new Point();\n"],"mappings":";;AAiBO,MAAMA,KACb;EAAA;AAAA;AAAA;AAAA;AAAA;EAWIC,WAAYA,CAAAC,CAAA,GAAI,CAAG,EAAAC,CAAA,GAAI,CACvB;IAVA;IAAA,KAAOD,CAAI;IAEX;IAAA,KAAOC,CAAI;IASP,KAAKD,CAAI,GAAAA,CAAA;IACT,KAAKC,CAAI,GAAAA,CAAA;EAAA;EACb;AAAA;AAAA;AAAA;EAMOC,KACPA,CAAA;IACI,OAAO,IAAIJ,KAAA,CAAM,IAAK,CAAAE,CAAA,EAAG,KAAKC,CAAC;EAAA;EACnC;AAAA;AAAA;AAAA;AAAA;EAOOE,SAASC,CAChB;IACI,KAAKC,GAAI,CAAAD,CAAA,CAAEJ,CAAG,EAAAI,CAAA,CAAEH,CAAC;IAEV;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;EAOOK,OAA4BF,CACnC;IACIA,CAAA,CAAEC,GAAI,MAAKL,CAAG,OAAKC,CAAC;IAEb,OAAAG,CAAA;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;EAOOG,OAAOH,CACd;IACI,OAAQA,CAAA,CAAEJ,CAAM,UAAKA,CAAO,IAAAI,CAAA,CAAEH,CAAA,KAAM,IAAK,CAAAA,CAAA;EAAA;EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOI,GAAIA,CAAAL,CAAA,GAAI,CAAG,EAAAC,CAAA,GAAYD,CAC9B;IACI,KAAKA,CAAI,GAAAA,CAAA;IACT,KAAKC,CAAI,GAAAA,CAAA;IAEF;EAAA;EAIJO,QACPA,CAAA;IACI,OAAgC,8BAAKR,CAAC,MAAM,KAAKC,CAAC;EAAA;EACtD;AAAA;AAAA;AAAA;EAOA,WAAWQ,MACXA,CAAA;IACIC,SAAA,CAAUV,CAAI;IACdU,SAAA,CAAUT,CAAI;IAEP,OAAAS,SAAA;EAAA;AAEf;AAEA,MAAMA,SAAA,GAAY,IAAIZ,KAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}