{"ast":null,"code":"import { Result } from \"../../helpers/result.js\";\nimport { hexstr } from \"../../helpers/hex-string.js\";\nimport { APTOS_TOKEN } from \"../../helpers/const.js\";\nexport const AccountApi = {\n  /**\n   * Get address info: {sequence_number, authentication_key}\n   * @param {String} address\n   * @returns {Promise<Result>}\n   */\n  async getAccount(address) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      ledger_version: null\n    };\n    return await this._exec(\"/accounts/\".concat(this._0x(address)), query);\n  },\n  /**\n   * Get resources for specified address\n   * @param {String} address\n   * @returns {Promise<Result>}\n   */\n  async getAccountResources(address) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      ledger_version: null\n    };\n    return await this._exec(\"/accounts/\".concat(this._0x(address), \"/resources\"), query);\n  },\n  /**\n   * Get named resource for specified address\n   * @param {String} address\n   * @param {String} resource\n   * @returns {Promise<Result>}\n   */\n  async getAccountResource(address, resource) {\n    let query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      ledger_version: null\n    };\n    return await this._exec(\"/accounts/\".concat(this._0x(address), \"/resource/\").concat(resource), query);\n  },\n  /**\n   * Get modules for specified address\n   * @param {String} address\n   * @returns {Promise<Result>}\n   */\n  async getAccountModules(address) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      ledger_version: null\n    };\n    return await this._exec(\"/accounts/\".concat(this._0x(address), \"/modules\"), query);\n  },\n  /**\n   * Get module for specified address\n   * @param {String} address\n   * @param {String} module\n   * @returns {Promise<Result>}\n   */\n  async getAccountModule(address, module) {\n    let query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      ledger_version: null\n    };\n    return await this._exec(\"/accounts/\".concat(this._0x(address), \"/module/\").concat(module), query);\n  },\n  /**\n   * Get account transactions\n   * @param {String} address\n   * @param {Object} query, default {start: 1, limit: 24}\n   * @returns {Promise<*>}\n   */\n  async getAccountTransactions(address) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      start: 1,\n      limit: 25\n    };\n    return await this.getTransactions(address, query);\n  },\n  /**\n   * Get last transactions for specified address\n   * @param address\n   * @param limit, count transactions in response\n   * @returns {Promise<Result|*>}\n   */\n  async getAccountTransactionsLast(address) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const account = await this.getAccount(address);\n    if (!account.ok) {\n      return new Result(false, \"Can't retrieve account information from the blockchain!\", account.error);\n    }\n    const sn = account.payload.sequence_number;\n    return await this.getAccountTransactions(address, {\n      limit,\n      start: sn - limit\n    });\n  },\n  /**\n   * Get account balance\n   * @param {String} address\n   * @param {String} coinStruct \"0xCoinHolderAddress::CoinPrefix::CoinSuffix\"\n   * @returns {Promise<Result>}\n   */\n  async getAccountBalance(address) {\n    let coinStruct = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APTOS_TOKEN;\n    let query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      ledger_version: null\n    };\n    const resource = await this.getAccountResource(address, \"0x1::coin::CoinStore<\".concat(coinStruct, \">\"), query);\n    if (!resource.ok) {\n      return new Result(false, \"Error getting address balance\", resource.error);\n    }\n    return new Result(true, \"ok\", {\n      coin: coinStruct,\n      balance: +resource.payload.data.coin.value\n    });\n  },\n  /**\n   * Create account\n   * @param signer\n   * @param newAccount\n   * @returns {Promise<Result|undefined>}\n   */\n  async createAccount(signer, newAccount) {\n    const payload = {\n      \"type\": \"script_function_payload\",\n      \"function\": \"0x1::AptosAccount::create_account\",\n      \"type_arguments\": [],\n      \"arguments\": [newAccount.address(), this._0x(newAccount.pubKey()) // ???\n      ]\n    };\n    return await this.submitTransaction(signer, payload);\n  },\n  /**\n   * Rotate authentication key for specified account\n   * @param {Account} account\n   * @param {String} newAuthKey\n   * @returns {Promise<Result|undefined>}\n   */\n  async rotateAccountAuthKey(account, newAuthKey) {\n    const payload = {\n      type: \"script_function_payload\",\n      function: \"0x1::Account::rotate_authentication_key\",\n      type_arguments: [],\n      arguments: [hexstr(newAuthKey).noPrefix()]\n    };\n    return await this.submitTransaction(account, payload);\n  }\n};","map":{"version":3,"names":["Result","hexstr","APTOS_TOKEN","AccountApi","getAccount","address","query","arguments","length","undefined","ledger_version","_exec","concat","_0x","getAccountResources","getAccountResource","resource","getAccountModules","getAccountModule","module","getAccountTransactions","start","limit","getTransactions","getAccountTransactionsLast","account","ok","error","sn","payload","sequence_number","getAccountBalance","coinStruct","coin","balance","data","value","createAccount","signer","newAccount","pubKey","submitTransaction","rotateAccountAuthKey","newAuthKey","type","function","type_arguments","noPrefix"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/aptos-api-master/src/api/ext/account.js"],"sourcesContent":["import {Result} from \"../../helpers/result.js\";\nimport {hexstr} from \"../../helpers/hex-string.js\";\nimport {APTOS_TOKEN} from \"../../helpers/const.js\";\n\nexport const AccountApi = {\n    /**\n     * Get address info: {sequence_number, authentication_key}\n     * @param {String} address\n     * @returns {Promise<Result>}\n     */\n    async getAccount(address, query = {ledger_version: null}){\n        return await this._exec(`/accounts/${this._0x(address)}`, query)\n    },\n\n    /**\n     * Get resources for specified address\n     * @param {String} address\n     * @returns {Promise<Result>}\n     */\n    async getAccountResources(address, query = {ledger_version: null}){\n        return await this._exec(`/accounts/${this._0x(address)}/resources`, query)\n    },\n\n    /**\n     * Get named resource for specified address\n     * @param {String} address\n     * @param {String} resource\n     * @returns {Promise<Result>}\n     */\n    async getAccountResource(address, resource, query = {ledger_version: null}){\n        return await this._exec(`/accounts/${this._0x(address)}/resource/${resource}`, query)\n    },\n\n    /**\n     * Get modules for specified address\n     * @param {String} address\n     * @returns {Promise<Result>}\n     */\n    async getAccountModules(address, query = {ledger_version: null}){\n        return await this._exec(`/accounts/${this._0x(address)}/modules`, query)\n    },\n\n    /**\n     * Get module for specified address\n     * @param {String} address\n     * @param {String} module\n     * @returns {Promise<Result>}\n     */\n    async getAccountModule(address, module, query = {ledger_version: null}){\n        return await this._exec(`/accounts/${this._0x(address)}/module/${module}`, query)\n    },\n\n    /**\n     * Get account transactions\n     * @param {String} address\n     * @param {Object} query, default {start: 1, limit: 24}\n     * @returns {Promise<*>}\n     */\n    async getAccountTransactions(address, query = {start: 1, limit: 25}){\n        return await this.getTransactions(address, query)\n    },\n\n    /**\n     * Get last transactions for specified address\n     * @param address\n     * @param limit, count transactions in response\n     * @returns {Promise<Result|*>}\n     */\n    async getAccountTransactionsLast(address, limit = 1){\n        const account = await this.getAccount(address)\n\n        if (!account.ok) {\n            return new Result(false, \"Can't retrieve account information from the blockchain!\", account.error)\n        }\n\n        const sn = account.payload.sequence_number\n\n        return await this.getAccountTransactions(address, {limit, start: sn - limit})\n    },\n\n    /**\n     * Get account balance\n     * @param {String} address\n     * @param {String} coinStruct \"0xCoinHolderAddress::CoinPrefix::CoinSuffix\"\n     * @returns {Promise<Result>}\n     */\n    async getAccountBalance(address, coinStruct = APTOS_TOKEN, query = {ledger_version: null}){\n        const resource = await this.getAccountResource(address, `0x1::coin::CoinStore<${coinStruct}>`, query)\n        if (!resource.ok) {\n            return new Result(false, \"Error getting address balance\", resource.error)\n        }\n        return new Result(true, \"ok\", {\n            coin: coinStruct,\n            balance: +resource.payload.data.coin.value\n        })\n    },\n\n    /**\n     * Create account\n     * @param signer\n     * @param newAccount\n     * @returns {Promise<Result|undefined>}\n     */\n    async createAccount(signer, newAccount){\n        const payload = {\n            \"type\": \"script_function_payload\",\n            \"function\": \"0x1::AptosAccount::create_account\",\n            \"type_arguments\": [],\n            \"arguments\": [\n                newAccount.address(),\n                this._0x(newAccount.pubKey()), // ???\n            ]\n        }\n        return await this.submitTransaction(signer, payload)\n    },\n\n    /**\n     * Rotate authentication key for specified account\n     * @param {Account} account\n     * @param {String} newAuthKey\n     * @returns {Promise<Result|undefined>}\n     */\n    async rotateAccountAuthKey(account, newAuthKey){\n        const payload = {\n            type: \"script_function_payload\",\n            function: \"0x1::Account::rotate_authentication_key\",\n            type_arguments: [],\n            arguments: [\n                hexstr(newAuthKey).noPrefix(),\n            ]\n        }\n\n        return await this.submitTransaction(account, payload)\n    }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}