{"ast":null,"code":"import { Struct } from '@polkadot/types-codec';\nimport { getUniqTypes, toCallsOnly } from './util/index.js';\nimport { toV10 } from './v9/toV10.js';\nimport { toV11 } from './v10/toV11.js';\nimport { toV12 } from './v11/toV12.js';\nimport { toV13 } from './v12/toV13.js';\nimport { toV14 } from './v13/toV14.js';\nimport { toV15 } from './v14/toV15.js';\nimport { toLatest } from './v15/toLatest.js';\nimport { MagicNumber } from './MagicNumber.js';\nimport { LATEST_VERSION, TO_CALLS_VERSION } from './versions.js';\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\nexport class MetadataVersioned extends Struct {\n  __internal__converted = new Map();\n  constructor(registry, value) {\n    // const timeStart = performance.now()\n    super(registry, {\n      magicNumber: MagicNumber,\n      metadata: 'MetadataAll'\n    }, value);\n    // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)\n  }\n  __internal__assertVersion = version => {\n    if (this.version > version) {\n      throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);\n    }\n    return this.version === version;\n  };\n  __internal__getVersion = (version, fromPrev) => {\n    if (version !== 'latest' && this.__internal__assertVersion(version)) {\n      const asCurr = `asV${version}`;\n      return this.__internal__metadata()[asCurr];\n    }\n    if (!this.__internal__converted.has(version)) {\n      const asPrev = version === 'latest' ? `asV${LATEST_VERSION}` : `asV${version - 1}`;\n      this.__internal__converted.set(version, fromPrev(this.registry, this[asPrev], this.version));\n    }\n    return this.__internal__converted.get(version);\n  };\n  /**\n   * @description the metadata wrapped\n   */\n  __internal__metadata = () => {\n    return this.getT('metadata');\n  };\n  /**\n   * @description Returns the wrapped metadata as a limited calls-only (latest) version\n   */\n  get asCallsOnly() {\n    return new MetadataVersioned(this.registry, {\n      magicNumber: this.magicNumber,\n      metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])\n    });\n  }\n  /**\n   * @description Returns the wrapped metadata as a V9 object\n   */\n  get asV9() {\n    this.__internal__assertVersion(9);\n    return this.__internal__metadata().asV9;\n  }\n  /**\n   * @description Returns the wrapped values as a V10 object\n   */\n  get asV10() {\n    return this.__internal__getVersion(10, toV10);\n  }\n  /**\n   * @description Returns the wrapped values as a V11 object\n   */\n  get asV11() {\n    return this.__internal__getVersion(11, toV11);\n  }\n  /**\n   * @description Returns the wrapped values as a V12 object\n   */\n  get asV12() {\n    return this.__internal__getVersion(12, toV12);\n  }\n  /**\n   * @description Returns the wrapped values as a V13 object\n   */\n  get asV13() {\n    return this.__internal__getVersion(13, toV13);\n  }\n  /**\n   * @description Returns the wrapped values as a V14 object\n   */\n  get asV14() {\n    return this.__internal__getVersion(14, toV14);\n  }\n  /**\n   * @description Returns the wrapped values as a V14 object\n   */\n  get asV15() {\n    return this.__internal__getVersion(15, toV15);\n  }\n  /**\n   * @description Returns the wrapped values as a latest version object\n   */\n  get asLatest() {\n    return this.__internal__getVersion('latest', toLatest);\n  }\n  /**\n   * @description The magicNumber for the Metadata (known constant)\n   */\n  get magicNumber() {\n    return this.getT('magicNumber');\n  }\n  /**\n   * @description the metadata version this structure represents\n   */\n  get version() {\n    return this.__internal__metadata().index;\n  }\n  getUniqTypes(throwError) {\n    return getUniqTypes(this.registry, this.asLatest, throwError);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n  toJSON() {\n    // HACK(y): ensure that we apply the aliases if we have not done so already, this is\n    // needed to ensure we have the correct overrides (which is only applied in toLatest)\n    // eslint-disable-next-line no-unused-expressions\n    this.asLatest;\n    return super.toJSON();\n  }\n}","map":{"version":3,"names":["Struct","getUniqTypes","toCallsOnly","toV10","toV11","toV12","toV13","toV14","toV15","toLatest","MagicNumber","LATEST_VERSION","TO_CALLS_VERSION","MetadataVersioned","__internal__converted","Map","constructor","registry","value","magicNumber","metadata","__internal__assertVersion","version","Error","__internal__getVersion","fromPrev","asCurr","__internal__metadata","has","asPrev","set","get","getT","asCallsOnly","createTypeUnsafe","asLatest","asV9","asV10","asV11","asV12","asV13","asV14","asV15","index","throwError","toJSON"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/metadata/MetadataVersioned.js"],"sourcesContent":["import { Struct } from '@polkadot/types-codec';\nimport { getUniqTypes, toCallsOnly } from './util/index.js';\nimport { toV10 } from './v9/toV10.js';\nimport { toV11 } from './v10/toV11.js';\nimport { toV12 } from './v11/toV12.js';\nimport { toV13 } from './v12/toV13.js';\nimport { toV14 } from './v13/toV14.js';\nimport { toV15 } from './v14/toV15.js';\nimport { toLatest } from './v15/toLatest.js';\nimport { MagicNumber } from './MagicNumber.js';\nimport { LATEST_VERSION, TO_CALLS_VERSION } from './versions.js';\n/**\n * @name MetadataVersioned\n * @description\n * The versioned runtime metadata as a decoded structure\n */\nexport class MetadataVersioned extends Struct {\n    __internal__converted = new Map();\n    constructor(registry, value) {\n        // const timeStart = performance.now()\n        super(registry, {\n            magicNumber: MagicNumber,\n            metadata: 'MetadataAll'\n        }, value);\n        // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)\n    }\n    __internal__assertVersion = (version) => {\n        if (this.version > version) {\n            throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);\n        }\n        return this.version === version;\n    };\n    __internal__getVersion = (version, fromPrev) => {\n        if (version !== 'latest' && this.__internal__assertVersion(version)) {\n            const asCurr = `asV${version}`;\n            return this.__internal__metadata()[asCurr];\n        }\n        if (!this.__internal__converted.has(version)) {\n            const asPrev = version === 'latest'\n                ? `asV${LATEST_VERSION}`\n                : `asV${(version - 1)}`;\n            this.__internal__converted.set(version, fromPrev(this.registry, this[asPrev], this.version));\n        }\n        return this.__internal__converted.get(version);\n    };\n    /**\n     * @description the metadata wrapped\n     */\n    __internal__metadata = () => {\n        return this.getT('metadata');\n    };\n    /**\n     * @description Returns the wrapped metadata as a limited calls-only (latest) version\n     */\n    get asCallsOnly() {\n        return new MetadataVersioned(this.registry, {\n            magicNumber: this.magicNumber,\n            metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])\n        });\n    }\n    /**\n     * @description Returns the wrapped metadata as a V9 object\n     */\n    get asV9() {\n        this.__internal__assertVersion(9);\n        return this.__internal__metadata().asV9;\n    }\n    /**\n     * @description Returns the wrapped values as a V10 object\n     */\n    get asV10() {\n        return this.__internal__getVersion(10, toV10);\n    }\n    /**\n     * @description Returns the wrapped values as a V11 object\n     */\n    get asV11() {\n        return this.__internal__getVersion(11, toV11);\n    }\n    /**\n     * @description Returns the wrapped values as a V12 object\n     */\n    get asV12() {\n        return this.__internal__getVersion(12, toV12);\n    }\n    /**\n     * @description Returns the wrapped values as a V13 object\n     */\n    get asV13() {\n        return this.__internal__getVersion(13, toV13);\n    }\n    /**\n     * @description Returns the wrapped values as a V14 object\n     */\n    get asV14() {\n        return this.__internal__getVersion(14, toV14);\n    }\n    /**\n     * @description Returns the wrapped values as a V14 object\n     */\n    get asV15() {\n        return this.__internal__getVersion(15, toV15);\n    }\n    /**\n     * @description Returns the wrapped values as a latest version object\n     */\n    get asLatest() {\n        return this.__internal__getVersion('latest', toLatest);\n    }\n    /**\n     * @description The magicNumber for the Metadata (known constant)\n     */\n    get magicNumber() {\n        return this.getT('magicNumber');\n    }\n    /**\n     * @description the metadata version this structure represents\n     */\n    get version() {\n        return this.__internal__metadata().index;\n    }\n    getUniqTypes(throwError) {\n        return getUniqTypes(this.registry, this.asLatest, throwError);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n    toJSON() {\n        // HACK(y): ensure that we apply the aliases if we have not done so already, this is\n        // needed to ensure we have the correct overrides (which is only applied in toLatest)\n        // eslint-disable-next-line no-unused-expressions\n        this.asLatest;\n        return super.toJSON();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}