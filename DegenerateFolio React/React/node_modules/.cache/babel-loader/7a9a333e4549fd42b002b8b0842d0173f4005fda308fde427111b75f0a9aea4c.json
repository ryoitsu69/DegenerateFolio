{"ast":null,"code":"import { combineLatest, map, switchMap } from 'rxjs';\nimport { BN, BN_ZERO, objectSpread } from '@polkadot/util';\nimport { firstMemo, memo } from '../util/index.js';\nconst QUERY_OPTS = {\n  withDestination: true,\n  withLedger: true,\n  withNominations: true,\n  withPrefs: true\n};\nfunction groupByEra(list) {\n  return list.reduce((map, {\n    era,\n    value\n  }) => {\n    const key = era.toString();\n    map[key] = (map[key] || BN_ZERO).add(value.unwrap());\n    return map;\n  }, {});\n}\nfunction calculateUnlocking(api, stakingLedger, sessionInfo) {\n  const results = Object.entries(groupByEra((stakingLedger?.unlocking || []).filter(({\n    era\n  }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({\n    remainingEras: new BN(eraString).isub(sessionInfo.activeEra),\n    value: api.registry.createType('Balance', value)\n  }));\n  return results.length ? results : undefined;\n}\nfunction redeemableSum(api, stakingLedger, sessionInfo) {\n  return api.registry.createType('Balance', (stakingLedger?.unlocking || []).reduce((total, {\n    era,\n    value\n  }) => {\n    // aligns with https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/pallet/mod.rs#L973-L975\n    // (ensure currentEra >= era passed, as per https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/lib.rs#L477-L494)\n    // NOTE: Previously we used activeEra >= era, which is incorrect for the last session\n    return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value.unwrap());\n  }, new BN(0)));\n}\nfunction parseResult(api, sessionInfo, keys, query) {\n  return objectSpread({}, keys, query, {\n    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),\n    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)\n  });\n}\n/**\n * @description From a list of stashes, fill in all the relevant staking details\n */\nexport function accounts(instanceId, api) {\n  return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap(sessionInfo => combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, opts)]).pipe(map(([keys, queries]) => queries.map((q, index) => parseResult(api, sessionInfo, keys[index], q)))))));\n}\n/**\n * @description From a stash, retrieve the controllerId and fill in all the relevant staking details\n */\nexport const account = /*#__PURE__*/firstMemo((api, accountId, opts) => api.derive.staking.accounts([accountId], opts));","map":{"version":3,"names":["combineLatest","map","switchMap","BN","BN_ZERO","objectSpread","firstMemo","memo","QUERY_OPTS","withDestination","withLedger","withNominations","withPrefs","groupByEra","list","reduce","era","value","key","toString","add","unwrap","calculateUnlocking","api","stakingLedger","sessionInfo","results","Object","entries","unlocking","filter","gt","activeEra","eraString","remainingEras","isub","registry","createType","length","undefined","redeemableSum","total","currentEra","iadd","parseResult","keys","query","redeemable","accounts","instanceId","accountIds","opts","derive","session","info","pipe","staking","keysMulti","queryMulti","queries","q","index","account","accountId"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/staking/account.js"],"sourcesContent":["import { combineLatest, map, switchMap } from 'rxjs';\nimport { BN, BN_ZERO, objectSpread } from '@polkadot/util';\nimport { firstMemo, memo } from '../util/index.js';\nconst QUERY_OPTS = {\n    withDestination: true,\n    withLedger: true,\n    withNominations: true,\n    withPrefs: true\n};\nfunction groupByEra(list) {\n    return list.reduce((map, { era, value }) => {\n        const key = era.toString();\n        map[key] = (map[key] || BN_ZERO).add(value.unwrap());\n        return map;\n    }, {});\n}\nfunction calculateUnlocking(api, stakingLedger, sessionInfo) {\n    const results = Object\n        .entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra))))\n        .map(([eraString, value]) => ({\n        remainingEras: new BN(eraString).isub(sessionInfo.activeEra),\n        value: api.registry.createType('Balance', value)\n    }));\n    return results.length\n        ? results\n        : undefined;\n}\nfunction redeemableSum(api, stakingLedger, sessionInfo) {\n    return api.registry.createType('Balance', (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {\n        // aligns with https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/pallet/mod.rs#L973-L975\n        // (ensure currentEra >= era passed, as per https://github.com/paritytech/substrate/blob/fdfdc73f9e64dc47934b72eb9af3e1989e4ba699/frame/staking/src/lib.rs#L477-L494)\n        // NOTE: Previously we used activeEra >= era, which is incorrect for the last session\n        return era.unwrap().gt(sessionInfo.currentEra)\n            ? total\n            : total.iadd(value.unwrap());\n    }, new BN(0)));\n}\nfunction parseResult(api, sessionInfo, keys, query) {\n    return objectSpread({}, keys, query, {\n        redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),\n        unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)\n    });\n}\n/**\n * @description From a list of stashes, fill in all the relevant staking details\n */\nexport function accounts(instanceId, api) {\n    return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([\n        api.derive.staking.keysMulti(accountIds),\n        api.derive.staking.queryMulti(accountIds, opts)\n    ]).pipe(map(([keys, queries]) => queries.map((q, index) => parseResult(api, sessionInfo, keys[index], q)))))));\n}\n/**\n * @description From a stash, retrieve the controllerId and fill in all the relevant staking details\n */\nexport const account = /*#__PURE__*/ firstMemo((api, accountId, opts) => api.derive.staking.accounts([accountId], opts));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}