{"ast":null,"code":"/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { bytes as assertBytes, number as assertNumber } from '@noble/hashes/_assert';\nimport { pbkdf2, pbkdf2Async } from '@noble/hashes/pbkdf2';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { utils as baseUtils } from '@scure/base';\n// Japanese wordlist\nconst isJapanese = wordlist => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n  if (typeof str !== 'string') throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n  return str.normalize('NFKD');\n}\nfunction normalize(str) {\n  const norm = nfkd(str);\n  const words = norm.split(' ');\n  if (![12, 15, 18, 21, 24].includes(words.length)) throw new Error('Invalid mnemonic');\n  return {\n    nfkd: norm,\n    words\n  };\n}\nfunction assertEntropy(entropy) {\n  assertBytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function generateMnemonic(wordlist, strength = 128) {\n  assertNumber(strength);\n  if (strength % 32 !== 0 || strength > 256) throw new TypeError('Invalid entropy');\n  return entropyToMnemonic(randomBytes(strength / 8), wordlist);\n}\nconst calcChecksum = entropy => {\n  // Checksum is ent.length/4 bits long\n  const bitsLeft = 8 - entropy.length / 4;\n  // Zero rightmost \"bitsLeft\" bits in byte\n  // For example: bitsLeft=4 val=10111101 -> 10110000\n  return new Uint8Array([sha256(entropy)[0] >> bitsLeft << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n  if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string') throw new Error('Wordlist: expected array of 2048 strings');\n  wordlist.forEach(i => {\n    if (typeof i !== 'string') throw new Error(`Wordlist: non-string element: ${i}`);\n  });\n  return baseUtils.chain(baseUtils.checksum(1, calcChecksum), baseUtils.radix2(11, true), baseUtils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n  const {\n    words\n  } = normalize(mnemonic);\n  const entropy = getCoder(wordlist).decode(words);\n  assertEntropy(entropy);\n  return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function entropyToMnemonic(entropy, wordlist) {\n  assertEntropy(entropy);\n  const words = getCoder(wordlist).encode(entropy);\n  return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nexport function validateMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nconst salt = passphrase => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeed(mnemonic, passphrase = '') {\n  return pbkdf2Async(sha512, normalize(mnemonic).nfkd, salt(passphrase), {\n    c: 2048,\n    dkLen: 64\n  });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeedSync(mnemonic, passphrase = '') {\n  return pbkdf2(sha512, normalize(mnemonic).nfkd, salt(passphrase), {\n    c: 2048,\n    dkLen: 64\n  });\n}","map":{"version":3,"names":["bytes","assertBytes","number","assertNumber","pbkdf2","pbkdf2Async","sha256","sha512","randomBytes","utils","baseUtils","isJapanese","wordlist","nfkd","str","TypeError","normalize","norm","words","split","includes","length","Error","assertEntropy","entropy","generateMnemonic","strength","entropyToMnemonic","calcChecksum","bitsLeft","Uint8Array","getCoder","Array","isArray","forEach","i","chain","checksum","radix2","alphabet","mnemonicToEntropy","mnemonic","decode","encode","join","validateMnemonic","e","salt","passphrase","mnemonicToSeed","c","dkLen","mnemonicToSeedSync"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@scure/bip39/esm/index.js"],"sourcesContent":["/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\nimport { bytes as assertBytes, number as assertNumber } from '@noble/hashes/_assert';\nimport { pbkdf2, pbkdf2Async } from '@noble/hashes/pbkdf2';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { utils as baseUtils } from '@scure/base';\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError(`Invalid mnemonic type: ${typeof str}`);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction assertEntropy(entropy) {\n    assertBytes(entropy, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function generateMnemonic(wordlist, strength = 128) {\n    assertNumber(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic(randomBytes(strength / 8), wordlist);\n}\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([(sha256(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Wordlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error(`Wordlist: non-string element: ${i}`);\n    });\n    return baseUtils.chain(baseUtils.checksum(1, calcChecksum), baseUtils.radix2(11, true), baseUtils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    assertEntropy(entropy);\n    return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nexport function entropyToMnemonic(entropy, wordlist) {\n    assertEntropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nexport function validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nconst salt = (passphrase) => nfkd(`mnemonic${passphrase}`);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeed(mnemonic, passphrase = '') {\n    return pbkdf2Async(sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nexport function mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return pbkdf2(sha512, normalize(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });\n}\n"],"mappings":"AAAA;AACA,SAASA,KAAK,IAAIC,WAAW,EAAEC,MAAM,IAAIC,YAAY,QAAQ,uBAAuB;AACpF,SAASC,MAAM,EAAEC,WAAW,QAAQ,sBAAsB;AAC1D,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,KAAK,IAAIC,SAAS,QAAQ,aAAa;AAChD;AACA,MAAMC,UAAU,GAAIC,QAAQ,IAAKA,QAAQ,CAAC,CAAC,CAAC,KAAK,sCAAsC;AACvF;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAACC,GAAG,EAAE;EACf,IAAI,OAAOA,GAAG,KAAK,QAAQ,EACvB,MAAM,IAAIC,SAAS,CAAE,0BAAyB,OAAOD,GAAI,EAAC,CAAC;EAC/D,OAAOA,GAAG,CAACE,SAAS,CAAC,MAAM,CAAC;AAChC;AACA,SAASA,SAASA,CAACF,GAAG,EAAE;EACpB,MAAMG,IAAI,GAAGJ,IAAI,CAACC,GAAG,CAAC;EACtB,MAAMI,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAC5C,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;EACvC,OAAO;IAAET,IAAI,EAAEI,IAAI;IAAEC;EAAM,CAAC;AAChC;AACA,SAASK,aAAaA,CAACC,OAAO,EAAE;EAC5BvB,WAAW,CAACuB,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAACb,QAAQ,EAAEc,QAAQ,GAAG,GAAG,EAAE;EACvDvB,YAAY,CAACuB,QAAQ,CAAC;EACtB,IAAIA,QAAQ,GAAG,EAAE,KAAK,CAAC,IAAIA,QAAQ,GAAG,GAAG,EACrC,MAAM,IAAIX,SAAS,CAAC,iBAAiB,CAAC;EAC1C,OAAOY,iBAAiB,CAACnB,WAAW,CAACkB,QAAQ,GAAG,CAAC,CAAC,EAAEd,QAAQ,CAAC;AACjE;AACA,MAAMgB,YAAY,GAAIJ,OAAO,IAAK;EAC9B;EACA,MAAMK,QAAQ,GAAG,CAAC,GAAGL,OAAO,CAACH,MAAM,GAAG,CAAC;EACvC;EACA;EACA,OAAO,IAAIS,UAAU,CAAC,CAAExB,MAAM,CAACkB,OAAO,CAAC,CAAC,CAAC,CAAC,IAAIK,QAAQ,IAAKA,QAAQ,CAAC,CAAC;AACzE,CAAC;AACD,SAASE,QAAQA,CAACnB,QAAQ,EAAE;EACxB,IAAI,CAACoB,KAAK,CAACC,OAAO,CAACrB,QAAQ,CAAC,IAAIA,QAAQ,CAACS,MAAM,KAAK,IAAI,IAAI,OAAOT,QAAQ,CAAC,CAAC,CAAC,KAAK,QAAQ,EACvF,MAAM,IAAIU,KAAK,CAAC,0CAA0C,CAAC;EAC/DV,QAAQ,CAACsB,OAAO,CAAEC,CAAC,IAAK;IACpB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EACrB,MAAM,IAAIb,KAAK,CAAE,iCAAgCa,CAAE,EAAC,CAAC;EAC7D,CAAC,CAAC;EACF,OAAOzB,SAAS,CAAC0B,KAAK,CAAC1B,SAAS,CAAC2B,QAAQ,CAAC,CAAC,EAAET,YAAY,CAAC,EAAElB,SAAS,CAAC4B,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE5B,SAAS,CAAC6B,QAAQ,CAAC3B,QAAQ,CAAC,CAAC;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4B,iBAAiBA,CAACC,QAAQ,EAAE7B,QAAQ,EAAE;EAClD,MAAM;IAAEM;EAAM,CAAC,GAAGF,SAAS,CAACyB,QAAQ,CAAC;EACrC,MAAMjB,OAAO,GAAGO,QAAQ,CAACnB,QAAQ,CAAC,CAAC8B,MAAM,CAACxB,KAAK,CAAC;EAChDK,aAAa,CAACC,OAAO,CAAC;EACtB,OAAOA,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,iBAAiBA,CAACH,OAAO,EAAEZ,QAAQ,EAAE;EACjDW,aAAa,CAACC,OAAO,CAAC;EACtB,MAAMN,KAAK,GAAGa,QAAQ,CAACnB,QAAQ,CAAC,CAAC+B,MAAM,CAACnB,OAAO,CAAC;EAChD,OAAON,KAAK,CAAC0B,IAAI,CAACjC,UAAU,CAACC,QAAQ,CAAC,GAAG,QAAQ,GAAG,GAAG,CAAC;AAC5D;AACA;AACA;AACA;AACA,OAAO,SAASiC,gBAAgBA,CAACJ,QAAQ,EAAE7B,QAAQ,EAAE;EACjD,IAAI;IACA4B,iBAAiB,CAACC,QAAQ,EAAE7B,QAAQ,CAAC;EACzC,CAAC,CACD,OAAOkC,CAAC,EAAE;IACN,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf;AACA,MAAMC,IAAI,GAAIC,UAAU,IAAKnC,IAAI,CAAE,WAAUmC,UAAW,EAAC,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACR,QAAQ,EAAEO,UAAU,GAAG,EAAE,EAAE;EACtD,OAAO3C,WAAW,CAACE,MAAM,EAAES,SAAS,CAACyB,QAAQ,CAAC,CAAC5B,IAAI,EAAEkC,IAAI,CAACC,UAAU,CAAC,EAAE;IAAEE,CAAC,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACX,QAAQ,EAAEO,UAAU,GAAG,EAAE,EAAE;EAC1D,OAAO5C,MAAM,CAACG,MAAM,EAAES,SAAS,CAACyB,QAAQ,CAAC,CAAC5B,IAAI,EAAEkC,IAAI,CAACC,UAAU,CAAC,EAAE;IAAEE,CAAC,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;AAC7F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}