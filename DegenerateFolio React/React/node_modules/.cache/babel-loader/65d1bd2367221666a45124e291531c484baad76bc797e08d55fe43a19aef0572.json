{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeBech32 = exports.fromBech32 = exports.toBech32 = void 0;\nconst bech32 = __importStar(require(\"bech32\"));\nfunction toBech32(prefix, data, limit) {\n  const address = bech32.encode(prefix, bech32.toWords(data), limit);\n  return address;\n}\nexports.toBech32 = toBech32;\nfunction fromBech32(address, limit = Infinity) {\n  const decodedAddress = bech32.decode(address, limit);\n  return {\n    prefix: decodedAddress.prefix,\n    data: new Uint8Array(bech32.fromWords(decodedAddress.words))\n  };\n}\nexports.fromBech32 = fromBech32;\n/**\n * Takes a bech32 address and returns a normalized (i.e. lower case) representation of it.\n *\n * The input is validated along the way, which makes this significantly safer than\n * using `address.toLowerCase()`.\n */\nfunction normalizeBech32(address) {\n  const {\n    prefix,\n    data\n  } = fromBech32(address);\n  return toBech32(prefix, data);\n}\nexports.normalizeBech32 = normalizeBech32;","map":{"version":3,"names":["bech32","__importStar","require","toBech32","prefix","data","limit","address","encode","toWords","exports","fromBech32","Infinity","decodedAddress","decode","Uint8Array","fromWords","words","normalizeBech32"],"sources":["../src/bech32.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,MAAA,GAAAC,YAAA,CAAAC,OAAA;AAEA,SAAgBC,QAAQA,CAACC,MAAc,EAAEC,IAAgB,EAAEC,KAAc;EACvE,MAAMC,OAAO,GAAGP,MAAM,CAACQ,MAAM,CAACJ,MAAM,EAAEJ,MAAM,CAACS,OAAO,CAACJ,IAAI,CAAC,EAAEC,KAAK,CAAC;EAClE,OAAOC,OAAO;AAChB;AAHAG,OAAA,CAAAP,QAAA,GAAAA,QAAA;AAKA,SAAgBQ,UAAUA,CACxBJ,OAAe,EACfD,KAAK,GAAGM,QAAQ;EAEhB,MAAMC,cAAc,GAAGb,MAAM,CAACc,MAAM,CAACP,OAAO,EAAED,KAAK,CAAC;EACpD,OAAO;IACLF,MAAM,EAAES,cAAc,CAACT,MAAM;IAC7BC,IAAI,EAAE,IAAIU,UAAU,CAACf,MAAM,CAACgB,SAAS,CAACH,cAAc,CAACI,KAAK,CAAC;GAC5D;AACH;AATAP,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAWA;;;;;;AAMA,SAAgBO,eAAeA,CAACX,OAAe;EAC7C,MAAM;IAAEH,MAAM;IAAEC;EAAI,CAAE,GAAGM,UAAU,CAACJ,OAAO,CAAC;EAC5C,OAAOJ,QAAQ,CAACC,MAAM,EAAEC,IAAI,CAAC;AAC/B;AAHAK,OAAA,CAAAQ,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}