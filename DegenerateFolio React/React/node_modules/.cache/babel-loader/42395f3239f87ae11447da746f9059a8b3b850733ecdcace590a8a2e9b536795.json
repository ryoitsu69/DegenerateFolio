{"ast":null,"code":"import { Struct } from '@polkadot/types-codec';\nimport { isU8a } from '@polkadot/util';\nexport const EXTRINSIC_VERSION = 4;\n/**\n * @name GenericExtrinsicV4\n * @description\n * The third generation of compact extrinsics\n */\nexport class GenericExtrinsicV4 extends Struct {\n  constructor(registry, value) {\n    let {\n      isSigned\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(registry, {\n      signature: 'ExtrinsicSignatureV4',\n      // eslint-disable-next-line sort-keys\n      method: 'Call'\n    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));\n  }\n  /** @internal */\n  static decodeExtrinsic(registry, value) {\n    let isSigned = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (value instanceof GenericExtrinsicV4) {\n      return value;\n    } else if (value instanceof registry.createClassUnsafe('Call')) {\n      return {\n        method: value\n      };\n    } else if (isU8a(value)) {\n      // here we decode manually since we need to pull through the version information\n      const signature = registry.createTypeUnsafe('ExtrinsicSignatureV4', [value, {\n        isSigned\n      }]);\n      const method = registry.createTypeUnsafe('Call', [value.subarray(signature.encodedLength)]);\n      return {\n        method,\n        signature\n      };\n    }\n    return value || {};\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n  get method() {\n    return this.getT('method');\n  }\n  /**\n   * @description The [[ExtrinsicSignatureV4]]\n   */\n  get signature() {\n    return this.getT('signature');\n  }\n  /**\n   * @description The version for the signature\n   */\n  get version() {\n    return EXTRINSIC_VERSION;\n  }\n  /**\n   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)\n   */\n  addSignature(signer, signature, payload) {\n    this.signature.addSignature(signer, signature, payload);\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n  sign(account, options) {\n    this.signature.sign(this.method, account, options);\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n  signFake(signer, options) {\n    this.signature.signFake(this.method, signer, options);\n    return this;\n  }\n}","map":{"version":3,"names":["Struct","isU8a","EXTRINSIC_VERSION","GenericExtrinsicV4","constructor","registry","value","isSigned","arguments","length","undefined","signature","method","decodeExtrinsic","createClassUnsafe","createTypeUnsafe","subarray","encodedLength","toU8a","getT","version","addSignature","signer","payload","sign","account","options","signFake"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js"],"sourcesContent":["import { Struct } from '@polkadot/types-codec';\nimport { isU8a } from '@polkadot/util';\nexport const EXTRINSIC_VERSION = 4;\n/**\n * @name GenericExtrinsicV4\n * @description\n * The third generation of compact extrinsics\n */\nexport class GenericExtrinsicV4 extends Struct {\n    constructor(registry, value, { isSigned } = {}) {\n        super(registry, {\n            signature: 'ExtrinsicSignatureV4',\n            // eslint-disable-next-line sort-keys\n            method: 'Call'\n        }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));\n    }\n    /** @internal */\n    static decodeExtrinsic(registry, value, isSigned = false) {\n        if (value instanceof GenericExtrinsicV4) {\n            return value;\n        }\n        else if (value instanceof registry.createClassUnsafe('Call')) {\n            return { method: value };\n        }\n        else if (isU8a(value)) {\n            // here we decode manually since we need to pull through the version information\n            const signature = registry.createTypeUnsafe('ExtrinsicSignatureV4', [value, { isSigned }]);\n            const method = registry.createTypeUnsafe('Call', [value.subarray(signature.encodedLength)]);\n            return {\n                method,\n                signature\n            };\n        }\n        return value || {};\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get encodedLength() {\n        return this.toU8a().length;\n    }\n    /**\n     * @description The [[Call]] this extrinsic wraps\n     */\n    get method() {\n        return this.getT('method');\n    }\n    /**\n     * @description The [[ExtrinsicSignatureV4]]\n     */\n    get signature() {\n        return this.getT('signature');\n    }\n    /**\n     * @description The version for the signature\n     */\n    get version() {\n        return EXTRINSIC_VERSION;\n    }\n    /**\n     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)\n     */\n    addSignature(signer, signature, payload) {\n        this.signature.addSignature(signer, signature, payload);\n        return this;\n    }\n    /**\n     * @description Sign the extrinsic with a specific keypair\n     */\n    sign(account, options) {\n        this.signature.sign(this.method, account, options);\n        return this;\n    }\n    /**\n     * @describe Adds a fake signature to the extrinsic\n     */\n    signFake(signer, options) {\n        this.signature.signFake(this.method, signer, options);\n        return this;\n    }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,SAASH,MAAM,CAAC;EAC3CI,WAAWA,CAACC,QAAQ,EAAEC,KAAK,EAAqB;IAAA,IAAnB;MAAEC;IAAS,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC1C,KAAK,CAACH,QAAQ,EAAE;MACZM,SAAS,EAAE,sBAAsB;MACjC;MACAC,MAAM,EAAE;IACZ,CAAC,EAAET,kBAAkB,CAACU,eAAe,CAACR,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAAC,CAAC;EACrE;EACA;EACA,OAAOM,eAAeA,CAACR,QAAQ,EAAEC,KAAK,EAAoB;IAAA,IAAlBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACpD,IAAIF,KAAK,YAAYH,kBAAkB,EAAE;MACrC,OAAOG,KAAK;IAChB,CAAC,MACI,IAAIA,KAAK,YAAYD,QAAQ,CAACS,iBAAiB,CAAC,MAAM,CAAC,EAAE;MAC1D,OAAO;QAAEF,MAAM,EAAEN;MAAM,CAAC;IAC5B,CAAC,MACI,IAAIL,KAAK,CAACK,KAAK,CAAC,EAAE;MACnB;MACA,MAAMK,SAAS,GAAGN,QAAQ,CAACU,gBAAgB,CAAC,sBAAsB,EAAE,CAACT,KAAK,EAAE;QAAEC;MAAS,CAAC,CAAC,CAAC;MAC1F,MAAMK,MAAM,GAAGP,QAAQ,CAACU,gBAAgB,CAAC,MAAM,EAAE,CAACT,KAAK,CAACU,QAAQ,CAACL,SAAS,CAACM,aAAa,CAAC,CAAC,CAAC;MAC3F,OAAO;QACHL,MAAM;QACND;MACJ,CAAC;IACL;IACA,OAAOL,KAAK,IAAI,CAAC,CAAC;EACtB;EACA;AACJ;AACA;EACI,IAAIW,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,KAAK,CAAC,CAAC,CAACT,MAAM;EAC9B;EACA;AACJ;AACA;EACI,IAAIG,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACO,IAAI,CAAC,QAAQ,CAAC;EAC9B;EACA;AACJ;AACA;EACI,IAAIR,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACQ,IAAI,CAAC,WAAW,CAAC;EACjC;EACA;AACJ;AACA;EACI,IAAIC,OAAOA,CAAA,EAAG;IACV,OAAOlB,iBAAiB;EAC5B;EACA;AACJ;AACA;EACImB,YAAYA,CAACC,MAAM,EAAEX,SAAS,EAAEY,OAAO,EAAE;IACrC,IAAI,CAACZ,SAAS,CAACU,YAAY,CAACC,MAAM,EAAEX,SAAS,EAAEY,OAAO,CAAC;IACvD,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIC,IAAIA,CAACC,OAAO,EAAEC,OAAO,EAAE;IACnB,IAAI,CAACf,SAAS,CAACa,IAAI,CAAC,IAAI,CAACZ,MAAM,EAAEa,OAAO,EAAEC,OAAO,CAAC;IAClD,OAAO,IAAI;EACf;EACA;AACJ;AACA;EACIC,QAAQA,CAACL,MAAM,EAAEI,OAAO,EAAE;IACtB,IAAI,CAACf,SAAS,CAACgB,QAAQ,CAAC,IAAI,CAACf,MAAM,EAAEU,MAAM,EAAEI,OAAO,CAAC;IACrD,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}