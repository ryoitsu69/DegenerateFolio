{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport Sketch from \"react-p5\";\nimport * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\nconst fragmentShader = `\n\nfloat sun(vec2 uv, float battery)\n{\n    float val = smoothstep(0.3, 0.29, length(uv));\n    float bloom = smoothstep(0.7, 0.0, length(uv));\n    float cut = 3.0 * sin((uv.y + iTime * 0.2 * (battery + 0.02)) * 100.0)\n    + clamp(uv.y * 14.0 + 1.0, -6.0, 6.0);\n    cut = clamp(cut, 0.0, 1.0);\n    return clamp(val * cut, 0.0, 1.0) + bloom * 0.6;\n}\n\nfloat grid(vec2 uv, float battery)\n{\n    vec2 size = vec2(uv.y, uv.y * uv.y * 0.2) * 0.01;\n    uv += vec2(0.0, iTime * 4.0 * (battery + 0.05));\n    uv = abs(fract(uv) - 0.5);\n    vec2 lines = smoothstep(size, vec2(0.0), uv);\n    lines += smoothstep(size * 5.0, vec2(0.0), uv) * 0.4 * battery;\n    return clamp(lines.x + lines.y, 0.0, 3.0);\n}\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat opSmoothUnion(float d1, float d2, float k){\n    float h = clamp(0.5 + 0.5 * (d2 - d1) /k,0.0,1.0);\n    return mix(d2, d1 , h) - k * h * ( 1.0 - h);\n}\n\nfloat sdCloud(in vec2 p, in vec2 a1, in vec2 b1, in vec2 a2, in vec2 b2, float w)\n{\n    //float lineVal1 = smoothstep(w - 0.0001, w, sdLine(p, a1, b1));\n    float lineVal1 = sdLine(p, a1, b1);\n    float lineVal2 = sdLine(p, a2, b2);\n    vec2 ww = vec2(w*1.5, 0.0);\n    vec2 left = max(a1 + ww, a2 + ww);\n    vec2 right = min(b1 - ww, b2 - ww);\n    vec2 boxCenter = (left + right) * 0.5;\n    //float boxW = right.x - left.x;\n    float boxH = abs(a2.y - a1.y) * 0.5;\n    //float boxVal = sdBox(p - boxCenter, vec2(boxW, boxH)) + w;\n    float boxVal = sdBox(p - boxCenter, vec2(0.04, boxH)) + w;\n\n    float uniVal1 = opSmoothUnion(lineVal1, boxVal, 0.05);\n    float uniVal2 = opSmoothUnion(lineVal2, boxVal, 0.05);\n\n    return min(uniVal1, uniVal2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy)/iResolution.y;\n    float battery = 1.0;\n    //if (iMouse.x > 1.0 && iMouse.y > 1.0) battery = iMouse.y / iResolution.y;\n    //else battery = 0.8;\n\n    //if (abs(uv.x) < (9.0 / 16.0))\n    {\n        // Grid\n        float fog = smoothstep(0.1, -0.02, abs(uv.y + 0.2));\n        vec3 col = vec3(0.0, 0.1, 0.2);\n        if (uv.y < -0.2)\n        {\n            uv.y = 3.0 / (abs(uv.y + 0.2) + 0.05);\n            uv.x *= uv.y * 1.0;\n            float gridVal = grid(uv, battery);\n            col = mix(col, vec3(1.0, 0.5, 1.0), gridVal);\n        }\n        else\n        {\n            float fujiD = min(uv.y * 4.5 - 0.5, 1.0);\n            uv.y -= battery * 1.1 - 0.51;\n\n            vec2 sunUV = uv;\n            vec2 fujiUV = uv;\n\n            // Sun\n            sunUV += vec2(0.75, 0.2);\n            //uv.y -= 1.1 - 0.51;\n            col = vec3(1.0, 0.2, 1.0);\n            float sunVal = sun(sunUV, battery);\n\n            col = mix(col, vec3(1.0, 0.4, 0.1), sunUV.y * 2.0 + 0.2);\n            col = mix(vec3(0.0, 0.0, 0.0), col, sunVal);\n\n            // fuji\n            float fujiVal = sdTrapezoid( uv  + vec2(-0.75+sunUV.y * 0.0, 0.5), 1.75 + pow(uv.y * uv.y, 2.1), 0.2, 0.5);\n            float waveVal = uv.y + sin(uv.x * 20.0 + iTime * 2.0) * 0.05 + 0.2;\n            float wave_width = smoothstep(0.0,0.01,(waveVal));\n\n            // fuji color\n            col = mix( col, mix(vec3(0.0, 0.0, 0.25), vec3(1.0, 0.0, 0.5), fujiD), step(fujiVal, 0.0));\n            // fuji top snow\n            col = mix( col, vec3(1.0, 0.5, 1.0), wave_width * step(fujiVal, 0.0));\n            // fuji outline\n            col = mix( col, vec3(1.0, 0.5, 1.0), 1.0-smoothstep(0.0,0.01,abs(fujiVal)) );\n            //col = mix( col, vec3(1.0, 1.0, 1.0), 1.0-smoothstep(0.03,0.04,abs(fujiVal)) );\n            //col = vec3(1.0, 1.0, 1.0) *(1.0-smoothstep(0.03,0.04,abs(fujiVal)));\n\n            // horizon color\n            col += mix( col, mix(vec3(1.0, 0.12, 0.8), vec3(0.0, 0.0, 0.2), clamp(uv.y * 3.5 + 3.0, 0.0, 1.0)), step(0.0, fujiVal) );\n\n            // cloud\n            vec2 cloudUV = uv;\n            cloudUV.x = mod(cloudUV.x + iTime * 0.1, 4.0) - 2.0;\n            float cloudTime = iTime * 0.5;\n            float cloudY = -0.5;\n            float cloudVal1 = sdCloud(cloudUV,\n                                      vec2(0.1 + sin(cloudTime + 140.5)*0.1,cloudY),\n                                      vec2(1.05 + cos(cloudTime * 0.9 - 36.56) * 0.1, cloudY),\n                                      vec2(0.2 + cos(cloudTime * 0.867 + 387.165) * 0.1,0.25+cloudY),\n                                      vec2(0.5 + cos(cloudTime * 0.9675 - 15.162) * 0.09, 0.25+cloudY), 0.075);\n            cloudY = -0.6;\n            float cloudVal2 = sdCloud(cloudUV,\n                                      vec2(-0.9 + cos(cloudTime * 1.02 + 541.75) * 0.1,cloudY),\n                                      vec2(-0.5 + sin(cloudTime * 0.9 - 316.56) * 0.1, cloudY),\n                                      vec2(-1.5 + cos(cloudTime * 0.867 + 37.165) * 0.1,0.25+cloudY),\n                                      vec2(-0.6 + sin(cloudTime * 0.9675 + 665.162) * 0.09, 0.25+cloudY), 0.075);\n\n            float cloudVal = min(cloudVal1, cloudVal2);\n\n            //col = mix(col, vec3(1.0,1.0,0.0), smoothstep(0.0751, 0.075, cloudVal));\n            col = mix(col, vec3(0.0, 0.0, 0.2), 1.0 - smoothstep(0.075 - 0.0001, 0.075, cloudVal));\n            col += vec3(1.0, 1.0, 1.0)*(1.0 - smoothstep(0.0,0.01,abs(cloudVal - 0.075)));\n        }\n\n        col += fog * fog * fog;\n        col = mix(vec3(col.r, col.r, col.r) * 0.5, col, battery * 0.7);\n\n        fragColor = vec4(col,1.0);\n    }\n    //else fragColor = vec4(0.0);\n\n\n}\n   `;\nconst scene = new THREE.Scene();\nconst camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\nconst superman = {\n  origin: new THREE.Vector3(0, 3.5, 0),\n  speed: 10.0,\n  roll: Math.PI,\n  heading: 0,\n  pitch: Math.PI\n};\nconst uniforms = {\n  iTime: {\n    value: 0\n  },\n  iResolution: {\n    value: new THREE.Vector3(window.innerWidth, window.innerHeight, 1)\n  },\n  origin: {\n    value: superman.origin\n  },\n  roll: {\n    value: superman.roll\n  },\n  yaw: {\n    value: superman.heading\n  },\n  pitch: {\n    value: superman.pitch\n  },\n  amplitude: {\n    value: 0.5\n  },\n  frequency: {\n    value: 0.24\n  },\n  choppy: {\n    value: 3.0\n  },\n  night: {\n    value: false\n  }\n};\nconst plane = new THREE.PlaneGeometry(2, 2);\nconst material = new THREE.ShaderMaterial({\n  vertexShader,\n  fragmentShader,\n  uniforms\n});\nscene.add(new THREE.Mesh(plane, material));\nwindow.addEventListener('resize', onWindowResize, false);\nfunction onWindowResize() {\n  camera.updateProjectionMatrix();\n  uniforms.iResolution.value.set(window.innerWidth, window.innerHeight, 1);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\nconst stats = Stats();\ndocument.body.appendChild(stats.dom);\nconst gui = new GUI();\ngui.width = 500;\nconst waterFolder = gui.addFolder('Water');\nwaterFolder.add(uniforms.amplitude, 'value', 0.1, 2, 0.1).name('Amplitude');\nwaterFolder.add(uniforms.frequency, 'value', 0.01, 2, 0.01).name('Frequency');\nwaterFolder.add(uniforms.choppy, 'value', 0.1, 20, 0.1).name('Choppy');\nwaterFolder.add(uniforms.night, 'value').name('Night');\nwaterFolder.open();\nconst supermanFolder = gui.addFolder('Superman');\nsupermanFolder.add(superman, 'roll', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01).name('Roll');\nsupermanFolder.add(superman, 'pitch', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01).name('Pitch');\nsupermanFolder.add(superman, 'speed', 0, 100, 0.1).name('Speed');\nsupermanFolder.open();\nconst clock = new THREE.Clock();\nlet delta = 0;\nlet alt = 0;\nfunction animate() {\n  requestAnimationFrame(animate);\n  delta = clock.getDelta();\n  superman.heading += (superman.roll - Math.PI) / 75;\n  superman.origin.x += -Math.sin(superman.heading) * superman.speed * delta;\n  superman.origin.z += Math.cos(superman.heading) * superman.speed * delta;\n  alt = superman.origin.y + (superman.pitch - Math.PI) / 10;\n  if (alt > 1) superman.origin.y = alt;\n  uniforms.iTime.value = clock.getElapsedTime();\n  uniforms.roll.value = superman.roll;\n  uniforms.yaw.value = superman.heading;\n  uniforms.pitch.value = superman.pitch;\n  uniforms.origin.value.copy(superman.origin);\n  render();\n  stats.update();\n}\nfunction render() {\n  renderer.render(scene, camera);\n}\nanimate();\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","TodoApp","reportWebVitals","Sketch","THREE","Stats","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","vertexShader","fragmentShader","scene","Scene","camera","OrthographicCamera","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","body","appendChild","domElement","superman","origin","Vector3","speed","roll","Math","PI","heading","pitch","uniforms","iTime","value","iResolution","yaw","amplitude","frequency","choppy","night","plane","PlaneGeometry","material","ShaderMaterial","add","Mesh","addEventListener","onWindowResize","updateProjectionMatrix","set","stats","dom","gui","GUI","width","waterFolder","addFolder","name","open","supermanFolder","clock","Clock","delta","alt","animate","requestAnimationFrame","getDelta","x","sin","z","cos","y","getElapsedTime","copy","render","update","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport Sketch from \"react-p5\";\nimport * as THREE from 'three'\nimport Stats from 'three/examples/jsm/libs/stats.module'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\nconst vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\n\nfloat sun(vec2 uv, float battery)\n{\n    float val = smoothstep(0.3, 0.29, length(uv));\n    float bloom = smoothstep(0.7, 0.0, length(uv));\n    float cut = 3.0 * sin((uv.y + iTime * 0.2 * (battery + 0.02)) * 100.0)\n    + clamp(uv.y * 14.0 + 1.0, -6.0, 6.0);\n    cut = clamp(cut, 0.0, 1.0);\n    return clamp(val * cut, 0.0, 1.0) + bloom * 0.6;\n}\n\nfloat grid(vec2 uv, float battery)\n{\n    vec2 size = vec2(uv.y, uv.y * uv.y * 0.2) * 0.01;\n    uv += vec2(0.0, iTime * 4.0 * (battery + 0.05));\n    uv = abs(fract(uv) - 0.5);\n    vec2 lines = smoothstep(size, vec2(0.0), uv);\n    lines += smoothstep(size * 5.0, vec2(0.0), uv) * 0.4 * battery;\n    return clamp(lines.x + lines.y, 0.0, 3.0);\n}\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat opSmoothUnion(float d1, float d2, float k){\n    float h = clamp(0.5 + 0.5 * (d2 - d1) /k,0.0,1.0);\n    return mix(d2, d1 , h) - k * h * ( 1.0 - h);\n}\n\nfloat sdCloud(in vec2 p, in vec2 a1, in vec2 b1, in vec2 a2, in vec2 b2, float w)\n{\n    //float lineVal1 = smoothstep(w - 0.0001, w, sdLine(p, a1, b1));\n    float lineVal1 = sdLine(p, a1, b1);\n    float lineVal2 = sdLine(p, a2, b2);\n    vec2 ww = vec2(w*1.5, 0.0);\n    vec2 left = max(a1 + ww, a2 + ww);\n    vec2 right = min(b1 - ww, b2 - ww);\n    vec2 boxCenter = (left + right) * 0.5;\n    //float boxW = right.x - left.x;\n    float boxH = abs(a2.y - a1.y) * 0.5;\n    //float boxVal = sdBox(p - boxCenter, vec2(boxW, boxH)) + w;\n    float boxVal = sdBox(p - boxCenter, vec2(0.04, boxH)) + w;\n\n    float uniVal1 = opSmoothUnion(lineVal1, boxVal, 0.05);\n    float uniVal2 = opSmoothUnion(lineVal2, boxVal, 0.05);\n\n    return min(uniVal1, uniVal2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy)/iResolution.y;\n    float battery = 1.0;\n    //if (iMouse.x > 1.0 && iMouse.y > 1.0) battery = iMouse.y / iResolution.y;\n    //else battery = 0.8;\n\n    //if (abs(uv.x) < (9.0 / 16.0))\n    {\n        // Grid\n        float fog = smoothstep(0.1, -0.02, abs(uv.y + 0.2));\n        vec3 col = vec3(0.0, 0.1, 0.2);\n        if (uv.y < -0.2)\n        {\n            uv.y = 3.0 / (abs(uv.y + 0.2) + 0.05);\n            uv.x *= uv.y * 1.0;\n            float gridVal = grid(uv, battery);\n            col = mix(col, vec3(1.0, 0.5, 1.0), gridVal);\n        }\n        else\n        {\n            float fujiD = min(uv.y * 4.5 - 0.5, 1.0);\n            uv.y -= battery * 1.1 - 0.51;\n\n            vec2 sunUV = uv;\n            vec2 fujiUV = uv;\n\n            // Sun\n            sunUV += vec2(0.75, 0.2);\n            //uv.y -= 1.1 - 0.51;\n            col = vec3(1.0, 0.2, 1.0);\n            float sunVal = sun(sunUV, battery);\n\n            col = mix(col, vec3(1.0, 0.4, 0.1), sunUV.y * 2.0 + 0.2);\n            col = mix(vec3(0.0, 0.0, 0.0), col, sunVal);\n\n            // fuji\n            float fujiVal = sdTrapezoid( uv  + vec2(-0.75+sunUV.y * 0.0, 0.5), 1.75 + pow(uv.y * uv.y, 2.1), 0.2, 0.5);\n            float waveVal = uv.y + sin(uv.x * 20.0 + iTime * 2.0) * 0.05 + 0.2;\n            float wave_width = smoothstep(0.0,0.01,(waveVal));\n\n            // fuji color\n            col = mix( col, mix(vec3(0.0, 0.0, 0.25), vec3(1.0, 0.0, 0.5), fujiD), step(fujiVal, 0.0));\n            // fuji top snow\n            col = mix( col, vec3(1.0, 0.5, 1.0), wave_width * step(fujiVal, 0.0));\n            // fuji outline\n            col = mix( col, vec3(1.0, 0.5, 1.0), 1.0-smoothstep(0.0,0.01,abs(fujiVal)) );\n            //col = mix( col, vec3(1.0, 1.0, 1.0), 1.0-smoothstep(0.03,0.04,abs(fujiVal)) );\n            //col = vec3(1.0, 1.0, 1.0) *(1.0-smoothstep(0.03,0.04,abs(fujiVal)));\n\n            // horizon color\n            col += mix( col, mix(vec3(1.0, 0.12, 0.8), vec3(0.0, 0.0, 0.2), clamp(uv.y * 3.5 + 3.0, 0.0, 1.0)), step(0.0, fujiVal) );\n\n            // cloud\n            vec2 cloudUV = uv;\n            cloudUV.x = mod(cloudUV.x + iTime * 0.1, 4.0) - 2.0;\n            float cloudTime = iTime * 0.5;\n            float cloudY = -0.5;\n            float cloudVal1 = sdCloud(cloudUV,\n                                      vec2(0.1 + sin(cloudTime + 140.5)*0.1,cloudY),\n                                      vec2(1.05 + cos(cloudTime * 0.9 - 36.56) * 0.1, cloudY),\n                                      vec2(0.2 + cos(cloudTime * 0.867 + 387.165) * 0.1,0.25+cloudY),\n                                      vec2(0.5 + cos(cloudTime * 0.9675 - 15.162) * 0.09, 0.25+cloudY), 0.075);\n            cloudY = -0.6;\n            float cloudVal2 = sdCloud(cloudUV,\n                                      vec2(-0.9 + cos(cloudTime * 1.02 + 541.75) * 0.1,cloudY),\n                                      vec2(-0.5 + sin(cloudTime * 0.9 - 316.56) * 0.1, cloudY),\n                                      vec2(-1.5 + cos(cloudTime * 0.867 + 37.165) * 0.1,0.25+cloudY),\n                                      vec2(-0.6 + sin(cloudTime * 0.9675 + 665.162) * 0.09, 0.25+cloudY), 0.075);\n\n            float cloudVal = min(cloudVal1, cloudVal2);\n\n            //col = mix(col, vec3(1.0,1.0,0.0), smoothstep(0.0751, 0.075, cloudVal));\n            col = mix(col, vec3(0.0, 0.0, 0.2), 1.0 - smoothstep(0.075 - 0.0001, 0.075, cloudVal));\n            col += vec3(1.0, 1.0, 1.0)*(1.0 - smoothstep(0.0,0.01,abs(cloudVal - 0.075)));\n        }\n\n        col += fog * fog * fog;\n        col = mix(vec3(col.r, col.r, col.r) * 0.5, col, battery * 0.7);\n\n        fragColor = vec4(col,1.0);\n    }\n    //else fragColor = vec4(0.0);\n\n\n}\n   `\n\nconst scene = new THREE.Scene()\n\nconst camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1)\n\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setSize(window.innerWidth, window.innerHeight)\ndocument.body.appendChild(renderer.domElement)\n\nconst superman = {\n    origin: new THREE.Vector3(0, 3.5, 0),\n    speed: 10.0,\n    roll: Math.PI,\n    heading: 0,\n    pitch: Math.PI,\n}\n\nconst uniforms = {\n    iTime: { value: 0 },\n    iResolution: { value: new THREE.Vector3(window.innerWidth, window.innerHeight, 1) },\n    origin: { value: superman.origin },\n    roll: { value: superman.roll },\n    yaw: { value: superman.heading },\n    pitch: { value: superman.pitch },\n    amplitude: { value: 0.5 },\n    frequency: { value: 0.24 },\n    choppy: { value: 3.0 },\n    night: { value: false },\n}\n\nconst plane = new THREE.PlaneGeometry(2, 2)\nconst material = new THREE.ShaderMaterial({\n    vertexShader,\n    fragmentShader,\n    uniforms,\n})\nscene.add(new THREE.Mesh(plane, material))\n\nwindow.addEventListener('resize', onWindowResize, false)\nfunction onWindowResize() {\n    camera.updateProjectionMatrix()\n    uniforms.iResolution.value.set(window.innerWidth, window.innerHeight, 1)\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\nconst stats = Stats()\ndocument.body.appendChild(stats.dom)\n\nconst gui = new GUI()\ngui.width = 500\nconst waterFolder = gui.addFolder('Water')\nwaterFolder.add(uniforms.amplitude, 'value', 0.1, 2, 0.1).name('Amplitude')\nwaterFolder.add(uniforms.frequency, 'value', 0.01, 2, 0.01).name('Frequency')\nwaterFolder.add(uniforms.choppy, 'value', 0.1, 20, 0.1).name('Choppy')\nwaterFolder.add(uniforms.night, 'value').name('Night')\nwaterFolder.open()\nconst supermanFolder = gui.addFolder('Superman')\nsupermanFolder\n.add(superman, 'roll', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01)\n.name('Roll')\nsupermanFolder\n.add(superman, 'pitch', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01)\n.name('Pitch')\nsupermanFolder.add(superman, 'speed', 0, 100, 0.1).name('Speed')\nsupermanFolder.open()\n\nconst clock = new THREE.Clock()\nlet delta = 0\nlet alt = 0\n\nfunction animate() {\n    requestAnimationFrame(animate)\n\n    delta = clock.getDelta()\n\n    superman.heading += (superman.roll - Math.PI) / 75\n    superman.origin.x += -Math.sin(superman.heading) * superman.speed * delta\n    superman.origin.z += Math.cos(superman.heading) * superman.speed * delta\n    alt = superman.origin.y + (superman.pitch - Math.PI) / 10\n    if (alt > 1) superman.origin.y = alt\n\n        uniforms.iTime.value = clock.getElapsedTime()\n        uniforms.roll.value = superman.roll\n        uniforms.yaw.value = superman.heading\n        uniforms.pitch.value = superman.pitch\n        uniforms.origin.value.copy(superman.origin)\n\n        render()\n\n        stats.update()\n}\n\nfunction render() {\n    renderer.render(scene, camera)\n}\n\nanimate()\n\n\nroot.render(\n    <>\n<TodoApp />\n<footer>©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}