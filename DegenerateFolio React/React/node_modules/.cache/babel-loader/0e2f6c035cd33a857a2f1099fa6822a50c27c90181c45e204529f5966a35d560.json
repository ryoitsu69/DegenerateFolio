{"ast":null,"code":"import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides ?? (this.cssOverrides = options.cssOverrides);\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /** List of style overrides that will be applied to the HTML text. */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join(\"-\");\n    return this._styleKey;\n  }\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * @returns New cloned HTMLTextStyle object\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides\n    });\n  }\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   */\n  addOverride(...value) {\n    const toAdd = value.filter(v => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter(v => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter(v => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\nexport { HTMLTextStyle };","map":{"version":3,"names":["HTMLTextStyle","TextStyle","constructor","options","_cssOverrides","cssOverrides","tagStyles","value","Array","update","_generateKey","_styleKey","generateTextStyleKey","join","_cssStyle","clone","align","breakWords","dropShadow","fill","_fill","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","padding","stroke","_stroke","whiteSpace","wordWrap","wordWrapWidth","cssStyle","textStyleToCSS","addOverride","toAdd","filter","v","includes","length","push","removeOverride","toRemove","warn"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-html/HtmlTextStyle.ts"],"sourcesContent":["/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillStyleInputs } from '../graphics/shared/GraphicsContext';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillStyleInputs)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: FillStyleInputs)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}