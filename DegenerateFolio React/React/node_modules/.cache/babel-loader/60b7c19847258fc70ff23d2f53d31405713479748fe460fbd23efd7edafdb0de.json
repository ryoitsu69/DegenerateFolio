{"ast":null,"code":"//https://www.shadertoy.com/view/lslGWr\n\nmodule.exports = `\n\n// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nfloat field(in vec3 p) {\n    float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n    float accum = 0.;\n    float prev = 0.;\n    float tw = 0.;\n    for (int i = 0; i < 32; ++i) {\n        float mag = dot(p, p);\n        p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n        float w = exp(-float(i) / 7.);\n        accum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n        tw += w;\n        prev = mag;\n    }\n    return max(0., 5. * accum / tw - .7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n    vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);\n    vec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);\n    p += .2 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n    float t = field(p);\n    float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));\n    fragColor = mix(.4, 1., v) * vec4(1.8 * t * t * t, 1.4 * t * t, t, 1.0);\n}\n\n\n`;","map":{"version":3,"names":["module","exports"],"sources":["/home/ryoitsu/Documents/GitHub/DegenerateFolio/DegenerateFolio React/React/src/shaders/simplicity/simplicity.js"],"sourcesContent":["//https://www.shadertoy.com/view/lslGWr\n\nmodule.exports = `\n\n// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nfloat field(in vec3 p) {\n    float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n    float accum = 0.;\n    float prev = 0.;\n    float tw = 0.;\n    for (int i = 0; i < 32; ++i) {\n        float mag = dot(p, p);\n        p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n        float w = exp(-float(i) / 7.);\n        accum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n        tw += w;\n        prev = mag;\n    }\n    return max(0., 5. * accum / tw - .7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n    vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);\n    vec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);\n    p += .2 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n    float t = field(p);\n    float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));\n    fragColor = mix(.4, 1., v) * vec4(1.8 * t * t * t, 1.4 * t * t, t, 1.0);\n}\n\n\n`\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAO,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}