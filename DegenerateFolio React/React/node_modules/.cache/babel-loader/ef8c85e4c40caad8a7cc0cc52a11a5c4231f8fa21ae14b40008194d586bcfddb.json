{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction _membersPrev(api, accountIds) {\n  return combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society['strikes'].multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society['vouching'].multi(accountIds)]).pipe(map(_ref => {\n    let [accountIds, payouts, strikes, defenderVotes, suspended, vouching] = _ref;\n    return accountIds.map((accountId, index) => ({\n      accountId,\n      isDefenderVoter: defenderVotes[index].isSome,\n      isSuspended: suspended[index].isTrue,\n      payouts: payouts[index],\n      strikes: strikes[index],\n      vote: defenderVotes[index].unwrapOr(undefined),\n      vouching: vouching[index].unwrapOr(undefined)\n    }));\n  }));\n}\nfunction _membersCurr(api, accountIds) {\n  return combineLatest([of(accountIds), api.query.society.members.multi(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.challengeRoundCount().pipe(switchMap(round => api.query.society.defenderVotes.multi(accountIds.map(accountId => [round, accountId])))), api.query.society.suspendedMembers.multi(accountIds)]).pipe(map(_ref2 => {\n    let [accountIds, members, payouts, defenderVotes, suspendedMembers] = _ref2;\n    return accountIds.map((accountId, index) => members[index].isSome ? {\n      accountId,\n      isDefenderVoter: defenderVotes[index].isSome,\n      isSuspended: suspendedMembers[index].isSome,\n      member: members[index].unwrap(),\n      payouts: payouts[index].payouts\n    } : null).filter(m => !!m).map(_ref3 => {\n      let {\n        accountId,\n        isDefenderVoter,\n        isSuspended,\n        member,\n        payouts\n      } = _ref3;\n      return {\n        accountId,\n        isDefenderVoter,\n        isSuspended,\n        payouts,\n        strikes: member.strikes,\n        vouching: member.vouching.unwrapOr(undefined)\n      };\n    });\n  }));\n}\nexport function _members(instanceId, api) {\n  return memo(instanceId, accountIds => api.query.society.members.creator.meta.type.isMap ? _membersCurr(api, accountIds) : _membersPrev(api, accountIds));\n}\n/**\n * @description Get the member info for a society\n */\nexport function members(instanceId, api) {\n  return memo(instanceId, () => api.query.society.members.creator.meta.type.isMap ? api.query.society.members.keys().pipe(switchMap(keys => api.derive.society._members(keys.map(_ref4 => {\n    let {\n      args: [accountId]\n    } = _ref4;\n    return accountId;\n  })))) : api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","memo","_membersPrev","api","accountIds","query","society","payouts","multi","defenderVotes","suspendedMembers","pipe","_ref","strikes","suspended","vouching","accountId","index","isDefenderVoter","isSome","isSuspended","isTrue","vote","unwrapOr","undefined","_membersCurr","members","challengeRoundCount","round","_ref2","member","unwrap","filter","m","_ref3","_members","instanceId","creator","meta","type","isMap","keys","derive","_ref4","args"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/society/members.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction _membersPrev(api, accountIds) {\n    return combineLatest([\n        of(accountIds),\n        api.query.society.payouts.multi(accountIds),\n        api.query.society['strikes'].multi(accountIds),\n        api.query.society.defenderVotes.multi(accountIds),\n        api.query.society.suspendedMembers.multi(accountIds),\n        api.query.society['vouching'].multi(accountIds)\n    ]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({\n        accountId,\n        isDefenderVoter: defenderVotes[index].isSome,\n        isSuspended: suspended[index].isTrue,\n        payouts: payouts[index],\n        strikes: strikes[index],\n        vote: defenderVotes[index].unwrapOr(undefined),\n        vouching: vouching[index].unwrapOr(undefined)\n    }))));\n}\nfunction _membersCurr(api, accountIds) {\n    return combineLatest([\n        of(accountIds),\n        api.query.society.members.multi(accountIds),\n        api.query.society.payouts.multi(accountIds),\n        api.query.society.challengeRoundCount().pipe(switchMap((round) => api.query.society.defenderVotes.multi(accountIds.map((accountId) => [round, accountId])))),\n        api.query.society.suspendedMembers.multi(accountIds)\n    ]).pipe(map(([accountIds, members, payouts, defenderVotes, suspendedMembers]) => accountIds\n        .map((accountId, index) => members[index].isSome\n        ? {\n            accountId,\n            isDefenderVoter: defenderVotes[index].isSome,\n            isSuspended: suspendedMembers[index].isSome,\n            member: members[index].unwrap(),\n            payouts: payouts[index].payouts\n        }\n        : null)\n        .filter((m) => !!m)\n        .map(({ accountId, isDefenderVoter, isSuspended, member, payouts }) => ({\n        accountId,\n        isDefenderVoter,\n        isSuspended,\n        payouts,\n        strikes: member.strikes,\n        vouching: member.vouching.unwrapOr(undefined)\n    }))));\n}\nexport function _members(instanceId, api) {\n    return memo(instanceId, (accountIds) => api.query.society.members.creator.meta.type.isMap\n        ? _membersCurr(api, accountIds)\n        : _membersPrev(api, accountIds));\n}\n/**\n * @description Get the member info for a society\n */\nexport function members(instanceId, api) {\n    return memo(instanceId, () => api.query.society.members.creator.meta.type.isMap\n        ? api.query.society.members.keys().pipe(switchMap((keys) => api.derive.society._members(keys.map(({ args: [accountId] }) => accountId))))\n        : api.query.society.members().pipe(switchMap((members) => api.derive.society._members(members))));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}