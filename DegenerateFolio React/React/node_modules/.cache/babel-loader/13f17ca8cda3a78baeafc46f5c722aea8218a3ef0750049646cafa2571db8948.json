{"ast":null,"code":"class ObjectRenderer {\n  /**\n   * @param renderer - The renderer this manager works for.\n   */\n  constructor(renderer) {\n    this.renderer = renderer;\n  }\n  /** Stub method that should be used to empty the current batch by rendering objects now. */\n  flush() {}\n  /** Generic destruction method that frees all resources. This should be called by subclasses. */\n  destroy() {\n    this.renderer = null;\n  }\n  /**\n   * Stub method that initializes any state required before\n   * rendering starts. It is different from the `prerender`\n   * signal, which occurs every frame, in that it is called\n   * whenever an object requests _this_ renderer specifically.\n   */\n  start() {}\n  /** Stops the renderer. It should free up any state and become dormant. */\n  stop() {\n    this.flush();\n  }\n  /**\n   * Keeps the object to render. It doesn't have to be\n   * rendered immediately.\n   * @param {PIXI.DisplayObject} _object - The object to render.\n   */\n  render(_object) {}\n}\nexport { ObjectRenderer };","map":{"version":3,"names":["ObjectRenderer","constructor","renderer","flush","destroy","start","stop","render","_object"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/batch/ObjectRenderer.ts"],"sourcesContent":["import type { Renderer } from '../Renderer';\nimport type { ISystem } from '../system/ISystem';\n\n/**\n * Base for a common object renderer that can be used as a\n * system renderer plugin.\n * @memberof PIXI\n */\nexport class ObjectRenderer implements ISystem\n{\n    /** The renderer this manager works for. */\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this manager works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /** Stub method that should be used to empty the current batch by rendering objects now. */\n    flush(): void\n    {\n        // flush!\n    }\n\n    /** Generic destruction method that frees all resources. This should be called by subclasses. */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Stub method that initializes any state required before\n     * rendering starts. It is different from the `prerender`\n     * signal, which occurs every frame, in that it is called\n     * whenever an object requests _this_ renderer specifically.\n     */\n    start(): void\n    {\n        // set the shader..\n    }\n\n    /** Stops the renderer. It should free up any state and become dormant. */\n    stop(): void\n    {\n        this.flush();\n    }\n\n    /**\n     * Keeps the object to render. It doesn't have to be\n     * rendered immediately.\n     * @param {PIXI.DisplayObject} _object - The object to render.\n     */\n    render(_object: any): void // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    {\n        // render the object\n    }\n}\n"],"mappings":"AAQO,MAAMA,cAAA,CACb;EAAA;AAAA;AAAA;EAOIC,YAAYC,QAAA,EACZ;IACI,KAAKA,QAAA,GAAWA,QAAA;EACpB;EAAA;EAGAC,MAAA,EACA,CAEA;EAAA;EAGAC,QAAA,EACA;IACI,KAAKF,QAAA,GAAW;EACpB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAG,MAAA,EACA,CAEA;EAAA;EAGAC,KAAA,EACA;IACI,KAAKH,KAAA,CAAM;EACf;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAI,OAAOC,OAAA,EACP,CAEA;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}