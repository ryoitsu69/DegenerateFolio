{"ast":null,"code":"import WorkerInstance from '../../../_virtual/ktx.worker.mjs';\nimport { ktxTranscoderUrls } from '../utils/setKTXTranscoderPath.mjs';\n\"use strict\";\nlet ktxWorker;\nconst urlHash = {};\nfunction getKTX2Worker(supportedTextures) {\n  if (!ktxWorker) {\n    ktxWorker = new WorkerInstance().worker;\n    ktxWorker.onmessage = messageEvent => {\n      const {\n        success,\n        url,\n        textureOptions\n      } = messageEvent.data;\n      if (!success) {\n        console.warn(\"Failed to load KTX texture\", url);\n      }\n      urlHash[url](textureOptions);\n    };\n    ktxWorker.postMessage({\n      type: \"init\",\n      jsUrl: ktxTranscoderUrls.jsUrl,\n      wasmUrl: ktxTranscoderUrls.wasmUrl,\n      supportedTextures\n    });\n  }\n  return ktxWorker;\n}\nfunction loadKTX2onWorker(url, supportedTextures) {\n  const ktxWorker2 = getKTX2Worker(supportedTextures);\n  return new Promise(resolve => {\n    urlHash[url] = resolve;\n    ktxWorker2.postMessage({\n      type: \"load\",\n      url\n    });\n  });\n}\nexport { loadKTX2onWorker };","map":{"version":3,"names":["ktxWorker","urlHash","getKTX2Worker","supportedTextures","WorkerInstance","worker","onmessage","messageEvent","success","url","textureOptions","data","console","warn","postMessage","type","jsUrl","ktxTranscoderUrls","wasmUrl","loadKTX2onWorker","ktxWorker2","Promise","resolve"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/compressed-textures/ktx2/worker/loadKTX2onWorker.ts"],"sourcesContent":["import KTXWorker from 'worker:./ktx.worker.ts';\nimport { ktxTranscoderUrls } from '../utils/setKTXTranscoderPath';\n\nimport type { TEXTURE_FORMATS } from '../../../rendering/renderers/shared/texture/const';\nimport type { TextureSourceOptions } from '../../../rendering/renderers/shared/texture/sources/TextureSource';\n\nlet ktxWorker: Worker;\nconst urlHash: Record<string, (value: any) => void> = {};\n\nfunction getKTX2Worker(supportedTextures: TEXTURE_FORMATS[]): Worker\n{\n    if (!ktxWorker)\n    {\n        ktxWorker = new KTXWorker().worker;\n\n        ktxWorker.onmessage = (messageEvent) =>\n        {\n            const { success, url, textureOptions } = messageEvent.data;\n\n            if (!success)\n            {\n                console.warn('Failed to load KTX texture', url);\n            }\n\n            urlHash[url](textureOptions);\n        };\n\n        ktxWorker.postMessage({\n            type: 'init',\n            jsUrl: ktxTranscoderUrls.jsUrl,\n            wasmUrl: ktxTranscoderUrls.wasmUrl,\n            supportedTextures\n        });\n    }\n\n    return ktxWorker;\n}\n\nexport function loadKTX2onWorker(\n    url: string,\n    supportedTextures: TEXTURE_FORMATS[]\n): Promise<TextureSourceOptions>\n{\n    const ktxWorker = getKTX2Worker(supportedTextures);\n\n    return new Promise((resolve) =>\n    {\n        urlHash[url] = resolve;\n\n        ktxWorker.postMessage({ type: 'load', url });\n    });\n}\n"],"mappings":";;;AAMA,IAAIA,SAAA;AACJ,MAAMC,OAAA,GAAgD,EAAC;AAEvD,SAASC,cAAcC,iBACvB;EACI,IAAI,CAACH,SACL;IACgBA,SAAA,OAAII,cAAA,EAAY,CAAAC,MAAA;IAElBL,SAAA,CAAAM,SAAA,GAAaC,YACvB;MACI,MAAM;QAAEC,OAAA;QAASC,GAAK;QAAAC;MAAA,IAAmBH,YAAa,CAAAI,IAAA;MAEtD,IAAI,CAACH,OACL;QACYI,OAAA,CAAAC,IAAA,CAAK,8BAA8BJ,GAAG;MAAA;MAG1CR,OAAA,CAAAQ,GAAG,EAAEC,cAAc;IAAA,CAC/B;IAEAV,SAAA,CAAUc,WAAY;MAClBC,IAAM;MACNC,KAAA,EAAOC,iBAAkB,CAAAD,KAAA;MACzBE,OAAA,EAASD,iBAAkB,CAAAC,OAAA;MAC3Bf;IAAA,CACH;EAAA;EAGE,OAAAH,SAAA;AACX;AAEgB,SAAAmB,iBACZV,GAAA,EACAN,iBAEJ;EACU,MAAAiB,UAAA,GAAYlB,aAAA,CAAcC,iBAAiB;EAE1C,WAAIkB,OAAQ,CAACC,OACpB;IACIrB,OAAA,CAAQQ,GAAG,CAAI,GAAAa,OAAA;IAEfF,UAAA,CAAUN,WAAY;MAAEC,IAAM;MAAQN;IAAA,CAAK;EAAA,CAC9C;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}