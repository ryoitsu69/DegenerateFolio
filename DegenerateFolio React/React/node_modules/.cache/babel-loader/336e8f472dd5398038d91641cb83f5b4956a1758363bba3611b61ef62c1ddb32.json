{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst path = require('path');\nconst cp = require('child_process');\nconst logging = require('../lib/logging');\n\n/**\n * returns path to java or 'java' string if JAVA_HOME does not exist in env obj\n * @returns {string}\n */\nfunction getJavaPath() {\n  return process.env['JAVA_HOME'] ? path.join(process.env['JAVA_HOME'], 'bin/java') : 'java';\n}\n\n/**\n * @param {string} seleniumStandalonePath path to standalone server\n * @returns {boolean}\n */\nfunction isSelenium3x(seleniumStandalonePath) {\n  const javaPath = getJavaPath();\n  const execRes = cp.execFileSync(javaPath, ['-jar', seleniumStandalonePath, '--version']);\n  return execRes.toString().trim().startsWith('Selenium server version: 3');\n}\n\n/**\n * @param {string} seleniumStandalonePath path to standalone server\n * @param {Array.<string>} args spawn arguments array\n * returns formatted args based on selenium standalone server version\n * @returns {Array.<string>}\n */\nfunction formatSpawnArgs(seleniumStandalonePath, args) {\n  if (isSelenium3x(seleniumStandalonePath)) {\n    logging.getLogger(logging.Type.SERVER).warning('Deprecation: Support for Standalone Server 3.x will be removed soon. Please update to version 4.x');\n    return args;\n  }\n  const standaloneArg = 'standalone';\n  const port3xArgFormat = '-port';\n  const port4xArgFormat = '--port';\n  let formattedArgs = Array.from(args);\n  const standaloneArgIndex = formattedArgs.findIndex(arg => arg === seleniumStandalonePath);\n  const v3portArgFormat = formattedArgs.findIndex(arg => arg === port3xArgFormat);\n\n  // old v3x port arg format was -port, new v4x port arg format is --port\n  if (v3portArgFormat !== -1) {\n    formattedArgs[v3portArgFormat] = port4xArgFormat;\n  }\n\n  // 'standalone' arg should be right after jar file path\n  // in case if it is already in place - returns args\n  if (formattedArgs[standaloneArgIndex + 1] === standaloneArg) return formattedArgs;\n\n  // insert 'standalone' right after jar file path\n  formattedArgs.splice(standaloneArgIndex + 1, 0, standaloneArg);\n  return formattedArgs;\n}\n\n// PUBLIC API\nmodule.exports = {\n  getJavaPath,\n  isSelenium3x,\n  formatSpawnArgs\n};","map":{"version":3,"names":["path","require","cp","logging","getJavaPath","process","env","join","isSelenium3x","seleniumStandalonePath","javaPath","execRes","execFileSync","toString","trim","startsWith","formatSpawnArgs","args","getLogger","Type","SERVER","warning","standaloneArg","port3xArgFormat","port4xArgFormat","formattedArgs","Array","from","standaloneArgIndex","findIndex","arg","v3portArgFormat","splice","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/remote/util.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\nconst path = require('path')\nconst cp = require('child_process')\nconst logging = require('../lib/logging')\n\n/**\n * returns path to java or 'java' string if JAVA_HOME does not exist in env obj\n * @returns {string}\n */\nfunction getJavaPath() {\n  return process.env['JAVA_HOME'] ? path.join(process.env['JAVA_HOME'], 'bin/java') : 'java'\n}\n\n/**\n * @param {string} seleniumStandalonePath path to standalone server\n * @returns {boolean}\n */\nfunction isSelenium3x(seleniumStandalonePath) {\n  const javaPath = getJavaPath()\n\n  const execRes = cp.execFileSync(javaPath, ['-jar', seleniumStandalonePath, '--version'])\n\n  return execRes.toString().trim().startsWith('Selenium server version: 3')\n}\n\n/**\n * @param {string} seleniumStandalonePath path to standalone server\n * @param {Array.<string>} args spawn arguments array\n * returns formatted args based on selenium standalone server version\n * @returns {Array.<string>}\n */\nfunction formatSpawnArgs(seleniumStandalonePath, args) {\n  if (isSelenium3x(seleniumStandalonePath)) {\n    logging\n      .getLogger(logging.Type.SERVER)\n      .warning('Deprecation: Support for Standalone Server 3.x will be removed soon. Please update to version 4.x')\n    return args\n  }\n\n  const standaloneArg = 'standalone'\n  const port3xArgFormat = '-port'\n  const port4xArgFormat = '--port'\n\n  let formattedArgs = Array.from(args)\n\n  const standaloneArgIndex = formattedArgs.findIndex((arg) => arg === seleniumStandalonePath)\n  const v3portArgFormat = formattedArgs.findIndex((arg) => arg === port3xArgFormat)\n\n  // old v3x port arg format was -port, new v4x port arg format is --port\n  if (v3portArgFormat !== -1) {\n    formattedArgs[v3portArgFormat] = port4xArgFormat\n  }\n\n  // 'standalone' arg should be right after jar file path\n  // in case if it is already in place - returns args\n  if (formattedArgs[standaloneArgIndex + 1] === standaloneArg) return formattedArgs\n\n  // insert 'standalone' right after jar file path\n  formattedArgs.splice(standaloneArgIndex + 1, 0, standaloneArg)\n\n  return formattedArgs\n}\n\n// PUBLIC API\nmodule.exports = {\n  getJavaPath,\n  isSelenium3x,\n  formatSpawnArgs,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,EAAE,GAAGD,OAAO,CAAC,eAAe,CAAC;AACnC,MAAME,OAAO,GAAGF,OAAO,CAAC,gBAAgB,CAAC;;AAEzC;AACA;AACA;AACA;AACA,SAASG,WAAWA,CAAA,EAAG;EACrB,OAAOC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,GAAGN,IAAI,CAACO,IAAI,CAACF,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,EAAE,UAAU,CAAC,GAAG,MAAM;AAC5F;;AAEA;AACA;AACA;AACA;AACA,SAASE,YAAYA,CAACC,sBAAsB,EAAE;EAC5C,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAMO,OAAO,GAAGT,EAAE,CAACU,YAAY,CAACF,QAAQ,EAAE,CAAC,MAAM,EAAED,sBAAsB,EAAE,WAAW,CAAC,CAAC;EAExF,OAAOE,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,UAAU,CAAC,4BAA4B,CAAC;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACP,sBAAsB,EAAEQ,IAAI,EAAE;EACrD,IAAIT,YAAY,CAACC,sBAAsB,CAAC,EAAE;IACxCN,OAAO,CACJe,SAAS,CAACf,OAAO,CAACgB,IAAI,CAACC,MAAM,CAAC,CAC9BC,OAAO,CAAC,mGAAmG,CAAC;IAC/G,OAAOJ,IAAI;EACb;EAEA,MAAMK,aAAa,GAAG,YAAY;EAClC,MAAMC,eAAe,GAAG,OAAO;EAC/B,MAAMC,eAAe,GAAG,QAAQ;EAEhC,IAAIC,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACV,IAAI,CAAC;EAEpC,MAAMW,kBAAkB,GAAGH,aAAa,CAACI,SAAS,CAAEC,GAAG,IAAKA,GAAG,KAAKrB,sBAAsB,CAAC;EAC3F,MAAMsB,eAAe,GAAGN,aAAa,CAACI,SAAS,CAAEC,GAAG,IAAKA,GAAG,KAAKP,eAAe,CAAC;;EAEjF;EACA,IAAIQ,eAAe,KAAK,CAAC,CAAC,EAAE;IAC1BN,aAAa,CAACM,eAAe,CAAC,GAAGP,eAAe;EAClD;;EAEA;EACA;EACA,IAAIC,aAAa,CAACG,kBAAkB,GAAG,CAAC,CAAC,KAAKN,aAAa,EAAE,OAAOG,aAAa;;EAEjF;EACAA,aAAa,CAACO,MAAM,CAACJ,kBAAkB,GAAG,CAAC,EAAE,CAAC,EAAEN,aAAa,CAAC;EAE9D,OAAOG,aAAa;AACtB;;AAEA;AACAQ,MAAM,CAACC,OAAO,GAAG;EACf9B,WAAW;EACXI,YAAY;EACZQ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}