{"ast":null,"code":"const typesAlias = {\n  assets: {\n    Approval: 'AssetApproval',\n    ApprovalKey: 'AssetApprovalKey',\n    Balance: 'TAssetBalance',\n    DestroyWitness: 'AssetDestroyWitness'\n  },\n  babe: {\n    EquivocationProof: 'BabeEquivocationProof'\n  },\n  balances: {\n    Status: 'BalanceStatus'\n  },\n  beefy: {\n    AuthorityId: 'BeefyId'\n  },\n  contracts: {\n    StorageKey: 'ContractStorageKey'\n  },\n  electionProviderMultiPhase: {\n    Phase: 'ElectionPhase'\n  },\n  ethereum: {\n    Block: 'EthBlock',\n    Header: 'EthHeader',\n    Receipt: 'EthReceipt',\n    Transaction: 'EthTransaction',\n    TransactionStatus: 'EthTransactionStatus'\n  },\n  evm: {\n    Account: 'EvmAccount',\n    Log: 'EvmLog',\n    Vicinity: 'EvmVicinity'\n  },\n  grandpa: {\n    Equivocation: 'GrandpaEquivocation',\n    EquivocationProof: 'GrandpaEquivocationProof'\n  },\n  identity: {\n    Judgement: 'IdentityJudgement'\n  },\n  inclusion: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  paraDisputes: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  paraInclusion: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  paraScheduler: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  paraShared: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  parachains: {\n    Id: 'ParaId'\n  },\n  parasDisputes: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  parasInclusion: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  parasScheduler: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  parasShared: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  proposeParachain: {\n    Proposal: 'ParachainProposal'\n  },\n  proxy: {\n    Announcement: 'ProxyAnnouncement'\n  },\n  scheduler: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  shared: {\n    ValidatorIndex: 'ParaValidatorIndex'\n  },\n  society: {\n    Judgement: 'SocietyJudgement',\n    Vote: 'SocietyVote'\n  },\n  staking: {\n    Compact: 'CompactAssignments'\n  },\n  treasury: {\n    Proposal: 'TreasuryProposal'\n  },\n  xcm: {\n    AssetId: 'XcmAssetId'\n  },\n  xcmPallet: {\n    AssetId: 'XcmAssetId'\n  }\n};\n/**\n * @description Get types for specific modules (metadata override)\n */\nexport function getAliasTypes({\n  knownTypes\n}, section) {\n  return {\n    ...(typesAlias[section] ?? {}),\n    ...(knownTypes.typesAlias?.[section] ?? {})\n  };\n}","map":{"version":3,"names":["typesAlias","assets","Approval","ApprovalKey","Balance","DestroyWitness","babe","EquivocationProof","balances","Status","beefy","AuthorityId","contracts","StorageKey","electionProviderMultiPhase","Phase","ethereum","Block","Header","Receipt","Transaction","TransactionStatus","evm","Account","Log","Vicinity","grandpa","Equivocation","identity","Judgement","inclusion","ValidatorIndex","paraDisputes","paraInclusion","paraScheduler","paraShared","parachains","Id","parasDisputes","parasInclusion","parasScheduler","parasShared","proposeParachain","Proposal","proxy","Announcement","scheduler","shared","society","Vote","staking","Compact","treasury","xcm","AssetId","xcmPallet","getAliasTypes","knownTypes","section"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/interfaces/alias.js"],"sourcesContent":["const typesAlias = {\n    assets: {\n        Approval: 'AssetApproval',\n        ApprovalKey: 'AssetApprovalKey',\n        Balance: 'TAssetBalance',\n        DestroyWitness: 'AssetDestroyWitness'\n    },\n    babe: {\n        EquivocationProof: 'BabeEquivocationProof'\n    },\n    balances: {\n        Status: 'BalanceStatus'\n    },\n    beefy: {\n        AuthorityId: 'BeefyId'\n    },\n    contracts: {\n        StorageKey: 'ContractStorageKey'\n    },\n    electionProviderMultiPhase: {\n        Phase: 'ElectionPhase'\n    },\n    ethereum: {\n        Block: 'EthBlock',\n        Header: 'EthHeader',\n        Receipt: 'EthReceipt',\n        Transaction: 'EthTransaction',\n        TransactionStatus: 'EthTransactionStatus'\n    },\n    evm: {\n        Account: 'EvmAccount',\n        Log: 'EvmLog',\n        Vicinity: 'EvmVicinity'\n    },\n    grandpa: {\n        Equivocation: 'GrandpaEquivocation',\n        EquivocationProof: 'GrandpaEquivocationProof'\n    },\n    identity: {\n        Judgement: 'IdentityJudgement'\n    },\n    inclusion: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    paraDisputes: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    paraInclusion: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    paraScheduler: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    paraShared: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    parachains: {\n        Id: 'ParaId'\n    },\n    parasDisputes: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    parasInclusion: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    parasScheduler: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    parasShared: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    proposeParachain: {\n        Proposal: 'ParachainProposal'\n    },\n    proxy: {\n        Announcement: 'ProxyAnnouncement'\n    },\n    scheduler: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    shared: {\n        ValidatorIndex: 'ParaValidatorIndex'\n    },\n    society: {\n        Judgement: 'SocietyJudgement',\n        Vote: 'SocietyVote'\n    },\n    staking: {\n        Compact: 'CompactAssignments'\n    },\n    treasury: {\n        Proposal: 'TreasuryProposal'\n    },\n    xcm: {\n        AssetId: 'XcmAssetId'\n    },\n    xcmPallet: {\n        AssetId: 'XcmAssetId'\n    }\n};\n/**\n * @description Get types for specific modules (metadata override)\n */\nexport function getAliasTypes({ knownTypes }, section) {\n    return {\n        ...(typesAlias[section] ?? {}),\n        ...(knownTypes.typesAlias?.[section] ?? {})\n    };\n}\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG;EACfC,MAAM,EAAE;IACJC,QAAQ,EAAE,eAAe;IACzBC,WAAW,EAAE,kBAAkB;IAC/BC,OAAO,EAAE,eAAe;IACxBC,cAAc,EAAE;EACpB,CAAC;EACDC,IAAI,EAAE;IACFC,iBAAiB,EAAE;EACvB,CAAC;EACDC,QAAQ,EAAE;IACNC,MAAM,EAAE;EACZ,CAAC;EACDC,KAAK,EAAE;IACHC,WAAW,EAAE;EACjB,CAAC;EACDC,SAAS,EAAE;IACPC,UAAU,EAAE;EAChB,CAAC;EACDC,0BAA0B,EAAE;IACxBC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACNC,KAAK,EAAE,UAAU;IACjBC,MAAM,EAAE,WAAW;IACnBC,OAAO,EAAE,YAAY;IACrBC,WAAW,EAAE,gBAAgB;IAC7BC,iBAAiB,EAAE;EACvB,CAAC;EACDC,GAAG,EAAE;IACDC,OAAO,EAAE,YAAY;IACrBC,GAAG,EAAE,QAAQ;IACbC,QAAQ,EAAE;EACd,CAAC;EACDC,OAAO,EAAE;IACLC,YAAY,EAAE,qBAAqB;IACnCpB,iBAAiB,EAAE;EACvB,CAAC;EACDqB,QAAQ,EAAE;IACNC,SAAS,EAAE;EACf,CAAC;EACDC,SAAS,EAAE;IACPC,cAAc,EAAE;EACpB,CAAC;EACDC,YAAY,EAAE;IACVD,cAAc,EAAE;EACpB,CAAC;EACDE,aAAa,EAAE;IACXF,cAAc,EAAE;EACpB,CAAC;EACDG,aAAa,EAAE;IACXH,cAAc,EAAE;EACpB,CAAC;EACDI,UAAU,EAAE;IACRJ,cAAc,EAAE;EACpB,CAAC;EACDK,UAAU,EAAE;IACRC,EAAE,EAAE;EACR,CAAC;EACDC,aAAa,EAAE;IACXP,cAAc,EAAE;EACpB,CAAC;EACDQ,cAAc,EAAE;IACZR,cAAc,EAAE;EACpB,CAAC;EACDS,cAAc,EAAE;IACZT,cAAc,EAAE;EACpB,CAAC;EACDU,WAAW,EAAE;IACTV,cAAc,EAAE;EACpB,CAAC;EACDW,gBAAgB,EAAE;IACdC,QAAQ,EAAE;EACd,CAAC;EACDC,KAAK,EAAE;IACHC,YAAY,EAAE;EAClB,CAAC;EACDC,SAAS,EAAE;IACPf,cAAc,EAAE;EACpB,CAAC;EACDgB,MAAM,EAAE;IACJhB,cAAc,EAAE;EACpB,CAAC;EACDiB,OAAO,EAAE;IACLnB,SAAS,EAAE,kBAAkB;IAC7BoB,IAAI,EAAE;EACV,CAAC;EACDC,OAAO,EAAE;IACLC,OAAO,EAAE;EACb,CAAC;EACDC,QAAQ,EAAE;IACNT,QAAQ,EAAE;EACd,CAAC;EACDU,GAAG,EAAE;IACDC,OAAO,EAAE;EACb,CAAC;EACDC,SAAS,EAAE;IACPD,OAAO,EAAE;EACb;AACJ,CAAC;AACD;AACA;AACA;AACA,OAAO,SAASE,aAAaA,CAAC;EAAEC;AAAW,CAAC,EAAEC,OAAO,EAAE;EACnD,OAAO;IACH,IAAI1D,UAAU,CAAC0D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9B,IAAID,UAAU,CAACzD,UAAU,GAAG0D,OAAO,CAAC,IAAI,CAAC,CAAC;EAC9C,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}