{"ast":null,"code":"import { TEXTURE_FORMAT_BLOCK_SIZE, DDS, DXGI_TO_TEXTURE_FORMAT, FOURCC_TO_TEXTURE_FORMAT } from './const.mjs';\n\"use strict\";\nfunction parseDDS(arrayBuffer, supportedFormats) {\n  const {\n    format,\n    fourCC,\n    width,\n    height,\n    dataOffset,\n    mipmapCount\n  } = parseDDSHeader(arrayBuffer);\n  if (!supportedFormats.includes(format)) {\n    throw new Error(`Unsupported texture format: ${fourCC} ${format}, supported: ${supportedFormats}`);\n  }\n  if (mipmapCount <= 1) {\n    return {\n      format,\n      width,\n      height,\n      resource: [new Uint8Array(arrayBuffer, dataOffset)],\n      alphaMode: \"no-premultiply-alpha\"\n    };\n  }\n  const levelBuffers = getMipmapLevelBuffers(format, width, height, dataOffset, mipmapCount, arrayBuffer);\n  const textureOptions = {\n    format,\n    width,\n    height,\n    resource: levelBuffers,\n    alphaMode: \"no-premultiply-alpha\"\n  };\n  return textureOptions;\n}\nfunction getMipmapLevelBuffers(format, width, height, dataOffset, mipmapCount, arrayBuffer) {\n  const levelBuffers = [];\n  const blockBytes = TEXTURE_FORMAT_BLOCK_SIZE[format];\n  let mipWidth = width;\n  let mipHeight = height;\n  let offset = dataOffset;\n  for (let level = 0; level < mipmapCount; ++level) {\n    const byteLength = blockBytes ? Math.max(4, mipWidth) / 4 * Math.max(4, mipHeight) / 4 * blockBytes : mipWidth * mipHeight * 4;\n    const levelBuffer = new Uint8Array(arrayBuffer, offset, byteLength);\n    levelBuffers.push(levelBuffer);\n    offset += byteLength;\n    mipWidth = Math.max(mipWidth >> 1, 1);\n    mipHeight = Math.max(mipHeight >> 1, 1);\n  }\n  return levelBuffers;\n}\nfunction parseDDSHeader(buffer) {\n  const header = new Uint32Array(buffer, 0, DDS.HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n  if (header[DDS.HEADER_FIELDS.MAGIC] !== DDS.MAGIC_VALUE) {\n    throw new Error(\"Invalid magic number in DDS header\");\n  }\n  const height = header[DDS.HEADER_FIELDS.HEIGHT];\n  const width = header[DDS.HEADER_FIELDS.WIDTH];\n  const mipmapCount = Math.max(1, header[DDS.HEADER_FIELDS.MIPMAP_COUNT]);\n  const flags = header[DDS.HEADER_FIELDS.PF_FLAGS];\n  const fourCC = header[DDS.HEADER_FIELDS.FOURCC];\n  const format = getTextureFormat(header, flags, fourCC, buffer);\n  const dataOffset = DDS.MAGIC_SIZE + DDS.HEADER_SIZE + (fourCC === DDS.D3DFMT.DX10 ? DDS.HEADER_DX10_SIZE : 0);\n  return {\n    format,\n    fourCC,\n    width,\n    height,\n    dataOffset,\n    mipmapCount\n  };\n}\nfunction getTextureFormat(header, flags, fourCC, buffer) {\n  if (flags & DDS.PIXEL_FORMAT_FLAGS.FOURCC) {\n    if (fourCC === DDS.D3DFMT.DX10) {\n      const dx10Header = new Uint32Array(buffer, DDS.MAGIC_SIZE + DDS.HEADER_SIZE,\n      // there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n      DDS.HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n      const miscFlag = dx10Header[DDS.HEADER_DX10_FIELDS.MISC_FLAG];\n      if (miscFlag === DDS.RESOURCE_MISC_TEXTURECUBE) {\n        throw new Error(\"DDSParser does not support cubemap textures\");\n      }\n      const resourceDimension = dx10Header[DDS.HEADER_DX10_FIELDS.RESOURCE_DIMENSION];\n      if (resourceDimension === DDS.D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D) {\n        throw new Error(\"DDSParser does not supported 3D texture data\");\n      }\n      const dxgiFormat = dx10Header[DDS.HEADER_DX10_FIELDS.DXGI_FORMAT];\n      if (dxgiFormat in DXGI_TO_TEXTURE_FORMAT) {\n        return DXGI_TO_TEXTURE_FORMAT[dxgiFormat];\n      }\n      throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n    }\n    if (fourCC in FOURCC_TO_TEXTURE_FORMAT) {\n      return FOURCC_TO_TEXTURE_FORMAT[fourCC];\n    }\n    throw new Error(`DDSParser cannot parse texture data with fourCC format ${fourCC}`);\n  }\n  if (flags & DDS.PIXEL_FORMAT_FLAGS.RGB || flags & DDS.PIXEL_FORMAT_FLAGS.RGBA) {\n    return getUncompressedTextureFormat(header);\n  }\n  if (flags & DDS.PIXEL_FORMAT_FLAGS.YUV) {\n    throw new Error(\"DDSParser does not supported YUV uncompressed texture data.\");\n  }\n  if (flags & DDS.PIXEL_FORMAT_FLAGS.LUMINANCE || flags & DDS.PIXEL_FORMAT_FLAGS.LUMINANCEA) {\n    throw new Error(\"DDSParser does not support single-channel (lumninance) texture data!\");\n  }\n  if (flags & DDS.PIXEL_FORMAT_FLAGS.ALPHA || flags & DDS.PIXEL_FORMAT_FLAGS.ALPHAPIXELS) {\n    throw new Error(\"DDSParser does not support single-channel (alpha) texture data!\");\n  }\n  throw new Error(\"DDSParser failed to load a texture file due to an unknown reason!\");\n}\nfunction getUncompressedTextureFormat(header) {\n  const bitCount = header[DDS.HEADER_FIELDS.RGB_BITCOUNT];\n  const rBitMask = header[DDS.HEADER_FIELDS.R_BIT_MASK];\n  const gBitMask = header[DDS.HEADER_FIELDS.G_BIT_MASK];\n  const bBitMask = header[DDS.HEADER_FIELDS.B_BIT_MASK];\n  const aBitMask = header[DDS.HEADER_FIELDS.A_BIT_MASK];\n  switch (bitCount) {\n    case 32:\n      if (rBitMask === 255 && gBitMask === 65280 && bBitMask === 16711680 && aBitMask === 4278190080) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UNORM];\n      }\n      if (rBitMask === 16711680 && gBitMask === 65280 && bBitMask === 255 && aBitMask === 4278190080) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B8G8R8A8_UNORM];\n      }\n      if (rBitMask === 1072693248 && gBitMask === 1047552 && bBitMask === 1023 && aBitMask === 3221225472) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R10G10B10A2_UNORM];\n      }\n      if (rBitMask === 65535 && gBitMask === 4294901760 && bBitMask === 0 && aBitMask === 0) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R16G16_UNORM];\n      }\n      if (rBitMask === 4294967295 && gBitMask === 0 && bBitMask === 0 && aBitMask === 0) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R32_FLOAT];\n      }\n      break;\n    case 24:\n      if (rBitMask === 16711680 && gBitMask === 65280 && bBitMask === 255 && aBitMask === 32768) {}\n      break;\n    case 16:\n      if (rBitMask === 31744 && gBitMask === 992 && bBitMask === 31 && aBitMask === 32768) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B5G5R5A1_UNORM];\n      }\n      if (rBitMask === 63488 && gBitMask === 2016 && bBitMask === 31 && aBitMask === 0) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B5G6R5_UNORM];\n      }\n      if (rBitMask === 3840 && gBitMask === 240 && bBitMask === 15 && aBitMask === 61440) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B4G4R4A4_UNORM];\n      }\n      if (rBitMask === 255 && gBitMask === 0 && bBitMask === 0 && aBitMask === 65280) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R8G8_UNORM];\n      }\n      if (rBitMask === 65535 && gBitMask === 0 && bBitMask === 0 && aBitMask === 0) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R16_UNORM];\n      }\n      break;\n    case 8:\n      if (rBitMask === 255 && gBitMask === 0 && bBitMask === 0 && aBitMask === 0) {\n        return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R8_UNORM];\n      }\n      break;\n  }\n  throw new Error(`DDSParser does not support uncompressed texture with configuration:\n                bitCount = ${bitCount}, rBitMask = ${rBitMask}, gBitMask = ${gBitMask}, aBitMask = ${aBitMask}`);\n}\nexport { parseDDS };","map":{"version":3,"names":["parseDDS","arrayBuffer","supportedFormats","format","fourCC","width","height","dataOffset","mipmapCount","parseDDSHeader","includes","Error","resource","Uint8Array","alphaMode","levelBuffers","getMipmapLevelBuffers","textureOptions","blockBytes","TEXTURE_FORMAT_BLOCK_SIZE","mipWidth","mipHeight","offset","level","byteLength","Math","max","levelBuffer","push","buffer","header","Uint32Array","DDS","HEADER_SIZE","BYTES_PER_ELEMENT","HEADER_FIELDS","MAGIC","MAGIC_VALUE","HEIGHT","WIDTH","MIPMAP_COUNT","flags","PF_FLAGS","FOURCC","getTextureFormat","MAGIC_SIZE","D3DFMT","DX10","HEADER_DX10_SIZE","PIXEL_FORMAT_FLAGS","dx10Header","miscFlag","HEADER_DX10_FIELDS","MISC_FLAG","RESOURCE_MISC_TEXTURECUBE","resourceDimension","RESOURCE_DIMENSION","D3D10_RESOURCE_DIMENSION","DDS_DIMENSION_TEXTURE3D","dxgiFormat","DXGI_FORMAT","DXGI_TO_TEXTURE_FORMAT","FOURCC_TO_TEXTURE_FORMAT","RGB","RGBA","getUncompressedTextureFormat","YUV","LUMINANCE","LUMINANCEA","ALPHA","ALPHAPIXELS","bitCount","RGB_BITCOUNT","rBitMask","R_BIT_MASK","gBitMask","G_BIT_MASK","bBitMask","B_BIT_MASK","aBitMask","A_BIT_MASK","DXGI_FORMAT_R8G8B8A8_UNORM","DXGI_FORMAT_B8G8R8A8_UNORM","DXGI_FORMAT_R10G10B10A2_UNORM","DXGI_FORMAT_R16G16_UNORM","DXGI_FORMAT_R32_FLOAT","DXGI_FORMAT_B5G5R5A1_UNORM","DXGI_FORMAT_B5G6R5_UNORM","DXGI_FORMAT_B4G4R4A4_UNORM","DXGI_FORMAT_R8G8_UNORM","DXGI_FORMAT_R16_UNORM","DXGI_FORMAT_R8_UNORM"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/compressed-textures/dds/parseDDS.ts"],"sourcesContent":["import { DDS, DXGI_TO_TEXTURE_FORMAT, FOURCC_TO_TEXTURE_FORMAT, TEXTURE_FORMAT_BLOCK_SIZE } from './const';\n\nimport type { TEXTURE_FORMATS } from '../../rendering/renderers/shared/texture/const';\nimport type { TextureSourceOptions } from '../../rendering/renderers/shared/texture/sources/TextureSource';\n\nexport function parseDDS(arrayBuffer: ArrayBuffer, supportedFormats: TEXTURE_FORMATS[]): TextureSourceOptions<Uint8Array[]>\n{\n    const {\n        format,\n        fourCC,\n        width,\n        height,\n        dataOffset,\n        mipmapCount,\n    } = parseDDSHeader(arrayBuffer);\n\n    if (!supportedFormats.includes(format))\n    {\n        throw new Error(`Unsupported texture format: ${fourCC} ${format}, supported: ${supportedFormats}`);\n    }\n\n    if (mipmapCount <= 1)\n    { // No need bothering with the imageSize calculation!\n        return {\n            format,\n            width,\n            height,\n            resource: [new Uint8Array(arrayBuffer, dataOffset)],\n            alphaMode: 'no-premultiply-alpha',\n        } as TextureSourceOptions;\n    }\n\n    const levelBuffers = getMipmapLevelBuffers(format, width, height, dataOffset, mipmapCount, arrayBuffer);\n\n    const textureOptions: TextureSourceOptions = {\n        format,\n        width,\n        height,\n        resource: levelBuffers,\n        alphaMode: 'no-premultiply-alpha'\n    };\n\n    return textureOptions;\n}\n\nfunction getMipmapLevelBuffers(format: TEXTURE_FORMATS, width: number, height: number,\n    dataOffset: any, mipmapCount: number, arrayBuffer: ArrayBuffer)\n{\n    const levelBuffers = [];\n    const blockBytes = TEXTURE_FORMAT_BLOCK_SIZE[format];\n\n    let mipWidth = width;\n    let mipHeight = height;\n    let offset = dataOffset;\n\n    for (let level = 0; level < mipmapCount; ++level)\n    {\n        const byteLength = blockBytes\n            ? Math.max(4, mipWidth) / 4 * Math.max(4, mipHeight) / 4 * blockBytes\n            : mipWidth * mipHeight * 4;\n\n        const levelBuffer = new Uint8Array(arrayBuffer, offset, byteLength);\n\n        levelBuffers.push(levelBuffer);\n\n        offset += byteLength;\n\n        mipWidth = Math.max(mipWidth >> 1, 1);\n        mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n\n    return levelBuffers;\n}\n\nfunction parseDDSHeader(buffer: ArrayBuffer)\n{\n    const header = new Uint32Array(buffer, 0, DDS.HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n    if (header[DDS.HEADER_FIELDS.MAGIC] !== DDS.MAGIC_VALUE)\n    {\n        throw new Error('Invalid magic number in DDS header');\n    }\n\n    // DDS header fields\n    const height = header[DDS.HEADER_FIELDS.HEIGHT];\n    const width = header[DDS.HEADER_FIELDS.WIDTH];\n    const mipmapCount = Math.max(1, header[DDS.HEADER_FIELDS.MIPMAP_COUNT]);\n    const flags = header[DDS.HEADER_FIELDS.PF_FLAGS];\n    const fourCC = header[DDS.HEADER_FIELDS.FOURCC];\n    const format = getTextureFormat(header, flags, fourCC, buffer);\n\n    const dataOffset = DDS.MAGIC_SIZE + DDS.HEADER_SIZE\n        + ((fourCC === DDS.D3DFMT.DX10) ? DDS.HEADER_DX10_SIZE : 0);\n\n    return {\n        format,\n        fourCC,\n        width,\n        height,\n        dataOffset,\n        mipmapCount\n    };\n}\n\nfunction getTextureFormat(header: Uint32Array, flags: number, fourCC: number, buffer: ArrayBuffer)\n{\n    if (flags & DDS.PIXEL_FORMAT_FLAGS.FOURCC)\n    {\n        if (fourCC === DDS.D3DFMT.DX10)\n        {\n            const dx10Header = new Uint32Array(\n                buffer,\n                DDS.MAGIC_SIZE + DDS.HEADER_SIZE, // there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n                DDS.HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n            const miscFlag = dx10Header[DDS.HEADER_DX10_FIELDS.MISC_FLAG];\n\n            if (miscFlag === DDS.RESOURCE_MISC_TEXTURECUBE)\n            {\n                throw new Error('DDSParser does not support cubemap textures');\n            }\n\n            const resourceDimension = dx10Header[DDS.HEADER_DX10_FIELDS.RESOURCE_DIMENSION];\n\n            if (resourceDimension === DDS.D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D)\n            {\n                throw new Error('DDSParser does not supported 3D texture data');\n            }\n\n            const dxgiFormat = dx10Header[DDS.HEADER_DX10_FIELDS.DXGI_FORMAT];\n\n            if (dxgiFormat in DXGI_TO_TEXTURE_FORMAT)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[dxgiFormat];\n            }\n\n            throw new Error(`DDSParser cannot parse texture data with DXGI format ${dxgiFormat}`);\n        }\n\n        if (fourCC in FOURCC_TO_TEXTURE_FORMAT)\n        {\n            return FOURCC_TO_TEXTURE_FORMAT[fourCC];\n        }\n\n        throw new Error(`DDSParser cannot parse texture data with fourCC format ${fourCC}`);\n    }\n\n    if (flags & DDS.PIXEL_FORMAT_FLAGS.RGB || flags & DDS.PIXEL_FORMAT_FLAGS.RGBA)\n    {\n        return getUncompressedTextureFormat(header);\n    }\n\n    if (flags & DDS.PIXEL_FORMAT_FLAGS.YUV)\n    {\n        throw new Error('DDSParser does not supported YUV uncompressed texture data.');\n    }\n    if (flags & DDS.PIXEL_FORMAT_FLAGS.LUMINANCE || flags & DDS.PIXEL_FORMAT_FLAGS.LUMINANCEA)\n    {\n        throw new Error('DDSParser does not support single-channel (lumninance) texture data!');\n    }\n    if (flags & DDS.PIXEL_FORMAT_FLAGS.ALPHA || flags & DDS.PIXEL_FORMAT_FLAGS.ALPHAPIXELS)\n    {\n        throw new Error('DDSParser does not support single-channel (alpha) texture data!');\n    }\n\n    throw new Error('DDSParser failed to load a texture file due to an unknown reason!');\n}\n\nfunction getUncompressedTextureFormat(header: Uint32Array)\n{\n    const bitCount = header[DDS.HEADER_FIELDS.RGB_BITCOUNT];\n    const rBitMask = header[DDS.HEADER_FIELDS.R_BIT_MASK];\n    const gBitMask = header[DDS.HEADER_FIELDS.G_BIT_MASK];\n    const bBitMask = header[DDS.HEADER_FIELDS.B_BIT_MASK];\n    const aBitMask = header[DDS.HEADER_FIELDS.A_BIT_MASK];\n\n    // https://learn.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n    // https://github.com/microsoft/DirectXTex/blob/main/DDSTextureLoader/DDSTextureLoader11.cpp#L892\n    switch (bitCount)\n    {\n        case 32:\n            if (rBitMask === 0x000000ff && gBitMask === 0x0000ff00 && bBitMask === 0x00ff0000 && aBitMask === 0xff000000)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R8G8B8A8_UNORM];\n            }\n            if (rBitMask === 0x00ff0000 && gBitMask === 0x0000ff00 && bBitMask === 0x000000ff && aBitMask === 0xff000000)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B8G8R8A8_UNORM];\n            }\n            if (rBitMask === 0x3ff00000 && gBitMask === 0x000ffc00 && bBitMask === 0x000003ff && aBitMask === 0xc0000000)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R10G10B10A2_UNORM];\n            }\n            if (rBitMask === 0x0000ffff && gBitMask === 0xffff0000 && bBitMask === 0 && aBitMask === 0)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R16G16_UNORM];\n            }\n            if (rBitMask === 0xffffffff && gBitMask === 0 && bBitMask === 0 && aBitMask === 0)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R32_FLOAT];\n            }\n            break;\n        case 24:\n            if (rBitMask === 0xff0000 && gBitMask === 0xff00 && bBitMask === 0xff && aBitMask === 0x8000)\n            {\n                // rgb8unorm not supported?\n                // return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B5G5R5A1_UNORM];\n            }\n            break;\n        case 16:\n            if (rBitMask === 0x7c00 && gBitMask === 0x03e0 && bBitMask === 0x001f && aBitMask === 0x8000)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B5G5R5A1_UNORM];\n            }\n            if (rBitMask === 0xf800 && gBitMask === 0x07e0 && bBitMask === 0x001f && aBitMask === 0)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B5G6R5_UNORM];\n            }\n            if (rBitMask === 0x0f00 && gBitMask === 0x00f0 && bBitMask === 0x000f && aBitMask === 0xf000)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_B4G4R4A4_UNORM];\n            }\n            if (rBitMask === 0x00ff && gBitMask === 0 && bBitMask === 0 && aBitMask === 0xff00)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R8G8_UNORM];\n            }\n            if (rBitMask === 0xffff && gBitMask === 0 && bBitMask === 0 && aBitMask === 0)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R16_UNORM];\n            }\n            break;\n\n        case 8:\n            if (rBitMask === 0xff && gBitMask === 0 && bBitMask === 0 && aBitMask === 0)\n            {\n                return DXGI_TO_TEXTURE_FORMAT[DDS.DXGI_FORMAT.DXGI_FORMAT_R8_UNORM];\n            }\n            break;\n    }\n\n    throw new Error(`DDSParser does not support uncompressed texture with configuration:\n                bitCount = ${bitCount}, rBitMask = ${rBitMask}, gBitMask = ${gBitMask}, aBitMask = ${aBitMask}`);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}