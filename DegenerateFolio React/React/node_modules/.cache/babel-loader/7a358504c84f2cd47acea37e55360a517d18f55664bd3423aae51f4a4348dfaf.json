{"ast":null,"code":"\"use strict\";\n\nfunction injectBits(templateSrc, fragmentParts) {\n  let out = templateSrc;\n  for (const i in fragmentParts) {\n    const parts = fragmentParts[i];\n    const toInject = parts.join(\"\\n\");\n    if (toInject.length) {\n      out = out.replace(`{{${i}}}`, `//-----${i} START-----//\n${parts.join(\"\\n\")}\n//----${i} FINISH----//`);\n    } else {\n      out = out.replace(`{{${i}}}`, \"\");\n    }\n  }\n  return out;\n}\nexport { injectBits };","map":{"version":3,"names":["injectBits","templateSrc","fragmentParts","out","i","parts","toInject","join","length","replace"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/injectBits.ts"],"sourcesContent":["/**\n * takes a shader src and replaces any hooks with the HighFragment code.\n * @param templateSrc - the program src template\n * @param fragmentParts - the fragments to inject\n */\nexport function injectBits(templateSrc: string, fragmentParts: Record<string, string[]>): string\n{\n    let out = templateSrc;\n\n    for (const i in fragmentParts)\n    {\n        const parts = fragmentParts[i];\n\n        const toInject = parts.join('\\n');\n\n        if (toInject.length)\n        {\n            out = out.replace(`{{${i}}}`, `//-----${i} START-----//\\n${parts.join('\\n')}\\n//----${i} FINISH----//`);\n        }\n\n        else\n        {\n            out = out.replace(`{{${i}}}`, '');\n        }\n    }\n\n    return out;\n}\n"],"mappings":";;AAKgB,SAAAA,WAAWC,WAAA,EAAqBC,aAChD;EACI,IAAIC,GAAM,GAAAF,WAAA;EAEV,WAAWG,CAAA,IAAKF,aAChB;IACU,MAAAG,KAAA,GAAQH,aAAA,CAAcE,CAAC;IAEvB,MAAAE,QAAA,GAAWD,KAAM,CAAAE,IAAA,CAAK,IAAI;IAEhC,IAAID,QAAA,CAASE,MACb;MACIL,GAAA,GAAMA,GAAA,CAAIM,OAAQ,MAAKL,CAAC,MAAM,UAAUA,CAAC;AAAA,EAAkBC,KAAA,CAAME,IAAK,KAAI,CAAC;AAAA,QAAWH,CAAgB;IAAA,CAI1G;MACID,GAAA,GAAMA,GAAI,CAAAM,OAAA,CAAa,KAAAL,CAAC,MAAM,EAAE;IAAA;EACpC;EAGG,OAAAD,GAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}