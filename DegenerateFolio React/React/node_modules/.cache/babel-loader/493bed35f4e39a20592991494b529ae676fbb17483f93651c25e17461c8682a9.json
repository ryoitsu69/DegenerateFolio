{"ast":null,"code":"export const runtime = {\n  // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21\n  OracleApi: [{\n    methods: {\n      get_all_values: {\n        description: 'Retrieves all values',\n        params: [{\n          name: 'providerId',\n          // This is a Codec type\n          type: 'Raw'\n        }],\n        // This won't actually work as expected - since we have\n        // no information about the actual Raw sizes, we cannot\n        // handle it in this format (it would need an override\n        // for the specific Codec). So return the Raw value.\n        // type: 'Vec<(Raw, Option<Raw>)>'\n        type: 'Raw'\n      },\n      get_value: {\n        description: 'Retrieves a single value',\n        params: [{\n          name: 'providerId',\n          // This is a Codec type\n          type: 'Raw'\n        }, {\n          name: 'key',\n          // This is a Codec type\n          type: 'Raw'\n        }],\n        // This is an Option<Codec> type\n        type: 'Option<Raw>'\n      }\n    },\n    version: 1\n  }]\n};","map":{"version":3,"names":["runtime","OracleApi","methods","get_all_values","description","params","name","type","get_value","version"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js"],"sourcesContent":["export const runtime = {\n    // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21\n    OracleApi: [\n        {\n            methods: {\n                get_all_values: {\n                    description: 'Retrieves all values',\n                    params: [\n                        {\n                            name: 'providerId',\n                            // This is a Codec type\n                            type: 'Raw'\n                        }\n                    ],\n                    // This won't actually work as expected - since we have\n                    // no information about the actual Raw sizes, we cannot\n                    // handle it in this format (it would need an override\n                    // for the specific Codec). So return the Raw value.\n                    // type: 'Vec<(Raw, Option<Raw>)>'\n                    type: 'Raw'\n                },\n                get_value: {\n                    description: 'Retrieves a single value',\n                    params: [\n                        {\n                            name: 'providerId',\n                            // This is a Codec type\n                            type: 'Raw'\n                        },\n                        {\n                            name: 'key',\n                            // This is a Codec type\n                            type: 'Raw'\n                        }\n                    ],\n                    // This is an Option<Codec> type\n                    type: 'Option<Raw>'\n                }\n            },\n            version: 1\n        }\n    ]\n};\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACnB;EACAC,SAAS,EAAE,CACP;IACIC,OAAO,EAAE;MACLC,cAAc,EAAE;QACZC,WAAW,EAAE,sBAAsB;QACnCC,MAAM,EAAE,CACJ;UACIC,IAAI,EAAE,YAAY;UAClB;UACAC,IAAI,EAAE;QACV,CAAC,CACJ;QACD;QACA;QACA;QACA;QACA;QACAA,IAAI,EAAE;MACV,CAAC;MACDC,SAAS,EAAE;QACPJ,WAAW,EAAE,0BAA0B;QACvCC,MAAM,EAAE,CACJ;UACIC,IAAI,EAAE,YAAY;UAClB;UACAC,IAAI,EAAE;QACV,CAAC,EACD;UACID,IAAI,EAAE,KAAK;UACX;UACAC,IAAI,EAAE;QACV,CAAC,CACJ;QACD;QACAA,IAAI,EAAE;MACV;IACJ,CAAC;IACDE,OAAO,EAAE;EACb,CAAC;AAET,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}