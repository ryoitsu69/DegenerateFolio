{"ast":null,"code":"import { u8aToU8a } from '@polkadot/util';\nimport { sr25519Sign as wasmSign } from '@polkadot/wasm-crypto';\n/**\n * @name sr25519Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\nexport function sr25519Sign(message, _ref) {\n  let {\n    publicKey,\n    secretKey\n  } = _ref;\n  if ((publicKey === null || publicKey === void 0 ? void 0 : publicKey.length) !== 32) {\n    throw new Error('Expected a valid publicKey, 32-bytes');\n  } else if ((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) !== 64) {\n    throw new Error('Expected a valid secretKey, 64-bytes');\n  }\n  return wasmSign(publicKey, secretKey, u8aToU8a(message));\n}","map":{"version":3,"names":["u8aToU8a","sr25519Sign","wasmSign","message","_ref","publicKey","secretKey","length","Error"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/sr25519/sign.js"],"sourcesContent":["import { u8aToU8a } from '@polkadot/util';\nimport { sr25519Sign as wasmSign } from '@polkadot/wasm-crypto';\n/**\n * @name sr25519Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\nexport function sr25519Sign(message, { publicKey, secretKey }) {\n    if (publicKey?.length !== 32) {\n        throw new Error('Expected a valid publicKey, 32-bytes');\n    }\n    else if (secretKey?.length !== 64) {\n        throw new Error('Expected a valid secretKey, 64-bytes');\n    }\n    return wasmSign(publicKey, secretKey, u8aToU8a(message));\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,WAAW,IAAIC,QAAQ,QAAQ,uBAAuB;AAC/D;AACA;AACA;AACA;AACA,OAAO,SAASD,WAAWA,CAACE,OAAO,EAAAC,IAAA,EAA4B;EAAA,IAA1B;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAAF,IAAA;EACzD,IAAI,CAAAC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEE,MAAM,MAAK,EAAE,EAAE;IAC1B,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EAC3D,CAAC,MACI,IAAI,CAAAF,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEC,MAAM,MAAK,EAAE,EAAE;IAC/B,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EAC3D;EACA,OAAON,QAAQ,CAACG,SAAS,EAAEC,SAAS,EAAEN,QAAQ,CAACG,OAAO,CAAC,CAAC;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}