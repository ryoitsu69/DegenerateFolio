{"ast":null,"code":"import { isFunction } from '@polkadot/util';\nconst UNKNOWN = -99999;\nfunction extend(that, name, value) {\n  Object.defineProperty(that, name, {\n    configurable: true,\n    enumerable: false,\n    value\n  });\n}\n/**\n * @name RpcError\n * @summary Extension to the basic JS Error.\n * @description\n * The built-in JavaScript Error class is extended by adding a code to allow for Error categorization. In addition to the normal `stack`, `message`, the numeric `code` and `data` (any types) parameters are available on the object.\n * @example\n * <BR>\n *\n * ```javascript\n * const { RpcError } from '@polkadot/util');\n *\n * throw new RpcError('some message', RpcError.CODES.METHOD_NOT_FOUND); // => error.code = -32601\n * ```\n */\nexport default class RpcError extends Error {\n  code;\n  data;\n  message;\n  name;\n  stack;\n  constructor(message = '', code = UNKNOWN, data) {\n    super();\n    extend(this, 'message', String(message));\n    extend(this, 'name', this.constructor.name);\n    extend(this, 'data', data);\n    extend(this, 'code', code);\n    if (isFunction(Error.captureStackTrace)) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      const {\n        stack\n      } = new Error(message);\n      stack && extend(this, 'stack', stack);\n    }\n  }\n  static CODES = {\n    ASSERT: -90009,\n    INVALID_JSONRPC: -99998,\n    METHOD_NOT_FOUND: -32601,\n    // Rust client\n    UNKNOWN\n  };\n}","map":{"version":3,"names":["isFunction","UNKNOWN","extend","that","name","value","Object","defineProperty","configurable","enumerable","RpcError","Error","code","data","message","stack","constructor","String","captureStackTrace","CODES","ASSERT","INVALID_JSONRPC","METHOD_NOT_FOUND"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/rpc-provider/coder/error.js"],"sourcesContent":["import { isFunction } from '@polkadot/util';\nconst UNKNOWN = -99999;\nfunction extend(that, name, value) {\n    Object.defineProperty(that, name, {\n        configurable: true,\n        enumerable: false,\n        value\n    });\n}\n/**\n * @name RpcError\n * @summary Extension to the basic JS Error.\n * @description\n * The built-in JavaScript Error class is extended by adding a code to allow for Error categorization. In addition to the normal `stack`, `message`, the numeric `code` and `data` (any types) parameters are available on the object.\n * @example\n * <BR>\n *\n * ```javascript\n * const { RpcError } from '@polkadot/util');\n *\n * throw new RpcError('some message', RpcError.CODES.METHOD_NOT_FOUND); // => error.code = -32601\n * ```\n */\nexport default class RpcError extends Error {\n    code;\n    data;\n    message;\n    name;\n    stack;\n    constructor(message = '', code = UNKNOWN, data) {\n        super();\n        extend(this, 'message', String(message));\n        extend(this, 'name', this.constructor.name);\n        extend(this, 'data', data);\n        extend(this, 'code', code);\n        if (isFunction(Error.captureStackTrace)) {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        else {\n            const { stack } = new Error(message);\n            stack && extend(this, 'stack', stack);\n        }\n    }\n    static CODES = {\n        ASSERT: -90009,\n        INVALID_JSONRPC: -99998,\n        METHOD_NOT_FOUND: -32601, // Rust client\n        UNKNOWN\n    };\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,MAAMC,OAAO,GAAG,CAAC,KAAK;AACtB,SAASC,MAAMA,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC/BC,MAAM,CAACC,cAAc,CAACJ,IAAI,EAAEC,IAAI,EAAE;IAC9BI,YAAY,EAAE,IAAI;IAClBC,UAAU,EAAE,KAAK;IACjBJ;EACJ,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMK,QAAQ,SAASC,KAAK,CAAC;EACxCC,IAAI;EACJC,IAAI;EACJC,OAAO;EACPV,IAAI;EACJW,KAAK;EACLC,WAAWA,CAACF,OAAO,GAAG,EAAE,EAAEF,IAAI,GAAGX,OAAO,EAAEY,IAAI,EAAE;IAC5C,KAAK,CAAC,CAAC;IACPX,MAAM,CAAC,IAAI,EAAE,SAAS,EAAEe,MAAM,CAACH,OAAO,CAAC,CAAC;IACxCZ,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAACc,WAAW,CAACZ,IAAI,CAAC;IAC3CF,MAAM,CAAC,IAAI,EAAE,MAAM,EAAEW,IAAI,CAAC;IAC1BX,MAAM,CAAC,IAAI,EAAE,MAAM,EAAEU,IAAI,CAAC;IAC1B,IAAIZ,UAAU,CAACW,KAAK,CAACO,iBAAiB,CAAC,EAAE;MACrCP,KAAK,CAACO,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAACF,WAAW,CAAC;IACnD,CAAC,MACI;MACD,MAAM;QAAED;MAAM,CAAC,GAAG,IAAIJ,KAAK,CAACG,OAAO,CAAC;MACpCC,KAAK,IAAIb,MAAM,CAAC,IAAI,EAAE,OAAO,EAAEa,KAAK,CAAC;IACzC;EACJ;EACA,OAAOI,KAAK,GAAG;IACXC,MAAM,EAAE,CAAC,KAAK;IACdC,eAAe,EAAE,CAAC,KAAK;IACvBC,gBAAgB,EAAE,CAAC,KAAK;IAAE;IAC1BrB;EACJ,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}