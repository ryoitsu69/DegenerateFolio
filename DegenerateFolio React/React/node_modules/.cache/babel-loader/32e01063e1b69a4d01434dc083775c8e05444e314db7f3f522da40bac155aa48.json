{"ast":null,"code":"import { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Filter } from '../../Filter.mjs';\nimport vertex from '../defaultFilter.vert.mjs';\nimport fragment from './noise.frag.mjs';\nimport source from './noise.wgsl.mjs';\n\"use strict\";\nconst _NoiseFilter = class _NoiseFilter extends Filter {\n  /**\n   * @param options - The options of the noise filter.\n   */\n  constructor(options = {}) {\n    options = {\n      ..._NoiseFilter.defaultOptions,\n      ...options\n    };\n    const gpuProgram = GpuProgram.from({\n      vertex: {\n        source,\n        entryPoint: \"mainVertex\"\n      },\n      fragment: {\n        source,\n        entryPoint: \"mainFragment\"\n      }\n    });\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment,\n      name: \"noise-filter\"\n    });\n    const {\n      noise,\n      seed,\n      ...rest\n    } = options;\n    super({\n      ...rest,\n      gpuProgram,\n      glProgram,\n      resources: {\n        noiseUniforms: new UniformGroup({\n          uNoise: {\n            value: 1,\n            type: \"f32\"\n          },\n          uSeed: {\n            value: 1,\n            type: \"f32\"\n          }\n        })\n      }\n    });\n    this.noise = noise;\n    this.seed = seed ?? Math.random();\n  }\n  /**\n   * The amount of noise to apply, this value should be in the range (0, 1].\n   * @default 0.5\n   */\n  get noise() {\n    return this.resources.noiseUniforms.uniforms.uNoise;\n  }\n  set noise(value) {\n    this.resources.noiseUniforms.uniforms.uNoise = value;\n  }\n  /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n  get seed() {\n    return this.resources.noiseUniforms.uniforms.uSeed;\n  }\n  set seed(value) {\n    this.resources.noiseUniforms.uniforms.uSeed = value;\n  }\n};\n_NoiseFilter.defaultOptions = {\n  noise: 0.5\n};\nlet NoiseFilter = _NoiseFilter;\nexport { NoiseFilter };","map":{"version":3,"names":["_NoiseFilter","Filter","constructor","options","defaultOptions","gpuProgram","GpuProgram","from","vertex","source","entryPoint","fragment","glProgram","GlProgram","name","noise","seed","rest","resources","noiseUniforms","UniformGroup","uNoise","value","type","uSeed","Math","random","uniforms","NoiseFilter"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/filters/defaults/noise/NoiseFilter.ts"],"sourcesContent":["import { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Filter } from '../../Filter';\nimport vertex from '../defaultFilter.vert';\nimport fragment from './noise.frag';\nimport source from './noise.wgsl';\n\nimport type { FilterOptions } from '../../Filter';\n\n/**\n * Options for NoiseFilter\n * @memberof filters\n */\nexport interface NoiseFilterOptions extends FilterOptions\n{\n    /** The amount of noise to apply, this value should be in the range (0, 1]. */\n    noise?: number;\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    seed?: number;\n}\n\n/**\n * A Noise effect filter.\n *\n * original filter: https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js\n * @memberof filters\n * @author Vico @vicocotea\n */\nexport class NoiseFilter extends Filter\n{\n    public static readonly defaultOptions: NoiseFilterOptions = {\n        noise: 0.5,\n    };\n\n    /**\n     * @param options - The options of the noise filter.\n     */\n    constructor(options: NoiseFilterOptions = {})\n    {\n        options = { ...NoiseFilter.defaultOptions, ...options };\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'noise-filter'\n        });\n\n        const { noise, seed, ...rest } = options;\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                noiseUniforms: new UniformGroup({\n                    uNoise: { value: 1, type: 'f32' },\n                    uSeed: { value: 1, type: 'f32' },\n                })\n            },\n        });\n\n        this.noise = noise;\n        this.seed = seed ?? Math.random();\n    }\n\n    /**\n     * The amount of noise to apply, this value should be in the range (0, 1].\n     * @default 0.5\n     */\n    get noise(): number\n    {\n        return this.resources.noiseUniforms.uniforms.uNoise;\n    }\n\n    set noise(value: number)\n    {\n        this.resources.noiseUniforms.uniforms.uNoise = value;\n    }\n\n    /** A seed value to apply to the random noise generation. `Math.random()` is a good value to use. */\n    get seed(): number\n    {\n        return this.resources.noiseUniforms.uniforms.uSeed;\n    }\n\n    set seed(value: number)\n    {\n        this.resources.noiseUniforms.uniforms.uSeed = value;\n    }\n}\n"],"mappings":";;;;;;;;AA6BO,MAAMA,YAAA,GAAN,MAAMA,YAAA,SAAoBC,MACjC;EAAA;AAAA;AAAA;EAQIC,YAAYC,OAA8B,KAC1C;IACIA,OAAA,GAAU;MAAE,GAAGH,YAAY,CAAAI,cAAA;MAAgB,GAAGD;IAAQ;IAEhD,MAAAE,UAAA,GAAaC,UAAA,CAAWC,IAAK;MAC/BC,MAAQ;QACJC,MAAA;QACAC,UAAY;MAAA,CAChB;MACAC,QAAU;QACNF,MAAA;QACAC,UAAY;MAAA;IAChB,CACH;IAEK,MAAAE,SAAA,GAAYC,SAAA,CAAUN,IAAK;MAC7BC,MAAA;MACAG,QAAA;MACAG,IAAM;IAAA,CACT;IAED,MAAM;MAAEC,KAAA;MAAOC,IAAM;MAAA,GAAGC;IAAA,CAAS,GAAAd,OAAA;IAE3B;MACF,GAAGc,IAAA;MACHZ,UAAA;MACAO,SAAA;MACAM,SAAW;QACPC,aAAA,EAAe,IAAIC,YAAa;UAC5BC,MAAQ;YAAEC,KAAO;YAAGC,IAAA,EAAM;UAAM;UAChCC,KAAO;YAAEF,KAAO;YAAGC,IAAA,EAAM;UAAM;QAAA,CAClC;MAAA;IACL,CACH;IAED,KAAKR,KAAQ,GAAAA,KAAA;IACR,KAAAC,IAAA,GAAOA,IAAQ,IAAAS,IAAA,CAAKC,MAAO;EAAA;EACpC;AAAA;AAAA;AAAA;EAMA,IAAIX,KACJA,CAAA;IACW,YAAKG,SAAU,CAAAC,aAAA,CAAcQ,QAAS,CAAAN,MAAA;EAAA;EAGjD,IAAIN,MAAMO,KACV;IACS,KAAAJ,SAAA,CAAUC,aAAc,CAAAQ,QAAA,CAASN,MAAS,GAAAC,KAAA;EAAA;EACnD;EAGA,IAAIN,IACJA,CAAA;IACW,YAAKE,SAAU,CAAAC,aAAA,CAAcQ,QAAS,CAAAH,KAAA;EAAA;EAGjD,IAAIR,KAAKM,KACT;IACS,KAAAJ,SAAA,CAAUC,aAAc,CAAAQ,QAAA,CAASH,KAAQ,GAAAF,KAAA;EAAA;AAEtD;AAxEatB,YAAA,CAEcI,cAAqC;EACxDW,KAAO;AACX;AAJG,IAAMa,WAAN,GAAA5B,YAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}