{"ast":null,"code":"import { map, switchMap } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nexport function _stakerExposures(instanceId, api) {\n  return memo(instanceId, function (accountIds, eras) {\n    let withActive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(_ref => {\n      let {\n        era,\n        nominators: allNominators,\n        validators: allValidators\n      } = _ref;\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(_ref2 => {\n          let {\n            validatorId\n          } = _ref2;\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    }))));\n  });\n}\nexport function stakerExposures(instanceId, api) {\n  return memo(instanceId, function (accountIds) {\n    let withActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive)));\n  });\n}\nexport const stakerExposure = /*#__PURE__*/firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));","map":{"version":3,"names":["map","switchMap","firstMemo","memo","_stakerExposures","instanceId","api","accountIds","eras","withActive","arguments","length","undefined","stakerIds","a","registry","createType","toString","derive","staking","_erasExposure","pipe","exposures","stakerId","_ref","era","nominators","allNominators","validators","allValidators","isValidator","nominating","forEach","_ref2","validatorId","isEmpty","Object","keys","stakerExposures","erasHistoric","stakerExposure","accountId"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/staking/stakerExposure.js"],"sourcesContent":["import { map, switchMap } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nexport function _stakerExposures(instanceId, api) {\n    return memo(instanceId, (accountIds, eras, withActive = false) => {\n        const stakerIds = accountIds.map((a) => api.registry.createType('AccountId', a).toString());\n        return api.derive.staking._erasExposure(eras, withActive).pipe(map((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {\n            const isValidator = !!allValidators[stakerId];\n            const validators = {};\n            const nominating = allNominators[stakerId] || [];\n            if (isValidator) {\n                validators[stakerId] = allValidators[stakerId];\n            }\n            else if (nominating) {\n                nominating.forEach(({ validatorId }) => {\n                    validators[validatorId] = allValidators[validatorId];\n                });\n            }\n            return { era, isEmpty: !Object.keys(validators).length, isValidator, nominating, validators };\n        }))));\n    });\n}\nexport function stakerExposures(instanceId, api) {\n    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));\n}\nexport const stakerExposure = /*#__PURE__*/ firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,SAAS,QAAQ,MAAM;AACrC,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAO,SAASC,gBAAgBA,CAACC,UAAU,EAAEC,GAAG,EAAE;EAC9C,OAAOH,IAAI,CAACE,UAAU,EAAE,UAACE,UAAU,EAAEC,IAAI,EAAyB;IAAA,IAAvBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACzD,MAAMG,SAAS,GAAGN,UAAU,CAACP,GAAG,CAAEc,CAAC,IAAKR,GAAG,CAACS,QAAQ,CAACC,UAAU,CAAC,WAAW,EAAEF,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;IAC3F,OAAOX,GAAG,CAACY,MAAM,CAACC,OAAO,CAACC,aAAa,CAACZ,IAAI,EAAEC,UAAU,CAAC,CAACY,IAAI,CAACrB,GAAG,CAAEsB,SAAS,IAAKT,SAAS,CAACb,GAAG,CAAEuB,QAAQ,IAAKD,SAAS,CAACtB,GAAG,CAACwB,IAAA,IAAmE;MAAA,IAAlE;QAAEC,GAAG;QAAEC,UAAU,EAAEC,aAAa;QAAEC,UAAU,EAAEC;MAAc,CAAC,GAAAL,IAAA;MACtL,MAAMM,WAAW,GAAG,CAAC,CAACD,aAAa,CAACN,QAAQ,CAAC;MAC7C,MAAMK,UAAU,GAAG,CAAC,CAAC;MACrB,MAAMG,UAAU,GAAGJ,aAAa,CAACJ,QAAQ,CAAC,IAAI,EAAE;MAChD,IAAIO,WAAW,EAAE;QACbF,UAAU,CAACL,QAAQ,CAAC,GAAGM,aAAa,CAACN,QAAQ,CAAC;MAClD,CAAC,MACI,IAAIQ,UAAU,EAAE;QACjBA,UAAU,CAACC,OAAO,CAACC,KAAA,IAAqB;UAAA,IAApB;YAAEC;UAAY,CAAC,GAAAD,KAAA;UAC/BL,UAAU,CAACM,WAAW,CAAC,GAAGL,aAAa,CAACK,WAAW,CAAC;QACxD,CAAC,CAAC;MACN;MACA,OAAO;QAAET,GAAG;QAAEU,OAAO,EAAE,CAACC,MAAM,CAACC,IAAI,CAACT,UAAU,CAAC,CAACjB,MAAM;QAAEmB,WAAW;QAAEC,UAAU;QAAEH;MAAW,CAAC;IACjG,CAAC,CAAC,CAAC,CAAC,CAAC;EACT,CAAC,CAAC;AACN;AACA,OAAO,SAASU,eAAeA,CAACjC,UAAU,EAAEC,GAAG,EAAE;EAC7C,OAAOH,IAAI,CAACE,UAAU,EAAE,UAACE,UAAU;IAAA,IAAEE,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,OAAKJ,GAAG,CAACY,MAAM,CAACC,OAAO,CAACoB,YAAY,CAAC9B,UAAU,CAAC,CAACY,IAAI,CAACpB,SAAS,CAAEO,IAAI,IAAKF,GAAG,CAACY,MAAM,CAACC,OAAO,CAACf,gBAAgB,CAACG,UAAU,EAAEC,IAAI,EAAEC,UAAU,CAAC,CAAC,CAAC;EAAA,EAAC;AACzM;AACA,OAAO,MAAM+B,cAAc,GAAG,aAActC,SAAS,CAAC,CAACI,GAAG,EAAEmC,SAAS,EAAEhC,UAAU,KAAKH,GAAG,CAACY,MAAM,CAACC,OAAO,CAACmB,eAAe,CAAC,CAACG,SAAS,CAAC,EAAEhC,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}