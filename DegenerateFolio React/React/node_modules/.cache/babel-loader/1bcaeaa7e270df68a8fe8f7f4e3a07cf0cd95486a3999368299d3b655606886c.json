{"ast":null,"code":"class ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    typeof sizeOrBuffer == \"number\" ? this.rawBinaryData = new ArrayBuffer(sizeOrBuffer) : sizeOrBuffer instanceof Uint8Array ? this.rawBinaryData = sizeOrBuffer.buffer : this.rawBinaryData = sizeOrBuffer, this.uint32View = new Uint32Array(this.rawBinaryData), this.float32View = new Float32Array(this.rawBinaryData);\n  }\n  /** View on the raw binary data as a `Int8Array`. */\n  get int8View() {\n    return this._int8View || (this._int8View = new Int8Array(this.rawBinaryData)), this._int8View;\n  }\n  /** View on the raw binary data as a `Uint8Array`. */\n  get uint8View() {\n    return this._uint8View || (this._uint8View = new Uint8Array(this.rawBinaryData)), this._uint8View;\n  }\n  /**  View on the raw binary data as a `Int16Array`. */\n  get int16View() {\n    return this._int16View || (this._int16View = new Int16Array(this.rawBinaryData)), this._int16View;\n  }\n  /** View on the raw binary data as a `Uint16Array`. */\n  get uint16View() {\n    return this._uint16View || (this._uint16View = new Uint16Array(this.rawBinaryData)), this._uint16View;\n  }\n  /** View on the raw binary data as a `Int32Array`. */\n  get int32View() {\n    return this._int32View || (this._int32View = new Int32Array(this.rawBinaryData)), this._int32View;\n  }\n  /**\n   * Returns the view of the given type.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *    `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - typed array of given type\n   */\n  view(type) {\n    return this[`${type}View`];\n  }\n  /** Destroys all buffer references. Do not use after calling this. */\n  destroy() {\n    this.rawBinaryData = null, this._int8View = null, this._uint8View = null, this._int16View = null, this._uint16View = null, this._int32View = null, this.uint32View = null, this.float32View = null;\n  }\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(`${type} isn't a valid view type`);\n    }\n  }\n}\nexport { ViewableBuffer };","map":{"version":3,"names":["ViewableBuffer","constructor","sizeOrBuffer","rawBinaryData","ArrayBuffer","Uint8Array","buffer","uint32View","Uint32Array","float32View","Float32Array","int8View","_int8View","Int8Array","uint8View","_uint8View","int16View","_int16View","Int16Array","uint16View","_uint16View","Uint16Array","int32View","_int32View","Int32Array","view","type","destroy","sizeOf","Error"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/geometry/ViewableBuffer.ts"],"sourcesContent":["import type { ITypedArray } from './Buffer';\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof PIXI\n */\nexport class ViewableBuffer\n{\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _uint16View: Uint16Array;\n    private _int32View: Int32Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Uint16Array`. */\n    get uint16View(): Uint16Array\n    {\n        if (!this._uint16View)\n        {\n            this._uint16View = new Uint16Array(this.rawBinaryData);\n        }\n\n        return this._uint16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    view(type: string): ITypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this._uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n"],"mappings":"AAMO,MAAMA,cAAA,CACb;EA4BIC,YAAYC,YAAA,EACZ;IACQ,OAAOA,YAAA,IAAiB,WAExB,KAAKC,aAAA,GAAgB,IAAIC,WAAA,CAAYF,YAAY,IAE5CA,YAAA,YAAwBG,UAAA,GAE7B,KAAKF,aAAA,GAAgBD,YAAA,CAAaI,MAAA,GAIlC,KAAKH,aAAA,GAAgBD,YAAA,EAGzB,KAAKK,UAAA,GAAa,IAAIC,WAAA,CAAY,KAAKL,aAAa,GACpD,KAAKM,WAAA,GAAc,IAAIC,YAAA,CAAa,KAAKP,aAAa;EAC1D;EAAA;EAGA,IAAIQ,SAAA,EACJ;IACS,YAAKC,SAAA,KAEN,KAAKA,SAAA,GAAY,IAAIC,SAAA,CAAU,KAAKV,aAAa,IAG9C,KAAKS,SAAA;EAChB;EAAA;EAGA,IAAIE,UAAA,EACJ;IACS,YAAKC,UAAA,KAEN,KAAKA,UAAA,GAAa,IAAIV,UAAA,CAAW,KAAKF,aAAa,IAGhD,KAAKY,UAAA;EAChB;EAAA;EAGA,IAAIC,UAAA,EACJ;IACS,YAAKC,UAAA,KAEN,KAAKA,UAAA,GAAa,IAAIC,UAAA,CAAW,KAAKf,aAAa,IAGhD,KAAKc,UAAA;EAChB;EAAA;EAGA,IAAIE,WAAA,EACJ;IACS,YAAKC,WAAA,KAEN,KAAKA,WAAA,GAAc,IAAIC,WAAA,CAAY,KAAKlB,aAAa,IAGlD,KAAKiB,WAAA;EAChB;EAAA;EAGA,IAAIE,UAAA,EACJ;IACS,YAAKC,UAAA,KAEN,KAAKA,UAAA,GAAa,IAAIC,UAAA,CAAW,KAAKrB,aAAa,IAGhD,KAAKoB,UAAA;EAChB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAE,KAAKC,IAAA,EACL;IACY,YAAa,GAAGA,IAAI,MAAM;EACtC;EAAA;EAGAC,QAAA,EACA;IACS,KAAAxB,aAAA,GAAgB,MACrB,KAAKS,SAAA,GAAY,MACjB,KAAKG,UAAA,GAAa,MAClB,KAAKE,UAAA,GAAa,MAClB,KAAKG,WAAA,GAAc,MACnB,KAAKG,UAAA,GAAa,MAClB,KAAKhB,UAAA,GAAa,MAClB,KAAKE,WAAA,GAAc;EACvB;EAEA,OAAOmB,OAAOF,IAAA,EACd;IACI,QAAQA,IAAA;MAEJ,KAAK;MACL,KAAK;QACM;MACX,KAAK;MACL,KAAK;QACM;MACX,KAAK;MACL,KAAK;MACL,KAAK;QACM;MACX;QACI,MAAM,IAAIG,KAAA,CAAM,GAAGH,IAAI,0BAA0B;IACzD;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}