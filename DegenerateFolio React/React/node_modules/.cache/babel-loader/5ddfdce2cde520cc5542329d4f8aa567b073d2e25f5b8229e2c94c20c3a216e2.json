{"ast":null,"code":"import { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\"use strict\";\nclass EventsTickerClass {\n  constructor() {\n    /** The frequency that fake events will be fired. */\n    this.interactionFrequency = 10;\n    this._deltaTime = 0;\n    this._didMove = false;\n    this._tickerAdded = false;\n    this._pauseUpdate = true;\n  }\n  /**\n   * Initializes the event ticker.\n   * @param events - The event system.\n   */\n  init(events) {\n    this.removeTickerListener();\n    this.events = events;\n    this.interactionFrequency = 10;\n    this._deltaTime = 0;\n    this._didMove = false;\n    this._tickerAdded = false;\n    this._pauseUpdate = true;\n  }\n  /** Whether to pause the update checks or not. */\n  get pauseUpdate() {\n    return this._pauseUpdate;\n  }\n  set pauseUpdate(paused) {\n    this._pauseUpdate = paused;\n  }\n  /** Adds the ticker listener. */\n  addTickerListener() {\n    if (this._tickerAdded || !this.domElement) {\n      return;\n    }\n    Ticker.system.add(this._tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n    this._tickerAdded = true;\n  }\n  /** Removes the ticker listener. */\n  removeTickerListener() {\n    if (!this._tickerAdded) {\n      return;\n    }\n    Ticker.system.remove(this._tickerUpdate, this);\n    this._tickerAdded = false;\n  }\n  /** Sets flag to not fire extra events when the user has already moved there mouse */\n  pointerMoved() {\n    this._didMove = true;\n  }\n  /** Updates the state of interactive objects. */\n  _update() {\n    if (!this.domElement || this._pauseUpdate) {\n      return;\n    }\n    if (this._didMove) {\n      this._didMove = false;\n      return;\n    }\n    const rootPointerEvent = this.events[\"_rootPointerEvent\"];\n    if (this.events.supportsTouchEvents && rootPointerEvent.pointerType === \"touch\") {\n      return;\n    }\n    globalThis.document.dispatchEvent(new PointerEvent(\"pointermove\", {\n      clientX: rootPointerEvent.clientX,\n      clientY: rootPointerEvent.clientY\n    }));\n  }\n  /**\n   * Updates the state of interactive objects if at least {@link interactionFrequency}\n   * milliseconds have passed since the last invocation.\n   *\n   * Invoked by a throttled ticker update from {@link Ticker.system}.\n   * @param ticker - The throttled ticker.\n   */\n  _tickerUpdate(ticker) {\n    this._deltaTime += ticker.deltaTime;\n    if (this._deltaTime < this.interactionFrequency) {\n      return;\n    }\n    this._deltaTime = 0;\n    this._update();\n  }\n}\nconst EventsTicker = new EventsTickerClass();\nexport { EventsTicker };","map":{"version":3,"names":["EventsTickerClass","constructor","interactionFrequency","_deltaTime","_didMove","_tickerAdded","_pauseUpdate","init","events","removeTickerListener","pauseUpdate","paused","addTickerListener","domElement","Ticker","system","add","_tickerUpdate","UPDATE_PRIORITY","INTERACTION","remove","pointerMoved","_update","rootPointerEvent","supportsTouchEvents","pointerType","globalThis","document","dispatchEvent","PointerEvent","clientX","clientY","ticker","deltaTime","EventsTicker"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/events/EventTicker.ts"],"sourcesContent":["import { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { EventSystem } from './EventSystem';\n\n/**\n * This class handles automatic firing of PointerEvents\n * in the case where the pointer is stationary for too long.\n * This is to ensure that hit-tests are still run on moving objects.\n * @since 7.2.0\n * @memberof events\n * @class EventsTicker\n */\nclass EventsTickerClass\n{\n    /** The event system. */\n    public events: EventSystem;\n    /** The DOM element to listen to events on. */\n    public domElement: HTMLElement;\n    /** The frequency that fake events will be fired. */\n    public interactionFrequency = 10;\n\n    private _deltaTime = 0;\n    private _didMove = false;\n    private _tickerAdded = false;\n    private _pauseUpdate = true;\n\n    /**\n     * Initializes the event ticker.\n     * @param events - The event system.\n     */\n    public init(events: EventSystem): void\n    {\n        this.removeTickerListener();\n        this.events = events;\n        this.interactionFrequency = 10;\n        this._deltaTime = 0;\n        this._didMove = false;\n        this._tickerAdded = false;\n        this._pauseUpdate = true;\n    }\n\n    /** Whether to pause the update checks or not. */\n    get pauseUpdate(): boolean\n    {\n        return this._pauseUpdate;\n    }\n\n    set pauseUpdate(paused: boolean)\n    {\n        this._pauseUpdate = paused;\n    }\n\n    /** Adds the ticker listener. */\n    public addTickerListener(): void\n    {\n        if (this._tickerAdded || !this.domElement)\n        {\n            return;\n        }\n\n        Ticker.system.add(this._tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this._tickerAdded = true;\n    }\n\n    /** Removes the ticker listener. */\n    public removeTickerListener(): void\n    {\n        if (!this._tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this._tickerUpdate, this);\n\n        this._tickerAdded = false;\n    }\n\n    /** Sets flag to not fire extra events when the user has already moved there mouse */\n    public pointerMoved(): void\n    {\n        this._didMove = true;\n    }\n\n    /** Updates the state of interactive objects. */\n    private _update(): void\n    {\n        if (!this.domElement || this._pauseUpdate)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        // eslint-disable-next-line dot-notation\n        const rootPointerEvent = this.events['_rootPointerEvent'];\n\n        if (this.events.supportsTouchEvents && (rootPointerEvent as PointerEvent).pointerType === 'touch')\n        {\n            return;\n        }\n\n        globalThis.document.dispatchEvent(new PointerEvent('pointermove', {\n            clientX: rootPointerEvent.clientX,\n            clientY: rootPointerEvent.clientY,\n        }));\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link Ticker.system}.\n     * @param ticker - The throttled ticker.\n     */\n    private _tickerUpdate(ticker: Ticker): void\n    {\n        this._deltaTime += ticker.deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this._update();\n    }\n}\n\nexport const EventsTicker = new EventsTickerClass();\n"],"mappings":";;;AAaA,MAAMA,iBACN;EADAC,YAAA;IAOI;IAAA,KAAOC,oBAAuB;IAE9B,KAAQC,UAAa;IACrB,KAAQC,QAAW;IACnB,KAAQC,YAAe;IACvB,KAAQC,YAAe;EAAA;EAAA;AAAA;AAAA;AAAA;EAMhBC,KAAKC,MACZ;IACI,KAAKC,oBAAqB;IAC1B,KAAKD,MAAS,GAAAA,MAAA;IACd,KAAKN,oBAAuB;IAC5B,KAAKC,UAAa;IAClB,KAAKC,QAAW;IAChB,KAAKC,YAAe;IACpB,KAAKC,YAAe;EAAA;EACxB;EAGA,IAAII,WACJA,CAAA;IACI,OAAO,IAAK,CAAAJ,YAAA;EAAA;EAGhB,IAAII,YAAYC,MAChB;IACI,KAAKL,YAAe,GAAAK,MAAA;EAAA;EACxB;EAGOC,iBACPA,CAAA;IACI,IAAI,IAAK,CAAAP,YAAA,IAAgB,CAAC,KAAKQ,UAC/B;MACI;IAAA;IAGJC,MAAA,CAAOC,MAAA,CAAOC,GAAI,MAAKC,aAAe,QAAMC,eAAA,CAAgBC,WAAW;IAEvE,KAAKd,YAAe;EAAA;EACxB;EAGOI,oBACPA,CAAA;IACQ,KAAC,KAAKJ,YACV;MACI;IAAA;IAGJS,MAAA,CAAOC,MAAO,CAAAK,MAAA,CAAO,IAAK,CAAAH,aAAA,EAAe,IAAI;IAE7C,KAAKZ,YAAe;EAAA;EACxB;EAGOgB,YACPA,CAAA;IACI,KAAKjB,QAAW;EAAA;EACpB;EAGQkB,OACRA,CAAA;IACI,IAAI,CAAC,KAAKT,UAAc,SAAKP,YAC7B;MACI;IAAA;IAIJ,IAAI,KAAKF,QACT;MACI,KAAKA,QAAW;MAEhB;IAAA;IAIE,MAAAmB,gBAAA,GAAmB,IAAK,CAAAf,MAAA,CAAO,mBAAmB;IAExD,IAAI,IAAK,CAAAA,MAAA,CAAOgB,mBAAwB,IAAAD,gBAAA,CAAkCE,WAAA,KAAgB,OAC1F;MACI;IAAA;IAGJC,UAAA,CAAWC,QAAS,CAAAC,aAAA,CAAc,IAAIC,YAAA,CAAa,aAAe;MAC9DC,OAAA,EAASP,gBAAiB,CAAAO,OAAA;MAC1BC,OAAA,EAASR,gBAAiB,CAAAQ;IAAA,CAC7B,CAAC;EAAA;EACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASQd,cAAce,MACtB;IACI,KAAK7B,UAAA,IAAc6B,MAAO,CAAAC,SAAA;IAEtB,SAAK9B,UAAa,QAAKD,oBAC3B;MACI;IAAA;IAGJ,KAAKC,UAAa;IAElB,KAAKmB,OAAQ;EAAA;AAErB;AAEa,MAAAY,YAAA,GAAe,IAAIlC,iBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}