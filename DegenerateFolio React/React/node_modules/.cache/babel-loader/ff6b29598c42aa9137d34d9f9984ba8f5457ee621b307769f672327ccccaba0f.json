{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeBool = exports.encodeBoolean = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst utils_js_1 = require(\"../utils.js\");\nconst number_js_1 = require(\"./number.js\");\nfunction encodeBoolean(param, input) {\n  let value;\n  try {\n    value = (0, web3_utils_1.toBool)(input);\n  } catch (e) {\n    if (e instanceof web3_errors_1.InvalidBooleanError) {\n      throw new web3_errors_1.AbiError('provided input is not valid boolean value', {\n        type: param.type,\n        value: input,\n        name: param.name\n      });\n    }\n  }\n  return (0, number_js_1.encodeNumber)({\n    type: 'uint8',\n    name: ''\n  }, Number(value));\n}\nexports.encodeBoolean = encodeBoolean;\nfunction decodeBool(_param, bytes) {\n  const numberResult = (0, number_js_1.decodeNumber)({\n    type: 'uint8',\n    name: ''\n  }, bytes);\n  if (numberResult.result > 1 || numberResult.result < 0) {\n    throw new web3_errors_1.AbiError('Invalid boolean value encoded', {\n      boolBytes: bytes.subarray(0, utils_js_1.WORD_SIZE),\n      numberResult\n    });\n  }\n  return {\n    result: numberResult.result === BigInt(1),\n    encoded: numberResult.encoded,\n    consumed: utils_js_1.WORD_SIZE\n  };\n}\nexports.decodeBool = decodeBool;","map":{"version":3,"names":["web3_errors_1","require","web3_utils_1","utils_js_1","number_js_1","encodeBoolean","param","input","value","toBool","e","InvalidBooleanError","AbiError","type","name","encodeNumber","Number","exports","decodeBool","_param","bytes","numberResult","decodeNumber","result","boolBytes","subarray","WORD_SIZE","BigInt","encoded","consumed"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-abi/src/coders/base/bool.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError, InvalidBooleanError } from 'web3-errors';\nimport { AbiParameter } from 'web3-types';\nimport { toBool } from 'web3-utils';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\n\nexport function encodeBoolean(param: AbiParameter, input: unknown): EncoderResult {\n\tlet value;\n\ttry {\n\t\tvalue = toBool(input);\n\t} catch (e) {\n\t\tif (e instanceof InvalidBooleanError) {\n\t\t\tthrow new AbiError('provided input is not valid boolean value', {\n\t\t\t\ttype: param.type,\n\t\t\t\tvalue: input,\n\t\t\t\tname: param.name,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn encodeNumber({ type: 'uint8', name: '' }, Number(value));\n}\n\nexport function decodeBool(_param: AbiParameter, bytes: Uint8Array): DecoderResult<boolean> {\n\tconst numberResult = decodeNumber({ type: 'uint8', name: '' }, bytes);\n\tif (numberResult.result > 1 || numberResult.result < 0) {\n\t\tthrow new AbiError('Invalid boolean value encoded', {\n\t\t\tboolBytes: bytes.subarray(0, WORD_SIZE),\n\t\t\tnumberResult,\n\t\t});\n\t}\n\treturn {\n\t\tresult: numberResult.result === BigInt(1),\n\t\tencoded: numberResult.encoded,\n\t\tconsumed: WORD_SIZE,\n\t};\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,MAAAA,aAAA,GAAAC,OAAA;AAEA,MAAAC,YAAA,GAAAD,OAAA;AAEA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AAEA,SAAgBI,aAAaA,CAACC,KAAmB,EAAEC,KAAc;EAChE,IAAIC,KAAK;EACT,IAAI;IACHA,KAAK,GAAG,IAAAN,YAAA,CAAAO,MAAM,EAACF,KAAK,CAAC;GACrB,CAAC,OAAOG,CAAC,EAAE;IACX,IAAIA,CAAC,YAAYV,aAAA,CAAAW,mBAAmB,EAAE;MACrC,MAAM,IAAIX,aAAA,CAAAY,QAAQ,CAAC,2CAA2C,EAAE;QAC/DC,IAAI,EAAEP,KAAK,CAACO,IAAI;QAChBL,KAAK,EAAED,KAAK;QACZO,IAAI,EAAER,KAAK,CAACQ;OACZ,CAAC;;;EAIJ,OAAO,IAAAV,WAAA,CAAAW,YAAY,EAAC;IAAEF,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAE,CAAE,EAAEE,MAAM,CAACR,KAAK,CAAC,CAAC;AAChE;AAfAS,OAAA,CAAAZ,aAAA,GAAAA,aAAA;AAiBA,SAAgBa,UAAUA,CAACC,MAAoB,EAAEC,KAAiB;EACjE,MAAMC,YAAY,GAAG,IAAAjB,WAAA,CAAAkB,YAAY,EAAC;IAAET,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAE,CAAE,EAAEM,KAAK,CAAC;EACrE,IAAIC,YAAY,CAACE,MAAM,GAAG,CAAC,IAAIF,YAAY,CAACE,MAAM,GAAG,CAAC,EAAE;IACvD,MAAM,IAAIvB,aAAA,CAAAY,QAAQ,CAAC,+BAA+B,EAAE;MACnDY,SAAS,EAAEJ,KAAK,CAACK,QAAQ,CAAC,CAAC,EAAEtB,UAAA,CAAAuB,SAAS,CAAC;MACvCL;KACA,CAAC;;EAEH,OAAO;IACNE,MAAM,EAAEF,YAAY,CAACE,MAAM,KAAKI,MAAM,CAAC,CAAC,CAAC;IACzCC,OAAO,EAAEP,YAAY,CAACO,OAAO;IAC7BC,QAAQ,EAAE1B,UAAA,CAAAuB;GACV;AACF;AAbAT,OAAA,CAAAC,UAAA,GAAAA,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}