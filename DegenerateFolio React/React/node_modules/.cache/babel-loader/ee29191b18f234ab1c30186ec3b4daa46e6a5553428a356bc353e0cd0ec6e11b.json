{"ast":null,"code":"\"use strict\";\n\nclass Pool {\n  /**\n   * Constructs a new Pool.\n   * @param ClassType - The constructor of the items in the pool.\n   * @param {number} [initialSize] - The initial size of the pool.\n   */\n  constructor(ClassType, initialSize) {\n    this._pool = [];\n    this._count = 0;\n    this._index = 0;\n    this._classType = ClassType;\n    if (initialSize) {\n      this.prepopulate(initialSize);\n    }\n  }\n  /**\n   * Prepopulates the pool with a given number of items.\n   * @param total - The number of items to add to the pool.\n   */\n  prepopulate(total) {\n    for (let i = 0; i < total; i++) {\n      this._pool[this._index++] = new this._classType();\n    }\n    this._count += total;\n  }\n  /**\n   * Gets an item from the pool. Calls the item's `init` method if it exists.\n   * If there are no items left in the pool, a new one will be created.\n   * @param {unknown} [data] - Optional data to pass to the item's constructor.\n   * @returns {T} The item from the pool.\n   */\n  get(data) {\n    let item;\n    if (this._index > 0) {\n      item = this._pool[--this._index];\n    } else {\n      item = new this._classType();\n    }\n    item.init?.(data);\n    return item;\n  }\n  /**\n   * Returns an item to the pool. Calls the item's `reset` method if it exists.\n   * @param {T} item - The item to return to the pool.\n   */\n  return(item) {\n    item.reset?.();\n    this._pool[this._index++] = item;\n  }\n  /**\n   * Gets the number of items in the pool.\n   * @readonly\n   * @member {number}\n   */\n  get totalSize() {\n    return this._count;\n  }\n  /**\n   * Gets the number of items in the pool that are free to use without needing to create more.\n   * @readonly\n   * @member {number}\n   */\n  get totalFree() {\n    return this._index;\n  }\n  /**\n   * Gets the number of items in the pool that are currently in use.\n   * @readonly\n   * @member {number}\n   */\n  get totalUsed() {\n    return this._count - this._index;\n  }\n}\nexport { Pool };","map":{"version":3,"names":["Pool","constructor","ClassType","initialSize","_pool","_count","_index","_classType","prepopulate","total","i","get","data","item","init","return","reset","totalSize","totalFree","totalUsed"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/pool/Pool.ts"],"sourcesContent":["/**\n * A generic class for managing a pool of items.\n * @template T The type of items in the pool. Must implement {@link utils.PoolItem}.\n * @memberof utils\n */\nexport class Pool<T extends PoolItem>\n{\n    public readonly _classType: PoolItemConstructor<T>;\n    private readonly _pool: T[] = [];\n    private _count = 0;\n    private _index = 0;\n\n    /**\n     * Constructs a new Pool.\n     * @param ClassType - The constructor of the items in the pool.\n     * @param {number} [initialSize] - The initial size of the pool.\n     */\n    constructor(ClassType: PoolItemConstructor<T>, initialSize?: number)\n    {\n        this._classType = ClassType;\n\n        if (initialSize)\n        {\n            this.prepopulate(initialSize);\n        }\n    }\n\n    /**\n     * Prepopulates the pool with a given number of items.\n     * @param total - The number of items to add to the pool.\n     */\n    public prepopulate(total: number): void\n    {\n        for (let i = 0; i < total; i++)\n        {\n            this._pool[this._index++] = new this._classType();\n        }\n\n        this._count += total;\n    }\n\n    /**\n     * Gets an item from the pool. Calls the item's `init` method if it exists.\n     * If there are no items left in the pool, a new one will be created.\n     * @param {unknown} [data] - Optional data to pass to the item's constructor.\n     * @returns {T} The item from the pool.\n     */\n    public get(data?: unknown): T\n    {\n        let item;\n\n        if (this._index > 0)\n        {\n            item = this._pool[--this._index];\n        }\n        else\n        {\n            item = new this._classType();\n        }\n\n        item.init?.(data);\n\n        return item;\n    }\n\n    /**\n     * Returns an item to the pool. Calls the item's `reset` method if it exists.\n     * @param {T} item - The item to return to the pool.\n     */\n    public return(item: T): void\n    {\n        item.reset?.();\n\n        this._pool[this._index++] = item;\n    }\n\n    /**\n     * Gets the number of items in the pool.\n     * @readonly\n     * @member {number}\n     */\n    get totalSize(): number\n    {\n        return this._count;\n    }\n\n    /**\n     * Gets the number of items in the pool that are free to use without needing to create more.\n     * @readonly\n     * @member {number}\n     */\n    get totalFree(): number\n    {\n        return this._index;\n    }\n\n    /**\n     * Gets the number of items in the pool that are currently in use.\n     * @readonly\n     * @member {number}\n     */\n    get totalUsed(): number\n    {\n        return this._count - this._index;\n    }\n}\n\n/**\n * An object that can be stored in a {@link utils.Pool}.\n * @memberof utils\n */\nexport type PoolItem = {\n    init?: (data?: any) => void;\n    reset?: () => void;\n    [key: string]: any;\n};\n\n/**\n * The constructor of an object that can be stored in a {@link utils.Pool}.\n * @typeParam K - The type of the object that can be stored in a {@link utils.Pool}.\n * @memberof utils\n */\nexport type PoolItemConstructor<K extends PoolItem> = new () => K;\n"],"mappings":";;AAKO,MAAMA,IACb;EAAA;AAAA;AAAA;AAAA;AAAA;EAWIC,YAAYC,SAAA,EAAmCC,WAC/C;IAVA,KAAiBC,KAAA,GAAa,EAAC;IAC/B,KAAQC,MAAS;IACjB,KAAQC,MAAS;IASb,KAAKC,UAAa,GAAAL,SAAA;IAElB,IAAIC,WACJ;MACI,KAAKK,WAAA,CAAYL,WAAW;IAAA;EAChC;EACJ;AAAA;AAAA;AAAA;EAMOK,YAAYC,KACnB;IACI,SAASC,CAAI,MAAGA,CAAI,GAAAD,KAAA,EAAOC,CAC3B;MACI,KAAKN,KAAA,CAAM,IAAK,CAAAE,MAAA,EAAQ,CAAI,OAAI,KAAKC,UAAW;IAAA;IAGpD,KAAKF,MAAU,IAAAI,KAAA;EAAA;EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOE,IAAIC,IACX;IACQ,IAAAC,IAAA;IAEA,SAAKP,MAAA,GAAS,CAClB;MACIO,IAAA,GAAO,IAAK,CAAAT,KAAA,CAAM,EAAE,KAAKE,MAAM;IAAA,CAGnC;MACWO,IAAA,OAAI,KAAKN,UAAW;IAAA;IAG/BM,IAAA,CAAKC,IAAA,GAAOF,IAAI;IAET,OAAAC,IAAA;EAAA;EACX;AAAA;AAAA;AAAA;EAMOE,OAAOF,IACd;IACIA,IAAA,CAAKG,KAAQ;IAER,KAAAZ,KAAA,CAAM,IAAK,CAAAE,MAAA,EAAQ,CAAI,GAAAO,IAAA;EAAA;EAChC;AAAA;AAAA;AAAA;AAAA;EAOA,IAAII,SACJA,CAAA;IACI,OAAO,IAAK,CAAAZ,MAAA;EAAA;EAChB;AAAA;AAAA;AAAA;AAAA;EAOA,IAAIa,SACJA,CAAA;IACI,OAAO,IAAK,CAAAZ,MAAA;EAAA;EAChB;AAAA;AAAA;AAAA;AAAA;EAOA,IAAIa,SACJA,CAAA;IACW,YAAKd,MAAA,GAAS,IAAK,CAAAC,MAAA;EAAA;AAElC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}