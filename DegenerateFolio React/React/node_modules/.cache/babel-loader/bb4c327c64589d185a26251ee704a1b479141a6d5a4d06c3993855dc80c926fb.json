{"ast":null,"code":"import WorkerInstance from '../../../_virtual/checkImageBitmap.worker.mjs';\nimport WorkerInstance$1 from '../../../_virtual/loadImageBitmap.worker.mjs';\n\"use strict\";\nlet UUID = 0;\nlet MAX_WORKERS;\nclass WorkerManagerClass {\n  constructor() {\n    this._initialized = false;\n    this._createdWorkers = 0;\n    this._workerPool = [];\n    this._queue = [];\n    this._resolveHash = {};\n  }\n  isImageBitmapSupported() {\n    if (this._isImageBitmapSupported !== void 0) return this._isImageBitmapSupported;\n    this._isImageBitmapSupported = new Promise(resolve => {\n      const {\n        worker\n      } = new WorkerInstance();\n      worker.addEventListener(\"message\", event => {\n        worker.terminate();\n        WorkerInstance.revokeObjectURL();\n        resolve(event.data);\n      });\n    });\n    return this._isImageBitmapSupported;\n  }\n  loadImageBitmap(src) {\n    return this._run(\"loadImageBitmap\", [src]);\n  }\n  async _initWorkers() {\n    if (this._initialized) return;\n    this._initialized = true;\n  }\n  _getWorker() {\n    if (MAX_WORKERS === void 0) {\n      MAX_WORKERS = navigator.hardwareConcurrency || 4;\n    }\n    let worker = this._workerPool.pop();\n    if (!worker && this._createdWorkers < MAX_WORKERS) {\n      this._createdWorkers++;\n      worker = new WorkerInstance$1().worker;\n      worker.addEventListener(\"message\", event => {\n        this._complete(event.data);\n        this._returnWorker(event.target);\n        this._next();\n      });\n    }\n    return worker;\n  }\n  _returnWorker(worker) {\n    this._workerPool.push(worker);\n  }\n  _complete(data) {\n    if (data.error !== void 0) {\n      this._resolveHash[data.uuid].reject(data.error);\n    } else {\n      this._resolveHash[data.uuid].resolve(data.data);\n    }\n    this._resolveHash[data.uuid] = null;\n  }\n  async _run(id, args) {\n    await this._initWorkers();\n    const promise = new Promise((resolve, reject) => {\n      this._queue.push({\n        id,\n        arguments: args,\n        resolve,\n        reject\n      });\n    });\n    this._next();\n    return promise;\n  }\n  _next() {\n    if (!this._queue.length) return;\n    const worker = this._getWorker();\n    if (!worker) {\n      return;\n    }\n    const toDo = this._queue.pop();\n    const id = toDo.id;\n    this._resolveHash[UUID] = {\n      resolve: toDo.resolve,\n      reject: toDo.reject\n    };\n    worker.postMessage({\n      data: toDo.arguments,\n      uuid: UUID++,\n      id\n    });\n  }\n}\nconst WorkerManager = new WorkerManagerClass();\nexport { WorkerManager };","map":{"version":3,"names":["UUID","MAX_WORKERS","WorkerManagerClass","constructor","_initialized","_createdWorkers","_workerPool","_queue","_resolveHash","isImageBitmapSupported","_isImageBitmapSupported","Promise","resolve","worker","WorkerInstance","addEventListener","event","terminate","revokeObjectURL","data","loadImageBitmap","src","_run","_initWorkers","_getWorker","navigator","hardwareConcurrency","pop","WorkerInstance$1","_complete","_returnWorker","target","_next","push","error","uuid","reject","id","args","promise","arguments","length","toDo","postMessage","WorkerManager"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/assets/loader/workers/WorkerManager.ts"],"sourcesContent":["import CheckImageBitmapWorker from 'worker:./checkImageBitmap.worker.ts';\nimport LoadImageBitmapWorker from 'worker:./loadImageBitmap.worker.ts';\n\nlet UUID = 0;\nlet MAX_WORKERS: number;\n\ntype LoadImageBitmapResult = {\n    data?: ImageBitmap,\n    error?: Error,\n    uuid: number,\n    id: string,\n};\n\nclass WorkerManagerClass\n{\n    public worker: Worker;\n    private _resolveHash: {\n        [key: string]: {\n            resolve: (...param: any[]) => void;\n            reject: (...param: any[]) => void;\n        }\n    };\n    private readonly _workerPool: Worker[];\n    private readonly _queue: {\n        id: string;\n        arguments: any[];\n        resolve: (...param: any[]) => void;\n        reject: (...param: any[]) => void;\n    }[];\n    private _initialized = false;\n    private _createdWorkers = 0;\n    private _isImageBitmapSupported?: Promise<boolean>;\n\n    constructor()\n    {\n        this._workerPool = [];\n        this._queue = [];\n\n        this._resolveHash = {};\n    }\n\n    public isImageBitmapSupported(): Promise<boolean>\n    {\n        if (this._isImageBitmapSupported !== undefined) return this._isImageBitmapSupported;\n\n        this._isImageBitmapSupported = new Promise((resolve) =>\n        {\n            const { worker } = new CheckImageBitmapWorker();\n\n            worker.addEventListener('message', (event: MessageEvent<boolean>) =>\n            {\n                worker.terminate();\n                CheckImageBitmapWorker.revokeObjectURL();\n                resolve(event.data);\n            });\n        });\n\n        return this._isImageBitmapSupported;\n    }\n\n    public loadImageBitmap(src: string): Promise<ImageBitmap>\n    {\n        return this._run('loadImageBitmap', [src]) as Promise<ImageBitmap>;\n    }\n\n    private async _initWorkers()\n    {\n        if (this._initialized) return;\n\n        this._initialized = true;\n    }\n\n    private _getWorker(): Worker\n    {\n        if (MAX_WORKERS === undefined)\n        {\n            MAX_WORKERS = navigator.hardwareConcurrency || 4;\n        }\n        let worker = this._workerPool.pop();\n\n        if (!worker && this._createdWorkers < MAX_WORKERS)\n        {\n            // only create as many as MAX_WORKERS allows..\n            this._createdWorkers++;\n            worker = new LoadImageBitmapWorker().worker;\n\n            worker.addEventListener('message', (event: MessageEvent) =>\n            {\n                this._complete(event.data);\n\n                this._returnWorker(event.target as Worker);\n                this._next();\n            });\n        }\n\n        return worker;\n    }\n\n    private _returnWorker(worker: Worker)\n    {\n        this._workerPool.push(worker);\n    }\n\n    private _complete(data: LoadImageBitmapResult): void\n    {\n        if (data.error !== undefined)\n        {\n            this._resolveHash[data.uuid].reject(data.error);\n        }\n        else\n        {\n            this._resolveHash[data.uuid].resolve(data.data);\n        }\n\n        this._resolveHash[data.uuid] = null;\n    }\n\n    private async _run(id: string, args: any[]): Promise<any>\n    {\n        await this._initWorkers();\n        // push into the queue...\n\n        const promise = new Promise((resolve, reject) =>\n        {\n            this._queue.push({ id, arguments: args, resolve, reject });\n        });\n\n        this._next();\n\n        return promise;\n    }\n\n    private _next(): void\n    {\n        // nothing to do\n        if (!this._queue.length) return;\n\n        const worker = this._getWorker();\n\n        // no workers available...\n        if (!worker)\n        {\n            return;\n        }\n\n        const toDo = this._queue.pop();\n\n        const id = toDo.id;\n\n        this._resolveHash[UUID] = { resolve: toDo.resolve, reject: toDo.reject };\n\n        worker.postMessage({\n            data: toDo.arguments,\n            uuid: UUID++,\n            id,\n        });\n    }\n}\n\nconst WorkerManager = new WorkerManagerClass();\n\nexport {\n    WorkerManager,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}