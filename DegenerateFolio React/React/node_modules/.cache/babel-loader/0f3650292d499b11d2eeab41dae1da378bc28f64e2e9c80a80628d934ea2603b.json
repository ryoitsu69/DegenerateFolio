{"ast":null,"code":"import { Buffer } from '../../shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../shared/buffer/const.mjs';\n\"use strict\";\nfunction GpuReadBuffer(buffer, renderer) {\n  const bufferSize = buffer.descriptor.size;\n  const device = renderer.gpu.device;\n  const stagingBuffer = new Buffer({\n    data: new Float32Array(24e5),\n    usage: BufferUsage.MAP_READ | BufferUsage.COPY_DST\n  });\n  const stagingGPUBuffer = renderer.buffer.createGPUBuffer(stagingBuffer);\n  const commandEncoder = device.createCommandEncoder();\n  commandEncoder.copyBufferToBuffer(renderer.buffer.getGPUBuffer(buffer), 0,\n  // Source offset\n  stagingGPUBuffer, 0,\n  // Destination offset\n  bufferSize);\n  device.queue.submit([commandEncoder.finish()]);\n  void stagingGPUBuffer.mapAsync(GPUMapMode.READ, 0,\n  // Offset\n  bufferSize\n  // Length\n  ).then(() => {\n    stagingGPUBuffer.getMappedRange(0, bufferSize);\n    stagingGPUBuffer.unmap();\n  });\n}\nexport { GpuReadBuffer };","map":{"version":3,"names":["GpuReadBuffer","buffer","renderer","bufferSize","descriptor","size","device","gpu","stagingBuffer","Buffer","data","Float32Array","usage","BufferUsage","MAP_READ","COPY_DST","stagingGPUBuffer","createGPUBuffer","commandEncoder","createCommandEncoder","copyBufferToBuffer","getGPUBuffer","queue","submit","finish","mapAsync","GPUMapMode","READ","then","getMappedRange","unmap"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/buffer/GpuReadBuffer.ts"],"sourcesContent":["import { Buffer } from '../../shared/buffer/Buffer';\nimport { BufferUsage } from '../../shared/buffer/const';\n\nimport type { WebGPURenderer } from '../WebGPURenderer';\n\nexport function GpuReadBuffer(buffer: Buffer, renderer: WebGPURenderer)\n{\n    const bufferSize = buffer.descriptor.size;\n\n    const device = renderer.gpu.device;\n\n    const stagingBuffer = new Buffer({\n        data: new Float32Array(2400000),\n        usage: BufferUsage.MAP_READ | BufferUsage.COPY_DST,\n    });\n\n    const stagingGPUBuffer = renderer.buffer.createGPUBuffer(stagingBuffer);\n\n    const commandEncoder = device.createCommandEncoder();\n\n    commandEncoder.copyBufferToBuffer(\n        renderer.buffer.getGPUBuffer(buffer),\n        0, // Source offset\n        stagingGPUBuffer,\n        0, // Destination offset\n        bufferSize,\n    );\n\n    device.queue.submit([commandEncoder.finish()]);\n\n    void stagingGPUBuffer.mapAsync(\n        GPUMapMode.READ,\n        0, // Offset\n        bufferSize, // Length\n    ).then(() =>\n    {\n        stagingGPUBuffer.getMappedRange(0, bufferSize);\n        stagingGPUBuffer.unmap();\n    });\n}\n"],"mappings":";;;AAKgB,SAAAA,cAAcC,MAAA,EAAgBC,QAC9C;EACU,MAAAC,UAAA,GAAaF,MAAA,CAAOG,UAAW,CAAAC,IAAA;EAE/B,MAAAC,MAAA,GAASJ,QAAA,CAASK,GAAI,CAAAD,MAAA;EAEtB,MAAAE,aAAA,GAAgB,IAAIC,MAAO;IAC7BC,IAAA,EAAM,IAAIC,YAAA,CAAa,IAAO;IAC9BC,KAAA,EAAOC,WAAY,CAAAC,QAAA,GAAWD,WAAY,CAAAE;EAAA,CAC7C;EAED,MAAMC,gBAAmB,GAAAd,QAAA,CAASD,MAAO,CAAAgB,eAAA,CAAgBT,aAAa;EAEhE,MAAAU,cAAA,GAAiBZ,MAAA,CAAOa,oBAAqB;EAEpCD,cAAA,CAAAE,kBAAA,CACXlB,QAAA,CAASD,MAAO,CAAAoB,YAAA,CAAapB,MAAM,GACnC;EAAA;EACAe,gBAAA,EACA;EAAA;EACAb,UAAA,CACJ;EAEAG,MAAA,CAAOgB,KAAA,CAAMC,MAAO,EAACL,cAAe,CAAAM,MAAA,EAAQ,CAAC;EAE7C,KAAKR,gBAAiB,CAAAS,QAAA,CAClBC,UAAW,CAAAC,IAAA,EACX;EAAA;EACAxB;EAAA;EAAA,CACJ,CAAEyB,IAAA,CAAK,MACP;IACqBZ,gBAAA,CAAAa,cAAA,CAAe,GAAG1B,UAAU;IAC7Ca,gBAAA,CAAiBc,KAAM;EAAA,CAC1B;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}