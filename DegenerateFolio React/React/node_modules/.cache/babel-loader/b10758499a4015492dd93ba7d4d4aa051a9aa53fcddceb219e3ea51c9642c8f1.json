{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst jszip = require('jszip');\nconst path = require('path');\nconst io = require('./index');\nconst {\n  InvalidArgumentError\n} = require('../lib/error');\n\n/**\n * Manages a zip archive.\n */\nclass Zip {\n  constructor() {\n    /** @private @const */\n    this.z_ = new jszip();\n\n    /** @private @const {!Set<!Promise<?>>} */\n    this.pendingAdds_ = new Set();\n  }\n\n  /**\n   * Adds a file to this zip.\n   *\n   * @param {string} filePath path to the file to add.\n   * @param {string=} zipPath path to the file in the zip archive, defaults\n   *     to the basename of `filePath`.\n   * @return {!Promise<?>} a promise that will resolve when added.\n   */\n  addFile(filePath, zipPath = path.basename(filePath)) {\n    let add = io.read(filePath).then(buffer => this.z_.file( /** @type {string} */zipPath.replace(/\\\\/g, '/'), buffer));\n    this.pendingAdds_.add(add);\n    return add.then(() => this.pendingAdds_.delete(add), e => {\n      this.pendingAdds_.delete(add);\n      throw e;\n    });\n  }\n\n  /**\n   * Recursively adds a directory and all of its contents to this archive.\n   *\n   * @param {string} dirPath path to the directory to add.\n   * @param {string=} zipPath path to the folder in the archive to add the\n   *     directory contents to. Defaults to the root folder.\n   * @return {!Promise<?>} returns a promise that will resolve when\n   * the operation is complete.\n   */\n  addDir(dirPath, zipPath = '') {\n    return io.walkDir(dirPath).then(entries => {\n      let archive = this.z_;\n      if (zipPath) {\n        archive = archive.folder(zipPath);\n      }\n      let files = [];\n      entries.forEach(spec => {\n        if (spec.dir) {\n          archive.folder(spec.path);\n        } else {\n          files.push(this.addFile(path.join(dirPath, spec.path), path.join(zipPath, spec.path)));\n        }\n      });\n      return Promise.all(files);\n    });\n  }\n\n  /**\n   * @param {string} path File path to test for within the archive.\n   * @return {boolean} Whether this zip archive contains an entry with the given\n   *     path.\n   */\n  has(path) {\n    return this.z_.file(path) !== null;\n  }\n\n  /**\n   * Returns the contents of the file in this zip archive with the given `path`.\n   * The returned promise will be rejected with an {@link InvalidArgumentError}\n   * if either `path` does not exist within the archive, or if `path` refers\n   * to a directory.\n   *\n   * @param {string} path the path to the file whose contents to return.\n   * @return {!Promise<!Buffer>} a promise that will be resolved with the file's\n   *     contents as a buffer.\n   */\n  getFile(path) {\n    let file = this.z_.file(path);\n    if (!file) {\n      return Promise.reject(new InvalidArgumentError(`No such file in zip archive: ${path}`));\n    }\n    if (file.dir) {\n      return Promise.reject(new InvalidArgumentError(`The requested file is a directory: ${path}`));\n    }\n    return Promise.resolve(file.async('nodebuffer'));\n  }\n\n  /**\n   * Returns the compressed data for this archive in a buffer. _This method will\n   * not wait for any outstanding {@link #addFile add}\n   * {@link #addDir operations} before encoding the archive._\n   *\n   * @param {string} compression The desired compression.\n   *     Must be `STORE` (the default) or `DEFLATE`.\n   * @return {!Promise<!Buffer>} a promise that will resolve with this archive\n   *     as a buffer.\n   */\n  toBuffer(compression = 'STORE') {\n    if (compression !== 'STORE' && compression !== 'DEFLATE') {\n      return Promise.reject(new InvalidArgumentError(`compression must be one of {STORE, DEFLATE}, got ${compression}`));\n    }\n    return Promise.resolve(this.z_.generateAsync({\n      compression,\n      type: 'nodebuffer'\n    }));\n  }\n}\n\n/**\n * Asynchronously opens a zip archive.\n *\n * @param {string} path to the zip archive to load.\n * @return {!Promise<!Zip>} a promise that will resolve with the opened\n *     archive.\n */\nfunction load(path) {\n  return io.read(path).then(data => {\n    let zip = new Zip();\n    return zip.z_.loadAsync(data).then(() => zip);\n  });\n}\n\n/**\n * Asynchronously unzips an archive file.\n *\n * @param {string} src path to the source file to unzip.\n * @param {string} dst path to the destination directory.\n * @return {!Promise<string>} a promise that will resolve with `dst` once the\n *     archive has been unzipped.\n */\nfunction unzip(src, dst) {\n  return load(src).then(zip => {\n    const promisedDirs = new Map();\n    const promises = [];\n    zip.z_.forEach((relPath, file) => {\n      let p;\n      if (file.dir) {\n        p = createDir(relPath);\n      } else {\n        let dirname = path.dirname(relPath);\n        if (dirname === '.') {\n          p = writeFile(relPath, file);\n        } else {\n          p = createDir(dirname).then(() => writeFile(relPath, file));\n        }\n      }\n      promises.push(p);\n    });\n    return Promise.all(promises).then(() => dst);\n    function createDir(dir) {\n      let p = promisedDirs.get(dir);\n      if (!p) {\n        p = io.mkdirp(path.join(dst, dir));\n        promisedDirs.set(dir, p);\n      }\n      return p;\n    }\n    function writeFile(relPath, file) {\n      return file.async('nodebuffer').then(buffer => io.write(path.join(dst, relPath), buffer));\n    }\n  });\n}\n\n// PUBLIC API\nmodule.exports = {\n  Zip,\n  load,\n  unzip\n};","map":{"version":3,"names":["jszip","require","path","io","InvalidArgumentError","Zip","constructor","z_","pendingAdds_","Set","addFile","filePath","zipPath","basename","add","read","then","buffer","file","replace","delete","e","addDir","dirPath","walkDir","entries","archive","folder","files","forEach","spec","dir","push","join","Promise","all","has","getFile","reject","resolve","async","toBuffer","compression","generateAsync","type","load","data","zip","loadAsync","unzip","src","dst","promisedDirs","Map","promises","relPath","p","createDir","dirname","writeFile","get","mkdirp","set","write","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/io/zip.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\nconst jszip = require('jszip')\nconst path = require('path')\n\nconst io = require('./index')\nconst { InvalidArgumentError } = require('../lib/error')\n\n/**\n * Manages a zip archive.\n */\nclass Zip {\n  constructor() {\n    /** @private @const */\n    this.z_ = new jszip()\n\n    /** @private @const {!Set<!Promise<?>>} */\n    this.pendingAdds_ = new Set()\n  }\n\n  /**\n   * Adds a file to this zip.\n   *\n   * @param {string} filePath path to the file to add.\n   * @param {string=} zipPath path to the file in the zip archive, defaults\n   *     to the basename of `filePath`.\n   * @return {!Promise<?>} a promise that will resolve when added.\n   */\n  addFile(filePath, zipPath = path.basename(filePath)) {\n    let add = io\n      .read(filePath)\n      .then((buffer) => this.z_.file(/** @type {string} */ (zipPath.replace(/\\\\/g, '/')), buffer))\n    this.pendingAdds_.add(add)\n    return add.then(\n      () => this.pendingAdds_.delete(add),\n      (e) => {\n        this.pendingAdds_.delete(add)\n        throw e\n      },\n    )\n  }\n\n  /**\n   * Recursively adds a directory and all of its contents to this archive.\n   *\n   * @param {string} dirPath path to the directory to add.\n   * @param {string=} zipPath path to the folder in the archive to add the\n   *     directory contents to. Defaults to the root folder.\n   * @return {!Promise<?>} returns a promise that will resolve when\n   * the operation is complete.\n   */\n  addDir(dirPath, zipPath = '') {\n    return io.walkDir(dirPath).then((entries) => {\n      let archive = this.z_\n      if (zipPath) {\n        archive = archive.folder(zipPath)\n      }\n\n      let files = []\n      entries.forEach((spec) => {\n        if (spec.dir) {\n          archive.folder(spec.path)\n        } else {\n          files.push(this.addFile(path.join(dirPath, spec.path), path.join(zipPath, spec.path)))\n        }\n      })\n\n      return Promise.all(files)\n    })\n  }\n\n  /**\n   * @param {string} path File path to test for within the archive.\n   * @return {boolean} Whether this zip archive contains an entry with the given\n   *     path.\n   */\n  has(path) {\n    return this.z_.file(path) !== null\n  }\n\n  /**\n   * Returns the contents of the file in this zip archive with the given `path`.\n   * The returned promise will be rejected with an {@link InvalidArgumentError}\n   * if either `path` does not exist within the archive, or if `path` refers\n   * to a directory.\n   *\n   * @param {string} path the path to the file whose contents to return.\n   * @return {!Promise<!Buffer>} a promise that will be resolved with the file's\n   *     contents as a buffer.\n   */\n  getFile(path) {\n    let file = this.z_.file(path)\n    if (!file) {\n      return Promise.reject(new InvalidArgumentError(`No such file in zip archive: ${path}`))\n    }\n\n    if (file.dir) {\n      return Promise.reject(new InvalidArgumentError(`The requested file is a directory: ${path}`))\n    }\n\n    return Promise.resolve(file.async('nodebuffer'))\n  }\n\n  /**\n   * Returns the compressed data for this archive in a buffer. _This method will\n   * not wait for any outstanding {@link #addFile add}\n   * {@link #addDir operations} before encoding the archive._\n   *\n   * @param {string} compression The desired compression.\n   *     Must be `STORE` (the default) or `DEFLATE`.\n   * @return {!Promise<!Buffer>} a promise that will resolve with this archive\n   *     as a buffer.\n   */\n  toBuffer(compression = 'STORE') {\n    if (compression !== 'STORE' && compression !== 'DEFLATE') {\n      return Promise.reject(new InvalidArgumentError(`compression must be one of {STORE, DEFLATE}, got ${compression}`))\n    }\n    return Promise.resolve(this.z_.generateAsync({ compression, type: 'nodebuffer' }))\n  }\n}\n\n/**\n * Asynchronously opens a zip archive.\n *\n * @param {string} path to the zip archive to load.\n * @return {!Promise<!Zip>} a promise that will resolve with the opened\n *     archive.\n */\nfunction load(path) {\n  return io.read(path).then((data) => {\n    let zip = new Zip()\n    return zip.z_.loadAsync(data).then(() => zip)\n  })\n}\n\n/**\n * Asynchronously unzips an archive file.\n *\n * @param {string} src path to the source file to unzip.\n * @param {string} dst path to the destination directory.\n * @return {!Promise<string>} a promise that will resolve with `dst` once the\n *     archive has been unzipped.\n */\nfunction unzip(src, dst) {\n  return load(src).then((zip) => {\n    const promisedDirs = new Map()\n    const promises = []\n\n    zip.z_.forEach((relPath, file) => {\n      let p\n      if (file.dir) {\n        p = createDir(relPath)\n      } else {\n        let dirname = path.dirname(relPath)\n        if (dirname === '.') {\n          p = writeFile(relPath, file)\n        } else {\n          p = createDir(dirname).then(() => writeFile(relPath, file))\n        }\n      }\n      promises.push(p)\n    })\n\n    return Promise.all(promises).then(() => dst)\n\n    function createDir(dir) {\n      let p = promisedDirs.get(dir)\n      if (!p) {\n        p = io.mkdirp(path.join(dst, dir))\n        promisedDirs.set(dir, p)\n      }\n      return p\n    }\n\n    function writeFile(relPath, file) {\n      return file.async('nodebuffer').then((buffer) => io.write(path.join(dst, relPath), buffer))\n    }\n  })\n}\n\n// PUBLIC API\nmodule.exports = { Zip, load, unzip }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}