{"ast":null,"code":"import { bnToBn } from './toBn.js';\nconst DEFAULT_OPTS = {\n  bitLength: -1,\n  isLe: true,\n  isNegative: false\n};\n/**\n * @name bnToU8a\n * @summary Creates a Uint8Array object from a BN.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.\n * @example\n * <BR>\n *\n * ```javascript\n * import { bnToU8a } from '@polkadot/util';\n *\n * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]\n * ```\n */\nexport function bnToU8a(value, {\n  bitLength = -1,\n  isLe = true,\n  isNegative = false\n} = DEFAULT_OPTS) {\n  const valueBn = bnToBn(value);\n  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);\n  if (!value) {\n    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);\n  }\n  const output = new Uint8Array(byteLength);\n  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;\n  output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);\n  return output;\n}","map":{"version":3,"names":["bnToBn","DEFAULT_OPTS","bitLength","isLe","isNegative","bnToU8a","value","valueBn","byteLength","Math","ceil","Uint8Array","output","bn","toTwos","set","toArray"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/bn/toU8a.js"],"sourcesContent":["import { bnToBn } from './toBn.js';\nconst DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };\n/**\n * @name bnToU8a\n * @summary Creates a Uint8Array object from a BN.\n * @description\n * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.\n * @example\n * <BR>\n *\n * ```javascript\n * import { bnToU8a } from '@polkadot/util';\n *\n * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]\n * ```\n */\nexport function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {\n    const valueBn = bnToBn(value);\n    const byteLength = bitLength === -1\n        ? Math.ceil(valueBn.bitLength() / 8)\n        : Math.ceil((bitLength || 0) / 8);\n    if (!value) {\n        return bitLength === -1\n            ? new Uint8Array(1)\n            : new Uint8Array(byteLength);\n    }\n    const output = new Uint8Array(byteLength);\n    const bn = isNegative\n        ? valueBn.toTwos(byteLength * 8)\n        : valueBn;\n    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);\n    return output;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,WAAW;AAClC,MAAMC,YAAY,GAAG;EAAEC,SAAS,EAAE,CAAC,CAAC;EAAEC,IAAI,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAM,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,KAAK,EAAE;EAAEJ,SAAS,GAAG,CAAC,CAAC;EAAEC,IAAI,GAAG,IAAI;EAAEC,UAAU,GAAG;AAAM,CAAC,GAAGH,YAAY,EAAE;EAC/F,MAAMM,OAAO,GAAGP,MAAM,CAACM,KAAK,CAAC;EAC7B,MAAME,UAAU,GAAGN,SAAS,KAAK,CAAC,CAAC,GAC7BO,IAAI,CAACC,IAAI,CAACH,OAAO,CAACL,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAClCO,IAAI,CAACC,IAAI,CAAC,CAACR,SAAS,IAAI,CAAC,IAAI,CAAC,CAAC;EACrC,IAAI,CAACI,KAAK,EAAE;IACR,OAAOJ,SAAS,KAAK,CAAC,CAAC,GACjB,IAAIS,UAAU,CAAC,CAAC,CAAC,GACjB,IAAIA,UAAU,CAACH,UAAU,CAAC;EACpC;EACA,MAAMI,MAAM,GAAG,IAAID,UAAU,CAACH,UAAU,CAAC;EACzC,MAAMK,EAAE,GAAGT,UAAU,GACfG,OAAO,CAACO,MAAM,CAACN,UAAU,GAAG,CAAC,CAAC,GAC9BD,OAAO;EACbK,MAAM,CAACG,GAAG,CAACF,EAAE,CAACG,OAAO,CAACb,IAAI,GAAG,IAAI,GAAG,IAAI,EAAEK,UAAU,CAAC,EAAE,CAAC,CAAC;EACzD,OAAOI,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}