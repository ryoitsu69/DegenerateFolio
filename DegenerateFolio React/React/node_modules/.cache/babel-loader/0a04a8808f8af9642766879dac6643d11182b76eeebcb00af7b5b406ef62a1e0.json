{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */BigInt(0);\nconst _1n = /* @__PURE__ */BigInt(1);\nconst _2n = /* @__PURE__ */BigInt(2);\nconst _7n = /* @__PURE__ */BigInt(7);\nconst _256n = /* @__PURE__ */BigInt(256);\nconst _0x71n = /* @__PURE__ */BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n    if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */BigInt(j)) - _1n;\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */(0, _u64_js_1.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    this.pos = 0;\n    this.posOut = 0;\n    this.finished = false;\n    this.destroyed = false;\n    // Can be passed from user as dkLen\n    (0, _assert_js_1.number)(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = (0, utils_js_1.u32)(this.state);\n  }\n  keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data) {\n    (0, _assert_js_1.exists)(this);\n    const {\n      blockLen,\n      state\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const {\n      state,\n      suffix,\n      pos,\n      blockLen\n    } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  writeInto(out) {\n    (0, _assert_js_1.exists)(this, false);\n    (0, _assert_js_1.bytes)(out);\n    this.finish();\n    const bufferOut = this.state;\n    const {\n      blockLen\n    } = this;\n    for (let pos = 0, len = out.length; pos < len;) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out) {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes) {\n    (0, _assert_js_1.number)(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out) {\n    (0, _assert_js_1.output)(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to) {\n    const {\n      blockLen,\n      suffix,\n      outputLen,\n      rounds,\n      enableXOF\n    } = this;\n    to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);","map":{"version":3,"names":["_assert_js_1","require","_u64_js_1","utils_js_1","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","BigInt","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","split","rotlH","h","l","s","rotlBH","rotlSH","rotlL","rotlBL","rotlSL","keccakP","rounds","B","Uint32Array","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","fill","exports","Keccak","Hash","constructor","blockLen","suffix","outputLen","enableXOF","pos","posOut","finished","destroyed","number","Error","state","Uint8Array","state32","u32","keccak","update","data","exists","toBytes","len","length","take","Math","min","i","finish","writeInto","out","bytes","bufferOut","set","subarray","xofInto","xof","digestInto","output","destroy","digest","_cloneInto","to","gen","wrapConstructor","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_256","keccak_384","keccak_512","genShake","wrapXOFConstructorWithOpts","opts","dkLen","undefined","shake128","shake256"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@noble/hashes/src/sha3.ts"],"sourcesContent":["import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}