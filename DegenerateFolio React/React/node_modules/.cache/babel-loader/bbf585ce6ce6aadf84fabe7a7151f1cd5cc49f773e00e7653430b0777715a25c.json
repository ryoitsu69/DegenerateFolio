{"ast":null,"code":"import { TextFormat } from \"./TextFormat.mjs\";\nimport { XMLFormat } from \"./XMLFormat.mjs\";\nimport { XMLStringFormat } from \"./XMLStringFormat.mjs\";\nconst formats = [TextFormat, XMLFormat, XMLStringFormat];\nfunction autoDetectFormat(data) {\n  for (let i = 0; i < formats.length; i++) if (formats[i].test(data)) return formats[i];\n  return null;\n}\nexport { TextFormat, XMLFormat, XMLStringFormat, autoDetectFormat };","map":{"version":3,"names":["formats","TextFormat","XMLFormat","XMLStringFormat","autoDetectFormat","data","i","length","test"],"sources":["/home/ryoitsu/node_modules/@pixi/text-bitmap/src/formats/index.ts"],"sourcesContent":["import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\nimport type { BitmapFontData } from '../BitmapFontData';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @returns {any} Format or null\n */\nexport function autoDetectFormat(data: string | XMLDocument | BitmapFontData): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n\nexport type { IBitmapFontRawData } from './TextFormat';\nexport { TextFormat, XMLFormat, XMLStringFormat };\n"],"mappings":";;;AAOA,MAAMA,OAAA,GAAU,CACZC,UAAA,EACAC,SAAA,EACAC,eAAA,CACJ;AAQO,SAASC,iBAAiBC,IAAA,EACjC;EACI,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIN,OAAA,CAAQO,MAAA,EAAQD,CAAA,IAEhC,IAAIN,OAAA,CAAQM,CAAC,EAAEE,IAAA,CAAKH,IAAI,GAEpB,OAAOL,OAAA,CAAQM,CAAC;EAIjB;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}