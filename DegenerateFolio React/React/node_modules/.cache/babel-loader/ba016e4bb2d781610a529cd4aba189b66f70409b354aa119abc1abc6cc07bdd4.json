{"ast":null,"code":"import { BigInt } from '@polkadot/x-bigint';\nimport { _1n } from '../bi/consts.js';\nconst U8_MAX = BigInt(256);\nconst U16_MAX = BigInt(256 * 256);\nconst U64_MAX = BigInt('0x10000000000000000');\n/**\n * @name u8aToBigInt\n * @summary Creates a BigInt from a Uint8Array object.\n */\nexport function u8aToBigInt(value) {\n  let {\n    isLe = true,\n    isNegative = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // slice + reverse is expensive, however SCALE is LE by default so this is the path\n  // we are most interested in (the BE is added for the sake of being comprehensive)\n  if (!isLe) {\n    value = value.slice().reverse();\n  }\n  const count = value.length;\n  if (isNegative && count && value[count - 1] & 0x80) {\n    switch (count) {\n      case 0:\n        return BigInt(0);\n      case 1:\n        return BigInt((value[0] ^ 255) * -1 - 1);\n      case 2:\n        return BigInt((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);\n      case 4:\n        return BigInt((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);\n    }\n    const dvI = new DataView(value.buffer, value.byteOffset);\n    if (count === 8) {\n      return dvI.getBigInt64(0, true);\n    }\n    let result = BigInt(0);\n    const mod = count % 2;\n    for (let i = count - 2; i >= mod; i -= 2) {\n      result = result * U16_MAX + BigInt(dvI.getUint16(i, true) ^ 0xffff);\n    }\n    if (mod) {\n      result = result * U8_MAX + BigInt(value[0] ^ 0xff);\n    }\n    return result * -_1n - _1n;\n  }\n  switch (count) {\n    case 0:\n      return BigInt(0);\n    case 1:\n      return BigInt(value[0]);\n    case 2:\n      return BigInt(value[0] + (value[1] << 8));\n    case 4:\n      return BigInt(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);\n  }\n  const dvI = new DataView(value.buffer, value.byteOffset);\n  switch (count) {\n    case 8:\n      return dvI.getBigUint64(0, true);\n    case 16:\n      return dvI.getBigUint64(8, true) * U64_MAX + dvI.getBigUint64(0, true);\n    default:\n      {\n        let result = BigInt(0);\n        const mod = count % 2;\n        for (let i = count - 2; i >= mod; i -= 2) {\n          result = result * U16_MAX + BigInt(dvI.getUint16(i, true));\n        }\n        if (mod) {\n          result = result * U8_MAX + BigInt(value[0]);\n        }\n        return result;\n      }\n  }\n}","map":{"version":3,"names":["BigInt","_1n","U8_MAX","U16_MAX","U64_MAX","u8aToBigInt","value","isLe","isNegative","arguments","length","undefined","slice","reverse","count","dvI","DataView","buffer","byteOffset","getBigInt64","result","mod","i","getUint16","getBigUint64"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/u8a/toBigInt.js"],"sourcesContent":["import { BigInt } from '@polkadot/x-bigint';\nimport { _1n } from '../bi/consts.js';\nconst U8_MAX = BigInt(256);\nconst U16_MAX = BigInt(256 * 256);\nconst U64_MAX = BigInt('0x10000000000000000');\n/**\n * @name u8aToBigInt\n * @summary Creates a BigInt from a Uint8Array object.\n */\nexport function u8aToBigInt(value, { isLe = true, isNegative = false } = {}) {\n    // slice + reverse is expensive, however SCALE is LE by default so this is the path\n    // we are most interested in (the BE is added for the sake of being comprehensive)\n    if (!isLe) {\n        value = value.slice().reverse();\n    }\n    const count = value.length;\n    if (isNegative && count && (value[count - 1] & 0x80)) {\n        switch (count) {\n            case 0:\n                return BigInt(0);\n            case 1:\n                return BigInt(((value[0] ^ 255) * -1) - 1);\n            case 2:\n                return BigInt((((value[0] + (value[1] << 8)) ^ 65535) * -1) - 1);\n            case 4:\n                return BigInt((((value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216)) ^ 4294967295) * -1) - 1);\n        }\n        const dvI = new DataView(value.buffer, value.byteOffset);\n        if (count === 8) {\n            return dvI.getBigInt64(0, true);\n        }\n        let result = BigInt(0);\n        const mod = count % 2;\n        for (let i = count - 2; i >= mod; i -= 2) {\n            result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true) ^ 0xffff);\n        }\n        if (mod) {\n            result = (result * U8_MAX) + BigInt(value[0] ^ 0xff);\n        }\n        return (result * -_1n) - _1n;\n    }\n    switch (count) {\n        case 0:\n            return BigInt(0);\n        case 1:\n            return BigInt(value[0]);\n        case 2:\n            return BigInt(value[0] + (value[1] << 8));\n        case 4:\n            return BigInt(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] * 16777216));\n    }\n    const dvI = new DataView(value.buffer, value.byteOffset);\n    switch (count) {\n        case 8:\n            return dvI.getBigUint64(0, true);\n        case 16:\n            return (dvI.getBigUint64(8, true) * U64_MAX) + dvI.getBigUint64(0, true);\n        default: {\n            let result = BigInt(0);\n            const mod = count % 2;\n            for (let i = count - 2; i >= mod; i -= 2) {\n                result = (result * U16_MAX) + BigInt(dvI.getUint16(i, true));\n            }\n            if (mod) {\n                result = (result * U8_MAX) + BigInt(value[0]);\n            }\n            return result;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}