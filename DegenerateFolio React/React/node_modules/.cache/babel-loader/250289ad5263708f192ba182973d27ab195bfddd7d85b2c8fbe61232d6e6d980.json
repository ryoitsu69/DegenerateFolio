{"ast":null,"code":"import { BN } from '../bn/bn.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n/**\n * @name hexToBn\n * @summary Creates a BN.js object from a hex string.\n * @description\n * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @param _value The value to convert\n * @param _options Options to pass while converting\n * @param _options.isLe Convert using Little Endian\n * @param _options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToBn } from '@polkadot/util';\n *\n * hexToBn('0x123480001f'); // => BN(0x123480001f)\n * ```\n */\nexport function hexToBn(value, {\n  isLe = false,\n  isNegative = false\n} = {}) {\n  if (!value || value === '0x') {\n    return new BN(0);\n  }\n  const stripped = hexStripPrefix(value);\n  const bn = new BN(stripped, 16, isLe ? 'le' : 'be');\n  // fromTwos takes as parameter the number of bits, which is the hex length\n  // multiplied by 4 (2 bytes being 8 bits)\n  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;\n}","map":{"version":3,"names":["BN","hexStripPrefix","hexToBn","value","isLe","isNegative","stripped","bn","fromTwos","length"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/hex/toBn.js"],"sourcesContent":["import { BN } from '../bn/bn.js';\nimport { hexStripPrefix } from './stripPrefix.js';\n/**\n * @name hexToBn\n * @summary Creates a BN.js object from a hex string.\n * @description\n * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.\n * @param _value The value to convert\n * @param _options Options to pass while converting\n * @param _options.isLe Convert using Little Endian\n * @param _options.isNegative Convert using two's complement\n * @example\n * <BR>\n *\n * ```javascript\n * import { hexToBn } from '@polkadot/util';\n *\n * hexToBn('0x123480001f'); // => BN(0x123480001f)\n * ```\n */\nexport function hexToBn(value, { isLe = false, isNegative = false } = {}) {\n    if (!value || value === '0x') {\n        return new BN(0);\n    }\n    const stripped = hexStripPrefix(value);\n    const bn = new BN(stripped, 16, isLe ? 'le' : 'be');\n    // fromTwos takes as parameter the number of bits, which is the hex length\n    // multiplied by 4 (2 bytes being 8 bits)\n    return isNegative\n        ? bn.fromTwos(stripped.length * 4)\n        : bn;\n}\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,aAAa;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,KAAK,EAAE;EAAEC,IAAI,GAAG,KAAK;EAAEC,UAAU,GAAG;AAAM,CAAC,GAAG,CAAC,CAAC,EAAE;EACtE,IAAI,CAACF,KAAK,IAAIA,KAAK,KAAK,IAAI,EAAE;IAC1B,OAAO,IAAIH,EAAE,CAAC,CAAC,CAAC;EACpB;EACA,MAAMM,QAAQ,GAAGL,cAAc,CAACE,KAAK,CAAC;EACtC,MAAMI,EAAE,GAAG,IAAIP,EAAE,CAACM,QAAQ,EAAE,EAAE,EAAEF,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;EACnD;EACA;EACA,OAAOC,UAAU,GACXE,EAAE,CAACC,QAAQ,CAACF,QAAQ,CAACG,MAAM,GAAG,CAAC,CAAC,GAChCF,EAAE;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}