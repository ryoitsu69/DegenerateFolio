{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.outputSyncingFormatter = exports.outputPostFormatter = exports.inputPostFormatter = exports.outputBlockFormatter = exports.outputTransactionReceiptFormatter = exports.outputLogFormatter = exports.inputLogFormatter = exports.inputTopicFormatter = exports.outputTransactionFormatter = exports.inputSignFormatter = exports.inputTransactionFormatter = exports.inputCallFormatter = exports.txInputOptionsFormatter = exports.inputAddressFormatter = exports.inputDefaultBlockNumberFormatter = exports.inputBlockNumberFormatter = exports.outputBigIntegerFormatter = exports.outputProofFormatter = exports.inputStorageKeysFormatter = void 0;\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_eth_iban_1 = require(\"web3-eth-iban\");\nconst web3_types_1 = require(\"web3-types\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_validator_1 = require(\"web3-validator\");\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nconst inputStorageKeysFormatter = keys => keys.map(num => (0, web3_utils_1.numberToHex)(num));\nexports.inputStorageKeysFormatter = inputStorageKeysFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nconst outputProofFormatter = proof => ({\n  address: (0, web3_utils_1.toChecksumAddress)(proof.address),\n  nonce: (0, web3_utils_1.hexToNumberString)(proof.nonce),\n  balance: (0, web3_utils_1.hexToNumberString)(proof.balance)\n});\nexports.outputProofFormatter = outputProofFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nconst outputBigIntegerFormatter = number => (0, web3_utils_1.toNumber)(number);\nexports.outputBigIntegerFormatter = outputBigIntegerFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nconst inputBlockNumberFormatter = blockNumber => {\n  if ((0, web3_validator_1.isNullish)(blockNumber)) {\n    return undefined;\n  }\n  if (typeof blockNumber === 'string' && (0, web3_validator_1.isBlockTag)(blockNumber)) {\n    return blockNumber;\n  }\n  if (blockNumber === 'genesis') {\n    return '0x0';\n  }\n  if (typeof blockNumber === 'string' && (0, web3_utils_1.isHexStrict)(blockNumber)) {\n    return blockNumber.toLowerCase();\n  }\n  return (0, web3_utils_1.numberToHex)(blockNumber);\n};\nexports.inputBlockNumberFormatter = inputBlockNumberFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nconst inputDefaultBlockNumberFormatter = (blockNumber, defaultBlock) => {\n  if (!blockNumber) {\n    return (0, exports.inputBlockNumberFormatter)(defaultBlock);\n  }\n  return (0, exports.inputBlockNumberFormatter)(blockNumber);\n};\nexports.inputDefaultBlockNumberFormatter = inputDefaultBlockNumberFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nconst inputAddressFormatter = address => {\n  if (web3_eth_iban_1.Iban.isValid(address) && web3_eth_iban_1.Iban.isDirect(address)) {\n    const iban = new web3_eth_iban_1.Iban(address);\n    return iban.toAddress().toLowerCase();\n  }\n  if ((0, web3_utils_1.isAddress)(address)) {\n    return \"0x\".concat(address.toLowerCase().replace('0x', ''));\n  }\n  throw new web3_errors_1.FormatterError(\"Provided address \".concat(address, \" is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.\"));\n};\nexports.inputAddressFormatter = inputAddressFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nconst txInputOptionsFormatter = options => {\n  var _a;\n  const modifiedOptions = Object.assign({}, options);\n  if (options.to) {\n    // it might be contract creation\n    modifiedOptions.to = (0, exports.inputAddressFormatter)(options.to);\n  }\n  if (options.data && options.input) {\n    throw new web3_errors_1.FormatterError('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n  if (!options.input && options.data) {\n    modifiedOptions.input = options.data;\n    delete modifiedOptions.data;\n  }\n  if (options.input && !options.input.startsWith('0x')) {\n    modifiedOptions.input = \"0x\".concat(options.input);\n  }\n  if (modifiedOptions.input && !(0, web3_utils_1.isHexStrict)(modifiedOptions.input)) {\n    throw new web3_errors_1.FormatterError('The input field must be HEX encoded data.');\n  }\n  // allow both\n  if (options.gas || options.gasLimit) {\n    modifiedOptions.gas = (0, web3_utils_1.toNumber)((_a = options.gas) !== null && _a !== void 0 ? _a : options.gasLimit);\n  }\n  if (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n    delete modifiedOptions.gasPrice;\n  }\n  ['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId'].filter(key => !(0, web3_validator_1.isNullish)(modifiedOptions[key])).forEach(key => {\n    modifiedOptions[key] = (0, web3_utils_1.numberToHex)(modifiedOptions[key]);\n  });\n  return modifiedOptions;\n};\nexports.txInputOptionsFormatter = txInputOptionsFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nconst inputCallFormatter = (options, defaultAccount) => {\n  var _a;\n  const opts = (0, exports.txInputOptionsFormatter)(options);\n  const from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n  if (from) {\n    opts.from = (0, exports.inputAddressFormatter)(from);\n  }\n  return opts;\n};\nexports.inputCallFormatter = inputCallFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nconst inputTransactionFormatter = (options, defaultAccount) => {\n  var _a;\n  const opts = (0, exports.txInputOptionsFormatter)(options);\n  // check from, only if not number, or object\n  if (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n    opts.from = (_a = opts.from) !== null && _a !== void 0 ? _a : defaultAccount;\n    if (!options.from && !(typeof options.from === 'number')) {\n      throw new web3_errors_1.FormatterError('The send transactions \"from\" field must be defined!');\n    }\n    opts.from = (0, exports.inputAddressFormatter)(options.from);\n  }\n  return opts;\n};\nexports.inputTransactionFormatter = inputTransactionFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nconst inputSignFormatter = data => (0, web3_utils_1.isHexStrict)(data) ? data : (0, web3_utils_1.utf8ToHex)(data);\nexports.inputSignFormatter = inputSignFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nconst outputTransactionFormatter = tx => {\n  const modifiedTx = Object.assign({}, tx);\n  if (tx.blockNumber) {\n    modifiedTx.blockNumber = (0, web3_utils_1.hexToNumber)(tx.blockNumber);\n  }\n  if (tx.transactionIndex) {\n    modifiedTx.transactionIndex = (0, web3_utils_1.hexToNumber)(tx.transactionIndex);\n  }\n  modifiedTx.nonce = (0, web3_utils_1.hexToNumber)(tx.nonce);\n  modifiedTx.gas = (0, web3_utils_1.hexToNumber)(tx.gas);\n  if (tx.gasPrice) {\n    modifiedTx.gasPrice = (0, exports.outputBigIntegerFormatter)(tx.gasPrice);\n  }\n  if (tx.maxFeePerGas) {\n    modifiedTx.maxFeePerGas = (0, exports.outputBigIntegerFormatter)(tx.maxFeePerGas);\n  }\n  if (tx.maxPriorityFeePerGas) {\n    modifiedTx.maxPriorityFeePerGas = (0, exports.outputBigIntegerFormatter)(tx.maxPriorityFeePerGas);\n  }\n  if (tx.type) {\n    modifiedTx.type = (0, web3_utils_1.hexToNumber)(tx.type);\n  }\n  modifiedTx.value = (0, exports.outputBigIntegerFormatter)(tx.value);\n  if (tx.to && (0, web3_utils_1.isAddress)(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    modifiedTx.to = (0, web3_utils_1.toChecksumAddress)(tx.to);\n  } else {\n    modifiedTx.to = undefined; // set to `null` if invalid address\n  }\n  if (tx.from) {\n    modifiedTx.from = (0, web3_utils_1.toChecksumAddress)(tx.from);\n  }\n  return modifiedTx;\n};\nexports.outputTransactionFormatter = outputTransactionFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst inputTopicFormatter = topic => {\n  // Using \"null\" value intentionally for validation\n  // eslint-disable-next-line no-null/no-null\n  if ((0, web3_validator_1.isNullish)(topic)) return null;\n  const value = String(topic);\n  return (0, web3_validator_1.isHex)(value) ? value : (0, web3_utils_1.fromUtf8)(value);\n};\nexports.inputTopicFormatter = inputTopicFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nconst inputLogFormatter = filter => {\n  var _a;\n  const val = (0, web3_validator_1.isNullish)(filter) ? {} : (0, web3_utils_1.mergeDeep)({}, filter);\n  // If options !== undefined, don't blow out existing data\n  if ((0, web3_validator_1.isNullish)(val.fromBlock)) {\n    val.fromBlock = web3_types_1.BlockTags.LATEST;\n  }\n  val.fromBlock = (0, exports.inputBlockNumberFormatter)(val.fromBlock);\n  if (!(0, web3_validator_1.isNullish)(val.toBlock)) {\n    val.toBlock = (0, exports.inputBlockNumberFormatter)(val.toBlock);\n  }\n  // make sure topics, get converted to hex\n  val.topics = (_a = val.topics) !== null && _a !== void 0 ? _a : [];\n  val.topics = val.topics.map(topic => Array.isArray(topic) ? topic.map(exports.inputTopicFormatter) : (0, exports.inputTopicFormatter)(topic));\n  if (val.address) {\n    val.address = Array.isArray(val.address) ? val.address.map(addr => (0, exports.inputAddressFormatter)(addr)) : (0, exports.inputAddressFormatter)(val.address);\n  }\n  return val;\n};\nexports.inputLogFormatter = inputLogFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nconst outputLogFormatter = log => {\n  const modifiedLog = Object.assign({}, log);\n  const logIndex = typeof log.logIndex === 'string' ? log.logIndex : (0, web3_utils_1.numberToHex)(log.logIndex);\n  // generate a custom log id\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n    const shaId = (0, web3_utils_1.sha3Raw)(\"\".concat(log.blockHash.replace('0x', '')).concat(log.transactionHash.replace('0x', '')).concat(logIndex.replace('0x', '')));\n    modifiedLog.id = \"log_\".concat(shaId.replace('0x', '').slice(0, 8));\n  } else if (!log.id) {\n    modifiedLog.id = undefined;\n  }\n  if (log.blockNumber && (0, web3_utils_1.isHexStrict)(log.blockNumber)) {\n    modifiedLog.blockNumber = (0, web3_utils_1.hexToNumber)(log.blockNumber);\n  }\n  if (log.transactionIndex && (0, web3_utils_1.isHexStrict)(log.transactionIndex)) {\n    modifiedLog.transactionIndex = (0, web3_utils_1.hexToNumber)(log.transactionIndex);\n  }\n  if (log.logIndex && (0, web3_utils_1.isHexStrict)(log.logIndex)) {\n    modifiedLog.logIndex = (0, web3_utils_1.hexToNumber)(log.logIndex);\n  }\n  if (log.address) {\n    modifiedLog.address = (0, web3_utils_1.toChecksumAddress)(log.address);\n  }\n  return modifiedLog;\n};\nexports.outputLogFormatter = outputLogFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nconst outputTransactionReceiptFormatter = receipt => {\n  if (typeof receipt !== 'object') {\n    throw new web3_errors_1.FormatterError(\"Received receipt is invalid: \".concat(String(receipt)));\n  }\n  const modifiedReceipt = Object.assign({}, receipt);\n  if (receipt.blockNumber) {\n    modifiedReceipt.blockNumber = (0, web3_utils_1.hexToNumber)(receipt.blockNumber);\n  }\n  if (receipt.transactionIndex) {\n    modifiedReceipt.transactionIndex = (0, web3_utils_1.hexToNumber)(receipt.transactionIndex);\n  }\n  modifiedReceipt.cumulativeGasUsed = (0, web3_utils_1.hexToNumber)(receipt.cumulativeGasUsed);\n  modifiedReceipt.gasUsed = (0, web3_utils_1.hexToNumber)(receipt.gasUsed);\n  if (receipt.logs && Array.isArray(receipt.logs)) {\n    modifiedReceipt.logs = receipt.logs.map(exports.outputLogFormatter);\n  }\n  if (receipt.effectiveGasPrice) {\n    modifiedReceipt.effectiveGasPrice = (0, web3_utils_1.hexToNumber)(receipt.effectiveGasPrice);\n  }\n  if (receipt.contractAddress) {\n    modifiedReceipt.contractAddress = (0, web3_utils_1.toChecksumAddress)(receipt.contractAddress);\n  }\n  if (receipt.status) {\n    modifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n  }\n  return modifiedReceipt;\n};\nexports.outputTransactionReceiptFormatter = outputTransactionReceiptFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nconst outputBlockFormatter = block => {\n  const modifiedBlock = Object.assign({}, block);\n  // transform to number\n  modifiedBlock.gasLimit = (0, web3_utils_1.hexToNumber)(block.gasLimit);\n  modifiedBlock.gasUsed = (0, web3_utils_1.hexToNumber)(block.gasUsed);\n  modifiedBlock.size = (0, web3_utils_1.hexToNumber)(block.size);\n  modifiedBlock.timestamp = (0, web3_utils_1.hexToNumber)(block.timestamp);\n  if (block.number) {\n    modifiedBlock.number = (0, web3_utils_1.hexToNumber)(block.number);\n  }\n  if (block.difficulty) {\n    modifiedBlock.difficulty = (0, exports.outputBigIntegerFormatter)(block.difficulty);\n  }\n  if (block.totalDifficulty) {\n    modifiedBlock.totalDifficulty = (0, exports.outputBigIntegerFormatter)(block.totalDifficulty);\n  }\n  if (block.transactions && Array.isArray(block.transactions)) {\n    modifiedBlock.transactions = block.transactions.map(exports.outputTransactionFormatter);\n  }\n  if (block.miner) {\n    modifiedBlock.miner = (0, web3_utils_1.toChecksumAddress)(block.miner);\n  }\n  if (block.baseFeePerGas) {\n    modifiedBlock.baseFeePerGas = (0, exports.outputBigIntegerFormatter)(block.baseFeePerGas);\n  }\n  return modifiedBlock;\n};\nexports.outputBlockFormatter = outputBlockFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nconst inputPostFormatter = post => {\n  var _a;\n  const modifiedPost = Object.assign({}, post);\n  if (post.ttl) {\n    modifiedPost.ttl = (0, web3_utils_1.numberToHex)(post.ttl);\n  }\n  if (post.workToProve) {\n    modifiedPost.workToProve = (0, web3_utils_1.numberToHex)(post.workToProve);\n  }\n  if (post.priority) {\n    modifiedPost.priority = (0, web3_utils_1.numberToHex)(post.priority);\n  }\n  // fallback\n  if (post.topics && !Array.isArray(post.topics)) {\n    modifiedPost.topics = post.topics ? [post.topics] : [];\n  }\n  // format the following options\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(topic => topic.startsWith('0x') ? topic : (0, web3_utils_1.fromUtf8)(topic));\n  return modifiedPost;\n};\nexports.inputPostFormatter = inputPostFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nconst outputPostFormatter = post => {\n  var _a;\n  const modifiedPost = Object.assign({}, post);\n  if (post.expiry) {\n    modifiedPost.expiry = (0, web3_utils_1.hexToNumber)(post.expiry);\n  }\n  if (post.sent) {\n    modifiedPost.sent = (0, web3_utils_1.hexToNumber)(post.sent);\n  }\n  if (post.ttl) {\n    modifiedPost.ttl = (0, web3_utils_1.hexToNumber)(post.ttl);\n  }\n  if (post.workProved) {\n    modifiedPost.workProved = (0, web3_utils_1.hexToNumber)(post.workProved);\n  }\n  // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n  if (!post.topics) {\n    modifiedPost.topics = [];\n  }\n  modifiedPost.topics = (_a = modifiedPost.topics) === null || _a === void 0 ? void 0 : _a.map(web3_utils_1.toUtf8);\n  return modifiedPost;\n};\nexports.outputPostFormatter = outputPostFormatter;\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nconst outputSyncingFormatter = result => {\n  const modifiedResult = Object.assign({}, result);\n  modifiedResult.startingBlock = (0, web3_utils_1.hexToNumber)(result.startingBlock);\n  modifiedResult.currentBlock = (0, web3_utils_1.hexToNumber)(result.currentBlock);\n  modifiedResult.highestBlock = (0, web3_utils_1.hexToNumber)(result.highestBlock);\n  if (result.knownStates) {\n    modifiedResult.knownStates = (0, web3_utils_1.hexToNumber)(result.knownStates);\n  }\n  if (result.pulledStates) {\n    modifiedResult.pulledStates = (0, web3_utils_1.hexToNumber)(result.pulledStates);\n  }\n  return modifiedResult;\n};\nexports.outputSyncingFormatter = outputSyncingFormatter;","map":{"version":3,"names":["web3_errors_1","require","web3_eth_iban_1","web3_types_1","web3_utils_1","web3_validator_1","inputStorageKeysFormatter","keys","map","num","numberToHex","exports","outputProofFormatter","proof","address","toChecksumAddress","nonce","hexToNumberString","balance","outputBigIntegerFormatter","number","toNumber","inputBlockNumberFormatter","blockNumber","isNullish","undefined","isBlockTag","isHexStrict","toLowerCase","inputDefaultBlockNumberFormatter","defaultBlock","inputAddressFormatter","Iban","isValid","isDirect","iban","toAddress","isAddress","concat","replace","FormatterError","txInputOptionsFormatter","options","modifiedOptions","Object","assign","to","data","input","startsWith","gas","gasLimit","_a","maxPriorityFeePerGas","maxFeePerGas","gasPrice","filter","key","forEach","inputCallFormatter","defaultAccount","opts","from","inputTransactionFormatter","inputSignFormatter","utf8ToHex","outputTransactionFormatter","tx","modifiedTx","hexToNumber","transactionIndex","type","value","inputTopicFormatter","topic","String","isHex","fromUtf8","inputLogFormatter","val","mergeDeep","fromBlock","BlockTags","LATEST","toBlock","topics","Array","isArray","addr","outputLogFormatter","log","modifiedLog","logIndex","blockHash","transactionHash","shaId","sha3Raw","id","slice","outputTransactionReceiptFormatter","receipt","modifiedReceipt","cumulativeGasUsed","gasUsed","logs","effectiveGasPrice","contractAddress","status","Boolean","parseInt","outputBlockFormatter","block","modifiedBlock","size","timestamp","difficulty","totalDifficulty","transactions","miner","baseFeePerGas","inputPostFormatter","post","modifiedPost","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","toUtf8","outputSyncingFormatter","result","modifiedResult","startingBlock","currentBlock","highestBlock","knownStates","pulledStates"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-core/src/formatters.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { FormatterError } from 'web3-errors';\nimport { Iban } from 'web3-eth-iban';\nimport {\n\tBlockTags,\n\tFilter,\n\tNumbers,\n\tTopic,\n\tBlockInput,\n\tBlockOutput,\n\tLogsInput,\n\tLogsOutput,\n\tMutable,\n\tPostInput,\n\tPostOutput,\n\tProof,\n\tReceiptInput,\n\tReceiptOutput,\n\tSyncInput,\n\tSyncOutput,\n\tTransactionInput,\n\tTransactionOutput,\n} from 'web3-types';\nimport {\n\tfromUtf8,\n\thexToNumber,\n\thexToNumberString,\n\tisAddress,\n\tisHexStrict,\n\tmergeDeep,\n\tnumberToHex,\n\tsha3Raw,\n\ttoChecksumAddress,\n\ttoNumber,\n\ttoUtf8,\n\tutf8ToHex,\n} from 'web3-utils';\nimport { isBlockTag, isHex, isNullish } from 'web3-validator';\n\n/* eslint-disable deprecation/deprecation */\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given storage key array values to hex strings.\n */\nexport const inputStorageKeysFormatter = (keys: Array<string>) => keys.map(num => numberToHex(num));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Will format the given proof response from the node.\n */\nexport const outputProofFormatter = (proof: Proof): Proof => ({\n\taddress: toChecksumAddress(proof.address),\n\tnonce: hexToNumberString(proof.nonce),\n\tbalance: hexToNumberString(proof.balance),\n});\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Should the format output to a big number\n */\nexport const outputBigIntegerFormatter = (number: Numbers) => toNumber(number);\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'genesis'\n */\nexport const inputBlockNumberFormatter = (blockNumber: Numbers | undefined) => {\n\tif (isNullish(blockNumber)) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof blockNumber === 'string' && isBlockTag(blockNumber)) {\n\t\treturn blockNumber;\n\t}\n\n\tif (blockNumber === 'genesis') {\n\t\treturn '0x0';\n\t}\n\n\tif (typeof blockNumber === 'string' && isHexStrict(blockNumber)) {\n\t\treturn blockNumber.toLowerCase();\n\t}\n\n\treturn numberToHex(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Returns the given block number as hex string or does return the defaultBlock property of the current module\n */\nexport const inputDefaultBlockNumberFormatter = (\n\tblockNumber: Numbers | undefined,\n\tdefaultBlock: Numbers,\n) => {\n\tif (!blockNumber) {\n\t\treturn inputBlockNumberFormatter(defaultBlock);\n\t}\n\n\treturn inputBlockNumberFormatter(blockNumber);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param address\n */\nexport const inputAddressFormatter = (address: string): string | never => {\n\tif (Iban.isValid(address) && Iban.isDirect(address)) {\n\t\tconst iban = new Iban(address);\n\n\t\treturn iban.toAddress().toLowerCase();\n\t}\n\n\tif (isAddress(address)) {\n\t\treturn `0x${address.toLowerCase().replace('0x', '')}`;\n\t}\n\n\tthrow new FormatterError(\n\t\t`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`,\n\t);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const txInputOptionsFormatter = (options: TransactionInput): Mutable<TransactionOutput> => {\n\tconst modifiedOptions = { ...options } as unknown as Mutable<TransactionOutput>;\n\n\tif (options.to) {\n\t\t// it might be contract creation\n\t\tmodifiedOptions.to = inputAddressFormatter(options.to);\n\t}\n\n\tif (options.data && options.input) {\n\t\tthrow new FormatterError(\n\t\t\t'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.',\n\t\t);\n\t}\n\n\tif (!options.input && options.data) {\n\t\tmodifiedOptions.input = options.data;\n\t\tdelete modifiedOptions.data;\n\t}\n\n\tif (options.input && !options.input.startsWith('0x')) {\n\t\tmodifiedOptions.input = `0x${options.input}`;\n\t}\n\n\tif (modifiedOptions.input && !isHexStrict(modifiedOptions.input)) {\n\t\tthrow new FormatterError('The input field must be HEX encoded data.');\n\t}\n\n\t// allow both\n\tif (options.gas || options.gasLimit) {\n\t\tmodifiedOptions.gas = toNumber(options.gas ?? options.gasLimit);\n\t}\n\n\tif (options.maxPriorityFeePerGas || options.maxFeePerGas) {\n\t\tdelete modifiedOptions.gasPrice;\n\t}\n\n\t['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce', 'chainId']\n\t\t.filter(key => !isNullish(modifiedOptions[key]))\n\t\t.forEach(key => {\n\t\t\tmodifiedOptions[key] = numberToHex(modifiedOptions[key] as Numbers);\n\t\t});\n\n\treturn modifiedOptions as TransactionOutput;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputCallFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\tconst from = opts.from ?? defaultAccount;\n\n\tif (from) {\n\t\topts.from = inputAddressFormatter(from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a transaction and converts all values to HEX\n */\nexport const inputTransactionFormatter = (options: TransactionInput, defaultAccount?: string) => {\n\tconst opts = txInputOptionsFormatter(options);\n\n\t// check from, only if not number, or object\n\tif (!(typeof opts.from === 'number') && !(!!opts.from && typeof opts.from === 'object')) {\n\t\topts.from = opts.from ?? defaultAccount;\n\n\t\tif (!options.from && !(typeof options.from === 'number')) {\n\t\t\tthrow new FormatterError('The send transactions \"from\" field must be defined!');\n\t\t}\n\n\t\topts.from = inputAddressFormatter(options.from);\n\t}\n\n\treturn opts;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Hex encodes the data passed to eth_sign and personal_sign\n */\nexport const inputSignFormatter = (data: string) => (isHexStrict(data) ? data : utf8ToHex(data));\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction to its proper values\n * @function outputTransactionFormatter\n */\nexport const outputTransactionFormatter = (tx: TransactionInput): TransactionOutput => {\n\tconst modifiedTx = { ...tx } as unknown as Mutable<TransactionOutput>;\n\n\tif (tx.blockNumber) {\n\t\tmodifiedTx.blockNumber = hexToNumber(tx.blockNumber);\n\t}\n\n\tif (tx.transactionIndex) {\n\t\tmodifiedTx.transactionIndex = hexToNumber(tx.transactionIndex);\n\t}\n\n\tmodifiedTx.nonce = hexToNumber(tx.nonce);\n\tmodifiedTx.gas = hexToNumber(tx.gas);\n\n\tif (tx.gasPrice) {\n\t\tmodifiedTx.gasPrice = outputBigIntegerFormatter(tx.gasPrice);\n\t}\n\n\tif (tx.maxFeePerGas) {\n\t\tmodifiedTx.maxFeePerGas = outputBigIntegerFormatter(tx.maxFeePerGas);\n\t}\n\n\tif (tx.maxPriorityFeePerGas) {\n\t\tmodifiedTx.maxPriorityFeePerGas = outputBigIntegerFormatter(tx.maxPriorityFeePerGas);\n\t}\n\n\tif (tx.type) {\n\t\tmodifiedTx.type = hexToNumber(tx.type);\n\t}\n\n\tmodifiedTx.value = outputBigIntegerFormatter(tx.value);\n\n\tif (tx.to && isAddress(tx.to)) {\n\t\t// tx.to could be `0x0` or `null` while contract creation\n\t\tmodifiedTx.to = toChecksumAddress(tx.to);\n\t} else {\n\t\tmodifiedTx.to = undefined; // set to `null` if invalid address\n\t}\n\n\tif (tx.from) {\n\t\tmodifiedTx.from = toChecksumAddress(tx.from);\n\t}\n\n\treturn modifiedTx;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param topic\n */\n// To align with specification we use the type \"null\" here\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const inputTopicFormatter = (topic: Topic): Topic | null => {\n\t// Using \"null\" value intentionally for validation\n\t// eslint-disable-next-line no-null/no-null\n\tif (isNullish(topic)) return null;\n\n\tconst value = String(topic);\n\n\treturn isHex(value) ? value : fromUtf8(value);\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * @param filter\n */\nexport const inputLogFormatter = (filter: Filter) => {\n\tconst val: Mutable<Filter> = isNullish(filter)\n\t\t? {}\n\t\t: mergeDeep({}, filter as Record<string, unknown>);\n\n\t// If options !== undefined, don't blow out existing data\n\tif (isNullish(val.fromBlock)) {\n\t\tval.fromBlock = BlockTags.LATEST;\n\t}\n\n\tval.fromBlock = inputBlockNumberFormatter(val.fromBlock);\n\n\tif (!isNullish(val.toBlock)) {\n\t\tval.toBlock = inputBlockNumberFormatter(val.toBlock);\n\t}\n\n\t// make sure topics, get converted to hex\n\tval.topics = val.topics ?? [];\n\tval.topics = val.topics.map(topic =>\n\t\tArray.isArray(topic)\n\t\t\t? (topic.map(inputTopicFormatter) as Topic[])\n\t\t\t: inputTopicFormatter(topic as Topic),\n\t);\n\n\tif (val.address) {\n\t\tval.address = Array.isArray(val.address)\n\t\t\t? val.address.map(addr => inputAddressFormatter(addr))\n\t\t\t: inputAddressFormatter(val.address);\n\t}\n\n\treturn val as Filter;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a log\n * @function outputLogFormatter\n */\nexport const outputLogFormatter = (log: Partial<LogsInput>): LogsOutput => {\n\tconst modifiedLog = { ...log } as unknown as Mutable<LogsOutput>;\n\n\tconst logIndex =\n\t\ttypeof log.logIndex === 'string'\n\t\t\t? log.logIndex\n\t\t\t: numberToHex(log.logIndex as unknown as number);\n\n\t// generate a custom log id\n\tif (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string') {\n\t\tconst shaId = sha3Raw(\n\t\t\t`${log.blockHash.replace('0x', '')}${log.transactionHash.replace(\n\t\t\t\t'0x',\n\t\t\t\t'',\n\t\t\t)}${logIndex.replace('0x', '')}`,\n\t\t);\n\t\tmodifiedLog.id = `log_${shaId.replace('0x', '').slice(0, 8)}`;\n\t} else if (!log.id) {\n\t\tmodifiedLog.id = undefined;\n\t}\n\n\tif (log.blockNumber && isHexStrict(log.blockNumber)) {\n\t\tmodifiedLog.blockNumber = hexToNumber(log.blockNumber);\n\t}\n\tif (log.transactionIndex && isHexStrict(log.transactionIndex)) {\n\t\tmodifiedLog.transactionIndex = hexToNumber(log.transactionIndex);\n\t}\n\n\tif (log.logIndex && isHexStrict(log.logIndex)) {\n\t\tmodifiedLog.logIndex = hexToNumber(log.logIndex);\n\t}\n\n\tif (log.address) {\n\t\tmodifiedLog.address = toChecksumAddress(log.address);\n\t}\n\n\treturn modifiedLog;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a transaction receipt to its proper values\n */\nexport const outputTransactionReceiptFormatter = (receipt: ReceiptInput): ReceiptOutput => {\n\tif (typeof receipt !== 'object') {\n\t\tthrow new FormatterError(`Received receipt is invalid: ${String(receipt)}`);\n\t}\n\tconst modifiedReceipt = { ...receipt } as unknown as Mutable<ReceiptOutput>;\n\n\tif (receipt.blockNumber) {\n\t\tmodifiedReceipt.blockNumber = hexToNumber(receipt.blockNumber);\n\t}\n\n\tif (receipt.transactionIndex) {\n\t\tmodifiedReceipt.transactionIndex = hexToNumber(receipt.transactionIndex);\n\t}\n\n\tmodifiedReceipt.cumulativeGasUsed = hexToNumber(receipt.cumulativeGasUsed);\n\tmodifiedReceipt.gasUsed = hexToNumber(receipt.gasUsed);\n\n\tif (receipt.logs && Array.isArray(receipt.logs)) {\n\t\tmodifiedReceipt.logs = receipt.logs.map(outputLogFormatter);\n\t}\n\n\tif (receipt.effectiveGasPrice) {\n\t\tmodifiedReceipt.effectiveGasPrice = hexToNumber(receipt.effectiveGasPrice);\n\t}\n\n\tif (receipt.contractAddress) {\n\t\tmodifiedReceipt.contractAddress = toChecksumAddress(receipt.contractAddress);\n\t}\n\n\tif (receipt.status) {\n\t\tmodifiedReceipt.status = Boolean(parseInt(receipt.status, 10));\n\t}\n\n\treturn modifiedReceipt;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a block to its proper values\n * @function outputBlockFormatter\n */\nexport const outputBlockFormatter = (block: BlockInput): BlockOutput => {\n\tconst modifiedBlock = { ...block } as unknown as Mutable<BlockOutput>;\n\n\t// transform to number\n\tmodifiedBlock.gasLimit = hexToNumber(block.gasLimit);\n\tmodifiedBlock.gasUsed = hexToNumber(block.gasUsed);\n\tmodifiedBlock.size = hexToNumber(block.size);\n\tmodifiedBlock.timestamp = hexToNumber(block.timestamp);\n\n\tif (block.number) {\n\t\tmodifiedBlock.number = hexToNumber(block.number);\n\t}\n\n\tif (block.difficulty) {\n\t\tmodifiedBlock.difficulty = outputBigIntegerFormatter(block.difficulty);\n\t}\n\n\tif (block.totalDifficulty) {\n\t\tmodifiedBlock.totalDifficulty = outputBigIntegerFormatter(block.totalDifficulty);\n\t}\n\n\tif (block.transactions && Array.isArray(block.transactions)) {\n\t\tmodifiedBlock.transactions = block.transactions.map(outputTransactionFormatter);\n\t}\n\n\tif (block.miner) {\n\t\tmodifiedBlock.miner = toChecksumAddress(block.miner);\n\t}\n\n\tif (block.baseFeePerGas) {\n\t\tmodifiedBlock.baseFeePerGas = outputBigIntegerFormatter(block.baseFeePerGas);\n\t}\n\n\treturn modifiedBlock;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the input of a whisper post and converts all values to HEX\n */\nexport const inputPostFormatter = (post: PostOutput): PostInput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostInput>;\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = numberToHex(post.ttl);\n\t}\n\n\tif (post.workToProve) {\n\t\tmodifiedPost.workToProve = numberToHex(post.workToProve);\n\t}\n\n\tif (post.priority) {\n\t\tmodifiedPost.priority = numberToHex(post.priority);\n\t}\n\n\t// fallback\n\tif (post.topics && !Array.isArray(post.topics)) {\n\t\tmodifiedPost.topics = post.topics ? [post.topics] : [];\n\t}\n\n\t// format the following options\n\tmodifiedPost.topics = modifiedPost.topics?.map(topic =>\n\t\ttopic.startsWith('0x') ? topic : fromUtf8(topic),\n\t);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n * Formats the output of a received post message\n * @function outputPostFormatter\n */\nexport const outputPostFormatter = (post: PostInput): PostOutput => {\n\tconst modifiedPost = { ...post } as unknown as Mutable<PostOutput>;\n\n\tif (post.expiry) {\n\t\tmodifiedPost.expiry = hexToNumber(post.expiry);\n\t}\n\n\tif (post.sent) {\n\t\tmodifiedPost.sent = hexToNumber(post.sent);\n\t}\n\n\tif (post.ttl) {\n\t\tmodifiedPost.ttl = hexToNumber(post.ttl);\n\t}\n\n\tif (post.workProved) {\n\t\tmodifiedPost.workProved = hexToNumber(post.workProved);\n\t}\n\n\t// post.payloadRaw = post.payload;\n\t// post.payload = utils.hexToAscii(post.payload);\n\n\t// if (utils.isJson(post.payload)) {\n\t//     post.payload = JSON.parse(post.payload);\n\t// }\n\n\t// format the following options\n\tif (!post.topics) {\n\t\tmodifiedPost.topics = [];\n\t}\n\n\tmodifiedPost.topics = modifiedPost.topics?.map(toUtf8);\n\n\treturn modifiedPost;\n};\n\n/**\n * @deprecated Use format function from web3-utils package instead\n */\nexport const outputSyncingFormatter = (result: SyncInput): SyncOutput => {\n\tconst modifiedResult = { ...result } as unknown as Mutable<SyncOutput>;\n\n\tmodifiedResult.startingBlock = hexToNumber(result.startingBlock);\n\tmodifiedResult.currentBlock = hexToNumber(result.currentBlock);\n\tmodifiedResult.highestBlock = hexToNumber(result.highestBlock);\n\n\tif (result.knownStates) {\n\t\tmodifiedResult.knownStates = hexToNumber(result.knownStates);\n\t}\n\n\tif (result.pulledStates) {\n\t\tmodifiedResult.pulledStates = hexToNumber(result.pulledStates);\n\t}\n\n\treturn modifiedResult;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}