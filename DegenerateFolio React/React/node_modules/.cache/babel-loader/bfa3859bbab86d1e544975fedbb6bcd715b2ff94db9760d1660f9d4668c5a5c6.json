{"ast":null,"code":"export default {\n  rpc: {},\n  types: {\n    BridgedBlockHash: 'H256',\n    BridgedBlockNumber: 'BlockNumber',\n    BridgedHeader: 'Header',\n    BridgeMessageId: '(LaneId, MessageNonce)',\n    CallOrigin: {\n      _enum: {\n        SourceRoot: 'Null',\n        TargetAccount: '(AccountId, MultiSigner, MultiSignature)',\n        SourceAccount: 'AccountId'\n      }\n    },\n    ChainId: '[u8; 4]',\n    DeliveredMessages: {\n      begin: 'MessageNonce',\n      end: 'MessageNonce',\n      // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;\n      dispatchResults: 'BitVec'\n    },\n    DispatchFeePayment: {\n      _enum: ['AtSourceChain', 'AtTargetChain']\n    },\n    InboundLaneData: {\n      relayers: 'Vec<UnrewardedRelayer>',\n      lastConfirmedNonce: 'MessageNonce'\n    },\n    InboundRelayer: 'AccountId',\n    InitializationData: {\n      header: 'Header',\n      authorityList: 'AuthorityList',\n      setId: 'SetId',\n      isHalted: 'bool'\n    },\n    LaneId: '[u8; 4]',\n    MessageData: {\n      payload: 'Bytes',\n      fee: 'Balance'\n    },\n    MessagesDeliveryProofOf: {\n      bridgedHeaderHash: 'BlockHash',\n      storageProof: 'Vec<Bytes>',\n      lane: 'LaneId'\n    },\n    MessageKey: {\n      laneId: 'LaneId',\n      nonce: 'MessageNonce'\n    },\n    MessageNonce: 'u64',\n    MessagesProofOf: {\n      bridgedHeaderHash: 'BridgedBlockHash',\n      storageProof: 'Vec<Bytes>',\n      lane: 'LaneId',\n      noncesStart: 'MessageNonce',\n      noncesEnd: 'MessageNonce'\n    },\n    OperatingMode: {\n      _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']\n    },\n    OutboundLaneData: {\n      oldestUnprunedNonce: 'MessageNonce',\n      latestReceivedNonce: 'MessageNonce',\n      latestGeneratedNonce: 'MessageNonce'\n    },\n    OutboundMessageFee: 'Balance',\n    OutboundPayload: {\n      specVersion: 'u32',\n      weight: 'Weight',\n      origin: 'CallOrigin',\n      dispatchFeePayment: 'DispatchFeePayment',\n      call: 'Bytes'\n    },\n    Parameter: 'Null',\n    RelayerId: 'AccountId',\n    UnrewardedRelayer: {\n      relayer: 'RelayerId',\n      messages: 'DeliveredMessages'\n    },\n    UnrewardedRelayersState: {\n      unrewardedRelayer_Entries: 'MessageNonce',\n      messagesInOldestEntry: 'MessageNonce',\n      totalMessages: 'MessageNonce'\n    }\n  }\n};","map":{"version":3,"names":["rpc","types","BridgedBlockHash","BridgedBlockNumber","BridgedHeader","BridgeMessageId","CallOrigin","_enum","SourceRoot","TargetAccount","SourceAccount","ChainId","DeliveredMessages","begin","end","dispatchResults","DispatchFeePayment","InboundLaneData","relayers","lastConfirmedNonce","InboundRelayer","InitializationData","header","authorityList","setId","isHalted","LaneId","MessageData","payload","fee","MessagesDeliveryProofOf","bridgedHeaderHash","storageProof","lane","MessageKey","laneId","nonce","MessageNonce","MessagesProofOf","noncesStart","noncesEnd","OperatingMode","OutboundLaneData","oldestUnprunedNonce","latestReceivedNonce","latestGeneratedNonce","OutboundMessageFee","OutboundPayload","specVersion","weight","origin","dispatchFeePayment","call","Parameter","RelayerId","UnrewardedRelayer","relayer","messages","UnrewardedRelayersState","unrewardedRelayer_Entries","messagesInOldestEntry","totalMessages"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/interfaces/bridges/definitions.js"],"sourcesContent":["export default {\n    rpc: {},\n    types: {\n        BridgedBlockHash: 'H256',\n        BridgedBlockNumber: 'BlockNumber',\n        BridgedHeader: 'Header',\n        BridgeMessageId: '(LaneId, MessageNonce)',\n        CallOrigin: {\n            _enum: {\n                SourceRoot: 'Null',\n                TargetAccount: '(AccountId, MultiSigner, MultiSignature)',\n                SourceAccount: 'AccountId'\n            }\n        },\n        ChainId: '[u8; 4]',\n        DeliveredMessages: {\n            begin: 'MessageNonce',\n            end: 'MessageNonce',\n            // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;\n            dispatchResults: 'BitVec'\n        },\n        DispatchFeePayment: {\n            _enum: ['AtSourceChain', 'AtTargetChain']\n        },\n        InboundLaneData: {\n            relayers: 'Vec<UnrewardedRelayer>',\n            lastConfirmedNonce: 'MessageNonce'\n        },\n        InboundRelayer: 'AccountId',\n        InitializationData: {\n            header: 'Header',\n            authorityList: 'AuthorityList',\n            setId: 'SetId',\n            isHalted: 'bool'\n        },\n        LaneId: '[u8; 4]',\n        MessageData: {\n            payload: 'Bytes',\n            fee: 'Balance'\n        },\n        MessagesDeliveryProofOf: {\n            bridgedHeaderHash: 'BlockHash',\n            storageProof: 'Vec<Bytes>',\n            lane: 'LaneId'\n        },\n        MessageKey: {\n            laneId: 'LaneId',\n            nonce: 'MessageNonce'\n        },\n        MessageNonce: 'u64',\n        MessagesProofOf: {\n            bridgedHeaderHash: 'BridgedBlockHash',\n            storageProof: 'Vec<Bytes>',\n            lane: 'LaneId',\n            noncesStart: 'MessageNonce',\n            noncesEnd: 'MessageNonce'\n        },\n        OperatingMode: {\n            _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']\n        },\n        OutboundLaneData: {\n            oldestUnprunedNonce: 'MessageNonce',\n            latestReceivedNonce: 'MessageNonce',\n            latestGeneratedNonce: 'MessageNonce'\n        },\n        OutboundMessageFee: 'Balance',\n        OutboundPayload: {\n            specVersion: 'u32',\n            weight: 'Weight',\n            origin: 'CallOrigin',\n            dispatchFeePayment: 'DispatchFeePayment',\n            call: 'Bytes'\n        },\n        Parameter: 'Null',\n        RelayerId: 'AccountId',\n        UnrewardedRelayer: {\n            relayer: 'RelayerId',\n            messages: 'DeliveredMessages'\n        },\n        UnrewardedRelayersState: {\n            unrewardedRelayer_Entries: 'MessageNonce',\n            messagesInOldestEntry: 'MessageNonce',\n            totalMessages: 'MessageNonce'\n        }\n    }\n};\n"],"mappings":"AAAA,eAAe;EACXA,GAAG,EAAE,CAAC,CAAC;EACPC,KAAK,EAAE;IACHC,gBAAgB,EAAE,MAAM;IACxBC,kBAAkB,EAAE,aAAa;IACjCC,aAAa,EAAE,QAAQ;IACvBC,eAAe,EAAE,wBAAwB;IACzCC,UAAU,EAAE;MACRC,KAAK,EAAE;QACHC,UAAU,EAAE,MAAM;QAClBC,aAAa,EAAE,0CAA0C;QACzDC,aAAa,EAAE;MACnB;IACJ,CAAC;IACDC,OAAO,EAAE,SAAS;IAClBC,iBAAiB,EAAE;MACfC,KAAK,EAAE,cAAc;MACrBC,GAAG,EAAE,cAAc;MACnB;MACAC,eAAe,EAAE;IACrB,CAAC;IACDC,kBAAkB,EAAE;MAChBT,KAAK,EAAE,CAAC,eAAe,EAAE,eAAe;IAC5C,CAAC;IACDU,eAAe,EAAE;MACbC,QAAQ,EAAE,wBAAwB;MAClCC,kBAAkB,EAAE;IACxB,CAAC;IACDC,cAAc,EAAE,WAAW;IAC3BC,kBAAkB,EAAE;MAChBC,MAAM,EAAE,QAAQ;MAChBC,aAAa,EAAE,eAAe;MAC9BC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE;IACd,CAAC;IACDC,MAAM,EAAE,SAAS;IACjBC,WAAW,EAAE;MACTC,OAAO,EAAE,OAAO;MAChBC,GAAG,EAAE;IACT,CAAC;IACDC,uBAAuB,EAAE;MACrBC,iBAAiB,EAAE,WAAW;MAC9BC,YAAY,EAAE,YAAY;MAC1BC,IAAI,EAAE;IACV,CAAC;IACDC,UAAU,EAAE;MACRC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;IACX,CAAC;IACDC,YAAY,EAAE,KAAK;IACnBC,eAAe,EAAE;MACbP,iBAAiB,EAAE,kBAAkB;MACrCC,YAAY,EAAE,YAAY;MAC1BC,IAAI,EAAE,QAAQ;MACdM,WAAW,EAAE,cAAc;MAC3BC,SAAS,EAAE;IACf,CAAC;IACDC,aAAa,EAAE;MACXlC,KAAK,EAAE,CAAC,QAAQ,EAAE,2BAA2B,EAAE,QAAQ;IAC3D,CAAC;IACDmC,gBAAgB,EAAE;MACdC,mBAAmB,EAAE,cAAc;MACnCC,mBAAmB,EAAE,cAAc;MACnCC,oBAAoB,EAAE;IAC1B,CAAC;IACDC,kBAAkB,EAAE,SAAS;IAC7BC,eAAe,EAAE;MACbC,WAAW,EAAE,KAAK;MAClBC,MAAM,EAAE,QAAQ;MAChBC,MAAM,EAAE,YAAY;MACpBC,kBAAkB,EAAE,oBAAoB;MACxCC,IAAI,EAAE;IACV,CAAC;IACDC,SAAS,EAAE,MAAM;IACjBC,SAAS,EAAE,WAAW;IACtBC,iBAAiB,EAAE;MACfC,OAAO,EAAE,WAAW;MACpBC,QAAQ,EAAE;IACd,CAAC;IACDC,uBAAuB,EAAE;MACrBC,yBAAyB,EAAE,cAAc;MACzCC,qBAAqB,EAAE,cAAc;MACrCC,aAAa,EAAE;IACnB;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}