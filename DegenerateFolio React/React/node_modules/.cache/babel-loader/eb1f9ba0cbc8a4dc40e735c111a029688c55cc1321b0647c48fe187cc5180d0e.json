{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n // Remnant X\n // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n // by David Hoskins.\n // Thanks to boxplorer and the folks at 'Fractalforums.com'\n // HD Video:- https://www.youtube.com/watch?v=BjkK9fLXXo0\n\n // #define STEREO\n\n vec3 sunDir  = normalize( vec3(  0.35, 0.1,  0.3 ) );\n const vec3 sunColour = vec3(1.0, .95, .8);\n\n\n #define SCALE 2.8\n #define MINRAD2 .25\n float minRad2 = clamp(MINRAD2, 1.0e-9, 1.0);\n #define scale (vec4(SCALE, SCALE, SCALE, abs(SCALE)) / minRad2)\n float absScalem1 = abs(SCALE - 1.0);\n float AbsScaleRaisedTo1mIters = pow(abs(SCALE), float(1-10));\n vec3 surfaceColour1 = vec3(.8, .0, 0.);\n vec3 surfaceColour2 = vec3(.4, .4, 0.5);\n vec3 surfaceColour3 = vec3(.5, 0.3, 0.00);\n vec3 fogCol = vec3(0.4, 0.4, 0.4);\n float gTime;\n\n\n //----------------------------------------------------------------------------------------\n float Noise( in vec3 x )\n {\n     vec3 p = floor(x);\n     vec3 f = fract(x);\n     f = f*f*(3.0-2.0*f);\n\n     vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n     vec2 rg = texture( iChannel0, (uv+ 0.5)/256.0, -99.0 ).yx;\n     return mix( rg.x, rg.y, f.z );\n }\n\n //----------------------------------------------------------------------------------------\n float Map(vec3 pos)\n {\n\n     vec4 p = vec4(pos,1);\n     vec4 p0 = p;  // p.w is the distance estimate\n\n     for (int i = 0; i < 9; i++)\n     {\n         p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;\n\n         float r2 = dot(p.xyz, p.xyz);\n         p *= clamp(max(minRad2/r2, minRad2), 0.0, 1.0);\n\n         // scale, translate\n         p = p*scale + p0;\n     }\n     return ((length(p.xyz) - absScalem1) / p.w - AbsScaleRaisedTo1mIters);\n }\n\n //----------------------------------------------------------------------------------------\n vec3 Colour(vec3 pos, float sphereR)\n {\n     vec3 p = pos;\n     vec3 p0 = p;\n     float trap = 1.0;\n\n     for (int i = 0; i < 6; i++)\n     {\n\n         p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;\n         float r2 = dot(p.xyz, p.xyz);\n         p *= clamp(max(minRad2/r2, minRad2), 0.0, 1.0);\n\n         p = p*scale.xyz + p0.xyz;\n         trap = min(trap, r2);\n     }\n     // |c.x|: log final distance (fractional iteration count)\n     // |c.y|: spherical orbit trap at (0,0,0)\n     vec2 c = clamp(vec2( 0.3333*log(dot(p,p))-1.0, sqrt(trap) ), 0.0, 1.0);\n\n     float t = mod(length(pos) - gTime*150., 16.0);\n     surfaceColour1 = mix( surfaceColour1, vec3(.4, 3.0, 5.), pow(smoothstep(0.0, .3, t) * smoothstep(0.6, .3, t), 10.0));\n     return mix(mix(surfaceColour1, surfaceColour2, c.y), surfaceColour3, c.x);\n }\n\n\n //----------------------------------------------------------------------------------------\n vec3 GetNormal(vec3 pos, float distance)\n {\n     distance *= 0.001+.0001;\n     vec2 eps = vec2(distance, 0.0);\n     vec3 nor = vec3(\n         Map(pos+eps.xyy) - Map(pos-eps.xyy),\n                     Map(pos+eps.yxy) - Map(pos-eps.yxy),\n                     Map(pos+eps.yyx) - Map(pos-eps.yyx));\n     return normalize(nor);\n }\n\n //----------------------------------------------------------------------------------------\n float GetSky(vec3 pos)\n {\n     pos *= 2.3;\n     float t = Noise(pos);\n     t += Noise(pos * 2.1) * .5;\n     t += Noise(pos * 4.3) * .25;\n     t += Noise(pos * 7.9) * .125;\n     return t;\n }\n\n //----------------------------------------------------------------------------------------\n float BinarySubdivision(in vec3 rO, in vec3 rD, vec2 t)\n {\n     float halfwayT;\n\n     for (int i = 0; i < 6; i++)\n     {\n\n         halfwayT = dot(t, vec2(.5));\n         float d = Map(rO + halfwayT*rD);\n         //if (abs(d) < 0.001) break;\n         t = mix(vec2(t.x, halfwayT), vec2(halfwayT, t.y), step(0.0005, d));\n\n     }\n\n     return halfwayT;\n }\n\n //----------------------------------------------------------------------------------------\n vec2 Scene(in vec3 rO, in vec3 rD, in vec2 fragCoord)\n {\n     float t = .05 + 0.05 * texture(iChannel0, fragCoord.xy / iChannelResolution[0].xy).y;\n     vec3 p = vec3(0.0);\n     float oldT = 0.0;\n     bool hit = false;\n     float glow = 0.0;\n     vec2 dist;\n     for( int j=0; j < 100; j++ )\n     {\n         if (t > 12.0) break;\n         p = rO + t*rD;\n\n         float h = Map(p);\n\n         if(h  <0.0005)\n         {\n             dist = vec2(oldT, t);\n             hit = true;\n             break;\n         }\n         glow += clamp(.05-h, 0.0, .4);\n         oldT = t;\n         t +=  h + t*0.001;\n     }\n     if (!hit)\n         t = 1000.0;\n     else       t = BinarySubdivision(rO, rD, dist);\n     return vec2(t, clamp(glow*.25, 0.0, 1.0));\n\n }\n\n //----------------------------------------------------------------------------------------\n float Hash(vec2 p)\n {\n     return fract(sin(dot(p, vec2(12.9898, 78.233))) * 33758.5453)-.5;\n }\n\n //----------------------------------------------------------------------------------------\n vec3 PostEffects(vec3 rgb, vec2 xy)\n {\n     // Gamma first...\n\n\n     // Then...\n     #define CONTRAST 1.08\n     #define SATURATION 1.5\n     #define BRIGHTNESS 1.5\n     rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb*BRIGHTNESS)), rgb*BRIGHTNESS, SATURATION), CONTRAST);\n     // Noise...\n     //rgb = clamp(rgb+Hash(xy*iTime)*.1, 0.0, 1.0);\n     // Vignette...\n     rgb *= .5 + 0.5*pow(20.0*xy.x*xy.y*(1.0-xy.x)*(1.0-xy.y), 0.2);\n\n     rgb = pow(rgb, vec3(0.47 ));\n     return rgb;\n }\n\n //----------------------------------------------------------------------------------------\n float Shadow( in vec3 ro, in vec3 rd)\n {\n     float res = 1.0;\n     float t = 0.05;\n     float h;\n\n     for (int i = 0; i < 8; i++)\n     {\n         h = Map( ro + rd*t );\n         res = min(6.0*h / t, res);\n         t += h;\n     }\n     return max(res, 0.0);\n }\n\n //----------------------------------------------------------------------------------------\n mat3 RotationMatrix(vec3 axis, float angle)\n {\n     axis = normalize(axis);\n     float s = sin(angle);\n     float c = cos(angle);\n     float oc = 1.0 - c;\n\n     return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                 oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                 oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n }\n\n //----------------------------------------------------------------------------------------\n vec3 LightSource(vec3 spotLight, vec3 dir, float dis)\n {\n     float g = 0.0;\n     if (length(spotLight) < dis)\n     {\n         float a = max(dot(normalize(spotLight), dir), 0.0);\n         g = pow(a, 500.0);\n         g +=  pow(a, 5000.0)*.2;\n     }\n\n     return vec3(.6) * g;\n }\n\n //----------------------------------------------------------------------------------------\n vec3 CameraPath( float t )\n {\n     vec3 p = vec3(-.78 + 3. * sin(2.14*t),.05+2.5 * sin(.942*t+1.3),.05 + 3.5 * cos(3.594*t) );\n     return p;\n }\n\n //----------------------------------------------------------------------------------------\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     float m = (iMouse.x/iResolution.x)*300.0;\n     gTime = (iTime+m)*.01 + 15.00;\n     vec2 xy = fragCoord.xy / iResolution.xy;\n     vec2 uv = (-1.0 + 2.0 * xy) * vec2(iResolution.x/iResolution.y, 1.0);\n\n\n     #ifdef STEREO\n     float isRed = mod(fragCoord.x + mod(fragCoord.y, 2.0),2.0);\n     #endif\n\n     vec3 cameraPos\t= CameraPath(gTime);\n     vec3 camTar\t\t= CameraPath(gTime + .01);\n\n     float roll = 13.0*sin(gTime*.5+.4);\n     vec3 cw = normalize(camTar-cameraPos);\n\n     vec3 cp = vec3(sin(roll), cos(roll),0.0);\n     vec3 cu = normalize(cross(cw,cp));\n\n     vec3 cv = normalize(cross(cu,cw));\n     cw = RotationMatrix(cv, sin(-gTime*20.0)*.7) * cw;\n     vec3 dir = normalize(uv.x*cu + uv.y*cv + 1.3*cw);\n\n     #ifdef STEREO\n     cameraPos += .008*cu*isRed; // move camera to the right\n     #endif\n\n     vec3 spotLight = CameraPath(gTime + .03) + vec3(sin(gTime*18.4), cos(gTime*17.98), sin(gTime * 22.53))*.2;\n     vec3 col = vec3(0.0);\n     vec3 sky = vec3(0.03, .04, .05) * GetSky(dir);\n     vec2 ret = Scene(cameraPos, dir,fragCoord);\n\n     if (ret.x < 900.0)\n     {\n         vec3 p = cameraPos + ret.x*dir;\n         vec3 nor = GetNormal(p, ret.x);\n\n         vec3 spot = spotLight - p;\n         float atten = length(spot);\n\n         spot /= atten;\n\n         float shaSpot = Shadow(p, spot);\n         float shaSun = Shadow(p, sunDir);\n\n         float bri = max(dot(spot, nor), 0.0) / pow(atten, 1.5) * .25;\n         float briSun = max(dot(sunDir, nor), 0.0) * .2;\n\n         col = Colour(p, ret.x);\n         col = (col * bri * shaSpot) + (col * briSun* shaSun);\n\n         vec3 ref = reflect(dir, nor);\n         col += pow(max(dot(spot,  ref), 0.0), 10.0) * 2.0 * shaSpot * bri;\n         col += pow(max(dot(sunDir, ref), 0.0), 10.0) * 2.0 * shaSun * briSun;\n     }\n\n     col = mix(sky, col, min(exp(-ret.x+1.5), 1.0));\n     col += vec3(pow(abs(ret.y), 2.)) * vec3(.02, .04, .1);\n\n     col += LightSource(spotLight-cameraPos, dir, ret.x);\n     col = PostEffects(col, xy);\n\n\n     #ifdef STEREO\n     col *= vec3( isRed, 1.0-isRed, 1.0-isRed );\n     #endif\n\n     fragColor=vec4(col,1.0);\n }\n\n //--------------------------------------------------------------------------\n\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n // Remnant X\n // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n // by David Hoskins.\n // Thanks to boxplorer and the folks at 'Fractalforums.com'\n // HD Video:- https://www.youtube.com/watch?v=BjkK9fLXXo0\n\n // #define STEREO\n\n vec3 sunDir  = normalize( vec3(  0.35, 0.1,  0.3 ) );\n const vec3 sunColour = vec3(1.0, .95, .8);\n\n\n #define SCALE 2.8\n #define MINRAD2 .25\n float minRad2 = clamp(MINRAD2, 1.0e-9, 1.0);\n #define scale (vec4(SCALE, SCALE, SCALE, abs(SCALE)) / minRad2)\n float absScalem1 = abs(SCALE - 1.0);\n float AbsScaleRaisedTo1mIters = pow(abs(SCALE), float(1-10));\n vec3 surfaceColour1 = vec3(.8, .0, 0.);\n vec3 surfaceColour2 = vec3(.4, .4, 0.5);\n vec3 surfaceColour3 = vec3(.5, 0.3, 0.00);\n vec3 fogCol = vec3(0.4, 0.4, 0.4);\n float gTime;\n\n\n //----------------------------------------------------------------------------------------\n float Noise( in vec3 x )\n {\n     vec3 p = floor(x);\n     vec3 f = fract(x);\n     f = f*f*(3.0-2.0*f);\n\n     vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n     vec2 rg = texture( iChannel0, (uv+ 0.5)/256.0, -99.0 ).yx;\n     return mix( rg.x, rg.y, f.z );\n }\n\n //----------------------------------------------------------------------------------------\n float Map(vec3 pos)\n {\n\n     vec4 p = vec4(pos,1);\n     vec4 p0 = p;  // p.w is the distance estimate\n\n     for (int i = 0; i < 9; i++)\n     {\n         p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;\n\n         float r2 = dot(p.xyz, p.xyz);\n         p *= clamp(max(minRad2/r2, minRad2), 0.0, 1.0);\n\n         // scale, translate\n         p = p*scale + p0;\n     }\n     return ((length(p.xyz) - absScalem1) / p.w - AbsScaleRaisedTo1mIters);\n }\n\n //----------------------------------------------------------------------------------------\n vec3 Colour(vec3 pos, float sphereR)\n {\n     vec3 p = pos;\n     vec3 p0 = p;\n     float trap = 1.0;\n\n     for (int i = 0; i < 6; i++)\n     {\n\n         p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;\n         float r2 = dot(p.xyz, p.xyz);\n         p *= clamp(max(minRad2/r2, minRad2), 0.0, 1.0);\n\n         p = p*scale.xyz + p0.xyz;\n         trap = min(trap, r2);\n     }\n     // |c.x|: log final distance (fractional iteration count)\n     // |c.y|: spherical orbit trap at (0,0,0)\n     vec2 c = clamp(vec2( 0.3333*log(dot(p,p))-1.0, sqrt(trap) ), 0.0, 1.0);\n\n     float t = mod(length(pos) - gTime*150., 16.0);\n     surfaceColour1 = mix( surfaceColour1, vec3(.4, 3.0, 5.), pow(smoothstep(0.0, .3, t) * smoothstep(0.6, .3, t), 10.0));\n     return mix(mix(surfaceColour1, surfaceColour2, c.y), surfaceColour3, c.x);\n }\n\n\n //----------------------------------------------------------------------------------------\n vec3 GetNormal(vec3 pos, float distance)\n {\n     distance *= 0.001+.0001;\n     vec2 eps = vec2(distance, 0.0);\n     vec3 nor = vec3(\n         Map(pos+eps.xyy) - Map(pos-eps.xyy),\n                     Map(pos+eps.yxy) - Map(pos-eps.yxy),\n                     Map(pos+eps.yyx) - Map(pos-eps.yyx));\n     return normalize(nor);\n }\n\n //----------------------------------------------------------------------------------------\n float GetSky(vec3 pos)\n {\n     pos *= 2.3;\n     float t = Noise(pos);\n     t += Noise(pos * 2.1) * .5;\n     t += Noise(pos * 4.3) * .25;\n     t += Noise(pos * 7.9) * .125;\n     return t;\n }\n\n //----------------------------------------------------------------------------------------\n float BinarySubdivision(in vec3 rO, in vec3 rD, vec2 t)\n {\n     float halfwayT;\n\n     for (int i = 0; i < 6; i++)\n     {\n\n         halfwayT = dot(t, vec2(.5));\n         float d = Map(rO + halfwayT*rD);\n         //if (abs(d) < 0.001) break;\n         t = mix(vec2(t.x, halfwayT), vec2(halfwayT, t.y), step(0.0005, d));\n\n     }\n\n     return halfwayT;\n }\n\n //----------------------------------------------------------------------------------------\n vec2 Scene(in vec3 rO, in vec3 rD, in vec2 fragCoord)\n {\n     float t = .05 + 0.05 * texture(iChannel0, fragCoord.xy / iChannelResolution[0].xy).y;\n     vec3 p = vec3(0.0);\n     float oldT = 0.0;\n     bool hit = false;\n     float glow = 0.0;\n     vec2 dist;\n     for( int j=0; j < 100; j++ )\n     {\n         if (t > 12.0) break;\n         p = rO + t*rD;\n\n         float h = Map(p);\n\n         if(h  <0.0005)\n         {\n             dist = vec2(oldT, t);\n             hit = true;\n             break;\n         }\n         glow += clamp(.05-h, 0.0, .4);\n         oldT = t;\n         t +=  h + t*0.001;\n     }\n     if (!hit)\n         t = 1000.0;\n     else       t = BinarySubdivision(rO, rD, dist);\n     return vec2(t, clamp(glow*.25, 0.0, 1.0));\n\n }\n\n //----------------------------------------------------------------------------------------\n float Hash(vec2 p)\n {\n     return fract(sin(dot(p, vec2(12.9898, 78.233))) * 33758.5453)-.5;\n }\n\n //----------------------------------------------------------------------------------------\n vec3 PostEffects(vec3 rgb, vec2 xy)\n {\n     // Gamma first...\n\n\n     // Then...\n     #define CONTRAST 1.08\n     #define SATURATION 1.5\n     #define BRIGHTNESS 1.5\n     rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb*BRIGHTNESS)), rgb*BRIGHTNESS, SATURATION), CONTRAST);\n     // Noise...\n     //rgb = clamp(rgb+Hash(xy*iTime)*.1, 0.0, 1.0);\n     // Vignette...\n     rgb *= .5 + 0.5*pow(20.0*xy.x*xy.y*(1.0-xy.x)*(1.0-xy.y), 0.2);\n\n     rgb = pow(rgb, vec3(0.47 ));\n     return rgb;\n }\n\n //----------------------------------------------------------------------------------------\n float Shadow( in vec3 ro, in vec3 rd)\n {\n     float res = 1.0;\n     float t = 0.05;\n     float h;\n\n     for (int i = 0; i < 8; i++)\n     {\n         h = Map( ro + rd*t );\n         res = min(6.0*h / t, res);\n         t += h;\n     }\n     return max(res, 0.0);\n }\n\n //----------------------------------------------------------------------------------------\n mat3 RotationMatrix(vec3 axis, float angle)\n {\n     axis = normalize(axis);\n     float s = sin(angle);\n     float c = cos(angle);\n     float oc = 1.0 - c;\n\n     return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                 oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                 oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n }\n\n //----------------------------------------------------------------------------------------\n vec3 LightSource(vec3 spotLight, vec3 dir, float dis)\n {\n     float g = 0.0;\n     if (length(spotLight) < dis)\n     {\n         float a = max(dot(normalize(spotLight), dir), 0.0);\n         g = pow(a, 500.0);\n         g +=  pow(a, 5000.0)*.2;\n     }\n\n     return vec3(.6) * g;\n }\n\n //----------------------------------------------------------------------------------------\n vec3 CameraPath( float t )\n {\n     vec3 p = vec3(-.78 + 3. * sin(2.14*t),.05+2.5 * sin(.942*t+1.3),.05 + 3.5 * cos(3.594*t) );\n     return p;\n }\n\n //----------------------------------------------------------------------------------------\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     float m = (iMouse.x/iResolution.x)*300.0;\n     gTime = (iTime+m)*.01 + 15.00;\n     vec2 xy = fragCoord.xy / iResolution.xy;\n     vec2 uv = (-1.0 + 2.0 * xy) * vec2(iResolution.x/iResolution.y, 1.0);\n\n\n     #ifdef STEREO\n     float isRed = mod(fragCoord.x + mod(fragCoord.y, 2.0),2.0);\n     #endif\n\n     vec3 cameraPos\t= CameraPath(gTime);\n     vec3 camTar\t\t= CameraPath(gTime + .01);\n\n     float roll = 13.0*sin(gTime*.5+.4);\n     vec3 cw = normalize(camTar-cameraPos);\n\n     vec3 cp = vec3(sin(roll), cos(roll),0.0);\n     vec3 cu = normalize(cross(cw,cp));\n\n     vec3 cv = normalize(cross(cu,cw));\n     cw = RotationMatrix(cv, sin(-gTime*20.0)*.7) * cw;\n     vec3 dir = normalize(uv.x*cu + uv.y*cv + 1.3*cw);\n\n     #ifdef STEREO\n     cameraPos += .008*cu*isRed; // move camera to the right\n     #endif\n\n     vec3 spotLight = CameraPath(gTime + .03) + vec3(sin(gTime*18.4), cos(gTime*17.98), sin(gTime * 22.53))*.2;\n     vec3 col = vec3(0.0);\n     vec3 sky = vec3(0.03, .04, .05) * GetSky(dir);\n     vec2 ret = Scene(cameraPos, dir,fragCoord);\n\n     if (ret.x < 900.0)\n     {\n         vec3 p = cameraPos + ret.x*dir;\n         vec3 nor = GetNormal(p, ret.x);\n\n         vec3 spot = spotLight - p;\n         float atten = length(spot);\n\n         spot /= atten;\n\n         float shaSpot = Shadow(p, spot);\n         float shaSun = Shadow(p, sunDir);\n\n         float bri = max(dot(spot, nor), 0.0) / pow(atten, 1.5) * .25;\n         float briSun = max(dot(sunDir, nor), 0.0) * .2;\n\n         col = Colour(p, ret.x);\n         col = (col * bri * shaSpot) + (col * briSun* shaSun);\n\n         vec3 ref = reflect(dir, nor);\n         col += pow(max(dot(spot,  ref), 0.0), 10.0) * 2.0 * shaSpot * bri;\n         col += pow(max(dot(sunDir, ref), 0.0), 10.0) * 2.0 * shaSun * briSun;\n     }\n\n     col = mix(sky, col, min(exp(-ret.x+1.5), 1.0));\n     col += vec3(pow(abs(ret.y), 2.)) * vec3(.02, .04, .1);\n\n     col += LightSource(spotLight-cameraPos, dir, ret.x);\n     col = PostEffects(col, xy);\n\n\n     #ifdef STEREO\n     col *= vec3( isRed, 1.0-isRed, 1.0-isRed );\n     #endif\n\n     fragColor=vec4(col,1.0);\n }\n\n //--------------------------------------------------------------------------\n\n `;\n\nroot.render(\n    <>\n<ShadertoyReact fs={fragmentShader} />\n<TodoApp />\n<footer>©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEFJ,IAAI,CAACK,MAAM,eACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACJT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH;EAAe;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACtCd,OAAA,CAACL,OAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXd,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAlB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}