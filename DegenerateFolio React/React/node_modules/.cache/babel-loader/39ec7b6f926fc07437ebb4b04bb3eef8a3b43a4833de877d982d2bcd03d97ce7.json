{"ast":null,"code":"import { compactFromU8a, compactFromU8aLim, compactToU8a, identity, isU8a } from '@polkadot/util';\nimport { typeToConstructor } from '../utils/index.js';\nfunction decodeCompact(registry, Type, value) {\n  if (isU8a(value)) {\n    const [decodedLength, bn] = (value[0] & 0b11) < 0b11 ? compactFromU8aLim(value) : compactFromU8a(value);\n    return [new Type(registry, bn), decodedLength];\n  } else if (value instanceof Compact) {\n    const raw = value.unwrap();\n    return raw instanceof Type ? [raw, 0] : [new Type(registry, raw), 0];\n  } else if (value instanceof Type) {\n    return [value, 0];\n  }\n  return [new Type(registry, value), 0];\n}\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\nexport class Compact {\n  registry;\n  createdAtHash;\n  initialU8aLength;\n  isStorageFallback;\n  __internal__Type;\n  __internal__raw;\n  constructor(registry, Type, value = 0, {\n    definition,\n    setDefinition = identity\n  } = {}) {\n    this.registry = registry;\n    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type));\n    const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);\n    this.initialU8aLength = decodedLength;\n    this.__internal__raw = raw;\n  }\n  static with(Type) {\n    let definition;\n    // eslint-disable-next-line no-return-assign\n    const setDefinition = d => definition = d;\n    return class extends Compact {\n      constructor(registry, value) {\n        super(registry, Type, value, {\n          definition,\n          setDefinition\n        });\n      }\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n  get isEmpty() {\n    return this.__internal__raw.isEmpty;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n  bitLength() {\n    return this.__internal__raw.bitLength();\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    return this.__internal__raw.eq(other instanceof Compact ? other.__internal__raw : other);\n  }\n  /**\n   * @description Returns a breakdown of the hex encoding for this Codec\n   */\n  inspect() {\n    return {\n      outer: [this.toU8a()]\n    };\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n  toBigInt() {\n    return this.__internal__raw.toBigInt();\n  }\n  /**\n   * @description Returns the BN representation of the number\n   */\n  toBn() {\n    return this.__internal__raw.toBn();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n  toHex(isLe) {\n    return this.__internal__raw.toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  toHuman(isExtended, disableAscii) {\n    return this.__internal__raw.toHuman(isExtended, disableAscii);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n  toJSON() {\n    return this.__internal__raw.toJSON();\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n  toNumber() {\n    return this.__internal__raw.toNumber();\n  }\n  /**\n   * @description Converts the value in a best-fit primitive form\n   */\n  toPrimitive(disableAscii) {\n    return this.__internal__raw.toPrimitive(disableAscii);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType() {\n    return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    return this.__internal__raw.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   */\n  toU8a(_isBare) {\n    return compactToU8a(this.__internal__raw.toBn());\n  }\n  /**\n   * @description Returns the embedded [[UInt]] or [[Moment]] value\n   */\n  unwrap() {\n    return this.__internal__raw;\n  }\n}","map":{"version":3,"names":["compactFromU8a","compactFromU8aLim","compactToU8a","identity","isU8a","typeToConstructor","decodeCompact","registry","Type","value","decodedLength","bn","Compact","raw","unwrap","createdAtHash","initialU8aLength","isStorageFallback","__internal__Type","__internal__raw","constructor","definition","setDefinition","with","d","encodedLength","toU8a","length","hash","isEmpty","bitLength","eq","other","inspect","outer","toBigInt","toBn","toHex","isLe","toHuman","isExtended","disableAscii","toJSON","toNumber","toPrimitive","toRawType","getClassName","toString","_isBare"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types-codec/base/Compact.js"],"sourcesContent":["import { compactFromU8a, compactFromU8aLim, compactToU8a, identity, isU8a } from '@polkadot/util';\nimport { typeToConstructor } from '../utils/index.js';\nfunction decodeCompact(registry, Type, value) {\n    if (isU8a(value)) {\n        const [decodedLength, bn] = (value[0] & 0b11) < 0b11\n            ? compactFromU8aLim(value)\n            : compactFromU8a(value);\n        return [new Type(registry, bn), decodedLength];\n    }\n    else if (value instanceof Compact) {\n        const raw = value.unwrap();\n        return raw instanceof Type\n            ? [raw, 0]\n            : [new Type(registry, raw), 0];\n    }\n    else if (value instanceof Type) {\n        return [value, 0];\n    }\n    return [new Type(registry, value), 0];\n}\n/**\n * @name Compact\n * @description\n * A compact length-encoding codec wrapper. It performs the same function as Length, however\n * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly\n * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking\n * a number and making the compact representation thereof\n */\nexport class Compact {\n    registry;\n    createdAtHash;\n    initialU8aLength;\n    isStorageFallback;\n    __internal__Type;\n    __internal__raw;\n    constructor(registry, Type, value = 0, { definition, setDefinition = identity } = {}) {\n        this.registry = registry;\n        this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type));\n        const [raw, decodedLength] = decodeCompact(registry, this.__internal__Type, value);\n        this.initialU8aLength = decodedLength;\n        this.__internal__raw = raw;\n    }\n    static with(Type) {\n        let definition;\n        // eslint-disable-next-line no-return-assign\n        const setDefinition = (d) => (definition = d);\n        return class extends Compact {\n            constructor(registry, value) {\n                super(registry, Type, value, { definition, setDefinition });\n            }\n        };\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get encodedLength() {\n        return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n    get hash() {\n        return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n    get isEmpty() {\n        return this.__internal__raw.isEmpty;\n    }\n    /**\n     * @description Returns the number of bits in the value\n     */\n    bitLength() {\n        return this.__internal__raw.bitLength();\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    eq(other) {\n        return this.__internal__raw.eq(other instanceof Compact\n            ? other.__internal__raw\n            : other);\n    }\n    /**\n     * @description Returns a breakdown of the hex encoding for this Codec\n     */\n    inspect() {\n        return {\n            outer: [this.toU8a()]\n        };\n    }\n    /**\n     * @description Returns a BigInt representation of the number\n     */\n    toBigInt() {\n        return this.__internal__raw.toBigInt();\n    }\n    /**\n     * @description Returns the BN representation of the number\n     */\n    toBn() {\n        return this.__internal__raw.toBn();\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n    toHex(isLe) {\n        return this.__internal__raw.toHex(isLe);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    toHuman(isExtended, disableAscii) {\n        return this.__internal__raw.toHuman(isExtended, disableAscii);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n    toJSON() {\n        return this.__internal__raw.toJSON();\n    }\n    /**\n     * @description Returns the number representation for the value\n     */\n    toNumber() {\n        return this.__internal__raw.toNumber();\n    }\n    /**\n     * @description Converts the value in a best-fit primitive form\n     */\n    toPrimitive(disableAscii) {\n        return this.__internal__raw.toPrimitive(disableAscii);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    toRawType() {\n        return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n    toString() {\n        return this.__internal__raw.toString();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     */\n    toU8a(_isBare) {\n        return compactToU8a(this.__internal__raw.toBn());\n    }\n    /**\n     * @description Returns the embedded [[UInt]] or [[Moment]] value\n     */\n    unwrap() {\n        return this.__internal__raw;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}