{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [localUniformBit, tilingBit, roundPixelsBit]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [localUniformBitGl, tilingBitGl, roundPixelsBitGl]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      uClampFrame: {\n        value: new Float32Array([0, 0, 1, 1]),\n        type: \"vec4<f32>\"\n      },\n      uClampOffset: {\n        value: new Float32Array([0, 0]),\n        type: \"vec2<f32>\"\n      },\n      uTextureTransform: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      uSizeAnchor: {\n        value: new Float32Array([100, 100, 0.5, 0.5]),\n        type: \"vec4<f32>\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: {\n            value: new Matrix(),\n            type: \"mat3x3<f32>\"\n          },\n          uColor: {\n            value: new Float32Array([1, 1, 1, 1]),\n            type: \"vec4<f32>\"\n          },\n          uRound: {\n            value: 0,\n            type: \"f32\"\n          }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(matrix.a * textureWidth / width, matrix.b * textureWidth / height, matrix.c * textureHeight / width, matrix.d * textureHeight / height, matrix.tx / width, matrix.ty / height);\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\nexport { TilingSpriteShader };","map":{"version":3,"names":["gpuProgram","glProgram","TilingSpriteShader","Shader","constructor","compileHighShaderGpuProgram","name","bits","localUniformBit","tilingBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","tilingBitGl","roundPixelsBitGl","tilingUniforms","UniformGroup","uMapCoord","value","Matrix","type","uClampFrame","Float32Array","uClampOffset","uTextureTransform","uSizeAnchor","resources","localUniforms","uTransformMatrix","uColor","uRound","uTexture","Texture","EMPTY","source","uSampler","style","updateUniforms","width","height","matrix","anchorX","anchorY","texture","textureWidth","textureHeight","textureMatrix","uniforms","set","a","b","c","d","tx","ty","invert","mapCoord"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}