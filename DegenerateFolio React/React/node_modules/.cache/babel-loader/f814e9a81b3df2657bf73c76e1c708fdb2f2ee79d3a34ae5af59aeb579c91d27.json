{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction zeroBalance(api) {\n  return api.registry.createType('Balance');\n}\nfunction getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {\n  const votingBalance = api.registry.createType('Balance', freeBalance.toBn());\n  return {\n    freeBalance,\n    frozenFee,\n    frozenMisc,\n    reservedBalance,\n    votingBalance\n  };\n}\nfunction calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {\n  return objectSpread({\n    accountId,\n    accountNonce,\n    additional: additional.map(b => getBalance(api, b))\n  }, getBalance(api, primary));\n}\nfunction queryBalancesFree(api, accountId) {\n  return combineLatest([api.query.balances['freeBalance'](accountId), api.query.balances['reservedBalance'](accountId), api.query.system['accountNonce'](accountId)]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [accountNonce, [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]]));\n}\nfunction queryNonceOnly(api, accountId) {\n  const fill = nonce => [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];\n  return isFunction(api.query.system.account) ? api.query.system.account(accountId).pipe(map(({\n    nonce\n  }) => fill(nonce))) : isFunction(api.query.system['accountNonce']) ? api.query.system['accountNonce'](accountId).pipe(map(nonce => fill(nonce))) : of(fill(api.registry.createType('Index')));\n}\nfunction queryBalancesAccount(api, accountId, modules = ['balances']) {\n  const balances = modules.map(m => api.derive[m]?.customAccount || api.query[m]?.account).filter(q => isFunction(q));\n  const extract = (nonce, data) => [nonce, data.map(({\n    feeFrozen,\n    free,\n    miscFrozen,\n    reserved\n  }) => [free, reserved, feeFrozen, miscFrozen])];\n  // NOTE this is for the first case where we do have instances specified\n  return balances.length ? isFunction(api.query.system.account) ? combineLatest([api.query.system.account(accountId), ...balances.map(c => c(accountId))]).pipe(map(([{\n    nonce\n  }, ...balances]) => extract(nonce, balances))) : combineLatest([api.query.system['accountNonce'](accountId), ...balances.map(c => c(accountId))]).pipe(map(([nonce, ...balances]) => extract(nonce, balances))) : queryNonceOnly(api, accountId);\n}\nfunction querySystemAccount(api, accountId) {\n  // AccountInfo is current, support old, eg. Edgeware\n  return api.query.system.account(accountId).pipe(map(infoOrTuple => {\n    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];\n    const nonce = infoOrTuple.nonce || infoOrTuple[0];\n    if (!data || data.isEmpty) {\n      return [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];\n    }\n    const {\n      feeFrozen,\n      free,\n      miscFrozen,\n      reserved\n    } = data;\n    return [nonce, [[free, reserved, feeFrozen, miscFrozen]]];\n  }));\n}\n/**\n * @name account\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\nexport function account(instanceId, api) {\n  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');\n  const nonDefaultBalances = balanceInstances && balanceInstances[0] !== 'balances';\n  return memo(instanceId, address => api.derive.accounts.accountId(address).pipe(switchMap(accountId => accountId ? combineLatest([of(accountId), nonDefaultBalances ? queryBalancesAccount(api, accountId, balanceInstances) : isFunction(api.query.system?.account) ? querySystemAccount(api, accountId) : isFunction(api.query.balances?.account) ? queryBalancesAccount(api, accountId) : isFunction(api.query.balances?.['freeBalance']) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]]])), map(result => calcBalances(api, result))));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","isFunction","objectSpread","memo","zeroBalance","api","registry","createType","getBalance","freeBalance","reservedBalance","frozenFee","frozenMisc","votingBalance","toBn","calcBalances","accountId","accountNonce","primary","additional","b","queryBalancesFree","query","balances","system","pipe","queryNonceOnly","fill","nonce","account","queryBalancesAccount","modules","m","derive","customAccount","filter","q","extract","data","feeFrozen","free","miscFrozen","reserved","length","c","querySystemAccount","infoOrTuple","isEmpty","instanceId","balanceInstances","getModuleInstances","runtimeVersion","specName","nonDefaultBalances","address","accounts","result"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/balances/account.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction zeroBalance(api) {\n    return api.registry.createType('Balance');\n}\nfunction getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {\n    const votingBalance = api.registry.createType('Balance', freeBalance.toBn());\n    return {\n        freeBalance,\n        frozenFee,\n        frozenMisc,\n        reservedBalance,\n        votingBalance\n    };\n}\nfunction calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {\n    return objectSpread({\n        accountId,\n        accountNonce,\n        additional: additional.map((b) => getBalance(api, b))\n    }, getBalance(api, primary));\n}\nfunction queryBalancesFree(api, accountId) {\n    return combineLatest([\n        api.query.balances['freeBalance'](accountId),\n        api.query.balances['reservedBalance'](accountId),\n        api.query.system['accountNonce'](accountId)\n    ]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [\n        accountNonce,\n        [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]\n    ]));\n}\nfunction queryNonceOnly(api, accountId) {\n    const fill = (nonce) => [\n        nonce,\n        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]\n    ];\n    return isFunction(api.query.system.account)\n        ? api.query.system.account(accountId).pipe(map(({ nonce }) => fill(nonce)))\n        : isFunction(api.query.system['accountNonce'])\n            ? api.query.system['accountNonce'](accountId).pipe(map((nonce) => fill(nonce)))\n            : of(fill(api.registry.createType('Index')));\n}\nfunction queryBalancesAccount(api, accountId, modules = ['balances']) {\n    const balances = modules\n        .map((m) => api.derive[m]?.customAccount || api.query[m]?.account)\n        .filter((q) => isFunction(q));\n    const extract = (nonce, data) => [\n        nonce,\n        data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen])\n    ];\n    // NOTE this is for the first case where we do have instances specified\n    return balances.length\n        ? isFunction(api.query.system.account)\n            ? combineLatest([\n                api.query.system.account(accountId),\n                ...balances.map((c) => c(accountId))\n            ]).pipe(map(([{ nonce }, ...balances]) => extract(nonce, balances)))\n            : combineLatest([\n                api.query.system['accountNonce'](accountId),\n                ...balances.map((c) => c(accountId))\n            ]).pipe(map(([nonce, ...balances]) => extract(nonce, balances)))\n        : queryNonceOnly(api, accountId);\n}\nfunction querySystemAccount(api, accountId) {\n    // AccountInfo is current, support old, eg. Edgeware\n    return api.query.system.account(accountId).pipe(map((infoOrTuple) => {\n        const data = infoOrTuple.nonce\n            ? infoOrTuple.data\n            : infoOrTuple[1];\n        const nonce = infoOrTuple.nonce || infoOrTuple[0];\n        if (!data || data.isEmpty) {\n            return [\n                nonce,\n                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]\n            ];\n        }\n        const { feeFrozen, free, miscFrozen, reserved } = data;\n        return [\n            nonce,\n            [[free, reserved, feeFrozen, miscFrozen]]\n        ];\n    }));\n}\n/**\n * @name account\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\nexport function account(instanceId, api) {\n    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, 'balances');\n    const nonDefaultBalances = balanceInstances && balanceInstances[0] !== 'balances';\n    return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId) => (accountId\n        ? combineLatest([\n            of(accountId),\n            nonDefaultBalances\n                ? queryBalancesAccount(api, accountId, balanceInstances)\n                : isFunction(api.query.system?.account)\n                    ? querySystemAccount(api, accountId)\n                    : isFunction(api.query.balances?.account)\n                        ? queryBalancesAccount(api, accountId)\n                        : isFunction(api.query.balances?.['freeBalance'])\n                            ? queryBalancesFree(api, accountId)\n                            : queryNonceOnly(api, accountId)\n        ])\n        : of([api.registry.createType('AccountId'), [\n                api.registry.createType('Index'),\n                [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]\n            ]]))), map((result) => calcBalances(api, result))));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}