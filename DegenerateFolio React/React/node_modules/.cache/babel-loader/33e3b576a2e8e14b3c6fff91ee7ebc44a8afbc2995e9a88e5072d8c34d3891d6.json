{"ast":null,"code":"import { Buffer } from '../../buffer/Buffer.mjs';\nimport { BufferUsage } from '../../buffer/const.mjs';\n\"use strict\";\nfunction ensureIsBuffer(buffer, index) {\n  if (!(buffer instanceof Buffer)) {\n    let usage = index ? BufferUsage.INDEX : BufferUsage.VERTEX;\n    if (buffer instanceof Array) {\n      if (index) {\n        buffer = new Uint32Array(buffer);\n        usage = BufferUsage.INDEX | BufferUsage.COPY_DST;\n      } else {\n        buffer = new Float32Array(buffer);\n        usage = BufferUsage.VERTEX | BufferUsage.COPY_DST;\n      }\n    }\n    buffer = new Buffer({\n      data: buffer,\n      label: index ? \"index-mesh-buffer\" : \"vertex-mesh-buffer\",\n      usage\n    });\n  }\n  return buffer;\n}\nexport { ensureIsBuffer };","map":{"version":3,"names":["ensureIsBuffer","buffer","index","Buffer","usage","BufferUsage","INDEX","VERTEX","Array","Uint32Array","COPY_DST","Float32Array","data","label"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/geometry/utils/ensureIsBuffer.ts"],"sourcesContent":["import { Buffer } from '../../buffer/Buffer';\nimport { BufferUsage } from '../../buffer/const';\n\nimport type { TypedArray } from '../../buffer/Buffer';\n\n/**\n * Converts something into a buffer. If it is already a buffer it will pass it through\n * if it is a number array it will convert it to a float32 array before being passed into a buffer\n * the buffer will be created with the correct usage flags for geometry attributes\n * @param buffer - number array\n * @param index - is this an index buffer?\n * @returns a buffer\n * @memberof rendering\n */\nexport function ensureIsBuffer(buffer: Buffer | TypedArray | number[], index: boolean): Buffer\n{\n    if (!(buffer instanceof Buffer))\n    {\n        let usage: number = index ? BufferUsage.INDEX : BufferUsage.VERTEX;\n\n        // its an array!\n        if (buffer instanceof Array)\n        {\n            if (index)\n            {\n                buffer = new Uint32Array(buffer);\n                usage = BufferUsage.INDEX | BufferUsage.COPY_DST;\n            }\n\n            else\n            {\n                buffer = new Float32Array(buffer);\n                usage = BufferUsage.VERTEX | BufferUsage.COPY_DST;\n            }\n        }\n\n        buffer = new Buffer({\n            data: buffer,\n            label: index ? 'index-mesh-buffer' : 'vertex-mesh-buffer',\n            usage\n        });\n    }\n\n    return buffer;\n}\n"],"mappings":";;;AAcgB,SAAAA,eAAeC,MAAA,EAAwCC,KACvE;EACQ,MAAED,MAAA,YAAkBE,MACxB;IACI,IAAIC,KAAgB,GAAAF,KAAA,GAAQG,WAAY,CAAAC,KAAA,GAAQD,WAAY,CAAAE,MAAA;IAG5D,IAAIN,MAAA,YAAkBO,KACtB;MACI,IAAIN,KACJ;QACaD,MAAA,OAAIQ,WAAA,CAAYR,MAAM;QACvBG,KAAA,GAAAC,WAAA,CAAYC,KAAA,GAAQD,WAAY,CAAAK,QAAA;MAAA,CAI5C;QACaT,MAAA,OAAIU,YAAA,CAAaV,MAAM;QACxBG,KAAA,GAAAC,WAAA,CAAYE,MAAA,GAASF,WAAY,CAAAK,QAAA;MAAA;IAC7C;IAGJT,MAAA,GAAS,IAAIE,MAAO;MAChBS,IAAM,EAAAX,MAAA;MACNY,KAAA,EAAOX,KAAA,GAAQ,mBAAsB;MACrCE;IAAA,CACH;EAAA;EAGE,OAAAH,MAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}