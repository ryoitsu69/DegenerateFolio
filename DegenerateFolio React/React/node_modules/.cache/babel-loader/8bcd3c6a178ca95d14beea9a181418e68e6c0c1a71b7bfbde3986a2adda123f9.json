{"ast":null,"code":"import { bnToBn } from '../bn/toBn.js';\nimport { isBoolean } from '../is/boolean.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\nimport { calcSi, findSi, SI, SI_MID } from './si.js';\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT;\nfunction _formatBalance(input, {\n  decimals = defaultDecimals,\n  forceUnit,\n  locale = 'en',\n  withAll = false,\n  withSi = true,\n  withSiFull = false,\n  withUnit = true,\n  withZero = true\n} = {}) {\n  // we only work with string inputs here - convert anything\n  // into the string-only value\n  let text = bnToBn(input).toString();\n  if (text.length === 0 || text === '0') {\n    return '0';\n  }\n  // strip the negative sign so we can work with clean groupings, re-add this in the\n  // end when we return the result (from here on we work with positive numbers)\n  let sign = '';\n  if (text[0].startsWith('-')) {\n    sign = '-';\n    text = text.substring(1);\n  }\n  // We start at midpoint (8) minus 1 - this means that values display as\n  // 123.4567 instead of 0.1234 k (so we always have the most relevant).\n  const si = calcSi(text, decimals, forceUnit);\n  const mid = text.length - (decimals + si.power);\n  const pre = mid <= 0 ? '0' : text.substring(0, mid);\n  // get the post from the midpoint onward and then first add max decimals\n  // before trimming to the correct (calculated) amount of decimals again\n  let post = text.padStart(mid < 0 ? decimals : 1, '0').substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, '0').substring(0, withAll ? Math.max(4, decimals + si.power) : 4);\n  // remove all trailing 0's (if required via flag)\n  if (!withZero) {\n    let end = post.length - 1;\n    // This looks inefficient, however it is better to do the checks and\n    // only make one final slice than it is to do it in multiples\n    do {\n      if (post[end] === '0') {\n        end--;\n      }\n    } while (post[end] === '0');\n    post = post.substring(0, end + 1);\n  }\n  // the display unit\n  const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;\n  // format the units for display based on the flags\n  const units = withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${unit}` : '' : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}` : '';\n  const {\n    decimal,\n    thousand\n  } = getSeparator(locale);\n  return `${sign}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;\n}\nexport const formatBalance = _formatBalance;\nformatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);\nformatBalance.findSi = findSi;\nformatBalance.getDefaults = () => {\n  return {\n    decimals: defaultDecimals,\n    unit: defaultUnit\n  };\n};\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n  return SI.filter(({\n    power\n  }) => power < 0 ? decimals + power >= 0 : true);\n};\nformatBalance.setDefaults = ({\n  decimals,\n  unit\n}) => {\n  defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;\n  defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;\n  SI[SI_MID].text = defaultUnit;\n};","map":{"version":3,"names":["bnToBn","isBoolean","formatDecimal","getSeparator","calcSi","findSi","SI","SI_MID","DEFAULT_DECIMALS","DEFAULT_UNIT","text","defaultDecimals","defaultUnit","_formatBalance","input","decimals","forceUnit","locale","withAll","withSi","withSiFull","withUnit","withZero","toString","length","sign","startsWith","substring","si","mid","power","pre","post","padStart","padEnd","Math","max","end","unit","units","value","decimal","thousand","formatBalance","getDefaults","getOptions","filter","setDefaults","Array","isArray"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/format/formatBalance.js"],"sourcesContent":["import { bnToBn } from '../bn/toBn.js';\nimport { isBoolean } from '../is/boolean.js';\nimport { formatDecimal } from './formatDecimal.js';\nimport { getSeparator } from './getSeparator.js';\nimport { calcSi, findSi, SI, SI_MID } from './si.js';\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT;\nfunction _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = 'en', withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {\n    // we only work with string inputs here - convert anything\n    // into the string-only value\n    let text = bnToBn(input).toString();\n    if (text.length === 0 || text === '0') {\n        return '0';\n    }\n    // strip the negative sign so we can work with clean groupings, re-add this in the\n    // end when we return the result (from here on we work with positive numbers)\n    let sign = '';\n    if (text[0].startsWith('-')) {\n        sign = '-';\n        text = text.substring(1);\n    }\n    // We start at midpoint (8) minus 1 - this means that values display as\n    // 123.4567 instead of 0.1234 k (so we always have the most relevant).\n    const si = calcSi(text, decimals, forceUnit);\n    const mid = text.length - (decimals + si.power);\n    const pre = mid <= 0 ? '0' : text.substring(0, mid);\n    // get the post from the midpoint onward and then first add max decimals\n    // before trimming to the correct (calculated) amount of decimals again\n    let post = text\n        .padStart(mid < 0 ? decimals : 1, '0')\n        .substring(mid < 0 ? 0 : mid)\n        .padEnd(withAll ? Math.max(decimals, 4) : 4, '0')\n        .substring(0, withAll ? Math.max(4, decimals + si.power) : 4);\n    // remove all trailing 0's (if required via flag)\n    if (!withZero) {\n        let end = post.length - 1;\n        // This looks inefficient, however it is better to do the checks and\n        // only make one final slice than it is to do it in multiples\n        do {\n            if (post[end] === '0') {\n                end--;\n            }\n        } while (post[end] === '0');\n        post = post.substring(0, end + 1);\n    }\n    // the display unit\n    const unit = isBoolean(withUnit)\n        ? SI[SI_MID].text\n        : withUnit;\n    // format the units for display based on the flags\n    const units = withSi || withSiFull\n        ? si.value === '-'\n            ? withUnit\n                ? ` ${unit}`\n                : ''\n            : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}`\n        : '';\n    const { decimal, thousand } = getSeparator(locale);\n    return `${sign}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;\n}\nexport const formatBalance = _formatBalance;\nformatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals);\nformatBalance.findSi = findSi;\nformatBalance.getDefaults = () => {\n    return {\n        decimals: defaultDecimals,\n        unit: defaultUnit\n    };\n};\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n    return SI.filter(({ power }) => power < 0\n        ? (decimals + power) >= 0\n        : true);\n};\nformatBalance.setDefaults = ({ decimals, unit }) => {\n    defaultDecimals = (Array.isArray(decimals)\n        ? decimals[0]\n        : decimals) ?? defaultDecimals;\n    defaultUnit = (Array.isArray(unit)\n        ? unit[0]\n        : unit) ?? defaultUnit;\n    SI[SI_MID].text = defaultUnit;\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,MAAM,EAAEC,MAAM,EAAEC,EAAE,EAAEC,MAAM,QAAQ,SAAS;AACpD,MAAMC,gBAAgB,GAAG,CAAC;AAC1B,MAAMC,YAAY,GAAGH,EAAE,CAACC,MAAM,CAAC,CAACG,IAAI;AACpC,IAAIC,eAAe,GAAGH,gBAAgB;AACtC,IAAII,WAAW,GAAGH,YAAY;AAC9B,SAASI,cAAcA,CAACC,KAAK,EAAE;EAAEC,QAAQ,GAAGJ,eAAe;EAAEK,SAAS;EAAEC,MAAM,GAAG,IAAI;EAAEC,OAAO,GAAG,KAAK;EAAEC,MAAM,GAAG,IAAI;EAAEC,UAAU,GAAG,KAAK;EAAEC,QAAQ,GAAG,IAAI;EAAEC,QAAQ,GAAG;AAAK,CAAC,GAAG,CAAC,CAAC,EAAE;EAChL;EACA;EACA,IAAIZ,IAAI,GAAGV,MAAM,CAACc,KAAK,CAAC,CAACS,QAAQ,CAAC,CAAC;EACnC,IAAIb,IAAI,CAACc,MAAM,KAAK,CAAC,IAAId,IAAI,KAAK,GAAG,EAAE;IACnC,OAAO,GAAG;EACd;EACA;EACA;EACA,IAAIe,IAAI,GAAG,EAAE;EACb,IAAIf,IAAI,CAAC,CAAC,CAAC,CAACgB,UAAU,CAAC,GAAG,CAAC,EAAE;IACzBD,IAAI,GAAG,GAAG;IACVf,IAAI,GAAGA,IAAI,CAACiB,SAAS,CAAC,CAAC,CAAC;EAC5B;EACA;EACA;EACA,MAAMC,EAAE,GAAGxB,MAAM,CAACM,IAAI,EAAEK,QAAQ,EAAEC,SAAS,CAAC;EAC5C,MAAMa,GAAG,GAAGnB,IAAI,CAACc,MAAM,IAAIT,QAAQ,GAAGa,EAAE,CAACE,KAAK,CAAC;EAC/C,MAAMC,GAAG,GAAGF,GAAG,IAAI,CAAC,GAAG,GAAG,GAAGnB,IAAI,CAACiB,SAAS,CAAC,CAAC,EAAEE,GAAG,CAAC;EACnD;EACA;EACA,IAAIG,IAAI,GAAGtB,IAAI,CACVuB,QAAQ,CAACJ,GAAG,GAAG,CAAC,GAAGd,QAAQ,GAAG,CAAC,EAAE,GAAG,CAAC,CACrCY,SAAS,CAACE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG,CAAC,CAC5BK,MAAM,CAAChB,OAAO,GAAGiB,IAAI,CAACC,GAAG,CAACrB,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAChDY,SAAS,CAAC,CAAC,EAAET,OAAO,GAAGiB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAErB,QAAQ,GAAGa,EAAE,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC;EACjE;EACA,IAAI,CAACR,QAAQ,EAAE;IACX,IAAIe,GAAG,GAAGL,IAAI,CAACR,MAAM,GAAG,CAAC;IACzB;IACA;IACA,GAAG;MACC,IAAIQ,IAAI,CAACK,GAAG,CAAC,KAAK,GAAG,EAAE;QACnBA,GAAG,EAAE;MACT;IACJ,CAAC,QAAQL,IAAI,CAACK,GAAG,CAAC,KAAK,GAAG;IAC1BL,IAAI,GAAGA,IAAI,CAACL,SAAS,CAAC,CAAC,EAAEU,GAAG,GAAG,CAAC,CAAC;EACrC;EACA;EACA,MAAMC,IAAI,GAAGrC,SAAS,CAACoB,QAAQ,CAAC,GAC1Bf,EAAE,CAACC,MAAM,CAAC,CAACG,IAAI,GACfW,QAAQ;EACd;EACA,MAAMkB,KAAK,GAAGpB,MAAM,IAAIC,UAAU,GAC5BQ,EAAE,CAACY,KAAK,KAAK,GAAG,GACZnB,QAAQ,GACH,IAAGiB,IAAK,EAAC,GACV,EAAE,GACL,IAAGlB,UAAU,GAAI,GAAEQ,EAAE,CAAClB,IAAK,GAAEW,QAAQ,GAAG,GAAG,GAAG,EAAG,EAAC,GAAGO,EAAE,CAACY,KAAM,GAAEnB,QAAQ,GAAGiB,IAAI,GAAG,EAAG,EAAC,GAC3F,EAAE;EACR,MAAM;IAAEG,OAAO;IAAEC;EAAS,CAAC,GAAGvC,YAAY,CAACc,MAAM,CAAC;EAClD,OAAQ,GAAEQ,IAAK,GAAEvB,aAAa,CAAC6B,GAAG,EAAEW,QAAQ,CAAE,GAAEV,IAAI,IAAK,GAAES,OAAQ,GAAET,IAAK,EAAE,GAAEO,KAAM,EAAC;AACzF;AACA,OAAO,MAAMI,aAAa,GAAG9B,cAAc;AAC3C8B,aAAa,CAACvC,MAAM,GAAG,CAACM,IAAI,EAAEK,QAAQ,GAAGJ,eAAe,KAAKP,MAAM,CAACM,IAAI,EAAEK,QAAQ,CAAC;AACnF4B,aAAa,CAACtC,MAAM,GAAGA,MAAM;AAC7BsC,aAAa,CAACC,WAAW,GAAG,MAAM;EAC9B,OAAO;IACH7B,QAAQ,EAAEJ,eAAe;IACzB2B,IAAI,EAAE1B;EACV,CAAC;AACL,CAAC;AACD+B,aAAa,CAACE,UAAU,GAAG,CAAC9B,QAAQ,GAAGJ,eAAe,KAAK;EACvD,OAAOL,EAAE,CAACwC,MAAM,CAAC,CAAC;IAAEhB;EAAM,CAAC,KAAKA,KAAK,GAAG,CAAC,GAClCf,QAAQ,GAAGe,KAAK,IAAK,CAAC,GACvB,IAAI,CAAC;AACf,CAAC;AACDa,aAAa,CAACI,WAAW,GAAG,CAAC;EAAEhC,QAAQ;EAAEuB;AAAK,CAAC,KAAK;EAChD3B,eAAe,GAAG,CAACqC,KAAK,CAACC,OAAO,CAAClC,QAAQ,CAAC,GACpCA,QAAQ,CAAC,CAAC,CAAC,GACXA,QAAQ,KAAKJ,eAAe;EAClCC,WAAW,GAAG,CAACoC,KAAK,CAACC,OAAO,CAACX,IAAI,CAAC,GAC5BA,IAAI,CAAC,CAAC,CAAC,GACPA,IAAI,KAAK1B,WAAW;EAC1BN,EAAE,CAACC,MAAM,CAAC,CAACG,IAAI,GAAGE,WAAW;AACjC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}