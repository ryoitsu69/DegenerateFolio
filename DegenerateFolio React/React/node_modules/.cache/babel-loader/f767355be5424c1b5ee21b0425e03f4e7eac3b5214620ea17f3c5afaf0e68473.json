{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DateTime = exports.toSeconds = exports.fromSeconds = exports.toRfc3339WithNanoseconds = exports.fromRfc3339WithNanoseconds = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nfunction fromRfc3339WithNanoseconds(dateTimeString) {\n  const out = (0, encoding_1.fromRfc3339)(dateTimeString);\n  const nanosecondsMatch = dateTimeString.match(/\\.(\\d+)Z$/);\n  const nanoseconds = nanosecondsMatch ? nanosecondsMatch[1].slice(3) : \"\";\n  out.nanoseconds = parseInt(nanoseconds.padEnd(6, \"0\"), 10);\n  return out;\n}\nexports.fromRfc3339WithNanoseconds = fromRfc3339WithNanoseconds;\nfunction toRfc3339WithNanoseconds(dateTime) {\n  const millisecondIso = dateTime.toISOString();\n  const nanoseconds = dateTime.nanoseconds?.toString() ?? \"\";\n  return `${millisecondIso.slice(0, -1)}${nanoseconds.padStart(6, \"0\")}Z`;\n}\nexports.toRfc3339WithNanoseconds = toRfc3339WithNanoseconds;\nfunction fromSeconds(seconds, nanos = 0) {\n  const checkedNanos = new math_1.Uint32(nanos).toNumber();\n  if (checkedNanos > 999999999) {\n    throw new Error(\"Nano seconds must not exceed 999999999\");\n  }\n  const out = new Date(seconds * 1000 + Math.floor(checkedNanos / 1000000));\n  out.nanoseconds = checkedNanos % 1000000;\n  return out;\n}\nexports.fromSeconds = fromSeconds;\n/**\n * Calculates the UNIX timestamp in seconds as well as the nanoseconds after the given second.\n *\n * This is useful when dealing with external systems like the protobuf type\n * [.google.protobuf.Timestamp](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp)\n * or any other system that does not use millisecond precision.\n */\nfunction toSeconds(date) {\n  return {\n    seconds: Math.floor(date.getTime() / 1000),\n    nanos: date.getTime() % 1000 * 1000000 + (date.nanoseconds ?? 0)\n  };\n}\nexports.toSeconds = toSeconds;\n/** @deprecated Use fromRfc3339WithNanoseconds/toRfc3339WithNanoseconds instead */\nclass DateTime {\n  /** @deprecated Use fromRfc3339WithNanoseconds instead */\n  static decode(dateTimeString) {\n    return fromRfc3339WithNanoseconds(dateTimeString);\n  }\n  /** @deprecated Use toRfc3339WithNanoseconds instead */\n  static encode(dateTime) {\n    return toRfc3339WithNanoseconds(dateTime);\n  }\n}\nexports.DateTime = DateTime;","map":{"version":3,"names":["encoding_1","require","math_1","fromRfc3339WithNanoseconds","dateTimeString","out","fromRfc3339","nanosecondsMatch","match","nanoseconds","slice","parseInt","padEnd","exports","toRfc3339WithNanoseconds","dateTime","millisecondIso","toISOString","toString","padStart","fromSeconds","seconds","nanos","checkedNanos","Uint32","toNumber","Error","Date","Math","floor","toSeconds","date","getTime","DateTime","decode","encode"],"sources":["../src/dates.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AAaA,SAAgBE,0BAA0BA,CAACC,cAAsB;EAC/D,MAAMC,GAAG,GAAwB,IAAAL,UAAA,CAAAM,WAAW,EAACF,cAAc,CAAC;EAC5D,MAAMG,gBAAgB,GAAGH,cAAc,CAACI,KAAK,CAAC,WAAW,CAAC;EAC1D,MAAMC,WAAW,GAAGF,gBAAgB,GAAGA,gBAAgB,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;EACxEL,GAAG,CAACI,WAAW,GAAGE,QAAQ,CAACF,WAAW,CAACG,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;EAC1D,OAAOP,GAAG;AACZ;AANAQ,OAAA,CAAAV,0BAAA,GAAAA,0BAAA;AAQA,SAAgBW,wBAAwBA,CAACC,QAAqC;EAC5E,MAAMC,cAAc,GAAGD,QAAQ,CAACE,WAAW,EAAE;EAC7C,MAAMR,WAAW,GAAGM,QAAQ,CAACN,WAAW,EAAES,QAAQ,EAAE,IAAI,EAAE;EAC1D,OAAO,GAAGF,cAAc,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGD,WAAW,CAACU,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG;AACzE;AAJAN,OAAA,CAAAC,wBAAA,GAAAA,wBAAA;AAMA,SAAgBM,WAAWA,CAACC,OAAe,EAAEC,KAAK,GAAG,CAAC;EACpD,MAAMC,YAAY,GAAG,IAAIrB,MAAA,CAAAsB,MAAM,CAACF,KAAK,CAAC,CAACG,QAAQ,EAAE;EACjD,IAAIF,YAAY,GAAG,SAAW,EAAE;IAC9B,MAAM,IAAIG,KAAK,CAAC,wCAAwC,CAAC;;EAE3D,MAAMrB,GAAG,GAAwB,IAAIsB,IAAI,CAACN,OAAO,GAAG,IAAI,GAAGO,IAAI,CAACC,KAAK,CAACN,YAAY,GAAG,OAAO,CAAC,CAAC;EAC9FlB,GAAG,CAACI,WAAW,GAAGc,YAAY,GAAG,OAAO;EACxC,OAAOlB,GAAG;AACZ;AARAQ,OAAA,CAAAO,WAAA,GAAAA,WAAA;AAUA;;;;;;;AAOA,SAAgBU,SAASA,CAACC,IAAiC;EACzD,OAAO;IACLV,OAAO,EAAEO,IAAI,CAACC,KAAK,CAACE,IAAI,CAACC,OAAO,EAAE,GAAG,IAAI,CAAC;IAC1CV,KAAK,EAAGS,IAAI,CAACC,OAAO,EAAE,GAAG,IAAI,GAAI,OAAO,IAAID,IAAI,CAACtB,WAAW,IAAI,CAAC;GAClE;AACH;AALAI,OAAA,CAAAiB,SAAA,GAAAA,SAAA;AAOA;AACA,MAAaG,QAAQ;EACnB;EACO,OAAOC,MAAMA,CAAC9B,cAAsB;IACzC,OAAOD,0BAA0B,CAACC,cAAc,CAAC;EACnD;EAEA;EACO,OAAO+B,MAAMA,CAACpB,QAAqC;IACxD,OAAOD,wBAAwB,CAACC,QAAQ,CAAC;EAC3C;;AATFF,OAAA,CAAAoB,QAAA,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}