{"ast":null,"code":"import _defineProperty from \"/home/ryoitsu/Documents/test/react-todo-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isAscii, isUndefined, isUtf8, u8aToHex, u8aToString, u8aToU8a } from '@polkadot/util';\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\nexport class Raw extends Uint8Array {\n  /**\n   * @description This ensures that operators such as clice, filter, map, etc. return\n   * new Array instances (without this we need to apply overrides)\n   */\n  static get [Symbol.species]() {\n    return Uint8Array;\n  }\n  constructor(registry, value, initialU8aLength) {\n    super(u8aToU8a(value));\n    _defineProperty(this, \"registry\", void 0);\n    _defineProperty(this, \"createdAtHash\", void 0);\n    _defineProperty(this, \"initialU8aLength\", void 0);\n    _defineProperty(this, \"isStorageFallback\", void 0);\n    this.registry = registry;\n    this.initialU8aLength = initialU8aLength;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n  get encodedLength() {\n    return this.length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Returns true if the wrapped value contains only ASCII printable characters\n   */\n  get isAscii() {\n    return isAscii(this);\n  }\n  /**\n   * @description Returns true if the type wraps an empty/default all-0 value\n   */\n  get isEmpty() {\n    return !this.length || isUndefined(this.find(b => !!b));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only utf8 characters\n   */\n  get isUtf8() {\n    return isUtf8(this);\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n  bitLength() {\n    return this.length * 8;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    if (other instanceof Uint8Array) {\n      return this.length === other.length && !this.some((b, index) => b !== other[index]);\n    }\n    return this.eq(u8aToU8a(other));\n  }\n  /**\n   * @description Returns a breakdown of the hex encoding for this Codec\n   */\n  inspect() {\n    return {\n      outer: [this.toU8a()]\n    };\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n  toHex() {\n    return u8aToHex(this);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  toHuman(_isExtended, disableAscii) {\n    return this.toPrimitive(disableAscii);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Converts the value in a best-fit primitive form\n   */\n  toPrimitive(disableAscii) {\n    if (!disableAscii && this.isAscii) {\n      const text = this.toUtf8();\n      // ensure we didn't end up with multibyte codepoints\n      if (isAscii(text)) {\n        return text;\n      }\n    }\n    return this.toJSON();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType() {\n    return 'Raw';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   */\n  toU8a(_isBare) {\n    return Uint8Array.from(this);\n  }\n  /**\n   * @description Returns the wrapped data as a UTF-8 string\n   */\n  toUtf8() {\n    if (!this.isUtf8) {\n      throw new Error('The character sequence is not a valid Utf8 string');\n    }\n    return u8aToString(this);\n  }\n}","map":{"version":3,"names":["isAscii","isUndefined","isUtf8","u8aToHex","u8aToString","u8aToU8a","Raw","Uint8Array","Symbol","species","constructor","registry","value","initialU8aLength","_defineProperty","encodedLength","length","hash","toU8a","isEmpty","find","b","bitLength","eq","other","some","index","inspect","outer","toHex","toHuman","_isExtended","disableAscii","toPrimitive","toJSON","text","toUtf8","toRawType","toString","_isBare","from","Error"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types-codec/native/Raw.js"],"sourcesContent":["import { isAscii, isUndefined, isUtf8, u8aToHex, u8aToString, u8aToU8a } from '@polkadot/util';\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\nexport class Raw extends Uint8Array {\n    registry;\n    createdAtHash;\n    initialU8aLength;\n    isStorageFallback;\n    /**\n     * @description This ensures that operators such as clice, filter, map, etc. return\n     * new Array instances (without this we need to apply overrides)\n     */\n    static get [Symbol.species]() {\n        return Uint8Array;\n    }\n    constructor(registry, value, initialU8aLength) {\n        super(u8aToU8a(value));\n        this.registry = registry;\n        this.initialU8aLength = initialU8aLength;\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get encodedLength() {\n        return this.length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n    get hash() {\n        return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Returns true if the wrapped value contains only ASCII printable characters\n     */\n    get isAscii() {\n        return isAscii(this);\n    }\n    /**\n     * @description Returns true if the type wraps an empty/default all-0 value\n     */\n    get isEmpty() {\n        return !this.length || isUndefined(this.find((b) => !!b));\n    }\n    /**\n     * @description Returns true if the wrapped value contains only utf8 characters\n     */\n    get isUtf8() {\n        return isUtf8(this);\n    }\n    /**\n     * @description Returns the number of bits in the value\n     */\n    bitLength() {\n        return this.length * 8;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    eq(other) {\n        if (other instanceof Uint8Array) {\n            return (this.length === other.length) &&\n                !this.some((b, index) => b !== other[index]);\n        }\n        return this.eq(u8aToU8a(other));\n    }\n    /**\n     * @description Returns a breakdown of the hex encoding for this Codec\n     */\n    inspect() {\n        return {\n            outer: [this.toU8a()]\n        };\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n    toHex() {\n        return u8aToHex(this);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    toHuman(_isExtended, disableAscii) {\n        return this.toPrimitive(disableAscii);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n    toJSON() {\n        return this.toHex();\n    }\n    /**\n     * @description Converts the value in a best-fit primitive form\n     */\n    toPrimitive(disableAscii) {\n        if (!disableAscii && this.isAscii) {\n            const text = this.toUtf8();\n            // ensure we didn't end up with multibyte codepoints\n            if (isAscii(text)) {\n                return text;\n            }\n        }\n        return this.toJSON();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    toRawType() {\n        return 'Raw';\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n    toString() {\n        return this.toHex();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     */\n    toU8a(_isBare) {\n        return Uint8Array.from(this);\n    }\n    /**\n     * @description Returns the wrapped data as a UTF-8 string\n     */\n    toUtf8() {\n        if (!this.isUtf8) {\n            throw new Error('The character sequence is not a valid Utf8 string');\n        }\n        return u8aToString(this);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}