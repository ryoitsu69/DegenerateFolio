{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ecRecover = exports.sign = exports.signTransaction = exports.sendTransaction = exports.importRawKey = exports.lockAccount = exports.unlockAccount = exports.newAccount = exports.getAccounts = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_1 = require(\"web3-eth\");\nconst web3_types_1 = require(\"web3-types\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\nconst getAccounts = requestManager => __awaiter(void 0, void 0, void 0, function* () {\n  const result = yield web3_rpc_methods_1.personalRpcMethods.getAccounts(requestManager);\n  return result.map(web3_utils_1.toChecksumAddress);\n});\nexports.getAccounts = getAccounts;\nconst newAccount = (requestManager, password) => __awaiter(void 0, void 0, void 0, function* () {\n  web3_validator_1.validator.validate(['string'], [password]);\n  const result = yield web3_rpc_methods_1.personalRpcMethods.newAccount(requestManager, password);\n  return (0, web3_utils_1.toChecksumAddress)(result);\n});\nexports.newAccount = newAccount;\nconst unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter(void 0, void 0, void 0, function* () {\n  web3_validator_1.validator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);\n  return web3_rpc_methods_1.personalRpcMethods.unlockAccount(requestManager, address, password, unlockDuration);\n});\nexports.unlockAccount = unlockAccount;\nconst lockAccount = (requestManager, address) => __awaiter(void 0, void 0, void 0, function* () {\n  web3_validator_1.validator.validate(['address'], [address]);\n  return web3_rpc_methods_1.personalRpcMethods.lockAccount(requestManager, address);\n});\nexports.lockAccount = lockAccount;\nconst importRawKey = (requestManager, keyData, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  web3_validator_1.validator.validate(['string', 'string'], [keyData, passphrase]);\n  return web3_rpc_methods_1.personalRpcMethods.importRawKey(requestManager, keyData, passphrase);\n});\nexports.importRawKey = importRawKey;\nconst sendTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  const formattedTx = (0, web3_eth_1.formatTransaction)(tx, web3_types_1.ETH_DATA_FORMAT);\n  return web3_rpc_methods_1.personalRpcMethods.sendTransaction(requestManager, formattedTx, passphrase);\n});\nexports.sendTransaction = sendTransaction;\nconst signTransaction = (requestManager, tx, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  const formattedTx = (0, web3_eth_1.formatTransaction)(tx, web3_types_1.ETH_DATA_FORMAT);\n  return web3_rpc_methods_1.personalRpcMethods.signTransaction(requestManager, formattedTx, passphrase);\n});\nexports.signTransaction = signTransaction;\nconst sign = (requestManager, data, address, passphrase) => __awaiter(void 0, void 0, void 0, function* () {\n  web3_validator_1.validator.validate(['string', 'address', 'string'], [data, address, passphrase]);\n  const dataToSign = (0, web3_validator_1.isHexStrict)(data) ? data : (0, web3_utils_1.utf8ToHex)(data);\n  return web3_rpc_methods_1.personalRpcMethods.sign(requestManager, dataToSign, address, passphrase);\n});\nexports.sign = sign;\nconst ecRecover = (requestManager, signedData, signature) => __awaiter(void 0, void 0, void 0, function* () {\n  web3_validator_1.validator.validate(['string', 'string'], [signedData, signature]);\n  const signedDataString = (0, web3_validator_1.isHexStrict)(signedData) ? signedData : (0, web3_utils_1.utf8ToHex)(signedData);\n  return web3_rpc_methods_1.personalRpcMethods.ecRecover(requestManager, signedDataString, signature);\n});\nexports.ecRecover = ecRecover;","map":{"version":3,"names":["web3_utils_1","require","web3_eth_1","web3_types_1","web3_validator_1","web3_rpc_methods_1","getAccounts","requestManager","__awaiter","result","personalRpcMethods","map","toChecksumAddress","exports","newAccount","password","validator","validate","unlockAccount","address","unlockDuration","lockAccount","importRawKey","keyData","passphrase","sendTransaction","tx","formattedTx","formatTransaction","ETH_DATA_FORMAT","signTransaction","sign","data","dataToSign","isHexStrict","utf8ToHex","ecRecover","signedData","signature","signedDataString"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-personal/src/rpc_method_wrappers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport { toChecksumAddress, utf8ToHex } from 'web3-utils';\nimport { formatTransaction } from 'web3-eth';\nimport { Address, EthPersonalAPI, ETH_DATA_FORMAT, HexString, Transaction } from 'web3-types';\nimport { validator, isHexStrict } from 'web3-validator';\nimport { personalRpcMethods } from 'web3-rpc-methods';\n\nexport const getAccounts = async (requestManager: Web3RequestManager<EthPersonalAPI>) => {\n\tconst result = await personalRpcMethods.getAccounts(requestManager);\n\n\treturn result.map(toChecksumAddress);\n};\n\nexport const newAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tpassword: string,\n) => {\n\tvalidator.validate(['string'], [password]);\n\n\tconst result = await personalRpcMethods.newAccount(requestManager, password);\n\n\treturn toChecksumAddress(result);\n};\n\nexport const unlockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n\tpassword: string,\n\tunlockDuration: number,\n) => {\n\tvalidator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);\n\n\treturn personalRpcMethods.unlockAccount(requestManager, address, password, unlockDuration);\n};\n\nexport const lockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n) => {\n\tvalidator.validate(['address'], [address]);\n\n\treturn personalRpcMethods.lockAccount(requestManager, address);\n};\n\nexport const importRawKey = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tkeyData: HexString,\n\tpassphrase: string,\n) => {\n\tvalidator.validate(['string', 'string'], [keyData, passphrase]);\n\n\treturn personalRpcMethods.importRawKey(requestManager, keyData, passphrase);\n};\n\nexport const sendTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) => {\n\tconst formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n\n\treturn personalRpcMethods.sendTransaction(requestManager, formattedTx, passphrase);\n};\n\nexport const signTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) => {\n\tconst formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n\n\treturn personalRpcMethods.signTransaction(requestManager, formattedTx, passphrase);\n};\n\nexport const sign = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tdata: HexString,\n\taddress: Address,\n\tpassphrase: string,\n) => {\n\tvalidator.validate(['string', 'address', 'string'], [data, address, passphrase]);\n\n\tconst dataToSign = isHexStrict(data) ? data : utf8ToHex(data);\n\n\treturn personalRpcMethods.sign(requestManager, dataToSign, address, passphrase);\n};\n\nexport const ecRecover = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tsignedData: HexString,\n\tsignature: string,\n) => {\n\tvalidator.validate(['string', 'string'], [signedData, signature]);\n\n\tconst signedDataString = isHexStrict(signedData) ? signedData : utf8ToHex(signedData);\n\n\treturn personalRpcMethods.ecRecover(requestManager, signedDataString, signature);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}