{"ast":null,"code":"import { base64 } from '@scure/base';\nimport { createDecode, createEncode, createIs, createValidate } from '../base32/helpers.js';\nconst config = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  coder: base64,\n  type: 'base64',\n  withPadding: true\n};\n/**\n * @name base64Validate\n * @summary Validates a base64 value.\n * @description\n * Validates that the supplied value is valid base64\n */\nexport const base64Validate = /*#__PURE__*/createValidate(config);\n/**\n * @name isBase64\n * @description Checks if the input is in base64, returning true/false\n */\nexport const isBase64 = /*#__PURE__*/createIs(base64Validate);\n/**\n * @name base64Decode\n * @summary Decodes a base64 value.\n * @description\n * From the provided input, decode the base64 and return the result as an `Uint8Array`.\n */\nexport const base64Decode = /*#__PURE__*/createDecode(config, base64Validate);\n/**\n * @name base64Encode\n * @summary Creates a base64 value.\n * @description\n * From the provided input, create the base64 and return the result as a string.\n */\nexport const base64Encode = /*#__PURE__*/createEncode(config);","map":{"version":3,"names":["base64","createDecode","createEncode","createIs","createValidate","config","chars","coder","type","withPadding","base64Validate","isBase64","base64Decode","base64Encode"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/base64/bs64.js"],"sourcesContent":["import { base64 } from '@scure/base';\nimport { createDecode, createEncode, createIs, createValidate } from '../base32/helpers.js';\nconst config = {\n    chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n    coder: base64,\n    type: 'base64',\n    withPadding: true\n};\n/**\n * @name base64Validate\n * @summary Validates a base64 value.\n * @description\n * Validates that the supplied value is valid base64\n */\nexport const base64Validate = /*#__PURE__*/ createValidate(config);\n/**\n * @name isBase64\n * @description Checks if the input is in base64, returning true/false\n */\nexport const isBase64 = /*#__PURE__*/ createIs(base64Validate);\n/**\n * @name base64Decode\n * @summary Decodes a base64 value.\n * @description\n * From the provided input, decode the base64 and return the result as an `Uint8Array`.\n */\nexport const base64Decode = /*#__PURE__*/ createDecode(config, base64Validate);\n/**\n * @name base64Encode\n * @summary Creates a base64 value.\n * @description\n * From the provided input, create the base64 and return the result as a string.\n */\nexport const base64Encode = /*#__PURE__*/ createEncode(config);\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,SAASC,YAAY,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,sBAAsB;AAC3F,MAAMC,MAAM,GAAG;EACXC,KAAK,EAAE,kEAAkE;EACzEC,KAAK,EAAEP,MAAM;EACbQ,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,aAAcN,cAAc,CAACC,MAAM,CAAC;AAClE;AACA;AACA;AACA;AACA,OAAO,MAAMM,QAAQ,GAAG,aAAcR,QAAQ,CAACO,cAAc,CAAC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,YAAY,GAAG,aAAcX,YAAY,CAACI,MAAM,EAAEK,cAAc,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,YAAY,GAAG,aAAcX,YAAY,CAACG,MAAM,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}