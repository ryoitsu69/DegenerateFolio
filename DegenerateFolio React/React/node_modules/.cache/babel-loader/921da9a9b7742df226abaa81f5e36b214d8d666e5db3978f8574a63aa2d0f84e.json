{"ast":null,"code":"\"use strict\";\n\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const {\n    domElement,\n    styleElement,\n    svgRoot\n  } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const {\n    width,\n    height\n  } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\nexport { getSVGUrl };","map":{"version":3,"names":["getSVGUrl","text","style","resolution","fontCSS","htmlTextData","domElement","styleElement","svgRoot","innerHTML","cssStyle","setAttribute","textContent","width","height","image","toString","XMLSerializer","serializeToString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts"],"sourcesContent":["import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n"],"mappings":";;AAYO,SAASA,SACZA,CAAAC,IAAA,EACAC,KACA,EAAAC,UAAA,EACAC,OAAA,EACAC,YAEJ;EACI,MAAM;IAAEC,UAAA;IAAYC,YAAc;IAAAC;EAAA,CAAY,GAAAH,YAAA;EAE9CC,UAAA,CAAWG,SAAY,aAAUP,KAAM,CAAAQ,QAAQ,gBAAgBT,IAAI;EACnEK,UAAA,CAAWK,YAAa,UAA6B,oBAAAR,UAA+D;EACpHI,YAAA,CAAaK,WAAc,GAAAR,OAAA;EAE3B,MAAM;IAAES,KAAA;IAAOC;EAAO,IAAIT,YAAa,CAAAU,KAAA;EAEvCP,OAAA,CAAQG,YAAa,UAASE,KAAM,CAAAG,QAAA,EAAU;EAC9CR,OAAA,CAAQG,YAAa,WAAUG,MAAO,CAAAE,QAAA,EAAU;EAEhD,OAAO,IAAIC,aAAA,EAAgB,CAAAC,iBAAA,CAAkBV,OAAO;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}