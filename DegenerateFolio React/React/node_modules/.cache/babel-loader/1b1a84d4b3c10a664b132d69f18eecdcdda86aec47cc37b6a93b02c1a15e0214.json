{"ast":null,"code":"import { from, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\n/**\n * Returns a header range from startHash to to (not including) endHash, i.e. lastBlock.parentHash === endHash\n */\nexport function _getHeaderRange(instanceId, api) {\n  return memo(instanceId, function (startHash, endHash) {\n    let prev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return api.rpc.chain.getHeader(startHash).pipe(switchMap(header => header.parentHash.eq(endHash) ? of([header, ...prev]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev])));\n  });\n}\n/**\n * @name subscribeFinalizedHeads\n * @description An observable of the finalized block headers. Unlike the base\n * chain.subscribeFinalizedHeads this does not skip any headers. Since finalization\n * may skip specific blocks (finalization happens in terms of chains), this version\n * of the derive tracks missing headers (since last  retrieved) and provides them\n * to the caller\n */\nexport function subscribeFinalizedHeads(instanceId, api) {\n  return memo(instanceId, () => {\n    let prevHash = null;\n    return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap(header => {\n      const endHash = prevHash;\n      const startHash = header.parentHash;\n      prevHash = header.createdAtHash = header.hash;\n      return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap(headers => from(headers)));\n    }));\n  });\n}","map":{"version":3,"names":["from","of","switchMap","memo","_getHeaderRange","instanceId","api","startHash","endHash","prev","arguments","length","undefined","rpc","chain","getHeader","pipe","header","parentHash","eq","derive","subscribeFinalizedHeads","prevHash","createdAtHash","hash","headers"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/chain/subscribeFinalizedHeads.js"],"sourcesContent":["import { from, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\n/**\n * Returns a header range from startHash to to (not including) endHash, i.e. lastBlock.parentHash === endHash\n */\nexport function _getHeaderRange(instanceId, api) {\n    return memo(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash)\n        ? of([header, ...prev])\n        : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));\n}\n/**\n * @name subscribeFinalizedHeads\n * @description An observable of the finalized block headers. Unlike the base\n * chain.subscribeFinalizedHeads this does not skip any headers. Since finalization\n * may skip specific blocks (finalization happens in terms of chains), this version\n * of the derive tracks missing headers (since last  retrieved) and provides them\n * to the caller\n */\nexport function subscribeFinalizedHeads(instanceId, api) {\n    return memo(instanceId, () => {\n        let prevHash = null;\n        return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {\n            const endHash = prevHash;\n            const startHash = header.parentHash;\n            prevHash = header.createdAtHash = header.hash;\n            return endHash === null || startHash.eq(endHash)\n                ? of(header)\n                : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));\n        }));\n    });\n}\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AAC1C,SAASC,IAAI,QAAQ,kBAAkB;AACvC;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,UAAU,EAAEC,GAAG,EAAE;EAC7C,OAAOH,IAAI,CAACE,UAAU,EAAE,UAACE,SAAS,EAAEC,OAAO;IAAA,IAAEC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,OAAKJ,GAAG,CAACO,GAAG,CAACC,KAAK,CAACC,SAAS,CAACR,SAAS,CAAC,CAACS,IAAI,CAACd,SAAS,CAAEe,MAAM,IAAKA,MAAM,CAACC,UAAU,CAACC,EAAE,CAACX,OAAO,CAAC,GAChJP,EAAE,CAAC,CAACgB,MAAM,EAAE,GAAGR,IAAI,CAAC,CAAC,GACrBH,GAAG,CAACc,MAAM,CAACN,KAAK,CAACV,eAAe,CAACa,MAAM,CAACC,UAAU,EAAEV,OAAO,EAAE,CAACS,MAAM,EAAE,GAAGR,IAAI,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,uBAAuBA,CAAChB,UAAU,EAAEC,GAAG,EAAE;EACrD,OAAOH,IAAI,CAACE,UAAU,EAAE,MAAM;IAC1B,IAAIiB,QAAQ,GAAG,IAAI;IACnB,OAAOhB,GAAG,CAACO,GAAG,CAACC,KAAK,CAACO,uBAAuB,CAAC,CAAC,CAACL,IAAI,CAACd,SAAS,CAAEe,MAAM,IAAK;MACtE,MAAMT,OAAO,GAAGc,QAAQ;MACxB,MAAMf,SAAS,GAAGU,MAAM,CAACC,UAAU;MACnCI,QAAQ,GAAGL,MAAM,CAACM,aAAa,GAAGN,MAAM,CAACO,IAAI;MAC7C,OAAOhB,OAAO,KAAK,IAAI,IAAID,SAAS,CAACY,EAAE,CAACX,OAAO,CAAC,GAC1CP,EAAE,CAACgB,MAAM,CAAC,GACVX,GAAG,CAACc,MAAM,CAACN,KAAK,CAACV,eAAe,CAACG,SAAS,EAAEC,OAAO,EAAE,CAACS,MAAM,CAAC,CAAC,CAACD,IAAI,CAACd,SAAS,CAAEuB,OAAO,IAAKzB,IAAI,CAACyB,OAAO,CAAC,CAAC,CAAC;IACpH,CAAC,CAAC,CAAC;EACP,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}