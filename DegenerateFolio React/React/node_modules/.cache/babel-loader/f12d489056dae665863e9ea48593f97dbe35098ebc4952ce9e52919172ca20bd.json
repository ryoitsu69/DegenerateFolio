{"ast":null,"code":"export const v9 = {\n  // v9\n  ErrorMetadataV9: {\n    name: 'Text',\n    docs: 'Vec<Text>'\n  },\n  EventMetadataV9: {\n    name: 'Text',\n    args: 'Vec<Type>',\n    docs: 'Vec<Text>'\n  },\n  FunctionArgumentMetadataV9: {\n    name: 'Text',\n    type: 'Type'\n  },\n  FunctionMetadataV9: {\n    name: 'Text',\n    args: 'Vec<FunctionArgumentMetadataV9>',\n    docs: 'Vec<Text>'\n  },\n  MetadataV9: {\n    modules: 'Vec<ModuleMetadataV9>'\n  },\n  ModuleConstantMetadataV9: {\n    name: 'Text',\n    type: 'Type',\n    value: 'Bytes',\n    docs: 'Vec<Text>'\n  },\n  ModuleMetadataV9: {\n    name: 'Text',\n    storage: 'Option<StorageMetadataV9>',\n    calls: 'Option<Vec<FunctionMetadataV9>>',\n    events: 'Option<Vec<EventMetadataV9>>',\n    constants: 'Vec<ModuleConstantMetadataV9>',\n    errors: 'Vec<ErrorMetadataV9>'\n  },\n  StorageEntryMetadataV9: {\n    name: 'Text',\n    modifier: 'StorageEntryModifierV9',\n    type: 'StorageEntryTypeV9',\n    fallback: 'Bytes',\n    docs: 'Vec<Text>'\n  },\n  StorageEntryModifierV9: {\n    _enum: ['Optional', 'Default', 'Required']\n  },\n  StorageEntryTypeV9: {\n    _enum: {\n      Plain: 'Type',\n      Map: {\n        hasher: 'StorageHasherV9',\n        key: 'Type',\n        value: 'Type',\n        linked: 'bool'\n      },\n      DoubleMap: {\n        hasher: 'StorageHasherV9',\n        key1: 'Type',\n        key2: 'Type',\n        value: 'Type',\n        key2Hasher: 'StorageHasherV9'\n      }\n    }\n  },\n  StorageHasherV9: {\n    _enum: {\n      Blake2_128: null,\n      // eslint-disable-line camelcase\n      Blake2_256: null,\n      // eslint-disable-line camelcase\n      Twox128: null,\n      Twox256: null,\n      Twox64Concat: null\n    }\n  },\n  StorageMetadataV9: {\n    prefix: 'Text',\n    items: 'Vec<StorageEntryMetadataV9>'\n  }\n};","map":{"version":3,"names":["v9","ErrorMetadataV9","name","docs","EventMetadataV9","args","FunctionArgumentMetadataV9","type","FunctionMetadataV9","MetadataV9","modules","ModuleConstantMetadataV9","value","ModuleMetadataV9","storage","calls","events","constants","errors","StorageEntryMetadataV9","modifier","fallback","StorageEntryModifierV9","_enum","StorageEntryTypeV9","Plain","Map","hasher","key","linked","DoubleMap","key1","key2","key2Hasher","StorageHasherV9","Blake2_128","Blake2_256","Twox128","Twox256","Twox64Concat","StorageMetadataV9","prefix","items"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/interfaces/metadata/v9.js"],"sourcesContent":["export const v9 = {\n    // v9\n    ErrorMetadataV9: {\n        name: 'Text',\n        docs: 'Vec<Text>'\n    },\n    EventMetadataV9: {\n        name: 'Text',\n        args: 'Vec<Type>',\n        docs: 'Vec<Text>'\n    },\n    FunctionArgumentMetadataV9: {\n        name: 'Text',\n        type: 'Type'\n    },\n    FunctionMetadataV9: {\n        name: 'Text',\n        args: 'Vec<FunctionArgumentMetadataV9>',\n        docs: 'Vec<Text>'\n    },\n    MetadataV9: {\n        modules: 'Vec<ModuleMetadataV9>'\n    },\n    ModuleConstantMetadataV9: {\n        name: 'Text',\n        type: 'Type',\n        value: 'Bytes',\n        docs: 'Vec<Text>'\n    },\n    ModuleMetadataV9: {\n        name: 'Text',\n        storage: 'Option<StorageMetadataV9>',\n        calls: 'Option<Vec<FunctionMetadataV9>>',\n        events: 'Option<Vec<EventMetadataV9>>',\n        constants: 'Vec<ModuleConstantMetadataV9>',\n        errors: 'Vec<ErrorMetadataV9>'\n    },\n    StorageEntryMetadataV9: {\n        name: 'Text',\n        modifier: 'StorageEntryModifierV9',\n        type: 'StorageEntryTypeV9',\n        fallback: 'Bytes',\n        docs: 'Vec<Text>'\n    },\n    StorageEntryModifierV9: {\n        _enum: ['Optional', 'Default', 'Required']\n    },\n    StorageEntryTypeV9: {\n        _enum: {\n            Plain: 'Type',\n            Map: {\n                hasher: 'StorageHasherV9',\n                key: 'Type',\n                value: 'Type',\n                linked: 'bool'\n            },\n            DoubleMap: {\n                hasher: 'StorageHasherV9',\n                key1: 'Type',\n                key2: 'Type',\n                value: 'Type',\n                key2Hasher: 'StorageHasherV9'\n            }\n        }\n    },\n    StorageHasherV9: {\n        _enum: {\n            Blake2_128: null, // eslint-disable-line camelcase\n            Blake2_256: null, // eslint-disable-line camelcase\n            Twox128: null,\n            Twox256: null,\n            Twox64Concat: null\n        }\n    },\n    StorageMetadataV9: {\n        prefix: 'Text',\n        items: 'Vec<StorageEntryMetadataV9>'\n    }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,EAAE,GAAG;EACd;EACAC,eAAe,EAAE;IACbC,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE;EACV,CAAC;EACDC,eAAe,EAAE;IACbF,IAAI,EAAE,MAAM;IACZG,IAAI,EAAE,WAAW;IACjBF,IAAI,EAAE;EACV,CAAC;EACDG,0BAA0B,EAAE;IACxBJ,IAAI,EAAE,MAAM;IACZK,IAAI,EAAE;EACV,CAAC;EACDC,kBAAkB,EAAE;IAChBN,IAAI,EAAE,MAAM;IACZG,IAAI,EAAE,iCAAiC;IACvCF,IAAI,EAAE;EACV,CAAC;EACDM,UAAU,EAAE;IACRC,OAAO,EAAE;EACb,CAAC;EACDC,wBAAwB,EAAE;IACtBT,IAAI,EAAE,MAAM;IACZK,IAAI,EAAE,MAAM;IACZK,KAAK,EAAE,OAAO;IACdT,IAAI,EAAE;EACV,CAAC;EACDU,gBAAgB,EAAE;IACdX,IAAI,EAAE,MAAM;IACZY,OAAO,EAAE,2BAA2B;IACpCC,KAAK,EAAE,iCAAiC;IACxCC,MAAM,EAAE,8BAA8B;IACtCC,SAAS,EAAE,+BAA+B;IAC1CC,MAAM,EAAE;EACZ,CAAC;EACDC,sBAAsB,EAAE;IACpBjB,IAAI,EAAE,MAAM;IACZkB,QAAQ,EAAE,wBAAwB;IAClCb,IAAI,EAAE,oBAAoB;IAC1Bc,QAAQ,EAAE,OAAO;IACjBlB,IAAI,EAAE;EACV,CAAC;EACDmB,sBAAsB,EAAE;IACpBC,KAAK,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,UAAU;EAC7C,CAAC;EACDC,kBAAkB,EAAE;IAChBD,KAAK,EAAE;MACHE,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE;QACDC,MAAM,EAAE,iBAAiB;QACzBC,GAAG,EAAE,MAAM;QACXhB,KAAK,EAAE,MAAM;QACbiB,MAAM,EAAE;MACZ,CAAC;MACDC,SAAS,EAAE;QACPH,MAAM,EAAE,iBAAiB;QACzBI,IAAI,EAAE,MAAM;QACZC,IAAI,EAAE,MAAM;QACZpB,KAAK,EAAE,MAAM;QACbqB,UAAU,EAAE;MAChB;IACJ;EACJ,CAAC;EACDC,eAAe,EAAE;IACbX,KAAK,EAAE;MACHY,UAAU,EAAE,IAAI;MAAE;MAClBC,UAAU,EAAE,IAAI;MAAE;MAClBC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE;IAClB;EACJ,CAAC;EACDC,iBAAiB,EAAE;IACfC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACX;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}