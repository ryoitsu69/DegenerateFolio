{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst hmac_1 = require(\"./hmac\");\nconst sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\nvar Slip10Curve;\n(function (Slip10Curve) {\n  Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n  Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\nfunction slip10CurveFromString(curveString) {\n  switch (curveString) {\n    case Slip10Curve.Ed25519:\n      return Slip10Curve.Ed25519;\n    case Slip10Curve.Secp256k1:\n      return Slip10Curve.Secp256k1;\n    default:\n      throw new Error(`Unknown curve string: '${curveString}'`);\n  }\n}\nexports.slip10CurveFromString = slip10CurveFromString;\nclass Slip10RawIndex extends math_1.Uint32 {\n  static hardened(hardenedIndex) {\n    return new Slip10RawIndex(hardenedIndex + 2 ** 31);\n  }\n  static normal(normalIndex) {\n    return new Slip10RawIndex(normalIndex);\n  }\n  isHardened() {\n    return this.data >= 2 ** 31;\n  }\n}\nexports.Slip10RawIndex = Slip10RawIndex;\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\n// Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\nclass Slip10 {\n  static derivePath(curve, seed, path) {\n    let result = this.master(curve, seed);\n    for (const rawIndex of path) {\n      result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n    }\n    return result;\n  }\n  static master(curve, seed) {\n    const i = new hmac_1.Hmac(sha_1.Sha512, (0, encoding_1.toAscii)(curve)).update(seed).digest();\n    const il = i.slice(0, 32);\n    const ir = i.slice(32, 64);\n    if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n      return this.master(curve, i);\n    }\n    return {\n      chainCode: ir,\n      privkey: il\n    };\n  }\n  static child(curve, parentPrivkey, parentChainCode, rawIndex) {\n    let i;\n    if (rawIndex.isHardened()) {\n      const payload = new Uint8Array([0x00, ...parentPrivkey, ...rawIndex.toBytesBigEndian()]);\n      i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n    } else {\n      if (curve === Slip10Curve.Ed25519) {\n        throw new Error(\"Normal keys are not allowed with ed25519\");\n      } else {\n        // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n        // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n        // where the functions point() and ser_p() are defined in BIP-0032\n        const data = new Uint8Array([...Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey)), ...rawIndex.toBytesBigEndian()]);\n        i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n      }\n    }\n    return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n  }\n  /**\n   * Implementation of ser_P(point(k_par)) from BIP-0032\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n   */\n  static serializedPoint(curve, p) {\n    switch (curve) {\n      case Slip10Curve.Secp256k1:\n        return (0, encoding_1.fromHex)(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n      default:\n        throw new Error(\"curve not supported\");\n    }\n  }\n  static childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n    // step 2 (of the Private parent key â†’ private child key algorithm)\n    const il = i.slice(0, 32);\n    const ir = i.slice(32, 64);\n    // step 3\n    const returnChainCode = ir;\n    // step 4\n    if (curve === Slip10Curve.Ed25519) {\n      return {\n        chainCode: returnChainCode,\n        privkey: il\n      };\n    }\n    // step 5\n    const n = this.n(curve);\n    const returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n    const returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32));\n    // step 6\n    if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n      const newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(new Uint8Array([0x01, ...ir, ...rawIndex.toBytesBigEndian()])).digest();\n      return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n    }\n    // step 7\n    return {\n      chainCode: returnChainCode,\n      privkey: returnChildKey\n    };\n  }\n  static isZero(privkey) {\n    return privkey.every(byte => byte === 0);\n  }\n  static isGteN(curve, privkey) {\n    const keyAsNumber = new bn_js_1.default(privkey);\n    return keyAsNumber.gte(this.n(curve));\n  }\n  static n(curve) {\n    switch (curve) {\n      case Slip10Curve.Secp256k1:\n        return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n      default:\n        throw new Error(\"curve not supported\");\n    }\n  }\n}\nexports.Slip10 = Slip10;\nfunction pathToString(path) {\n  return path.reduce((current, component) => {\n    const componentString = component.isHardened() ? `${component.toNumber() - 2 ** 31}'` : component.toString();\n    return current + \"/\" + componentString;\n  }, \"m\");\n}\nexports.pathToString = pathToString;\nfunction stringToPath(input) {\n  if (!input.startsWith(\"m\")) throw new Error(\"Path string must start with 'm'\");\n  let rest = input.slice(1);\n  const out = new Array();\n  while (rest) {\n    const match = rest.match(/^\\/([0-9]+)('?)/);\n    if (!match) throw new Error(\"Syntax error while reading path component\");\n    const [fullMatch, numberString, apostrophe] = match;\n    const value = math_1.Uint53.fromString(numberString).toNumber();\n    if (value >= 2 ** 31) throw new Error(\"Component value too high. Must not exceed 2**31-1.\");\n    if (apostrophe) out.push(Slip10RawIndex.hardened(value));else out.push(Slip10RawIndex.normal(value));\n    rest = rest.slice(fullMatch.length);\n  }\n  return out;\n}\nexports.stringToPath = stringToPath;","map":{"version":3,"names":["encoding_1","require","math_1","bn_js_1","__importDefault","elliptic_1","hmac_1","sha_1","Slip10Curve","exports","slip10CurveFromString","curveString","Ed25519","Secp256k1","Error","Slip10RawIndex","Uint32","hardened","hardenedIndex","normal","normalIndex","isHardened","data","secp256k1","default","ec","Slip10","derivePath","curve","seed","path","result","master","rawIndex","child","privkey","chainCode","i","Hmac","Sha512","toAscii","update","digest","il","slice","ir","isZero","isGteN","parentPrivkey","parentChainCode","payload","Uint8Array","toBytesBigEndian","serializedPoint","childImpl","p","fromHex","g","mul","encodeCompressed","returnChainCode","n","returnChildKeyAsNumber","add","mod","returnChildKey","from","toArray","newI","every","byte","keyAsNumber","gte","pathToString","reduce","current","component","componentString","toNumber","toString","stringToPath","input","startsWith","rest","out","Array","match","fullMatch","numberString","apostrophe","value","Uint53","fromString","push","length"],"sources":["../src/slip10.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}