{"ast":null,"code":"import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\n\"use strict\";\nconst contextSettings = {\n  // TextMetrics requires getImageData readback for measuring fonts.\n  willReadFrequently: true\n};\nconst _CanvasTextMetrics = class _CanvasTextMetrics {\n  /**\n   * Checking that we can use modern canvas 2D API.\n   *\n   * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n   * @see TextMetrics.experimentalLetterSpacing\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n   * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n   */\n  static get experimentalLetterSpacingSupported() {\n    let result = _CanvasTextMetrics._experimentalLetterSpacingSupported;\n    if (result !== void 0) {\n      const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n      result = _CanvasTextMetrics._experimentalLetterSpacingSupported = \"letterSpacing\" in proto || \"textLetterSpacing\" in proto;\n    }\n    return result;\n  }\n  /**\n   * @param text - the text that was measured\n   * @param style - the style that was measured\n   * @param width - the measured width of the text\n   * @param height - the measured height of the text\n   * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param lineWidths - an array of the line widths for each line matched to `lines`\n   * @param lineHeight - the measured line height for this style\n   * @param maxLineWidth - the maximum line width for all measured lines\n   * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   * @param text - The text to measure.\n   * @param style - The text style to use for measuring\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @param wordWrap\n   * @returns Measured width and height of the text.\n   */\n  static measureText(text = \" \", style, canvas = _CanvasTextMetrics._canvas, wordWrap = style.wordWrap) {\n    const textKey = `${text}:${style.styleKey}`;\n    if (_CanvasTextMetrics._measurementCache[textKey]) return _CanvasTextMetrics._measurementCache[textKey];\n    const font = fontStringFromTextStyle(style);\n    const fontProperties = _CanvasTextMetrics.measureFont(font);\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n    const context = _CanvasTextMetrics.__context;\n    context.font = font;\n    const outputText = wordWrap ? _CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n    const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineWidths = new Array(lines.length);\n    let maxLineWidth = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineWidth = _CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    const strokeWidth = style._stroke?.width || 0;\n    let width = maxLineWidth + strokeWidth;\n    if (style.dropShadow) {\n      width += style.dropShadow.distance;\n    }\n    const lineHeight = style.lineHeight || fontProperties.fontSize + strokeWidth;\n    let height = Math.max(lineHeight, fontProperties.fontSize + strokeWidth * 2) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadow.distance;\n    }\n    const measurements = new _CanvasTextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n    return measurements;\n  }\n  static _measureText(text, letterSpacing, context) {\n    let useExperimentalLetterSpacing = false;\n    if (_CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (_CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    let width = context.measureText(text).width;\n    if (width > 0) {\n      if (useExperimentalLetterSpacing) {\n        width -= letterSpacing;\n      } else {\n        width += (_CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n      }\n    }\n    return width;\n  }\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   * @param text - String to apply word wrapping to\n   * @param style - the style to use when wrapping\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @returns New string with new lines applied where required\n   */\n  static _wordWrap(text, style, canvas = _CanvasTextMetrics._canvas) {\n    const context = canvas.getContext(\"2d\", contextSettings);\n    let width = 0;\n    let line = \"\";\n    let lines = \"\";\n    const cache = /* @__PURE__ */Object.create(null);\n    const {\n      letterSpacing,\n      whiteSpace\n    } = style;\n    const collapseSpaces = _CanvasTextMetrics._collapseSpaces(whiteSpace);\n    const collapseNewlines = _CanvasTextMetrics._collapseNewlines(whiteSpace);\n    let canPrependSpaces = !collapseSpaces;\n    const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n    const tokens = _CanvasTextMetrics._tokenize(text);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i];\n      if (_CanvasTextMetrics._isNewline(token)) {\n        if (!collapseNewlines) {\n          lines += _CanvasTextMetrics._addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = \"\";\n          width = 0;\n          continue;\n        }\n        token = \" \";\n      }\n      if (collapseSpaces) {\n        const currIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(token);\n        const lastIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n      const tokenWidth = _CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n      if (tokenWidth > wordWrapWidth) {\n        if (line !== \"\") {\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (_CanvasTextMetrics.canBreakWords(token, style.breakWords)) {\n          const characters = _CanvasTextMetrics.wordWrapSplit(token);\n          for (let j = 0; j < characters.length; j++) {\n            let char = characters[j];\n            let lastChar = char;\n            let k = 1;\n            while (characters[j + k]) {\n              const nextChar = characters[j + k];\n              if (!_CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                char += nextChar;\n              } else {\n                break;\n              }\n              lastChar = nextChar;\n              k++;\n            }\n            j += k - 1;\n            const characterWidth = _CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += _CanvasTextMetrics._addLine(line);\n              canPrependSpaces = false;\n              line = \"\";\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        } else {\n          if (line.length > 0) {\n            lines += _CanvasTextMetrics._addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          const isLastToken = i === tokens.length - 1;\n          lines += _CanvasTextMetrics._addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = \"\";\n          width = 0;\n        }\n      } else {\n        if (tokenWidth + width > wordWrapWidth) {\n          canPrependSpaces = false;\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (line.length > 0 || !_CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          line += token;\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += _CanvasTextMetrics._addLine(line, false);\n    return lines;\n  }\n  /**\n   * Convienience function for logging each line added during the wordWrap method.\n   * @param line    - The line of text to add\n   * @param newLine - Add new line character to end\n   * @returns A formatted line\n   */\n  static _addLine(line, newLine = true) {\n    line = _CanvasTextMetrics._trimRight(line);\n    line = newLine ? `${line}\n` : line;\n    return line;\n  }\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   * @param key            - The key\n   * @param letterSpacing  - The letter spacing\n   * @param cache          - The cache\n   * @param context        - The canvas context\n   * @returns The from cache.\n   */\n  static _getFromCache(key, letterSpacing, cache, context) {\n    let width = cache[key];\n    if (typeof width !== \"number\") {\n      width = _CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n      cache[key] = width;\n    }\n    return width;\n  }\n  /**\n   * Determines whether we should collapse breaking spaces.\n   * @param whiteSpace - The TextStyle property whiteSpace\n   * @returns Should collapse\n   */\n  static _collapseSpaces(whiteSpace) {\n    return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n  }\n  /**\n   * Determines whether we should collapse newLine chars.\n   * @param whiteSpace - The white space\n   * @returns should collapse\n   */\n  static _collapseNewlines(whiteSpace) {\n    return whiteSpace === \"normal\";\n  }\n  /**\n   * Trims breaking whitespaces from string.\n   * @param text - The text\n   * @returns Trimmed string\n   */\n  static _trimRight(text) {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    for (let i = text.length - 1; i >= 0; i--) {\n      const char = text[i];\n      if (!_CanvasTextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  }\n  /**\n   * Determines if char is a newline.\n   * @param char - The character\n   * @returns True if newline, False otherwise.\n   */\n  static _isNewline(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n  }\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * It allows one to determine whether char should be a breaking whitespace\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param char - The character\n   * @param [_nextChar] - The next character\n   * @returns True if whitespace, False otherwise.\n   */\n  static isBreakingSpace(char, _nextChar) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n  }\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   * @param text - The text\n   * @returns A tokenized array\n   */\n  static _tokenize(text) {\n    const tokens = [];\n    let token = \"\";\n    if (typeof text !== \"string\") {\n      return tokens;\n    }\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const nextChar = text[i + 1];\n      if (_CanvasTextMetrics.isBreakingSpace(char, nextChar) || _CanvasTextMetrics._isNewline(char)) {\n        if (token !== \"\") {\n          tokens.push(token);\n          token = \"\";\n        }\n        tokens.push(char);\n        continue;\n      }\n      token += char;\n    }\n    if (token !== \"\") {\n      tokens.push(token);\n    }\n    return tokens;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   * @param _token - The token\n   * @param breakWords - The style attr break words\n   * @returns Whether to break word or not\n   */\n  static canBreakWords(_token, breakWords) {\n    return breakWords;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param _char - The character\n   * @param _nextChar - The next character\n   * @param _token - The token/word the characters are from\n   * @param _index - The index in the token of the char\n   * @param _breakWords - The style attr break words\n   * @returns whether to break word or not\n   */\n  static canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It is called when a token (usually a word) has to be split into separate pieces\n   * in order to determine the point to break a word.\n   * It must return an array of characters.\n   * @param token - The token to split\n   * @returns The characters of the token\n   * @see CanvasTextMetrics.graphemeSegmenter\n   */\n  static wordWrapSplit(token) {\n    return _CanvasTextMetrics.graphemeSegmenter(token);\n  }\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   * @param font - String representing the style of the font\n   * @returns Font properties object\n   */\n  static measureFont(font) {\n    if (_CanvasTextMetrics._fonts[font]) {\n      return _CanvasTextMetrics._fonts[font];\n    }\n    const context = _CanvasTextMetrics._context;\n    context.font = font;\n    const metrics = context.measureText(_CanvasTextMetrics.METRICS_STRING + _CanvasTextMetrics.BASELINE_SYMBOL);\n    const properties = {\n      ascent: metrics.actualBoundingBoxAscent,\n      descent: metrics.actualBoundingBoxDescent,\n      fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n    };\n    _CanvasTextMetrics._fonts[font] = properties;\n    return properties;\n  }\n  /**\n   * Clear font metrics in metrics cache.\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n  static clearMetrics(font = \"\") {\n    if (font) {\n      delete _CanvasTextMetrics._fonts[font];\n    } else {\n      _CanvasTextMetrics._fonts = {};\n    }\n  }\n  /**\n   * Cached canvas element for measuring text\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _canvas() {\n    if (!_CanvasTextMetrics.__canvas) {\n      let canvas;\n      try {\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext(\"2d\", contextSettings);\n        if (context?.measureText) {\n          _CanvasTextMetrics.__canvas = c;\n          return c;\n        }\n        canvas = DOMAdapter.get().createCanvas();\n      } catch (ex) {\n        canvas = DOMAdapter.get().createCanvas();\n      }\n      canvas.width = canvas.height = 10;\n      _CanvasTextMetrics.__canvas = canvas;\n    }\n    return _CanvasTextMetrics.__canvas;\n  }\n  /**\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _context() {\n    if (!_CanvasTextMetrics.__context) {\n      _CanvasTextMetrics.__context = _CanvasTextMetrics._canvas.getContext(\"2d\", contextSettings);\n    }\n    return _CanvasTextMetrics.__context;\n  }\n};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n */\n_CanvasTextMetrics.METRICS_STRING = \"|\\xC9q\\xC5\";\n/** Baseline symbol for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_SYMBOL = \"M\";\n/** Baseline multiplier for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/** Height multiplier for setting height of canvas to calculate font metrics. */\n_CanvasTextMetrics.HEIGHT_MULTIPLIER = 2;\n/**\n * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n */\n_CanvasTextMetrics.graphemeSegmenter = (() => {\n  if (typeof Intl?.Segmenter === \"function\") {\n    const segmenter = new Intl.Segmenter();\n    return s => [...segmenter.segment(s)].map(x => x.segment);\n  }\n  return s => [...s];\n})();\n/**\n * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n * lead to more accurate letter-spacing results because it does not try to manually draw\n * each character. However, this Chrome API is experimental and may not serve all cases yet.\n * @see TextMetrics.experimentalLetterSpacingSupported\n */\n_CanvasTextMetrics.experimentalLetterSpacing = false;\n/** Cache of {@see TextMetrics.FontMetrics} objects. */\n_CanvasTextMetrics._fonts = {};\n/** Cache of new line chars. */\n_CanvasTextMetrics._newlines = [10,\n// line feed\n13\n// carriage return\n];\n/** Cache of breaking spaces. */\n_CanvasTextMetrics._breakingSpaces = [9,\n// character tabulation\n32,\n// space\n8192,\n// en quad\n8193,\n// em quad\n8194,\n// en space\n8195,\n// em space\n8196,\n// three-per-em space\n8197,\n// four-per-em space\n8198,\n// six-per-em space\n8200,\n// punctuation space\n8201,\n// thin space\n8202,\n// hair space\n8287,\n// medium mathematical space\n12288\n// ideographic space\n];\n_CanvasTextMetrics._measurementCache = {};\nlet CanvasTextMetrics = _CanvasTextMetrics;\nexport { CanvasTextMetrics };","map":{"version":3,"names":["contextSettings","willReadFrequently","_CanvasTextMetrics","experimentalLetterSpacingSupported","result","_experimentalLetterSpacingSupported","proto","DOMAdapter","get","getCanvasRenderingContext2D","prototype","constructor","text","style","width","height","lines","lineWidths","lineHeight","maxLineWidth","fontProperties","measureText","canvas","_canvas","wordWrap","textKey","styleKey","_measurementCache","font","fontStringFromTextStyle","measureFont","fontSize","ascent","context","__context","outputText","_wordWrap","split","Array","length","i","lineWidth","_measureText","letterSpacing","Math","max","strokeWidth","_stroke","dropShadow","distance","leading","measurements","useExperimentalLetterSpacing","experimentalLetterSpacing","textLetterSpacing","graphemeSegmenter","getContext","line","cache","Object","create","whiteSpace","collapseSpaces","_collapseSpaces","collapseNewlines","_collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","_tokenize","token","_isNewline","_addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","_getFromCache","canBreakWords","breakWords","characters","wordWrapSplit","j","char","lastChar","k","nextChar","canBreakChars","characterWidth","isLastToken","newLine","_trimRight","key","slice","_newlines","includes","charCodeAt","_nextChar","_breakingSpaces","push","_token","_char","_index","_breakWords","_fonts","_context","metrics","METRICS_STRING","BASELINE_SYMBOL","properties","actualBoundingBoxAscent","descent","actualBoundingBoxDescent","clearMetrics","__canvas","c","OffscreenCanvas","createCanvas","ex","BASELINE_MULTIPLIER","HEIGHT_MULTIPLIER","Intl","Segmenter","segmenter","s","segment","map","x","CanvasTextMetrics"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text/canvas/CanvasTextMetrics.ts"],"sourcesContent":["import { DOMAdapter } from '../../../environment/adapter';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { TextStyle, TextStyleWhiteSpace } from '../TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * A number, or a string containing a number.\n * @memberof text\n * @typedef {object} FontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\nexport interface FontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof text\n */\nexport class CanvasTextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: FontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = CanvasTextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n\n            result\n                = CanvasTextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, FontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static readonly _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static readonly _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __canvas: ICanvas;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __context: ICanvasRenderingContext2D;\n\n    private static readonly _measurementCache: Record<string, CanvasTextMetrics> = {};\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: FontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @param wordWrap\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text = ' ',\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas,\n        wordWrap: boolean = style.wordWrap,\n    ): CanvasTextMetrics\n    {\n        const textKey = `${text}:${style.styleKey}`;\n\n        // TODO - if we find this starts to go nuts with memory, we can remove the cache\n        // or instead just stick a usage tick that we increment each time we return it.\n        // if some are not used, we can just tidy them up!\n        if (CanvasTextMetrics._measurementCache[textKey]) return CanvasTextMetrics._measurementCache[textKey];\n\n        const font = fontStringFromTextStyle(style);\n        const fontProperties = CanvasTextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = CanvasTextMetrics.__context; // canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        const strokeWidth = style._stroke?.width || 0;\n\n        let width = maxLineWidth + strokeWidth;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadow.distance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + strokeWidth;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + (strokeWidth * 2))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadow.distance;\n        }\n\n        const measurements = new CanvasTextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n\n        // CanvasTextMetrics._measurementCache[textKey] = measurements;\n\n        return measurements;\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        let width = context.measureText(text).width;\n\n        if (width > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                width -= letterSpacing;\n            }\n            else\n            {\n                width += (CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n            }\n        }\n\n        return width;\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static _wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = CanvasTextMetrics._collapseSpaces(whiteSpace);\n        const collapseNewlines = CanvasTextMetrics._collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = CanvasTextMetrics._tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (CanvasTextMetrics._isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += CanvasTextMetrics._addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += CanvasTextMetrics._addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (CanvasTextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = CanvasTextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += CanvasTextMetrics._addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += CanvasTextMetrics._addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += CanvasTextMetrics._addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += CanvasTextMetrics._addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += CanvasTextMetrics._addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static _addLine(line: string, newLine = true): string\n    {\n        line = CanvasTextMetrics._trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static _getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static _collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static _collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static _trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!CanvasTextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static _isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    public static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static _tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (CanvasTextMetrics.isBreakingSpace(char, nextChar) || CanvasTextMetrics._isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    public static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    public static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see CanvasTextMetrics.graphemeSegmenter\n     */\n    public static wordWrapSplit(token: string): string[]\n    {\n        return CanvasTextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): FontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (CanvasTextMetrics._fonts[font])\n        {\n            return CanvasTextMetrics._fonts[font];\n        }\n\n        const context = CanvasTextMetrics._context;\n\n        context.font = font;\n        const metrics = context.measureText(CanvasTextMetrics.METRICS_STRING + CanvasTextMetrics.BASELINE_SYMBOL);\n\n        const properties = {\n            ascent: metrics.actualBoundingBoxAscent,\n            descent: metrics.actualBoundingBoxDescent,\n            fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n\n        CanvasTextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete CanvasTextMetrics._fonts[font];\n        }\n        else\n        {\n            CanvasTextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!CanvasTextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    CanvasTextMetrics.__canvas = c as ICanvas;\n\n                    return c as ICanvas;\n                }\n\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            catch (ex)\n            {\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            CanvasTextMetrics.__canvas = canvas;\n        }\n\n        return CanvasTextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!CanvasTextMetrics.__context)\n        {\n            CanvasTextMetrics.__context = CanvasTextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return CanvasTextMetrics.__context;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}