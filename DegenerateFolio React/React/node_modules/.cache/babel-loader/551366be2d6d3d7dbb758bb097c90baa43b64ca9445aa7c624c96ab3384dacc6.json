{"ast":null,"code":"export const CC_TO_UP = new Array(256);\nexport const CC_TO_LO = new Array(256);\nfor (let i = 0, count = CC_TO_UP.length; i < count; i++) {\n  CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();\n  CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();\n}\n/** @internal */\nfunction formatAllCaps(w) {\n  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];\n}\n/**\n * @internal\n *\n * Inspired by https://stackoverflow.com/a/2970667\n *\n * This is not as optimal as the original SO answer (we split into per-word),\n * however it does pass the tests (which the SO version doesn't) and is still\n * a major improvement over the original camelcase npm package -\n *\n *   camelcase: 20.88 μs/op\n *        this:  1.00 μs/op\n *\n * Caveat of this: only Ascii, but acceptable for the intended usecase\n */\nfunction converter(format) {\n  return value => {\n    const parts = value\n    // replace all separators (including consequtive) with spaces\n    .replace(/[-_., ]+/g, ' ')\n    // we don't want leading or trailing spaces\n    .trim()\n    // split into words\n    .split(' ');\n    let result = '';\n    for (let i = 0, count = parts.length; i < count; i++) {\n      const w = parts[i];\n      // apply the formatting\n      result += format(/^[\\dA-Z]+$/.test(w)\n      // all full uppercase + letters are changed to lowercase\n      ? w.toLowerCase()\n      // all consecutive capitals + letters are changed to lowercase\n      // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder\n      : w.replace(/^[\\dA-Z]{2,}[^a-z]/, formatAllCaps), i);\n    }\n    return result;\n  };\n}\n/**\n * @name stringCamelCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase\n */\nexport const stringCamelCase = /*#__PURE__*/converter((w, i) => (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));\n/**\n * @name stringPascalCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase\n */\nexport const stringPascalCase = /*#__PURE__*/converter(w => CC_TO_UP[w.charCodeAt(0)] + w.slice(1));","map":{"version":3,"names":["CC_TO_UP","Array","CC_TO_LO","i","count","length","String","fromCharCode","toLowerCase","toUpperCase","formatAllCaps","w","slice","charCodeAt","converter","format","value","parts","replace","trim","split","result","test","stringCamelCase","stringPascalCase"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/string/camelCase.js"],"sourcesContent":["export const CC_TO_UP = new Array(256);\nexport const CC_TO_LO = new Array(256);\nfor (let i = 0, count = CC_TO_UP.length; i < count; i++) {\n    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();\n    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();\n}\n/** @internal */\nfunction formatAllCaps(w) {\n    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];\n}\n/**\n * @internal\n *\n * Inspired by https://stackoverflow.com/a/2970667\n *\n * This is not as optimal as the original SO answer (we split into per-word),\n * however it does pass the tests (which the SO version doesn't) and is still\n * a major improvement over the original camelcase npm package -\n *\n *   camelcase: 20.88 μs/op\n *        this:  1.00 μs/op\n *\n * Caveat of this: only Ascii, but acceptable for the intended usecase\n */\nfunction converter(format) {\n    return (value) => {\n        const parts = value\n            // replace all separators (including consequtive) with spaces\n            .replace(/[-_., ]+/g, ' ')\n            // we don't want leading or trailing spaces\n            .trim()\n            // split into words\n            .split(' ');\n        let result = '';\n        for (let i = 0, count = parts.length; i < count; i++) {\n            const w = parts[i];\n            // apply the formatting\n            result += format(/^[\\dA-Z]+$/.test(w)\n                // all full uppercase + letters are changed to lowercase\n                ? w.toLowerCase()\n                // all consecutive capitals + letters are changed to lowercase\n                // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder\n                : w.replace(/^[\\dA-Z]{2,}[^a-z]/, formatAllCaps), i);\n        }\n        return result;\n    };\n}\n/**\n * @name stringCamelCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase\n */\nexport const stringCamelCase = /*#__PURE__*/ converter((w, i) => \n(i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));\n/**\n * @name stringPascalCase\n * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase\n */\nexport const stringPascalCase = /*#__PURE__*/ converter((w) => \nCC_TO_UP[w.charCodeAt(0)] + w.slice(1));\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,IAAIC,KAAK,CAAC,GAAG,CAAC;AACtC,OAAO,MAAMC,QAAQ,GAAG,IAAID,KAAK,CAAC,GAAG,CAAC;AACtC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAGJ,QAAQ,CAACK,MAAM,EAAEF,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;EACrDD,QAAQ,CAACC,CAAC,CAAC,GAAGG,MAAM,CAACC,YAAY,CAACJ,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC;EAClDR,QAAQ,CAACG,CAAC,CAAC,GAAGG,MAAM,CAACC,YAAY,CAACJ,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC;AACtD;AACA;AACA,SAASC,aAAaA,CAACC,CAAC,EAAE;EACtB,OAAOA,CAAC,CAACC,KAAK,CAAC,CAAC,EAAED,CAAC,CAACN,MAAM,GAAG,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,GAAGR,QAAQ,CAACW,CAAC,CAACE,UAAU,CAACF,CAAC,CAACN,MAAM,GAAG,CAAC,CAAC,CAAC;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,SAASA,CAACC,MAAM,EAAE;EACvB,OAAQC,KAAK,IAAK;IACd,MAAMC,KAAK,GAAGD;IACV;IAAA,CACCE,OAAO,CAAC,WAAW,EAAE,GAAG;IACzB;IAAA,CACCC,IAAI,CAAC;IACN;IAAA,CACCC,KAAK,CAAC,GAAG,CAAC;IACf,IAAIC,MAAM,GAAG,EAAE;IACf,KAAK,IAAIlB,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAGa,KAAK,CAACZ,MAAM,EAAEF,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;MAClD,MAAMQ,CAAC,GAAGM,KAAK,CAACd,CAAC,CAAC;MAClB;MACAkB,MAAM,IAAIN,MAAM,CAAC,YAAY,CAACO,IAAI,CAACX,CAAC;MAChC;MAAA,EACEA,CAAC,CAACH,WAAW,CAAC;MAChB;MACA;MAAA,EACEG,CAAC,CAACO,OAAO,CAAC,oBAAoB,EAAER,aAAa,CAAC,EAAEP,CAAC,CAAC;IAC5D;IACA,OAAOkB,MAAM;EACjB,CAAC;AACL;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,eAAe,GAAG,aAAcT,SAAS,CAAC,CAACH,CAAC,EAAER,CAAC,KAC5D,CAACA,CAAC,GAAGH,QAAQ,CAACW,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGX,QAAQ,CAACS,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAIF,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;AACzE;AACA;AACA;AACA;AACA,OAAO,MAAMY,gBAAgB,GAAG,aAAcV,SAAS,CAAEH,CAAC,IAC1DX,QAAQ,CAACW,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGF,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}