{"ast":null,"code":"import { Sprite } from '../../scene/sprite/Sprite.mjs';\n\"use strict\";\nconst colors = [\"#000080\",\n// Navy Blue\n\"#228B22\",\n// Forest Green\n\"#8B0000\",\n// Dark Red\n\"#4169E1\",\n// Royal Blue\n\"#008080\",\n// Teal\n\"#800000\",\n// Maroon\n\"#9400D3\",\n// Dark Violet\n\"#FF8C00\",\n// Dark Orange\n\"#556B2F\",\n// Olive Green\n\"#8B008B\"\n// Dark Magenta\n];\nlet colorTick = 0;\nfunction logScene(container, depth = 0, data = {\n  color: \"#000000\"\n}) {\n  if (container.renderGroup) {\n    data.color = colors[colorTick++];\n  }\n  let spaces = \"\";\n  for (let i = 0; i < depth; i++) {\n    spaces += \"    \";\n  }\n  let label = container.label;\n  if (!label && container instanceof Sprite) {\n    label = `sprite:${container.texture.label}`;\n  }\n  let output = `%c ${spaces}|- ${label} (worldX:${container.worldTransform.tx}, relativeRenderX:${container.relativeGroupTransform.tx}, renderX:${container.groupTransform.tx}, localX:${container.x})`;\n  if (container.renderGroup) {\n    output += \" (RenderGroup)\";\n  }\n  if (container.filters) {\n    output += \"(*filters)\";\n  }\n  console.log(output, `color:${data.color}; font-weight:bold;`);\n  depth++;\n  for (let i = 0; i < container.children.length; i++) {\n    const child = container.children[i];\n    logScene(child, depth, {\n      ...data\n    });\n  }\n}\nfunction logRenderGroupScene(renderGroup, depth = 0, data = {\n  index: 0,\n  color: \"#000000\"\n}) {\n  let spaces = \"\";\n  for (let i = 0; i < depth; i++) {\n    spaces += \"    \";\n  }\n  const output = `%c ${spaces}- ${data.index}: ${renderGroup.root.label} worldX:${renderGroup.worldTransform.tx}`;\n  console.log(output, `color:${data.color}; font-weight:bold;`);\n  depth++;\n  for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n    const child = renderGroup.renderGroupChildren[i];\n    logRenderGroupScene(child, depth, {\n      ...data,\n      index: i\n    });\n  }\n}\nexport { logRenderGroupScene, logScene };","map":{"version":3,"names":["colors","colorTick","logScene","container","depth","data","color","renderGroup","spaces","i","label","Sprite","texture","output","worldTransform","tx","relativeGroupTransform","groupTransform","x","filters","console","log","children","length","child","logRenderGroupScene","index","root","renderGroupChildren"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/logging/logScene.ts"],"sourcesContent":["/* eslint-disable no-console */\n\nimport { Sprite } from '../../scene/sprite/Sprite';\n\nimport type { Container } from '../../scene/container/Container';\nimport type { RenderGroup } from '../../scene/container/RenderGroup';\n\nconst colors = [\n    '#000080', // Navy Blue\n    '#228B22', // Forest Green\n    '#8B0000', // Dark Red\n    '#4169E1', // Royal Blue\n    '#008080', // Teal\n    '#800000', // Maroon\n    '#9400D3', // Dark Violet\n    '#FF8C00', // Dark Orange\n    '#556B2F', // Olive Green\n    '#8B008B' // Dark Magenta\n];\n\nlet colorTick = 0;\n\nexport function logScene(container: Container, depth = 0, data: {color?: string} = { color: '#000000' })\n{\n    if (container.renderGroup)\n    {\n        data.color = colors[colorTick++];\n    }\n\n    //    turn depth into number of spaces:\n    let spaces = '';\n\n    for (let i = 0; i < depth; i++)\n    {\n        spaces += '    ';\n    }\n\n    let label = container.label;\n\n    if (!label && container instanceof Sprite)\n    {\n        label = `sprite:${container.texture.label}`;\n    }\n\n    // eslint-disable-next-line max-len\n    let output = `%c ${spaces}|- ${label} (worldX:${container.worldTransform.tx}, relativeRenderX:${container.relativeGroupTransform.tx}, renderX:${container.groupTransform.tx}, localX:${container.x})`;\n\n    if (container.renderGroup)\n    {\n        output += ' (RenderGroup)';\n    }\n\n    if (container.filters)\n    {\n        output += '(*filters)';\n    }\n\n    console.log(output, `color:${data.color}; font-weight:bold;`);\n\n    depth++;\n\n    for (let i = 0; i < container.children.length; i++)\n    {\n        const child = container.children[i];\n\n        logScene(child, depth, { ...data });\n    }\n}\n\nexport function logRenderGroupScene(\n    renderGroup: RenderGroup, depth = 0,\n    data: {index: number, color?: string} = { index: 0, color: '#000000' }\n)\n{\n    // turn depth into number of spaces:\n    let spaces = '';\n\n    for (let i = 0; i < depth; i++)\n    {\n        spaces += '    ';\n    }\n\n    const output = `%c ${spaces}- ${data.index}: ${renderGroup.root.label} worldX:${renderGroup.worldTransform.tx}`;\n\n    console.log(output, `color:${data.color}; font-weight:bold;`);\n\n    depth++;\n\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n    {\n        const child = renderGroup.renderGroupChildren[i];\n\n        logRenderGroupScene(child, depth, { ...data, index: i });\n    }\n}\n"],"mappings":";;AAOA,MAAMA,MAAS,IACX;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA,CACJ;AAEA,IAAIC,SAAY;AAEA,SAAAC,SAASC,SAAA,EAAsBC,KAAQ,MAAGC,IAAA,GAAyB;EAAEC,KAAA,EAAO;AAAA,CAC5F;EACI,IAAIH,SAAA,CAAUI,WACd;IACSF,IAAA,CAAAC,KAAA,GAAQN,MAAA,CAAOC,SAAW;EAAA;EAInC,IAAIO,MAAS;EAEb,SAASC,CAAI,MAAGA,CAAI,GAAAL,KAAA,EAAOK,CAC3B;IACcD,MAAA;EAAA;EAGd,IAAIE,KAAA,GAAQP,SAAU,CAAAO,KAAA;EAElB,KAACA,KAAS,IAAAP,SAAA,YAAqBQ,MACnC;IACYD,KAAA,aAAUP,SAAU,CAAAS,OAAA,CAAQF,KAAK;EAAA;EAI7C,IAAIG,MAAA,GAAe,MAAAL,MAAM,MAAME,KAAK,YAAYP,SAAA,CAAUW,cAAe,CAAAC,EAAE,qBAAqBZ,SAAU,CAAAa,sBAAA,CAAuBD,EAAe,aAAAZ,SAAA,CAAUc,cAAA,CAAeF,EAAE,YAAYZ,SAAA,CAAUe,CAAC;EAElM,IAAIf,SAAA,CAAUI,WACd;IACcM,MAAA;EAAA;EAGd,IAAIV,SAAA,CAAUgB,OACd;IACcN,MAAA;EAAA;EAGdO,OAAA,CAAQC,GAAI,CAAAR,MAAA,EAAiB,SAAAR,IAAA,CAAKC,KAA0B;EAE5DF,KAAA;EAEA,SAASK,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIN,SAAU,CAAAmB,QAAA,CAASC,MAAA,EAAQd,CAC/C;IACU,MAAAe,KAAA,GAAQrB,SAAU,CAAAmB,QAAA,CAASb,CAAC;IAElCP,QAAA,CAASsB,KAAO,EAAApB,KAAA,EAAO;MAAE,GAAGC;IAAA,CAAM;EAAA;AAE1C;AAEgB,SAAAoB,oBACZlB,WAA0B,EAAAH,KAAA,GAAQ,CAClC,EAAAC,IAAA,GAAwC;EAAEqB,KAAO;EAAGpB,KAAO;AAAA,CAE/D;EAEI,IAAIE,MAAS;EAEb,SAASC,CAAI,MAAGA,CAAI,GAAAL,KAAA,EAAOK,CAC3B;IACcD,MAAA;EAAA;EAGd,MAAMK,MAAS,SAAML,MAAM,KAAKH,IAAK,CAAAqB,KAAU,KAAAnB,WAAA,CAAYoB,IAAK,CAAAjB,KAAgB,WAAAH,WAAA,CAAYO,cAAA,CAAeC,EAAE;EAE7GK,OAAA,CAAQC,GAAI,CAAAR,MAAA,EAAiB,SAAAR,IAAA,CAAKC,KAA0B;EAE5DF,KAAA;EAEA,SAASK,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIF,WAAY,CAAAqB,mBAAA,CAAoBL,MAAA,EAAQd,CAC5D;IACU,MAAAe,KAAA,GAAQjB,WAAY,CAAAqB,mBAAA,CAAoBnB,CAAC;IAE/CgB,mBAAA,CAAoBD,KAAA,EAAOpB,KAAO;MAAE,GAAGC,IAAM;MAAAqB,KAAA,EAAOjB;IAAA,CAAG;EAAA;AAE/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}