{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi.mjs';\nimport { STENCIL_MODES } from '../shared/state/const.mjs';\n\"use strict\";\nclass GlStencilSystem {\n  constructor(renderer) {\n    this._stencilCache = {\n      enabled: false,\n      stencilReference: 0,\n      stencilMode: STENCIL_MODES.NONE\n    };\n    this._renderTargetStencilState = /* @__PURE__ */Object.create(null);\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    this._comparisonFuncMapping = {\n      always: gl.ALWAYS,\n      never: gl.NEVER,\n      equal: gl.EQUAL,\n      \"not-equal\": gl.NOTEQUAL,\n      less: gl.LESS,\n      \"less-equal\": gl.LEQUAL,\n      greater: gl.GREATER,\n      \"greater-equal\": gl.GEQUAL\n    };\n    this._stencilOpsMapping = {\n      keep: gl.KEEP,\n      zero: gl.ZERO,\n      replace: gl.REPLACE,\n      invert: gl.INVERT,\n      \"increment-clamp\": gl.INCR,\n      \"decrement-clamp\": gl.DECR,\n      \"increment-wrap\": gl.INCR_WRAP,\n      \"decrement-wrap\": gl.DECR_WRAP\n    };\n    this._stencilCache.enabled = false;\n    this._stencilCache.stencilMode = STENCIL_MODES.NONE;\n    this._stencilCache.stencilReference = 0;\n  }\n  onRenderTargetChange(renderTarget) {\n    if (this._activeRenderTarget === renderTarget) return;\n    this._activeRenderTarget = renderTarget;\n    let stencilState = this._renderTargetStencilState[renderTarget.uid];\n    if (!stencilState) {\n      stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n        stencilMode: STENCIL_MODES.DISABLED,\n        stencilReference: 0\n      };\n    }\n    this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n  }\n  setStencilMode(stencilMode, stencilReference) {\n    const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n    const gl = this._gl;\n    const mode = GpuStencilModesToPixi[stencilMode];\n    const _stencilCache = this._stencilCache;\n    stencilState.stencilMode = stencilMode;\n    stencilState.stencilReference = stencilReference;\n    if (stencilMode === STENCIL_MODES.DISABLED) {\n      if (this._stencilCache.enabled) {\n        this._stencilCache.enabled = false;\n        gl.disable(gl.STENCIL_TEST);\n      }\n      return;\n    }\n    if (!this._stencilCache.enabled) {\n      this._stencilCache.enabled = true;\n      gl.enable(gl.STENCIL_TEST);\n    }\n    if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference) {\n      _stencilCache.stencilMode = stencilMode;\n      _stencilCache.stencilReference = stencilReference;\n      gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 255);\n      gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n    }\n  }\n}\n/** @ignore */\nGlStencilSystem.extension = {\n  type: [ExtensionType.WebGLSystem],\n  name: \"stencil\"\n};\nexport { GlStencilSystem };","map":{"version":3,"names":["GlStencilSystem","constructor","renderer","_stencilCache","enabled","stencilReference","stencilMode","STENCIL_MODES","NONE","_renderTargetStencilState","Object","create","renderTarget","onRenderTargetChange","add","contextChange","gl","_gl","_comparisonFuncMapping","always","ALWAYS","never","NEVER","equal","EQUAL","NOTEQUAL","less","LESS","LEQUAL","greater","GREATER","GEQUAL","_stencilOpsMapping","keep","KEEP","zero","ZERO","replace","REPLACE","invert","INVERT","INCR","DECR","INCR_WRAP","DECR_WRAP","_activeRenderTarget","stencilState","uid","DISABLED","setStencilMode","mode","GpuStencilModesToPixi","disable","STENCIL_TEST","enable","stencilFunc","stencilBack","compare","stencilOp","passOp","extension","type","ExtensionType","WebGLSystem","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/GlStencilSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GlStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private _gl: WebGLRenderingContext;\n\n    private readonly _stencilCache = {\n        enabled: false,\n        stencilReference: 0,\n        stencilMode: STENCIL_MODES.NONE,\n    };\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _stencilOpsMapping: {\n        keep: number;\n        zero: number;\n        replace: number;\n        invert: number;\n        'increment-clamp': number;\n        'decrement-clamp': number;\n        'increment-wrap': number;\n        'decrement-wrap': number;\n    };\n\n    private _comparisonFuncMapping: {\n        always: number;\n        never: number;\n        equal: number;\n        'not-equal': number;\n        less: number;\n        'less-equal': number;\n        greater: number;\n        'greater-equal': number;\n    };\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected contextChange(gl: WebGLRenderingContext)\n    {\n        // TODO - this could be declared in a gl const\n        // we know the numbers don't tend to change!\n        this._gl = gl;\n\n        this._comparisonFuncMapping = {\n            always: gl.ALWAYS,\n            never: gl.NEVER,\n            equal: gl.EQUAL,\n            'not-equal': gl.NOTEQUAL,\n            less: gl.LESS,\n            'less-equal': gl.LEQUAL,\n            greater: gl.GREATER,\n            'greater-equal': gl.GEQUAL,\n        };\n\n        this._stencilOpsMapping = {\n            keep: gl.KEEP,\n            zero: gl.ZERO,\n            replace: gl.REPLACE,\n            invert: gl.INVERT,\n            'increment-clamp': gl.INCR,\n            'decrement-clamp': gl.DECR,\n            'increment-wrap': gl.INCR_WRAP,\n            'decrement-wrap': gl.DECR_WRAP,\n        };\n\n        // reset stencil cache\n        this._stencilCache.enabled = false;\n        this._stencilCache.stencilMode = STENCIL_MODES.NONE;\n        this._stencilCache.stencilReference = 0;\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        if (this._activeRenderTarget === renderTarget) return;\n\n        this._activeRenderTarget = renderTarget;\n\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        // restore the current render targets stencil state..\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        const gl = this._gl;\n        const mode = GpuStencilModesToPixi[stencilMode];\n\n        const _stencilCache = this._stencilCache;\n\n        // store the stencil state for restoration later, if a render target changes\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        if (stencilMode === STENCIL_MODES.DISABLED)\n        {\n            if (this._stencilCache.enabled)\n            {\n                this._stencilCache.enabled = false;\n\n                gl.disable(gl.STENCIL_TEST);\n            }\n\n            return;\n        }\n\n        if (!this._stencilCache.enabled)\n        {\n            this._stencilCache.enabled = true;\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference)\n        {\n            _stencilCache.stencilMode = stencilMode;\n            _stencilCache.stencilReference = stencilReference;\n\n            // this is pretty simple mapping.\n            // will work for pixi's simple mask cases.\n            // although a true mapping of the GPU state to webGL state should be done\n            gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 0xFF);\n            gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n        }\n    }\n\n    public destroy?: () => void;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}