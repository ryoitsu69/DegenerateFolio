{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signTypedData = exports.createAccessList = exports.getFeeHistory = exports.getProof = exports.getChainId = exports.getLogs = exports.estimateGas = exports.call = exports.signTransaction = exports.sign = exports.sendSignedTransaction = exports.sendTransaction = exports.getTransactionCount = exports.getTransactionReceipt = exports.getTransactionFromBlock = exports.getPendingTransactions = exports.getTransaction = exports.getUncle = exports.getBlockUncleCount = exports.getBlockTransactionCount = exports.getBlock = exports.getCode = exports.getStorageAt = exports.getBalance = exports.getBlockNumber = exports.getMaxPriorityFeePerGas = exports.getGasPrice = exports.getHashRate = exports.isMining = exports.getCoinbase = exports.isSyncing = exports.getProtocolVersion = void 0;\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nconst web3_types_1 = require(\"web3-types\");\nconst web3_core_1 = require(\"web3-core\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_eth_accounts_1 = require(\"web3-eth-accounts\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_rpc_methods_1 = require(\"web3-rpc-methods\");\nconst decode_signed_transaction_js_1 = require(\"./utils/decode_signed_transaction.js\");\nconst schemas_js_1 = require(\"./schemas.js\");\n// eslint-disable-next-line import/no-cycle\nconst transaction_builder_js_1 = require(\"./utils/transaction_builder.js\");\nconst format_transaction_js_1 = require(\"./utils/format_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst try_send_transaction_js_1 = require(\"./utils/try_send_transaction.js\");\n// eslint-disable-next-line import/no-cycle\nconst wait_for_transaction_receipt_js_1 = require(\"./utils/wait_for_transaction_receipt.js\");\nconst constants_js_1 = require(\"./constants.js\");\n// eslint-disable-next-line import/no-cycle\nconst send_tx_helper_js_1 = require(\"./utils/send_tx_helper.js\");\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\nexports.getProtocolVersion = getProtocolVersion;\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getSyncing(web3Context.requestManager);\n});\nexports.isSyncing = isSyncing;\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\nexports.getCoinbase = getCoinbase;\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nconst isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return web3_rpc_methods_1.ethRpcMethods.getMining(web3Context.requestManager);\n});\nexports.isMining = isMining;\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getHashRate(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getHashRate = getHashRate;\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getGasPrice = getGasPrice;\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getMaxPriorityFeePerGas(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getMaxPriorityFeePerGas = getMaxPriorityFeePerGas;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBlockNumber = getBlockNumber;\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBalance(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBalance = getBalance;\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getStorageAt(web3Context, address, storageSlot) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, storageSlot, web3_types_1.ETH_DATA_FORMAT);\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.getStorageAt = getStorageAt;\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getCode(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.getCode = getCode;\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let hydrated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n  });\n}\nexports.getBlock = getBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockTransactionCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBlockTransactionCount = getBlockTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getBlockUncleCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getBlockUncleCount = getBlockUncleCount;\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getUncle(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let uncleIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, uncleIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return (0, web3_utils_1.format)(schemas_js_1.blockSchema, response, returnFormat);\n  });\n}\nexports.getUncle = getUncle;\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransaction(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\nexports.getTransaction = getTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => (0, format_transaction_js_1.formatTransaction)(transaction, returnFormat, {\n      fillInputAndData: true\n    }));\n  });\n}\nexports.getPendingTransactions = getPendingTransactions;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionFromBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let transactionIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, transactionIndex, web3_types_1.ETH_DATA_FORMAT);\n    let response;\n    if ((0, web3_validator_1.isBytes)(block)) {\n      const blockHashFormatted = (0, web3_utils_1.format)({\n        format: 'bytes32'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(block) ? block : (0, web3_utils_1.format)({\n        format: 'uint'\n      }, block, web3_types_1.ETH_DATA_FORMAT);\n      response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, format_transaction_js_1.formatTransaction)(response, returnFormat, {\n      fillInputAndData: true\n    });\n  });\n}\nexports.getTransactionFromBlock = getTransactionFromBlock;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = (0, web3_utils_1.format)({\n      format: 'bytes32'\n    }, transactionHash, web3_types_1.DEFAULT_RETURN_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    return (0, web3_validator_1.isNullish)(response) ? response : (0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, response, returnFormat);\n  });\n}\nexports.getTransactionReceipt = getTransactionReceipt;\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getTransactionCount(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.getTransactionCount = getTransactionCount;\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendTransaction(web3Context, transaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transactionFormatted = (0, format_transaction_js_1.formatTransaction)(Object.assign(Object.assign({}, transaction), {\n          from: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('from', web3Context, transaction),\n          to: (0, transaction_builder_js_1.getTransactionFromOrToAttr)('to', web3Context, transaction)\n        }), web3_types_1.ETH_DATA_FORMAT);\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n          if (web3Context.wallet && !(0, web3_validator_1.isNullish)(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\nexports.sendTransaction = sendTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sendSignedTransaction(web3Context, signedTransaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new web3_core_1.Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new send_tx_helper_js_1.SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = (0, web3_utils_1.format)({\n          format: 'bytes'\n        }, signedTransaction, web3_types_1.ETH_DATA_FORMAT);\n        const unSerializedTransaction = web3_eth_accounts_1.TransactionFactory.fromSerializedData((0, web3_utils_1.bytesToUint8Array)((0, web3_utils_1.hexToBytes)(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          const {\n              v,\n              r,\n              s\n            } = unSerializedTransactionWithFrom,\n            txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield (0, try_send_transaction_js_1.trySendTransaction)(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return web3_rpc_methods_1.ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = (0, web3_utils_1.format)({\n            format: 'bytes32'\n          }, transactionHash, returnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield (0, wait_for_transaction_receipt_js_1.waitForTransactionReceipt)(web3Context, transactionHash, returnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents((0, web3_utils_1.format)(schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\nexports.sendSignedTransaction = sendSignedTransaction;\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction sign(web3Context, message, addressOrIndex, returnFormat) {\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, message, web3_types_1.DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return (0, web3_utils_1.format)(schemas_js_1.SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new web3_errors_1.SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield web3_rpc_methods_1.ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.sign = sign;\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction signTransaction(web3Context, transaction, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.signTransaction(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return (0, web3_validator_1.isString)(response) ? (0, decode_signed_transaction_js_1.decodeSignedTransaction)(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: (0, web3_utils_1.format)({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: (0, format_transaction_js_1.formatTransaction)(response.tx, returnFormat, {\n        fillInputAndData: true\n      })\n    };\n  });\n}\nexports.signTransaction = signTransaction;\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction call(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.call(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.call = call;\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction estimateGas(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT);\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    }, response, returnFormat);\n  });\n}\nexports.estimateGas = estimateGas;\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!(0, web3_validator_1.isNullish)(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = (0, web3_utils_1.numberToHex)(toBlock);\n      }\n    }\n    if (!(0, web3_validator_1.isNullish)(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = (0, web3_utils_1.numberToHex)(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return (0, web3_utils_1.format)(schemas_js_1.logSchema, res, returnFormat);\n    });\n    return result;\n  });\n}\nexports.getLogs = getLogs;\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getChainId(web3Context.requestManager);\n    return (0, web3_utils_1.format)({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat);\n  });\n}\nexports.getChainId = getChainId;\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getProof(web3Context, address, storageKeys) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, storageKey, web3_types_1.ETH_DATA_FORMAT));\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accountSchema, response, returnFormat);\n  });\n}\nexports.getProof = getProof;\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction getFeeHistory(web3Context, blockCount) {\n  let newestBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let rewardPercentiles = arguments.length > 3 ? arguments[3] : undefined;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockCount, web3_types_1.ETH_DATA_FORMAT);\n    const newestBlockFormatted = (0, web3_validator_1.isBlockTag)(newestBlock) ? newestBlock : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, newestBlock, web3_types_1.ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = (0, web3_utils_1.format)({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, constants_js_1.NUMBER_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.feeHistorySchema, response, returnFormat);\n  });\n}\nexports.getFeeHistory = getFeeHistory;\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction createAccessList(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = (0, web3_validator_1.isBlockTag)(blockNumber) ? blockNumber : (0, web3_utils_1.format)({\n      format: 'uint'\n    }, blockNumber, web3_types_1.ETH_DATA_FORMAT);\n    const response = yield web3_rpc_methods_1.ethRpcMethods.createAccessList(web3Context.requestManager, (0, format_transaction_js_1.formatTransaction)(transaction, web3_types_1.ETH_DATA_FORMAT), blockNumberFormatted);\n    return (0, web3_utils_1.format)(schemas_js_1.accessListResultSchema, response, returnFormat);\n  });\n}\nexports.createAccessList = createAccessList;\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nfunction signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield web3_rpc_methods_1.ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return (0, web3_utils_1.format)({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\nexports.signTypedData = signTypedData;","map":{"version":3,"names":["web3_types_1","require","web3_core_1","web3_utils_1","web3_eth_accounts_1","web3_validator_1","web3_errors_1","web3_rpc_methods_1","decode_signed_transaction_js_1","schemas_js_1","transaction_builder_js_1","format_transaction_js_1","try_send_transaction_js_1","wait_for_transaction_receipt_js_1","constants_js_1","send_tx_helper_js_1","getProtocolVersion","web3Context","__awaiter","ethRpcMethods","requestManager","exports","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","format","getGasPrice","getMaxPriorityFeePerGas","getBlockNumber","getBalance","address","blockNumber","arguments","length","undefined","defaultBlock","blockNumberFormatted","isBlockTag","ETH_DATA_FORMAT","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","isBytes","blockHashFormatted","getBlockByHash","getBlockByNumber","blockSchema","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","DEFAULT_RETURN_FORMAT","getTransactionByHash","isNullish","formatTransaction","fillInputAndData","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","transactionReceiptSchema","getTransactionCount","sendTransaction","options","checkRevertBeforeSending","promiEvent","Web3PromiEvent","resolve","reject","setImmediate","sendTxHelper","SendTxHelper","transactionFormatted","Object","assign","from","getTransactionFromOrToAttr","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","waitForTransactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","error","handleError","sendSignedTransaction","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","TransactionFactory","fromSerializedData","bytesToUint8Array","hexToBytes","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","__rest","trySendTransaction","sendRawTransaction","sign","message","addressOrIndex","messageFormatted","_a","signed","SignatureObjectSchema","SignatureError","signTransaction","isString","decodeSignedTransaction","raw","call","estimateGas","getLogs","filter","toBlock","fromBlock","numberToHex","formattedFilter","result","res","logSchema","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","accountSchema","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","NUMBER_DATA_FORMAT","feeHistorySchema","createAccessList","accessListResultSchema","signTypedData","typedData","useLegacy"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getMaxPriorityFeePerGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(blockSchema, response as unknown as Block, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(transaction as unknown as Transaction, returnFormat, {\n\t\t\tfillInputAndData: true,\n\t\t}),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, { fillInputAndData: true });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionReceipt(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: (format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat,\n\t\t  ) as TransactionReceipt);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transactionFormatted:\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v, r, s, ...txWithoutSigParams } = unSerializedTransactionWithFrom;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'uint' }, response as Numbers, returnFormat);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(logSchema, res as unknown as Log, returnFormat);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(accountSchema, response as unknown as AccountObject, returnFormat);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(feeHistorySchema, response as unknown as FeeHistory, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(accessListResultSchema, response, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}