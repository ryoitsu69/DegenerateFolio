{"ast":null,"code":"import { _0n, BN, bnToU8a, hasBigInt, isU8a, nToU8a, u8aToBigInt } from '@polkadot/util';\nimport { BigInt } from '@polkadot/x-bigint';\nimport { BN_BE_256_OPTS, BN_BE_OPTS } from '../bn.js';\nconst N = 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'.replace(/ /g, '');\nconst N_BI = BigInt(\"0x\".concat(N));\nconst N_BN = new BN(N, 'hex');\nfunction addBi(seckey, tweak) {\n  let res = u8aToBigInt(tweak, BN_BE_OPTS);\n  if (res >= N_BI) {\n    throw new Error('Tweak parameter is out of range');\n  }\n  res += u8aToBigInt(seckey, BN_BE_OPTS);\n  if (res >= N_BI) {\n    res -= N_BI;\n  }\n  if (res === _0n) {\n    throw new Error('Invalid resulting private key');\n  }\n  return nToU8a(res, BN_BE_256_OPTS);\n}\nfunction addBn(seckey, tweak) {\n  const res = new BN(tweak);\n  if (res.cmp(N_BN) >= 0) {\n    throw new Error('Tweak parameter is out of range');\n  }\n  res.iadd(new BN(seckey));\n  if (res.cmp(N_BN) >= 0) {\n    res.isub(N_BN);\n  }\n  if (res.isZero()) {\n    throw new Error('Invalid resulting private key');\n  }\n  return bnToU8a(res, BN_BE_256_OPTS);\n}\nexport function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {\n  if (!isU8a(seckey) || seckey.length !== 32) {\n    throw new Error('Expected seckey to be an Uint8Array with length 32');\n  } else if (!isU8a(tweak) || tweak.length !== 32) {\n    throw new Error('Expected tweak to be an Uint8Array with length 32');\n  }\n  return !hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);\n}","map":{"version":3,"names":["_0n","BN","bnToU8a","hasBigInt","isU8a","nToU8a","u8aToBigInt","BigInt","BN_BE_256_OPTS","BN_BE_OPTS","N","replace","N_BI","concat","N_BN","addBi","seckey","tweak","res","Error","addBn","cmp","iadd","isub","isZero","secp256k1PrivateKeyTweakAdd","onlyBn","length"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js"],"sourcesContent":["import { _0n, BN, bnToU8a, hasBigInt, isU8a, nToU8a, u8aToBigInt } from '@polkadot/util';\nimport { BigInt } from '@polkadot/x-bigint';\nimport { BN_BE_256_OPTS, BN_BE_OPTS } from '../bn.js';\nconst N = 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'.replace(/ /g, '');\nconst N_BI = BigInt(`0x${N}`);\nconst N_BN = new BN(N, 'hex');\nfunction addBi(seckey, tweak) {\n    let res = u8aToBigInt(tweak, BN_BE_OPTS);\n    if (res >= N_BI) {\n        throw new Error('Tweak parameter is out of range');\n    }\n    res += u8aToBigInt(seckey, BN_BE_OPTS);\n    if (res >= N_BI) {\n        res -= N_BI;\n    }\n    if (res === _0n) {\n        throw new Error('Invalid resulting private key');\n    }\n    return nToU8a(res, BN_BE_256_OPTS);\n}\nfunction addBn(seckey, tweak) {\n    const res = new BN(tweak);\n    if (res.cmp(N_BN) >= 0) {\n        throw new Error('Tweak parameter is out of range');\n    }\n    res.iadd(new BN(seckey));\n    if (res.cmp(N_BN) >= 0) {\n        res.isub(N_BN);\n    }\n    if (res.isZero()) {\n        throw new Error('Invalid resulting private key');\n    }\n    return bnToU8a(res, BN_BE_256_OPTS);\n}\nexport function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {\n    if (!isU8a(seckey) || seckey.length !== 32) {\n        throw new Error('Expected seckey to be an Uint8Array with length 32');\n    }\n    else if (!isU8a(tweak) || tweak.length !== 32) {\n        throw new Error('Expected tweak to be an Uint8Array with length 32');\n    }\n    return !hasBigInt || onlyBn\n        ? addBn(seckey, tweak)\n        : addBi(seckey, tweak);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,EAAE,EAAEC,OAAO,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,WAAW,QAAQ,gBAAgB;AACxF,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,cAAc,EAAEC,UAAU,QAAQ,UAAU;AACrD,MAAMC,CAAC,GAAG,yEAAyE,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;AACrG,MAAMC,IAAI,GAAGL,MAAM,MAAAM,MAAA,CAAMH,CAAC,CAAE,CAAC;AAC7B,MAAMI,IAAI,GAAG,IAAIb,EAAE,CAACS,CAAC,EAAE,KAAK,CAAC;AAC7B,SAASK,KAAKA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAC1B,IAAIC,GAAG,GAAGZ,WAAW,CAACW,KAAK,EAAER,UAAU,CAAC;EACxC,IAAIS,GAAG,IAAIN,IAAI,EAAE;IACb,MAAM,IAAIO,KAAK,CAAC,iCAAiC,CAAC;EACtD;EACAD,GAAG,IAAIZ,WAAW,CAACU,MAAM,EAAEP,UAAU,CAAC;EACtC,IAAIS,GAAG,IAAIN,IAAI,EAAE;IACbM,GAAG,IAAIN,IAAI;EACf;EACA,IAAIM,GAAG,KAAKlB,GAAG,EAAE;IACb,MAAM,IAAImB,KAAK,CAAC,+BAA+B,CAAC;EACpD;EACA,OAAOd,MAAM,CAACa,GAAG,EAAEV,cAAc,CAAC;AACtC;AACA,SAASY,KAAKA,CAACJ,MAAM,EAAEC,KAAK,EAAE;EAC1B,MAAMC,GAAG,GAAG,IAAIjB,EAAE,CAACgB,KAAK,CAAC;EACzB,IAAIC,GAAG,CAACG,GAAG,CAACP,IAAI,CAAC,IAAI,CAAC,EAAE;IACpB,MAAM,IAAIK,KAAK,CAAC,iCAAiC,CAAC;EACtD;EACAD,GAAG,CAACI,IAAI,CAAC,IAAIrB,EAAE,CAACe,MAAM,CAAC,CAAC;EACxB,IAAIE,GAAG,CAACG,GAAG,CAACP,IAAI,CAAC,IAAI,CAAC,EAAE;IACpBI,GAAG,CAACK,IAAI,CAACT,IAAI,CAAC;EAClB;EACA,IAAII,GAAG,CAACM,MAAM,CAAC,CAAC,EAAE;IACd,MAAM,IAAIL,KAAK,CAAC,+BAA+B,CAAC;EACpD;EACA,OAAOjB,OAAO,CAACgB,GAAG,EAAEV,cAAc,CAAC;AACvC;AACA,OAAO,SAASiB,2BAA2BA,CAACT,MAAM,EAAEC,KAAK,EAAES,MAAM,EAAE;EAC/D,IAAI,CAACtB,KAAK,CAACY,MAAM,CAAC,IAAIA,MAAM,CAACW,MAAM,KAAK,EAAE,EAAE;IACxC,MAAM,IAAIR,KAAK,CAAC,oDAAoD,CAAC;EACzE,CAAC,MACI,IAAI,CAACf,KAAK,CAACa,KAAK,CAAC,IAAIA,KAAK,CAACU,MAAM,KAAK,EAAE,EAAE;IAC3C,MAAM,IAAIR,KAAK,CAAC,mDAAmD,CAAC;EACxE;EACA,OAAO,CAAChB,SAAS,IAAIuB,MAAM,GACrBN,KAAK,CAACJ,MAAM,EAAEC,KAAK,CAAC,GACpBF,KAAK,CAACC,MAAM,EAAEC,KAAK,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}