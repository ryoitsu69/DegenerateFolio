{"ast":null,"code":"import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../../utils/logging/warn.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\"use strict\";\nclass ImageSource extends TextureSource {\n  constructor(options) {\n    if (options.resource && globalThis.HTMLImageElement && options.resource instanceof HTMLImageElement) {\n      const canvas = DOMAdapter.get().createCanvas(options.resource.width, options.resource.height);\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(options.resource, 0, 0);\n      options.resource = canvas;\n      warn(\"ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.\");\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoGarbageCollect = true;\n  }\n  static test(resource) {\n    return globalThis.HTMLImageElement && resource instanceof HTMLImageElement || typeof ImageBitmap !== \"undefined\" && resource instanceof ImageBitmap;\n  }\n}\nImageSource.extension = ExtensionType.TextureSource;\nexport { ImageSource };","map":{"version":3,"names":["ImageSource","TextureSource","constructor","options","resource","globalThis","HTMLImageElement","canvas","DOMAdapter","get","createCanvas","width","height","context","getContext","drawImage","warn","uploadMethodId","autoGarbageCollect","test","ImageBitmap","extension","ExtensionType"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/ImageSource.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../../environment/adapter';\nimport { ExtensionType } from '../../../../../extensions/Extensions';\nimport { warn } from '../../../../../utils/logging/warn';\nimport { TextureSource } from './TextureSource';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport type ImageResource =\nImageBitmap\n| HTMLCanvasElement\n| OffscreenCanvas\n| ICanvas\n| VideoFrame\n| HTMLImageElement\n| HTMLVideoElement;\n\nexport class ImageSource extends TextureSource<ImageResource>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n    public uploadMethodId = 'image';\n\n    constructor(options: TextureSourceOptions<ImageResource>)\n    {\n        if (options.resource && (globalThis.HTMLImageElement && options.resource instanceof HTMLImageElement))\n        {\n            const canvas = DOMAdapter.get().createCanvas(options.resource.width, options.resource.height);\n            const context = canvas.getContext('2d');\n\n            context.drawImage(options.resource, 0, 0);\n            options.resource = canvas;\n\n            // #if _DEBUG\n            warn('ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.');\n            // #endif\n        }\n\n        super(options);\n\n        this.autoGarbageCollect = true;\n    }\n\n    public static test(resource: any): resource is ImageResource\n    {\n        return (globalThis.HTMLImageElement && resource instanceof HTMLImageElement)\n        || (typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap);\n    }\n}\n"],"mappings":";;;;;AAkBO,MAAMA,WAAA,SAAoBC,aACjC;EAIIC,YAAYC,OACZ;IACI,IAAIA,OAAA,CAAQC,QAAa,IAAAC,UAAA,CAAWC,gBAAoB,IAAAH,OAAA,CAAQC,QAAA,YAAoBE,gBACpF;MACU,MAAAC,MAAA,GAASC,UAAW,CAAAC,GAAA,EAAM,CAAAC,YAAA,CAAaP,OAAA,CAAQC,QAAS,CAAAO,KAAA,EAAOR,OAAQ,CAAAC,QAAA,CAASQ,MAAM;MACtF,MAAAC,OAAA,GAAUN,MAAO,CAAAO,UAAA,CAAW,IAAI;MAEtCD,OAAA,CAAQE,SAAU,CAAAZ,OAAA,CAAQC,QAAU,KAAG,CAAC;MACxCD,OAAA,CAAQC,QAAW,GAAAG,MAAA;MAGnBS,IAAA,CAAK,oFAAoF;IAAA;IAI7F,MAAMb,OAAO;IAjBjB,KAAOc,cAAiB;IAmBpB,KAAKC,kBAAqB;EAAA;EAG9B,OAAcC,KAAKf,QACnB;IACI,OAAQC,UAAA,CAAWC,gBAAoB,IAAAF,QAAA,YAAoBE,gBAAA,IACvD,OAAOc,WAAA,KAAgB,eAAehB,QAAoB,YAAAgB,WAAA;EAAA;AAEtE;AA9BapB,WAAA,CAEKqB,SAAA,GAA+BC,aAAc,CAAArB,aAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}