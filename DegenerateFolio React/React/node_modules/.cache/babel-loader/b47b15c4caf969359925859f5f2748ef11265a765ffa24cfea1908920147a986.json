{"ast":null,"code":"import { AbstractText, ensureOptions } from '../text/AbstractText.mjs';\nimport { HTMLTextStyle } from './HtmlTextStyle.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\"use strict\";\nclass HTMLText extends AbstractText {\n  constructor(...args) {\n    const options = ensureOptions(args, \"HtmlText\");\n    super(options, HTMLTextStyle);\n    this.renderPipeId = \"htmlText\";\n  }\n  _updateBounds() {\n    const bounds = this._bounds;\n    const padding = this._style.padding;\n    const anchor = this._anchor;\n    const htmlMeasurement = measureHtmlText(this.text, this._style);\n    const {\n      width,\n      height\n    } = htmlMeasurement;\n    bounds.minX = -anchor._x * width - padding;\n    bounds.maxX = bounds.minX + width;\n    bounds.minY = -anchor._y * height - padding;\n    bounds.maxY = bounds.minY + height;\n  }\n}\nexport { HTMLText };","map":{"version":3,"names":["HTMLText","AbstractText","constructor","args","options","ensureOptions","HTMLTextStyle","renderPipeId","_updateBounds","bounds","_bounds","padding","_style","anchor","_anchor","htmlMeasurement","measureHtmlText","text","width","height","minX","_x","maxX","minY","_y","maxY"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-html/HTMLText.ts"],"sourcesContent":["import { AbstractText, ensureOptions } from '../text/AbstractText';\nimport { HTMLTextStyle } from './HtmlTextStyle';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { View } from '../../rendering/renderers/shared/view/View';\nimport type { TextOptions, TextString } from '../text/AbstractText';\nimport type { HTMLTextStyleOptions } from './HtmlTextStyle';\n\n/**\n * Constructor options used for `HTMLText` instances.\n * @property {string} [text=''] - The string that you would like the text to display.\n * @property {text.HTMLTextStyle | text.HTMLTextStyleOptions} [style] - The style of the text.\n * @memberof text\n */\nexport type HTMLTextOptions = TextOptions<HTMLTextStyle, HTMLTextStyleOptions>;\n\n/**\n * A HTMLText Object will create a line or multiple lines of text.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * HTMLText uses an svg foreignObject to render HTML text.\n *\n *\n * The primary advantages of this render mode are:\n *\n *  - Supports [HTML tags](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals)\n * for styling such as `<strong>`, or `<em>`, as well as `<span style=\"\">`\n *\n *       - Better support for emojis and other HTML layout features, better compatibility with CSS\n *     line-height and letter-spacing.\n *\n *\n * The primary disadvantages are:\n *   - Unlike `text`, `html` rendering will vary slightly between platforms and browsers.\n * `html` uses SVG/DOM to render text and not Context2D's fillText like `text`.\n *\n *   - Performance and memory usage is on-par with `text` (that is to say, slow and heavy)\n *\n *   - Only works with browsers that support <foreignObject>.\n * @example\n * import { HTMLText } from 'pixi.js';\n *\n * const text = new HTMLText({\n *     text: 'Hello Pixi!',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 24,\n *         fill: 0xff1010,\n *         align: 'center',\n *     }\n * });\n * @memberof scene\n */\nexport class HTMLText extends AbstractText<HTMLTextStyle, HTMLTextStyleOptions> implements View\n{\n    public readonly renderPipeId: string = 'htmlText';\n\n    /**\n     * @param {text.HTMLTextOptions} options - The options of the html text.\n     */\n    constructor(options?: HTMLTextOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(text?: TextString, options?: Partial<HTMLTextStyle>);\n    constructor(...args: [HTMLTextOptions?] | [TextString, Partial<HTMLTextStyle>])\n    {\n        const options = ensureOptions<HTMLTextStyle, HTMLTextStyleOptions>(args, 'HtmlText');\n\n        super(options, HTMLTextStyle);\n    }\n\n    protected _updateBounds()\n    {\n        const bounds = this._bounds;\n        const padding = this._style.padding;\n        const anchor = this._anchor;\n\n        const htmlMeasurement = measureHtmlText(this.text, this._style as HTMLTextStyle);\n\n        const { width, height } = htmlMeasurement;\n\n        bounds.minX = (-anchor._x * width) - padding;\n        bounds.maxX = bounds.minX + width;\n        bounds.minY = (-anchor._y * height) - padding;\n        bounds.maxY = bounds.minY + height;\n    }\n}\n"],"mappings":";;;;AAuDO,MAAMA,QAAA,SAAiBC,YAC9B;EASIC,YAAA,GAAeC,IACf;IACU,MAAAC,OAAA,GAAUC,aAAmD,CAAAF,IAAA,EAAM,UAAU;IAEnF,MAAMC,OAAA,EAASE,aAAa;IAZhC,KAAgBC,YAAuB;EAAA;EAe7BC,aACVA,CAAA;IACI,MAAMC,MAAA,GAAS,IAAK,CAAAC,OAAA;IACd,MAAAC,OAAA,GAAU,KAAKC,MAAO,CAAAD,OAAA;IAC5B,MAAME,MAAA,GAAS,IAAK,CAAAC,OAAA;IAEpB,MAAMC,eAAkB,GAAAC,eAAA,CAAgB,IAAK,CAAAC,IAAA,EAAM,KAAKL,MAAuB;IAEzE;MAAEM,KAAO;MAAAC;IAAA,CAAW,GAAAJ,eAAA;IAE1BN,MAAA,CAAOW,IAAQ,IAACP,MAAO,CAAAQ,EAAA,GAAKH,KAAS,GAAAP,OAAA;IAC9BF,MAAA,CAAAa,IAAA,GAAOb,MAAA,CAAOW,IAAO,GAAAF,KAAA;IAC5BT,MAAA,CAAOc,IAAQ,IAACV,MAAO,CAAAW,EAAA,GAAKL,MAAU,GAAAR,OAAA;IAC/BF,MAAA,CAAAgB,IAAA,GAAOhB,MAAA,CAAOc,IAAO,GAAAJ,MAAA;EAAA;AAEpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}