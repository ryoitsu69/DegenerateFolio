{"ast":null,"code":"const MIN_MS = 60 * 1000;\nconst HR_MS = MIN_MS * 60;\nconst DAY_MS = HR_MS * 24;\nconst ZERO = {\n  days: 0,\n  hours: 0,\n  milliseconds: 0,\n  minutes: 0,\n  seconds: 0\n};\n/** @internal */\nfunction add(a, b) {\n  return {\n    days: (a.days || 0) + b.days,\n    hours: (a.hours || 0) + b.hours,\n    milliseconds: (a.milliseconds || 0) + b.milliseconds,\n    minutes: (a.minutes || 0) + b.minutes,\n    seconds: (a.seconds || 0) + b.seconds\n  };\n}\n/** @internal */\nfunction extractSecs(ms) {\n  const s = ms / 1000;\n  if (s < 60) {\n    const seconds = ~~s;\n    return add({\n      seconds\n    }, extractTime(ms - seconds * 1000));\n  }\n  const m = s / 60;\n  if (m < 60) {\n    const minutes = ~~m;\n    return add({\n      minutes\n    }, extractTime(ms - minutes * MIN_MS));\n  }\n  const h = m / 60;\n  if (h < 24) {\n    const hours = ~~h;\n    return add({\n      hours\n    }, extractTime(ms - hours * HR_MS));\n  }\n  const days = ~~(h / 24);\n  return add({\n    days\n  }, extractTime(ms - days * DAY_MS));\n}\n/**\n * @name extractTime\n * @summary Convert a quantity of seconds to Time array representing accumulated {days, minutes, hours, seconds, milliseconds}\n * @example\n * <BR>\n *\n * ```javascript\n * import { extractTime } from '@polkadot/util';\n *\n * const { days, minutes, hours, seconds, milliseconds } = extractTime(6000); // 0, 0, 10, 0, 0\n * ```\n */\nexport function extractTime(milliseconds) {\n  return !milliseconds ? ZERO : milliseconds < 1000 ? add({\n    milliseconds\n  }, ZERO) : extractSecs(milliseconds);\n}","map":{"version":3,"names":["MIN_MS","HR_MS","DAY_MS","ZERO","days","hours","milliseconds","minutes","seconds","add","a","b","extractSecs","ms","s","extractTime","m","h"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util/extractTime.js"],"sourcesContent":["const MIN_MS = 60 * 1000;\nconst HR_MS = MIN_MS * 60;\nconst DAY_MS = HR_MS * 24;\nconst ZERO = { days: 0, hours: 0, milliseconds: 0, minutes: 0, seconds: 0 };\n/** @internal */\nfunction add(a, b) {\n    return {\n        days: (a.days || 0) + b.days,\n        hours: (a.hours || 0) + b.hours,\n        milliseconds: (a.milliseconds || 0) + b.milliseconds,\n        minutes: (a.minutes || 0) + b.minutes,\n        seconds: (a.seconds || 0) + b.seconds\n    };\n}\n/** @internal */\nfunction extractSecs(ms) {\n    const s = ms / 1000;\n    if (s < 60) {\n        const seconds = ~~s;\n        return add({ seconds }, extractTime(ms - (seconds * 1000)));\n    }\n    const m = s / 60;\n    if (m < 60) {\n        const minutes = ~~m;\n        return add({ minutes }, extractTime(ms - (minutes * MIN_MS)));\n    }\n    const h = m / 60;\n    if (h < 24) {\n        const hours = ~~h;\n        return add({ hours }, extractTime(ms - (hours * HR_MS)));\n    }\n    const days = ~~(h / 24);\n    return add({ days }, extractTime(ms - (days * DAY_MS)));\n}\n/**\n * @name extractTime\n * @summary Convert a quantity of seconds to Time array representing accumulated {days, minutes, hours, seconds, milliseconds}\n * @example\n * <BR>\n *\n * ```javascript\n * import { extractTime } from '@polkadot/util';\n *\n * const { days, minutes, hours, seconds, milliseconds } = extractTime(6000); // 0, 0, 10, 0, 0\n * ```\n */\nexport function extractTime(milliseconds) {\n    return !milliseconds\n        ? ZERO\n        : milliseconds < 1000\n            ? add({ milliseconds }, ZERO)\n            : extractSecs(milliseconds);\n}\n"],"mappings":"AAAA,MAAMA,MAAM,GAAG,EAAE,GAAG,IAAI;AACxB,MAAMC,KAAK,GAAGD,MAAM,GAAG,EAAE;AACzB,MAAME,MAAM,GAAGD,KAAK,GAAG,EAAE;AACzB,MAAME,IAAI,GAAG;EAAEC,IAAI,EAAE,CAAC;EAAEC,KAAK,EAAE,CAAC;EAAEC,YAAY,EAAE,CAAC;EAAEC,OAAO,EAAE,CAAC;EAAEC,OAAO,EAAE;AAAE,CAAC;AAC3E;AACA,SAASC,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACf,OAAO;IACHP,IAAI,EAAE,CAACM,CAAC,CAACN,IAAI,IAAI,CAAC,IAAIO,CAAC,CAACP,IAAI;IAC5BC,KAAK,EAAE,CAACK,CAAC,CAACL,KAAK,IAAI,CAAC,IAAIM,CAAC,CAACN,KAAK;IAC/BC,YAAY,EAAE,CAACI,CAAC,CAACJ,YAAY,IAAI,CAAC,IAAIK,CAAC,CAACL,YAAY;IACpDC,OAAO,EAAE,CAACG,CAAC,CAACH,OAAO,IAAI,CAAC,IAAII,CAAC,CAACJ,OAAO;IACrCC,OAAO,EAAE,CAACE,CAAC,CAACF,OAAO,IAAI,CAAC,IAAIG,CAAC,CAACH;EAClC,CAAC;AACL;AACA;AACA,SAASI,WAAWA,CAACC,EAAE,EAAE;EACrB,MAAMC,CAAC,GAAGD,EAAE,GAAG,IAAI;EACnB,IAAIC,CAAC,GAAG,EAAE,EAAE;IACR,MAAMN,OAAO,GAAG,CAAC,CAACM,CAAC;IACnB,OAAOL,GAAG,CAAC;MAAED;IAAQ,CAAC,EAAEO,WAAW,CAACF,EAAE,GAAIL,OAAO,GAAG,IAAK,CAAC,CAAC;EAC/D;EACA,MAAMQ,CAAC,GAAGF,CAAC,GAAG,EAAE;EAChB,IAAIE,CAAC,GAAG,EAAE,EAAE;IACR,MAAMT,OAAO,GAAG,CAAC,CAACS,CAAC;IACnB,OAAOP,GAAG,CAAC;MAAEF;IAAQ,CAAC,EAAEQ,WAAW,CAACF,EAAE,GAAIN,OAAO,GAAGP,MAAO,CAAC,CAAC;EACjE;EACA,MAAMiB,CAAC,GAAGD,CAAC,GAAG,EAAE;EAChB,IAAIC,CAAC,GAAG,EAAE,EAAE;IACR,MAAMZ,KAAK,GAAG,CAAC,CAACY,CAAC;IACjB,OAAOR,GAAG,CAAC;MAAEJ;IAAM,CAAC,EAAEU,WAAW,CAACF,EAAE,GAAIR,KAAK,GAAGJ,KAAM,CAAC,CAAC;EAC5D;EACA,MAAMG,IAAI,GAAG,CAAC,EAAEa,CAAC,GAAG,EAAE,CAAC;EACvB,OAAOR,GAAG,CAAC;IAAEL;EAAK,CAAC,EAAEW,WAAW,CAACF,EAAE,GAAIT,IAAI,GAAGF,MAAO,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,WAAWA,CAACT,YAAY,EAAE;EACtC,OAAO,CAACA,YAAY,GACdH,IAAI,GACJG,YAAY,GAAG,IAAI,GACfG,GAAG,CAAC;IAAEH;EAAa,CAAC,EAAEH,IAAI,CAAC,GAC3BS,WAAW,CAACN,YAAY,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}