{"ast":null,"code":"import { objectSpread } from '@polkadot/util';\nimport { polkadot } from './polkadot.js';\nimport { shell } from './shell.js';\nimport { statemint } from './statemint.js';\nimport { substrate } from './substrate.js';\nexport const allExtensions = objectSpread({}, substrate, polkadot, shell, statemint);\nexport const fallbackExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];\nexport function findUnknownExtensions(extensions, userExtensions = {}) {\n  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];\n  return extensions.filter(k => !names.includes(k));\n}\nexport function expandExtensionTypes(extensions, type, userExtensions = {}) {\n  return extensions\n  // Always allow user extensions first - these should provide overrides\n  .map(k => userExtensions[k] || allExtensions[k]).filter(info => !!info).reduce((result, info) => objectSpread(result, info[type]), {});\n}","map":{"version":3,"names":["objectSpread","polkadot","shell","statemint","substrate","allExtensions","fallbackExtensions","findUnknownExtensions","extensions","userExtensions","names","Object","keys","filter","k","includes","expandExtensionTypes","type","map","info","reduce","result"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/extrinsic/signedExtensions/index.js"],"sourcesContent":["import { objectSpread } from '@polkadot/util';\nimport { polkadot } from './polkadot.js';\nimport { shell } from './shell.js';\nimport { statemint } from './statemint.js';\nimport { substrate } from './substrate.js';\nexport const allExtensions = objectSpread({}, substrate, polkadot, shell, statemint);\nexport const fallbackExtensions = [\n    'CheckVersion',\n    'CheckGenesis',\n    'CheckEra',\n    'CheckNonce',\n    'CheckWeight',\n    'ChargeTransactionPayment',\n    'CheckBlockGasLimit'\n];\nexport function findUnknownExtensions(extensions, userExtensions = {}) {\n    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];\n    return extensions.filter((k) => !names.includes(k));\n}\nexport function expandExtensionTypes(extensions, type, userExtensions = {}) {\n    return extensions\n        // Always allow user extensions first - these should provide overrides\n        .map((k) => userExtensions[k] || allExtensions[k])\n        .filter((info) => !!info)\n        .reduce((result, info) => objectSpread(result, info[type]), {});\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,KAAK,QAAQ,YAAY;AAClC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,OAAO,MAAMC,aAAa,GAAGL,YAAY,CAAC,CAAC,CAAC,EAAEI,SAAS,EAAEH,QAAQ,EAAEC,KAAK,EAAEC,SAAS,CAAC;AACpF,OAAO,MAAMG,kBAAkB,GAAG,CAC9B,cAAc,EACd,cAAc,EACd,UAAU,EACV,YAAY,EACZ,aAAa,EACb,0BAA0B,EAC1B,oBAAoB,CACvB;AACD,OAAO,SAASC,qBAAqBA,CAACC,UAAU,EAAEC,cAAc,GAAG,CAAC,CAAC,EAAE;EACnE,MAAMC,KAAK,GAAG,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACP,aAAa,CAAC,EAAE,GAAGM,MAAM,CAACC,IAAI,CAACH,cAAc,CAAC,CAAC;EAC7E,OAAOD,UAAU,CAACK,MAAM,CAAEC,CAAC,IAAK,CAACJ,KAAK,CAACK,QAAQ,CAACD,CAAC,CAAC,CAAC;AACvD;AACA,OAAO,SAASE,oBAAoBA,CAACR,UAAU,EAAES,IAAI,EAAER,cAAc,GAAG,CAAC,CAAC,EAAE;EACxE,OAAOD;EACH;EAAA,CACCU,GAAG,CAAEJ,CAAC,IAAKL,cAAc,CAACK,CAAC,CAAC,IAAIT,aAAa,CAACS,CAAC,CAAC,CAAC,CACjDD,MAAM,CAAEM,IAAI,IAAK,CAAC,CAACA,IAAI,CAAC,CACxBC,MAAM,CAAC,CAACC,MAAM,EAAEF,IAAI,KAAKnB,YAAY,CAACqB,MAAM,EAAEF,IAAI,CAACF,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}