{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport Sketch from \"react-p5\";\nimport * as THREE from 'three';\nimport Stats from 'three/examples/jsm/libs/stats.module';\nimport { GUI } from \"https://cdn.skypack.dev/pin/dat.gui@v0.7.9-2wtQAdFH5SRwnJLDWGNz/mode=imports/optimized/dat.gui.js\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\nconst fragmentShader = `\n// Fork of \"Sphere and Volumetrics\" by Hei149. https://shadertoy.com/view/WlVSRW\n// 2024-05-14 15:59:42\n\nprecision highp float;\n\n#define rotate(angle) mat2(cos(angle), sin(angle), sin(-angle), cos(angle))\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat mat = 0.0;\nfloat glow = 1.0;\nfloat map(vec3 p, bool shadow)\n{\n    p.yz *= rotate(iTime);\n    p.xz *= rotate(iTime);\n    float d = abs(sdSphere(p, 6.0)) - 0.01;\n    vec3 rp = p;\n    for(int i = 0; i < 10; ++i)\n        rp = abs(rp) - 0.2+0.1*cos(iTime);\n\n    float d1 = sdSphere(rp + vec3(0.0, 0.0, 0.0), 0.015);\n    d = max(d, -d1);\n    d = min(d, abs(sdSphere(p, 2.0) - 0.1));\n\n    float d2 = sdSphere(p, 0.1);\n    glow += 0.21 / (0.01 + d2 * d2);\n\n\n\n    return d1/d2;\n\n}\n\nfloat shadow(vec3 r0, vec3 rd, float maxDist)\n{\n    float d = 0.05;\n    float shadow = 1.0;\n    while(d < maxDist)\n    {\n        float t = map(r0 + d * rd, true);\n        if(t < 0.01) return 0.0;\n        d += t;\n        shadow = min(shadow, 30.0 * (t / d));\n    }\n    return shadow;\n}\n\nvec3 norm(vec3 p)\n{\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(p + e.xyy, false) - map(p - e.xyy, false),\n                          map(p + e.yxy, false) - map(p - e.yxy, false),\n                          map(p + e.yyx, false) - map(p - e.yyx, false)\n    ));\n}\n\nfloat rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(13.549, 55.392))) * 312.93);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n    float si = sin(t);\n    float co = cos(t);\n    mat2 ma = mat2(co, si, -si, co);\n    uv*=ma;\n    vec3 r0 = vec3(0.0, 2.4, -3.0);\n    vec3 tgt = vec3(0.0);\n    vec3 ww = normalize(tgt - r0);\n    vec3 uu = normalize(cross(vec3(0,1,0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(uv.x * uu + uv.y * vv + 0.95 * ww);\n\n    vec3 col = vec3(0.0);\n    float d = 0.0;\n    vec3 p = vec3(0.0);\n    vec3 lp = normalize(vec3(0.0));\n    float matId = 0.0;\n    for(int i = 0; i < 100; ++i)\n    {\n        p = r0 + d * rd;\n        float t = map(p, false);\n        d += t;\n        if(abs(t) < 0.001){\n            vec3 albedo = vec3(1.0);\n            if(matId < 0.5) albedo = vec3(1.0, 0.0, 0.2);\n            vec3 n = norm(p);\n            vec3 ld = normalize(lp - p);\n            vec3 diff = max(dot(n, ld), 0.0) * vec3(0.4, 0.2, 0.8);\n            float shad = shadow(p, ld, 8.0);\n            col += diff * shad;\n\n            break;\n        }\n        if(d > 100.0)\n        {\n            break;\n        }\n    }\n\n    const int numIter = 100;\n    vec3 vD = rd;\n    vD = normalize(vD);\n    float stepSize = length(p - r0) / float(numIter);\n    vec3 vO = r0 + stepSize * vD * rand(uv) * 0.8;\n\n    float accum = 0.0;\n    for(int i = 0; i  < numIter; ++i)\n    {\n        vec3 ld = normalize(lp - vO);\n        float shad = shadow(vO, ld, 4.0);\n        float d = dot(vO, vO);\n        accum += (0.004 / d ) ;\n        col += accum * vec3(0.4, 0.2, 0.8) * 16.0;\n        vO += stepSize * vD;\n    }\n    col += glow * vec3(0.4, 0.2, 0.8);\n    col = accum * vec3(0.4, 0.2, 0.8) * 16.0;\n    fragColor = vec4(col, 1.0);\n}\n`;\nconst scene = new THREE.Scene();\nconst camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\nconst superman = {\n  origin: new THREE.Vector3(0, 3.5, 0),\n  speed: 10.0,\n  roll: Math.PI,\n  heading: 0,\n  pitch: Math.PI\n};\nconst uniforms = {\n  iTime: {\n    value: 0\n  },\n  iResolution: {\n    value: new THREE.Vector3(window.innerWidth, window.innerHeight, 1)\n  },\n  origin: {\n    value: superman.origin\n  },\n  roll: {\n    value: superman.roll\n  },\n  yaw: {\n    value: superman.heading\n  },\n  pitch: {\n    value: superman.pitch\n  },\n  amplitude: {\n    value: 0.5\n  },\n  frequency: {\n    value: 0.24\n  },\n  choppy: {\n    value: 3.0\n  },\n  night: {\n    value: false\n  }\n};\nconst plane = new THREE.PlaneGeometry(2, 2);\nconst material = new THREE.ShaderMaterial({\n  vertexShader,\n  fragmentShader,\n  uniforms\n});\nscene.add(new THREE.Mesh(plane, material));\nwindow.addEventListener('resize', onWindowResize, false);\nfunction onWindowResize() {\n  camera.updateProjectionMatrix();\n  uniforms.iResolution.value.set(window.innerWidth, window.innerHeight, 1);\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\nconst stats = Stats();\ndocument.body.appendChild(stats.dom);\nconst gui = new GUI();\ngui.width = 500;\nconst waterFolder = gui.addFolder('Water');\nwaterFolder.add(uniforms.amplitude, 'value', 0.1, 2, 0.1).name('Amplitude');\nwaterFolder.add(uniforms.frequency, 'value', 0.01, 2, 0.01).name('Frequency');\nwaterFolder.add(uniforms.choppy, 'value', 0.1, 20, 0.1).name('Choppy');\nwaterFolder.add(uniforms.night, 'value').name('Night');\nwaterFolder.open();\nconst supermanFolder = gui.addFolder('Superman');\nsupermanFolder.add(superman, 'roll', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01).name('Roll');\nsupermanFolder.add(superman, 'pitch', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01).name('Pitch');\nsupermanFolder.add(superman, 'speed', 0, 100, 0.1).name('Speed');\nsupermanFolder.open();\nconst clock = new THREE.Clock();\nlet delta = 0;\nlet alt = 0;\nfunction animate() {\n  requestAnimationFrame(animate);\n  delta = clock.getDelta();\n  superman.heading += (superman.roll - Math.PI) / 75;\n  superman.origin.x += -Math.sin(superman.heading) * superman.speed * delta;\n  superman.origin.z += Math.cos(superman.heading) * superman.speed * delta;\n  alt = superman.origin.y + (superman.pitch - Math.PI) / 10;\n  if (alt > 1) superman.origin.y = alt;\n  uniforms.iTime.value = clock.getElapsedTime();\n  uniforms.roll.value = superman.roll;\n  uniforms.yaw.value = superman.heading;\n  uniforms.pitch.value = superman.pitch;\n  uniforms.origin.value.copy(superman.origin);\n  render();\n  stats.update();\n}\nfunction render() {\n  renderer.render(scene, camera);\n}\nanimate();\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","TodoApp","reportWebVitals","Sketch","THREE","Stats","GUI","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","vertexShader","fragmentShader","scene","Scene","camera","OrthographicCamera","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","body","appendChild","domElement","superman","origin","Vector3","speed","roll","Math","PI","heading","pitch","uniforms","iTime","value","iResolution","yaw","amplitude","frequency","choppy","night","plane","PlaneGeometry","material","ShaderMaterial","add","Mesh","addEventListener","onWindowResize","updateProjectionMatrix","set","stats","dom","gui","width","waterFolder","addFolder","name","open","supermanFolder","clock","Clock","delta","alt","animate","requestAnimationFrame","getDelta","x","sin","z","cos","y","getElapsedTime","copy","render","update","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport Sketch from \"react-p5\";\nimport * as THREE from 'three'\nimport Stats from 'three/examples/jsm/libs/stats.module'\nimport { GUI } from \"https://cdn.skypack.dev/pin/dat.gui@v0.7.9-2wtQAdFH5SRwnJLDWGNz/mode=imports/optimized/dat.gui.js\"\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\nconst vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`\n\nconst fragmentShader = `\n// Fork of \"Sphere and Volumetrics\" by Hei149. https://shadertoy.com/view/WlVSRW\n// 2024-05-14 15:59:42\n\nprecision highp float;\n\n#define rotate(angle) mat2(cos(angle), sin(angle), sin(-angle), cos(angle))\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat mat = 0.0;\nfloat glow = 1.0;\nfloat map(vec3 p, bool shadow)\n{\n    p.yz *= rotate(iTime);\n    p.xz *= rotate(iTime);\n    float d = abs(sdSphere(p, 6.0)) - 0.01;\n    vec3 rp = p;\n    for(int i = 0; i < 10; ++i)\n        rp = abs(rp) - 0.2+0.1*cos(iTime);\n\n    float d1 = sdSphere(rp + vec3(0.0, 0.0, 0.0), 0.015);\n    d = max(d, -d1);\n    d = min(d, abs(sdSphere(p, 2.0) - 0.1));\n\n    float d2 = sdSphere(p, 0.1);\n    glow += 0.21 / (0.01 + d2 * d2);\n\n\n\n    return d1/d2;\n\n}\n\nfloat shadow(vec3 r0, vec3 rd, float maxDist)\n{\n    float d = 0.05;\n    float shadow = 1.0;\n    while(d < maxDist)\n    {\n        float t = map(r0 + d * rd, true);\n        if(t < 0.01) return 0.0;\n        d += t;\n        shadow = min(shadow, 30.0 * (t / d));\n    }\n    return shadow;\n}\n\nvec3 norm(vec3 p)\n{\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(p + e.xyy, false) - map(p - e.xyy, false),\n                          map(p + e.yxy, false) - map(p - e.yxy, false),\n                          map(p + e.yyx, false) - map(p - e.yyx, false)\n    ));\n}\n\nfloat rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(13.549, 55.392))) * 312.93);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n    float si = sin(t);\n    float co = cos(t);\n    mat2 ma = mat2(co, si, -si, co);\n    uv*=ma;\n    vec3 r0 = vec3(0.0, 2.4, -3.0);\n    vec3 tgt = vec3(0.0);\n    vec3 ww = normalize(tgt - r0);\n    vec3 uu = normalize(cross(vec3(0,1,0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(uv.x * uu + uv.y * vv + 0.95 * ww);\n\n    vec3 col = vec3(0.0);\n    float d = 0.0;\n    vec3 p = vec3(0.0);\n    vec3 lp = normalize(vec3(0.0));\n    float matId = 0.0;\n    for(int i = 0; i < 100; ++i)\n    {\n        p = r0 + d * rd;\n        float t = map(p, false);\n        d += t;\n        if(abs(t) < 0.001){\n            vec3 albedo = vec3(1.0);\n            if(matId < 0.5) albedo = vec3(1.0, 0.0, 0.2);\n            vec3 n = norm(p);\n            vec3 ld = normalize(lp - p);\n            vec3 diff = max(dot(n, ld), 0.0) * vec3(0.4, 0.2, 0.8);\n            float shad = shadow(p, ld, 8.0);\n            col += diff * shad;\n\n            break;\n        }\n        if(d > 100.0)\n        {\n            break;\n        }\n    }\n\n    const int numIter = 100;\n    vec3 vD = rd;\n    vD = normalize(vD);\n    float stepSize = length(p - r0) / float(numIter);\n    vec3 vO = r0 + stepSize * vD * rand(uv) * 0.8;\n\n    float accum = 0.0;\n    for(int i = 0; i  < numIter; ++i)\n    {\n        vec3 ld = normalize(lp - vO);\n        float shad = shadow(vO, ld, 4.0);\n        float d = dot(vO, vO);\n        accum += (0.004 / d ) ;\n        col += accum * vec3(0.4, 0.2, 0.8) * 16.0;\n        vO += stepSize * vD;\n    }\n    col += glow * vec3(0.4, 0.2, 0.8);\n    col = accum * vec3(0.4, 0.2, 0.8) * 16.0;\n    fragColor = vec4(col, 1.0);\n}\n`\n\nconst scene = new THREE.Scene()\n\nconst camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1)\n\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setSize(window.innerWidth, window.innerHeight)\ndocument.body.appendChild(renderer.domElement)\n\nconst superman = {\n    origin: new THREE.Vector3(0, 3.5, 0),\n    speed: 10.0,\n    roll: Math.PI,\n    heading: 0,\n    pitch: Math.PI,\n}\n\nconst uniforms = {\n    iTime: { value: 0 },\n    iResolution: { value: new THREE.Vector3(window.innerWidth, window.innerHeight, 1) },\n    origin: { value: superman.origin },\n    roll: { value: superman.roll },\n    yaw: { value: superman.heading },\n    pitch: { value: superman.pitch },\n    amplitude: { value: 0.5 },\n    frequency: { value: 0.24 },\n    choppy: { value: 3.0 },\n    night: { value: false },\n}\n\nconst plane = new THREE.PlaneGeometry(2, 2)\nconst material = new THREE.ShaderMaterial({\n    vertexShader,\n    fragmentShader,\n    uniforms,\n})\nscene.add(new THREE.Mesh(plane, material))\n\nwindow.addEventListener('resize', onWindowResize, false)\nfunction onWindowResize() {\n    camera.updateProjectionMatrix()\n    uniforms.iResolution.value.set(window.innerWidth, window.innerHeight, 1)\n    renderer.setSize(window.innerWidth, window.innerHeight)\n}\n\nconst stats = Stats()\ndocument.body.appendChild(stats.dom)\n\nconst gui = new GUI()\ngui.width = 500\nconst waterFolder = gui.addFolder('Water')\nwaterFolder.add(uniforms.amplitude, 'value', 0.1, 2, 0.1).name('Amplitude')\nwaterFolder.add(uniforms.frequency, 'value', 0.01, 2, 0.01).name('Frequency')\nwaterFolder.add(uniforms.choppy, 'value', 0.1, 20, 0.1).name('Choppy')\nwaterFolder.add(uniforms.night, 'value').name('Night')\nwaterFolder.open()\nconst supermanFolder = gui.addFolder('Superman')\nsupermanFolder\n.add(superman, 'roll', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01)\n.name('Roll')\nsupermanFolder\n.add(superman, 'pitch', Math.PI - Math.PI / 4, Math.PI + Math.PI / 4, 0.01)\n.name('Pitch')\nsupermanFolder.add(superman, 'speed', 0, 100, 0.1).name('Speed')\nsupermanFolder.open()\n\nconst clock = new THREE.Clock()\nlet delta = 0\nlet alt = 0\n\nfunction animate() {\n    requestAnimationFrame(animate)\n\n    delta = clock.getDelta()\n\n    superman.heading += (superman.roll - Math.PI) / 75\n    superman.origin.x += -Math.sin(superman.heading) * superman.speed * delta\n    superman.origin.z += Math.cos(superman.heading) * superman.speed * delta\n    alt = superman.origin.y + (superman.pitch - Math.PI) / 10\n    if (alt > 1) superman.origin.y = alt\n\n        uniforms.iTime.value = clock.getElapsedTime()\n        uniforms.roll.value = superman.roll\n        uniforms.yaw.value = superman.heading\n        uniforms.pitch.value = superman.pitch\n        uniforms.origin.value.copy(superman.origin)\n\n        render()\n\n        stats.update()\n}\n\nfunction render() {\n    renderer.render(scene, camera)\n}\n\nanimate()\n\n\n\nroot.render(\n    <>\n<TodoApp />\n<footer>©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,KAAK,MAAM,sCAAsC;AACxD,SAASC,GAAG,QAAQ,mGAAmG;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACvH,MAAMC,IAAI,GAAGX,QAAQ,CAACY,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAGjE,MAAMC,YAAY,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAI;AACxb,KAAK,CAACc,KAAK,CAAC,CAAC;AAE/B,MAAMC,MAAM,GAAG,IAAIf,KAAK,CAACgB,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAE/D,MAAMC,QAAQ,GAAG,IAAIjB,KAAK,CAACkB,aAAa,CAAC,CAAC;AAC1CD,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;AACvDb,QAAQ,CAACc,IAAI,CAACC,WAAW,CAACP,QAAQ,CAACQ,UAAU,CAAC;AAE9C,MAAMC,QAAQ,GAAG;EACbC,MAAM,EAAE,IAAI3B,KAAK,CAAC4B,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;EACpCC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAEC,IAAI,CAACC,EAAE;EACbC,OAAO,EAAE,CAAC;EACVC,KAAK,EAAEH,IAAI,CAACC;AAChB,CAAC;AAED,MAAMG,QAAQ,GAAG;EACbC,KAAK,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAC;EACnBC,WAAW,EAAE;IAAED,KAAK,EAAE,IAAIrC,KAAK,CAAC4B,OAAO,CAACR,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,EAAE,CAAC;EAAE,CAAC;EACnFK,MAAM,EAAE;IAAEU,KAAK,EAAEX,QAAQ,CAACC;EAAO,CAAC;EAClCG,IAAI,EAAE;IAAEO,KAAK,EAAEX,QAAQ,CAACI;EAAK,CAAC;EAC9BS,GAAG,EAAE;IAAEF,KAAK,EAAEX,QAAQ,CAACO;EAAQ,CAAC;EAChCC,KAAK,EAAE;IAAEG,KAAK,EAAEX,QAAQ,CAACQ;EAAM,CAAC;EAChCM,SAAS,EAAE;IAAEH,KAAK,EAAE;EAAI,CAAC;EACzBI,SAAS,EAAE;IAAEJ,KAAK,EAAE;EAAK,CAAC;EAC1BK,MAAM,EAAE;IAAEL,KAAK,EAAE;EAAI,CAAC;EACtBM,KAAK,EAAE;IAAEN,KAAK,EAAE;EAAM;AAC1B,CAAC;AAED,MAAMO,KAAK,GAAG,IAAI5C,KAAK,CAAC6C,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;AAC3C,MAAMC,QAAQ,GAAG,IAAI9C,KAAK,CAAC+C,cAAc,CAAC;EACtCpC,YAAY;EACZC,cAAc;EACduB;AACJ,CAAC,CAAC;AACFtB,KAAK,CAACmC,GAAG,CAAC,IAAIhD,KAAK,CAACiD,IAAI,CAACL,KAAK,EAAEE,QAAQ,CAAC,CAAC;AAE1C1B,MAAM,CAAC8B,gBAAgB,CAAC,QAAQ,EAAEC,cAAc,EAAE,KAAK,CAAC;AACxD,SAASA,cAAcA,CAAA,EAAG;EACtBpC,MAAM,CAACqC,sBAAsB,CAAC,CAAC;EAC/BjB,QAAQ,CAACG,WAAW,CAACD,KAAK,CAACgB,GAAG,CAACjC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,EAAE,CAAC,CAAC;EACxEL,QAAQ,CAACE,OAAO,CAACC,MAAM,CAACC,UAAU,EAAED,MAAM,CAACE,WAAW,CAAC;AAC3D;AAEA,MAAMgC,KAAK,GAAGrD,KAAK,CAAC,CAAC;AACrBQ,QAAQ,CAACc,IAAI,CAACC,WAAW,CAAC8B,KAAK,CAACC,GAAG,CAAC;AAEpC,MAAMC,GAAG,GAAG,IAAItD,GAAG,CAAC,CAAC;AACrBsD,GAAG,CAACC,KAAK,GAAG,GAAG;AACf,MAAMC,WAAW,GAAGF,GAAG,CAACG,SAAS,CAAC,OAAO,CAAC;AAC1CD,WAAW,CAACV,GAAG,CAACb,QAAQ,CAACK,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAACoB,IAAI,CAAC,WAAW,CAAC;AAC3EF,WAAW,CAACV,GAAG,CAACb,QAAQ,CAACM,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAACmB,IAAI,CAAC,WAAW,CAAC;AAC7EF,WAAW,CAACV,GAAG,CAACb,QAAQ,CAACO,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAACkB,IAAI,CAAC,QAAQ,CAAC;AACtEF,WAAW,CAACV,GAAG,CAACb,QAAQ,CAACQ,KAAK,EAAE,OAAO,CAAC,CAACiB,IAAI,CAAC,OAAO,CAAC;AACtDF,WAAW,CAACG,IAAI,CAAC,CAAC;AAClB,MAAMC,cAAc,GAAGN,GAAG,CAACG,SAAS,CAAC,UAAU,CAAC;AAChDG,cAAc,CACbd,GAAG,CAACtB,QAAQ,EAAE,MAAM,EAAEK,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACC,EAAE,GAAG,CAAC,EAAED,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,CACzE4B,IAAI,CAAC,MAAM,CAAC;AACbE,cAAc,CACbd,GAAG,CAACtB,QAAQ,EAAE,OAAO,EAAEK,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACC,EAAE,GAAG,CAAC,EAAED,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACC,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,CAC1E4B,IAAI,CAAC,OAAO,CAAC;AACdE,cAAc,CAACd,GAAG,CAACtB,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAACkC,IAAI,CAAC,OAAO,CAAC;AAChEE,cAAc,CAACD,IAAI,CAAC,CAAC;AAErB,MAAME,KAAK,GAAG,IAAI/D,KAAK,CAACgE,KAAK,CAAC,CAAC;AAC/B,IAAIC,KAAK,GAAG,CAAC;AACb,IAAIC,GAAG,GAAG,CAAC;AAEX,SAASC,OAAOA,CAAA,EAAG;EACfC,qBAAqB,CAACD,OAAO,CAAC;EAE9BF,KAAK,GAAGF,KAAK,CAACM,QAAQ,CAAC,CAAC;EAExB3C,QAAQ,CAACO,OAAO,IAAI,CAACP,QAAQ,CAACI,IAAI,GAAGC,IAAI,CAACC,EAAE,IAAI,EAAE;EAClDN,QAAQ,CAACC,MAAM,CAAC2C,CAAC,IAAI,CAACvC,IAAI,CAACwC,GAAG,CAAC7C,QAAQ,CAACO,OAAO,CAAC,GAAGP,QAAQ,CAACG,KAAK,GAAGoC,KAAK;EACzEvC,QAAQ,CAACC,MAAM,CAAC6C,CAAC,IAAIzC,IAAI,CAAC0C,GAAG,CAAC/C,QAAQ,CAACO,OAAO,CAAC,GAAGP,QAAQ,CAACG,KAAK,GAAGoC,KAAK;EACxEC,GAAG,GAAGxC,QAAQ,CAACC,MAAM,CAAC+C,CAAC,GAAG,CAAChD,QAAQ,CAACQ,KAAK,GAAGH,IAAI,CAACC,EAAE,IAAI,EAAE;EACzD,IAAIkC,GAAG,GAAG,CAAC,EAAExC,QAAQ,CAACC,MAAM,CAAC+C,CAAC,GAAGR,GAAG;EAEhC/B,QAAQ,CAACC,KAAK,CAACC,KAAK,GAAG0B,KAAK,CAACY,cAAc,CAAC,CAAC;EAC7CxC,QAAQ,CAACL,IAAI,CAACO,KAAK,GAAGX,QAAQ,CAACI,IAAI;EACnCK,QAAQ,CAACI,GAAG,CAACF,KAAK,GAAGX,QAAQ,CAACO,OAAO;EACrCE,QAAQ,CAACD,KAAK,CAACG,KAAK,GAAGX,QAAQ,CAACQ,KAAK;EACrCC,QAAQ,CAACR,MAAM,CAACU,KAAK,CAACuC,IAAI,CAAClD,QAAQ,CAACC,MAAM,CAAC;EAE3CkD,MAAM,CAAC,CAAC;EAERvB,KAAK,CAACwB,MAAM,CAAC,CAAC;AACtB;AAEA,SAASD,MAAMA,CAAA,EAAG;EACd5D,QAAQ,CAAC4D,MAAM,CAAChE,KAAK,EAAEE,MAAM,CAAC;AAClC;AAEAoD,OAAO,CAAC,CAAC;AAIT5D,IAAI,CAACsE,MAAM,eACPzE,OAAA,CAAAE,SAAA;EAAAyE,QAAA,gBACJ3E,OAAA,CAACP,OAAO;IAAAmF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACX/E,OAAA;IAAA2E,QAAA,EAAQ;EAA+C;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACArF,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}