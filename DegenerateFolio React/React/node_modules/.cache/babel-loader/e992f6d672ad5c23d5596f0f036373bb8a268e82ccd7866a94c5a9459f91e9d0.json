{"ast":null,"code":"import WorkerInstance from '../../../_virtual/basis.worker.mjs';\nimport { basisTranscoderUrls } from '../utils/setBasisTranscoderPath.mjs';\n\"use strict\";\nlet basisWorker;\nconst urlHash = {};\nfunction getBasisWorker(supportedTextures) {\n  if (!basisWorker) {\n    basisWorker = new WorkerInstance().worker;\n    basisWorker.onmessage = messageEvent => {\n      const {\n        success,\n        url,\n        textureOptions\n      } = messageEvent.data;\n      if (!success) {\n        console.warn(\"Failed to load Basis texture\", url);\n      }\n      urlHash[url](textureOptions);\n    };\n    basisWorker.postMessage({\n      type: \"init\",\n      jsUrl: basisTranscoderUrls.jsUrl,\n      wasmUrl: basisTranscoderUrls.wasmUrl,\n      supportedTextures\n    });\n  }\n  return basisWorker;\n}\nfunction loadBasisOnWorker(url, supportedTextures) {\n  const ktxWorker = getBasisWorker(supportedTextures);\n  return new Promise(resolve => {\n    urlHash[url] = resolve;\n    ktxWorker.postMessage({\n      type: \"load\",\n      url\n    });\n  });\n}\nexport { loadBasisOnWorker };","map":{"version":3,"names":["basisWorker","urlHash","getBasisWorker","supportedTextures","WorkerInstance","worker","onmessage","messageEvent","success","url","textureOptions","data","console","warn","postMessage","type","jsUrl","basisTranscoderUrls","wasmUrl","loadBasisOnWorker","ktxWorker","Promise","resolve"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/compressed-textures/basis/worker/loadBasisOnWorker.ts"],"sourcesContent":["import BasisWorker from 'worker:./basis.worker.ts';\nimport { basisTranscoderUrls } from '../utils/setBasisTranscoderPath';\n\nimport type { TEXTURE_FORMATS } from '../../../rendering/renderers/shared/texture/const';\nimport type { TextureSourceOptions } from '../../../rendering/renderers/shared/texture/sources/TextureSource';\n\nlet basisWorker: Worker;\nconst urlHash: Record<string, (value: any) => void> = {};\n\nfunction getBasisWorker(supportedTextures: TEXTURE_FORMATS[]): Worker\n{\n    if (!basisWorker)\n    {\n        basisWorker = new BasisWorker().worker;\n\n        basisWorker.onmessage = (messageEvent) =>\n        {\n            const { success, url, textureOptions } = messageEvent.data;\n\n            if (!success)\n            {\n                console.warn('Failed to load Basis texture', url);\n            }\n\n            urlHash[url](textureOptions);\n        };\n\n        basisWorker.postMessage({\n            type: 'init',\n            jsUrl: basisTranscoderUrls.jsUrl,\n            wasmUrl: basisTranscoderUrls.wasmUrl,\n            supportedTextures\n        });\n    }\n\n    return basisWorker;\n}\n\nexport function loadBasisOnWorker(\n    url: string,\n    supportedTextures: TEXTURE_FORMATS[]\n): Promise<TextureSourceOptions>\n{\n    const ktxWorker = getBasisWorker(supportedTextures);\n\n    return new Promise((resolve) =>\n    {\n        urlHash[url] = resolve;\n\n        ktxWorker.postMessage({ type: 'load', url });\n    });\n}\n"],"mappings":";;;AAMA,IAAIA,WAAA;AACJ,MAAMC,OAAA,GAAgD,EAAC;AAEvD,SAASC,eAAeC,iBACxB;EACI,IAAI,CAACH,WACL;IACkBA,WAAA,OAAII,cAAA,EAAc,CAAAC,MAAA;IAEpBL,WAAA,CAAAM,SAAA,GAAaC,YACzB;MACI,MAAM;QAAEC,OAAA;QAASC,GAAK;QAAAC;MAAA,IAAmBH,YAAa,CAAAI,IAAA;MAEtD,IAAI,CAACH,OACL;QACYI,OAAA,CAAAC,IAAA,CAAK,gCAAgCJ,GAAG;MAAA;MAG5CR,OAAA,CAAAQ,GAAG,EAAEC,cAAc;IAAA,CAC/B;IAEAV,WAAA,CAAYc,WAAY;MACpBC,IAAM;MACNC,KAAA,EAAOC,mBAAoB,CAAAD,KAAA;MAC3BE,OAAA,EAASD,mBAAoB,CAAAC,OAAA;MAC7Bf;IAAA,CACH;EAAA;EAGE,OAAAH,WAAA;AACX;AAEgB,SAAAmB,kBACZV,GAAA,EACAN,iBAEJ;EACU,MAAAiB,SAAA,GAAYlB,cAAA,CAAeC,iBAAiB;EAE3C,WAAIkB,OAAQ,CAACC,OACpB;IACIrB,OAAA,CAAQQ,GAAG,CAAI,GAAAa,OAAA;IAEfF,SAAA,CAAUN,WAAY;MAAEC,IAAM;MAAQN;IAAA,CAAK;EAAA,CAC9C;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}