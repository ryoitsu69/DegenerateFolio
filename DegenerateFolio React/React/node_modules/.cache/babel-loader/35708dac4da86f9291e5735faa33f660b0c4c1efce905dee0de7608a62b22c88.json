{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/components/Wallets.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Web3\n} = require('web3');\nconst ethRPC = new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst optRPC = new Web3(new Web3.providers.HttpProvider(\"https://optimism-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst arbRPC = new Web3(new Web3.providers.HttpProvider(\"https://arbitrum-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst starkRPC = new Web3(new Web3.providers.HttpProvider(\"https://starknet-mainnet.g.alchemy.com/v2/eDTvRiR7UGc1vibC0sQviDBnqHmlCnKz\"));\nconst bscRPC = new Web3(new Web3.providers.HttpProvider(\"https://bnb-mainnet.g.alchemy.com/v2/Wflh86IAxtX-p7SFc--_YxhsIINWRfPR\"));\nclass Chain {\n  constructor(rpc, tokenName, mainTokenAddress) {\n    this.rpc = rpc;\n    this.tokenName = tokenName;\n    this.mainTokenAddress = mainTokenAddress;\n  }\n}\nclass balanceEntry {\n  constructor(tokenName, amount, chain, address, price) {\n    this.tokenName = tokenName;\n    this.amount = amount;\n    this.chain = chain;\n    this.address = address;\n    this.price = price;\n  }\n}\n\n// The minimum ABI required to get the ERC20 Token balance\nconst minABI = [\n// balanceOf\n{\n  constant: true,\n  inputs: [{\n    name: '_owner',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    name: 'balance',\n    type: 'uint256'\n  }],\n  type: 'function'\n},\n// decimals\n{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"decimals\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint8\"\n  }],\n  \"type\": \"function\"\n}];\nclass Wallets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.balances = {};\n    this.chains = new Map();\n    this.balances = [];\n    this.chains.set('ETH', new Chain(ethRPC, 'ETH', null));\n    this.chains.set('OPT', new Chain(optRPC, 'OPT', \"0x4200000000000000000000000000000000000042\"));\n    this.chains.set('ARB', new Chain(arbRPC, 'ARB', \"0x912ce59144191c1204e64559fe8253a0e49e6548\"));\n    this.chains.set('STRK', new Chain(starkRPC, 'STRK', '0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D'));\n    this.chains.set('BSC', new Chain(bscRPC, 'BNB', null));\n    this.getBalanceGasToken.bind(this);\n    this.getERC20Balance.bind(this);\n  }\n  async getERC20Balance(wallet, tokenAddr, chain, tokenName) {\n    console.log(chain);\n    const contract = new chain.rpc.eth.Contract(minABI, tokenAddr);\n    let result = await contract.methods.balanceOf(wallet).call();\n    result = this.fromWei(result);\n    console.log(result.toString() + \" \" + tokenName);\n  }\n  getBalanceGasToken(address, chain) {\n    chain.rpc.eth.getBalance(address).then(balance => console.log(bscRPC.utils.fromWei(balance, \"ether\") + chain.tokenName));\n  }\n  fromWei(balance) {\n    let decimals = balance.toString().slice(-18);\n    let whole = balance.toString().split(decimals)[0];\n    return parseFloat(whole + \".\" + decimals);\n  }\n  render() {\n    {\n      this.getERC20Balance(\"0x4AE673F8898408d39966dE7ECC0BD7128b4b912E\", \"0x912ce59144191c1204e64559fe8253a0e49e6548\", this.chains.get('ARB'), \"ARB\");\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n}\n;\nexport default Wallets;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Web3","require","ethRPC","providers","HttpProvider","optRPC","arbRPC","starkRPC","bscRPC","Chain","constructor","rpc","tokenName","mainTokenAddress","balanceEntry","amount","chain","address","price","minABI","constant","inputs","name","type","outputs","Wallets","props","balances","chains","Map","set","getBalanceGasToken","bind","getERC20Balance","wallet","tokenAddr","console","log","contract","eth","Contract","result","methods","balanceOf","call","fromWei","toString","getBalance","then","balance","utils","decimals","slice","whole","split","parseFloat","render","get","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/components/Wallets.jsx"],"sourcesContent":["import React, { Component } from 'react';\nconst {Web3} = require('web3');\n\nconst ethRPC = new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst optRPC = new Web3(new Web3.providers.HttpProvider(\"https://optimism-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst arbRPC = new Web3(new Web3.providers.HttpProvider(\"https://arbitrum-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst starkRPC = new Web3(new Web3.providers.HttpProvider(\"https://starknet-mainnet.g.alchemy.com/v2/eDTvRiR7UGc1vibC0sQviDBnqHmlCnKz\"));\nconst bscRPC = new Web3(new Web3.providers.HttpProvider(\"https://bnb-mainnet.g.alchemy.com/v2/Wflh86IAxtX-p7SFc--_YxhsIINWRfPR\"));\n\nclass Chain{\n  constructor(rpc, tokenName, mainTokenAddress){\n    this.rpc = rpc;\n    this.tokenName = tokenName;\n    this.mainTokenAddress = mainTokenAddress;\n  }\n}\n\nclass balanceEntry{\n  constructor(tokenName, amount, chain, address, price){\n    this.tokenName = tokenName;\n    this.amount = amount;\n    this.chain = chain;\n    this.address = address;\n    this.price = price;\n  }\n}\n\n// The minimum ABI required to get the ERC20 Token balance\nconst minABI = [\n  // balanceOf\n  {\n    constant: true,\n    inputs: [{ name: '_owner', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ name: 'balance', type: 'uint256'}],\n    type: 'function',\n  },\n  // decimals\n  {\n    \"constant\":true,\n    \"inputs\":[],\n    \"name\":\"decimals\",\n    \"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\n    \"type\":\"function\"\n  }\n\n];\n\n\nclass Wallets extends React.Component{\n\n\n\n  constructor(props){\n    super(props);\n    this.chains = new Map();\n    this.balances = [];\n    this.chains.set('ETH', new Chain(ethRPC, 'ETH', null));\n    this.chains.set('OPT', new Chain(optRPC, 'OPT', \"0x4200000000000000000000000000000000000042\"));\n    this.chains.set('ARB', new Chain(arbRPC, 'ARB', \"0x912ce59144191c1204e64559fe8253a0e49e6548\"));\n    this.chains.set('STRK', new Chain(starkRPC, 'STRK', '0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D'));\n    this.chains.set('BSC', new Chain(bscRPC, 'BNB', null));\n    this.getBalanceGasToken.bind(this);\n    this.getERC20Balance.bind(this);\n  }\n\n  balances = {\n\n  }\n\n  async getERC20Balance(wallet,tokenAddr,chain,tokenName){\n    console.log(chain);\n    const contract = new chain.rpc.eth.Contract(minABI, tokenAddr);\n    let result = await contract.methods.balanceOf(wallet).call();\n    result = this.fromWei(result);\n    console.log(result.toString()+\" \"+tokenName)\n  }\n\n  getBalanceGasToken(address, chain){\n    chain.rpc.eth.getBalance(address).then((balance) => console.log(bscRPC.utils.fromWei(balance, \"ether\") + chain.tokenName));\n  }\n\n  fromWei(balance){\n    let decimals = balance.toString().slice(-18);\n    let whole = balance.toString().split(decimals)[0];\n    return parseFloat(whole+\".\"+decimals);\n  }\n\n\n  render(){\n  {this.getERC20Balance(\"0x4AE673F8898408d39966dE7ECC0BD7128b4b912E\",\"0x912ce59144191c1204e64559fe8253a0e49e6548\", this.chains.get('ARB'), \"ARB\")}\n    return (\n      <div></div>\n\n    );\n  }\n};\nexport default Wallets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}