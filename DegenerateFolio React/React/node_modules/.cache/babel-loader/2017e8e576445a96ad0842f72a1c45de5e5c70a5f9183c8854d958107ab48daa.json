{"ast":null,"code":"import { isCompact } from '@polkadot/util';\nimport { l } from './logging.js';\nexport function filterEvents(txHash, {\n  block: {\n    extrinsics,\n    header\n  }\n}, allEvents, status) {\n  // extrinsics to hashes\n  for (const [txIndex, x] of extrinsics.entries()) {\n    if (x.hash.eq(txHash)) {\n      return {\n        blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,\n        events: allEvents.filter(({\n          phase\n        }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),\n        txIndex\n      };\n    }\n  }\n  // if we do get the block after finalized, it _should_ be there\n  // only warn on filtering with isInBlock (finalization finalizes after)\n  if (status.isInBlock) {\n    const allHashes = extrinsics.map(x => x.hash.toHex());\n    l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);\n  }\n  return {};\n}","map":{"version":3,"names":["isCompact","l","filterEvents","txHash","block","extrinsics","header","allEvents","status","txIndex","x","entries","hash","eq","blockNumber","number","unwrap","events","filter","phase","isApplyExtrinsic","asApplyExtrinsic","eqn","isInBlock","allHashes","map","toHex","warn","join"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api/util/filterEvents.js"],"sourcesContent":["import { isCompact } from '@polkadot/util';\nimport { l } from './logging.js';\nexport function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {\n    // extrinsics to hashes\n    for (const [txIndex, x] of extrinsics.entries()) {\n        if (x.hash.eq(txHash)) {\n            return {\n                blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,\n                events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic &&\n                    phase.asApplyExtrinsic.eqn(txIndex)),\n                txIndex\n            };\n        }\n    }\n    // if we do get the block after finalized, it _should_ be there\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n        const allHashes = extrinsics.map((x) => x.hash.toHex());\n        l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);\n    }\n    return {};\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,CAAC,QAAQ,cAAc;AAChC,OAAO,SAASC,YAAYA,CAACC,MAAM,EAAE;EAAEC,KAAK,EAAE;IAAEC,UAAU;IAAEC;EAAO;AAAE,CAAC,EAAEC,SAAS,EAAEC,MAAM,EAAE;EACvF;EACA,KAAK,MAAM,CAACC,OAAO,EAAEC,CAAC,CAAC,IAAIL,UAAU,CAACM,OAAO,CAAC,CAAC,EAAE;IAC7C,IAAID,CAAC,CAACE,IAAI,CAACC,EAAE,CAACV,MAAM,CAAC,EAAE;MACnB,OAAO;QACHW,WAAW,EAAEd,SAAS,CAACM,MAAM,CAACS,MAAM,CAAC,GAAGT,MAAM,CAACS,MAAM,CAACC,MAAM,CAAC,CAAC,GAAGV,MAAM,CAACS,MAAM;QAC9EE,MAAM,EAAEV,SAAS,CAACW,MAAM,CAAC,CAAC;UAAEC;QAAM,CAAC,KAAKA,KAAK,CAACC,gBAAgB,IAC1DD,KAAK,CAACE,gBAAgB,CAACC,GAAG,CAACb,OAAO,CAAC,CAAC;QACxCA;MACJ,CAAC;IACL;EACJ;EACA;EACA;EACA,IAAID,MAAM,CAACe,SAAS,EAAE;IAClB,MAAMC,SAAS,GAAGnB,UAAU,CAACoB,GAAG,CAAEf,CAAC,IAAKA,CAAC,CAACE,IAAI,CAACc,KAAK,CAAC,CAAC,CAAC;IACvDzB,CAAC,CAAC0B,IAAI,CAAE,SAAQrB,MAAM,CAACM,IAAI,CAACc,KAAK,CAAC,CAAE,8BAA6BvB,MAAM,CAACuB,KAAK,CAAC,CAAE,WAAUF,SAAS,CAACI,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;EACrH;EACA,OAAO,CAAC,CAAC;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}