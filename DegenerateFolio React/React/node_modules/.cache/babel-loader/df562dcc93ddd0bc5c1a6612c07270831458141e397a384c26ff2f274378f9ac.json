{"ast":null,"code":"import { stringToU8a } from '@polkadot/util';\nimport { bip39ToMiniSecret, isReady } from '@polkadot/wasm-crypto';\nimport { pbkdf2Encode } from '../pbkdf2/index.js';\nimport { mnemonicToEntropy } from './toEntropy.js';\nimport { mnemonicValidate } from './validate.js';\nexport function mnemonicToMiniSecret(mnemonic) {\n  let password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let wordlist = arguments.length > 2 ? arguments[2] : undefined;\n  let onlyJs = arguments.length > 3 ? arguments[3] : undefined;\n  if (!mnemonicValidate(mnemonic, wordlist, onlyJs)) {\n    throw new Error('Invalid bip39 mnemonic specified');\n  } else if (!wordlist && !onlyJs && isReady()) {\n    return bip39ToMiniSecret(mnemonic, password);\n  }\n  const entropy = mnemonicToEntropy(mnemonic, wordlist);\n  const salt = stringToU8a(\"mnemonic\".concat(password));\n  // return the first 32 bytes as the seed\n  return pbkdf2Encode(entropy, salt).password.slice(0, 32);\n}","map":{"version":3,"names":["stringToU8a","bip39ToMiniSecret","isReady","pbkdf2Encode","mnemonicToEntropy","mnemonicValidate","mnemonicToMiniSecret","mnemonic","password","arguments","length","undefined","wordlist","onlyJs","Error","entropy","salt","concat","slice"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js"],"sourcesContent":["import { stringToU8a } from '@polkadot/util';\nimport { bip39ToMiniSecret, isReady } from '@polkadot/wasm-crypto';\nimport { pbkdf2Encode } from '../pbkdf2/index.js';\nimport { mnemonicToEntropy } from './toEntropy.js';\nimport { mnemonicValidate } from './validate.js';\nexport function mnemonicToMiniSecret(mnemonic, password = '', wordlist, onlyJs) {\n    if (!mnemonicValidate(mnemonic, wordlist, onlyJs)) {\n        throw new Error('Invalid bip39 mnemonic specified');\n    }\n    else if (!wordlist && !onlyJs && isReady()) {\n        return bip39ToMiniSecret(mnemonic, password);\n    }\n    const entropy = mnemonicToEntropy(mnemonic, wordlist);\n    const salt = stringToU8a(`mnemonic${password}`);\n    // return the first 32 bytes as the seed\n    return pbkdf2Encode(entropy, salt).password.slice(0, 32);\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,iBAAiB,EAAEC,OAAO,QAAQ,uBAAuB;AAClE,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,gBAAgB,QAAQ,eAAe;AAChD,OAAO,SAASC,oBAAoBA,CAACC,QAAQ,EAAmC;EAAA,IAAjCC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,MAAM,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC1E,IAAI,CAACN,gBAAgB,CAACE,QAAQ,EAAEK,QAAQ,EAAEC,MAAM,CAAC,EAAE;IAC/C,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACvD,CAAC,MACI,IAAI,CAACF,QAAQ,IAAI,CAACC,MAAM,IAAIX,OAAO,CAAC,CAAC,EAAE;IACxC,OAAOD,iBAAiB,CAACM,QAAQ,EAAEC,QAAQ,CAAC;EAChD;EACA,MAAMO,OAAO,GAAGX,iBAAiB,CAACG,QAAQ,EAAEK,QAAQ,CAAC;EACrD,MAAMI,IAAI,GAAGhB,WAAW,YAAAiB,MAAA,CAAYT,QAAQ,CAAE,CAAC;EAC/C;EACA,OAAOL,YAAY,CAACY,OAAO,EAAEC,IAAI,CAAC,CAACR,QAAQ,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}