{"ast":null,"code":"import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { BatchGeometry } from '../gpu/BatchGeometry.mjs';\nimport { Batcher } from './Batcher.mjs';\n\"use strict\";\nclass BatcherPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this._batches = /* @__PURE__ */Object.create(null);\n    this._geometries = /* @__PURE__ */Object.create(null);\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init(this);\n  }\n  buildStart(instructionSet) {\n    if (!this._batches[instructionSet.uid]) {\n      const batcher = new Batcher();\n      this._batches[instructionSet.uid] = batcher;\n      this._geometries[batcher.uid] = new BatchGeometry();\n    }\n    this._activeBatch = this._batches[instructionSet.uid];\n    this._activeGeometry = this._geometries[this._activeBatch.uid];\n    this._activeBatch.begin();\n  }\n  addToBatch(batchableObject) {\n    this._activeBatch.add(batchableObject);\n  }\n  break(instructionSet) {\n    this._activeBatch.break(instructionSet);\n  }\n  buildEnd(instructionSet) {\n    const activeBatch = this._activeBatch;\n    const geometry = this._activeGeometry;\n    activeBatch.finish(instructionSet);\n    geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n    geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n  }\n  upload(instructionSet) {\n    const batcher = this._batches[instructionSet.uid];\n    const geometry = this._geometries[batcher.uid];\n    if (batcher.dirty) {\n      batcher.dirty = false;\n      geometry.buffers[0].update(batcher.attributeSize * 4);\n    }\n  }\n  execute(batch) {\n    if (batch.action === \"startBatch\") {\n      const batcher = batch.batcher;\n      const geometry = this._geometries[batcher.uid];\n      this._adaptor.start(this, geometry);\n    }\n    this._adaptor.execute(this, batch);\n  }\n  destroy() {\n    this.state = null;\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    for (const i in this._batches) {\n      this._batches[i].destroy();\n    }\n    this._batches = null;\n    for (const i in this._geometries) {\n      this._geometries[i].destroy();\n    }\n    this._geometries = null;\n  }\n}\n/** @ignore */\nBatcherPipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"batch\"\n};\nexport { BatcherPipe };","map":{"version":3,"names":["BatcherPipe","constructor","renderer","adaptor","state","State","for2d","_batches","Object","create","_geometries","_adaptor","init","buildStart","instructionSet","uid","batcher","Batcher","BatchGeometry","_activeBatch","_activeGeometry","begin","addToBatch","batchableObject","add","break","buildEnd","activeBatch","geometry","finish","indexBuffer","setDataWithSize","indexSize","buffers","attributeBuffer","float32View","attributeSize","upload","dirty","update","execute","batch","action","start","destroy","i","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/batcher/shared/BatcherPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { BatchGeometry } from '../gpu/BatchGeometry';\nimport { Batcher } from './Batcher';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableObject } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry): void\n    init(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    destroy(): void;\n    contextChange?(): void;\n}\n\n// eslint-disable-next-line max-len\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private _batches: Record<number, Batcher> = Object.create(null);\n    private _geometries: Record<number, BatchGeometry> = Object.create(null);\n    private _adaptor: BatcherAdaptor;\n\n    private _activeBatch: Batcher;\n    private _activeGeometry: Geometry;\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        if (!this._batches[instructionSet.uid])\n        {\n            const batcher = new Batcher();\n\n            this._batches[instructionSet.uid] = batcher;\n            this._geometries[batcher.uid] = new BatchGeometry();\n        }\n\n        this._activeBatch = this._batches[instructionSet.uid];\n        this._activeGeometry = this._geometries[this._activeBatch.uid];\n\n        this._activeBatch.begin();\n    }\n\n    public addToBatch(batchableObject: BatchableObject)\n    {\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        const activeBatch = this._activeBatch;\n        const geometry = this._activeGeometry;\n\n        activeBatch.finish(instructionSet);\n\n        geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n\n        geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batcher = this._batches[instructionSet.uid];\n        const geometry = this._geometries[batcher.uid];\n\n        if (batcher.dirty)\n        {\n            batcher.dirty = false;\n            geometry.buffers[0].update(batcher.attributeSize * 4);\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = this._geometries[batcher.uid];\n\n            this._adaptor.start(this, geometry);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        for (const i in this._batches)\n        {\n            this._batches[i].destroy();\n        }\n\n        this._batches = null;\n\n        for (const i in this._geometries)\n        {\n            this._geometries[i].destroy();\n        }\n\n        this._geometries = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}