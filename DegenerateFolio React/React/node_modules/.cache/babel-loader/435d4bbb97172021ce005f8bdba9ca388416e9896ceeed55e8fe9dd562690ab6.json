{"ast":null,"code":"export const DEFAULT_CAPACITY = 128;\nclass LRUNode {\n  key;\n  next;\n  prev;\n  constructor(key) {\n    this.key = key;\n    this.next = this.prev = this;\n  }\n}\nexport class LRUCache {\n  capacity;\n  __internal__data = new Map();\n  __internal__refs = new Map();\n  __internal__length = 0;\n  __internal__head;\n  __internal__tail;\n  constructor(capacity = DEFAULT_CAPACITY) {\n    this.capacity = capacity;\n    this.__internal__head = this.__internal__tail = new LRUNode('<empty>');\n  }\n  get length() {\n    return this.__internal__length;\n  }\n  get lengthData() {\n    return this.__internal__data.size;\n  }\n  get lengthRefs() {\n    return this.__internal__refs.size;\n  }\n  entries() {\n    const keys = this.keys();\n    const count = keys.length;\n    const entries = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const key = keys[i];\n      entries[i] = [key, this.__internal__data.get(key)];\n    }\n    return entries;\n  }\n  keys() {\n    const keys = [];\n    if (this.__internal__length) {\n      let curr = this.__internal__head;\n      while (curr !== this.__internal__tail) {\n        keys.push(curr.key);\n        curr = curr.next;\n      }\n      keys.push(curr.key);\n    }\n    return keys;\n  }\n  get(key) {\n    const data = this.__internal__data.get(key);\n    if (data) {\n      this.__internal__toHead(key);\n      return data;\n    }\n    return null;\n  }\n  set(key, value) {\n    if (this.__internal__data.has(key)) {\n      this.__internal__toHead(key);\n    } else {\n      const node = new LRUNode(key);\n      this.__internal__refs.set(node.key, node);\n      if (this.length === 0) {\n        this.__internal__head = this.__internal__tail = node;\n      } else {\n        this.__internal__head.prev = node;\n        node.next = this.__internal__head;\n        this.__internal__head = node;\n      }\n      if (this.__internal__length === this.capacity) {\n        this.__internal__data.delete(this.__internal__tail.key);\n        this.__internal__refs.delete(this.__internal__tail.key);\n        this.__internal__tail = this.__internal__tail.prev;\n        this.__internal__tail.next = this.__internal__head;\n      } else {\n        this.__internal__length += 1;\n      }\n    }\n    this.__internal__data.set(key, value);\n  }\n  __internal__toHead(key) {\n    const ref = this.__internal__refs.get(key);\n    if (ref && ref !== this.__internal__head) {\n      ref.prev.next = ref.next;\n      ref.next.prev = ref.prev;\n      ref.next = this.__internal__head;\n      this.__internal__head.prev = ref;\n      this.__internal__head = ref;\n    }\n  }\n}","map":{"version":3,"names":["DEFAULT_CAPACITY","LRUNode","key","next","prev","constructor","LRUCache","capacity","__internal__data","Map","__internal__refs","__internal__length","__internal__head","__internal__tail","length","lengthData","size","lengthRefs","entries","keys","count","Array","i","get","curr","push","data","__internal__toHead","set","value","has","node","delete","ref"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/rpc-provider/lru.js"],"sourcesContent":["export const DEFAULT_CAPACITY = 128;\nclass LRUNode {\n    key;\n    next;\n    prev;\n    constructor(key) {\n        this.key = key;\n        this.next = this.prev = this;\n    }\n}\nexport class LRUCache {\n    capacity;\n    __internal__data = new Map();\n    __internal__refs = new Map();\n    __internal__length = 0;\n    __internal__head;\n    __internal__tail;\n    constructor(capacity = DEFAULT_CAPACITY) {\n        this.capacity = capacity;\n        this.__internal__head = this.__internal__tail = new LRUNode('<empty>');\n    }\n    get length() {\n        return this.__internal__length;\n    }\n    get lengthData() {\n        return this.__internal__data.size;\n    }\n    get lengthRefs() {\n        return this.__internal__refs.size;\n    }\n    entries() {\n        const keys = this.keys();\n        const count = keys.length;\n        const entries = new Array(count);\n        for (let i = 0; i < count; i++) {\n            const key = keys[i];\n            entries[i] = [key, this.__internal__data.get(key)];\n        }\n        return entries;\n    }\n    keys() {\n        const keys = [];\n        if (this.__internal__length) {\n            let curr = this.__internal__head;\n            while (curr !== this.__internal__tail) {\n                keys.push(curr.key);\n                curr = curr.next;\n            }\n            keys.push(curr.key);\n        }\n        return keys;\n    }\n    get(key) {\n        const data = this.__internal__data.get(key);\n        if (data) {\n            this.__internal__toHead(key);\n            return data;\n        }\n        return null;\n    }\n    set(key, value) {\n        if (this.__internal__data.has(key)) {\n            this.__internal__toHead(key);\n        }\n        else {\n            const node = new LRUNode(key);\n            this.__internal__refs.set(node.key, node);\n            if (this.length === 0) {\n                this.__internal__head = this.__internal__tail = node;\n            }\n            else {\n                this.__internal__head.prev = node;\n                node.next = this.__internal__head;\n                this.__internal__head = node;\n            }\n            if (this.__internal__length === this.capacity) {\n                this.__internal__data.delete(this.__internal__tail.key);\n                this.__internal__refs.delete(this.__internal__tail.key);\n                this.__internal__tail = this.__internal__tail.prev;\n                this.__internal__tail.next = this.__internal__head;\n            }\n            else {\n                this.__internal__length += 1;\n            }\n        }\n        this.__internal__data.set(key, value);\n    }\n    __internal__toHead(key) {\n        const ref = this.__internal__refs.get(key);\n        if (ref && ref !== this.__internal__head) {\n            ref.prev.next = ref.next;\n            ref.next.prev = ref.prev;\n            ref.next = this.__internal__head;\n            this.__internal__head.prev = ref;\n            this.__internal__head = ref;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}