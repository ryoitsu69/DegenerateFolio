{"ast":null,"code":"import { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\"use strict\";\nclass BufferImageSource extends TextureSource {\n  constructor(options) {\n    const buffer = options.resource || new Float32Array(options.width * options.height * 4);\n    let format = options.format;\n    if (!format) {\n      if (buffer instanceof Float32Array) {\n        format = \"rgba32float\";\n      } else if (buffer instanceof Int32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Uint32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Int16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Uint16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Int8Array) {\n        format = \"bgra8unorm\";\n      } else {\n        format = \"bgra8unorm\";\n      }\n    }\n    super({\n      ...options,\n      resource: buffer,\n      format\n    });\n    this.uploadMethodId = \"buffer\";\n  }\n  static test(resource) {\n    return resource instanceof Int8Array || resource instanceof Uint8Array || resource instanceof Uint8ClampedArray || resource instanceof Int16Array || resource instanceof Uint16Array || resource instanceof Int32Array || resource instanceof Uint32Array || resource instanceof Float32Array;\n  }\n}\nBufferImageSource.extension = ExtensionType.TextureSource;\nexport { BufferImageSource };","map":{"version":3,"names":["BufferImageSource","TextureSource","constructor","options","buffer","resource","Float32Array","width","height","format","Int32Array","Uint32Array","Int16Array","Uint16Array","Int8Array","uploadMethodId","test","Uint8Array","Uint8ClampedArray","extension","ExtensionType"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/sources/BufferSource.ts"],"sourcesContent":["import { ExtensionType } from '../../../../../extensions/Extensions';\nimport { TextureSource } from './TextureSource';\n\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { TypedArray } from '../../buffer/Buffer';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport interface BufferSourceOptions extends TextureSourceOptions<TypedArray | ArrayBuffer>\n{\n    width: number;\n    height: number;\n}\n\nexport class BufferImageSource extends TextureSource<TypedArray | ArrayBuffer>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n\n    public uploadMethodId = 'buffer';\n\n    constructor(options: BufferSourceOptions)\n    {\n        const buffer = options.resource || new Float32Array(options.width * options.height * 4);\n        let format = options.format;\n\n        if (!format)\n        {\n            if (buffer instanceof Float32Array)\n            {\n                format = 'rgba32float';\n            }\n            else if (buffer instanceof Int32Array)\n            {\n                format = 'rgba32uint';\n            }\n            else if (buffer instanceof Uint32Array)\n            {\n                format = 'rgba32uint';\n            }\n            else if (buffer instanceof Int16Array)\n            {\n                format = 'rgba16uint';\n            }\n            else if (buffer instanceof Uint16Array)\n            {\n                format = 'rgba16uint';\n            }\n            else if (buffer instanceof Int8Array)\n            {\n                format = 'bgra8unorm';\n            }\n            else\n            {\n                format = 'bgra8unorm';\n            }\n        }\n\n        super({\n            ...options,\n            resource: buffer,\n            format,\n        });\n    }\n\n    public static test(resource: any): resource is TypedArray | ArrayBuffer\n    {\n        return resource instanceof Int8Array\n        || resource instanceof Uint8Array\n        || resource instanceof Uint8ClampedArray\n        || resource instanceof Int16Array\n        || resource instanceof Uint16Array\n        || resource instanceof Int32Array\n        || resource instanceof Uint32Array\n        || resource instanceof Float32Array;\n    }\n}\n"],"mappings":";;;AAaO,MAAMA,iBAAA,SAA0BC,aACvC;EAKIC,YAAYC,OACZ;IACU,MAAAC,MAAA,GAASD,OAAA,CAAQE,QAAY,QAAIC,YAAA,CAAaH,OAAQ,CAAAI,KAAA,GAAQJ,OAAQ,CAAAK,MAAA,GAAS,CAAC;IACtF,IAAIC,MAAA,GAASN,OAAQ,CAAAM,MAAA;IAErB,IAAI,CAACA,MACL;MACI,IAAIL,MAAA,YAAkBE,YACtB;QACaG,MAAA;MAAA,CACb,UACSL,MAAA,YAAkBM,UAC3B;QACaD,MAAA;MAAA,CACb,UACSL,MAAA,YAAkBO,WAC3B;QACaF,MAAA;MAAA,CACb,UACSL,MAAA,YAAkBQ,UAC3B;QACaH,MAAA;MAAA,CACb,UACSL,MAAA,YAAkBS,WAC3B;QACaJ,MAAA;MAAA,CACb,UACSL,MAAA,YAAkBU,SAC3B;QACaL,MAAA;MAAA,CAGb;QACaA,MAAA;MAAA;IACb;IAGE;MACF,GAAGN,OAAA;MACHE,QAAU,EAAAD,MAAA;MACVK;IAAA,CACH;IA3CL,KAAOM,cAAiB;EAAA;EA8CxB,OAAcC,KAAKX,QACnB;IACI,OAAOA,QAAoB,YAAAS,SAAA,IACxBT,QAAoB,YAAAY,UAAA,IACpBZ,QAAA,YAAoBa,iBACpB,IAAAb,QAAA,YAAoBO,UACpB,IAAAP,QAAA,YAAoBQ,WACpB,IAAAR,QAAA,YAAoBK,UACpB,IAAAL,QAAA,YAAoBM,WAAA,IACpBN,QAAoB,YAAAC,YAAA;EAAA;AAE/B;AA7DaN,iBAAA,CAEKmB,SAAA,GAA+BC,aAAc,CAAAnB,aAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}