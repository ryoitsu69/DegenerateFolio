{"ast":null,"code":"import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return {\n      canvas,\n      context\n    };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const {\n      width,\n      height\n    } = canvasAndContext.canvas;\n    const key = (width << 17) + (height << 1);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\nexport { CanvasPool, CanvasPoolClass };","map":{"version":3,"names":["CanvasPoolClass","constructor","canvasOptions","_canvasPool","Object","create","enableFullScreen","_createCanvasAndContext","pixelWidth","pixelHeight","canvas","DOMAdapter","get","createCanvas","width","height","context","getContext","getOptimalCanvasAndContext","minWidth","minHeight","resolution","Math","ceil","nextPow2","key","canvasAndContext","pop","returnCanvasAndContext","push","clear","CanvasPool"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const { width, height } = canvasAndContext.canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n"],"mappings":";;;AAsBO,MAAMA,eACb;EAYIC,YAAYC,aACZ;IACS,KAAAC,WAAA,kBAAqBC,MAAA,CAAAC,MAAA,CAAO,IAAI;IAChC,KAAAH,aAAA,GAAgBA,aAAA,IAAiB,EAAC;IACvC,KAAKI,gBAAmB;EAAA;EAC5B;AAAA;AAAA;AAAA;AAAA;EAOQC,wBAAwBC,UAAA,EAAoBC,WACpD;IACI,MAAMC,MAAS,GAAAC,UAAA,CAAWC,GAAI,GAAEC,YAAa;IAE7CH,MAAA,CAAOI,KAAQ,GAAAN,UAAA;IACfE,MAAA,CAAOK,MAAS,GAAAN,WAAA;IAEV,MAAAO,OAAA,GAAUN,MAAO,CAAAO,UAAA,CAAW,IAAI;IAE/B;MAAEP,MAAA;MAAQM;IAAQ;EAAA;EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOE,0BAA2BA,CAAAC,QAAA,EAAkBC,SAAmB,EAAAC,UAAA,GAAa,CACpF;IACIF,QAAA,GAAWG,IAAK,CAAAC,IAAA,CAAMJ,QAAW,GAAAE,UAAA,GAAc,IAAI;IACnDD,SAAA,GAAYE,IAAK,CAAAC,IAAA,CAAMH,SAAY,GAAAC,UAAA,GAAc,IAAI;IACrDF,QAAA,GAAWK,QAAA,CAASL,QAAQ;IAC5BC,SAAA,GAAYI,QAAA,CAASJ,SAAS;IAExB,MAAAK,GAAA,IAAON,QAAY,WAAOC,SAAa;IAE7C,IAAI,CAAC,KAAKjB,WAAY,CAAAsB,GAAG,CACzB;MACS,KAAAtB,WAAA,CAAYsB,GAAG,IAAI,EAAC;IAAA;IAG7B,IAAIC,gBAAmB,QAAKvB,WAAY,CAAAsB,GAAG,EAAEE,GAAI;IAEjD,IAAI,CAACD,gBACL;MACuBA,gBAAA,QAAKnB,uBAAwB,CAAAY,QAAA,EAAUC,SAAS;IAAA;IAGhE,OAAAM,gBAAA;EAAA;EACX;AAAA;AAAA;AAAA;EAMOE,uBAAuBF,gBAC9B;IACI,MAAM;MAAEZ,KAAA;MAAOC;IAAO,IAAIW,gBAAiB,CAAAhB,MAAA;IAErC,MAAAe,GAAA,IAAOX,KAAS,WAAOC,MAAU;IAEvC,KAAKZ,WAAY,CAAAsB,GAAG,CAAE,CAAAI,IAAA,CAAKH,gBAAgB;EAAA;EAGxCI,KACPA,CAAA;IACI,KAAK3B,WAAA,GAAc,EAAC;EAAA;AAE5B;AAEa,MAAA4B,UAAA,GAAa,IAAI/B,eAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}