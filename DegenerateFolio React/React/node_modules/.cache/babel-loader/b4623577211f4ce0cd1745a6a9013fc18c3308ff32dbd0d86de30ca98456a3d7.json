{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ENS = void 0;\nconst web3_core_1 = require(\"web3-core\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_eth_1 = require(\"web3-eth\");\nconst web3_net_1 = require(\"web3-net\");\nconst web3_types_1 = require(\"web3-types\");\nconst config_js_1 = require(\"./config.js\");\nconst registry_js_1 = require(\"./registry.js\");\nconst resolver_js_1 = require(\"./resolver.js\");\n/**\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\n* For using ENS package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that ENS features can be used as mentioned in following snippet.\n* ```ts\n*\n* import { Web3 } from 'web3';\n*\n* const web3 = new Web3('https://127.0.0.1:4545');\n*\n* console.log(await web3.eth.ens.getAddress('ethereum.eth'))\n* ```\n* For using individual package install `web3-eth-ens` packages using: `npm i web3-eth-ens` or `yarn add web3-eth-ens`. This is more efficient approach for building lightweight applications.\n*\n* ```ts\n*import { ENS } from 'web3-eth-ens';\n*\n* const ens = new ENS(undefined,'https://127.0.0.1:4545');\n*\n* console.log(await ens.getAddress('vitalik.eth'));\n* ```\n*/\nclass ENS extends web3_core_1.Web3Context {\n  /**\n   * Use to create an instance of ENS\n   * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\n   * @param provider - (Optional) The provider to use for the ENS instance\n   * @example\n   * ```ts\n   * const ens = new ENS(\n   * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n   * \t\"http://localhost:8545\"\n   * );\n   *\n   * console.log( ens.defaultChain);\n   * > mainnet\n   * ```\n   */\n  constructor(registryAddr, provider) {\n    super(provider !== null && provider !== void 0 ? provider : '');\n    this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : config_js_1.registryAddresses.main; // will default to main registry address\n    this._registry = new registry_js_1.Registry(this.getContextObject(), registryAddr);\n    this._resolver = new resolver_js_1.Resolver(this._registry);\n  }\n  /**\n   * Returns the Resolver by the given address\n   * @param name - The name of the ENS domain\n   * @returns - An contract instance of the resolver\n   *\n   * @example\n   * ```ts\n   * const resolver = await ens.getResolver('resolver');\n   *\n   * console.log(resolver.options.address);\n   * > '0x1234567890123456789012345678901234567890'\n   * ```\n   */\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getResolver(name);\n    });\n  }\n  /**\n   * Returns true if the record exists\n   * @param name - The ENS name\n   * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\n   * @example\n   * ```ts\n   * const exists = await web3.eth.ens.recordExists('ethereum.eth');\n   * ```\n   */\n  recordExists(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.recordExists(name);\n    });\n  }\n  /**\n   * Returns the caching TTL (time-to-live) of an ENS name.\n   * @param name - The ENS name\n   * @returns - Returns the caching TTL (time-to-live) of a name.\n   * @example\n   * ```ts\n   * const owner = await web3.eth.ens.getTTL('ethereum.eth');\n   * ```\n   */\n  getTTL(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getTTL(name);\n    });\n  }\n  /**\n   * Returns the owner by the given name and current configured or detected Registry\n   * @param name - The ENS name\n   * @returns - Returns the address of the owner of the name.\n   * @example\n   * ```ts\n   * const owner = await web3.eth.ens.getOwner('ethereum.eth');\n   * ```\n   */\n  getOwner(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._registry.getOwner(name);\n    });\n  }\n  /**\n   * Resolves an ENS name to an Ethereum address.\n   * @param ENSName - The ENS name to resolve\n   * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\n   * @returns - The Ethereum address of the given name\n   * ```ts\n   * const address = await web3.eth.ens.getAddress('ethereum.eth');\n   * console.log(address);\n   * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\n   * ```\n   */\n  getAddress(ENSName) {\n    let coinType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getAddress(ENSName, coinType);\n    });\n  }\n  /**\n   * ERC-634 - Returns the text content stored in the resolver for the specified key.\n   * @param ENSName - The ENS name to resolve\n   * @param key - The key to resolve https://github.com/ethereum/ercs/blob/master/ERCS/erc-634.md#global-keys\n   * @returns - The value content stored in the resolver for the specified key\n   */\n  getText(ENSName, key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getText(ENSName, key);\n    });\n  }\n  /**\n   * Resolves the name of an ENS node.\n   * @param ENSName - The node to resolve\n   * @returns - The name\n   */\n  getName(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getName(ENSName);\n    });\n  }\n  /**\n   * Returns the X and Y coordinates of the curve point for the public key.\n   * @param ENSName - The ENS name\n   * @returns - The X and Y coordinates of the curve point for the public key\n   * @example\n   * ```ts\n   * const key = await web3.eth.ens.getPubkey('ethereum.eth');\n   * console.log(key);\n   * > {\n   * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n   * }\n   * ```\n   */\n  getPubkey(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getPubkey(ENSName);\n    });\n  }\n  /**\n   * Returns the content hash object associated with an ENS node.\n   * @param ENSName - The ENS name\n   * @returns - The content hash object associated with an ENS node\n   * @example\n   * ```ts\n   * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\n   * console.log(hash);\n   * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\n   * ```\n   */\n  getContenthash(ENSName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.getContenthash(ENSName);\n    });\n  }\n  /**\n   * Checks if the current used network is synced and looks for ENS support there.\n   * Throws an error if not.\n   * @returns - The address of the ENS registry if the network has been detected successfully\n   * @example\n   * ```ts\n   * console.log(await web3.eth.ens.checkNetwork());\n   * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n   * ```\n   */\n  checkNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const now = Date.now() / 1000;\n      if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n        const syncInfo = yield (0, web3_eth_1.isSyncing)(this);\n        if (!(typeof syncInfo === 'boolean' && !syncInfo)) {\n          throw new web3_errors_1.ENSNetworkNotSyncedError();\n        }\n        this._lastSyncCheck = now;\n      }\n      if (this._detectedAddress) {\n        return this._detectedAddress;\n      }\n      const networkType = yield (0, web3_net_1.getId)(this, Object.assign(Object.assign({}, web3_types_1.DEFAULT_RETURN_FORMAT), {\n        number: web3_types_1.FMT_NUMBER.HEX\n      })); // get the network from provider\n      const addr = config_js_1.registryAddresses[config_js_1.networkIds[networkType]];\n      if (typeof addr === 'undefined') {\n        throw new web3_errors_1.ENSUnsupportedNetworkError(networkType);\n      }\n      this._detectedAddress = addr;\n      return this._detectedAddress;\n    });\n  }\n  /**\n   * Returns true if the related Resolver does support the given signature or interfaceId.\n   * @param ENSName - The ENS name\n   * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\n   * @returns - `true` if the related Resolver does support the given signature or interfaceId.\n   * @example\n   * ```ts\n   * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\n   * console.log(supports);\n   * > true\n   * ```\n   */\n  supportsInterface(ENSName, interfaceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.supportsInterface(ENSName, interfaceId);\n    });\n  }\n  /**\n   * @returns - Returns all events that can be emitted by the ENS registry.\n   */\n  get events() {\n    return this._registry.events;\n  }\n  /**\n   * Sets the address of an ENS name in his resolver.\n   * @param name - The ENS name\n   * @param address - The address to set\n   * @param txConfig - (Optional) The transaction config\n   * @returns - The transaction receipt\n   * ```ts\n   * const receipt = await ens.setAddress('web3js.eth','0xe2597eb05cf9a87eb1309e86750c903ec38e527e');\n   *```\n   */\n  setAddress(name, address, txConfig) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._resolver.setAddress(name, address, txConfig);\n    });\n  }\n}\nexports.ENS = ENS;","map":{"version":3,"names":["web3_core_1","require","web3_errors_1","web3_eth_1","web3_net_1","web3_types_1","config_js_1","registry_js_1","resolver_js_1","ENS","Web3Context","constructor","registryAddr","provider","registryAddress","registryAddresses","main","_registry","Registry","getContextObject","_resolver","Resolver","getResolver","name","recordExists","getTTL","getOwner","getAddress","ENSName","coinType","arguments","length","undefined","getText","key","getName","getPubkey","getContenthash","checkNetwork","now","Date","_lastSyncCheck","syncInfo","isSyncing","ENSNetworkNotSyncedError","_detectedAddress","networkType","getId","Object","assign","DEFAULT_RETURN_FORMAT","number","FMT_NUMBER","HEX","addr","networkIds","ENSUnsupportedNetworkError","supportsInterface","interfaceId","events","setAddress","address","txConfig","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-ens/src/ens.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context, Web3ContextObject } from 'web3-core';\nimport { ENSNetworkNotSyncedError, ENSUnsupportedNetworkError, RevertInstructionError } from 'web3-errors';\nimport { isSyncing } from 'web3-eth';\nimport { Contract } from 'web3-eth-contract';\nimport { getId } from 'web3-net';\nimport {\n\tAddress,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tFMT_NUMBER,\n\tPayableCallOptions,\n\tSupportedProviders,\n\tTransactionReceipt,\n\tWeb3NetAPI,\n} from 'web3-types';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { networkIds, registryAddresses } from './config.js';\nimport { Registry } from './registry.js';\nimport { Resolver } from './resolver.js';\n\n/**\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\n* For using ENS package, first install Web3 package using: `npm i web3` or `yarn add web3` based on your package manager, after that ENS features can be used as mentioned in following snippet.\n* ```ts\n* \n* import { Web3 } from 'web3';\n* \n* const web3 = new Web3('https://127.0.0.1:4545');\n* \n* console.log(await web3.eth.ens.getAddress('ethereum.eth'))\n* ```\n* For using individual package install `web3-eth-ens` packages using: `npm i web3-eth-ens` or `yarn add web3-eth-ens`. This is more efficient approach for building lightweight applications.\n*\n* ```ts\n*import { ENS } from 'web3-eth-ens';\n*\n* const ens = new ENS(undefined,'https://127.0.0.1:4545');\n*\n* console.log(await ens.getAddress('vitalik.eth'));\n* ```\n*/\nexport class ENS extends Web3Context<EthExecutionAPI & Web3NetAPI> {\n\t/**\n\t * The registryAddress property can be used to define a custom registry address when you are connected to an unknown chain. It defaults to the main registry address.\n\t */\n\tpublic registryAddress: string;\n\tprivate readonly _registry: Registry;\n\tprivate readonly _resolver: Resolver;\n\tprivate _detectedAddress?: string;\n\tprivate _lastSyncCheck?: number;\n\n\t/**\n\t * Use to create an instance of ENS\n\t * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\n\t * @param provider - (Optional) The provider to use for the ENS instance\n\t * @example\n\t * ```ts\n\t * const ens = new ENS(\n\t * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n\t * \t\"http://localhost:8545\"\n\t * );\n\t *\n\t * console.log( ens.defaultChain);\n\t * > mainnet\n\t * ```\n\t */\n\tpublic constructor(\n\t\tregistryAddr?: string,\n\t\tprovider?:\n\t\t\t| SupportedProviders<EthExecutionAPI & Web3NetAPI>\n\t\t\t| Web3ContextObject<EthExecutionAPI & Web3NetAPI>\n\t\t\t| string,\n\t) {\n\t\tsuper(provider ?? '');\n\t\tthis.registryAddress = registryAddr ?? registryAddresses.main; // will default to main registry address\n\t\tthis._registry = new Registry(this.getContextObject(), registryAddr);\n\t\tthis._resolver = new Resolver(this._registry);\n\t}\n\n\t/**\n\t * Returns the Resolver by the given address\n\t * @param name - The name of the ENS domain\n\t * @returns - An contract instance of the resolver\n\t *\n\t * @example\n\t * ```ts\n\t * const resolver = await ens.getResolver('resolver');\n\t *\n\t * console.log(resolver.options.address);\n\t * > '0x1234567890123456789012345678901234567890'\n\t * ```\n\t */\n\tpublic async getResolver(name: string): Promise<Contract<typeof PublicResolverAbi>> {\n\t\treturn this._registry.getResolver(name);\n\t}\n\n\t/**\n\t * Returns true if the record exists\n\t * @param name - The ENS name\n\t * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\n\t * @example\n\t * ```ts\n\t * const exists = await web3.eth.ens.recordExists('ethereum.eth');\n\t * ```\n\t */\n\tpublic async recordExists(name: string): Promise<unknown> {\n\t\treturn this._registry.recordExists(name);\n\t}\n\n\t/**\n\t * Returns the caching TTL (time-to-live) of an ENS name.\n\t * @param name - The ENS name\n\t * @returns - Returns the caching TTL (time-to-live) of a name.\n\t * @example\n\t * ```ts\n\t * const owner = await web3.eth.ens.getTTL('ethereum.eth');\n\t * ```\n\t */\n\tpublic async getTTL(name: string): Promise<unknown> {\n\t\treturn this._registry.getTTL(name);\n\t}\n\n\t/**\n\t * Returns the owner by the given name and current configured or detected Registry\n\t * @param name - The ENS name\n\t * @returns - Returns the address of the owner of the name.\n\t * @example\n\t * ```ts\n\t * const owner = await web3.eth.ens.getOwner('ethereum.eth');\n\t * ```\n\t */\n\tpublic async getOwner(name: string): Promise<unknown> {\n\t\treturn this._registry.getOwner(name);\n\t}\n\n\t/**\n\t * Resolves an ENS name to an Ethereum address.\n\t * @param ENSName - The ENS name to resolve\n\t * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\n\t * @returns - The Ethereum address of the given name\n\t * ```ts\n\t * const address = await web3.eth.ens.getAddress('ethereum.eth');\n\t * console.log(address);\n\t * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\n\t * ```\n\t */\n\tpublic async getAddress(ENSName: string, coinType = 60) {\n\t\treturn this._resolver.getAddress(ENSName, coinType);\n\t}\n\n\t/**\n\t * ERC-634 - Returns the text content stored in the resolver for the specified key.\n\t * @param ENSName - The ENS name to resolve\n\t * @param key - The key to resolve https://github.com/ethereum/ercs/blob/master/ERCS/erc-634.md#global-keys\n\t * @returns - The value content stored in the resolver for the specified key\n\t */\n\tpublic async getText(ENSName: string, key: string): Promise<string> {\n\t\treturn this._resolver.getText(ENSName, key);\n\t}\n\n\n\t/**\n\t * Resolves the name of an ENS node.\n\t * @param ENSName - The node to resolve\n\t * @returns - The name\n\t */\n\tpublic async getName(ENSName: string): Promise<string> {\n\t\treturn this._resolver.getName(ENSName);\n\t}\n\n\t/**\n\t * Returns the X and Y coordinates of the curve point for the public key.\n\t * @param ENSName - The ENS name\n\t * @returns - The X and Y coordinates of the curve point for the public key\n\t * @example\n\t * ```ts\n\t * const key = await web3.eth.ens.getPubkey('ethereum.eth');\n\t * console.log(key);\n\t * > {\n\t * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t * }\n\t * ```\n\t */\n\tpublic async getPubkey(ENSName: string) {\n\t\treturn this._resolver.getPubkey(ENSName);\n\t}\n\n\t/**\n\t * Returns the content hash object associated with an ENS node.\n\t * @param ENSName - The ENS name\n\t * @returns - The content hash object associated with an ENS node\n\t * @example\n\t * ```ts\n\t * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\n\t * console.log(hash);\n\t * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\n\t * ```\n\t */\n\tpublic async getContenthash(ENSName: string) {\n\t\treturn this._resolver.getContenthash(ENSName);\n\t}\n\n\t/**\n\t * Checks if the current used network is synced and looks for ENS support there.\n\t * Throws an error if not.\n\t * @returns - The address of the ENS registry if the network has been detected successfully\n\t * @example\n\t * ```ts\n\t * console.log(await web3.eth.ens.checkNetwork());\n\t * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n\t * ```\n\t */\n\tpublic async checkNetwork() {\n\t\tconst now = Date.now() / 1000;\n\t\tif (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n\t\t\tconst syncInfo = await isSyncing(this);\n\n\t\t\tif (!(typeof syncInfo === 'boolean' && !syncInfo)) {\n\t\t\t\tthrow new ENSNetworkNotSyncedError();\n\t\t\t}\n\n\t\t\tthis._lastSyncCheck = now;\n\t\t}\n\n\t\tif (this._detectedAddress) {\n\t\t\treturn this._detectedAddress;\n\t\t}\n\t\tconst networkType = await getId(this, {\n\t\t\t...DEFAULT_RETURN_FORMAT,\n\t\t\tnumber: FMT_NUMBER.HEX,\n\t\t}); // get the network from provider\n\t\tconst addr = registryAddresses[networkIds[networkType]];\n\n\t\tif (typeof addr === 'undefined') {\n\t\t\tthrow new ENSUnsupportedNetworkError(networkType);\n\t\t}\n\n\t\tthis._detectedAddress = addr;\n\t\treturn this._detectedAddress;\n\t}\n\n\t/**\n\t * Returns true if the related Resolver does support the given signature or interfaceId.\n\t * @param ENSName - The ENS name\n\t * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\n\t * @returns - `true` if the related Resolver does support the given signature or interfaceId.\n\t * @example\n\t * ```ts\n\t * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\n\t * console.log(supports);\n\t * > true\n\t * ```\n\t */\n\tpublic async supportsInterface(ENSName: string, interfaceId: string) {\n\t\treturn this._resolver.supportsInterface(ENSName, interfaceId);\n\t}\n\n\t/**\n\t * @returns - Returns all events that can be emitted by the ENS registry.\n\t */\n\tpublic get events() {\n\t\treturn this._registry.events;\n\t}\n\n\t/**\n\t * Sets the address of an ENS name in his resolver.\n\t * @param name - The ENS name\n\t * @param address - The address to set\n\t * @param txConfig - (Optional) The transaction config\n\t * @returns - The transaction receipt\n\t * ```ts\n\t * const receipt = await ens.setAddress('web3js.eth','0xe2597eb05cf9a87eb1309e86750c903ec38e527e');\n\t *```\n\t */\n\t public async setAddress(\n\t\tname: string,\n\t\taddress: Address,\n\t\ttxConfig: PayableCallOptions\n\t): Promise<TransactionReceipt | RevertInstructionError> {\n\t\treturn this._resolver.setAddress(name, address, txConfig);\n\t}\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,aAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AAEA,MAAAG,UAAA,GAAAH,OAAA;AACA,MAAAI,YAAA,GAAAJ,OAAA;AAWA,MAAAK,WAAA,GAAAL,OAAA;AACA,MAAAM,aAAA,GAAAN,OAAA;AACA,MAAAO,aAAA,GAAAP,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAaQ,GAAI,SAAQT,WAAA,CAAAU,WAAyC;EAUjE;;;;;;;;;;;;;;;EAeAC,YACCC,YAAqB,EACrBC,QAGS;IAET,KAAK,CAACA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,EAAE,CAAC;IACrB,IAAI,CAACC,eAAe,GAAGF,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAIN,WAAA,CAAAS,iBAAiB,CAACC,IAAI,CAAC,CAAC;IAC/D,IAAI,CAACC,SAAS,GAAG,IAAIV,aAAA,CAAAW,QAAQ,CAAC,IAAI,CAACC,gBAAgB,EAAE,EAAEP,YAAY,CAAC;IACpE,IAAI,CAACQ,SAAS,GAAG,IAAIZ,aAAA,CAAAa,QAAQ,CAAC,IAAI,CAACJ,SAAS,CAAC;EAC9C;EAEA;;;;;;;;;;;;;EAaaK,WAAWA,CAACC,IAAY;;MACpC,OAAO,IAAI,CAACN,SAAS,CAACK,WAAW,CAACC,IAAI,CAAC;IACxC,CAAC;;EAED;;;;;;;;;EASaC,YAAYA,CAACD,IAAY;;MACrC,OAAO,IAAI,CAACN,SAAS,CAACO,YAAY,CAACD,IAAI,CAAC;IACzC,CAAC;;EAED;;;;;;;;;EASaE,MAAMA,CAACF,IAAY;;MAC/B,OAAO,IAAI,CAACN,SAAS,CAACQ,MAAM,CAACF,IAAI,CAAC;IACnC,CAAC;;EAED;;;;;;;;;EASaG,QAAQA,CAACH,IAAY;;MACjC,OAAO,IAAI,CAACN,SAAS,CAACS,QAAQ,CAACH,IAAI,CAAC;IACrC,CAAC;;EAED;;;;;;;;;;;EAWaI,UAAUA,CAACC,OAAe,EAAe;IAAA,IAAbC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;;MACrD,OAAO,IAAI,CAACV,SAAS,CAACO,UAAU,CAACC,OAAO,EAAEC,QAAQ,CAAC;IACpD,CAAC;;EAED;;;;;;EAMaI,OAAOA,CAACL,OAAe,EAAEM,GAAW;;MAChD,OAAO,IAAI,CAACd,SAAS,CAACa,OAAO,CAACL,OAAO,EAAEM,GAAG,CAAC;IAC5C,CAAC;;EAGD;;;;;EAKaC,OAAOA,CAACP,OAAe;;MACnC,OAAO,IAAI,CAACR,SAAS,CAACe,OAAO,CAACP,OAAO,CAAC;IACvC,CAAC;;EAED;;;;;;;;;;;;;;;;EAgBaQ,SAASA,CAACR,OAAe;;MACrC,OAAO,IAAI,CAACR,SAAS,CAACgB,SAAS,CAACR,OAAO,CAAC;IACzC,CAAC;;EAED;;;;;;;;;;;EAWaS,cAAcA,CAACT,OAAe;;MAC1C,OAAO,IAAI,CAACR,SAAS,CAACiB,cAAc,CAACT,OAAO,CAAC;IAC9C,CAAC;;EAED;;;;;;;;;;EAUaU,YAAYA,CAAA;;MACxB,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,EAAE,GAAG,IAAI;MAC7B,IAAI,CAAC,IAAI,CAACE,cAAc,IAAIF,GAAG,GAAG,IAAI,CAACE,cAAc,GAAG,IAAI,EAAE;QAC7D,MAAMC,QAAQ,GAAG,MAAM,IAAAvC,UAAA,CAAAwC,SAAS,EAAC,IAAI,CAAC;QAEtC,IAAI,EAAE,OAAOD,QAAQ,KAAK,SAAS,IAAI,CAACA,QAAQ,CAAC,EAAE;UAClD,MAAM,IAAIxC,aAAA,CAAA0C,wBAAwB,EAAE;;QAGrC,IAAI,CAACH,cAAc,GAAGF,GAAG;;MAG1B,IAAI,IAAI,CAACM,gBAAgB,EAAE;QAC1B,OAAO,IAAI,CAACA,gBAAgB;;MAE7B,MAAMC,WAAW,GAAG,MAAM,IAAA1C,UAAA,CAAA2C,KAAK,EAAC,IAAI,EAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAChC5C,YAAA,CAAA6C,qBAAqB;QACxBC,MAAM,EAAE9C,YAAA,CAAA+C,UAAU,CAACC;MAAG,GACrB,CAAC,CAAC;MACJ,MAAMC,IAAI,GAAGhD,WAAA,CAAAS,iBAAiB,CAACT,WAAA,CAAAiD,UAAU,CAACT,WAAW,CAAC,CAAC;MAEvD,IAAI,OAAOQ,IAAI,KAAK,WAAW,EAAE;QAChC,MAAM,IAAIpD,aAAA,CAAAsD,0BAA0B,CAACV,WAAW,CAAC;;MAGlD,IAAI,CAACD,gBAAgB,GAAGS,IAAI;MAC5B,OAAO,IAAI,CAACT,gBAAgB;IAC7B,CAAC;;EAED;;;;;;;;;;;;EAYaY,iBAAiBA,CAAC7B,OAAe,EAAE8B,WAAmB;;MAClE,OAAO,IAAI,CAACtC,SAAS,CAACqC,iBAAiB,CAAC7B,OAAO,EAAE8B,WAAW,CAAC;IAC9D,CAAC;;EAED;;;EAGA,IAAWC,MAAMA,CAAA;IAChB,OAAO,IAAI,CAAC1C,SAAS,CAAC0C,MAAM;EAC7B;EAEA;;;;;;;;;;EAUcC,UAAUA,CACvBrC,IAAY,EACZsC,OAAgB,EAChBC,QAA4B;;MAE5B,OAAO,IAAI,CAAC1C,SAAS,CAACwC,UAAU,CAACrC,IAAI,EAAEsC,OAAO,EAAEC,QAAQ,CAAC;IAC1D,CAAC;;;AAlPFC,OAAA,CAAAtD,GAAA,GAAAA,GAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}