{"ast":null,"code":"import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../../rendering/renderers/types.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\nimport { Filter } from '../../Filter.mjs';\nimport { BlurFilterPass } from './BlurFilterPass.mjs';\n\"use strict\";\nclass BlurFilter extends Filter {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"BlurFilter constructor params are now options object. See params: { strength, quality, resolution, kernelSize }\");\n      options = {\n        strength: options\n      };\n      if (args[1]) options.quality = args[1];\n      if (args[2]) options.resolution = args[2];\n      if (args[3]) options.kernelSize = args[3];\n    }\n    options = {\n      ...BlurFilterPass.defaultOptions,\n      ...options\n    };\n    const {\n      strength,\n      quality,\n      ...rest\n    } = options;\n    super({\n      ...rest,\n      compatibleRenderers: RendererType.BOTH,\n      resources: {}\n    });\n    this._repeatEdgePixels = false;\n    this.blurXFilter = new BlurFilterPass({\n      horizontal: false,\n      ...options\n    });\n    this.blurYFilter = new BlurFilterPass({\n      horizontal: true,\n      ...options\n    });\n    this.quality = quality;\n    this.blur = strength;\n    this.repeatEdgePixels = false;\n  }\n  /**\n   * Applies the filter.\n   * @param filterManager - The manager.\n   * @param input - The input target.\n   * @param output - The output target.\n   * @param clearMode - How to clear\n   */\n  apply(filterManager, input, output, clearMode) {\n    const xStrength = Math.abs(this.blurXFilter.strength);\n    const yStrength = Math.abs(this.blurYFilter.strength);\n    if (xStrength && yStrength) {\n      const tempTexture = TexturePool.getSameSizeTexture(input);\n      this.blurXFilter.apply(filterManager, input, tempTexture, true);\n      this.blurYFilter.apply(filterManager, tempTexture, output, clearMode);\n      TexturePool.returnTexture(tempTexture);\n    } else if (yStrength) {\n      this.blurYFilter.apply(filterManager, input, output, clearMode);\n    } else {\n      this.blurXFilter.apply(filterManager, input, output, clearMode);\n    }\n  }\n  updatePadding() {\n    if (this._repeatEdgePixels) {\n      this.padding = 0;\n    } else {\n      this.padding = Math.max(Math.abs(this.blurXFilter.blur), Math.abs(this.blurYFilter.blur)) * 2;\n    }\n  }\n  /**\n   * Sets the strength of both the blurX and blurY properties simultaneously\n   * @default 2\n   */\n  get blur() {\n    return this.blurXFilter.blur;\n  }\n  set blur(value) {\n    this.blurXFilter.blur = this.blurYFilter.blur = value;\n    this.updatePadding();\n  }\n  /**\n   * Sets the number of passes for blur. More passes means higher quality bluring.\n   * @default 1\n   */\n  get quality() {\n    return this.blurXFilter.quality;\n  }\n  set quality(value) {\n    this.blurXFilter.quality = this.blurYFilter.quality = value;\n  }\n  /**\n   * Sets the strength of the blurX property\n   * @default 2\n   */\n  get blurX() {\n    return this.blurXFilter.blur;\n  }\n  set blurX(value) {\n    this.blurXFilter.blur = value;\n    this.updatePadding();\n  }\n  /**\n   * Sets the strength of the blurY property\n   * @default 2\n   */\n  get blurY() {\n    return this.blurYFilter.blur;\n  }\n  set blurY(value) {\n    this.blurYFilter.blur = value;\n    this.updatePadding();\n  }\n  /**\n   * Sets the blendmode of the filter\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this.blurYFilter.blendMode;\n  }\n  set blendMode(value) {\n    this.blurYFilter.blendMode = value;\n  }\n  /**\n   * If set to true the edge of the target will be clamped\n   * @default false\n   */\n  get repeatEdgePixels() {\n    return this._repeatEdgePixels;\n  }\n  set repeatEdgePixels(value) {\n    this._repeatEdgePixels = value;\n    this.updatePadding();\n  }\n}\n/** Default blur filter options */\nBlurFilter.defaultOptions = {\n  /** The strength of the blur filter. */\n  strength: 8,\n  /** The quality of the blur filter. */\n  quality: 4,\n  /** The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15. */\n  kernelSize: 5\n};\nexport { BlurFilter };","map":{"version":3,"names":["BlurFilter","Filter","constructor","args","options","deprecation","v8_0_0","strength","quality","resolution","kernelSize","BlurFilterPass","defaultOptions","rest","compatibleRenderers","RendererType","BOTH","resources","_repeatEdgePixels","blurXFilter","horizontal","blurYFilter","blur","repeatEdgePixels","apply","filterManager","input","output","clearMode","xStrength","Math","abs","yStrength","tempTexture","TexturePool","getSameSizeTexture","returnTexture","updatePadding","padding","max","value","blurX","blurY","blendMode"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/filters/defaults/blur/BlurFilter.ts"],"sourcesContent":["import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../../rendering/renderers/types';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Filter } from '../../Filter';\nimport { BlurFilterPass } from './BlurFilterPass';\n\nimport type { RenderSurface } from '../../../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { BLEND_MODES } from '../../../rendering/renderers/shared/state/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { FilterOptions } from '../../Filter';\nimport type { FilterSystem } from '../../FilterSystem';\n\n/**\n * Options for BlurFilter\n * @memberof filters\n */\nexport interface BlurFilterOptions extends FilterOptions\n{\n    /**\n     * The strength of the blur filter.\n     * @default 8\n     */\n    strength?: number;\n    /**\n     * The quality of the blur filter.\n     * @default 4\n     */\n    quality?: number;\n    /**\n     * The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     * @default 5\n     */\n    kernelSize?: number;\n}\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n * @memberof filters\n */\nexport class BlurFilter extends Filter\n{\n    /** Default blur filter options */\n    public static defaultOptions: Partial<BlurFilterOptions> = {\n        /** The strength of the blur filter. */\n        strength: 8,\n        /** The quality of the blur filter. */\n        quality: 4,\n        /** The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15. */\n        kernelSize: 5,\n    };\n\n    /** The horizontal blur filter */\n    public blurXFilter: BlurFilterPass;\n    /** The vertical blur filter */\n    public blurYFilter: BlurFilterPass;\n\n    private _repeatEdgePixels = false;\n\n    /**\n     * @param {filters.BlurFilterOptions} options - The options of the blur filter.\n     */\n    constructor(options?: BlurFilterOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(strength?: number, quality?: number, resolution?: number, kernelSize?: number);\n    constructor(...args: [BlurFilterOptions?] | [number?, number?, number?, number?])\n    {\n        let options = args[0] ?? {};\n\n        // if options is a number)\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BlurFilter constructor params are now options object. See params: { strength, quality, resolution, kernelSize }');\n            // #endif\n\n            options = { strength: options };\n\n            if (args[1])options.quality = args[1];\n            if (args[2])options.resolution = args[2];\n            if (args[3])options.kernelSize = args[3];\n        }\n\n        options = { ...BlurFilterPass.defaultOptions, ...options };\n\n        const { strength, quality, ...rest } = options;\n\n        super({\n            ...rest,\n            compatibleRenderers: RendererType.BOTH,\n            resources: {}\n        });\n\n        this.blurXFilter = new BlurFilterPass({ horizontal: false, ...options });\n        this.blurYFilter = new BlurFilterPass({ horizontal: true, ...options });\n\n        this.quality = quality;\n        this.blur = strength;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     * @param filterManager - The manager.\n     * @param input - The input target.\n     * @param output - The output target.\n     * @param clearMode - How to clear\n     */\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: RenderSurface,\n        clearMode: boolean\n    ): void\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const tempTexture = TexturePool.getSameSizeTexture(input);\n\n            this.blurXFilter.apply(filterManager, input, tempTexture, true);\n            this.blurYFilter.apply(filterManager, tempTexture, output, clearMode);\n\n            TexturePool.returnTexture(tempTexture);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clearMode);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clearMode);\n        }\n    }\n\n    protected updatePadding(): void\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.blur), Math.abs(this.blurYFilter.blur)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quality bluring.\n     * @default 1\n     */\n    get quality(): number\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value: number)\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     * @default \"normal\"\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     * @default false\n     */\n    get repeatEdgePixels(): boolean\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value: boolean)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}