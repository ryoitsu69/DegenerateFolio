{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nimport { calcVotes, getImageHash, getStatus } from './util.js';\nfunction votesPrev(api, referendumId) {\n  return api.query.democracy['votersFor'](referendumId).pipe(switchMap(votersFor => combineLatest([of(votersFor), votersFor.length ? api.query.democracy['voteOf'].multi(votersFor.map(accountId => [referendumId, accountId])) : of([]), api.derive.balances.votingBalances(votersFor)])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({\n    accountId,\n    balance: balances[index].votingBalance || api.registry.createType('Balance'),\n    isDelegating: false,\n    vote: votes[index] || api.registry.createType('Vote')\n  }))));\n}\nfunction extractVotes(mapped, referendumId) {\n  return mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) =>\n  // FIXME We are ignoring split votes\n  votes.reduce((result, [, vote]) => {\n    if (vote.isStandard) {\n      result.push(objectSpread({\n        accountId,\n        isDelegating: false\n      }, vote.asStandard));\n    }\n    return result;\n  }, result), []);\n}\nfunction votesCurr(api, referendumId) {\n  return api.query.democracy.votingOf.entries().pipe(map(allVoting => {\n    const mapped = allVoting.map(([{\n      args: [accountId]\n    }, voting]) => [accountId, voting]);\n    const votes = extractVotes(mapped, referendumId);\n    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]);\n    // add delegations\n    delegations.forEach(([accountId, {\n      balance,\n      conviction,\n      target\n    }]) => {\n      // Are we delegating to a delegator\n      const toDelegator = delegations.find(([accountId]) => accountId.eq(target));\n      const to = votes.find(({\n        accountId\n      }) => accountId.eq(toDelegator ? toDelegator[0] : target));\n      // this delegation has a target\n      if (to) {\n        votes.push({\n          accountId,\n          balance,\n          isDelegating: true,\n          vote: api.registry.createType('Vote', {\n            aye: to.vote.isAye,\n            conviction\n          })\n        });\n      }\n    });\n    return votes;\n  }));\n}\nexport function _referendumVotes(instanceId, api) {\n  return memo(instanceId, referendum => combineLatest([api.derive.democracy.sqrtElectorate(), isFunction(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));\n}\nexport function _referendumsVotes(instanceId, api) {\n  return memo(instanceId, referendums => referendums.length ? combineLatest(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : of([]));\n}\nexport function _referendumInfo(instanceId, api) {\n  return memo(instanceId, (index, info) => {\n    const status = getStatus(info);\n    return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe(map(image => ({\n      image,\n      imageHash: getImageHash(status),\n      index: api.registry.createType('ReferendumIndex', index),\n      status\n    }))) : of(null);\n  });\n}\nexport function referendumsInfo(instanceId, api) {\n  return memo(instanceId, ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap(infos => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map(infos => infos.filter(r => !!r))) : of([]));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","isFunction","objectSpread","memo","calcVotes","getImageHash","getStatus","votesPrev","api","referendumId","query","democracy","pipe","votersFor","length","multi","accountId","derive","balances","votingBalances","votes","index","balance","votingBalance","registry","createType","isDelegating","vote","extractVotes","mapped","filter","voting","isDirect","asDirect","idx","eq","directVotes","reduce","result","isStandard","push","asStandard","votesCurr","votingOf","entries","allVoting","args","delegations","asDelegating","forEach","conviction","target","toDelegator","find","to","aye","isAye","_referendumVotes","instanceId","referendum","sqrtElectorate","_referendumsVotes","referendums","_referendumInfo","info","status","preimage","proposal","proposalHash","image","imageHash","referendumsInfo","ids","referendumInfoOf","infos","id","r"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/democracy/referendumsInfo.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { isFunction, objectSpread } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nimport { calcVotes, getImageHash, getStatus } from './util.js';\nfunction votesPrev(api, referendumId) {\n    return api.query.democracy['votersFor'](referendumId).pipe(switchMap((votersFor) => combineLatest([\n        of(votersFor),\n        votersFor.length\n            ? api.query.democracy['voteOf'].multi(votersFor.map((accountId) => [referendumId, accountId]))\n            : of([]),\n        api.derive.balances.votingBalances(votersFor)\n    ])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({\n        accountId,\n        balance: balances[index].votingBalance || api.registry.createType('Balance'),\n        isDelegating: false,\n        vote: votes[index] || api.registry.createType('Vote')\n    }))));\n}\nfunction extractVotes(mapped, referendumId) {\n    return mapped\n        .filter(([, voting]) => voting.isDirect)\n        .map(([accountId, voting]) => [\n        accountId,\n        voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))\n    ])\n        .filter(([, directVotes]) => !!directVotes.length)\n        .reduce((result, [accountId, votes]) => \n    // FIXME We are ignoring split votes\n    votes.reduce((result, [, vote]) => {\n        if (vote.isStandard) {\n            result.push(objectSpread({\n                accountId,\n                isDelegating: false\n            }, vote.asStandard));\n        }\n        return result;\n    }, result), []);\n}\nfunction votesCurr(api, referendumId) {\n    return api.query.democracy.votingOf.entries().pipe(map((allVoting) => {\n        const mapped = allVoting.map(([{ args: [accountId] }, voting]) => [accountId, voting]);\n        const votes = extractVotes(mapped, referendumId);\n        const delegations = mapped\n            .filter(([, voting]) => voting.isDelegating)\n            .map(([accountId, voting]) => [accountId, voting.asDelegating]);\n        // add delegations\n        delegations.forEach(([accountId, { balance, conviction, target }]) => {\n            // Are we delegating to a delegator\n            const toDelegator = delegations.find(([accountId]) => accountId.eq(target));\n            const to = votes.find(({ accountId }) => accountId.eq(toDelegator ? toDelegator[0] : target));\n            // this delegation has a target\n            if (to) {\n                votes.push({\n                    accountId,\n                    balance,\n                    isDelegating: true,\n                    vote: api.registry.createType('Vote', { aye: to.vote.isAye, conviction })\n                });\n            }\n        });\n        return votes;\n    }));\n}\nexport function _referendumVotes(instanceId, api) {\n    return memo(instanceId, (referendum) => combineLatest([\n        api.derive.democracy.sqrtElectorate(),\n        isFunction(api.query.democracy.votingOf)\n            ? votesCurr(api, referendum.index)\n            : votesPrev(api, referendum.index)\n    ]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));\n}\nexport function _referendumsVotes(instanceId, api) {\n    return memo(instanceId, (referendums) => referendums.length\n        ? combineLatest(referendums.map((referendum) => api.derive.democracy._referendumVotes(referendum)))\n        : of([]));\n}\nexport function _referendumInfo(instanceId, api) {\n    return memo(instanceId, (index, info) => {\n        const status = getStatus(info);\n        return status\n            ? api.derive.democracy.preimage(status.proposal ||\n                status.proposalHash).pipe(map((image) => ({\n                image,\n                imageHash: getImageHash(status),\n                index: api.registry.createType('ReferendumIndex', index),\n                status\n            })))\n            : of(null);\n    });\n}\nexport function referendumsInfo(instanceId, api) {\n    return memo(instanceId, (ids) => ids.length\n        ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map((infos) => infos.filter((r) => !!r)))\n        : of([]));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}