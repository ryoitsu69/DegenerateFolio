{"ast":null,"code":"import { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { Container } from '../container/Container.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\"use strict\";\nconst _NineSliceSprite = class _NineSliceSprite extends Container {\n  /**\n   * @param {scene.NineSliceSpriteOptions|Texture} options - Options to use\n   * @param options.texture - The texture to use on the NineSliceSprite.\n   * @param options.leftWidth - Width of the left vertical bar (A)\n   * @param options.topHeight - Height of the top horizontal bar (C)\n   * @param options.rightWidth - Width of the right vertical bar (B)\n   * @param options.bottomHeight - Height of the bottom horizontal bar (D)\n   * @param options.width - Width of the NineSliceSprite,\n   * setting this will actually modify the vertices and not the UV's of this plane.\n   * @param options.height - Height of the NineSliceSprite,\n   * setting this will actually modify the vertices and not UV's of this plane.\n   */\n  constructor(options) {\n    if (options instanceof Texture) {\n      options = {\n        texture: options\n      };\n    }\n    const {\n      width,\n      height,\n      leftWidth,\n      rightWidth,\n      topHeight,\n      bottomHeight,\n      texture,\n      roundPixels,\n      ...rest\n    } = options;\n    super({\n      label: \"NineSliceSprite\",\n      ...rest\n    });\n    this._roundPixels = 0;\n    this.renderPipeId = \"nineSliceSprite\";\n    this.batched = true;\n    this._didSpriteUpdate = true;\n    this.bounds = {\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0\n    };\n    this._leftWidth = leftWidth ?? texture?.defaultBorders?.left ?? NineSliceGeometry.defaultOptions.leftWidth;\n    this._topHeight = topHeight ?? texture?.defaultBorders?.top ?? NineSliceGeometry.defaultOptions.topHeight;\n    this._rightWidth = rightWidth ?? texture?.defaultBorders?.right ?? NineSliceGeometry.defaultOptions.rightWidth;\n    this._bottomHeight = bottomHeight ?? texture?.defaultBorders?.bottom ?? NineSliceGeometry.defaultOptions.bottomHeight;\n    this.bounds.maxX = this._width = width ?? texture.width ?? NineSliceGeometry.defaultOptions.width;\n    this.bounds.maxY = this._height = height ?? texture.height ?? NineSliceGeometry.defaultOptions.height;\n    this.allowChildren = false;\n    this.texture = texture ?? _NineSliceSprite.defaultOptions.texture;\n    this.roundPixels = roundPixels ?? false;\n  }\n  /** The width of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n  get width() {\n    return this._width;\n  }\n  set width(value) {\n    this.bounds.maxX = this._width = value;\n    this.onViewUpdate();\n  }\n  /** The height of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n  get height() {\n    return this._height;\n  }\n  set height(value) {\n    this.bounds.maxY = this._height = value;\n    this.onViewUpdate();\n  }\n  /** The width of the left column (a) of the NineSliceSprite. */\n  get leftWidth() {\n    return this._leftWidth;\n  }\n  set leftWidth(value) {\n    this._leftWidth = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get topHeight() {\n    return this._topHeight;\n  }\n  set topHeight(value) {\n    this._topHeight = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get rightWidth() {\n    return this._rightWidth;\n  }\n  set rightWidth(value) {\n    this._rightWidth = value;\n    this.onViewUpdate();\n  }\n  /** The width of the right column (b) of the NineSliceSprite. */\n  get bottomHeight() {\n    return this._bottomHeight;\n  }\n  set bottomHeight(value) {\n    this._bottomHeight = value;\n    this.onViewUpdate();\n  }\n  /** The texture that the NineSliceSprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    value || (value = Texture.EMPTY);\n    const currentTexture = this._texture;\n    if (currentTexture === value) return;\n    if (currentTexture && currentTexture.dynamic) currentTexture.off(\"update\", this.onViewUpdate, this);\n    if (value.dynamic) value.on(\"update\", this.onViewUpdate, this);\n    this._texture = value;\n    this.onViewUpdate();\n  }\n  /**\n   *  Whether or not to round the x/y position of the sprite.\n   * @type {boolean}\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  set roundPixels(value) {\n    this._roundPixels = value ? 1 : 0;\n  }\n  /** The original width of the texture */\n  get originalWidth() {\n    return this._texture.width;\n  }\n  /** The original height of the texture */\n  get originalHeight() {\n    return this._texture.height;\n  }\n  onViewUpdate() {\n    this._didChangeId += 1 << 12;\n    this._didSpriteUpdate = true;\n    if (this.didViewUpdate) return;\n    this.didViewUpdate = true;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.onChildViewUpdate(this);\n    }\n  }\n  /**\n   * Adds the bounds of this object to the bounds object.\n   * @param bounds - The output bounds object.\n   */\n  addBounds(bounds) {\n    const _bounds = this.bounds;\n    bounds.addFrame(_bounds.minX, _bounds.minY, _bounds.maxX, _bounds.maxY);\n  }\n  /**\n   * Checks if the object contains the given point.\n   * @param point - The point to check\n   */\n  containsPoint(point) {\n    const bounds = this.bounds;\n    if (point.x >= bounds.minX && point.x <= bounds.maxX) {\n      if (point.y >= bounds.minY && point.y <= bounds.maxY) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Destroys this sprite renderable and optionally its texture.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n   * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n   */\n  destroy(options) {\n    super.destroy(options);\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      this._texture.destroy(destroyTextureSource);\n    }\n    this._texture = null;\n    this.bounds = null;\n  }\n};\n/** The default options, used to override the initial values of any options passed in the constructor. */\n_NineSliceSprite.defaultOptions = {\n  /** @default Texture.EMPTY */\n  texture: Texture.EMPTY\n};\nlet NineSliceSprite = _NineSliceSprite;\nclass NineSlicePlane extends NineSliceSprite {\n  constructor(...args) {\n    let options = args[0];\n    if (options instanceof Texture) {\n      deprecation(v8_0_0, \"NineSlicePlane now uses the options object {texture, leftWidth, rightWidth, topHeight, bottomHeight}\");\n      options = {\n        texture: options,\n        leftWidth: args[1],\n        topHeight: args[2],\n        rightWidth: args[3],\n        bottomHeight: args[4]\n      };\n    }\n    deprecation(v8_0_0, \"NineSlicePlane is deprecated. Use NineSliceSprite instead.\");\n    super(options);\n  }\n}\nexport { NineSlicePlane, NineSliceSprite };","map":{"version":3,"names":["_NineSliceSprite","Container","constructor","options","Texture","texture","width","height","leftWidth","rightWidth","topHeight","bottomHeight","roundPixels","rest","label","_roundPixels","renderPipeId","batched","_didSpriteUpdate","bounds","minX","minY","maxX","maxY","_leftWidth","defaultBorders","left","NineSliceGeometry","defaultOptions","_topHeight","top","_rightWidth","right","_bottomHeight","bottom","_width","_height","allowChildren","value","onViewUpdate","_texture","EMPTY","currentTexture","dynamic","off","on","originalWidth","originalHeight","_didChangeId","didViewUpdate","renderGroup","parentRenderGroup","onChildViewUpdate","addBounds","_bounds","addFrame","containsPoint","point","x","y","destroy","destroyTexture","destroyTextureSource","textureSource","NineSliceSprite","NineSlicePlane","args","deprecation","v8_0_0"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSprite.ts"],"sourcesContent":["import { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { Container } from '../container/Container';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { Point } from '../../maths/point/Point';\nimport type { View } from '../../rendering/renderers/shared/view/View';\nimport type { Bounds, BoundsData } from '../container/bounds/Bounds';\nimport type { ContainerOptions } from '../container/Container';\nimport type { DestroyOptions } from '../container/destroyTypes';\n\n/**\n * Constructor options used for `NineSliceSprite` instances.\n * ```js\n * const nineSliceSprite = new NineSliceSprite({\n *    texture: Texture.from('button.png'),\n *    leftWidth: 20,\n *    topHeight: 20,\n *    rightWidth: 20,\n *    bottomHeight: 20,\n * });\n * ```\n * @see {@link scene.NineSliceSprite}\n * @memberof scene\n */\nexport interface NineSliceSpriteOptions extends ContainerOptions\n{\n    /** The texture to use on the NineSliceSprite. */\n    texture: Texture;\n    /** Width of the left vertical bar (A) */\n    leftWidth?: number;\n    /** Height of the top horizontal bar (C) */\n    topHeight?: number;\n    /** Width of the right vertical bar (B) */\n    rightWidth?: number;\n    /** Height of the bottom horizontal bar (D) */\n    bottomHeight?: number;\n    /** Width of the NineSliceSprite, setting this will actually modify the vertices and not the UV's of this plane. */\n    width?: number;\n    /** Height of the NineSliceSprite, setting this will actually modify the vertices and not UV's of this plane. */\n    height?: number;\n    /** Whether or not to round the x/y position. */\n    roundPixels?: boolean;\n}\n\n/**\n * The NineSliceSprite allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n * @example\n * import { NineSliceSprite, Texture } from 'pixi.js';\n *\n * const plane9 = new NineSliceSprite(Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n * @memberof scene\n */\nexport class NineSliceSprite extends Container implements View\n{\n    /** The default options, used to override the initial values of any options passed in the constructor. */\n    public static defaultOptions: NineSliceSpriteOptions = {\n        /** @default Texture.EMPTY */\n        texture: Texture.EMPTY,\n    };\n\n    public _roundPixels: 0 | 1 = 0;\n    public readonly renderPipeId = 'nineSliceSprite';\n    public _texture: Texture;\n\n    public batched = true;\n\n    private _leftWidth: number;\n    private _topHeight: number;\n    private _rightWidth: number;\n    private _bottomHeight: number;\n    private _width: number;\n    private _height: number;\n\n    public _didSpriteUpdate = true;\n\n    public bounds: BoundsData = { minX: 0, minY: 0, maxX: 0, maxY: 0 };\n\n    /**\n     * @param {scene.NineSliceSpriteOptions|Texture} options - Options to use\n     * @param options.texture - The texture to use on the NineSliceSprite.\n     * @param options.leftWidth - Width of the left vertical bar (A)\n     * @param options.topHeight - Height of the top horizontal bar (C)\n     * @param options.rightWidth - Width of the right vertical bar (B)\n     * @param options.bottomHeight - Height of the bottom horizontal bar (D)\n     * @param options.width - Width of the NineSliceSprite,\n     * setting this will actually modify the vertices and not the UV's of this plane.\n     * @param options.height - Height of the NineSliceSprite,\n     * setting this will actually modify the vertices and not UV's of this plane.\n     */\n    constructor(options: NineSliceSpriteOptions | Texture)\n    {\n        if ((options instanceof Texture))\n        {\n            options = { texture: options };\n        }\n\n        const {\n            width,\n            height,\n            leftWidth,\n            rightWidth,\n            topHeight,\n            bottomHeight,\n            texture,\n            roundPixels,\n            ...rest\n        } = options;\n\n        super({\n            label: 'NineSliceSprite',\n            ...rest\n        });\n\n        this._leftWidth = leftWidth ?? texture?.defaultBorders?.left ?? NineSliceGeometry.defaultOptions.leftWidth;\n        this._topHeight = topHeight ?? texture?.defaultBorders?.top ?? NineSliceGeometry.defaultOptions.topHeight;\n        this._rightWidth = rightWidth ?? texture?.defaultBorders?.right ?? NineSliceGeometry.defaultOptions.rightWidth;\n        this._bottomHeight = bottomHeight\n                            ?? texture?.defaultBorders?.bottom\n                            ?? NineSliceGeometry.defaultOptions.bottomHeight;\n        this.bounds.maxX = this._width = width ?? texture.width ?? NineSliceGeometry.defaultOptions.width;\n        this.bounds.maxY = this._height = height ?? texture.height ?? NineSliceGeometry.defaultOptions.height;\n\n        this.allowChildren = false;\n        this.texture = texture ?? NineSliceSprite.defaultOptions.texture;\n        this.roundPixels = roundPixels ?? false;\n    }\n\n    /** The width of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this.bounds.maxX = this._width = value;\n        this.onViewUpdate();\n    }\n\n    /** The height of the NineSliceSprite, setting this will actually modify the vertices and UV's of this plane. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this.bounds.maxY = this._height = value;\n        this.onViewUpdate();\n    }\n\n    /** The width of the left column (a) of the NineSliceSprite. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n\n        this.onViewUpdate();\n    }\n\n    /** The width of the right column (b) of the NineSliceSprite. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this.onViewUpdate();\n    }\n\n    /** The width of the right column (b) of the NineSliceSprite. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this.onViewUpdate();\n    }\n\n    /** The width of the right column (b) of the NineSliceSprite. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this.onViewUpdate();\n    }\n\n    /** The texture that the NineSliceSprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        value ||= Texture.EMPTY;\n\n        const currentTexture = this._texture;\n\n        if (currentTexture === value) return;\n\n        if (currentTexture && currentTexture.dynamic) currentTexture.off('update', this.onViewUpdate, this);\n        if (value.dynamic) value.on('update', this.onViewUpdate, this);\n\n        this._texture = value;\n\n        this.onViewUpdate();\n    }\n\n    /**\n     *  Whether or not to round the x/y position of the sprite.\n     * @type {boolean}\n     */\n    get roundPixels()\n    {\n        return !!this._roundPixels;\n    }\n\n    set roundPixels(value: boolean)\n    {\n        this._roundPixels = value ? 1 : 0;\n    }\n\n    /** The original width of the texture */\n    get originalWidth()\n    {\n        return this._texture.width;\n    }\n\n    /** The original height of the texture */\n    get originalHeight()\n    {\n        return this._texture.height;\n    }\n\n    public onViewUpdate()\n    {\n        // increment from the 12th bit!\n        this._didChangeId += 1 << 12;\n        this._didSpriteUpdate = true;\n\n        if (this.didViewUpdate) return;\n        this.didViewUpdate = true;\n\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            renderGroup.onChildViewUpdate(this);\n        }\n    }\n\n    /**\n     * Adds the bounds of this object to the bounds object.\n     * @param bounds - The output bounds object.\n     */\n    public addBounds(bounds: Bounds)\n    {\n        const _bounds = this.bounds;\n\n        bounds.addFrame(_bounds.minX, _bounds.minY, _bounds.maxX, _bounds.maxY);\n    }\n\n    /**\n     * Checks if the object contains the given point.\n     * @param point - The point to check\n     */\n    public containsPoint(point: Point)\n    {\n        const bounds = this.bounds;\n\n        if (point.x >= bounds.minX && point.x <= bounds.maxX)\n        {\n            if (point.y >= bounds.minY && point.y <= bounds.maxY)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the renderable as well\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the renderable as well\n     */\n    public destroy(options?: DestroyOptions): void\n    {\n        super.destroy(options);\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            this._texture.destroy(destroyTextureSource);\n        }\n\n        this._texture = null;\n        (this.bounds as null) = null;\n    }\n}\n\n/**\n * Please use the `NineSliceSprite` class instead.\n * @deprecated since 8.0.0\n * @memberof scene\n */\nexport class NineSlicePlane extends NineSliceSprite\n{\n    constructor(options: NineSliceSpriteOptions | Texture);\n    /** @deprecated since 8.0.0 */\n    constructor(texture: Texture, leftWidth: number, topHeight: number, rightWidth: number, bottomHeight: number);\n    constructor(...args: [NineSliceSpriteOptions | Texture] | [Texture, number, number, number, number])\n    {\n        let options = args[0];\n\n        if (options instanceof Texture)\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'NineSlicePlane now uses the options object {texture, leftWidth, rightWidth, topHeight, bottomHeight}');\n            // #endif\n\n            options = {\n                texture: options,\n                leftWidth: args[1],\n                topHeight: args[2],\n                rightWidth: args[3],\n                bottomHeight: args[4],\n            };\n        }\n\n        // #if _DEBUG\n        deprecation(v8_0_0, 'NineSlicePlane is deprecated. Use NineSliceSprite instead.');\n        // #endif\n\n        super(options);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}