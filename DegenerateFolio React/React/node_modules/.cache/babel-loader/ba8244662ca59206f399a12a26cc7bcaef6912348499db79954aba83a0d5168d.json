{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar cors = require('cors');\nvar app = express();\napp.use(cors());\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n\n\n // Created by inigo quilez - iq/2013\n // https://www.youtube.com/c/InigoQuilez\n // https://iquilezles.org\n\n // Instead of using a pont, circle, line or any mathematical shape for traping the orbit\n // of fc(z), one can use any arbitrary shape. For example, a NyanCat :)\n //\n // I invented this technique more than 10 years ago (can have a look to those experiments\n // here https://iquilezles.org/articles/ftrapsbitmap).\n\n vec4 getNyanCatColor( vec2 p, float time )\n {\n     p = clamp(p,0.0,1.0);\n     p.x = p.x*40.0/256.0;\n     p.y = 0.5 + 1.2*(0.5-p.y);\n     p = clamp(p,0.0,1.0);\n     float fr = floor( mod( 20.0*time, 6.0 ) );\n     p.x += fr*40.0/256.0;\n     return texture( iChannel0, p );\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n     float time = max( iTime-5.5, 0.0 );\n\n     // zoom\n     p = vec2(0.5,-0.05)  + p*0.75 * pow( 0.9, 20.0*(0.5+0.5*cos(0.25*time)) );\n\n     vec4 col = vec4(0.0);\n     vec3 s = mix( vec3( 0.2,0.2, 1.0 ), vec3( 0.5,-0.2,0.5), 0.5+0.5*sin(0.5*time) );\n\n     // iterate Jc\n     vec2 c = vec2(-0.76, 0.15);\n     float f = 0.0;\n     vec2 z = p;\n     for( int i=0; i<100; i++ )\n     {\n         if( (dot(z,z)>4.0) || (col.w>0.1) ) break;\n\n         // fc(z) = z² + c\n         z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n\n         col = getNyanCatColor( s.xy + s.z*z, time );\n         f += 1.0;\n     }\n\n     vec3 bg = 0.5*vec3(1.0,0.5,0.5) * sqrt(f/100.0);\n\n     col.xyz = mix( bg, col.xyz, col.w );\n\n     col *= step( 2.0, iTime );\n     col += texture( iChannel0, vec2(0.01,0.2) ).x * (1.0-step( 5.5, iTime ));\n\n     fragColor = vec4( col.xyz,1.0);\n }\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader,\n    textures: [{\n      url: 'https://i.pinimg.com/originals/70/e4/99/70e4996995d61b098838e542f2a3ce44.png'\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","cors","require","app","express","use","root","createRoot","document","getElementById","fragmentShader","render","children","fs","textures","url","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nvar cors = require('cors')\n\nvar app = express()\napp.use(cors())\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n\n\n // Created by inigo quilez - iq/2013\n // https://www.youtube.com/c/InigoQuilez\n // https://iquilezles.org\n\n // Instead of using a pont, circle, line or any mathematical shape for traping the orbit\n // of fc(z), one can use any arbitrary shape. For example, a NyanCat :)\n //\n // I invented this technique more than 10 years ago (can have a look to those experiments\n // here https://iquilezles.org/articles/ftrapsbitmap).\n\n vec4 getNyanCatColor( vec2 p, float time )\n {\n     p = clamp(p,0.0,1.0);\n     p.x = p.x*40.0/256.0;\n     p.y = 0.5 + 1.2*(0.5-p.y);\n     p = clamp(p,0.0,1.0);\n     float fr = floor( mod( 20.0*time, 6.0 ) );\n     p.x += fr*40.0/256.0;\n     return texture( iChannel0, p );\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord )\n {\n     vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n     float time = max( iTime-5.5, 0.0 );\n\n     // zoom\n     p = vec2(0.5,-0.05)  + p*0.75 * pow( 0.9, 20.0*(0.5+0.5*cos(0.25*time)) );\n\n     vec4 col = vec4(0.0);\n     vec3 s = mix( vec3( 0.2,0.2, 1.0 ), vec3( 0.5,-0.2,0.5), 0.5+0.5*sin(0.5*time) );\n\n     // iterate Jc\n     vec2 c = vec2(-0.76, 0.15);\n     float f = 0.0;\n     vec2 z = p;\n     for( int i=0; i<100; i++ )\n     {\n         if( (dot(z,z)>4.0) || (col.w>0.1) ) break;\n\n         // fc(z) = z² + c\n         z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n\n         col = getNyanCatColor( s.xy + s.z*z, time );\n         f += 1.0;\n     }\n\n     vec3 bg = 0.5*vec3(1.0,0.5,0.5) * sqrt(f/100.0);\n\n     col.xyz = mix( bg, col.xyz, col.w );\n\n     col *= step( 2.0, iTime );\n     col += texture( iChannel0, vec2(0.01,0.2) ).x * (1.0-step( 5.5, iTime ));\n\n     fragColor = vec4( col.xyz,1.0);\n }\n `;\n\nroot.render(\n    <>\n    <ShadertoyReact fs={fragmentShader} textures={[\n        { url: 'https://i.pinimg.com/originals/70/e4/99/70e4996995d61b098838e542f2a3ce44.png' },\n    ]} />\n<TodoApp />\n<footer>©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAIC,GAAG,GAAGC,OAAO,CAAC,CAAC;AACnBD,GAAG,CAACE,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AACf,MAAMK,IAAI,GAAGf,QAAQ,CAACgB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEFJ,IAAI,CAACK,MAAM,eACPb,OAAA,CAAAE,SAAA;EAAAY,QAAA,gBACAd,OAAA,CAACN,cAAc;IAACqB,EAAE,EAAEH,cAAe;IAACI,QAAQ,EAAE,CAC1C;MAAEC,GAAG,EAAE;IAA+E,CAAC;EACzF;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACTrB,OAAA,CAACL,OAAO;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXrB,OAAA;IAAAc,QAAA,EAAQ;EAA+C;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAzB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}