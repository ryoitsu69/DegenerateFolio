{"ast":null,"code":"import { Texture } from \"@pixi/core\";\nimport { Mesh, MeshGeometry, MeshMaterial } from \"@pixi/mesh\";\nclass SimpleMesh extends Mesh {\n  /**\n   * @param texture - The texture to use\n   * @param {Float32Array} [vertices] - if you want to specify the vertices\n   * @param {Float32Array} [uvs] - if you want to specify the uvs\n   * @param {Uint16Array} [indices] - if you want to specify the indices\n   * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n   */\n  constructor(texture = Texture.EMPTY, vertices, uvs, indices, drawMode) {\n    const geometry = new MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer(\"aVertexPosition\").static = !1;\n    const meshMaterial = new MeshMaterial(texture);\n    super(geometry, meshMaterial, null, drawMode), this.autoUpdate = !0;\n  }\n  /**\n   * Collection of vertices data.\n   * @type {Float32Array}\n   */\n  get vertices() {\n    return this.geometry.getBuffer(\"aVertexPosition\").data;\n  }\n  set vertices(value) {\n    this.geometry.getBuffer(\"aVertexPosition\").data = value;\n  }\n  _render(renderer) {\n    this.autoUpdate && this.geometry.getBuffer(\"aVertexPosition\").update(), super._render(renderer);\n  }\n}\nexport { SimpleMesh };","map":{"version":3,"names":["SimpleMesh","Mesh","constructor","texture","Texture","EMPTY","vertices","uvs","indices","drawMode","geometry","MeshGeometry","getBuffer","static","meshMaterial","MeshMaterial","autoUpdate","data","value","_render","renderer","update"],"sources":["/home/ryoitsu/node_modules/@pixi/mesh-extras/src/SimpleMesh.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\n\nimport type { DRAW_MODES, IArrayBuffer, ITypedArray, Renderer } from '@pixi/core';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n * @memberof PIXI\n */\nexport class SimpleMesh extends Mesh\n{\n    /** Upload vertices buffer each frame. */\n    public autoUpdate: boolean;\n\n    /**\n     * @param texture - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(\n        texture: Texture = Texture.EMPTY,\n        vertices?: IArrayBuffer,\n        uvs?: IArrayBuffer,\n        indices?: IArrayBuffer,\n        drawMode?: DRAW_MODES\n    )\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n"],"mappings":";;AAUO,MAAMA,UAAA,SAAmBC,IAAA,CAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWIC,YACIC,OAAA,GAAmBC,OAAA,CAAQC,KAAA,EAC3BC,QAAA,EACAC,GAAA,EACAC,OAAA,EACAC,QAAA,EAEJ;IACI,MAAMC,QAAA,GAAW,IAAIC,YAAA,CAAaL,QAAA,EAAUC,GAAA,EAAKC,OAAO;IAE/CE,QAAA,CAAAE,SAAA,CAAU,iBAAiB,EAAEC,MAAA,GAAS;IAEzC,MAAAC,YAAA,GAAe,IAAIC,YAAA,CAAaZ,OAAO;IAEvC,MAAAO,QAAA,EAAUI,YAAA,EAAc,MAAML,QAAQ,GAE5C,KAAKO,UAAA,GAAa;EACtB;EAAA;AAAA;AAAA;AAAA;EAMA,IAAIV,SAAA,EACJ;IACI,OAAO,KAAKI,QAAA,CAASE,SAAA,CAAU,iBAAiB,EAAEK,IAAA;EACtD;EACA,IAAIX,SAASY,KAAA,EACb;IACI,KAAKR,QAAA,CAASE,SAAA,CAAU,iBAAiB,EAAEK,IAAA,GAAOC,KAAA;EACtD;EAEAC,QAAQC,QAAA,EACR;IACQ,KAAKJ,UAAA,IAEL,KAAKN,QAAA,CAASE,SAAA,CAAU,iBAAiB,EAAES,MAAA,IAG/C,MAAMF,OAAA,CAAQC,QAAQ;EAC1B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}