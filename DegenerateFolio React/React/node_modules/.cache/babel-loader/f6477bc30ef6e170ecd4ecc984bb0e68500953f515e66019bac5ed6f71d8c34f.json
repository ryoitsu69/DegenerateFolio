{"ast":null,"code":"import { Point, ObservablePoint, Color, BLEND_MODES, Texture, settings, utils, Rectangle } from \"@pixi/core\";\nimport { Container, Bounds } from \"@pixi/display\";\nconst tempPoint = new Point(),\n  indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\nclass Sprite extends Container {\n  /** @param texture - The texture for this sprite. */\n  constructor(texture) {\n    super(), this._anchor = new ObservablePoint(this._onAnchorUpdate, this, texture ? texture.defaultAnchor.x : 0, texture ? texture.defaultAnchor.y : 0), this._texture = null, this._width = 0, this._height = 0, this._tintColor = new Color(16777215), this._tintRGB = null, this.tint = 16777215, this.blendMode = BLEND_MODES.NORMAL, this._cachedTint = 16777215, this.uvs = null, this.texture = texture || Texture.EMPTY, this.vertexData = new Float32Array(8), this.vertexTrimmedData = null, this._transformID = -1, this._textureID = -1, this._transformTrimmedID = -1, this._textureTrimmedID = -1, this.indices = indices, this.pluginName = \"batch\", this.isSprite = !0, this._roundPixels = settings.ROUND_PIXELS;\n  }\n  /** When the texture is updated, this event will fire to update the scale and frame. */\n  _onTextureUpdate() {\n    this._textureID = -1, this._textureTrimmedID = -1, this._cachedTint = 16777215, this._width && (this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width), this._height && (this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height);\n  }\n  /** Called when the anchor position updates. */\n  _onAnchorUpdate() {\n    this._transformID = -1, this._transformTrimmedID = -1;\n  }\n  /** Calculates worldTransform * vertices, store it in vertexData. */\n  calculateVertices() {\n    const texture = this._texture;\n    if (this._transformID === this.transform._worldID && this._textureID === texture._updateID) return;\n    this._textureID !== texture._updateID && (this.uvs = this._texture._uvs.uvsFloat32), this._transformID = this.transform._worldID, this._textureID = texture._updateID;\n    const wt = this.transform.worldTransform,\n      a = wt.a,\n      b = wt.b,\n      c = wt.c,\n      d = wt.d,\n      tx = wt.tx,\n      ty = wt.ty,\n      vertexData = this.vertexData,\n      trim = texture.trim,\n      orig = texture.orig,\n      anchor = this._anchor;\n    let w0 = 0,\n      w1 = 0,\n      h0 = 0,\n      h1 = 0;\n    if (trim ? (w1 = trim.x - anchor._x * orig.width, w0 = w1 + trim.width, h1 = trim.y - anchor._y * orig.height, h0 = h1 + trim.height) : (w1 = -anchor._x * orig.width, w0 = w1 + orig.width, h1 = -anchor._y * orig.height, h0 = h1 + orig.height), vertexData[0] = a * w1 + c * h1 + tx, vertexData[1] = d * h1 + b * w1 + ty, vertexData[2] = a * w0 + c * h1 + tx, vertexData[3] = d * h1 + b * w0 + ty, vertexData[4] = a * w0 + c * h0 + tx, vertexData[5] = d * h0 + b * w0 + ty, vertexData[6] = a * w1 + c * h0 + tx, vertexData[7] = d * h0 + b * w1 + ty, this._roundPixels) {\n      const resolution = settings.RESOLUTION;\n      for (let i = 0; i < vertexData.length; ++i) vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n    }\n  }\n  /**\n   * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n   *\n   * This is used to ensure that the true width and height of a trimmed texture is respected.\n   */\n  calculateTrimmedVertices() {\n    if (!this.vertexTrimmedData) this.vertexTrimmedData = new Float32Array(8);else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) return;\n    this._transformTrimmedID = this.transform._worldID, this._textureTrimmedID = this._texture._updateID;\n    const texture = this._texture,\n      vertexData = this.vertexTrimmedData,\n      orig = texture.orig,\n      anchor = this._anchor,\n      wt = this.transform.worldTransform,\n      a = wt.a,\n      b = wt.b,\n      c = wt.c,\n      d = wt.d,\n      tx = wt.tx,\n      ty = wt.ty,\n      w1 = -anchor._x * orig.width,\n      w0 = w1 + orig.width,\n      h1 = -anchor._y * orig.height,\n      h0 = h1 + orig.height;\n    if (vertexData[0] = a * w1 + c * h1 + tx, vertexData[1] = d * h1 + b * w1 + ty, vertexData[2] = a * w0 + c * h1 + tx, vertexData[3] = d * h1 + b * w0 + ty, vertexData[4] = a * w0 + c * h0 + tx, vertexData[5] = d * h0 + b * w0 + ty, vertexData[6] = a * w1 + c * h0 + tx, vertexData[7] = d * h0 + b * w1 + ty, this._roundPixels) {\n      const resolution = settings.RESOLUTION;\n      for (let i = 0; i < vertexData.length; ++i) vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n    }\n  }\n  /**\n   *\n   * Renders the object using the WebGL renderer\n   * @param renderer - The webgl renderer to use.\n   */\n  _render(renderer) {\n    this.calculateVertices(), renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]), renderer.plugins[this.pluginName].render(this);\n  }\n  /** Updates the bounds of the sprite. */\n  _calculateBounds() {\n    const trim = this._texture.trim,\n      orig = this._texture.orig;\n    !trim || trim.width === orig.width && trim.height === orig.height ? (this.calculateVertices(), this._bounds.addQuad(this.vertexData)) : (this.calculateTrimmedVertices(), this._bounds.addQuad(this.vertexTrimmedData));\n  }\n  /**\n   * Gets the local bounds of the sprite object.\n   * @param rect - Optional output rectangle.\n   * @returns The bounds.\n   */\n  getLocalBounds(rect) {\n    return this.children.length === 0 ? (this._localBounds || (this._localBounds = new Bounds()), this._localBounds.minX = this._texture.orig.width * -this._anchor._x, this._localBounds.minY = this._texture.orig.height * -this._anchor._y, this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x), this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y), rect || (this._localBoundsRect || (this._localBoundsRect = new Rectangle()), rect = this._localBoundsRect), this._localBounds.getRectangle(rect)) : super.getLocalBounds.call(this, rect);\n  }\n  /**\n   * Tests if a point is inside this sprite\n   * @param point - the point to test\n   * @returns The result of the test\n   */\n  containsPoint(point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    const width = this._texture.orig.width,\n      height = this._texture.orig.height,\n      x1 = -width * this.anchor.x;\n    let y1 = 0;\n    return tempPoint.x >= x1 && tempPoint.x < x1 + width && (y1 = -height * this.anchor.y, tempPoint.y >= y1 && tempPoint.y < y1 + height);\n  }\n  /**\n   * Destroys this sprite and optionally its texture and children.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n  destroy(options) {\n    if (super.destroy(options), this._texture.off(\"update\", this._onTextureUpdate, this), this._anchor = null, typeof options == \"boolean\" ? options : options?.texture) {\n      const destroyBaseTexture = typeof options == \"boolean\" ? options : options?.baseTexture;\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n    this._texture = null;\n  }\n  // some helper functions..\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n   *     - Source to create texture from\n   * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @returns The newly created sprite\n   */\n  static from(source, options) {\n    const texture = source instanceof Texture ? source : Texture.from(source, options);\n    return new Sprite(texture);\n  }\n  /**\n   * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n   *\n   * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n   * The main disadvantage is movement of objects may appear less smooth.\n   *\n   * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n   * @default false\n   */\n  set roundPixels(value) {\n    this._roundPixels !== value && (this._transformID = -1, this._transformTrimmedID = -1), this._roundPixels = value;\n  }\n  get roundPixels() {\n    return this._roundPixels;\n  }\n  /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get width() {\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  }\n  set width(value) {\n    const s = utils.sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width, this._width = value;\n  }\n  /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n  get height() {\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  }\n  set height(value) {\n    const s = utils.sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height, this._height = value;\n  }\n  /**\n   * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n   * and passed to the constructor.\n   *\n   * The default is `(0,0)`, this means the sprite's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n   *\n   * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n   * @example\n   * import { Sprite } from 'pixi.js';\n   *\n   * const sprite = new Sprite(Texture.WHITE);\n   * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n   */\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    this._anchor.copyFrom(value);\n  }\n  /**\n   * The tint applied to the sprite. This is a hex value.\n   *\n   * A value of 0xFFFFFF will remove any tint effect.\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return this._tintColor.value;\n  }\n  set tint(value) {\n    this._tintColor.setValue(value), this._tintRGB = this._tintColor.toLittleEndianNumber();\n  }\n  /**\n   * Get the tint as a RGB integer.\n   * @ignore\n   */\n  get tintValue() {\n    return this._tintColor.toNumber();\n  }\n  /** The texture that the sprite is using. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    this._texture !== value && (this._texture && this._texture.off(\"update\", this._onTextureUpdate, this), this._texture = value || Texture.EMPTY, this._cachedTint = 16777215, this._textureID = -1, this._textureTrimmedID = -1, value && (value.baseTexture.valid ? this._onTextureUpdate() : value.once(\"update\", this._onTextureUpdate, this)));\n  }\n}\nexport { Sprite };","map":{"version":3,"names":["tempPoint","Point","indices","Uint16Array","Sprite","Container","constructor","texture","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_width","_height","_tintColor","Color","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","_cachedTint","uvs","Texture","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","pluginName","isSprite","_roundPixels","settings","ROUND_PIXELS","_onTextureUpdate","scale","utils","sign","orig","width","height","calculateVertices","transform","_worldID","_updateID","_uvs","uvsFloat32","wt","worldTransform","a","b","c","d","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","resolution","RESOLUTION","i","length","Math","round","calculateTrimmedVertices","_render","renderer","batch","setObjectRenderer","plugins","render","_calculateBounds","_bounds","addQuad","getLocalBounds","rect","children","_localBounds","Bounds","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","call","containsPoint","point","applyInverse","x1","y1","destroy","options","off","destroyBaseTexture","baseTexture","from","source","roundPixels","value","abs","s","copyFrom","setValue","toLittleEndianNumber","tintValue","toNumber","valid","once"],"sources":["/home/ryoitsu/node_modules/@pixi/sprite/src/Sprite.ts"],"sourcesContent":["import { BLEND_MODES, Color, ObservablePoint, Point, Rectangle, settings, Texture, utils } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\n\nimport type { ColorSource, IBaseTextureOptions, IPointData, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource | Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n *\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * import { Assets, Sprite } from 'pixi.js';\n *\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n * ```\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    private _tintColor: Color;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tintColor = new Color(0xFFFFFF);\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = utils.sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = utils.sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round(vertexData[i] * resolution) / resolution;\n            }\n        }\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     * @param rect - Optional output rectangle.\n     * @returns The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            if (!this._localBounds)\n            {\n                this._localBounds = new Bounds();\n            }\n\n            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     * @param point - the point to test\n     * @returns The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options?.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.Texture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source\n     *     - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n            this._transformTrimmedID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * import { Sprite } from 'pixi.js';\n     *\n     * const sprite = new Sprite(Texture.WHITE);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     * @default 0xFFFFFF\n     */\n    get tint(): ColorSource\n    {\n        return this._tintColor.value;\n    }\n\n    set tint(value: ColorSource)\n    {\n        this._tintColor.setValue(value);\n        this._tintRGB = this._tintColor.toLittleEndianNumber();\n    }\n\n    /**\n     * Get the tint as a RGB integer.\n     * @ignore\n     */\n    get tintValue(): number\n    {\n        return this._tintColor.toNumber();\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"],"mappings":";;AAMA,MAAMA,SAAA,GAAY,IAAIC,KAAA,CAAM;EACtBC,OAAA,GAAU,IAAIC,WAAA,CAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AA4B3C,MAAMC,MAAA,SAAeC,SAAA,CAC5B;EAAA;EAsGIC,YAAYC,OAAA,EACZ;IACU,SAEN,KAAKC,OAAA,GAAU,IAAIC,eAAA,CACf,KAAKC,eAAA,EACL,MACCH,OAAA,GAAUA,OAAA,CAAQI,aAAA,CAAcC,CAAA,GAAI,GACpCL,OAAA,GAAUA,OAAA,CAAQI,aAAA,CAAcE,CAAA,GAAI,IAGzC,KAAKC,QAAA,GAAW,MAEhB,KAAKC,MAAA,GAAS,GACd,KAAKC,OAAA,GAAU,GACf,KAAKC,UAAA,GAAa,IAAIC,KAAA,CAAM,QAAQ,GACpC,KAAKC,QAAA,GAAW,MAEhB,KAAKC,IAAA,GAAO,UACZ,KAAKC,SAAA,GAAYC,WAAA,CAAYC,MAAA,EAC7B,KAAKC,WAAA,GAAc,UACnB,KAAKC,GAAA,GAAM,MAGX,KAAKlB,OAAA,GAAUA,OAAA,IAAWmB,OAAA,CAAQC,KAAA,EAClC,KAAKC,UAAA,GAAa,IAAIC,YAAA,CAAa,CAAC,GACpC,KAAKC,iBAAA,GAAoB,MAEzB,KAAKC,YAAA,GAAe,IACpB,KAAKC,UAAA,GAAa,IAElB,KAAKC,mBAAA,GAAsB,IAC3B,KAAKC,iBAAA,GAAoB,IAIzB,KAAKhC,OAAA,GAAUA,OAAA,EAEf,KAAKiC,UAAA,GAAa,SAMlB,KAAKC,QAAA,GAAW,IAChB,KAAKC,YAAA,GAAeC,QAAA,CAASC,YAAA;EACjC;EAAA;EAGUC,iBAAA,EACV;IACI,KAAKR,UAAA,GAAa,IAClB,KAAKE,iBAAA,GAAoB,IACzB,KAAKV,WAAA,GAAc,UAGf,KAAKT,MAAA,KAEL,KAAK0B,KAAA,CAAM7B,CAAA,GAAI8B,KAAA,CAAMC,IAAA,CAAK,KAAKF,KAAA,CAAM7B,CAAC,IAAI,KAAKG,MAAA,GAAS,KAAKD,QAAA,CAAS8B,IAAA,CAAKC,KAAA,GAG3E,KAAK7B,OAAA,KAEL,KAAKyB,KAAA,CAAM5B,CAAA,GAAI6B,KAAA,CAAMC,IAAA,CAAK,KAAKF,KAAA,CAAM5B,CAAC,IAAI,KAAKG,OAAA,GAAU,KAAKF,QAAA,CAAS8B,IAAA,CAAKE,MAAA;EAEpF;EAAA;EAGQpC,gBAAA,EACR;IACS,KAAAqB,YAAA,GAAe,IACpB,KAAKE,mBAAA,GAAsB;EAC/B;EAAA;EAGOc,kBAAA,EACP;IACI,MAAMxC,OAAA,GAAU,KAAKO,QAAA;IAErB,IAAI,KAAKiB,YAAA,KAAiB,KAAKiB,SAAA,CAAUC,QAAA,IAAY,KAAKjB,UAAA,KAAezB,OAAA,CAAQ2C,SAAA,EAE7E;IAIA,KAAKlB,UAAA,KAAezB,OAAA,CAAQ2C,SAAA,KAE5B,KAAKzB,GAAA,GAAM,KAAKX,QAAA,CAASqC,IAAA,CAAKC,UAAA,GAGlC,KAAKrB,YAAA,GAAe,KAAKiB,SAAA,CAAUC,QAAA,EACnC,KAAKjB,UAAA,GAAazB,OAAA,CAAQ2C,SAAA;IAI1B,MAAMG,EAAA,GAAK,KAAKL,SAAA,CAAUM,cAAA;MACpBC,CAAA,GAAIF,EAAA,CAAGE,CAAA;MACPC,CAAA,GAAIH,EAAA,CAAGG,CAAA;MACPC,CAAA,GAAIJ,EAAA,CAAGI,CAAA;MACPC,CAAA,GAAIL,EAAA,CAAGK,CAAA;MACPC,EAAA,GAAKN,EAAA,CAAGM,EAAA;MACRC,EAAA,GAAKP,EAAA,CAAGO,EAAA;MACRhC,UAAA,GAAa,KAAKA,UAAA;MAClBiC,IAAA,GAAOtD,OAAA,CAAQsD,IAAA;MACfjB,IAAA,GAAOrC,OAAA,CAAQqC,IAAA;MACfkB,MAAA,GAAS,KAAKtD,OAAA;IAEpB,IAAIuD,EAAA,GAAK;MACLC,EAAA,GAAK;MACLC,EAAA,GAAK;MACLC,EAAA,GAAK;IAEL,IAAAL,IAAA,IAIAG,EAAA,GAAKH,IAAA,CAAKjD,CAAA,GAAKkD,MAAA,CAAOK,EAAA,GAAKvB,IAAA,CAAKC,KAAA,EAChCkB,EAAA,GAAKC,EAAA,GAAKH,IAAA,CAAKhB,KAAA,EAEfqB,EAAA,GAAKL,IAAA,CAAKhD,CAAA,GAAKiD,MAAA,CAAOM,EAAA,GAAKxB,IAAA,CAAKE,MAAA,EAChCmB,EAAA,GAAKC,EAAA,GAAKL,IAAA,CAAKf,MAAA,KAIfkB,EAAA,GAAK,CAACF,MAAA,CAAOK,EAAA,GAAKvB,IAAA,CAAKC,KAAA,EACvBkB,EAAA,GAAKC,EAAA,GAAKpB,IAAA,CAAKC,KAAA,EAEfqB,EAAA,GAAK,CAACJ,MAAA,CAAOM,EAAA,GAAKxB,IAAA,CAAKE,MAAA,EACvBmB,EAAA,GAAKC,EAAA,GAAKtB,IAAA,CAAKE,MAAA,GAInBlB,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIS,EAAA,GAAOP,CAAA,GAAIS,EAAA,GAAMP,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIQ,EAAA,GAAOV,CAAA,GAAIQ,EAAA,GAAMJ,EAAA,EAGtChC,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIQ,EAAA,GAAON,CAAA,GAAIS,EAAA,GAAMP,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIQ,EAAA,GAAOV,CAAA,GAAIO,EAAA,GAAMH,EAAA,EAGtChC,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIQ,EAAA,GAAON,CAAA,GAAIQ,EAAA,GAAMN,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIO,EAAA,GAAOT,CAAA,GAAIO,EAAA,GAAMH,EAAA,EAGtChC,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIS,EAAA,GAAOP,CAAA,GAAIQ,EAAA,GAAMN,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIO,EAAA,GAAOT,CAAA,GAAIQ,EAAA,GAAMJ,EAAA,EAElC,KAAKvB,YAAA,EACT;MACI,MAAMgC,UAAA,GAAa/B,QAAA,CAASgC,UAAA;MAE5B,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAI3C,UAAA,CAAW4C,MAAA,EAAQ,EAAED,CAAA,EAE1B3C,UAAA,CAAA2C,CAAC,IAAIE,IAAA,CAAKC,KAAA,CAAM9C,UAAA,CAAW2C,CAAC,IAAIF,UAAU,IAAIA,UAAA;IAEjE;EACJ;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOM,yBAAA,EACP;IACI,IAAI,CAAC,KAAK7C,iBAAA,EAED,KAAAA,iBAAA,GAAoB,IAAID,YAAA,CAAa,CAAC,WAEtC,KAAKI,mBAAA,KAAwB,KAAKe,SAAA,CAAUC,QAAA,IAAY,KAAKf,iBAAA,KAAsB,KAAKpB,QAAA,CAASoC,SAAA,EAEtG;IAGJ,KAAKjB,mBAAA,GAAsB,KAAKe,SAAA,CAAUC,QAAA,EAC1C,KAAKf,iBAAA,GAAoB,KAAKpB,QAAA,CAASoC,SAAA;IAGjC,MAAA3C,OAAA,GAAU,KAAKO,QAAA;MACfc,UAAA,GAAa,KAAKE,iBAAA;MAClBc,IAAA,GAAOrC,OAAA,CAAQqC,IAAA;MACfkB,MAAA,GAAS,KAAKtD,OAAA;MAGd6C,EAAA,GAAK,KAAKL,SAAA,CAAUM,cAAA;MACpBC,CAAA,GAAIF,EAAA,CAAGE,CAAA;MACPC,CAAA,GAAIH,EAAA,CAAGG,CAAA;MACPC,CAAA,GAAIJ,EAAA,CAAGI,CAAA;MACPC,CAAA,GAAIL,EAAA,CAAGK,CAAA;MACPC,EAAA,GAAKN,EAAA,CAAGM,EAAA;MACRC,EAAA,GAAKP,EAAA,CAAGO,EAAA;MAERI,EAAA,GAAK,CAACF,MAAA,CAAOK,EAAA,GAAKvB,IAAA,CAAKC,KAAA;MACvBkB,EAAA,GAAKC,EAAA,GAAKpB,IAAA,CAAKC,KAAA;MAEfqB,EAAA,GAAK,CAACJ,MAAA,CAAOM,EAAA,GAAKxB,IAAA,CAAKE,MAAA;MACvBmB,EAAA,GAAKC,EAAA,GAAKtB,IAAA,CAAKE,MAAA;IAkBrB,IAfAlB,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIS,EAAA,GAAOP,CAAA,GAAIS,EAAA,GAAMP,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIQ,EAAA,GAAOV,CAAA,GAAIQ,EAAA,GAAMJ,EAAA,EAGtChC,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIQ,EAAA,GAAON,CAAA,GAAIS,EAAA,GAAMP,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIQ,EAAA,GAAOV,CAAA,GAAIO,EAAA,GAAMH,EAAA,EAGtChC,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIQ,EAAA,GAAON,CAAA,GAAIQ,EAAA,GAAMN,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIO,EAAA,GAAOT,CAAA,GAAIO,EAAA,GAAMH,EAAA,EAGtChC,UAAA,CAAW,CAAC,IAAK2B,CAAA,GAAIS,EAAA,GAAOP,CAAA,GAAIQ,EAAA,GAAMN,EAAA,EACtC/B,UAAA,CAAW,CAAC,IAAK8B,CAAA,GAAIO,EAAA,GAAOT,CAAA,GAAIQ,EAAA,GAAMJ,EAAA,EAElC,KAAKvB,YAAA,EACT;MACI,MAAMgC,UAAA,GAAa/B,QAAA,CAASgC,UAAA;MAE5B,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAI3C,UAAA,CAAW4C,MAAA,EAAQ,EAAED,CAAA,EAE1B3C,UAAA,CAAA2C,CAAC,IAAIE,IAAA,CAAKC,KAAA,CAAM9C,UAAA,CAAW2C,CAAC,IAAIF,UAAU,IAAIA,UAAA;IAEjE;EACJ;EAAA;AAAA;AAAA;AAAA;AAAA;EAOUO,QAAQC,QAAA,EAClB;IACI,KAAK9B,iBAAA,IAEL8B,QAAA,CAASC,KAAA,CAAMC,iBAAA,CAAkBF,QAAA,CAASG,OAAA,CAAQ,KAAK7C,UAAU,CAAC,GAClE0C,QAAA,CAASG,OAAA,CAAQ,KAAK7C,UAAU,EAAE8C,MAAA,CAAO,IAAI;EACjD;EAAA;EAGUC,iBAAA,EACV;IACI,MAAMrB,IAAA,GAAO,KAAK/C,QAAA,CAAS+C,IAAA;MACrBjB,IAAA,GAAO,KAAK9B,QAAA,CAAS8B,IAAA;IAGvB,CAACiB,IAAA,IAASA,IAAA,CAAKhB,KAAA,KAAUD,IAAA,CAAKC,KAAA,IAASgB,IAAA,CAAKf,MAAA,KAAWF,IAAA,CAAKE,MAAA,IAG5D,KAAKC,iBAAA,CAAkB,GACvB,KAAKoC,OAAA,CAAQC,OAAA,CAAQ,KAAKxD,UAAU,MAKpC,KAAK+C,wBAAA,CAAyB,GAC9B,KAAKQ,OAAA,CAAQC,OAAA,CAAQ,KAAKtD,iBAAiB;EAEnD;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOuD,eAAeC,IAAA,EACtB;IAEI,OAAI,KAAKC,QAAA,CAASf,MAAA,KAAW,KAEpB,KAAKgB,YAAA,KAEN,KAAKA,YAAA,GAAe,IAAIC,MAAA,CAG5B,SAAKD,YAAA,CAAaE,IAAA,GAAO,KAAK5E,QAAA,CAAS8B,IAAA,CAAKC,KAAA,GAAQ,CAAC,KAAKrC,OAAA,CAAQ2D,EAAA,EAClE,KAAKqB,YAAA,CAAaG,IAAA,GAAO,KAAK7E,QAAA,CAAS8B,IAAA,CAAKE,MAAA,GAAS,CAAC,KAAKtC,OAAA,CAAQ4D,EAAA,EACnE,KAAKoB,YAAA,CAAaI,IAAA,GAAO,KAAK9E,QAAA,CAAS8B,IAAA,CAAKC,KAAA,IAAS,IAAI,KAAKrC,OAAA,CAAQ2D,EAAA,GACtE,KAAKqB,YAAA,CAAaK,IAAA,GAAO,KAAK/E,QAAA,CAAS8B,IAAA,CAAKE,MAAA,IAAU,IAAI,KAAKtC,OAAA,CAAQ4D,EAAA,GAElEkB,IAAA,KAEI,KAAKQ,gBAAA,KAEN,KAAKA,gBAAA,GAAmB,IAAIC,SAAA,KAGhCT,IAAA,GAAO,KAAKQ,gBAAA,GAGT,KAAKN,YAAA,CAAaQ,YAAA,CAAaV,IAAI,KAGvC,MAAMD,cAAA,CAAeY,IAAA,CAAK,MAAMX,IAAI;EAC/C;EAAA;AAAA;AAAA;AAAA;AAAA;EAOOY,cAAcC,KAAA,EACrB;IACS,KAAA7C,cAAA,CAAe8C,YAAA,CAAaD,KAAA,EAAOnG,SAAS;IAEjD,MAAM6C,KAAA,GAAQ,KAAK/B,QAAA,CAAS8B,IAAA,CAAKC,KAAA;MAC3BC,MAAA,GAAS,KAAKhC,QAAA,CAAS8B,IAAA,CAAKE,MAAA;MAC5BuD,EAAA,GAAK,CAACxD,KAAA,GAAQ,KAAKiB,MAAA,CAAOlD,CAAA;IAChC,IAAI0F,EAAA,GAAK;IAET,OAAItG,SAAA,CAAUY,CAAA,IAAKyF,EAAA,IAAMrG,SAAA,CAAUY,CAAA,GAAIyF,EAAA,GAAKxD,KAAA,KAExCyD,EAAA,GAAK,CAACxD,MAAA,GAAS,KAAKgB,MAAA,CAAOjD,CAAA,EAEvBb,SAAA,CAAUa,CAAA,IAAKyF,EAAA,IAAMtG,SAAA,CAAUa,CAAA,GAAIyF,EAAA,GAAKxD,MAAA;EAOpD;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWOyD,QAAQC,OAAA,EACf;IACI,UAAMD,OAAA,CAAQC,OAAO,GAErB,KAAK1F,QAAA,CAAS2F,GAAA,CAAI,UAAU,KAAKjE,gBAAA,EAAkB,IAAI,GAEvD,KAAKhC,OAAA,GAAU,MAEQ,OAAOgG,OAAA,IAAY,YAAYA,OAAA,GAAUA,OAAA,EAASjG,OAAA,EAGzE;MACI,MAAMmG,kBAAA,GAAqB,OAAOF,OAAA,IAAY,YAAYA,OAAA,GAAUA,OAAA,EAASG,WAAA;MAE7E,KAAK7F,QAAA,CAASyF,OAAA,CAAQ,CAAC,CAACG,kBAAkB;IAC9C;IAEA,KAAK5F,QAAA,GAAW;EACpB;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,OAAO8F,KAAKC,MAAA,EAAsBL,OAAA,EAClC;IACI,MAAMjG,OAAA,GAAWsG,MAAA,YAAkBnF,OAAA,GAC7BmF,MAAA,GACAnF,OAAA,CAAQkF,IAAA,CAAKC,MAAA,EAAQL,OAAO;IAE3B,WAAIpG,MAAA,CAAOG,OAAO;EAC7B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,IAAIuG,YAAYC,KAAA,EAChB;IACQ,KAAK1E,YAAA,KAAiB0E,KAAA,KAEtB,KAAKhF,YAAA,GAAe,IACpB,KAAKE,mBAAA,GAAsB,KAE/B,KAAKI,YAAA,GAAe0E,KAAA;EACxB;EAEA,IAAID,YAAA,EACJ;IACI,OAAO,KAAKzE,YAAA;EAChB;EAAA;EAGA,IAAIQ,MAAA,EACJ;IACW,OAAA4B,IAAA,CAAKuC,GAAA,CAAI,KAAKvE,KAAA,CAAM7B,CAAC,IAAI,KAAKE,QAAA,CAAS8B,IAAA,CAAKC,KAAA;EACvD;EAEA,IAAIA,MAAMkE,KAAA,EACV;IACI,MAAME,CAAA,GAAIvE,KAAA,CAAMC,IAAA,CAAK,KAAKF,KAAA,CAAM7B,CAAC,KAAK;IAEjC,KAAA6B,KAAA,CAAM7B,CAAA,GAAIqG,CAAA,GAAIF,KAAA,GAAQ,KAAKjG,QAAA,CAAS8B,IAAA,CAAKC,KAAA,EAC9C,KAAK9B,MAAA,GAASgG,KAAA;EAClB;EAAA;EAGA,IAAIjE,OAAA,EACJ;IACW,OAAA2B,IAAA,CAAKuC,GAAA,CAAI,KAAKvE,KAAA,CAAM5B,CAAC,IAAI,KAAKC,QAAA,CAAS8B,IAAA,CAAKE,MAAA;EACvD;EAEA,IAAIA,OAAOiE,KAAA,EACX;IACI,MAAME,CAAA,GAAIvE,KAAA,CAAMC,IAAA,CAAK,KAAKF,KAAA,CAAM5B,CAAC,KAAK;IAEjC,KAAA4B,KAAA,CAAM5B,CAAA,GAAIoG,CAAA,GAAIF,KAAA,GAAQ,KAAKjG,QAAA,CAAS8B,IAAA,CAAKE,MAAA,EAC9C,KAAK9B,OAAA,GAAU+F,KAAA;EACnB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAmBA,IAAIjD,OAAA,EACJ;IACI,OAAO,KAAKtD,OAAA;EAChB;EAEA,IAAIsD,OAAOiD,KAAA,EACX;IACS,KAAAvG,OAAA,CAAQ0G,QAAA,CAASH,KAAK;EAC/B;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,IAAI3F,KAAA,EACJ;IACI,OAAO,KAAKH,UAAA,CAAW8F,KAAA;EAC3B;EAEA,IAAI3F,KAAK2F,KAAA,EACT;IACS,KAAA9F,UAAA,CAAWkG,QAAA,CAASJ,KAAK,GAC9B,KAAK5F,QAAA,GAAW,KAAKF,UAAA,CAAWmG,oBAAA;EACpC;EAAA;AAAA;AAAA;AAAA;EAMA,IAAIC,UAAA,EACJ;IACW,YAAKpG,UAAA,CAAWqG,QAAA;EAC3B;EAAA;EAGA,IAAI/G,QAAA,EACJ;IACI,OAAO,KAAKO,QAAA;EAChB;EAEA,IAAIP,QAAQwG,KAAA,EACZ;IACQ,KAAKjG,QAAA,KAAaiG,KAAA,KAKlB,KAAKjG,QAAA,IAEL,KAAKA,QAAA,CAAS2F,GAAA,CAAI,UAAU,KAAKjE,gBAAA,EAAkB,IAAI,GAG3D,KAAK1B,QAAA,GAAWiG,KAAA,IAASrF,OAAA,CAAQC,KAAA,EACjC,KAAKH,WAAA,GAAc,UAEnB,KAAKQ,UAAA,GAAa,IAClB,KAAKE,iBAAA,GAAoB,IAErB6E,KAAA,KAGIA,KAAA,CAAMJ,WAAA,CAAYY,KAAA,GAElB,KAAK/E,gBAAA,KAILuE,KAAA,CAAMS,IAAA,CAAK,UAAU,KAAKhF,gBAAA,EAAkB,IAAI;EAG5D;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}