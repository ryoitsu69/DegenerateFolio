{"ast":null,"code":"import { ShaderStage } from '../../../shared/shader/const.mjs';\n\"use strict\";\nfunction generateGpuLayoutGroups({\n  groups\n}) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = [];\n    }\n    if (group.isUniform) {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n        buffer: {\n          type: \"uniform\"\n        }\n      });\n    } else if (group.type === \"sampler\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        sampler: {\n          type: \"filtering\"\n        }\n      });\n    } else if (group.type === \"texture_2d\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        texture: {\n          sampleType: \"float\",\n          viewDimension: \"2d\",\n          multisampled: false\n        }\n      });\n    }\n  }\n  return layout;\n}\nexport { generateGpuLayoutGroups };","map":{"version":3,"names":["generateGpuLayoutGroups","groups","layout","i","length","group","isUniform","push","binding","visibility","ShaderStage","VERTEX","FRAGMENT","buffer","type","sampler","texture","sampleType","viewDimension","multisampled"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.ts"],"sourcesContent":["import { ShaderStage } from '../../../shared/shader/const';\n\nimport type { ProgramPipelineLayoutDescription } from '../GpuProgram';\nimport type { StructsAndGroups } from './extractStructAndGroups';\n\nexport function generateGpuLayoutGroups({ groups }: StructsAndGroups): ProgramPipelineLayoutDescription\n{\n    const layout: ProgramPipelineLayoutDescription = [];\n\n    for (let i = 0; i < groups.length; i++)\n    {\n        const group = groups[i];\n\n        if (!layout[group.group])\n        {\n            layout[group.group] = [];\n        }\n\n        if (group.isUniform)\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n                buffer: {\n                    type: 'uniform'\n                }\n            });\n        }\n        else if (group.type === 'sampler')\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.FRAGMENT,\n                sampler: {\n                    type: 'filtering'\n                }\n            });\n        }\n        else if (group.type === 'texture_2d')\n        {\n            layout[group.group].push({\n                binding: group.binding,\n                visibility: ShaderStage.FRAGMENT,\n                texture: {\n                    sampleType: 'float',\n                    viewDimension: '2d',\n                    multisampled: false,\n                }\n            });\n        }\n    }\n\n    return layout;\n}\n"],"mappings":";;AAKgB,SAAAA,wBAAwB;EAAEC;AAAA,CAC1C;EACI,MAAMC,MAAA,GAA2C,EAAC;EAElD,SAASC,CAAI,MAAGA,CAAI,GAAAF,MAAA,CAAOG,MAAA,EAAQD,CACnC;IACU,MAAAE,KAAA,GAAQJ,MAAA,CAAOE,CAAC;IAEtB,IAAI,CAACD,MAAA,CAAOG,KAAM,CAAAA,KAAK,CACvB;MACWH,MAAA,CAAAG,KAAA,CAAMA,KAAK,IAAI,EAAC;IAAA;IAG3B,IAAIA,KAAA,CAAMC,SACV;MACWJ,MAAA,CAAAG,KAAA,CAAMA,KAAK,EAAEE,IAAK;QACrBC,OAAA,EAASH,KAAM,CAAAG,OAAA;QACfC,UAAA,EAAYC,WAAY,CAAAC,MAAA,GAASD,WAAY,CAAAE,QAAA;QAC7CC,MAAQ;UACJC,IAAM;QAAA;MACV,CACH;IAAA,CACL,UACST,KAAM,CAAAS,IAAA,KAAS,SACxB;MACWZ,MAAA,CAAAG,KAAA,CAAMA,KAAK,EAAEE,IAAK;QACrBC,OAAA,EAASH,KAAM,CAAAG,OAAA;QACfC,UAAA,EAAYC,WAAY,CAAAE,QAAA;QACxBG,OAAS;UACLD,IAAM;QAAA;MACV,CACH;IAAA,CACL,UACST,KAAM,CAAAS,IAAA,KAAS,YACxB;MACWZ,MAAA,CAAAG,KAAA,CAAMA,KAAK,EAAEE,IAAK;QACrBC,OAAA,EAASH,KAAM,CAAAG,OAAA;QACfC,UAAA,EAAYC,WAAY,CAAAE,QAAA;QACxBI,OAAS;UACLC,UAAY;UACZC,aAAe;UACfC,YAAc;QAAA;MAClB,CACH;IAAA;EACL;EAGG,OAAAjB,MAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}