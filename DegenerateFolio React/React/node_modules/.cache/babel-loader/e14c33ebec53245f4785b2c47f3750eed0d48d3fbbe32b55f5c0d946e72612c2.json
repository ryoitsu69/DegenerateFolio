{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { isFunction } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {\n  const addrStr = address?.toString();\n  const isIncluded = id => id.toString() === addrStr;\n  return {\n    isCouncil: (electionsMembers?.map(r => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),\n    isSociety: (societyMembers || []).some(isIncluded),\n    isSudo: sudoKey?.toString() === addrStr,\n    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)\n  };\n}\nexport function _flags(instanceId, api) {\n  return memo(instanceId, () => {\n    const results = [undefined, [], [], [], undefined];\n    const calls = [(api.query.elections || api.query['phragmenElection'] || api.query['electionsPhragmen'])?.members, api.query.council?.members, api.query.technicalCommittee?.members, api.query.society?.members, api.query.sudo?.key];\n    const filtered = calls.filter(c => c);\n    if (!filtered.length) {\n      return of(results);\n    }\n    return api.queryMulti(filtered).pipe(map(values => {\n      let resultIndex = -1;\n      for (let i = 0, count = calls.length; i < count; i++) {\n        if (isFunction(calls[i])) {\n          results[i] = values[++resultIndex];\n        }\n      }\n      return results;\n    }));\n  });\n}\n/**\n * @name info\n * @description Returns account membership flags\n */\nexport function flags(instanceId, api) {\n  return memo(instanceId, address => api.derive.accounts._flags().pipe(map(r => parseFlags(address, r))));\n}","map":{"version":3,"names":["map","of","isFunction","memo","parseFlags","address","electionsMembers","councilMembers","technicalCommitteeMembers","societyMembers","sudoKey","addrStr","toString","isIncluded","id","isCouncil","r","Array","isArray","who","some","isSociety","isSudo","isTechCommittee","_flags","instanceId","api","results","undefined","calls","query","elections","members","council","technicalCommittee","society","sudo","key","filtered","filter","c","length","queryMulti","pipe","values","resultIndex","i","count","flags","derive","accounts"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/accounts/flags.js"],"sourcesContent":["import { map, of } from 'rxjs';\nimport { isFunction } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nfunction parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {\n    const addrStr = address?.toString();\n    const isIncluded = (id) => id.toString() === addrStr;\n    return {\n        isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),\n        isSociety: (societyMembers || []).some(isIncluded),\n        isSudo: sudoKey?.toString() === addrStr,\n        isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)\n    };\n}\nexport function _flags(instanceId, api) {\n    return memo(instanceId, () => {\n        const results = [undefined, [], [], [], undefined];\n        const calls = [\n            (api.query.elections || api.query['phragmenElection'] || api.query['electionsPhragmen'])?.members,\n            api.query.council?.members,\n            api.query.technicalCommittee?.members,\n            api.query.society?.members,\n            api.query.sudo?.key\n        ];\n        const filtered = calls.filter((c) => c);\n        if (!filtered.length) {\n            return of(results);\n        }\n        return api.queryMulti(filtered).pipe(map((values) => {\n            let resultIndex = -1;\n            for (let i = 0, count = calls.length; i < count; i++) {\n                if (isFunction(calls[i])) {\n                    results[i] = values[++resultIndex];\n                }\n            }\n            return results;\n        }));\n    });\n}\n/**\n * @name info\n * @description Returns account membership flags\n */\nexport function flags(instanceId, api) {\n    return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map((r) => parseFlags(address, r))));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}