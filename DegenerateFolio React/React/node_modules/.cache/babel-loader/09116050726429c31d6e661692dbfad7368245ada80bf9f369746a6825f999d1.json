{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProof = exports.getChainId = exports.requestAccounts = exports.getPendingTransactions = exports.getFeeHistory = exports.submitHashrate = exports.submitWork = exports.getWork = exports.getLogs = exports.getFilterLogs = exports.getFilterChanges = exports.uninstallFilter = exports.newPendingTransactionFilter = exports.newBlockFilter = exports.newFilter = exports.compileSerpent = exports.compileLLL = exports.compileSolidity = exports.getCompilers = exports.getUncleByBlockNumberAndIndex = exports.getUncleByBlockHashAndIndex = exports.getTransactionReceipt = exports.getTransactionByBlockNumberAndIndex = exports.getTransactionByBlockHashAndIndex = exports.getTransactionByHash = exports.getBlockByNumber = exports.getBlockByHash = exports.estimateGas = exports.call = exports.sendRawTransaction = exports.sendTransaction = exports.signTransaction = exports.sign = exports.getCode = exports.getUncleCountByBlockNumber = exports.getUncleCountByBlockHash = exports.getBlockTransactionCountByNumber = exports.getBlockTransactionCountByHash = exports.getTransactionCount = exports.getStorageAt = exports.getBalance = exports.getBlockNumber = exports.getAccounts = exports.getMaxPriorityFeePerGas = exports.getGasPrice = exports.getHashRate = exports.getMining = exports.getCoinbase = exports.getSyncing = exports.getProtocolVersion = void 0;\nexports.signTypedData = exports.createAccessList = exports.getNodeInfo = void 0;\nconst web3_validator_1 = require(\"web3-validator\");\nfunction getProtocolVersion(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_protocolVersion',\n      params: []\n    });\n  });\n}\nexports.getProtocolVersion = getProtocolVersion;\nfunction getSyncing(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_syncing',\n      params: []\n    });\n  });\n}\nexports.getSyncing = getSyncing;\nfunction getCoinbase(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_coinbase',\n      params: []\n    });\n  });\n}\nexports.getCoinbase = getCoinbase;\nfunction getMining(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_mining',\n      params: []\n    });\n  });\n}\nexports.getMining = getMining;\nfunction getHashRate(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_hashrate',\n      params: []\n    });\n  });\n}\nexports.getHashRate = getHashRate;\nfunction getGasPrice(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_gasPrice',\n      params: []\n    });\n  });\n}\nexports.getGasPrice = getGasPrice;\nfunction getMaxPriorityFeePerGas(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_maxPriorityFeePerGas',\n      params: []\n    });\n  });\n}\nexports.getMaxPriorityFeePerGas = getMaxPriorityFeePerGas;\nfunction getAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_accounts',\n      params: []\n    });\n  });\n}\nexports.getAccounts = getAccounts;\nfunction getBlockNumber(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_blockNumber',\n      params: []\n    });\n  });\n}\nexports.getBlockNumber = getBlockNumber;\nfunction getBalance(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getBalance',\n      params: [address, blockNumber]\n    });\n  });\n}\nexports.getBalance = getBalance;\nfunction getStorageAt(requestManager, address, storageSlot, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getStorageAt',\n      params: [address, storageSlot, blockNumber]\n    });\n  });\n}\nexports.getStorageAt = getStorageAt;\nfunction getTransactionCount(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getTransactionCount',\n      params: [address, blockNumber]\n    });\n  });\n}\nexports.getTransactionCount = getTransactionCount;\nfunction getBlockTransactionCountByHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [blockHash]);\n    return requestManager.send({\n      method: 'eth_getBlockTransactionCountByHash',\n      params: [blockHash]\n    });\n  });\n}\nexports.getBlockTransactionCountByHash = getBlockTransactionCountByHash;\nfunction getBlockTransactionCountByNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_getBlockTransactionCountByNumber',\n      params: [blockNumber]\n    });\n  });\n}\nexports.getBlockTransactionCountByNumber = getBlockTransactionCountByNumber;\nfunction getUncleCountByBlockHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [blockHash]);\n    return requestManager.send({\n      method: 'eth_getUncleCountByBlockHash',\n      params: [blockHash]\n    });\n  });\n}\nexports.getUncleCountByBlockHash = getUncleCountByBlockHash;\nfunction getUncleCountByBlockNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_getUncleCountByBlockNumber',\n      params: [blockNumber]\n    });\n  });\n}\nexports.getUncleCountByBlockNumber = getUncleCountByBlockNumber;\nfunction getCode(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getCode',\n      params: [address, blockNumber]\n    });\n  });\n}\nexports.getCode = getCode;\nfunction sign(requestManager, address, message) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'hex'], [address, message]);\n    return requestManager.send({\n      method: 'eth_sign',\n      params: [address, message]\n    });\n  });\n}\nexports.sign = sign;\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nfunction signTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_signTransaction',\n      params: [transaction]\n    });\n  });\n}\nexports.signTransaction = signTransaction;\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nfunction sendTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_sendTransaction',\n      params: [transaction]\n    });\n  });\n}\nexports.sendTransaction = sendTransaction;\nfunction sendRawTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [transaction]);\n    return requestManager.send({\n      method: 'eth_sendRawTransaction',\n      params: [transaction]\n    });\n  });\n}\nexports.sendRawTransaction = sendRawTransaction;\n// TODO - validate transaction\nfunction call(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // validateTransactionCall(transaction);\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_call',\n      params: [transaction, blockNumber]\n    });\n  });\n}\nexports.call = call;\n// TODO Not sure how to best validate Partial<TransactionWithSender>\nfunction estimateGas(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_estimateGas',\n      params: [transaction, blockNumber]\n    });\n  });\n}\nexports.estimateGas = estimateGas;\nfunction getBlockByHash(requestManager, blockHash, hydrated) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'bool'], [blockHash, hydrated]);\n    return requestManager.send({\n      method: 'eth_getBlockByHash',\n      params: [blockHash, hydrated]\n    });\n  });\n}\nexports.getBlockByHash = getBlockByHash;\nfunction getBlockByNumber(requestManager, blockNumber, hydrated) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);\n    return requestManager.send({\n      method: 'eth_getBlockByNumber',\n      params: [blockNumber, hydrated]\n    });\n  });\n}\nexports.getBlockByNumber = getBlockByNumber;\nfunction getTransactionByHash(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [transactionHash]);\n    return requestManager.send({\n      method: 'eth_getTransactionByHash',\n      params: [transactionHash]\n    });\n  });\n}\nexports.getTransactionByHash = getTransactionByHash;\nfunction getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);\n    return requestManager.send({\n      method: 'eth_getTransactionByBlockHashAndIndex',\n      params: [blockHash, transactionIndex]\n    });\n  });\n}\nexports.getTransactionByBlockHashAndIndex = getTransactionByBlockHashAndIndex;\nfunction getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);\n    return requestManager.send({\n      method: 'eth_getTransactionByBlockNumberAndIndex',\n      params: [blockNumber, transactionIndex]\n    });\n  });\n}\nexports.getTransactionByBlockNumberAndIndex = getTransactionByBlockNumberAndIndex;\nfunction getTransactionReceipt(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32'], [transactionHash]);\n    return requestManager.send({\n      method: 'eth_getTransactionReceipt',\n      params: [transactionHash]\n    });\n  });\n}\nexports.getTransactionReceipt = getTransactionReceipt;\nfunction getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);\n    return requestManager.send({\n      method: 'eth_getUncleByBlockHashAndIndex',\n      params: [blockHash, uncleIndex]\n    });\n  });\n}\nexports.getUncleByBlockHashAndIndex = getUncleByBlockHashAndIndex;\nfunction getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);\n    return requestManager.send({\n      method: 'eth_getUncleByBlockNumberAndIndex',\n      params: [blockNumber, uncleIndex]\n    });\n  });\n}\nexports.getUncleByBlockNumberAndIndex = getUncleByBlockNumberAndIndex;\nfunction getCompilers(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_getCompilers',\n      params: []\n    });\n  });\n}\nexports.getCompilers = getCompilers;\nfunction compileSolidity(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileSolidity',\n      params: [code]\n    });\n  });\n}\nexports.compileSolidity = compileSolidity;\nfunction compileLLL(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileLLL',\n      params: [code]\n    });\n  });\n}\nexports.compileLLL = compileLLL;\nfunction compileSerpent(requestManager, code) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['string'], [code]);\n    return requestManager.send({\n      method: 'eth_compileSerpent',\n      params: [code]\n    });\n  });\n}\nexports.compileSerpent = compileSerpent;\nfunction newFilter(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['filter'], [filter]);\n    return requestManager.send({\n      method: 'eth_newFilter',\n      params: [filter]\n    });\n  });\n}\nexports.newFilter = newFilter;\nfunction newBlockFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_newBlockFilter',\n      params: []\n    });\n  });\n}\nexports.newBlockFilter = newBlockFilter;\nfunction newPendingTransactionFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_newPendingTransactionFilter',\n      params: []\n    });\n  });\n}\nexports.newPendingTransactionFilter = newPendingTransactionFilter;\nfunction uninstallFilter(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_uninstallFilter',\n      params: [filterIdentifier]\n    });\n  });\n}\nexports.uninstallFilter = uninstallFilter;\nfunction getFilterChanges(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_getFilterChanges',\n      params: [filterIdentifier]\n    });\n  });\n}\nexports.getFilterChanges = getFilterChanges;\nfunction getFilterLogs(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex'], [filterIdentifier]);\n    return requestManager.send({\n      method: 'eth_getFilterLogs',\n      params: [filterIdentifier]\n    });\n  });\n}\nexports.getFilterLogs = getFilterLogs;\nfunction getLogs(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['filter'], [filter]);\n    return requestManager.send({\n      method: 'eth_getLogs',\n      params: [filter]\n    });\n  });\n}\nexports.getLogs = getLogs;\nfunction getWork(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_getWork',\n      params: []\n    });\n  });\n}\nexports.getWork = getWork;\nfunction submitWork(requestManager, nonce, hash, digest) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);\n    return requestManager.send({\n      method: 'eth_submitWork',\n      params: [nonce, hash, digest]\n    });\n  });\n}\nexports.submitWork = submitWork;\nfunction submitHashrate(requestManager, hashRate, id) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['bytes32', 'bytes32'], [hashRate, id]);\n    return requestManager.send({\n      method: 'eth_submitHashrate',\n      params: [hashRate, id]\n    });\n  });\n}\nexports.submitHashrate = submitHashrate;\nfunction getFeeHistory(requestManager, blockCount, newestBlock, rewardPercentiles) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);\n    for (const rewardPercentile of rewardPercentiles) {\n      web3_validator_1.validator.validate(['number'], [rewardPercentile]);\n    }\n    return requestManager.send({\n      method: 'eth_feeHistory',\n      params: [blockCount, newestBlock, rewardPercentiles]\n    });\n  });\n}\nexports.getFeeHistory = getFeeHistory;\nfunction getPendingTransactions(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_pendingTransactions',\n      params: []\n    });\n  });\n}\nexports.getPendingTransactions = getPendingTransactions;\nfunction requestAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_requestAccounts',\n      params: []\n    });\n  });\n}\nexports.requestAccounts = requestAccounts;\nfunction getChainId(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'eth_chainId',\n      params: []\n    });\n  });\n}\nexports.getChainId = getChainId;\nfunction getProof(requestManager, address, storageKeys, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['address', 'bytes32[]', 'blockNumberOrTag'], [address, storageKeys, blockNumber]);\n    return requestManager.send({\n      method: 'eth_getProof',\n      params: [address, storageKeys, blockNumber]\n    });\n  });\n}\nexports.getProof = getProof;\nfunction getNodeInfo(requestManager) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return requestManager.send({\n      method: 'web3_clientVersion',\n      params: []\n    });\n  });\n}\nexports.getNodeInfo = getNodeInfo;\nfunction createAccessList(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    web3_validator_1.validator.validate(['blockNumberOrTag'], [blockNumber]);\n    return requestManager.send({\n      method: 'eth_createAccessList',\n      params: [transaction, blockNumber]\n    });\n  });\n}\nexports.createAccessList = createAccessList;\nfunction signTypedData(requestManager, address, typedData, useLegacy = false) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // TODO Add validation for typedData\n    web3_validator_1.validator.validate(['address'], [address]);\n    return requestManager.send({\n      method: `eth_signTypedData${useLegacy ? '' : '_v4'}`,\n      params: [address, typedData]\n    });\n  });\n}\nexports.signTypedData = signTypedData;","map":{"version":3,"names":["web3_validator_1","require","getProtocolVersion","requestManager","send","method","params","exports","getSyncing","getCoinbase","getMining","getHashRate","getGasPrice","getMaxPriorityFeePerGas","getAccounts","getBlockNumber","getBalance","address","blockNumber","validator","validate","getStorageAt","storageSlot","getTransactionCount","getBlockTransactionCountByHash","blockHash","getBlockTransactionCountByNumber","getUncleCountByBlockHash","getUncleCountByBlockNumber","getCode","sign","message","signTransaction","transaction","sendTransaction","sendRawTransaction","call","estimateGas","getBlockByHash","hydrated","getBlockByNumber","getTransactionByHash","transactionHash","getTransactionByBlockHashAndIndex","transactionIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getUncleByBlockHashAndIndex","uncleIndex","getUncleByBlockNumberAndIndex","getCompilers","compileSolidity","code","compileLLL","compileSerpent","newFilter","filter","newBlockFilter","newPendingTransactionFilter","uninstallFilter","filterIdentifier","getFilterChanges","getFilterLogs","getLogs","getWork","submitWork","nonce","hash","digest","submitHashrate","hashRate","id","getFeeHistory","blockCount","newestBlock","rewardPercentiles","rewardPercentile","getPendingTransactions","requestAccounts","getChainId","getProof","storageKeys","getNodeInfo","createAccessList","signTypedData","typedData","useLegacy"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-rpc-methods/src/eth_rpc_methods.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport {\n\tAddress,\n\tBlockNumberOrTag,\n\tFilter,\n\tHexString32Bytes,\n\tHexString8Bytes,\n\tHexStringBytes,\n\tTransactionCallAPI,\n\tTransactionWithSenderAPI,\n\tUint,\n\tUint256,\n\tWeb3EthExecutionAPI,\n\tEip712TypedData,\n} from 'web3-types';\nimport { validator } from 'web3-validator';\n\nexport async function getProtocolVersion(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_protocolVersion',\n\t\tparams: [],\n\t});\n}\n\nexport async function getSyncing(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_syncing',\n\t\tparams: [],\n\t});\n}\n\nexport async function getCoinbase(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_coinbase',\n\t\tparams: [],\n\t});\n}\n\nexport async function getMining(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_mining',\n\t\tparams: [],\n\t});\n}\n\nexport async function getHashRate(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_hashrate',\n\t\tparams: [],\n\t});\n}\n\nexport async function getGasPrice(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_gasPrice',\n\t\tparams: [],\n\t});\n}\n\nexport async function getMaxPriorityFeePerGas(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_maxPriorityFeePerGas',\n\t\tparams: [],\n\t});\n}\n\nexport async function getAccounts(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_accounts',\n\t\tparams: [],\n\t});\n}\n\nexport async function getBlockNumber(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_blockNumber',\n\t\tparams: [],\n\t});\n}\n\nexport async function getBalance(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBalance',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function getStorageAt(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tstorageSlot: Uint256,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getStorageAt',\n\t\tparams: [address, storageSlot, blockNumber],\n\t});\n}\n\nexport async function getTransactionCount(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionCount',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function getBlockTransactionCountByHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [blockHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockTransactionCountByHash',\n\t\tparams: [blockHash],\n\t});\n}\n\nexport async function getBlockTransactionCountByNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockTransactionCountByNumber',\n\t\tparams: [blockNumber],\n\t});\n}\n\nexport async function getUncleCountByBlockHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [blockHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleCountByBlockHash',\n\t\tparams: [blockHash],\n\t});\n}\n\nexport async function getUncleCountByBlockNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleCountByBlockNumber',\n\t\tparams: [blockNumber],\n\t});\n}\n\nexport async function getCode(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getCode',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function sign(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tmessage: HexStringBytes,\n) {\n\tvalidator.validate(['address', 'hex'], [address, message]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_sign',\n\t\tparams: [address, message],\n\t});\n}\n\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport async function signTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_signTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport async function sendTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_sendTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\nexport async function sendRawTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: HexStringBytes,\n) {\n\tvalidator.validate(['hex'], [transaction]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_sendRawTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\n// TODO - validate transaction\nexport async function call(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionCallAPI,\n\tblockNumber: BlockNumberOrTag,\n) {\n\t// validateTransactionCall(transaction);\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_call',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\n// TODO Not sure how to best validate Partial<TransactionWithSender>\nexport async function estimateGas(\n\trequestManager: Web3RequestManager,\n\ttransaction: Partial<TransactionWithSenderAPI>,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_estimateGas',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\nexport async function getBlockByHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\thydrated: boolean,\n) {\n\tvalidator.validate(['bytes32', 'bool'], [blockHash, hydrated]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockByHash',\n\t\tparams: [blockHash, hydrated],\n\t});\n}\n\nexport async function getBlockByNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\thydrated: boolean,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockByNumber',\n\t\tparams: [blockNumber, hydrated],\n\t});\n}\n\nexport async function getTransactionByHash(\n\trequestManager: Web3RequestManager,\n\ttransactionHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [transactionHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByHash',\n\t\tparams: [transactionHash],\n\t});\n}\n\nexport async function getTransactionByBlockHashAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\ttransactionIndex: Uint,\n) {\n\tvalidator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByBlockHashAndIndex',\n\t\tparams: [blockHash, transactionIndex],\n\t});\n}\n\nexport async function getTransactionByBlockNumberAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\ttransactionIndex: Uint,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByBlockNumberAndIndex',\n\t\tparams: [blockNumber, transactionIndex],\n\t});\n}\n\nexport async function getTransactionReceipt(\n\trequestManager: Web3RequestManager,\n\ttransactionHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [transactionHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionReceipt',\n\t\tparams: [transactionHash],\n\t});\n}\n\nexport async function getUncleByBlockHashAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\tuncleIndex: Uint,\n) {\n\tvalidator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleByBlockHashAndIndex',\n\t\tparams: [blockHash, uncleIndex],\n\t});\n}\n\nexport async function getUncleByBlockNumberAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\tuncleIndex: Uint,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleByBlockNumberAndIndex',\n\t\tparams: [blockNumber, uncleIndex],\n\t});\n}\n\nexport async function getCompilers(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_getCompilers',\n\t\tparams: [],\n\t});\n}\n\nexport async function compileSolidity(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileSolidity',\n\t\tparams: [code],\n\t});\n}\n\nexport async function compileLLL(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileLLL',\n\t\tparams: [code],\n\t});\n}\n\nexport async function compileSerpent(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileSerpent',\n\t\tparams: [code],\n\t});\n}\n\nexport async function newFilter(requestManager: Web3RequestManager, filter: Filter) {\n\tvalidator.validate(['filter'], [filter]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_newFilter',\n\t\tparams: [filter],\n\t});\n}\n\nexport async function newBlockFilter(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_newBlockFilter',\n\t\tparams: [],\n\t});\n}\n\nexport async function newPendingTransactionFilter(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_newPendingTransactionFilter',\n\t\tparams: [],\n\t});\n}\n\nexport async function uninstallFilter(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_uninstallFilter',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getFilterChanges(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getFilterChanges',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getFilterLogs(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getFilterLogs',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getLogs(requestManager: Web3RequestManager, filter: Filter) {\n\tvalidator.validate(['filter'], [filter]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getLogs',\n\t\tparams: [filter],\n\t});\n}\n\nexport async function getWork(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_getWork',\n\t\tparams: [],\n\t});\n}\n\nexport async function submitWork(\n\trequestManager: Web3RequestManager,\n\tnonce: HexString8Bytes,\n\thash: HexString32Bytes,\n\tdigest: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_submitWork',\n\t\tparams: [nonce, hash, digest],\n\t});\n}\n\nexport async function submitHashrate(\n\trequestManager: Web3RequestManager,\n\thashRate: HexString32Bytes,\n\tid: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32', 'bytes32'], [hashRate, id]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_submitHashrate',\n\t\tparams: [hashRate, id],\n\t});\n}\n\nexport async function getFeeHistory(\n\trequestManager: Web3RequestManager,\n\tblockCount: Uint,\n\tnewestBlock: BlockNumberOrTag,\n\trewardPercentiles: number[],\n) {\n\tvalidator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);\n\n\tfor (const rewardPercentile of rewardPercentiles) {\n\t\tvalidator.validate(['number'], [rewardPercentile]);\n\t}\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_feeHistory',\n\t\tparams: [blockCount, newestBlock, rewardPercentiles],\n\t});\n}\n\nexport async function getPendingTransactions(\n\trequestManager: Web3RequestManager<Web3EthExecutionAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_pendingTransactions',\n\t\tparams: [],\n\t});\n}\n\nexport async function requestAccounts(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_requestAccounts',\n\t\tparams: [],\n\t});\n}\n\nexport async function getChainId(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_chainId',\n\t\tparams: [],\n\t});\n}\n\nexport async function getProof(\n\trequestManager: Web3RequestManager<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: HexString32Bytes[],\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(\n\t\t['address', 'bytes32[]', 'blockNumberOrTag'],\n\t\t[address, storageKeys, blockNumber],\n\t);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getProof',\n\t\tparams: [address, storageKeys, blockNumber],\n\t});\n}\n\nexport async function getNodeInfo(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'web3_clientVersion',\n\t\tparams: [],\n\t});\n}\n\nexport async function createAccessList(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_createAccessList',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\nexport async function signTypedData(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy = false,\n): Promise<string> {\n\t// TODO Add validation for typedData\n\tvalidator.validate(['address'], [address]);\n\n\treturn requestManager.send({\n\t\tmethod: `eth_signTypedData${useLegacy ? '' : '_v4'}`,\n\t\tparams: [address, typedData],\n\t});\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,MAAAA,gBAAA,GAAAC,OAAA;AAEA,SAAsBC,kBAAkBA,CAACC,cAAkC;;IAC1E,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAL,kBAAA,GAAAA,kBAAA;AAOA,SAAsBM,UAAUA,CAACL,cAAkC;;IAClE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,aAAa;MACrBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAOA,SAAsBC,WAAWA,CAACN,cAAkC;;IACnE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,cAAc;MACtBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAE,WAAA,GAAAA,WAAA;AAOA,SAAsBC,SAASA,CAACP,cAAkC;;IACjE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,YAAY;MACpBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAG,SAAA,GAAAA,SAAA;AAOA,SAAsBC,WAAWA,CAACR,cAAkC;;IACnE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,cAAc;MACtBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAI,WAAA,GAAAA,WAAA;AAOA,SAAsBC,WAAWA,CAACT,cAAkC;;IACnE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,cAAc;MACtBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAK,WAAA,GAAAA,WAAA;AAOA,SAAsBC,uBAAuBA,CAACV,cAAkC;;IAC/E,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,0BAA0B;MAClCC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAM,uBAAA,GAAAA,uBAAA;AAOA,SAAsBC,WAAWA,CAACX,cAAkC;;IACnE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,cAAc;MACtBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAO,WAAA,GAAAA,WAAA;AAOA,SAAsBC,cAAcA,CAACZ,cAAkC;;IACtE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,iBAAiB;MACzBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAQ,cAAA,GAAAA,cAAA;AAOA,SAAsBC,UAAUA,CAC/Bb,cAAkC,EAClCc,OAAgB,EAChBC,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,kBAAkB,CAAC,EAAE,CAACH,OAAO,EAAEC,WAAW,CAAC,CAAC;IAE3E,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,gBAAgB;MACxBC,MAAM,EAAE,CAACW,OAAO,EAAEC,WAAW;KAC7B,CAAC;EACH,CAAC;;AAXDX,OAAA,CAAAS,UAAA,GAAAA,UAAA;AAaA,SAAsBK,YAAYA,CACjClB,cAAkC,EAClCc,OAAgB,EAChBK,WAAoB,EACpBJ,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,kBAAkB,CAAC,EAAE,CAACH,OAAO,EAAEK,WAAW,EAAEJ,WAAW,CAAC,CAAC;IAE/F,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,kBAAkB;MAC1BC,MAAM,EAAE,CAACW,OAAO,EAAEK,WAAW,EAAEJ,WAAW;KAC1C,CAAC;EACH,CAAC;;AAZDX,OAAA,CAAAc,YAAA,GAAAA,YAAA;AAcA,SAAsBE,mBAAmBA,CACxCpB,cAAkC,EAClCc,OAAgB,EAChBC,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,kBAAkB,CAAC,EAAE,CAACH,OAAO,EAAEC,WAAW,CAAC,CAAC;IAE3E,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,yBAAyB;MACjCC,MAAM,EAAE,CAACW,OAAO,EAAEC,WAAW;KAC7B,CAAC;EACH,CAAC;;AAXDX,OAAA,CAAAgB,mBAAA,GAAAA,mBAAA;AAaA,SAAsBC,8BAA8BA,CACnDrB,cAAkC,EAClCsB,SAA2B;;IAE3BzB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,CAACK,SAAS,CAAC,CAAC;IAE5C,OAAOtB,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,oCAAoC;MAC5CC,MAAM,EAAE,CAACmB,SAAS;KAClB,CAAC;EACH,CAAC;;AAVDlB,OAAA,CAAAiB,8BAAA,GAAAA,8BAAA;AAYA,SAAsBE,gCAAgCA,CACrDvB,cAAkC,EAClCe,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;IAEvD,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,sCAAsC;MAC9CC,MAAM,EAAE,CAACY,WAAW;KACpB,CAAC;EACH,CAAC;;AAVDX,OAAA,CAAAmB,gCAAA,GAAAA,gCAAA;AAYA,SAAsBC,wBAAwBA,CAC7CxB,cAAkC,EAClCsB,SAA2B;;IAE3BzB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,CAACK,SAAS,CAAC,CAAC;IAE5C,OAAOtB,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,8BAA8B;MACtCC,MAAM,EAAE,CAACmB,SAAS;KAClB,CAAC;EACH,CAAC;;AAVDlB,OAAA,CAAAoB,wBAAA,GAAAA,wBAAA;AAYA,SAAsBC,0BAA0BA,CAC/CzB,cAAkC,EAClCe,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;IAEvD,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,gCAAgC;MACxCC,MAAM,EAAE,CAACY,WAAW;KACpB,CAAC;EACH,CAAC;;AAVDX,OAAA,CAAAqB,0BAAA,GAAAA,0BAAA;AAYA,SAAsBC,OAAOA,CAC5B1B,cAAkC,EAClCc,OAAgB,EAChBC,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,kBAAkB,CAAC,EAAE,CAACH,OAAO,EAAEC,WAAW,CAAC,CAAC;IAE3E,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,aAAa;MACrBC,MAAM,EAAE,CAACW,OAAO,EAAEC,WAAW;KAC7B,CAAC;EACH,CAAC;;AAXDX,OAAA,CAAAsB,OAAA,GAAAA,OAAA;AAaA,SAAsBC,IAAIA,CACzB3B,cAAkC,EAClCc,OAAgB,EAChBc,OAAuB;;IAEvB/B,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,CAACH,OAAO,EAAEc,OAAO,CAAC,CAAC;IAE1D,OAAO5B,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,UAAU;MAClBC,MAAM,EAAE,CAACW,OAAO,EAAEc,OAAO;KACzB,CAAC;EACH,CAAC;;AAXDxB,OAAA,CAAAuB,IAAA,GAAAA,IAAA;AAaA;AACA;AACA;AACA;AACA,SAAsBE,eAAeA,CACpC7B,cAAkC,EAClC8B,WAAyE;;IAEzE,OAAO9B,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE,CAAC2B,WAAW;KACpB,CAAC;EACH,CAAC;;AARD1B,OAAA,CAAAyB,eAAA,GAAAA,eAAA;AAUA;AACA;AACA;AACA;AACA,SAAsBE,eAAeA,CACpC/B,cAAkC,EAClC8B,WAAyE;;IAEzE,OAAO9B,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE,CAAC2B,WAAW;KACpB,CAAC;EACH,CAAC;;AARD1B,OAAA,CAAA2B,eAAA,GAAAA,eAAA;AAUA,SAAsBC,kBAAkBA,CACvChC,cAAkC,EAClC8B,WAA2B;;IAE3BjC,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,CAACa,WAAW,CAAC,CAAC;IAE1C,OAAO9B,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,wBAAwB;MAChCC,MAAM,EAAE,CAAC2B,WAAW;KACpB,CAAC;EACH,CAAC;;AAVD1B,OAAA,CAAA4B,kBAAA,GAAAA,kBAAA;AAYA;AACA,SAAsBC,IAAIA,CACzBjC,cAAkC,EAClC8B,WAA+B,EAC/Bf,WAA6B;;IAE7B;IACAlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;IAEvD,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,UAAU;MAClBC,MAAM,EAAE,CAAC2B,WAAW,EAAEf,WAAW;KACjC,CAAC;EACH,CAAC;;AAZDX,OAAA,CAAA6B,IAAA,GAAAA,IAAA;AAcA;AACA,SAAsBC,WAAWA,CAChClC,cAAkC,EAClC8B,WAA8C,EAC9Cf,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;IAEvD,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,iBAAiB;MACzBC,MAAM,EAAE,CAAC2B,WAAW,EAAEf,WAAW;KACjC,CAAC;EACH,CAAC;;AAXDX,OAAA,CAAA8B,WAAA,GAAAA,WAAA;AAaA,SAAsBC,cAAcA,CACnCnC,cAAkC,EAClCsB,SAA2B,EAC3Bc,QAAiB;;IAEjBvC,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,MAAM,CAAC,EAAE,CAACK,SAAS,EAAEc,QAAQ,CAAC,CAAC;IAE9D,OAAOpC,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE,CAACmB,SAAS,EAAEc,QAAQ;KAC5B,CAAC;EACH,CAAC;;AAXDhC,OAAA,CAAA+B,cAAA,GAAAA,cAAA;AAaA,SAAsBE,gBAAgBA,CACrCrC,cAAkC,EAClCe,WAA6B,EAC7BqB,QAAiB;;IAEjBvC,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,MAAM,CAAC,EAAE,CAACF,WAAW,EAAEqB,QAAQ,CAAC,CAAC;IAEzE,OAAOpC,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,sBAAsB;MAC9BC,MAAM,EAAE,CAACY,WAAW,EAAEqB,QAAQ;KAC9B,CAAC;EACH,CAAC;;AAXDhC,OAAA,CAAAiC,gBAAA,GAAAA,gBAAA;AAaA,SAAsBC,oBAAoBA,CACzCtC,cAAkC,EAClCuC,eAAiC;;IAEjC1C,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,CAACsB,eAAe,CAAC,CAAC;IAElD,OAAOvC,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,0BAA0B;MAClCC,MAAM,EAAE,CAACoC,eAAe;KACxB,CAAC;EACH,CAAC;;AAVDnC,OAAA,CAAAkC,oBAAA,GAAAA,oBAAA;AAYA,SAAsBE,iCAAiCA,CACtDxC,cAAkC,EAClCsB,SAA2B,EAC3BmB,gBAAsB;;IAEtB5C,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,CAACK,SAAS,EAAEmB,gBAAgB,CAAC,CAAC;IAErE,OAAOzC,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,uCAAuC;MAC/CC,MAAM,EAAE,CAACmB,SAAS,EAAEmB,gBAAgB;KACpC,CAAC;EACH,CAAC;;AAXDrC,OAAA,CAAAoC,iCAAA,GAAAA,iCAAA;AAaA,SAAsBE,mCAAmCA,CACxD1C,cAAkC,EAClCe,WAA6B,EAC7B0B,gBAAsB;;IAEtB5C,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE,CAACF,WAAW,EAAE0B,gBAAgB,CAAC,CAAC;IAEhF,OAAOzC,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,yCAAyC;MACjDC,MAAM,EAAE,CAACY,WAAW,EAAE0B,gBAAgB;KACtC,CAAC;EACH,CAAC;;AAXDrC,OAAA,CAAAsC,mCAAA,GAAAA,mCAAA;AAaA,SAAsBC,qBAAqBA,CAC1C3C,cAAkC,EAClCuC,eAAiC;;IAEjC1C,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,CAACsB,eAAe,CAAC,CAAC;IAElD,OAAOvC,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,2BAA2B;MACnCC,MAAM,EAAE,CAACoC,eAAe;KACxB,CAAC;EACH,CAAC;;AAVDnC,OAAA,CAAAuC,qBAAA,GAAAA,qBAAA;AAYA,SAAsBC,2BAA2BA,CAChD5C,cAAkC,EAClCsB,SAA2B,EAC3BuB,UAAgB;;IAEhBhD,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE,CAACK,SAAS,EAAEuB,UAAU,CAAC,CAAC;IAE/D,OAAO7C,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,iCAAiC;MACzCC,MAAM,EAAE,CAACmB,SAAS,EAAEuB,UAAU;KAC9B,CAAC;EACH,CAAC;;AAXDzC,OAAA,CAAAwC,2BAAA,GAAAA,2BAAA;AAaA,SAAsBE,6BAA6BA,CAClD9C,cAAkC,EAClCe,WAA6B,EAC7B8B,UAAgB;;IAEhBhD,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,EAAE,KAAK,CAAC,EAAE,CAACF,WAAW,EAAE8B,UAAU,CAAC,CAAC;IAE1E,OAAO7C,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,mCAAmC;MAC3CC,MAAM,EAAE,CAACY,WAAW,EAAE8B,UAAU;KAChC,CAAC;EACH,CAAC;;AAXDzC,OAAA,CAAA0C,6BAAA,GAAAA,6BAAA;AAaA,SAAsBC,YAAYA,CAAC/C,cAAkC;;IACpE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,kBAAkB;MAC1BC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAA2C,YAAA,GAAAA,YAAA;AAOA,SAAsBC,eAAeA,CAAChD,cAAkC,EAAEiD,IAAY;;IACrFpD,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,CAACgC,IAAI,CAAC,CAAC;IAEtC,OAAOjD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE,CAAC8C,IAAI;KACb,CAAC;EACH,CAAC;;AAPD7C,OAAA,CAAA4C,eAAA,GAAAA,eAAA;AASA,SAAsBE,UAAUA,CAAClD,cAAkC,EAAEiD,IAAY;;IAChFpD,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,CAACgC,IAAI,CAAC,CAAC;IAEtC,OAAOjD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,gBAAgB;MACxBC,MAAM,EAAE,CAAC8C,IAAI;KACb,CAAC;EACH,CAAC;;AAPD7C,OAAA,CAAA8C,UAAA,GAAAA,UAAA;AASA,SAAsBC,cAAcA,CAACnD,cAAkC,EAAEiD,IAAY;;IACpFpD,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,CAACgC,IAAI,CAAC,CAAC;IAEtC,OAAOjD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE,CAAC8C,IAAI;KACb,CAAC;EACH,CAAC;;AAPD7C,OAAA,CAAA+C,cAAA,GAAAA,cAAA;AASA,SAAsBC,SAASA,CAACpD,cAAkC,EAAEqD,MAAc;;IACjFxD,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,CAACoC,MAAM,CAAC,CAAC;IAExC,OAAOrD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,eAAe;MACvBC,MAAM,EAAE,CAACkD,MAAM;KACf,CAAC;EACH,CAAC;;AAPDjD,OAAA,CAAAgD,SAAA,GAAAA,SAAA;AASA,SAAsBE,cAAcA,CAACtD,cAAkC;;IACtE,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAkD,cAAA,GAAAA,cAAA;AAOA,SAAsBC,2BAA2BA,CAACvD,cAAkC;;IACnF,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,iCAAiC;MACzCC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAmD,2BAAA,GAAAA,2BAAA;AAOA,SAAsBC,eAAeA,CAACxD,cAAkC,EAAEyD,gBAAsB;;IAC/F5D,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,CAACwC,gBAAgB,CAAC,CAAC;IAE/C,OAAOzD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE,CAACsD,gBAAgB;KACzB,CAAC;EACH,CAAC;;AAPDrD,OAAA,CAAAoD,eAAA,GAAAA,eAAA;AASA,SAAsBE,gBAAgBA,CAAC1D,cAAkC,EAAEyD,gBAAsB;;IAChG5D,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,CAACwC,gBAAgB,CAAC,CAAC;IAE/C,OAAOzD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,sBAAsB;MAC9BC,MAAM,EAAE,CAACsD,gBAAgB;KACzB,CAAC;EACH,CAAC;;AAPDrD,OAAA,CAAAsD,gBAAA,GAAAA,gBAAA;AASA,SAAsBC,aAAaA,CAAC3D,cAAkC,EAAEyD,gBAAsB;;IAC7F5D,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,CAACwC,gBAAgB,CAAC,CAAC;IAE/C,OAAOzD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,mBAAmB;MAC3BC,MAAM,EAAE,CAACsD,gBAAgB;KACzB,CAAC;EACH,CAAC;;AAPDrD,OAAA,CAAAuD,aAAA,GAAAA,aAAA;AASA,SAAsBC,OAAOA,CAAC5D,cAAkC,EAAEqD,MAAc;;IAC/ExD,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,CAACoC,MAAM,CAAC,CAAC;IAExC,OAAOrD,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,aAAa;MACrBC,MAAM,EAAE,CAACkD,MAAM;KACf,CAAC;EACH,CAAC;;AAPDjD,OAAA,CAAAwD,OAAA,GAAAA,OAAA;AASA,SAAsBC,OAAOA,CAAC7D,cAAkC;;IAC/D,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,aAAa;MACrBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAyD,OAAA,GAAAA,OAAA;AAOA,SAAsBC,UAAUA,CAC/B9D,cAAkC,EAClC+D,KAAsB,EACtBC,IAAsB,EACtBC,MAAwB;;IAExBpE,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,CAAC8C,KAAK,EAAEC,IAAI,EAAEC,MAAM,CAAC,CAAC;IAE3E,OAAOjE,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,gBAAgB;MACxBC,MAAM,EAAE,CAAC4D,KAAK,EAAEC,IAAI,EAAEC,MAAM;KAC5B,CAAC;EACH,CAAC;;AAZD7D,OAAA,CAAA0D,UAAA,GAAAA,UAAA;AAcA,SAAsBI,cAAcA,CACnClE,cAAkC,EAClCmE,QAA0B,EAC1BC,EAAoB;;IAEpBvE,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAACkD,QAAQ,EAAEC,EAAE,CAAC,CAAC;IAE1D,OAAOpE,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE,CAACgE,QAAQ,EAAEC,EAAE;KACrB,CAAC;EACH,CAAC;;AAXDhE,OAAA,CAAA8D,cAAA,GAAAA,cAAA;AAaA,SAAsBG,aAAaA,CAClCrE,cAAkC,EAClCsE,UAAgB,EAChBC,WAA6B,EAC7BC,iBAA2B;;IAE3B3E,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,KAAK,EAAE,kBAAkB,CAAC,EAAE,CAACqD,UAAU,EAAEC,WAAW,CAAC,CAAC;IAE1E,KAAK,MAAME,gBAAgB,IAAID,iBAAiB,EAAE;MACjD3E,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,CAACwD,gBAAgB,CAAC,CAAC;;IAGnD,OAAOzE,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,gBAAgB;MACxBC,MAAM,EAAE,CAACmE,UAAU,EAAEC,WAAW,EAAEC,iBAAiB;KACnD,CAAC;EACH,CAAC;;AAhBDpE,OAAA,CAAAiE,aAAA,GAAAA,aAAA;AAkBA,SAAsBK,sBAAsBA,CAC3C1E,cAAuD;;IAEvD,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,yBAAyB;MACjCC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AAPDC,OAAA,CAAAsE,sBAAA,GAAAA,sBAAA;AASA,SAAsBC,eAAeA,CAAC3E,cAAuD;;IAC5F,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,qBAAqB;MAC7BC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAuE,eAAA,GAAAA,eAAA;AAOA,SAAsBC,UAAUA,CAAC5E,cAAuD;;IACvF,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,aAAa;MACrBC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAAwE,UAAA,GAAAA,UAAA;AAOA,SAAsBC,QAAQA,CAC7B7E,cAAuD,EACvDc,OAAgB,EAChBgE,WAA+B,EAC/B/D,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CACjB,CAAC,SAAS,EAAE,WAAW,EAAE,kBAAkB,CAAC,EAC5C,CAACH,OAAO,EAAEgE,WAAW,EAAE/D,WAAW,CAAC,CACnC;IAED,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,cAAc;MACtBC,MAAM,EAAE,CAACW,OAAO,EAAEgE,WAAW,EAAE/D,WAAW;KAC1C,CAAC;EACH,CAAC;;AAfDX,OAAA,CAAAyE,QAAA,GAAAA,QAAA;AAiBA,SAAsBE,WAAWA,CAAC/E,cAAuD;;IACxF,OAAOA,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,oBAAoB;MAC5BC,MAAM,EAAE;KACR,CAAC;EACH,CAAC;;AALDC,OAAA,CAAA2E,WAAA,GAAAA,WAAA;AAOA,SAAsBC,gBAAgBA,CACrChF,cAAkC,EAClC8B,WAAyE,EACzEf,WAA6B;;IAE7BlB,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,EAAE,CAACF,WAAW,CAAC,CAAC;IAEvD,OAAOf,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,sBAAsB;MAC9BC,MAAM,EAAE,CAAC2B,WAAW,EAAEf,WAAW;KACjC,CAAC;EACH,CAAC;;AAXDX,OAAA,CAAA4E,gBAAA,GAAAA,gBAAA;AAaA,SAAsBC,aAAaA,CAClCjF,cAAkC,EAClCc,OAAgB,EAChBoE,SAA0B,EAC1BC,SAAS,GAAG,KAAK;;IAEjB;IACAtF,gBAAA,CAAAmB,SAAS,CAACC,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;IAE1C,OAAOd,cAAc,CAACC,IAAI,CAAC;MAC1BC,MAAM,EAAE,oBAAoBiF,SAAS,GAAG,EAAE,GAAG,KAAK,EAAE;MACpDhF,MAAM,EAAE,CAACW,OAAO,EAAEoE,SAAS;KAC3B,CAAC;EACH,CAAC;;AAbD9E,OAAA,CAAA6E,aAAA,GAAAA,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}