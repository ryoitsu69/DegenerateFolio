{"ast":null,"code":"import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../maths/shapes/Rectangle.mjs';\n\"use strict\";\nconst defaultMatrix = new Matrix();\nclass Bounds {\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /** @default Infinity */\n    this.minX = Infinity;\n    /** @default Infinity */\n    this.minY = Infinity;\n    /** @default -Infinity */\n    this.maxX = -Infinity;\n    /** @default -Infinity */\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if bounds are empty.\n   * @returns - True if empty.\n   */\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n  /** The bounding rectangle of the bounds. */\n  get rectangle() {\n    if (!this._rectangle) {\n      this._rectangle = new Rectangle();\n    }\n    const rectangle = this._rectangle;\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      rectangle.x = 0;\n      rectangle.y = 0;\n      rectangle.width = 0;\n      rectangle.height = 0;\n    } else {\n      rectangle.copyFromBounds(this);\n    }\n    return rectangle;\n  }\n  /** Clears the bounds and resets. */\n  clear() {\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    return this;\n  }\n  /**\n   * Sets the bounds.\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   */\n  set(x0, y0, x1, y1) {\n    this.minX = x0;\n    this.minY = y0;\n    this.maxX = x1;\n    this.maxY = y1;\n  }\n  /**\n   * Adds sprite frame\n   * @param x0 - left X of frame\n   * @param y0 - top Y of frame\n   * @param x1 - right X of frame\n   * @param y1 - bottom Y of frame\n   * @param matrix\n   */\n  addFrame(x0, y0, x1, y1, matrix) {\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    let x = a * x0 + c * y0 + tx;\n    let y = b * x0 + d * y0 + ty;\n    if (x < minX) minX = x;\n    if (y < minY) minY = y;\n    if (x > maxX) maxX = x;\n    if (y > maxY) maxY = y;\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    if (x < minX) minX = x;\n    if (y < minY) minY = y;\n    if (x > maxX) maxX = x;\n    if (y > maxY) maxY = y;\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    if (x < minX) minX = x;\n    if (y < minY) minY = y;\n    if (x > maxX) maxX = x;\n    if (y > maxY) maxY = y;\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    if (x < minX) minX = x;\n    if (y < minY) minY = y;\n    if (x > maxX) maxX = x;\n    if (y > maxY) maxY = y;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Adds a rectangle to the bounds.\n   * @param rect - The rectangle to be added.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  addRect(rect, matrix) {\n    this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n  }\n  /**\n   * Adds other {@link Bounds}.\n   * @param bounds - The Bounds to be added\n   * @param matrix\n   */\n  addBounds(bounds, matrix) {\n    this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n  }\n  /**\n   * Adds other Bounds, masked with Bounds.\n   * @param mask - The Bounds to be added.\n   */\n  addBoundsMask(mask) {\n    this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n    this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n    this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n    this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n  }\n  /**\n   * Adds other Bounds, multiplied with matrix.\n   * @param matrix - The matrix to apply to the bounds.\n   */\n  applyMatrix(matrix) {\n    const minX = this.minX;\n    const minY = this.minY;\n    const maxX = this.maxX;\n    const maxY = this.maxY;\n    const {\n      a,\n      b,\n      c,\n      d,\n      tx,\n      ty\n    } = matrix;\n    let x = a * minX + c * minY + tx;\n    let y = b * minX + d * minY + ty;\n    this.minX = x;\n    this.minY = y;\n    this.maxX = x;\n    this.maxY = y;\n    x = a * maxX + c * minY + tx;\n    y = b * maxX + d * minY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * minX + c * maxY + tx;\n    y = b * minX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * maxX + c * maxY + tx;\n    y = b * maxX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n  }\n  /**\n   * Resizes the bounds object to include the given rectangle.\n   * @param rect - The rectangle to be included.\n   */\n  fit(rect) {\n    if (this.minX < rect.left) this.minX = rect.left;\n    if (this.maxX > rect.right) this.maxX = rect.right;\n    if (this.minY < rect.top) this.minY = rect.top;\n    if (this.maxY > rect.bottom) this.maxY = rect.bottom;\n    return this;\n  }\n  /**\n   * Resizes the bounds object to include the given bounds.\n   * @param left - The left value of the bounds.\n   * @param right - The right value of the bounds.\n   * @param top - The top value of the bounds.\n   * @param bottom - The bottom value of the bounds.\n   */\n  fitBounds(left, right, top, bottom) {\n    if (this.minX < left) this.minX = left;\n    if (this.maxX > right) this.maxX = right;\n    if (this.minY < top) this.minY = top;\n    if (this.maxY > bottom) this.maxY = bottom;\n    return this;\n  }\n  /**\n   * Pads bounds object, making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   */\n  pad(paddingX, paddingY = paddingX) {\n    this.minX -= paddingX;\n    this.maxX += paddingX;\n    this.minY -= paddingY;\n    this.maxY += paddingY;\n    return this;\n  }\n  /** Ceils the bounds. */\n  ceil() {\n    this.minX = Math.floor(this.minX);\n    this.minY = Math.floor(this.minY);\n    this.maxX = Math.ceil(this.maxX);\n    this.maxY = Math.ceil(this.maxY);\n    return this;\n  }\n  /** Clones the bounds. */\n  clone() {\n    return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n  }\n  /**\n   * Scales the bounds by the given values\n   * @param x - The X value to scale by.\n   * @param y - The Y value to scale by.\n   */\n  scale(x, y = x) {\n    this.minX *= x;\n    this.minY *= y;\n    this.maxX *= x;\n    this.maxY *= y;\n    return this;\n  }\n  /** the x value of the bounds. */\n  get x() {\n    return this.minX;\n  }\n  set x(value) {\n    const width = this.maxX - this.minX;\n    this.minX = value;\n    this.maxX = value + width;\n  }\n  /** the y value of the bounds. */\n  get y() {\n    return this.minY;\n  }\n  set y(value) {\n    const height = this.maxY - this.minY;\n    this.minY = value;\n    this.maxY = value + height;\n  }\n  /** the width value of the bounds. */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  set width(value) {\n    this.maxX = this.minX + value;\n  }\n  /** the height value of the bounds. */\n  get height() {\n    return this.maxY - this.minY;\n  }\n  set height(value) {\n    this.maxY = this.minY + value;\n  }\n  /** the left value of the bounds. */\n  get left() {\n    return this.minX;\n  }\n  /** the right value of the bounds. */\n  get right() {\n    return this.maxX;\n  }\n  /** the top value of the bounds. */\n  get top() {\n    return this.minY;\n  }\n  /** the bottom value of the bounds. */\n  get bottom() {\n    return this.maxY;\n  }\n  /** Is the bounds positive. */\n  get isPositive() {\n    return this.maxX - this.minX > 0 && this.maxY - this.minY > 0;\n  }\n  get isValid() {\n    return this.minX + this.minY !== Infinity;\n  }\n  /**\n   * Adds screen vertices from array\n   * @param vertexData - calculated vertices\n   * @param beginOffset - begin offset\n   * @param endOffset - end offset, excluded\n   * @param matrix\n   */\n  addVertexData(vertexData, beginOffset, endOffset, matrix) {\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const localX = vertexData[i];\n      const localY = vertexData[i + 1];\n      const x = a * localX + c * localY + tx;\n      const y = b * localX + d * localY + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if the point is contained within the bounds.\n   * @param x - x coordinate\n   * @param y - y coordinate\n   */\n  containsPoint(x, y) {\n    if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y) {\n      return true;\n    }\n    return false;\n  }\n  toString() {\n    return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n  }\n}\nexport { Bounds };","map":{"version":3,"names":["defaultMatrix","Matrix","Bounds","constructor","minX","Infinity","minY","maxX","maxY","matrix","isEmpty","rectangle","_rectangle","Rectangle","x","y","width","height","copyFromBounds","clear","set","x0","y0","x1","y1","addFrame","a","b","c","d","tx","ty","addRect","rect","addBounds","bounds","addBoundsMask","mask","applyMatrix","fit","left","right","top","bottom","fitBounds","pad","paddingX","paddingY","ceil","Math","floor","clone","scale","value","isPositive","isValid","addVertexData","vertexData","beginOffset","endOffset","i","localX","localY","containsPoint","toString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/container/bounds/Bounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../maths/shapes/Rectangle';\n\n/**\n * Simple bounds implementation instead of more ambiguous [number, number, number, number]\n * @memberof rendering\n */\nexport interface BoundsData\n{\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nconst defaultMatrix = new Matrix();\n\n// TODO optimisations\n// 1 - get rectangle could use a dirty flag, rather than setting the data each time is called\n// 2- getFrame ALWAYS assumes a matrix, could be optimised to avoid the matrix calculation if not needed\n\n/**\n * A representation of an AABB bounding box.\n * @memberof rendering\n */\nexport class Bounds\n{\n    /** @default Infinity */\n    public minX = Infinity;\n\n    /** @default Infinity */\n    public minY = Infinity;\n\n    /** @default -Infinity */\n    public maxX = -Infinity;\n\n    /** @default -Infinity */\n    public maxY = -Infinity;\n\n    public matrix = defaultMatrix;\n\n    private _rectangle: Rectangle;\n\n    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity)\n    {\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     * @returns - True if empty.\n     */\n    public isEmpty(): boolean\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /** The bounding rectangle of the bounds. */\n    get rectangle(): Rectangle\n    {\n        if (!this._rectangle)\n        {\n            this._rectangle = new Rectangle();\n        }\n\n        const rectangle = this._rectangle;\n\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            rectangle.x = 0;\n            rectangle.y = 0;\n            rectangle.width = 0;\n            rectangle.height = 0;\n        }\n        else\n        {\n            rectangle.copyFromBounds(this);\n        }\n\n        return rectangle;\n    }\n\n    /** Clears the bounds and resets. */\n    public clear(): this\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n\n        this.matrix = defaultMatrix;\n\n        return this;\n    }\n\n    /**\n     * Sets the bounds.\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    public set(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.minX = x0;\n        this.minY = y0;\n        this.maxX = x1;\n        this.maxY = y1;\n    }\n\n    /**\n     * Adds sprite frame\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     * @param matrix\n     */\n    public addFrame(x0: number, y0: number, x1: number, y1: number, matrix?: Matrix): void\n    {\n        matrix ||= this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds a rectangle to the bounds.\n     * @param rect - The rectangle to be added.\n     * @param matrix - The matrix to apply to the bounds.\n     */\n    public addRect(rect: Rectangle, matrix?: Matrix)\n    {\n        this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n    }\n\n    /**\n     * Adds other {@link Bounds}.\n     * @param bounds - The Bounds to be added\n     * @param matrix\n     */\n    public addBounds(bounds: BoundsData, matrix?: Matrix)\n    {\n        this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds.\n     * @param mask - The Bounds to be added.\n     */\n    public addBoundsMask(mask: Bounds): void\n    {\n        this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n        this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n        this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n        this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n    }\n\n    /**\n     * Adds other Bounds, multiplied with matrix.\n     * @param matrix - The matrix to apply to the bounds.\n     */\n    public applyMatrix(matrix: Matrix): void\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        // multiple bounds by matrix\n        const { a, b, c, d, tx, ty } = matrix;\n\n        let x = (a * minX) + (c * minY) + tx;\n        let y = (b * minX) + (d * minY) + ty;\n\n        this.minX = x;\n        this.minY = y;\n        this.maxX = x;\n        this.maxY = y;\n\n        x = (a * maxX) + (c * minY) + tx;\n        y = (b * maxX) + (d * minY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * minX) + (c * maxY) + tx;\n        y = (b * minX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * maxX) + (c * maxY) + tx;\n        y = (b * maxX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n    }\n\n    /**\n     * Resizes the bounds object to include the given rectangle.\n     * @param rect - The rectangle to be included.\n     */\n    public fit(rect: Rectangle): this\n    {\n        if (this.minX < rect.left) this.minX = rect.left;\n        if (this.maxX > rect.right) this.maxX = rect.right;\n\n        if (this.minY < rect.top) this.minY = rect.top;\n        if (this.maxY > rect.bottom) this.maxY = rect.bottom;\n\n        return this;\n    }\n\n    /**\n     * Resizes the bounds object to include the given bounds.\n     * @param left - The left value of the bounds.\n     * @param right - The right value of the bounds.\n     * @param top - The top value of the bounds.\n     * @param bottom - The bottom value of the bounds.\n     */\n    public fitBounds(left: number, right: number, top: number, bottom: number): this\n    {\n        if (this.minX < left) this.minX = left;\n        if (this.maxX > right) this.maxX = right;\n\n        if (this.minY < top) this.minY = top;\n        if (this.maxY > bottom) this.maxY = bottom;\n\n        return this;\n    }\n\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     */\n    public pad(paddingX: number, paddingY: number = paddingX): this\n    {\n        this.minX -= paddingX;\n        this.maxX += paddingX;\n\n        this.minY -= paddingY;\n        this.maxY += paddingY;\n\n        return this;\n    }\n\n    /** Ceils the bounds. */\n    public ceil(): this\n    {\n        this.minX = Math.floor(this.minX);\n        this.minY = Math.floor(this.minY);\n        this.maxX = Math.ceil(this.maxX);\n        this.maxY = Math.ceil(this.maxY);\n\n        return this;\n    }\n\n    /** Clones the bounds. */\n    public clone(): Bounds\n    {\n        return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n    }\n\n    /**\n     * Scales the bounds by the given values\n     * @param x - The X value to scale by.\n     * @param y - The Y value to scale by.\n     */\n    public scale(x: number, y: number = x): this\n    {\n        this.minX *= x;\n        this.minY *= y;\n        this.maxX *= x;\n        this.maxY *= y;\n\n        return this;\n    }\n\n    /** the x value of the bounds. */\n    get x(): number\n    {\n        return this.minX;\n    }\n    set x(value: number)\n    {\n        const width = this.maxX - this.minX;\n\n        this.minX = value;\n        this.maxX = value + width;\n    }\n\n    /** the y value of the bounds. */\n    get y(): number\n    {\n        return this.minY;\n    }\n\n    set y(value: number)\n    {\n        const height = this.maxY - this.minY;\n\n        this.minY = value;\n        this.maxY = value + height;\n    }\n\n    /** the width value of the bounds. */\n    get width(): number\n    {\n        return this.maxX - this.minX;\n    }\n\n    set width(value: number)\n    {\n        this.maxX = this.minX + value;\n    }\n\n    /** the height value of the bounds. */\n    get height(): number\n    {\n        return this.maxY - this.minY;\n    }\n\n    set height(value: number)\n    {\n        this.maxY = this.minY + value;\n    }\n\n    /** the left value of the bounds. */\n    get left(): number\n    {\n        return this.minX;\n    }\n\n    /** the right value of the bounds. */\n    get right(): number\n    {\n        return this.maxX;\n    }\n\n    /** the top value of the bounds. */\n    get top(): number\n    {\n        return this.minY;\n    }\n\n    /** the bottom value of the bounds. */\n    get bottom(): number\n    {\n        return this.maxY;\n    }\n\n    /** Is the bounds positive. */\n    get isPositive(): boolean\n    {\n        return (this.maxX - this.minX > 0) && (this.maxY - this.minY > 0);\n    }\n\n    get isValid(): boolean\n    {\n        return (this.minX + this.minY !== Infinity);\n    }\n\n    /**\n     * Adds screen vertices from array\n     * @param vertexData - calculated vertices\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     * @param matrix\n     */\n    public addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number, matrix?: Matrix): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        matrix ||= this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const localX = vertexData[i];\n            const localY = vertexData[i + 1];\n\n            const x = (a * localX) + (c * localY) + tx;\n            const y = (b * localX) + (d * localY) + ty;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Checks if the point is contained within the bounds.\n     * @param x - x coordinate\n     * @param y - y coordinate\n     */\n    public containsPoint(x: number, y: number): boolean\n    {\n        if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public toString(): string\n    {\n        // eslint-disable-next-line max-len\n        return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}