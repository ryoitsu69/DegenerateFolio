{"ast":null,"code":"\"use strict\";\n\nlet unsafeEval;\nfunction unsafeEvalSupported() {\n  if (typeof unsafeEval === \"boolean\") {\n    return unsafeEval;\n  }\n  try {\n    const func = new Function(\"param1\", \"param2\", \"param3\", \"return param1[param2] === param3;\");\n    unsafeEval = func({\n      a: \"b\"\n    }, \"a\", \"b\") === true;\n  } catch (e) {\n    unsafeEval = false;\n  }\n  return unsafeEval;\n}\nexport { unsafeEvalSupported };","map":{"version":3,"names":["unsafeEval","unsafeEvalSupported","func","Function","a","e"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/browser/unsafeEvalSupported.ts"],"sourcesContent":["// Cache the result to prevent running this over and over\nlet unsafeEval: boolean;\n\n/**\n * Not all platforms allow to generate function code (e.g., `new Function`).\n * this provides the platform-level detection.\n * @private\n * @returns {boolean} `true` if `new Function` is supported.\n */\nexport function unsafeEvalSupported(): boolean\n{\n    if (typeof unsafeEval === 'boolean')\n    {\n        return unsafeEval;\n    }\n\n    try\n    {\n        /* eslint-disable no-new-func */\n        const func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');\n        /* eslint-enable no-new-func */\n\n        unsafeEval = func({ a: 'b' }, 'a', 'b') === true;\n    }\n    catch (e)\n    {\n        unsafeEval = false;\n    }\n\n    return unsafeEval;\n}\n"],"mappings":";;AACA,IAAIA,UAAA;AAQG,SAASC,mBAChBA,CAAA;EACQ,WAAOD,UAAA,KAAe,SAC1B;IACW,OAAAA,UAAA;EAAA;EAIX;IAEI,MAAME,IAAA,GAAO,IAAIC,QAAA,CAAS,QAAU,YAAU,UAAU,mCAAmC;IAG3FH,UAAA,GAAaE,IAAA,CAAK;MAAEE,CAAA,EAAG;IAAA,CAAO,OAAK,GAAG,CAAM;EAAA,SAEzCC,CACP;IACiBL,UAAA;EAAA;EAGV,OAAAA,UAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}