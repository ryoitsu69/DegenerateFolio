{"ast":null,"code":"export { packageInfo } from './packageInfo.js';\n/** @internal Last-resort \"this\", if it gets here it probably would fail anyway */\nfunction evaluateThis(fn) {\n  return fn('return this');\n}\n/**\n * A cross-environment implementation for globalThis\n */\nexport const xglobal = /*#__PURE__*/typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis(Function);\n/**\n * Extracts a known global from the environment, applying a fallback if not found\n */\nexport function extractGlobal(name, fallback) {\n  // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea\n  // (as of now) as to why this looks like an \"any\" when we do cast it to a T\n  //\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return typeof xglobal[name] === 'undefined' ? fallback : xglobal[name];\n}\n/**\n * Expose a value as a known global, if not already defined\n */\nexport function exposeGlobal(name, fallback) {\n  if (typeof xglobal[name] === 'undefined') {\n    xglobal[name] = fallback;\n  }\n}","map":{"version":3,"names":["packageInfo","evaluateThis","fn","xglobal","globalThis","global","self","window","Function","extractGlobal","name","fallback","exposeGlobal"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/x-global/index.js"],"sourcesContent":["export { packageInfo } from './packageInfo.js';\n/** @internal Last-resort \"this\", if it gets here it probably would fail anyway */\nfunction evaluateThis(fn) {\n    return fn('return this');\n}\n/**\n * A cross-environment implementation for globalThis\n */\nexport const xglobal = /*#__PURE__*/ (typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof global !== 'undefined'\n        ? global\n        : typeof self !== 'undefined'\n            ? self\n            : typeof window !== 'undefined'\n                ? window\n                : evaluateThis(Function));\n/**\n * Extracts a known global from the environment, applying a fallback if not found\n */\nexport function extractGlobal(name, fallback) {\n    // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea\n    // (as of now) as to why this looks like an \"any\" when we do cast it to a T\n    //\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return typeof xglobal[name] === 'undefined'\n        ? fallback\n        : xglobal[name];\n}\n/**\n * Expose a value as a known global, if not already defined\n */\nexport function exposeGlobal(name, fallback) {\n    if (typeof xglobal[name] === 'undefined') {\n        xglobal[name] = fallback;\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C;AACA,SAASC,YAAYA,CAACC,EAAE,EAAE;EACtB,OAAOA,EAAE,CAAC,aAAa,CAAC;AAC5B;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAG,aAAe,OAAOC,UAAU,KAAK,WAAW,GACjEA,UAAU,GACV,OAAOC,MAAM,KAAK,WAAW,GACzBA,MAAM,GACN,OAAOC,IAAI,KAAK,WAAW,GACvBA,IAAI,GACJ,OAAOC,MAAM,KAAK,WAAW,GACzBA,MAAM,GACNN,YAAY,CAACO,QAAQ,CAAE;AACzC;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC1C;EACA;EACA;EACA;EACA,OAAO,OAAOR,OAAO,CAACO,IAAI,CAAC,KAAK,WAAW,GACrCC,QAAQ,GACRR,OAAO,CAACO,IAAI,CAAC;AACvB;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAACF,IAAI,EAAEC,QAAQ,EAAE;EACzC,IAAI,OAAOR,OAAO,CAACO,IAAI,CAAC,KAAK,WAAW,EAAE;IACtCP,OAAO,CAACO,IAAI,CAAC,GAAGC,QAAQ;EAC5B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}