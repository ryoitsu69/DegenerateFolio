{"ast":null,"code":"import { stringToU8a, u8aFixLength } from '@polkadot/util';\nimport { naclDecrypt } from '../nacl/index.js';\nimport { scryptEncode, scryptFromU8a } from '../scrypt/index.js';\nimport { ENCODING, NONCE_LENGTH, SCRYPT_LENGTH } from './constants.js';\nexport function jsonDecryptData(encrypted, passphrase) {\n  let encType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ENCODING;\n  if (!encrypted) {\n    throw new Error('No encrypted data available to decode');\n  } else if (encType.includes('xsalsa20-poly1305') && !passphrase) {\n    throw new Error('Password required to decode encrypted data');\n  }\n  let encoded = encrypted;\n  if (passphrase) {\n    let password;\n    if (encType.includes('scrypt')) {\n      const {\n        params,\n        salt\n      } = scryptFromU8a(encrypted);\n      password = scryptEncode(passphrase, salt, params).password;\n      encrypted = encrypted.subarray(SCRYPT_LENGTH);\n    } else {\n      password = stringToU8a(passphrase);\n    }\n    encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));\n  }\n  if (!encoded) {\n    throw new Error('Unable to decode using the supplied passphrase');\n  }\n  return encoded;\n}","map":{"version":3,"names":["stringToU8a","u8aFixLength","naclDecrypt","scryptEncode","scryptFromU8a","ENCODING","NONCE_LENGTH","SCRYPT_LENGTH","jsonDecryptData","encrypted","passphrase","encType","arguments","length","undefined","Error","includes","encoded","password","params","salt","subarray"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/json/decryptData.js"],"sourcesContent":["import { stringToU8a, u8aFixLength } from '@polkadot/util';\nimport { naclDecrypt } from '../nacl/index.js';\nimport { scryptEncode, scryptFromU8a } from '../scrypt/index.js';\nimport { ENCODING, NONCE_LENGTH, SCRYPT_LENGTH } from './constants.js';\nexport function jsonDecryptData(encrypted, passphrase, encType = ENCODING) {\n    if (!encrypted) {\n        throw new Error('No encrypted data available to decode');\n    }\n    else if (encType.includes('xsalsa20-poly1305') && !passphrase) {\n        throw new Error('Password required to decode encrypted data');\n    }\n    let encoded = encrypted;\n    if (passphrase) {\n        let password;\n        if (encType.includes('scrypt')) {\n            const { params, salt } = scryptFromU8a(encrypted);\n            password = scryptEncode(passphrase, salt, params).password;\n            encrypted = encrypted.subarray(SCRYPT_LENGTH);\n        }\n        else {\n            password = stringToU8a(passphrase);\n        }\n        encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));\n    }\n    if (!encoded) {\n        throw new Error('Unable to decode using the supplied passphrase');\n    }\n    return encoded;\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,YAAY,QAAQ,gBAAgB;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,EAAEC,aAAa,QAAQ,oBAAoB;AAChE,SAASC,QAAQ,EAAEC,YAAY,EAAEC,aAAa,QAAQ,gBAAgB;AACtE,OAAO,SAASC,eAAeA,CAACC,SAAS,EAAEC,UAAU,EAAsB;EAAA,IAApBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,QAAQ;EACrE,IAAI,CAACI,SAAS,EAAE;IACZ,MAAM,IAAIM,KAAK,CAAC,uCAAuC,CAAC;EAC5D,CAAC,MACI,IAAIJ,OAAO,CAACK,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAACN,UAAU,EAAE;IAC3D,MAAM,IAAIK,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,IAAIE,OAAO,GAAGR,SAAS;EACvB,IAAIC,UAAU,EAAE;IACZ,IAAIQ,QAAQ;IACZ,IAAIP,OAAO,CAACK,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAC5B,MAAM;QAAEG,MAAM;QAAEC;MAAK,CAAC,GAAGhB,aAAa,CAACK,SAAS,CAAC;MACjDS,QAAQ,GAAGf,YAAY,CAACO,UAAU,EAAEU,IAAI,EAAED,MAAM,CAAC,CAACD,QAAQ;MAC1DT,SAAS,GAAGA,SAAS,CAACY,QAAQ,CAACd,aAAa,CAAC;IACjD,CAAC,MACI;MACDW,QAAQ,GAAGlB,WAAW,CAACU,UAAU,CAAC;IACtC;IACAO,OAAO,GAAGf,WAAW,CAACO,SAAS,CAACY,QAAQ,CAACf,YAAY,CAAC,EAAEG,SAAS,CAACY,QAAQ,CAAC,CAAC,EAAEf,YAAY,CAAC,EAAEL,YAAY,CAACiB,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;EACnI;EACA,IAAI,CAACD,OAAO,EAAE;IACV,MAAM,IAAIF,KAAK,CAAC,gDAAgD,CAAC;EACrE;EACA,OAAOE,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}