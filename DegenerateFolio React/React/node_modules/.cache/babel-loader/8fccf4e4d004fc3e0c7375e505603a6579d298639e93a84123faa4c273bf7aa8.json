{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  EvaluateResultType,\n  EvaluateResultSuccess,\n  EvaluateResultException,\n  ExceptionDetails\n} = require('./evaluateResult');\nconst {\n  Message\n} = require('./scriptTypes');\nconst {\n  RealmInfo,\n  RealmType,\n  WindowRealmInfo\n} = require('./realmInfo');\nconst {\n  RemoteValue\n} = require('./protocolValue');\nconst {\n  Source\n} = require('./scriptTypes');\nconst {\n  WebDriverError\n} = require('../lib/error');\nclass ScriptManager {\n  constructor(driver) {\n    this._driver = driver;\n  }\n  async init(browsingContextIds) {\n    if (!(await this._driver.getCapabilities()).get('webSocketUrl')) {\n      throw Error('WebDriver instance must support BiDi protocol');\n    }\n    this.bidi = await this._driver.getBidi();\n    this._browsingContextIds = browsingContextIds;\n  }\n  async disownRealmScript(realmId, handles) {\n    const params = {\n      method: 'script.disown',\n      params: {\n        handles: handles,\n        target: {\n          realm: realmId\n        }\n      }\n    };\n    await this.bidi.send(params);\n  }\n  async disownBrowsingContextScript(browsingContextId, handles, sandbox = null) {\n    const params = {\n      method: 'script.disown',\n      params: {\n        handles: handles,\n        target: {\n          context: browsingContextId\n        }\n      }\n    };\n    if (sandbox != null) {\n      params.params.target['sandbox'] = sandbox;\n    }\n    await this.bidi.send(params);\n  }\n  async callFunctionInRealm(realmId, functionDeclaration, awaitPromise, argumentValueList = null, thisParameter = null, resultOwnership = null) {\n    const params = this.getCallFunctionParams('realm', realmId, null, functionDeclaration, awaitPromise, argumentValueList, thisParameter, resultOwnership);\n    const command = {\n      method: 'script.callFunction',\n      params\n    };\n    let response = await this.bidi.send(command);\n    return this.createEvaluateResult(response);\n  }\n  async callFunctionInBrowsingContext(browsingContextId, functionDeclaration, awaitPromise, argumentValueList = null, thisParameter = null, resultOwnership = null, sandbox = null) {\n    const params = this.getCallFunctionParams('contextTarget', browsingContextId, sandbox, functionDeclaration, awaitPromise, argumentValueList, thisParameter, resultOwnership);\n    const command = {\n      method: 'script.callFunction',\n      params\n    };\n    const response = await this.bidi.send(command);\n    return this.createEvaluateResult(response);\n  }\n  async evaluateFunctionInRealm(realmId, expression, awaitPromise, resultOwnership = null) {\n    const params = this.getEvaluateParams('realm', realmId, null, expression, awaitPromise, resultOwnership);\n    const command = {\n      method: 'script.evaluate',\n      params\n    };\n    let response = await this.bidi.send(command);\n    return this.createEvaluateResult(response);\n  }\n  async evaluateFunctionInBrowsingContext(browsingContextId, expression, awaitPromise, resultOwnership = null, sandbox = null) {\n    const params = this.getEvaluateParams('contextTarget', browsingContextId, sandbox, expression, awaitPromise, resultOwnership);\n    const command = {\n      method: 'script.evaluate',\n      params\n    };\n    let response = await this.bidi.send(command);\n    return this.createEvaluateResult(response);\n  }\n  async addPreloadScript(functionDeclaration, argumentValueList = [], sandbox = null) {\n    const params = {\n      functionDeclaration: functionDeclaration,\n      arguments: argumentValueList,\n      sandbox: sandbox\n    };\n    if (Array.isArray(this._browsingContextIds) && this._browsingContextIds.length > 0) {\n      params.contexts = this._browsingContextIds;\n    }\n    if (typeof this._browsingContextIds === 'string') {\n      params.contexts = new Array(this._browsingContextIds);\n    }\n    const command = {\n      method: 'script.addPreloadScript',\n      params\n    };\n    let response = await this.bidi.send(command);\n    return response.result.script;\n  }\n  async removePreloadScript(script) {\n    const params = {\n      script: script\n    };\n    const command = {\n      method: 'script.removePreloadScript',\n      params\n    };\n    let response = await this.bidi.send(command);\n    if ('error' in response) {\n      throw new WebDriverError(response.error);\n    }\n    return response.result;\n  }\n  getCallFunctionParams(targetType, id, sandbox, functionDeclaration, awaitPromise, argumentValueList = null, thisParameter = null, resultOwnership = null) {\n    const params = {\n      functionDeclaration: functionDeclaration,\n      awaitPromise: awaitPromise\n    };\n    if (targetType === 'contextTarget') {\n      if (sandbox != null) {\n        params['target'] = {\n          context: id,\n          sandbox: sandbox\n        };\n      } else {\n        params['target'] = {\n          context: id\n        };\n      }\n    } else {\n      params['target'] = {\n        realm: id\n      };\n    }\n    if (argumentValueList != null) {\n      let argumentParams = [];\n      argumentValueList.forEach(argumentValue => {\n        argumentParams.push(argumentValue.asMap());\n      });\n      params['arguments'] = argumentParams;\n    }\n    if (thisParameter != null) {\n      params['this'] = thisParameter;\n    }\n    if (resultOwnership != null) {\n      params['resultOwnership'] = resultOwnership;\n    }\n    return params;\n  }\n  getEvaluateParams(targetType, id, sandbox, expression, awaitPromise, resultOwnership = null) {\n    const params = {\n      expression: expression,\n      awaitPromise: awaitPromise\n    };\n    if (targetType === 'contextTarget') {\n      if (sandbox != null) {\n        params['target'] = {\n          context: id,\n          sandbox: sandbox\n        };\n      } else {\n        params['target'] = {\n          context: id\n        };\n      }\n    } else {\n      params['target'] = {\n        realm: id\n      };\n    }\n    if (resultOwnership != null) {\n      params['resultOwnership'] = resultOwnership;\n    }\n    return params;\n  }\n  createEvaluateResult(response) {\n    const type = response.result.type;\n    const realmId = response.result.realm;\n    let evaluateResult;\n    if (type === EvaluateResultType.SUCCESS) {\n      const result = response.result.result;\n      evaluateResult = new EvaluateResultSuccess(realmId, new RemoteValue(result));\n    } else {\n      const exceptionDetails = response.result.exceptionDetails;\n      evaluateResult = new EvaluateResultException(realmId, new ExceptionDetails(exceptionDetails));\n    }\n    return evaluateResult;\n  }\n  realmInfoMapper(realms) {\n    const realmsList = [];\n    realms.forEach(realm => {\n      realmsList.push(RealmInfo.fromJson(realm));\n    });\n    return realmsList;\n  }\n  async getAllRealms() {\n    const command = {\n      method: 'script.getRealms',\n      params: {}\n    };\n    let response = await this.bidi.send(command);\n    return this.realmInfoMapper(response.result.realms);\n  }\n  async getRealmsByType(type) {\n    const command = {\n      method: 'script.getRealms',\n      params: {\n        type: type\n      }\n    };\n    let response = await this.bidi.send(command);\n    return this.realmInfoMapper(response.result.realms);\n  }\n  async getRealmsInBrowsingContext(browsingContext) {\n    const command = {\n      method: 'script.getRealms',\n      params: {\n        context: browsingContext\n      }\n    };\n    let response = await this.bidi.send(command);\n    return this.realmInfoMapper(response.result.realms);\n  }\n  async getRealmsInBrowsingContextByType(browsingContext, type) {\n    const command = {\n      method: 'script.getRealms',\n      params: {\n        context: browsingContext,\n        type: type\n      }\n    };\n    let response = await this.bidi.send(command);\n    return this.realmInfoMapper(response.result.realms);\n  }\n  async onMessage(callback) {\n    await this.subscribeAndHandleEvent('script.message', callback);\n  }\n  async onRealmCreated(callback) {\n    await this.subscribeAndHandleEvent('script.realmCreated', callback);\n  }\n  async onRealmDestroyed(callback) {\n    await this.subscribeAndHandleEvent('script.realmDestroyed', callback);\n  }\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this.browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this.browsingContextIds);\n    } else {\n      await this.bidi.subscribe(eventType);\n    }\n    await this._on(callback);\n  }\n  async _on(callback) {\n    this.ws = await this.bidi.socket;\n    this.ws.on('message', event => {\n      const {\n        params\n      } = JSON.parse(Buffer.from(event.toString()));\n      if (params) {\n        let response = null;\n        if ('channel' in params) {\n          response = new Message(params.channel, new RemoteValue(params.data), new Source(params.source));\n        } else if ('realm' in params) {\n          if (params.type === RealmType.WINDOW) {\n            response = new WindowRealmInfo(params.realm, params.origin, params.type, params.context, params.sandbox);\n          } else if (params.realm !== null && params.type !== null) {\n            response = new RealmInfo(params.realm, params.origin, params.type);\n          } else if (params.realm !== null) {\n            response = params.realm;\n          }\n        }\n        callback(response);\n      }\n    });\n  }\n}\nasync function getScriptManagerInstance(browsingContextId, driver) {\n  let instance = new ScriptManager(driver);\n  await instance.init(browsingContextId);\n  return instance;\n}\nmodule.exports = getScriptManagerInstance;","map":{"version":3,"names":["EvaluateResultType","EvaluateResultSuccess","EvaluateResultException","ExceptionDetails","require","Message","RealmInfo","RealmType","WindowRealmInfo","RemoteValue","Source","WebDriverError","ScriptManager","constructor","driver","_driver","init","browsingContextIds","getCapabilities","get","Error","bidi","getBidi","_browsingContextIds","disownRealmScript","realmId","handles","params","method","target","realm","send","disownBrowsingContextScript","browsingContextId","sandbox","context","callFunctionInRealm","functionDeclaration","awaitPromise","argumentValueList","thisParameter","resultOwnership","getCallFunctionParams","command","response","createEvaluateResult","callFunctionInBrowsingContext","evaluateFunctionInRealm","expression","getEvaluateParams","evaluateFunctionInBrowsingContext","addPreloadScript","arguments","Array","isArray","length","contexts","result","script","removePreloadScript","error","targetType","id","argumentParams","forEach","argumentValue","push","asMap","type","evaluateResult","SUCCESS","exceptionDetails","realmInfoMapper","realms","realmsList","fromJson","getAllRealms","getRealmsByType","getRealmsInBrowsingContext","browsingContext","getRealmsInBrowsingContextByType","onMessage","callback","subscribeAndHandleEvent","onRealmCreated","onRealmDestroyed","eventType","subscribe","_on","ws","socket","on","event","JSON","parse","Buffer","from","toString","channel","data","source","WINDOW","origin","getScriptManagerInstance","instance","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/bidi/scriptManager.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  EvaluateResultType,\n  EvaluateResultSuccess,\n  EvaluateResultException,\n  ExceptionDetails,\n} = require('./evaluateResult')\nconst { Message } = require('./scriptTypes')\nconst { RealmInfo, RealmType, WindowRealmInfo } = require('./realmInfo')\nconst { RemoteValue } = require('./protocolValue')\nconst { Source } = require('./scriptTypes')\nconst { WebDriverError } = require('../lib/error')\n\nclass ScriptManager {\n  constructor(driver) {\n    this._driver = driver\n  }\n\n  async init(browsingContextIds) {\n    if (!(await this._driver.getCapabilities()).get('webSocketUrl')) {\n      throw Error('WebDriver instance must support BiDi protocol')\n    }\n\n    this.bidi = await this._driver.getBidi()\n    this._browsingContextIds = browsingContextIds\n  }\n\n  async disownRealmScript(realmId, handles) {\n    const params = {\n      method: 'script.disown',\n      params: {\n        handles: handles,\n        target: {\n          realm: realmId,\n        },\n      },\n    }\n\n    await this.bidi.send(params)\n  }\n\n  async disownBrowsingContextScript(browsingContextId, handles, sandbox = null) {\n    const params = {\n      method: 'script.disown',\n      params: {\n        handles: handles,\n        target: {\n          context: browsingContextId,\n        },\n      },\n    }\n\n    if (sandbox != null) {\n      params.params.target['sandbox'] = sandbox\n    }\n\n    await this.bidi.send(params)\n  }\n\n  async callFunctionInRealm(\n    realmId,\n    functionDeclaration,\n    awaitPromise,\n    argumentValueList = null,\n    thisParameter = null,\n    resultOwnership = null,\n  ) {\n    const params = this.getCallFunctionParams(\n      'realm',\n      realmId,\n      null,\n      functionDeclaration,\n      awaitPromise,\n      argumentValueList,\n      thisParameter,\n      resultOwnership,\n    )\n\n    const command = {\n      method: 'script.callFunction',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  async callFunctionInBrowsingContext(\n    browsingContextId,\n    functionDeclaration,\n    awaitPromise,\n    argumentValueList = null,\n    thisParameter = null,\n    resultOwnership = null,\n    sandbox = null,\n  ) {\n    const params = this.getCallFunctionParams(\n      'contextTarget',\n      browsingContextId,\n      sandbox,\n      functionDeclaration,\n      awaitPromise,\n      argumentValueList,\n      thisParameter,\n      resultOwnership,\n    )\n\n    const command = {\n      method: 'script.callFunction',\n      params,\n    }\n    const response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  async evaluateFunctionInRealm(realmId, expression, awaitPromise, resultOwnership = null) {\n    const params = this.getEvaluateParams('realm', realmId, null, expression, awaitPromise, resultOwnership)\n\n    const command = {\n      method: 'script.evaluate',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  async evaluateFunctionInBrowsingContext(\n    browsingContextId,\n    expression,\n    awaitPromise,\n    resultOwnership = null,\n    sandbox = null,\n  ) {\n    const params = this.getEvaluateParams(\n      'contextTarget',\n      browsingContextId,\n      sandbox,\n      expression,\n      awaitPromise,\n      resultOwnership,\n    )\n\n    const command = {\n      method: 'script.evaluate',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  async addPreloadScript(functionDeclaration, argumentValueList = [], sandbox = null) {\n    const params = {\n      functionDeclaration: functionDeclaration,\n      arguments: argumentValueList,\n      sandbox: sandbox,\n    }\n\n    if (Array.isArray(this._browsingContextIds) && this._browsingContextIds.length > 0) {\n      params.contexts = this._browsingContextIds\n    }\n\n    if (typeof this._browsingContextIds === 'string') {\n      params.contexts = new Array(this._browsingContextIds)\n    }\n\n    const command = {\n      method: 'script.addPreloadScript',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return response.result.script\n  }\n\n  async removePreloadScript(script) {\n    const params = { script: script }\n    const command = {\n      method: 'script.removePreloadScript',\n      params,\n    }\n    let response = await this.bidi.send(command)\n    if ('error' in response) {\n      throw new WebDriverError(response.error)\n    }\n    return response.result\n  }\n\n  getCallFunctionParams(\n    targetType,\n    id,\n    sandbox,\n    functionDeclaration,\n    awaitPromise,\n    argumentValueList = null,\n    thisParameter = null,\n    resultOwnership = null,\n  ) {\n    const params = {\n      functionDeclaration: functionDeclaration,\n      awaitPromise: awaitPromise,\n    }\n    if (targetType === 'contextTarget') {\n      if (sandbox != null) {\n        params['target'] = { context: id, sandbox: sandbox }\n      } else {\n        params['target'] = { context: id }\n      }\n    } else {\n      params['target'] = { realm: id }\n    }\n\n    if (argumentValueList != null) {\n      let argumentParams = []\n      argumentValueList.forEach((argumentValue) => {\n        argumentParams.push(argumentValue.asMap())\n      })\n      params['arguments'] = argumentParams\n    }\n\n    if (thisParameter != null) {\n      params['this'] = thisParameter\n    }\n\n    if (resultOwnership != null) {\n      params['resultOwnership'] = resultOwnership\n    }\n\n    return params\n  }\n\n  getEvaluateParams(targetType, id, sandbox, expression, awaitPromise, resultOwnership = null) {\n    const params = {\n      expression: expression,\n      awaitPromise: awaitPromise,\n    }\n    if (targetType === 'contextTarget') {\n      if (sandbox != null) {\n        params['target'] = { context: id, sandbox: sandbox }\n      } else {\n        params['target'] = { context: id }\n      }\n    } else {\n      params['target'] = { realm: id }\n    }\n    if (resultOwnership != null) {\n      params['resultOwnership'] = resultOwnership\n    }\n\n    return params\n  }\n\n  createEvaluateResult(response) {\n    const type = response.result.type\n    const realmId = response.result.realm\n    let evaluateResult\n\n    if (type === EvaluateResultType.SUCCESS) {\n      const result = response.result.result\n      evaluateResult = new EvaluateResultSuccess(realmId, new RemoteValue(result))\n    } else {\n      const exceptionDetails = response.result.exceptionDetails\n      evaluateResult = new EvaluateResultException(realmId, new ExceptionDetails(exceptionDetails))\n    }\n    return evaluateResult\n  }\n\n  realmInfoMapper(realms) {\n    const realmsList = []\n    realms.forEach((realm) => {\n      realmsList.push(RealmInfo.fromJson(realm))\n    })\n    return realmsList\n  }\n\n  async getAllRealms() {\n    const command = {\n      method: 'script.getRealms',\n      params: {},\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  async getRealmsByType(type) {\n    const command = {\n      method: 'script.getRealms',\n      params: { type: type },\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  async getRealmsInBrowsingContext(browsingContext) {\n    const command = {\n      method: 'script.getRealms',\n      params: { context: browsingContext },\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  async getRealmsInBrowsingContextByType(browsingContext, type) {\n    const command = {\n      method: 'script.getRealms',\n      params: { context: browsingContext, type: type },\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  async onMessage(callback) {\n    await this.subscribeAndHandleEvent('script.message', callback)\n  }\n\n  async onRealmCreated(callback) {\n    await this.subscribeAndHandleEvent('script.realmCreated', callback)\n  }\n\n  async onRealmDestroyed(callback) {\n    await this.subscribeAndHandleEvent('script.realmDestroyed', callback)\n  }\n\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this.browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this.browsingContextIds)\n    } else {\n      await this.bidi.subscribe(eventType)\n    }\n    await this._on(callback)\n  }\n\n  async _on(callback) {\n    this.ws = await this.bidi.socket\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params) {\n        let response = null\n        if ('channel' in params) {\n          response = new Message(params.channel, new RemoteValue(params.data), new Source(params.source))\n        } else if ('realm' in params) {\n          if (params.type === RealmType.WINDOW) {\n            response = new WindowRealmInfo(params.realm, params.origin, params.type, params.context, params.sandbox)\n          } else if (params.realm !== null && params.type !== null) {\n            response = new RealmInfo(params.realm, params.origin, params.type)\n          } else if (params.realm !== null) {\n            response = params.realm\n          }\n        }\n        callback(response)\n      }\n    })\n  }\n}\n\nasync function getScriptManagerInstance(browsingContextId, driver) {\n  let instance = new ScriptManager(driver)\n  await instance.init(browsingContextId)\n  return instance\n}\n\nmodule.exports = getScriptManagerInstance\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}