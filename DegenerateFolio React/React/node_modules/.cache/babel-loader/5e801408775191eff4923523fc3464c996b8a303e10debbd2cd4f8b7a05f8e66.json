{"ast":null,"code":"function logPrettyShaderError(gl, shader) {\n  const shaderSrc = gl.getShaderSource(shader).split(`\n`).map((line, index) => `${index}: ${line}`),\n    shaderLog = gl.getShaderInfoLog(shader),\n    splitShader = shaderLog.split(`\n`),\n    dedupe = {},\n    lineNumbers = splitShader.map(line => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"))).filter(n => n && !dedupe[n] ? (dedupe[n] = !0, !0) : !1),\n    logArgs = [\"\"];\n  lineNumbers.forEach(number => {\n    shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`, logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  const fragmentSourceToLog = shaderSrc.join(`\n`);\n  logArgs[0] = fragmentSourceToLog, console.error(shaderLog), console.groupCollapsed(\"click to view full shader code\"), console.warn(...logArgs), console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  gl.getProgramParameter(program, gl.LINK_STATUS) || (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) || logPrettyShaderError(gl, vertexShader), gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) || logPrettyShaderError(gl, fragmentShader), console.error(\"PixiJS Error: Could not initialize shader.\"), gl.getProgramInfoLog(program) !== \"\" && console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program)));\n}\nexport { logProgramError };","map":{"version":3,"names":["logPrettyShaderError","gl","shader","shaderSrc","getShaderSource","split","map","line","index","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","parseFloat","replace","filter","n","logArgs","forEach","number","push","fragmentSourceToLog","join","console","error","groupCollapsed","warn","groupEnd","logProgramError","program","vertexShader","fragmentShader","getProgramParameter","LINK_STATUS","getShaderParameter","COMPILE_STATUS","getProgramInfoLog"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/shader/utils/logProgramError.ts"],"sourcesContent":["/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n"],"mappings":"AAMA,SAASA,qBAAqBC,EAAA,EAA2BC,MAAA,EACzD;EACI,MAAMC,SAAA,GAAYF,EAAA,CAAGG,eAAA,CAAgBF,MAAM,EACtCG,KAAA,CAAM;AAAA,CAAI,EACVC,GAAA,CAAI,CAACC,IAAA,EAAMC,KAAA,KAAU,GAAGA,KAAK,KAAKD,IAAI,EAAE;IAEvCE,SAAA,GAAYR,EAAA,CAAGS,gBAAA,CAAiBR,MAAM;IACtCS,WAAA,GAAcF,SAAA,CAAUJ,KAAA,CAAM;AAAA,CAAI;IAElCO,MAAA,GAAkC,CAAC;IAEnCC,WAAA,GAAcF,WAAA,CAAYL,GAAA,CAAKC,IAAA,IAASO,UAAA,CAAWP,IAAA,CAAKQ,OAAA,CAAQ,4BAA4B,IAAI,CAAC,CAAC,EACnGC,MAAA,CAAQC,CAAA,IAEDA,CAAA,IAAK,CAACL,MAAA,CAAOK,CAAC,KAEdL,MAAA,CAAOK,CAAC,IAAI,IAEL,MAGJ,EACV;IAECC,OAAA,GAAU,CAAC,EAAE;EAEPL,WAAA,CAAAM,OAAA,CAASC,MAAA,IACrB;IACIjB,SAAA,CAAUiB,MAAA,GAAS,CAAC,IAAI,KAAKjB,SAAA,CAAUiB,MAAA,GAAS,CAAC,CAAC,MAClDF,OAAA,CAAQG,IAAA,CAAK,uDAAuD,iBAAiB;EAAA,CACxF;EAEK,MAAAC,mBAAA,GAAsBnB,SAAA,CACvBoB,IAAA,CAAK;AAAA,CAAI;EAEdL,OAAA,CAAQ,CAAC,IAAII,mBAAA,EAEbE,OAAA,CAAQC,KAAA,CAAMhB,SAAS,GAGvBe,OAAA,CAAQE,cAAA,CAAe,gCAAgC,GACvDF,OAAA,CAAQG,IAAA,CAAK,GAAGT,OAAO,GAEvBM,OAAA,CAAQI,QAAA;AACZ;AAUO,SAASC,gBACZ5B,EAAA,EACA6B,OAAA,EACAC,YAAA,EACAC,cAAA,EAEJ;EAES/B,EAAA,CAAGgC,mBAAA,CAAoBH,OAAA,EAAS7B,EAAA,CAAGiC,WAAW,MAE1CjC,EAAA,CAAGkC,kBAAA,CAAmBJ,YAAA,EAAc9B,EAAA,CAAGmC,cAAc,KAEtDpC,oBAAA,CAAqBC,EAAA,EAAI8B,YAAY,GAGpC9B,EAAA,CAAGkC,kBAAA,CAAmBH,cAAA,EAAgB/B,EAAA,CAAGmC,cAAc,KAExDpC,oBAAA,CAAqBC,EAAA,EAAI+B,cAAc,GAG3CR,OAAA,CAAQC,KAAA,CAAM,4CAA4C,GAGtDxB,EAAA,CAAGoC,iBAAA,CAAkBP,OAAO,MAAM,MAElCN,OAAA,CAAQG,IAAA,CAAK,0CAA0C1B,EAAA,CAAGoC,iBAAA,CAAkBP,OAAO,CAAC;AAGhG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}