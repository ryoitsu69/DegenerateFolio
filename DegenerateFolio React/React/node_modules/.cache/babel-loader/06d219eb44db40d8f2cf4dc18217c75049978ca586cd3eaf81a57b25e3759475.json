{"ast":null,"code":"import { DOMAdapter } from '../environment/adapter.mjs';\n\"use strict\";\nfunction assertPath(path2) {\n  if (typeof path2 !== \"string\") {\n    throw new TypeError(`Path must be a string. Received ${JSON.stringify(path2)}`);\n  }\n}\nfunction removeUrlParams(url) {\n  const re = url.split(\"?\")[0];\n  return re.split(\"#\")[0];\n}\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction replaceAll(str, find, replace) {\n  return str.replace(new RegExp(escapeRegExp(find), \"g\"), replace);\n}\nfunction normalizeStringPosix(path2, allowAboveRoot) {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code = -1;\n  for (let i = 0; i <= path2.length; ++i) {\n    if (i < path2.length) {\n      code = path2.charCodeAt(i);\n    } else if (code === 47) {\n      break;\n    } else {\n      code = 47;\n    }\n    if (code === 47) {\n      if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = \"\";\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) {\n            res += \"/..\";\n          } else {\n            res = \"..\";\n          }\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += `/${path2.slice(lastSlash + 1, i)}`;\n        } else {\n          res = path2.slice(lastSlash + 1, i);\n        }\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nconst path = {\n  /**\n   * Converts a path to posix format.\n   * @param path - The path to convert to posix\n   */\n  toPosix(path2) {\n    return replaceAll(path2, \"\\\\\", \"/\");\n  },\n  /**\n   * Checks if the path is a URL e.g. http://, https://\n   * @param path - The path to check\n   */\n  isUrl(path2) {\n    return /^https?:/.test(this.toPosix(path2));\n  },\n  /**\n   * Checks if the path is a data URL\n   * @param path - The path to check\n   */\n  isDataUrl(path2) {\n    return /^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i.test(path2);\n  },\n  /**\n   * Checks if the path is a blob URL\n   * @param path - The path to check\n   */\n  isBlobUrl(path2) {\n    return path2.startsWith(\"blob:\");\n  },\n  /**\n   * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n   * This will return true for windows file paths\n   * @param path - The path to check\n   */\n  hasProtocol(path2) {\n    return /^[^/:]+:/.test(this.toPosix(path2));\n  },\n  /**\n   * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n   * @param path - The path to get the protocol from\n   */\n  getProtocol(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    const matchFile = /^file:\\/\\/\\//.exec(path2);\n    if (matchFile) {\n      return matchFile[0];\n    }\n    const matchProtocol = /^[^/:]+:\\/{0,2}/.exec(path2);\n    if (matchProtocol) {\n      return matchProtocol[0];\n    }\n    return \"\";\n  },\n  /**\n   * Converts URL to an absolute path.\n   * When loading from a Web Worker, we must use absolute paths.\n   * If the URL is already absolute we return it as is\n   * If it's not, we convert it\n   * @param url - The URL to test\n   * @param customBaseUrl - The base URL to use\n   * @param customRootUrl - The root URL to use\n   */\n  toAbsolute(url, customBaseUrl, customRootUrl) {\n    assertPath(url);\n    if (this.isDataUrl(url) || this.isBlobUrl(url)) return url;\n    const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? DOMAdapter.get().getBaseUrl()));\n    const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n    url = this.toPosix(url);\n    if (url.startsWith(\"/\")) {\n      return path.join(rootUrl, url.slice(1));\n    }\n    const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n    return absolutePath;\n  },\n  /**\n   * Normalizes the given path, resolving '..' and '.' segments\n   * @param path - The path to normalize\n   */\n  normalize(path2) {\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    if (this.isDataUrl(path2) || this.isBlobUrl(path2)) return path2;\n    path2 = this.toPosix(path2);\n    let protocol = \"\";\n    const isAbsolute = path2.startsWith(\"/\");\n    if (this.hasProtocol(path2)) {\n      protocol = this.rootname(path2);\n      path2 = path2.slice(protocol.length);\n    }\n    const trailingSeparator = path2.endsWith(\"/\");\n    path2 = normalizeStringPosix(path2, false);\n    if (path2.length > 0 && trailingSeparator) path2 += \"/\";\n    if (isAbsolute) return `/${path2}`;\n    return protocol + path2;\n  },\n  /**\n   * Determines if path is an absolute path.\n   * Absolute paths can be urls, data urls, or paths on disk\n   * @param path - The path to test\n   */\n  isAbsolute(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    if (this.hasProtocol(path2)) return true;\n    return path2.startsWith(\"/\");\n  },\n  /**\n   * Joins all given path segments together using the platform-specific separator as a delimiter,\n   * then normalizes the resulting path\n   * @param segments - The segments of the path to join\n   */\n  join(...segments) {\n    if (segments.length === 0) {\n      return \".\";\n    }\n    let joined;\n    for (let i = 0; i < segments.length; ++i) {\n      const arg = segments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === void 0) joined = arg;else {\n          const prevArg = segments[i - 1] ?? \"\";\n          if (this.joinExtensions.includes(this.extname(prevArg).toLowerCase())) {\n            joined += `/../${arg}`;\n          } else {\n            joined += `/${arg}`;\n          }\n        }\n      }\n    }\n    if (joined === void 0) {\n      return \".\";\n    }\n    return this.normalize(joined);\n  },\n  /**\n   * Returns the directory name of a path\n   * @param path - The path to parse\n   */\n  dirname(path2) {\n    assertPath(path2);\n    if (path2.length === 0) return \".\";\n    path2 = this.toPosix(path2);\n    let code = path2.charCodeAt(0);\n    const hasRoot = code === 47;\n    let end = -1;\n    let matchedSlash = true;\n    const proto = this.getProtocol(path2);\n    const origpath = path2;\n    path2 = path2.slice(proto.length);\n    for (let i = path2.length - 1; i >= 1; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        matchedSlash = false;\n      }\n    }\n    if (end === -1) return hasRoot ? \"/\" : this.isUrl(origpath) ? proto + path2 : proto;\n    if (hasRoot && end === 1) return \"//\";\n    return proto + path2.slice(0, end);\n  },\n  /**\n   * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n   * @param path - The path to parse\n   */\n  rootname(path2) {\n    assertPath(path2);\n    path2 = this.toPosix(path2);\n    let root = \"\";\n    if (path2.startsWith(\"/\")) root = \"/\";else {\n      root = this.getProtocol(path2);\n    }\n    if (this.isUrl(path2)) {\n      const index = path2.indexOf(\"/\", root.length);\n      if (index !== -1) {\n        root = path2.slice(0, index);\n      } else root = path2;\n      if (!root.endsWith(\"/\")) root += \"/\";\n    }\n    return root;\n  },\n  /**\n   * Returns the last portion of a path\n   * @param path - The path to test\n   * @param ext - Optional extension to remove\n   */\n  basename(path2, ext) {\n    assertPath(path2);\n    if (ext) assertPath(ext);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let start = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i;\n    if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {\n      if (ext.length === path2.length && ext === path2) return \"\";\n      let extIdx = ext.length - 1;\n      let firstNonSlashEnd = -1;\n      for (i = path2.length - 1; i >= 0; --i) {\n        const code = path2.charCodeAt(i);\n        if (code === 47) {\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                end = i;\n              }\n            } else {\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path2.length;\n      return path2.slice(start, end);\n    }\n    for (i = path2.length - 1; i >= 0; --i) {\n      if (path2.charCodeAt(i) === 47) {\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n    if (end === -1) return \"\";\n    return path2.slice(start, end);\n  },\n  /**\n   * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n   * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n   * the first character of the basename of path, an empty string is returned.\n   * @param path - The path to parse\n   */\n  extname(path2) {\n    assertPath(path2);\n    path2 = removeUrlParams(this.toPosix(path2));\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let preDotState = 0;\n    for (let i = path2.length - 1; i >= 0; --i) {\n      const code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return \"\";\n    }\n    return path2.slice(startDot, end);\n  },\n  /**\n   * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n   * @param path - The path to parse\n   */\n  parse(path2) {\n    assertPath(path2);\n    const ret = {\n      root: \"\",\n      dir: \"\",\n      base: \"\",\n      ext: \"\",\n      name: \"\"\n    };\n    if (path2.length === 0) return ret;\n    path2 = removeUrlParams(this.toPosix(path2));\n    let code = path2.charCodeAt(0);\n    const isAbsolute = this.isAbsolute(path2);\n    let start;\n    const protocol = \"\";\n    ret.root = this.rootname(path2);\n    if (isAbsolute || this.hasProtocol(path2)) {\n      start = 1;\n    } else {\n      start = 0;\n    }\n    let startDot = -1;\n    let startPart = 0;\n    let end = -1;\n    let matchedSlash = true;\n    let i = path2.length - 1;\n    let preDotState = 0;\n    for (; i >= start; --i) {\n      code = path2.charCodeAt(i);\n      if (code === 47) {\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46) {\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        preDotState = -1;\n      }\n    }\n    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path2.slice(1, end);else ret.base = ret.name = path2.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path2.slice(1, startDot);\n        ret.base = path2.slice(1, end);\n      } else {\n        ret.name = path2.slice(startPart, startDot);\n        ret.base = path2.slice(startPart, end);\n      }\n      ret.ext = path2.slice(startDot, end);\n    }\n    ret.dir = this.dirname(path2);\n    if (protocol) ret.dir = protocol + ret.dir;\n    return ret;\n  },\n  sep: \"/\",\n  delimiter: \":\",\n  joinExtensions: [\".html\"]\n};\nexport { path };","map":{"version":3,"names":["assertPath","path2","TypeError","JSON","stringify","removeUrlParams","url","re","split","escapeRegExp","string","replace","replaceAll","str","find","RegExp","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","code","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","path","toPosix","isUrl","test","isDataUrl","isBlobUrl","startsWith","hasProtocol","getProtocol","matchFile","exec","matchProtocol","toAbsolute","customBaseUrl","customRootUrl","baseUrl","DOMAdapter","get","getBaseUrl","rootUrl","rootname","join","absolutePath","isAbsolute","normalize","protocol","trailingSeparator","endsWith","segments","joined","arg","prevArg","joinExtensions","includes","extname","toLowerCase","dirname","hasRoot","end","matchedSlash","proto","origpath","root","index","indexOf","basename","ext","start","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","parse","ret","dir","base","name","sep","delimiter"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/path.ts"],"sourcesContent":["import { DOMAdapter } from '../environment/adapter';\n\nfunction assertPath(path: string)\n{\n    if (typeof path !== 'string')\n    {\n        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path)}`);\n    }\n}\n\nfunction removeUrlParams(url: string): string\n{\n    const re = url.split('?')[0];\n\n    return re.split('#')[0];\n}\n\nfunction escapeRegExp(string: string)\n{\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nfunction replaceAll(str: string, find: string, replace: string)\n{\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path: string, allowAboveRoot: boolean)\n{\n    let res = '';\n    let lastSegmentLength = 0;\n    let lastSlash = -1;\n    let dots = 0;\n    let code = -1;\n\n    for (let i = 0; i <= path.length; ++i)\n    {\n        if (i < path.length)\n        {\n            code = path.charCodeAt(i);\n        }\n        else if (code === 47)\n        {\n            break;\n        }\n        else\n        {\n            code = 47;\n        }\n        if (code === 47)\n        {\n            if (lastSlash === i - 1 || dots === 1)\n            {\n                // NOOP\n            }\n            else if (lastSlash !== i - 1 && dots === 2)\n            {\n                if (\n                    res.length < 2\n                    || lastSegmentLength !== 2\n                    || res.charCodeAt(res.length - 1) !== 46\n                    || res.charCodeAt(res.length - 2) !== 46\n                )\n                {\n                    if (res.length > 2)\n                    {\n                        const lastSlashIndex = res.lastIndexOf('/');\n\n                        if (lastSlashIndex !== res.length - 1)\n                        {\n                            if (lastSlashIndex === -1)\n                            {\n                                res = '';\n                                lastSegmentLength = 0;\n                            }\n                            else\n                            {\n                                res = res.slice(0, lastSlashIndex);\n                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n                            }\n                            lastSlash = i;\n                            dots = 0;\n                            continue;\n                        }\n                    }\n                    else if (res.length === 2 || res.length === 1)\n                    {\n                        res = '';\n                        lastSegmentLength = 0;\n                        lastSlash = i;\n                        dots = 0;\n                        continue;\n                    }\n                }\n                if (allowAboveRoot)\n                {\n                    if (res.length > 0)\n                    { res += '/..'; }\n                    else\n                    { res = '..'; }\n                    lastSegmentLength = 2;\n                }\n            }\n            else\n            {\n                if (res.length > 0)\n                {\n                    res += `/${path.slice(lastSlash + 1, i)}`;\n                }\n                else\n                {\n                    res = path.slice(lastSlash + 1, i);\n                }\n                lastSegmentLength = i - lastSlash - 1;\n            }\n            lastSlash = i;\n            dots = 0;\n        }\n        else if (code === 46 && dots !== -1)\n        {\n            ++dots;\n        }\n        else\n        {\n            dots = -1;\n        }\n    }\n\n    return res;\n}\n\n/**\n * Path utilities for working with URLs and file paths in a cross-platform way.\n * All paths that are passed in will become normalized to have posix separators.\n * ```js\n * import { path } from 'pixi.js';\n *\n * path.normalize('http://www.example.com/foo/bar/../baz'); // http://www.example.com/foo/baz\n * ```\n * @memberof utils\n */\nexport interface Path\n{\n    /**\n     * Converts a path to posix format.\n     * @param path - The path to convert to posix\n     */\n    toPosix: (path: string) => string;\n    /**\n     * Checks if the path is a URL e.g. http://, https://\n     * @param path - The path to check\n     */\n    isUrl: (path: string) => boolean;\n    /**\n     * Checks if the path is a data URL\n     * @param path - The path to check\n     */\n    isDataUrl: (path: string) => boolean;\n    /**\n     * Checks if the path is a blob URL\n     * @param path - The path to check\n     */\n    isBlobUrl: (path: string) => boolean;\n    /**\n     * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n     * This will return true for windows file paths\n     * @param path - The path to check\n     */\n    hasProtocol: (path: string) => boolean;\n    /**\n     * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n     * @param path - The path to get the protocol from\n     */\n    getProtocol: (path: string) => string;\n    /**\n     * Converts URL to an absolute path.\n     * When loading from a Web Worker, we must use absolute paths.\n     * If the URL is already absolute we return it as is\n     * If it's not, we convert it\n     * @param url - The URL to test\n     * @param customBaseUrl - The base URL to use\n     * @param customRootUrl - The root URL to use\n     */\n    toAbsolute: (url: string, baseUrl?: string, rootUrl?: string) => string;\n    /**\n     * Normalizes the given path, resolving '..' and '.' segments\n     * @param path - The path to normalize\n     */\n    normalize: (path: string) => string;\n    /**\n     * Determines if path is an absolute path.\n     * Absolute paths can be urls, data urls, or paths on disk\n     * @param path - The path to test\n     */\n    isAbsolute: (path: string) => boolean;\n    /**\n     * Joins all given path segments together using the platform-specific separator as a delimiter,\n     * then normalizes the resulting path\n     * @param segments - The segments of the path to join\n     */\n    join: (...paths: string[]) => string;\n    /**\n     * Returns the directory name of a path\n     * @param path - The path to parse\n     */\n    dirname: (path: string) => string;\n    /**\n     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n     * @param path - The path to parse\n     */\n    rootname: (path: string) => string;\n    /**\n     * Returns the last portion of a path\n     * @param path - The path to test\n     * @param ext - Optional extension to remove\n     */\n    basename: (path: string, ext?: string) => string;\n    /**\n     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n     * the first character of the basename of path, an empty string is returned.\n     * @param path - The path to parse\n     */\n    extname: (path: string) => string;\n    /**\n     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n     * @param path - The path to parse\n     */\n    parse: (path: string) => { root?: string, dir?: string, base?: string, ext?: string, name?: string };\n    sep: string,\n    delimiter: string,\n    joinExtensions: string[],\n}\n\n/**\n * Path utilities for working with URLs and file paths in a cross-platform way.\n * All paths that are passed in will become normalized to have posix separators.\n * ```js\n * import { path } from 'pixi.js';\n *\n * path.normalize('http://www.example.com/foo/bar/../baz'); // http://www.example.com/foo/baz\n * ```\n * @see {@link utils.Path}\n * @memberof utils\n */\nexport const path: Path = {\n    /**\n     * Converts a path to posix format.\n     * @param path - The path to convert to posix\n     */\n    toPosix(path: string) { return replaceAll(path, '\\\\', '/'); },\n    /**\n     * Checks if the path is a URL e.g. http://, https://\n     * @param path - The path to check\n     */\n    isUrl(path: string) { return (/^https?:/).test(this.toPosix(path)); },\n    /**\n     * Checks if the path is a data URL\n     * @param path - The path to check\n     */\n    isDataUrl(path: string)\n    {\n        // eslint-disable-next-line max-len\n        return (/^data:([a-z]+\\/[a-z0-9-+.]+(;[a-z0-9-.!#$%*+.{}|~`]+=[a-z0-9-.!#$%*+.{}()_|~`]+)*)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s<>]*?)$/i)\n            .test(path);\n    },\n    /**\n     * Checks if the path is a blob URL\n     * @param path - The path to check\n     */\n    isBlobUrl(path: string)\n    {\n        // Not necessary to have an exact regex to match the blob URLs\n        return path.startsWith('blob:');\n    },\n    /**\n     * Checks if the path has a protocol e.g. http://, https://, file:///, data:, blob:, C:/\n     * This will return true for windows file paths\n     * @param path - The path to check\n     */\n    hasProtocol(path: string) { return (/^[^/:]+:/).test(this.toPosix(path)); },\n    /**\n     * Returns the protocol of the path e.g. http://, https://, file:///, data:, blob:, C:/\n     * @param path - The path to get the protocol from\n     */\n    getProtocol(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        const matchFile = (/^file:\\/\\/\\//).exec(path);\n\n        if (matchFile)\n        {\n            return matchFile[0];\n        }\n\n        const matchProtocol = (/^[^/:]+:\\/{0,2}/).exec(path);\n\n        if (matchProtocol)\n        {\n            return matchProtocol[0];\n        }\n\n        return '';\n    },\n\n    /**\n     * Converts URL to an absolute path.\n     * When loading from a Web Worker, we must use absolute paths.\n     * If the URL is already absolute we return it as is\n     * If it's not, we convert it\n     * @param url - The URL to test\n     * @param customBaseUrl - The base URL to use\n     * @param customRootUrl - The root URL to use\n     */\n    toAbsolute(url: string, customBaseUrl?: string, customRootUrl?: string)\n    {\n        assertPath(url);\n\n        if (this.isDataUrl(url) || this.isBlobUrl(url)) return url;\n\n        const baseUrl = removeUrlParams(this.toPosix(customBaseUrl ?? DOMAdapter.get().getBaseUrl()));\n        const rootUrl = removeUrlParams(this.toPosix(customRootUrl ?? this.rootname(baseUrl)));\n\n        url = this.toPosix(url);\n\n        // root relative url\n        if (url.startsWith('/'))\n        {\n            return path.join(rootUrl, url.slice(1));\n        }\n\n        const absolutePath = this.isAbsolute(url) ? url : this.join(baseUrl, url);\n\n        return absolutePath;\n    },\n\n    /**\n     * Normalizes the given path, resolving '..' and '.' segments\n     * @param path - The path to normalize\n     */\n    normalize(path: string)\n    {\n        assertPath(path);\n\n        if (path.length === 0) return '.';\n        if (this.isDataUrl(path) || this.isBlobUrl(path)) return path;\n\n        path = this.toPosix(path);\n\n        let protocol = '';\n        const isAbsolute = path.startsWith('/');\n\n        if (this.hasProtocol(path))\n        {\n            protocol = this.rootname(path);\n            path = path.slice(protocol.length);\n        }\n\n        const trailingSeparator = path.endsWith('/');\n\n        // Normalize the path\n        path = normalizeStringPosix(path, false);\n\n        if (path.length > 0 && trailingSeparator) path += '/';\n        if (isAbsolute) return `/${path}`;\n\n        return protocol + path;\n    },\n\n    /**\n     * Determines if path is an absolute path.\n     * Absolute paths can be urls, data urls, or paths on disk\n     * @param path - The path to test\n     */\n    isAbsolute(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        if (this.hasProtocol(path)) return true;\n\n        return path.startsWith('/');\n    },\n\n    /**\n     * Joins all given path segments together using the platform-specific separator as a delimiter,\n     * then normalizes the resulting path\n     * @param segments - The segments of the path to join\n     */\n    join(...segments: string[])\n    {\n        if (segments.length === 0)\n        { return '.'; }\n        let joined;\n\n        for (let i = 0; i < segments.length; ++i)\n        {\n            const arg = segments[i];\n\n            assertPath(arg);\n            if (arg.length > 0)\n            {\n                if (joined === undefined) joined = arg;\n                else\n                {\n                    const prevArg = segments[i - 1] ?? '';\n\n                    if (this.joinExtensions.includes(this.extname(prevArg).toLowerCase()))\n                    {\n                        joined += `/../${arg}`;\n                    }\n                    else\n                    {\n                        joined += `/${arg}`;\n                    }\n                }\n            }\n        }\n        if (joined === undefined) { return '.'; }\n\n        return this.normalize(joined);\n    },\n\n    /**\n     * Returns the directory name of a path\n     * @param path - The path to parse\n     */\n    dirname(path: string)\n    {\n        assertPath(path);\n        if (path.length === 0) return '.';\n        path = this.toPosix(path);\n        let code = path.charCodeAt(0);\n        const hasRoot = code === 47;\n        let end = -1;\n        let matchedSlash = true;\n\n        const proto = this.getProtocol(path);\n        const origpath = path;\n\n        path = path.slice(proto.length);\n\n        for (let i = path.length - 1; i >= 1; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                if (!matchedSlash)\n                {\n                    end = i;\n                    break;\n                }\n            }\n            else\n            {\n                // We saw the first non-path separator\n                matchedSlash = false;\n            }\n        }\n\n        // if end is -1 and its a url then we need to add the path back\n        // eslint-disable-next-line no-nested-ternary\n        if (end === -1) return hasRoot ? '/' : this.isUrl(origpath) ? proto + path : proto;\n        if (hasRoot && end === 1) return '//';\n\n        return proto + path.slice(0, end);\n    },\n\n    /**\n     * Returns the root of the path e.g. /, C:/, file:///, http://domain.com/\n     * @param path - The path to parse\n     */\n    rootname(path: string)\n    {\n        assertPath(path);\n        path = this.toPosix(path);\n\n        let root = '';\n\n        if (path.startsWith('/')) root = '/';\n        else\n        {\n            root = this.getProtocol(path);\n        }\n\n        if (this.isUrl(path))\n        {\n            // need to find the first path separator\n            const index = path.indexOf('/', root.length);\n\n            if (index !== -1)\n            {\n                root = path.slice(0, index);\n            }\n            else root = path;\n\n            if (!root.endsWith('/')) root += '/';\n        }\n\n        return root;\n    },\n\n    /**\n     * Returns the last portion of a path\n     * @param path - The path to test\n     * @param ext - Optional extension to remove\n     */\n    basename(path: string, ext?: string)\n    {\n        assertPath(path);\n        if (ext) assertPath(ext);\n\n        path = removeUrlParams(this.toPosix(path));\n\n        let start = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i: number;\n\n        if (ext !== undefined && ext.length > 0 && ext.length <= path.length)\n        {\n            if (ext.length === path.length && ext === path) return '';\n            let extIdx = ext.length - 1;\n            let firstNonSlashEnd = -1;\n\n            for (i = path.length - 1; i >= 0; --i)\n            {\n                const code = path.charCodeAt(i);\n\n                if (code === 47)\n                {\n                    // If we reached a path separator that was not part of a set of path\n                    // separators at the end of the string, stop now\n                    if (!matchedSlash)\n                    {\n                        start = i + 1;\n                        break;\n                    }\n                }\n                else\n                {\n                    if (firstNonSlashEnd === -1)\n                    {\n                        // We saw the first non-path separator, remember this index in case\n                        // we need it if the extension ends up not matching\n                        matchedSlash = false;\n                        firstNonSlashEnd = i + 1;\n                    }\n                    if (extIdx >= 0)\n                    {\n                        // Try to match the explicit extension\n                        if (code === ext.charCodeAt(extIdx))\n                        {\n                            if (--extIdx === -1)\n                            {\n                                // We matched the extension, so mark this as the end of our path\n                                // component\n                                end = i;\n                            }\n                        }\n                        else\n                        {\n                            // Extension does not match, so our result is the entire path\n                            // component\n                            extIdx = -1;\n                            end = firstNonSlashEnd;\n                        }\n                    }\n                }\n            }\n\n            if (start === end) end = firstNonSlashEnd; else if (end === -1) end = path.length;\n\n            return path.slice(start, end);\n        }\n        for (i = path.length - 1; i >= 0; --i)\n        {\n            if (path.charCodeAt(i) === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    start = i + 1;\n                    break;\n                }\n            }\n            else if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // path component\n                matchedSlash = false;\n                end = i + 1;\n            }\n        }\n\n        if (end === -1) return '';\n\n        return path.slice(start, end);\n    },\n\n    /**\n     * Returns the extension of the path, from the last occurrence of the . (period) character to end of string in the last\n     * portion of the path. If there is no . in the last portion of the path, or if there are no . characters other than\n     * the first character of the basename of path, an empty string is returned.\n     * @param path - The path to parse\n     */\n    extname(path: string)\n    {\n        assertPath(path);\n        path = removeUrlParams(this.toPosix(path));\n\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        for (let i = path.length - 1; i >= 0; --i)\n        {\n            const code = path.charCodeAt(i);\n\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators, no-mixed-operators/no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            return '';\n        }\n\n        return path.slice(startDot, end);\n    },\n\n    /**\n     * Parses a path into an object containing the 'root', `dir`, `base`, `ext`, and `name` properties.\n     * @param path - The path to parse\n     */\n    parse(path: string)\n    {\n        assertPath(path);\n\n        const ret = { root: '', dir: '', base: '', ext: '', name: '' };\n\n        if (path.length === 0) return ret;\n        path = removeUrlParams(this.toPosix(path));\n\n        let code = path.charCodeAt(0);\n        const isAbsolute = this.isAbsolute(path);\n        let start: number;\n        const protocol = '';\n\n        ret.root = this.rootname(path);\n\n        if (isAbsolute || this.hasProtocol(path))\n        {\n            start = 1;\n        }\n        else\n        {\n            start = 0;\n        }\n        let startDot = -1;\n        let startPart = 0;\n        let end = -1;\n        let matchedSlash = true;\n        let i = path.length - 1;\n\n        // Track the state of characters (if any) we see before our first dot and\n        // after any path separator we find\n        let preDotState = 0;\n\n        // Get non-dir info\n        for (; i >= start; --i)\n        {\n            code = path.charCodeAt(i);\n            if (code === 47)\n            {\n                // If we reached a path separator that was not part of a set of path\n                // separators at the end of the string, stop now\n                if (!matchedSlash)\n                {\n                    startPart = i + 1;\n                    break;\n                }\n                continue;\n            }\n            if (end === -1)\n            {\n                // We saw the first non-path separator, mark this as the end of our\n                // extension\n                matchedSlash = false;\n                end = i + 1;\n            }\n            if (code === 46)\n            {\n                // If this is our first dot, mark it as the start of our extension\n                if (startDot === -1) startDot = i;\n                else if (preDotState !== 1) preDotState = 1;\n            }\n            else if (startDot !== -1)\n            {\n                // We saw a non-dot and non-path separator before our dot, so we should\n                // have a good chance at having a non-empty extension\n                preDotState = -1;\n            }\n        }\n\n        if (\n            startDot === -1 || end === -1\n            // We saw a non-dot character immediately before the dot\n            || preDotState === 0\n            // The (right-most) trimmed path component is exactly '..'\n            // eslint-disable-next-line no-mixed-operators, no-mixed-operators/no-mixed-operators\n            || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1\n        )\n        {\n            if (end !== -1)\n            {\n                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);\n                else ret.base = ret.name = path.slice(startPart, end);\n            }\n        }\n        else\n        {\n            if (startPart === 0 && isAbsolute)\n            {\n                ret.name = path.slice(1, startDot);\n                ret.base = path.slice(1, end);\n            }\n            else\n            {\n                ret.name = path.slice(startPart, startDot);\n                ret.base = path.slice(startPart, end);\n            }\n            ret.ext = path.slice(startDot, end);\n        }\n\n        ret.dir = this.dirname(path);\n        if (protocol) ret.dir = protocol + ret.dir;\n\n        return ret;\n    },\n\n    sep: '/',\n    delimiter: ':',\n    joinExtensions: ['.html'],\n} as Path;\n"],"mappings":";;AAEA,SAASA,WAAWC,KACpB;EACQ,WAAOA,KAAA,KAAS,QACpB;IACI,MAAM,IAAIC,SAAU,oCAAmCC,IAAA,CAAKC,SAAU,CAAAH,KAAI,CAAG;EAAA;AAErF;AAEA,SAASI,gBAAgBC,GACzB;EACI,MAAMC,EAAK,GAAAD,GAAA,CAAIE,KAAM,IAAG,EAAE,CAAC;EAE3B,OAAOD,EAAG,CAAAC,KAAA,CAAM,GAAG,EAAE,CAAC;AAC1B;AAEA,SAASC,aAAaC,MACtB;EACW,OAAAA,MAAA,CAAOC,OAAQ,wBAAuB,MAAM;AACvD;AAEA,SAASC,WAAWC,GAAa,EAAAC,IAAA,EAAcH,OAC/C;EACW,OAAAE,GAAA,CAAIF,OAAA,CAAQ,IAAII,MAAA,CAAON,YAAA,CAAaK,IAAI,GAAG,GAAG,GAAGH,OAAO;AACnE;AAGA,SAASK,qBAAqBf,KAAA,EAAcgB,cAC5C;EACI,IAAIC,GAAM;EACV,IAAIC,iBAAoB;EACxB,IAAIC,SAAY;EAChB,IAAIC,IAAO;EACX,IAAIC,IAAO;EAEX,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,IAAKtB,KAAK,CAAAuB,MAAA,EAAQ,EAAED,CACpC;IACQ,IAAAA,CAAA,GAAItB,KAAA,CAAKuB,MACb;MACWF,IAAA,GAAArB,KAAA,CAAKwB,UAAA,CAAWF,CAAC;IAAA,CAC5B,UACSD,IAAA,KAAS,EAClB;MACI;IAAA,CAGJ;MACWA,IAAA;IAAA;IAEX,IAAIA,IAAA,KAAS,EACb;MACI,IAAIF,SAAc,KAAAG,CAAA,GAAI,CAAK,IAAAF,IAAA,KAAS,CACpC,IAGS,UAAAD,SAAA,KAAcG,CAAI,QAAKF,IAAA,KAAS,CACzC;QACI,IACIH,GAAA,CAAIM,MAAS,QACVL,iBAAA,KAAsB,CACtB,IAAAD,GAAA,CAAIO,UAAA,CAAWP,GAAI,CAAAM,MAAA,GAAS,CAAC,MAAM,MACnCN,GAAI,CAAAO,UAAA,CAAWP,GAAA,CAAIM,MAAS,IAAC,MAAM,EAE1C;UACQ,IAAAN,GAAA,CAAIM,MAAA,GAAS,CACjB;YACU,MAAAE,cAAA,GAAiBR,GAAI,CAAAS,WAAA,CAAY,GAAG;YAEtC,IAAAD,cAAA,KAAmBR,GAAI,CAAAM,MAAA,GAAS,CACpC;cACI,IAAIE,cAAA,KAAmB,CACvB;gBACUR,GAAA;gBACcC,iBAAA;cAAA,CAGxB;gBACUD,GAAA,GAAAA,GAAA,CAAIU,KAAM,IAAGF,cAAc;gBACjCP,iBAAA,GAAoBD,GAAI,CAAAM,MAAA,GAAS,CAAI,GAAAN,GAAA,CAAIS,WAAA,CAAY,GAAG;cAAA;cAEhDP,SAAA,GAAAG,CAAA;cACLF,IAAA;cACP;YAAA;UACJ,WAEKH,GAAI,CAAAM,MAAA,KAAW,CAAK,IAAAN,GAAA,CAAIM,MAAA,KAAW,CAC5C;YACUN,GAAA;YACcC,iBAAA;YACRC,SAAA,GAAAG,CAAA;YACLF,IAAA;YACP;UAAA;QACJ;QAEJ,IAAIJ,cACJ;UACQ,IAAAC,GAAA,CAAIM,MAAA,GAAS,CACjB;YAASN,GAAA;UAAA,CAET;YAAQA,GAAA;UAAA;UACYC,iBAAA;QAAA;MACxB,CAGJ;QACQ,IAAAD,GAAA,CAAIM,MAAA,GAAS,CACjB;UACIN,GAAA,IAAO,IAAIjB,KAAK,CAAA2B,KAAA,CAAMR,SAAY,MAAGG,CAAC,CAAC;QAAA,CAG3C;UACIL,GAAA,GAAMjB,KAAK,CAAA2B,KAAA,CAAMR,SAAY,MAAGG,CAAC;QAAA;QAErCJ,iBAAA,GAAoBI,CAAA,GAAIH,SAAY;MAAA;MAE5BA,SAAA,GAAAG,CAAA;MACLF,IAAA;IAAA,CAEF,UAAAC,IAAA,KAAS,EAAM,IAAAD,IAAA,KAAS,CACjC;MACM,EAAAA,IAAA;IAAA,CAGN;MACWA,IAAA;IAAA;EACX;EAGG,OAAAH,GAAA;AACX;AAoHO,MAAMW,IAAa;EAAA;AAAA;AAAA;AAAA;EAKtBC,QAAQ7B,KAAc;IAAS,OAAAW,UAAA,CAAWX,KAAM,QAAM,GAAG;EAAA,CAAG;EAAA;AAAA;AAAA;AAAA;EAK5D8B,MAAM9B,KAAc;IAAE,OAAQ,UAAY,CAAA+B,IAAA,CAAK,IAAK,CAAAF,OAAA,CAAQ7B,KAAI,CAAC;EAAA,CAAG;EAAA;AAAA;AAAA;AAAA;EAKpEgC,UAAUhC,KACV;IAEY,gJACH+B,IAAA,CAAK/B,KAAI;EAAA,CAClB;EAAA;AAAA;AAAA;AAAA;EAKAiC,UAAUjC,KACV;IAEW,OAAAA,KAAA,CAAKkC,UAAA,CAAW,OAAO;EAAA,CAClC;EAAA;AAAA;AAAA;AAAA;AAAA;EAMAC,YAAYnC,KAAc;IAAE,OAAQ,UAAY,CAAA+B,IAAA,CAAK,IAAK,CAAAF,OAAA,CAAQ7B,KAAI,CAAC;EAAA,CAAG;EAAA;AAAA;AAAA;AAAA;EAK1EoC,YAAYpC,KACZ;IACID,UAAA,CAAWC,KAAI;IACfA,KAAA,GAAO,IAAK,CAAA6B,OAAA,CAAQ7B,KAAI;IAElB,MAAAqC,SAAA,GAAa,cAAgB,CAAAC,IAAA,CAAKtC,KAAI;IAE5C,IAAIqC,SACJ;MACI,OAAOA,SAAA,CAAU,CAAC;IAAA;IAGhB,MAAAE,aAAA,GAAiB,iBAAmB,CAAAD,IAAA,CAAKtC,KAAI;IAEnD,IAAIuC,aACJ;MACI,OAAOA,aAAA,CAAc,CAAC;IAAA;IAGnB;EAAA,CACX;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAC,WAAWnC,GAAa,EAAAoC,aAAA,EAAwBC,aAChD;IACI3C,UAAA,CAAWM,GAAG;IAEd,IAAI,KAAK2B,SAAU,CAAA3B,GAAG,CAAK,SAAK4B,SAAA,CAAU5B,GAAG,GAAU,OAAAA,GAAA;IAEjD,MAAAsC,OAAA,GAAUvC,eAAgB,MAAKyB,OAAQ,CAAAY,aAAA,IAAiBG,UAAA,CAAWC,GAAI,GAAEC,UAAW,EAAC,CAAC;IACtF,MAAAC,OAAA,GAAU3C,eAAA,CAAgB,IAAK,CAAAyB,OAAA,CAAQa,aAAA,IAAiB,IAAK,CAAAM,QAAA,CAASL,OAAO,CAAC,CAAC;IAE/EtC,GAAA,QAAKwB,OAAA,CAAQxB,GAAG;IAGlB,IAAAA,GAAA,CAAI6B,UAAW,IAAG,CACtB;MACI,OAAON,IAAA,CAAKqB,IAAK,CAAAF,OAAA,EAAS1C,GAAI,CAAAsB,KAAA,CAAM,CAAC,CAAC;IAAA;IAGpC,MAAAuB,YAAA,GAAe,KAAKC,UAAW,CAAA9C,GAAG,IAAIA,GAAM,QAAK4C,IAAK,CAAAN,OAAA,EAAStC,GAAG;IAEjE,OAAA6C,YAAA;EAAA,CACX;EAAA;AAAA;AAAA;AAAA;EAMAE,UAAUpD,KACV;IACID,UAAA,CAAWC,KAAI;IAEf,IAAIA,KAAA,CAAKuB,MAAW,QAAU;IAC9B,IAAI,KAAKS,SAAU,CAAAhC,KAAI,CAAK,SAAKiC,SAAA,CAAUjC,KAAI,GAAU,OAAAA,KAAA;IAEzDA,KAAA,GAAO,IAAK,CAAA6B,OAAA,CAAQ7B,KAAI;IAExB,IAAIqD,QAAW;IACT,MAAAF,UAAA,GAAanD,KAAK,CAAAkC,UAAA,CAAW,GAAG;IAElC,SAAKC,WAAY,CAAAnC,KAAI,CACzB;MACeqD,QAAA,QAAKL,QAAA,CAAShD,KAAI;MAC7BA,KAAO,GAAAA,KAAA,CAAK2B,KAAM,CAAA0B,QAAA,CAAS9B,MAAM;IAAA;IAG/B,MAAA+B,iBAAA,GAAoBtD,KAAK,CAAAuD,QAAA,CAAS,GAAG;IAG3CvD,KAAA,GAAOe,oBAAqB,CAAAf,KAAA,EAAM,KAAK;IAEnC,IAAAA,KAAA,CAAKuB,MAAA,GAAS,CAAK,IAAA+B,iBAAA,EAAmBtD,KAAQ;IAC9C,IAAAmD,UAAA,EAAY,OAAO,IAAInD,KAAI;IAE/B,OAAOqD,QAAW,GAAArD,KAAA;EAAA,CACtB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAmD,WAAWnD,KACX;IACID,UAAA,CAAWC,KAAI;IACfA,KAAA,GAAO,IAAK,CAAA6B,OAAA,CAAQ7B,KAAI;IAEpB,SAAKmC,WAAA,CAAYnC,KAAI,GAAU;IAE5B,OAAAA,KAAA,CAAKkC,UAAA,CAAW,GAAG;EAAA,CAC9B;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAe,KAAA,GAAQO,QACR;IACQ,IAAAA,QAAA,CAASjC,MAAA,KAAW,CACxB;MAAS;IAAA;IACL,IAAAkC,MAAA;IAEJ,SAASnC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAIkC,QAAS,CAAAjC,MAAA,EAAQ,EAAED,CACvC;MACU,MAAAoC,GAAA,GAAMF,QAAA,CAASlC,CAAC;MAEtBvB,UAAA,CAAW2D,GAAG;MACV,IAAAA,GAAA,CAAInC,MAAA,GAAS,CACjB;QACI,IAAIkC,MAAW,aAAoBA,MAAA,GAAAC,GAAA,MAEnC;UACI,MAAMC,OAAU,GAAAH,QAAA,CAASlC,CAAI,IAAC,CAAK;UAE/B,SAAKsC,cAAA,CAAeC,QAAS,MAAKC,OAAA,CAAQH,OAAO,EAAEI,WAAY,EAAC,CACpE;YACIN,MAAA,IAAU,OAAOC,GAAG;UAAA,CAGxB;YACID,MAAA,IAAU,IAAIC,GAAG;UAAA;QACrB;MACJ;IACJ;IAEJ,IAAID,MAAA,KAAW,KAAW;MAAS;IAAA;IAE5B,YAAKL,SAAA,CAAUK,MAAM;EAAA,CAChC;EAAA;AAAA;AAAA;AAAA;EAMAO,QAAQhE,KACR;IACID,UAAA,CAAWC,KAAI;IACf,IAAIA,KAAA,CAAKuB,MAAW,QAAU;IAC9BvB,KAAA,GAAO,IAAK,CAAA6B,OAAA,CAAQ7B,KAAI;IACpB,IAAAqB,IAAA,GAAOrB,KAAK,CAAAwB,UAAA,CAAW,CAAC;IAC5B,MAAMyC,OAAA,GAAU5C,IAAS;IACzB,IAAI6C,GAAM;IACV,IAAIC,YAAe;IAEb,MAAAC,KAAA,GAAQ,IAAK,CAAAhC,WAAA,CAAYpC,KAAI;IACnC,MAAMqE,QAAW,GAAArE,KAAA;IAEjBA,KAAO,GAAAA,KAAA,CAAK2B,KAAM,CAAAyC,KAAA,CAAM7C,MAAM;IAE9B,SAASD,CAAA,GAAItB,KAAK,CAAAuB,MAAA,GAAS,GAAGD,CAAK,OAAG,EAAEA,CACxC;MACWD,IAAA,GAAArB,KAAA,CAAKwB,UAAA,CAAWF,CAAC;MACxB,IAAID,IAAA,KAAS,EACb;QACI,IAAI,CAAC8C,YACL;UACUD,GAAA,GAAA5C,CAAA;UACN;QAAA;MACJ,CAGJ;QAEmB6C,YAAA;MAAA;IACnB;IAKJ,IAAID,GAAQ,SAAI,OAAOD,OAAA,GAAU,GAAM,QAAKnC,KAAA,CAAMuC,QAAQ,IAAID,KAAA,GAAQpE,KAAO,GAAAoE,KAAA;IAC7E,IAAIH,OAAA,IAAWC,GAAQ,QAAU;IAEjC,OAAOE,KAAQ,GAAApE,KAAA,CAAK2B,KAAM,IAAGuC,GAAG;EAAA,CACpC;EAAA;AAAA;AAAA;AAAA;EAMAlB,SAAShD,KACT;IACID,UAAA,CAAWC,KAAI;IACfA,KAAA,GAAO,IAAK,CAAA6B,OAAA,CAAQ7B,KAAI;IAExB,IAAIsE,IAAO;IAEP,IAAAtE,KAAA,CAAKkC,UAAA,CAAW,GAAG,GAAUoC,IAAA,YAEjC;MACWA,IAAA,QAAKlC,WAAA,CAAYpC,KAAI;IAAA;IAG5B,SAAK8B,KAAM,CAAA9B,KAAI,CACnB;MAEI,MAAMuE,KAAQ,GAAAvE,KAAA,CAAKwE,OAAQ,MAAKF,IAAA,CAAK/C,MAAM;MAE3C,IAAIgD,KAAA,KAAU,CACd;QACWD,IAAA,GAAAtE,KAAA,CAAK2B,KAAM,IAAG4C,KAAK;MAAA,CAC9B,MACYD,IAAA,GAAAtE,KAAA;MAER,KAACsE,IAAK,CAAAf,QAAA,CAAS,GAAG,GAAWe,IAAA;IAAA;IAG9B,OAAAA,IAAA;EAAA,CACX;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAG,SAASzE,KAAA,EAAc0E,GACvB;IACI3E,UAAA,CAAWC,KAAI;IACX,IAAA0E,GAAA,EAAK3E,UAAA,CAAW2E,GAAG;IAEvB1E,KAAO,GAAAI,eAAA,CAAgB,IAAK,CAAAyB,OAAA,CAAQ7B,KAAI,CAAC;IAEzC,IAAI2E,KAAQ;IACZ,IAAIT,GAAM;IACV,IAAIC,YAAe;IACf,IAAA7C,CAAA;IAEA,IAAAoD,GAAA,KAAQ,UAAaA,GAAI,CAAAnD,MAAA,GAAS,KAAKmD,GAAI,CAAAnD,MAAA,IAAUvB,KAAA,CAAKuB,MAC9D;MACI,IAAImD,GAAI,CAAAnD,MAAA,KAAWvB,KAAK,CAAAuB,MAAA,IAAUmD,GAAQ,KAAA1E,KAAA,EAAa;MACnD,IAAA4E,MAAA,GAASF,GAAA,CAAInD,MAAS;MAC1B,IAAIsD,gBAAmB;MAEvB,KAAKvD,CAAA,GAAItB,KAAK,CAAAuB,MAAA,GAAS,GAAGD,CAAK,OAAG,EAAEA,CACpC;QACU,MAAAD,IAAA,GAAOrB,KAAK,CAAAwB,UAAA,CAAWF,CAAC;QAE9B,IAAID,IAAA,KAAS,EACb;UAGI,IAAI,CAAC8C,YACL;YACIQ,KAAA,GAAQrD,CAAI;YACZ;UAAA;QACJ,CAGJ;UACI,IAAIuD,gBAAA,KAAqB,CACzB;YAGmBV,YAAA;YACfU,gBAAA,GAAmBvD,CAAI;UAAA;UAE3B,IAAIsD,MAAA,IAAU,CACd;YAEI,IAAIvD,IAAS,KAAAqD,GAAA,CAAIlD,UAAW,CAAAoD,MAAM,CAClC;cACQ,MAAEA,MAAA,KAAW,CACjB;gBAGUV,GAAA,GAAA5C,CAAA;cAAA;YACV,CAGJ;cAGasD,MAAA;cACHV,GAAA,GAAAW,gBAAA;YAAA;UACV;QACJ;MACJ;MAGJ,IAAIF,KAAU,KAAAT,GAAA,EAAWA,GAAA,GAAAW,gBAAA,UAA2BX,GAAQ,SAAIA,GAAA,GAAMlE,KAAK,CAAAuB,MAAA;MAEpE,OAAAvB,KAAA,CAAK2B,KAAM,CAAAgD,KAAA,EAAOT,GAAG;IAAA;IAEhC,KAAK5C,CAAA,GAAItB,KAAK,CAAAuB,MAAA,GAAS,GAAGD,CAAK,OAAG,EAAEA,CACpC;MACI,IAAItB,KAAK,CAAAwB,UAAA,CAAWF,CAAC,MAAM,EAC3B;QAGI,IAAI,CAAC6C,YACL;UACIQ,KAAA,GAAQrD,CAAI;UACZ;QAAA;MACJ,CACJ,UACS4C,GAAA,KAAQ,CACjB;QAGmBC,YAAA;QACfD,GAAA,GAAM5C,CAAI;MAAA;IACd;IAGJ,IAAI4C,GAAQ,SAAW;IAEhB,OAAAlE,KAAA,CAAK2B,KAAM,CAAAgD,KAAA,EAAOT,GAAG;EAAA,CAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAJ,QAAQ9D,KACR;IACID,UAAA,CAAWC,KAAI;IACfA,KAAO,GAAAI,eAAA,CAAgB,IAAK,CAAAyB,OAAA,CAAQ7B,KAAI,CAAC;IAEzC,IAAI8E,QAAW;IACf,IAAIC,SAAY;IAChB,IAAIb,GAAM;IACV,IAAIC,YAAe;IAGnB,IAAIa,WAAc;IAElB,SAAS1D,CAAA,GAAItB,KAAK,CAAAuB,MAAA,GAAS,GAAGD,CAAK,OAAG,EAAEA,CACxC;MACU,MAAAD,IAAA,GAAOrB,KAAK,CAAAwB,UAAA,CAAWF,CAAC;MAE9B,IAAID,IAAA,KAAS,EACb;QAGI,IAAI,CAAC8C,YACL;UACIY,SAAA,GAAYzD,CAAI;UAChB;QAAA;QAEJ;MAAA;MAEJ,IAAI4C,GAAA,KAAQ,CACZ;QAGmBC,YAAA;QACfD,GAAA,GAAM5C,CAAI;MAAA;MAEd,IAAID,IAAA,KAAS,EACb;QAEI,IAAIyD,QAAa,SAAeA,QAAA,GAAAxD,CAAA,UACvB0D,WAAgB,QAAiBA,WAAA;MAAA,CAC9C,UACSF,QAAA,KAAa,CACtB;QAGkBE,WAAA;MAAA;IAClB;IAGJ,IACIF,QAAa,WAAMZ,GAAQ,WAExBc,WAAgB,UAGhBA,WAAgB,UAAKF,QAAa,KAAAZ,GAAA,GAAM,CAAK,IAAAY,QAAA,KAAaC,SAAA,GAAY,CAE7E;MACW;IAAA;IAGJ,OAAA/E,KAAA,CAAK2B,KAAM,CAAAmD,QAAA,EAAUZ,GAAG;EAAA,CACnC;EAAA;AAAA;AAAA;AAAA;EAMAe,MAAMjF,KACN;IACID,UAAA,CAAWC,KAAI;IAET,MAAAkF,GAAA,GAAM;MAAEZ,IAAA,EAAM,EAAI;MAAAa,GAAA,EAAK,EAAI;MAAAC,IAAA,EAAM,EAAI;MAAAV,GAAA,EAAK,EAAI;MAAAW,IAAA,EAAM;IAAG;IAE7D,IAAIrF,KAAA,CAAKuB,MAAW,QAAU,OAAA2D,GAAA;IAC9BlF,KAAO,GAAAI,eAAA,CAAgB,IAAK,CAAAyB,OAAA,CAAQ7B,KAAI,CAAC;IAErC,IAAAqB,IAAA,GAAOrB,KAAK,CAAAwB,UAAA,CAAW,CAAC;IACtB,MAAA2B,UAAA,GAAa,IAAK,CAAAA,UAAA,CAAWnD,KAAI;IACnC,IAAA2E,KAAA;IACJ,MAAMtB,QAAW;IAEb6B,GAAA,CAAAZ,IAAA,GAAO,IAAK,CAAAtB,QAAA,CAAShD,KAAI;IAE7B,IAAImD,UAAc,SAAKhB,WAAY,CAAAnC,KAAI,CACvC;MACY2E,KAAA;IAAA,CAGZ;MACYA,KAAA;IAAA;IAEZ,IAAIG,QAAW;IACf,IAAIC,SAAY;IAChB,IAAIb,GAAM;IACV,IAAIC,YAAe;IACf,IAAA7C,CAAA,GAAItB,KAAA,CAAKuB,MAAS;IAItB,IAAIyD,WAAc;IAGX,OAAA1D,CAAA,IAAKqD,KAAO,IAAErD,CACrB;MACWD,IAAA,GAAArB,KAAA,CAAKwB,UAAA,CAAWF,CAAC;MACxB,IAAID,IAAA,KAAS,EACb;QAGI,IAAI,CAAC8C,YACL;UACIY,SAAA,GAAYzD,CAAI;UAChB;QAAA;QAEJ;MAAA;MAEJ,IAAI4C,GAAA,KAAQ,CACZ;QAGmBC,YAAA;QACfD,GAAA,GAAM5C,CAAI;MAAA;MAEd,IAAID,IAAA,KAAS,EACb;QAEI,IAAIyD,QAAa,SAAeA,QAAA,GAAAxD,CAAA,UACvB0D,WAAgB,QAAiBA,WAAA;MAAA,CAC9C,UACSF,QAAA,KAAa,CACtB;QAGkBE,WAAA;MAAA;IAClB;IAGJ,IACIF,QAAa,WAAMZ,GAAQ,WAExBc,WAAgB,UAGhBA,WAAgB,UAAKF,QAAa,KAAAZ,GAAA,GAAM,CAAK,IAAAY,QAAA,KAAaC,SAAA,GAAY,CAE7E;MACI,IAAIb,GAAA,KAAQ,CACZ;QACI,IAAIa,SAAA,KAAc,CAAK,IAAA5B,UAAA,EAAY+B,GAAA,CAAIE,IAAA,GAAOF,GAAI,CAAAG,IAAA,GAAOrF,KAAK,CAAA2B,KAAA,CAAM,GAAGuC,GAAG,OACrEgB,GAAA,CAAIE,IAAA,GAAOF,GAAI,CAAAG,IAAA,GAAOrF,KAAK,CAAA2B,KAAA,CAAMoD,SAAA,EAAWb,GAAG;MAAA;IACxD,CAGJ;MACQ,IAAAa,SAAA,KAAc,KAAK5B,UACvB;QACI+B,GAAA,CAAIG,IAAO,GAAArF,KAAA,CAAK2B,KAAM,IAAGmD,QAAQ;QACjCI,GAAA,CAAIE,IAAO,GAAApF,KAAA,CAAK2B,KAAM,IAAGuC,GAAG;MAAA,CAGhC;QACIgB,GAAA,CAAIG,IAAO,GAAArF,KAAA,CAAK2B,KAAM,CAAAoD,SAAA,EAAWD,QAAQ;QACzCI,GAAA,CAAIE,IAAO,GAAApF,KAAA,CAAK2B,KAAM,CAAAoD,SAAA,EAAWb,GAAG;MAAA;MAExCgB,GAAA,CAAIR,GAAM,GAAA1E,KAAA,CAAK2B,KAAM,CAAAmD,QAAA,EAAUZ,GAAG;IAAA;IAGlCgB,GAAA,CAAAC,GAAA,GAAM,IAAK,CAAAnB,OAAA,CAAQhE,KAAI;IACvB,IAAAqD,QAAA,EAAc6B,GAAA,CAAAC,GAAA,GAAM9B,QAAA,GAAW6B,GAAI,CAAAC,GAAA;IAEhC,OAAAD,GAAA;EAAA,CACX;EAEAI,GAAK;EACLC,SAAW;EACX3B,cAAA,EAAgB,CAAC,OAAO;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}