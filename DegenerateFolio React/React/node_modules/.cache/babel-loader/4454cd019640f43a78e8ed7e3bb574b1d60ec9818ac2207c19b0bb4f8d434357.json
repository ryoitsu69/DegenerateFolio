{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransactionGasPricing = void 0;\nconst web3_validator_1 = require(\"web3-validator\");\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_utils_1 = require(\"web3-utils\");\n// eslint-disable-next-line import/no-cycle\nconst rpc_method_wrappers_js_1 = require(\"../rpc_method_wrappers.js\");\n// eslint-disable-next-line import/no-cycle\nconst transaction_builder_js_1 = require(\"./transaction_builder.js\");\nfunction getEip1559GasPricing(transaction, web3Context, returnFormat) {\n  var _a, _b, _c;\n  return __awaiter(this, void 0, void 0, function* () {\n    const block = yield (0, rpc_method_wrappers_js_1.getBlock)(web3Context, web3Context.defaultBlock, false, returnFormat);\n    if ((0, web3_validator_1.isNullish)(block.baseFeePerGas)) throw new web3_errors_1.Eip1559NotSupportedError();\n    if (!(0, web3_validator_1.isNullish)(transaction.gasPrice)) {\n      const convertedTransactionGasPrice = (0, web3_utils_1.format)({\n        format: 'uint'\n      }, transaction.gasPrice, returnFormat);\n      return {\n        maxPriorityFeePerGas: convertedTransactionGasPrice,\n        maxFeePerGas: convertedTransactionGasPrice\n      };\n    }\n    return {\n      maxPriorityFeePerGas: (0, web3_utils_1.format)({\n        format: 'uint'\n      }, (_a = transaction.maxPriorityFeePerGas) !== null && _a !== void 0 ? _a : web3Context.defaultMaxPriorityFeePerGas, returnFormat),\n      maxFeePerGas: (0, web3_utils_1.format)({\n        format: 'uint'\n      }, (_b = transaction.maxFeePerGas) !== null && _b !== void 0 ? _b : BigInt(block.baseFeePerGas) * BigInt(2) + BigInt((_c = transaction.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : web3Context.defaultMaxPriorityFeePerGas), returnFormat)\n    };\n  });\n}\nfunction getTransactionGasPricing(transaction, web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionType = (0, transaction_builder_js_1.getTransactionType)(transaction, web3Context);\n    if (!(0, web3_validator_1.isNullish)(transactionType)) {\n      if (transactionType.startsWith('-')) throw new web3_errors_1.UnsupportedTransactionTypeError(transactionType);\n      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n      if (Number(transactionType) < 0 || Number(transactionType) > 127) throw new web3_errors_1.UnsupportedTransactionTypeError(transactionType);\n      if ((0, web3_validator_1.isNullish)(transaction.gasPrice) && (transactionType === '0x0' || transactionType === '0x1')) return {\n        gasPrice: yield (0, rpc_method_wrappers_js_1.getGasPrice)(web3Context, returnFormat),\n        maxPriorityFeePerGas: undefined,\n        maxFeePerGas: undefined\n      };\n      if (transactionType === '0x2') {\n        return Object.assign({\n          gasPrice: undefined\n        }, yield getEip1559GasPricing(transaction, web3Context, returnFormat));\n      }\n    }\n    return undefined;\n  });\n}\nexports.getTransactionGasPricing = getTransactionGasPricing;","map":{"version":3,"names":["web3_validator_1","require","web3_errors_1","web3_utils_1","rpc_method_wrappers_js_1","transaction_builder_js_1","getEip1559GasPricing","transaction","web3Context","returnFormat","block","getBlock","defaultBlock","isNullish","baseFeePerGas","Eip1559NotSupportedError","gasPrice","convertedTransactionGasPrice","format","maxPriorityFeePerGas","maxFeePerGas","_a","defaultMaxPriorityFeePerGas","_b","BigInt","_c","getTransactionGasPricing","transactionType","getTransactionType","startsWith","UnsupportedTransactionTypeError","Number","getGasPrice","undefined","Object","assign","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth/src/utils/get_transaction_gas_pricing.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport {\n\tEthExecutionAPI,\n\tNumbers,\n\tTransaction,\n\tDataFormat,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { Eip1559NotSupportedError, UnsupportedTransactionTypeError } from 'web3-errors';\nimport { format } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { getBlock, getGasPrice } from '../rpc_method_wrappers.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionType } from './transaction_builder.js';\n\nasync function getEip1559GasPricing<ReturnFormat extends DataFormat>(\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n): Promise<FormatType<{ maxPriorityFeePerGas?: Numbers; maxFeePerGas?: Numbers }, ReturnFormat>> {\n\tconst block = await getBlock(web3Context, web3Context.defaultBlock, false, returnFormat);\n\n\tif (isNullish(block.baseFeePerGas)) throw new Eip1559NotSupportedError();\n\n\tif (!isNullish(transaction.gasPrice)) {\n\t\tconst convertedTransactionGasPrice = format(\n\t\t\t{ format: 'uint' },\n\t\t\ttransaction.gasPrice as Numbers,\n\t\t\treturnFormat,\n\t\t);\n\n\t\treturn {\n\t\t\tmaxPriorityFeePerGas: convertedTransactionGasPrice,\n\t\t\tmaxFeePerGas: convertedTransactionGasPrice,\n\t\t};\n\t}\n\treturn {\n\t\tmaxPriorityFeePerGas: format(\n\t\t\t{ format: 'uint' },\n\t\t\ttransaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas,\n\t\t\treturnFormat,\n\t\t),\n\t\tmaxFeePerGas: format(\n\t\t\t{ format: 'uint' },\n\t\t\t(transaction.maxFeePerGas ??\n\t\t\t\tBigInt(block.baseFeePerGas) * BigInt(2) +\n\t\t\t\t\tBigInt(\n\t\t\t\t\t\ttransaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas,\n\t\t\t\t\t)) as Numbers,\n\t\t\treturnFormat,\n\t\t),\n\t};\n}\n\nexport async function getTransactionGasPricing<ReturnFormat extends DataFormat>(\n\ttransaction: InternalTransaction,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n): Promise<\n\t| FormatType<\n\t\t\t{ gasPrice?: Numbers; maxPriorityFeePerGas?: Numbers; maxFeePerGas?: Numbers },\n\t\t\tReturnFormat\n\t  >\n\t| undefined\n> {\n\tconst transactionType = getTransactionType(transaction, web3Context);\n\tif (!isNullish(transactionType)) {\n\t\tif (transactionType.startsWith('-'))\n\t\t\tthrow new UnsupportedTransactionTypeError(transactionType);\n\n\t\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n\t\tif (Number(transactionType) < 0 || Number(transactionType) > 127)\n\t\t\tthrow new UnsupportedTransactionTypeError(transactionType);\n\n\t\tif (\n\t\t\tisNullish(transaction.gasPrice) &&\n\t\t\t(transactionType === '0x0' || transactionType === '0x1')\n\t\t)\n\t\t\treturn {\n\t\t\t\tgasPrice: await getGasPrice(web3Context, returnFormat),\n\t\t\t\tmaxPriorityFeePerGas: undefined,\n\t\t\t\tmaxFeePerGas: undefined,\n\t\t\t};\n\n\t\tif (transactionType === '0x2') {\n\t\t\treturn {\n\t\t\t\tgasPrice: undefined,\n\t\t\t\t...(await getEip1559GasPricing(transaction, web3Context, returnFormat)),\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}