{"ast":null,"code":"\"use strict\";\n\nconst genericFontFamilies = [\"serif\", \"sans-serif\", \"monospace\", \"cursive\", \"fantasy\", \"system-ui\"];\nfunction fontStringFromTextStyle(style) {\n  const fontSizeString = typeof style.fontSize === \"number\" ? `${style.fontSize}px` : style.fontSize;\n  let fontFamilies = style.fontFamily;\n  if (!Array.isArray(style.fontFamily)) {\n    fontFamilies = style.fontFamily.split(\",\");\n  }\n  for (let i = fontFamilies.length - 1; i >= 0; i--) {\n    let fontFamily = fontFamilies[i].trim();\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && !genericFontFamilies.includes(fontFamily)) {\n      fontFamily = `\"${fontFamily}\"`;\n    }\n    fontFamilies[i] = fontFamily;\n  }\n  return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${fontFamilies.join(\",\")}`;\n}\nexport { fontStringFromTextStyle };","map":{"version":3,"names":["genericFontFamilies","fontStringFromTextStyle","style","fontSizeString","fontSize","fontFamilies","fontFamily","Array","isArray","split","i","length","trim","test","includes","fontStyle","fontVariant","fontWeight","join"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text/canvas/utils/fontStringFromTextStyle.ts"],"sourcesContent":["import type { TextStyle } from '../../TextStyle';\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n * @param style\n * @returns Font style string, for passing to `TextMetrics.measureFont()`\n */\nexport function fontStringFromTextStyle(style: TextStyle): string\n{\n    // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n    const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies: string | string[] = style.fontFamily;\n\n    if (!Array.isArray(style.fontFamily))\n    {\n        fontFamilies = style.fontFamily.split(',');\n    }\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--)\n    {\n        // Trim any extra white-space\n        let fontFamily = fontFamilies[i].trim();\n\n        // Check if font already contains strings\n        if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n        {\n            fontFamily = `\"${fontFamily}\"`;\n        }\n        (fontFamilies as string[])[i] = fontFamily;\n    }\n\n    // eslint-disable-next-line max-len\n    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n}\n"],"mappings":";;AAEA,MAAMA,mBAAsB,IACxB,SACA,cACA,aACA,WACA,WACA,YACJ;AAOO,SAASC,wBAAwBC,KACxC;EAEU,MAAAC,cAAA,GAAkB,OAAOD,KAAM,CAAAE,QAAA,KAAa,WAAe,GAAAF,KAAA,CAAME,QAAQ,OAAOF,KAAM,CAAAE,QAAA;EAI5F,IAAIC,YAAA,GAAkCH,KAAM,CAAAI,UAAA;EAE5C,IAAI,CAACC,KAAA,CAAMC,OAAQ,CAAAN,KAAA,CAAMI,UAAU,CACnC;IACmBD,YAAA,GAAAH,KAAA,CAAMI,UAAW,CAAAG,KAAA,CAAM,GAAG;EAAA;EAG7C,SAASC,CAAA,GAAIL,YAAa,CAAAM,MAAA,GAAS,CAAG,EAAAD,CAAA,IAAK,GAAGA,CAC9C;IAEI,IAAIJ,UAAa,GAAAD,YAAA,CAAaK,CAAC,EAAEE,IAAK;IAGlC,KAAE,qBAAsBC,IAAK,CAAAP,UAAU,KAAK,CAACN,mBAAA,CAAoBc,QAAS,CAAAR,UAAU,CACxF;MACIA,UAAA,GAAa,IAAIA,UAAU;IAAA;IAE9BD,YAAA,CAA0BK,CAAC,CAAI,GAAAJ,UAAA;EAAA;EAIpC,OAAU,GAAAJ,KAAA,CAAMa,SAAS,IAAIb,KAAA,CAAMc,WAAW,IAAId,KAAM,CAAAe,UAAU,IAAId,cAAc,IAAKE,YAA0B,CAAAa,IAAA,CAAK,GAAG,CAAC;AAChI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}