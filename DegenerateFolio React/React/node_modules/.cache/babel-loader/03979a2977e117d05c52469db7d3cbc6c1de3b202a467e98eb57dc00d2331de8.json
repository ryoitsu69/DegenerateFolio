{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupMintExtension = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/mint/v1beta1/query\");\nconst queryclient_1 = require(\"../../queryclient\");\nfunction setupMintExtension(base) {\n  const rpc = (0, queryclient_1.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    mint: {\n      params: async () => {\n        const {\n          params\n        } = await queryService.Params({});\n        (0, utils_1.assert)(params);\n        return {\n          blocksPerYear: params.blocksPerYear,\n          goalBonded: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.goalBonded),\n          inflationMin: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMin),\n          inflationMax: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationMax),\n          inflationRateChange: (0, queryclient_1.decodeCosmosSdkDecFromProto)(params.inflationRateChange),\n          mintDenom: params.mintDenom\n        };\n      },\n      inflation: async () => {\n        const {\n          inflation\n        } = await queryService.Inflation({});\n        return (0, queryclient_1.decodeCosmosSdkDecFromProto)(inflation);\n      },\n      annualProvisions: async () => {\n        const {\n          annualProvisions\n        } = await queryService.AnnualProvisions({});\n        return (0, queryclient_1.decodeCosmosSdkDecFromProto)(annualProvisions);\n      }\n    }\n  };\n}\nexports.setupMintExtension = setupMintExtension;","map":{"version":3,"names":["utils_1","require","query_1","queryclient_1","setupMintExtension","base","rpc","createProtobufRpcClient","queryService","QueryClientImpl","mint","params","Params","assert","blocksPerYear","goalBonded","decodeCosmosSdkDecFromProto","inflationMin","inflationMax","inflationRateChange","mintDenom","inflation","Inflation","annualProvisions","AnnualProvisions","exports"],"sources":["../../../src/modules/mint/queries.ts"],"sourcesContent":[null],"mappings":";;;;;;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAEA,MAAAE,aAAA,GAAAF,OAAA;AAqBA,SAAgBG,kBAAkBA,CAACC,IAAiB;EAClD,MAAMC,GAAG,GAAG,IAAAH,aAAA,CAAAI,uBAAuB,EAACF,IAAI,CAAC;EACzC;EACA;EACA,MAAMG,YAAY,GAAG,IAAIN,OAAA,CAAAO,eAAe,CAACH,GAAG,CAAC;EAE7C,OAAO;IACLI,IAAI,EAAE;MACJC,MAAM,EAAE,MAAAA,CAAA,KAAgC;QACtC,MAAM;UAAEA;QAAM,CAAE,GAAG,MAAMH,YAAY,CAACI,MAAM,CAAC,EAAE,CAAC;QAChD,IAAAZ,OAAA,CAAAa,MAAM,EAACF,MAAM,CAAC;QAEd,OAAO;UACLG,aAAa,EAAEH,MAAM,CAACG,aAAa;UACnCC,UAAU,EAAE,IAAAZ,aAAA,CAAAa,2BAA2B,EAACL,MAAM,CAACI,UAAU,CAAC;UAC1DE,YAAY,EAAE,IAAAd,aAAA,CAAAa,2BAA2B,EAACL,MAAM,CAACM,YAAY,CAAC;UAC9DC,YAAY,EAAE,IAAAf,aAAA,CAAAa,2BAA2B,EAACL,MAAM,CAACO,YAAY,CAAC;UAC9DC,mBAAmB,EAAE,IAAAhB,aAAA,CAAAa,2BAA2B,EAACL,MAAM,CAACQ,mBAAmB,CAAC;UAC5EC,SAAS,EAAET,MAAM,CAACS;SACnB;MACH,CAAC;MACDC,SAAS,EAAE,MAAAA,CAAA,KAAW;QACpB,MAAM;UAAEA;QAAS,CAAE,GAAG,MAAMb,YAAY,CAACc,SAAS,CAAC,EAAE,CAAC;QACtD,OAAO,IAAAnB,aAAA,CAAAa,2BAA2B,EAACK,SAAS,CAAC;MAC/C,CAAC;MACDE,gBAAgB,EAAE,MAAAA,CAAA,KAAW;QAC3B,MAAM;UAAEA;QAAgB,CAAE,GAAG,MAAMf,YAAY,CAACgB,gBAAgB,CAAC,EAAE,CAAC;QACpE,OAAO,IAAArB,aAAA,CAAAa,2BAA2B,EAACO,gBAAgB,CAAC;MACtD;;GAEH;AACH;AA/BAE,OAAA,CAAArB,kBAAA,GAAAA,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}