{"ast":null,"code":"import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40.mjs';\n\"use strict\";\nfunction generateArraySyncSTD40(uboElement, offsetToAdd) {\n  const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n  const elementSize = uboElement.data.value.length / uboElement.data.size;\n  const remainder = (4 - elementSize % 4) % 4;\n  return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : \"\"}\n        }\n    `;\n}\nexport { generateArraySyncSTD40 };","map":{"version":3,"names":["generateArraySyncSTD40","uboElement","offsetToAdd","rowSize","Math","max","WGSL_TO_STD40_SIZE","data","type","elementSize","value","length","size","remainder","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.ts"],"sourcesContent":["import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the std140 layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncSTD40(uboElement: UboElement, offsetToAdd: number): string\n{\n    const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n    const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n\n    const remainder = (4 - (elementSize % 4)) % 4;\n\n    return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n        }\n    `;\n}\n"],"mappings":";;AAWgB,SAAAA,uBAAuBC,UAAA,EAAwBC,WAC/D;EACU,MAAAC,OAAA,GAAUC,IAAA,CAAKC,GAAI,CAAAC,kBAAA,CAAmBL,UAAA,CAAWM,IAAK,CAAAC,IAAI,CAAI,OAAI,CAAC;EACzE,MAAMC,WAAA,GAAeR,UAAW,CAAAM,IAAA,CAAKG,KAAwB,CAAAC,MAAA,GAASV,UAAA,CAAWM,IAAK,CAAAK,IAAA;EAEhF,MAAAC,SAAA,IAAa,CAAK,GAAAJ,WAAA,GAAc,CAAM;EAErC;AAAA,iBACMR,UAAA,CAAWM,IAAA,CAAKO,IAAI;AAAA,oBACjBZ,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAMJD,UAAA,CAAWM,IAAK,CAAAK,IAAA,GAAOT,OAAO;AAAA;AAAA,iCAExBM,WAAW;AAAA;AAAA;AAAA;AAAA,cAI9BI,SAAc,SAAsB,kBAAAA,SAAS,MAAM,EAAE;AAAA;AAAA;AAGnE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}