{"ast":null,"code":"import { addMaskBounds } from '../utils/addMaskBounds.mjs';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds.mjs';\n\"use strict\";\nclass ScissorMask {\n  constructor(mask) {\n    this.priority = 0;\n    this.pipe = \"scissorMask\";\n    this.mask = mask;\n    this.mask.renderable = false;\n    this.mask.measurable = false;\n  }\n  addBounds(bounds, skipUpdateTransform) {\n    addMaskBounds(this.mask, bounds, skipUpdateTransform);\n  }\n  addLocalBounds(bounds, localRoot) {\n    addMaskLocalBounds(this.mask, bounds, localRoot);\n  }\n  containsPoint(point, hitTestFn) {\n    const mask = this.mask;\n    return hitTestFn(mask, point);\n  }\n  reset() {\n    this.mask.measurable = true;\n    this.mask = null;\n  }\n  destroy() {\n    this.reset();\n  }\n}\nexport { ScissorMask };","map":{"version":3,"names":["ScissorMask","constructor","mask","priority","pipe","renderable","measurable","addBounds","bounds","skipUpdateTransform","addMaskBounds","addLocalBounds","localRoot","addMaskLocalBounds","containsPoint","point","hitTestFn","reset","destroy"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/mask/scissor/ScissorMask.ts"],"sourcesContent":["import { addMaskBounds } from '../utils/addMaskBounds';\nimport { addMaskLocalBounds } from '../utils/addMaskLocalBounds';\n\nimport type { Point } from '../../../maths/point/Point';\nimport type { Bounds } from '../../../scene/container/bounds/Bounds';\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\n\nexport class ScissorMask implements Effect\n{\n    public priority = 0;\n    public mask: Container;\n    public pipe = 'scissorMask';\n\n    constructor(mask: Container)\n    {\n        this.mask = mask;\n\n        this.mask.renderable = false;\n        this.mask.measurable = false;\n    }\n\n    public addBounds(bounds: Bounds, skipUpdateTransform?: boolean): void\n    {\n        addMaskBounds(this.mask, bounds, skipUpdateTransform);\n    }\n\n    public addLocalBounds(bounds: Bounds, localRoot: Container): void\n    {\n        addMaskLocalBounds(this.mask, bounds, localRoot);\n    }\n\n    public containsPoint(point: Point, hitTestFn: (container: Container, point: Point) => boolean): boolean\n    {\n        const mask = this.mask as any;\n\n        // if the point is in the mask, yay!\n        return hitTestFn(mask, point);\n    }\n\n    public reset()\n    {\n        this.mask.measurable = true;\n        this.mask = null;\n    }\n\n    public destroy(): void\n    {\n        this.reset();\n    }\n}\n"],"mappings":";;;AAQO,MAAMA,WACb;EAKIC,YAAYC,IACZ;IALA,KAAOC,QAAW;IAElB,KAAOC,IAAO;IAIV,KAAKF,IAAO,GAAAA,IAAA;IAEZ,KAAKA,IAAA,CAAKG,UAAa;IACvB,KAAKH,IAAA,CAAKI,UAAa;EAAA;EAGpBC,UAAUC,MAAA,EAAgBC,mBACjC;IACkBC,aAAA,MAAKR,IAAM,EAAAM,MAAA,EAAQC,mBAAmB;EAAA;EAGjDE,eAAeH,MAAA,EAAgBI,SACtC;IACuBC,kBAAA,MAAKX,IAAM,EAAAM,MAAA,EAAQI,SAAS;EAAA;EAG5CE,cAAcC,KAAA,EAAcC,SACnC;IACI,MAAMd,IAAA,GAAO,IAAK,CAAAA,IAAA;IAGX,OAAAc,SAAA,CAAUd,IAAA,EAAMa,KAAK;EAAA;EAGzBE,KACPA,CAAA;IACI,KAAKf,IAAA,CAAKI,UAAa;IACvB,KAAKJ,IAAO;EAAA;EAGTgB,OACPA,CAAA;IACI,KAAKD,KAAM;EAAA;AAEnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}