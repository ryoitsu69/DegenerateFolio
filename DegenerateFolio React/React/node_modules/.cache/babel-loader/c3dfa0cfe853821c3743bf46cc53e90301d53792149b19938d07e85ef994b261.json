{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict';\n\nconst net = require('net');\n\n/**\n * Tests if a port is free.\n * @param {number} port The port to test.\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<boolean>} A promise that will resolve with whether the port\n *     is free.\n */\nfunction isFree(port, opt_host) {\n  return new Promise((resolve, reject) => {\n    const server = net.createServer().on('error', function (e) {\n      if (e.code === 'EADDRINUSE' || e.code === 'EACCES') {\n        resolve(false);\n      } else {\n        reject(e);\n      }\n    });\n    server.listen(port, opt_host, function () {\n      server.close(() => resolve(true));\n    });\n  });\n}\n\n/**\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<number>} A promise that will resolve to a free port. If a\n *     port cannot be found, the promise will be rejected.\n */\n\nfunction findFreePort(opt_host) {\n  return new Promise((resolve, reject) => {\n    const server = net.createServer();\n    server.on('listening', function () {\n      resolve(server.address().port);\n      server.close();\n    });\n    server.on('error', e => {\n      if (e.code === 'EADDRINUSE' || e.code === 'EACCES') {\n        resolve('Unable to find a free port');\n      } else {\n        reject(e);\n      }\n    });\n    // By providing 0 we let the operative system find an arbitrary port\n    server.listen(0, opt_host);\n  });\n}\n\n// PUBLIC API\nmodule.exports = {\n  findFreePort,\n  isFree\n};","map":{"version":3,"names":["net","require","isFree","port","opt_host","Promise","resolve","reject","server","createServer","on","e","code","listen","close","findFreePort","address","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/net/portprober.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n'use strict'\n\nconst net = require('net')\n\n/**\n * Tests if a port is free.\n * @param {number} port The port to test.\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<boolean>} A promise that will resolve with whether the port\n *     is free.\n */\nfunction isFree(port, opt_host) {\n  return new Promise((resolve, reject) => {\n    const server = net.createServer().on('error', function (e) {\n      if (e.code === 'EADDRINUSE' || e.code === 'EACCES') {\n        resolve(false)\n      } else {\n        reject(e)\n      }\n    })\n\n    server.listen(port, opt_host, function () {\n      server.close(() => resolve(true))\n    })\n  })\n}\n\n/**\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<number>} A promise that will resolve to a free port. If a\n *     port cannot be found, the promise will be rejected.\n */\n\nfunction findFreePort(opt_host) {\n  return new Promise((resolve, reject) => {\n    const server = net.createServer()\n    server.on('listening', function () {\n      resolve(server.address().port)\n      server.close()\n    })\n    server.on('error', (e) => {\n      if (e.code === 'EADDRINUSE' || e.code === 'EACCES') {\n        resolve('Unable to find a free port')\n      } else {\n        reject(e)\n      }\n    })\n    // By providing 0 we let the operative system find an arbitrary port\n    server.listen(0, opt_host)\n  })\n}\n\n// PUBLIC API\nmodule.exports = {\n  findFreePort,\n  isFree,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC9B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAGR,GAAG,CAACS,YAAY,CAAC,CAAC,CAACC,EAAE,CAAC,OAAO,EAAE,UAAUC,CAAC,EAAE;MACzD,IAAIA,CAAC,CAACC,IAAI,KAAK,YAAY,IAAID,CAAC,CAACC,IAAI,KAAK,QAAQ,EAAE;QAClDN,OAAO,CAAC,KAAK,CAAC;MAChB,CAAC,MAAM;QACLC,MAAM,CAACI,CAAC,CAAC;MACX;IACF,CAAC,CAAC;IAEFH,MAAM,CAACK,MAAM,CAACV,IAAI,EAAEC,QAAQ,EAAE,YAAY;MACxCI,MAAM,CAACM,KAAK,CAAC,MAAMR,OAAO,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASS,YAAYA,CAACX,QAAQ,EAAE;EAC9B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAGR,GAAG,CAACS,YAAY,CAAC,CAAC;IACjCD,MAAM,CAACE,EAAE,CAAC,WAAW,EAAE,YAAY;MACjCJ,OAAO,CAACE,MAAM,CAACQ,OAAO,CAAC,CAAC,CAACb,IAAI,CAAC;MAC9BK,MAAM,CAACM,KAAK,CAAC,CAAC;IAChB,CAAC,CAAC;IACFN,MAAM,CAACE,EAAE,CAAC,OAAO,EAAGC,CAAC,IAAK;MACxB,IAAIA,CAAC,CAACC,IAAI,KAAK,YAAY,IAAID,CAAC,CAACC,IAAI,KAAK,QAAQ,EAAE;QAClDN,OAAO,CAAC,4BAA4B,CAAC;MACvC,CAAC,MAAM;QACLC,MAAM,CAACI,CAAC,CAAC;MACX;IACF,CAAC,CAAC;IACF;IACAH,MAAM,CAACK,MAAM,CAAC,CAAC,EAAET,QAAQ,CAAC;EAC5B,CAAC,CAAC;AACJ;;AAEA;AACAa,MAAM,CAACC,OAAO,GAAG;EACfH,YAAY;EACZb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}