{"ast":null,"code":"import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment.mjs';\nimport { Rectangle } from './Rectangle.mjs';\n\"use strict\";\nclass Triangle {\n  /**\n   * @param x - The X coord of the first point.\n   * @param y - The Y coord of the first point.\n   * @param x2 - The X coord of the second point.\n   * @param y2 - The Y coord of the second point.\n   * @param x3 - The X coord of the third point.\n   * @param y3 - The Y coord of the third point.\n   */\n  constructor(x = 0, y = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'triangle'\n     */\n    this.type = \"triangle\";\n    this.x = x;\n    this.y = y;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.x3 = x3;\n    this.y3 = y3;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this triangle\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coordinates are within this Triangle\n   */\n  contains(x, y) {\n    const s = (this.x - this.x3) * (y - this.y3) - (this.y - this.y3) * (x - this.x3);\n    const t = (this.x2 - this.x) * (y - this.y) - (this.y2 - this.y) * (x - this.x);\n    if (s < 0 !== t < 0 && s !== 0 && t !== 0) {\n      return false;\n    }\n    const d = (this.x3 - this.x2) * (y - this.y2) - (this.y3 - this.y2) * (x - this.x2);\n    return d === 0 || d < 0 === s + t <= 0;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this triangle including the stroke.\n   * @param pointX - The X coordinate of the point to test\n   * @param pointY - The Y coordinate of the point to test\n   * @param strokeWidth - The width of the line to check\n   * @returns Whether the x/y coordinates are within this triangle\n   */\n  strokeContains(pointX, pointY, strokeWidth) {\n    const halfStrokeWidth = strokeWidth / 2;\n    const halfStrokeWidthSquared = halfStrokeWidth * halfStrokeWidth;\n    const {\n      x,\n      x2,\n      x3,\n      y,\n      y2,\n      y3\n    } = this;\n    if (squaredDistanceToLineSegment(pointX, pointY, x, y, x2, y3) <= halfStrokeWidthSquared || squaredDistanceToLineSegment(pointX, pointY, x2, y2, x3, y3) <= halfStrokeWidthSquared || squaredDistanceToLineSegment(pointX, pointY, x3, y3, x, y) <= halfStrokeWidthSquared) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Creates a clone of this Triangle\n   * @returns a copy of the triangle\n   */\n  clone() {\n    const triangle = new Triangle(this.x, this.y, this.x2, this.y2, this.x3, this.y3);\n    return triangle;\n  }\n  /**\n   * Copies another triangle to this one.\n   * @param triangle - The triangle to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(triangle) {\n    this.x = triangle.x;\n    this.y = triangle.y;\n    this.x2 = triangle.x2;\n    this.y2 = triangle.y2;\n    this.x3 = triangle.x3;\n    this.y3 = triangle.y3;\n    return this;\n  }\n  /**\n   * Copies this triangle to another one.\n   * @param triangle - The triangle to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(triangle) {\n    triangle.copyFrom(this);\n    return triangle;\n  }\n  /**\n   * Returns the framing rectangle of the triangle as a Rectangle object\n   * @param out - optional rectangle to store the result\n   * @returns The framing rectangle\n   */\n  getBounds(out) {\n    out = out || new Rectangle();\n    const minX = Math.min(this.x, this.x2, this.x3);\n    const maxX = Math.max(this.x, this.x2, this.x3);\n    const minY = Math.min(this.y, this.y2, this.y3);\n    const maxY = Math.max(this.y, this.y2, this.y3);\n    out.x = minX;\n    out.y = minY;\n    out.width = maxX - minX;\n    out.height = maxY - minY;\n    return out;\n  }\n}\nexport { Triangle };","map":{"version":3,"names":["Triangle","constructor","x","y","x2","y2","x3","y3","type","contains","s","t","d","strokeContains","pointX","pointY","strokeWidth","halfStrokeWidth","halfStrokeWidthSquared","squaredDistanceToLineSegment","clone","triangle","copyFrom","copyTo","getBounds","out","Rectangle","minX","Math","min","maxX","max","minY","maxY","width","height"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/shapes/Triangle.ts"],"sourcesContent":["import { squaredDistanceToLineSegment } from '../misc/squaredDistanceToLineSegment';\nimport { Rectangle } from './Rectangle';\n\nimport type { SHAPE_PRIMITIVE } from '../misc/const';\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * A class to define a shape of a triangle via user defined coordinates.\n *\n * Create a `Triangle` object with the `x`, `y`, `x2`, `y2`, `x3`, `y3` properties.\n *\n * ```js\n * import { Triangle } from 'pixi.js';\n *\n * const triangle = new Triangle(0, 0, 100, 0, 50, 50);\n * ```\n * @memberof maths\n */\nexport class Triangle implements ShapePrimitive\n{\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'triangle'\n     */\n    public readonly type: SHAPE_PRIMITIVE = 'triangle';\n\n    /**\n     * The X coord of the first point.\n     * @default 0\n     */\n    public x: number;\n    /**\n     * The Y coord of the first point.\n     * @default 0\n     */\n    public y: number;\n    /**\n     * The X coord of the second point.\n     * @default 0\n     */\n    public x2: number;\n    /**\n     * The Y coord of the second point.\n     * @default 0\n     */\n    public y2: number;\n    /**\n     * The X coord of the third point.\n     * @default 0\n     */\n    public x3: number;\n    /**\n     * The Y coord of the third point.\n     * @default 0\n     */\n    public y3: number;\n\n    /**\n     * @param x - The X coord of the first point.\n     * @param y - The Y coord of the first point.\n     * @param x2 - The X coord of the second point.\n     * @param y2 - The Y coord of the second point.\n     * @param x3 - The X coord of the third point.\n     * @param y3 - The Y coord of the third point.\n     */\n    constructor(x = 0, y = 0, x2 = 0, y2 = 0, x3 = 0, y3 = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.x2 = x2;\n        this.y2 = y2;\n        this.x3 = x3;\n        this.y3 = y3;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this triangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Triangle\n     */\n    public contains(x: number, y: number): boolean\n    {\n        const s = ((this.x - this.x3) * (y - this.y3)) - ((this.y - this.y3) * (x - this.x3));\n        const t = ((this.x2 - this.x) * (y - this.y)) - ((this.y2 - this.y) * (x - this.x));\n\n        if ((s < 0) !== (t < 0) && s !== 0 && t !== 0)\n        { return false; }\n\n        const d = ((this.x3 - this.x2) * (y - this.y2)) - ((this.y3 - this.y2) * (x - this.x2));\n\n        return d === 0 || (d < 0) === (s + t <= 0);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this triangle including the stroke.\n     * @param pointX - The X coordinate of the point to test\n     * @param pointY - The Y coordinate of the point to test\n     * @param strokeWidth - The width of the line to check\n     * @returns Whether the x/y coordinates are within this triangle\n     */\n    public strokeContains(pointX: number, pointY: number, strokeWidth: number): boolean\n    {\n        const halfStrokeWidth = strokeWidth / 2;\n        const halfStrokeWidthSquared = halfStrokeWidth * halfStrokeWidth;\n\n        const { x, x2, x3, y, y2, y3 } = this;\n\n        if (squaredDistanceToLineSegment(pointX, pointY, x, y, x2, y3) <= halfStrokeWidthSquared\n            || squaredDistanceToLineSegment(pointX, pointY, x2, y2, x3, y3) <= halfStrokeWidthSquared\n            || squaredDistanceToLineSegment(pointX, pointY, x3, y3, x, y) <= halfStrokeWidthSquared)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates a clone of this Triangle\n     * @returns a copy of the triangle\n     */\n    public clone(): ShapePrimitive\n    {\n        const triangle = new Triangle(\n            this.x,\n            this.y,\n            this.x2,\n            this.y2,\n            this.x3,\n            this.y3\n        );\n\n        return triangle;\n    }\n\n    /**\n     * Copies another triangle to this one.\n     * @param triangle - The triangle to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(triangle: Triangle): this\n    {\n        this.x = triangle.x;\n        this.y = triangle.y;\n        this.x2 = triangle.x2;\n        this.y2 = triangle.y2;\n        this.x3 = triangle.x3;\n        this.y3 = triangle.y3;\n\n        return this;\n    }\n\n    /**\n     * Copies this triangle to another one.\n     * @param triangle - The triangle to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(triangle: Triangle): Triangle\n    {\n        triangle.copyFrom(this);\n\n        return triangle;\n    }\n\n    /**\n     * Returns the framing rectangle of the triangle as a Rectangle object\n     * @param out - optional rectangle to store the result\n     * @returns The framing rectangle\n     */\n    public getBounds(out?: Rectangle): Rectangle\n    {\n        out = out || new Rectangle();\n\n        const minX = Math.min(this.x, this.x2, this.x3);\n        const maxX = Math.max(this.x, this.x2, this.x3);\n        const minY = Math.min(this.y, this.y2, this.y3);\n        const maxY = Math.max(this.y, this.y2, this.y3);\n\n        out.x = minX;\n        out.y = minY;\n        out.width = maxX - minX;\n        out.height = maxY - minY;\n\n        return out;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}