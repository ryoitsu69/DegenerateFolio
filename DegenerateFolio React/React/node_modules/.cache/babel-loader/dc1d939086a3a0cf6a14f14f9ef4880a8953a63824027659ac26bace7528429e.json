{"ast":null,"code":"\"use strict\";\n\nconst buildRectangle = {\n  build(shape, points) {\n    const rectData = shape;\n    const x = rectData.x;\n    const y = rectData.y;\n    const width = rectData.width;\n    const height = rectData.height;\n    if (!(width >= 0 && height >= 0)) {\n      return points;\n    }\n    points[0] = x;\n    points[1] = y;\n    points[2] = x + width;\n    points[3] = y;\n    points[4] = x + width;\n    points[5] = y + height;\n    points[6] = x;\n    points[7] = y + height;\n    return points;\n  },\n  triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset) {\n    let count = 0;\n    verticesOffset *= verticesStride;\n    vertices[verticesOffset + count] = points[0];\n    vertices[verticesOffset + count + 1] = points[1];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[2];\n    vertices[verticesOffset + count + 1] = points[3];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[6];\n    vertices[verticesOffset + count + 1] = points[7];\n    count += verticesStride;\n    vertices[verticesOffset + count] = points[4];\n    vertices[verticesOffset + count + 1] = points[5];\n    count += verticesStride;\n    const verticesIndex = verticesOffset / verticesStride;\n    indices[indicesOffset++] = verticesIndex;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 2;\n    indices[indicesOffset++] = verticesIndex + 1;\n    indices[indicesOffset++] = verticesIndex + 3;\n    indices[indicesOffset++] = verticesIndex + 2;\n  }\n};\nexport { buildRectangle };","map":{"version":3,"names":["buildRectangle","build","shape","points","rectData","x","y","width","height","triangulate","vertices","verticesStride","verticesOffset","indices","indicesOffset","count","verticesIndex"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildRectangle.ts"],"sourcesContent":["import type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildRectangle: ShapeBuildCommand<Rectangle> = {\n\n    build(shape: Rectangle, points: number[]): number[]\n    {\n        const rectData = shape;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        if (!(width >= 0 && height >= 0))\n        {\n            return points;\n        }\n\n        points[0] = x;\n        points[1] = y;\n        points[2] = x + width;\n        points[3] = y;\n        points[4] = x + width;\n        points[5] = y + height;\n        points[6] = x;\n        points[7] = y + height;\n\n        return points;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[6];\n        vertices[verticesOffset + count + 1] = points[7];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        count += verticesStride;\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n\n        // triangle 2\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 3;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n"],"mappings":";;AAUO,MAAMA,cAA+C;EAExDC,MAAMC,KAAA,EAAkBC,MACxB;IACI,MAAMC,QAAW,GAAAF,KAAA;IACjB,MAAMG,CAAA,GAAID,QAAS,CAAAC,CAAA;IACnB,MAAMC,CAAA,GAAIF,QAAS,CAAAE,CAAA;IACnB,MAAMC,KAAA,GAAQH,QAAS,CAAAG,KAAA;IACvB,MAAMC,MAAA,GAASJ,QAAS,CAAAI,MAAA;IAExB,IAAI,EAAED,KAAA,IAAS,CAAK,IAAAC,MAAA,IAAU,CAC9B;MACW,OAAAL,MAAA;IAAA;IAGXA,MAAA,CAAO,CAAC,CAAI,GAAAE,CAAA;IACZF,MAAA,CAAO,CAAC,CAAI,GAAAG,CAAA;IACLH,MAAA,EAAC,IAAIE,CAAI,GAAAE,KAAA;IAChBJ,MAAA,CAAO,CAAC,CAAI,GAAAG,CAAA;IACLH,MAAA,EAAC,IAAIE,CAAI,GAAAE,KAAA;IACTJ,MAAA,EAAC,IAAIG,CAAI,GAAAE,MAAA;IAChBL,MAAA,CAAO,CAAC,CAAI,GAAAE,CAAA;IACLF,MAAA,EAAC,IAAIG,CAAI,GAAAE,MAAA;IAET,OAAAL,MAAA;EAAA,CACX;EAEAM,YACIN,MAEA,EAAAO,QAAA,EACAC,cACA,EAAAC,cAAA,EAEAC,OAAA,EACAC,aAEJ;IACI,IAAIC,KAAQ;IAEMH,cAAA,IAAAD,cAAA;IAElBD,QAAA,CAASE,cAAiB,GAAAG,KAAK,CAAI,GAAAZ,MAAA,CAAO,CAAC;IAC3CO,QAAA,CAASE,cAAiB,GAAAG,KAAA,GAAQ,CAAC,IAAIZ,MAAA,CAAO,CAAC;IAEtCY,KAAA,IAAAJ,cAAA;IAETD,QAAA,CAASE,cAAiB,GAAAG,KAAK,CAAI,GAAAZ,MAAA,CAAO,CAAC;IAC3CO,QAAA,CAASE,cAAiB,GAAAG,KAAA,GAAQ,CAAC,IAAIZ,MAAA,CAAO,CAAC;IAEtCY,KAAA,IAAAJ,cAAA;IAETD,QAAA,CAASE,cAAiB,GAAAG,KAAK,CAAI,GAAAZ,MAAA,CAAO,CAAC;IAC3CO,QAAA,CAASE,cAAiB,GAAAG,KAAA,GAAQ,CAAC,IAAIZ,MAAA,CAAO,CAAC;IAEtCY,KAAA,IAAAJ,cAAA;IAETD,QAAA,CAASE,cAAiB,GAAAG,KAAK,CAAI,GAAAZ,MAAA,CAAO,CAAC;IAC3CO,QAAA,CAASE,cAAiB,GAAAG,KAAA,GAAQ,CAAC,IAAIZ,MAAA,CAAO,CAAC;IAEtCY,KAAA,IAAAJ,cAAA;IAET,MAAMK,aAAA,GAAgBJ,cAAiB,GAAAD,cAAA;IAGvCE,OAAA,CAAQC,aAAA,EAAe,CAAI,GAAAE,aAAA;IACnBH,OAAA,CAAAC,aAAA,EAAe,IAAIE,aAAgB;IACnCH,OAAA,CAAAC,aAAA,EAAe,IAAIE,aAAgB;IAGnCH,OAAA,CAAAC,aAAA,EAAe,IAAIE,aAAgB;IACnCH,OAAA,CAAAC,aAAA,EAAe,IAAIE,aAAgB;IACnCH,OAAA,CAAAC,aAAA,EAAe,IAAIE,aAAgB;EAAA;AAEnD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}