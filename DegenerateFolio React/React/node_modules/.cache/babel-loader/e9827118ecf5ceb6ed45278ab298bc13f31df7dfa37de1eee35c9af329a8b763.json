{"ast":null,"code":"\"use strict\";\n\nclass BatchableMesh {\n  constructor() {\n    this.batcher = null;\n    this.batch = null;\n    this.roundPixels = 0;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  get blendMode() {\n    return this.mesh.groupBlendMode;\n  }\n  reset() {\n    this.mesh = null;\n    this.texture = null;\n    this.batcher = null;\n    this.batch = null;\n  }\n  packIndex(indexBuffer, index, indicesOffset) {\n    const indices = this.geometry.indices;\n    for (let i = 0; i < indices.length; i++) {\n      indexBuffer[index++] = indices[i] + indicesOffset;\n    }\n  }\n  packAttributes(float32View, uint32View, index, textureId) {\n    const mesh = this.mesh;\n    const geometry = this.geometry;\n    const wt = mesh.groupTransform;\n    const textureIdAndRound = textureId << 16 | this.roundPixels & 65535;\n    const a = wt.a;\n    const b = wt.b;\n    const c = wt.c;\n    const d = wt.d;\n    const tx = wt.tx;\n    const ty = wt.ty;\n    const positions = geometry.positions;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    const abgr = mesh.groupColorAlpha;\n    for (let i = 0; i < positions.length; i += 2) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      float32View[index] = a * x + c * y + tx;\n      float32View[index + 1] = b * x + d * y + ty;\n      float32View[index + 2] = transformedUvs[i];\n      float32View[index + 3] = transformedUvs[i + 1];\n      uint32View[index + 4] = abgr;\n      uint32View[index + 5] = textureIdAndRound;\n      index += 6;\n    }\n  }\n  get vertexSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\nexport { BatchableMesh };","map":{"version":3,"names":["BatchableMesh","constructor","batcher","batch","roundPixels","_uvUpdateId","_textureMatrixUpdateId","blendMode","mesh","groupBlendMode","reset","texture","packIndex","indexBuffer","index","indicesOffset","indices","geometry","i","length","packAttributes","float32View","uint32View","textureId","wt","groupTransform","textureIdAndRound","a","b","c","d","tx","ty","positions","uvBuffer","getBuffer","uvs","data","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","Float32Array","multiplyUvs","abgr","groupColorAlpha","x","y","vertexSize","indexSize"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts"],"sourcesContent":["import type { Batch, BatchableObject, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Container } from '../../container/Container';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements BatchableObject\n{\n    public indexStart: number;\n    public textureId: number;\n    public texture: Texture;\n    public location: number;\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public mesh: Container;\n    public geometry: MeshGeometry;\n\n    public roundPixels: 0 | 1 = 0;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.mesh.groupBlendMode; }\n\n    public reset()\n    {\n        this.mesh = null;\n        this.texture = null;\n        this.batcher = null;\n        this.batch = null;\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        const indices = this.geometry.indices;\n\n        for (let i = 0; i < indices.length; i++)\n        {\n            indexBuffer[index++] = indices[i] + indicesOffset;\n        }\n    }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const mesh = this.mesh;\n\n        const geometry = this.geometry;\n        const wt = mesh.groupTransform;\n\n        const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        // const trim = texture.trim;\n        const positions = geometry.positions;\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        const abgr = mesh.groupColorAlpha;\n\n        for (let i = 0; i < positions.length; i += 2)\n        {\n            const x = positions[i];\n            const y = positions[i + 1];\n\n            float32View[index] = (a * x) + (c * y) + tx;\n            float32View[index + 1] = (b * x) + (d * y) + ty;\n\n            // TODO implement texture matrix?\n            float32View[index + 2] = transformedUvs[i];\n            float32View[index + 3] = transformedUvs[i + 1];\n\n            uint32View[index + 4] = abgr;\n            uint32View[index + 5] = textureIdAndRound;\n\n            index += 6;\n        }\n    }\n\n    get vertexSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}