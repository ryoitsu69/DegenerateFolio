{"ast":null,"code":"/**\n * @internal\n * From a type string or class, return the associated type class\n */\nexport function typeToConstructor(registry, type) {\n  return typeof type === 'function' ? type : registry.createClassUnsafe(type);\n}\n/**\n * @internal\n * Takes an input array of types and returns the associated classes for it\n*/\nexport function typesToConstructors(registry, types) {\n  const count = types.length;\n  const result = new Array(count);\n  for (let i = 0; i < count; i++) {\n    result[i] = typeToConstructor(registry, types[i]);\n  }\n  return result;\n}\n/**\n * @internal\n * Takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`\n */\nexport function mapToTypeMap(registry, input) {\n  const entries = Object.entries(input);\n  const count = entries.length;\n  const output = [new Array(count), new Array(count)];\n  for (let i = 0; i < count; i++) {\n    output[1][i] = entries[i][0];\n    output[0][i] = typeToConstructor(registry, entries[i][1]);\n  }\n  return output;\n}","map":{"version":3,"names":["typeToConstructor","registry","type","createClassUnsafe","typesToConstructors","types","count","length","result","Array","i","mapToTypeMap","input","entries","Object","output"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types-codec/utils/toConstructors.js"],"sourcesContent":["/**\n * @internal\n * From a type string or class, return the associated type class\n */\nexport function typeToConstructor(registry, type) {\n    return typeof type === 'function'\n        ? type\n        : registry.createClassUnsafe(type);\n}\n/**\n * @internal\n * Takes an input array of types and returns the associated classes for it\n*/\nexport function typesToConstructors(registry, types) {\n    const count = types.length;\n    const result = new Array(count);\n    for (let i = 0; i < count; i++) {\n        result[i] = typeToConstructor(registry, types[i]);\n    }\n    return result;\n}\n/**\n * @internal\n * Takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`\n */\nexport function mapToTypeMap(registry, input) {\n    const entries = Object.entries(input);\n    const count = entries.length;\n    const output = [new Array(count), new Array(count)];\n    for (let i = 0; i < count; i++) {\n        output[1][i] = entries[i][0];\n        output[0][i] = typeToConstructor(registry, entries[i][1]);\n    }\n    return output;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAC9C,OAAO,OAAOA,IAAI,KAAK,UAAU,GAC3BA,IAAI,GACJD,QAAQ,CAACE,iBAAiB,CAACD,IAAI,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,mBAAmBA,CAACH,QAAQ,EAAEI,KAAK,EAAE;EACjD,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM;EAC1B,MAAMC,MAAM,GAAG,IAAIC,KAAK,CAACH,KAAK,CAAC;EAC/B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;IAC5BF,MAAM,CAACE,CAAC,CAAC,GAAGV,iBAAiB,CAACC,QAAQ,EAAEI,KAAK,CAACK,CAAC,CAAC,CAAC;EACrD;EACA,OAAOF,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,YAAYA,CAACV,QAAQ,EAAEW,KAAK,EAAE;EAC1C,MAAMC,OAAO,GAAGC,MAAM,CAACD,OAAO,CAACD,KAAK,CAAC;EACrC,MAAMN,KAAK,GAAGO,OAAO,CAACN,MAAM;EAC5B,MAAMQ,MAAM,GAAG,CAAC,IAAIN,KAAK,CAACH,KAAK,CAAC,EAAE,IAAIG,KAAK,CAACH,KAAK,CAAC,CAAC;EACnD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;IAC5BK,MAAM,CAAC,CAAC,CAAC,CAACL,CAAC,CAAC,GAAGG,OAAO,CAACH,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5BK,MAAM,CAAC,CAAC,CAAC,CAACL,CAAC,CAAC,GAAGV,iBAAiB,CAACC,QAAQ,EAAEY,OAAO,CAACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7D;EACA,OAAOK,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}