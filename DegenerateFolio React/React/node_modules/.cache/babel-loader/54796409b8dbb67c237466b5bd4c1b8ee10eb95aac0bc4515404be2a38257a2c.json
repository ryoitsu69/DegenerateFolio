{"ast":null,"code":"import { PI_2 } from \"@pixi/core\";\nimport { curves } from \"../const.mjs\";\nclass ArcUtils {\n  /**\n   * Calculate information of the arc for {@link PIXI.Graphics.arcTo}.\n   * @private\n   * @param x1 - The x-coordinate of the first control point of the arc\n   * @param y1 - The y-coordinate of the first control point of the arc\n   * @param x2 - The x-coordinate of the second control point of the arc\n   * @param y2 - The y-coordinate of the second control point of the arc\n   * @param radius - The radius of the arc\n   * @param points - Collection of points to add to\n   * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n   */\n  static curveTo(x1, y1, x2, y2, radius, points) {\n    const fromX = points[points.length - 2],\n      a1 = points[points.length - 1] - y1,\n      b1 = fromX - x1,\n      a2 = y2 - y1,\n      b2 = x2 - x1,\n      mm = Math.abs(a1 * b2 - b1 * a2);\n    if (mm < 1e-8 || radius === 0) return (points[points.length - 2] !== x1 || points[points.length - 1] !== y1) && points.push(x1, y1), null;\n    const dd = a1 * a1 + b1 * b1,\n      cc = a2 * a2 + b2 * b2,\n      tt = a1 * a2 + b1 * b2,\n      k1 = radius * Math.sqrt(dd) / mm,\n      k2 = radius * Math.sqrt(cc) / mm,\n      j1 = k1 * tt / dd,\n      j2 = k2 * tt / cc,\n      cx = k1 * b2 + k2 * b1,\n      cy = k1 * a2 + k2 * a1,\n      px = b1 * (k2 + j1),\n      py = a1 * (k2 + j1),\n      qx = b2 * (k1 + j2),\n      qy = a2 * (k1 + j2),\n      startAngle = Math.atan2(py - cy, px - cx),\n      endAngle = Math.atan2(qy - cy, qx - cx);\n    return {\n      cx: cx + x1,\n      cy: cy + y1,\n      radius,\n      startAngle,\n      endAngle,\n      anticlockwise: b1 * a2 > b2 * a1\n    };\n  }\n  /**\n   * The arc method creates an arc/curve (used to create circles, or parts of circles).\n   * @private\n   * @param _startX - Start x location of arc\n   * @param _startY - Start y location of arc\n   * @param cx - The x-coordinate of the center of the circle\n   * @param cy - The y-coordinate of the center of the circle\n   * @param radius - The radius of the circle\n   * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n   *  of the arc's circle)\n   * @param endAngle - The ending angle, in radians\n   * @param _anticlockwise - Specifies whether the drawing should be\n   *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n   *  indicates counter-clockwise.\n   * @param points - Collection of points to add to\n   */\n  static arc(_startX, _startY, cx, cy, radius, startAngle, endAngle, _anticlockwise, points) {\n    const sweep = endAngle - startAngle,\n      n = curves._segmentsCount(Math.abs(sweep) * radius, Math.ceil(Math.abs(sweep) / PI_2) * 40),\n      theta = sweep / (n * 2),\n      theta2 = theta * 2,\n      cTheta = Math.cos(theta),\n      sTheta = Math.sin(theta),\n      segMinus = n - 1,\n      remainder = segMinus % 1 / segMinus;\n    for (let i = 0; i <= segMinus; ++i) {\n      const real = i + remainder * i,\n        angle = theta + startAngle + theta2 * real,\n        c = Math.cos(angle),\n        s = -Math.sin(angle);\n      points.push((cTheta * c + sTheta * s) * radius + cx, (cTheta * -s + sTheta * c) * radius + cy);\n    }\n  }\n}\nexport { ArcUtils };","map":{"version":3,"names":["ArcUtils","curveTo","x1","y1","x2","y2","radius","points","fromX","length","a1","b1","a2","b2","mm","Math","abs","push","dd","cc","tt","k1","sqrt","k2","j1","j2","cx","cy","px","py","qx","qy","startAngle","atan2","endAngle","anticlockwise","arc","_startX","_startY","_anticlockwise","sweep","n","curves","_segmentsCount","ceil","PI_2","theta","theta2","cTheta","cos","sTheta","sin","segMinus","remainder","i","real","angle","c","s"],"sources":["/home/ryoitsu/node_modules/@pixi/graphics/src/utils/ArcUtils.ts"],"sourcesContent":["import { PI_2 } from '@pixi/core';\nimport { curves } from '../const';\n\ninterface IArcLikeShape\n{\n    cx: number;\n    cy: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    anticlockwise: boolean;\n}\n\n/**\n * Utilities for arc curves.\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * Calculate information of the arc for {@link PIXI.Graphics.arcTo}.\n     * @private\n     * @param x1 - The x-coordinate of the first control point of the arc\n     * @param y1 - The y-coordinate of the first control point of the arc\n     * @param x2 - The x-coordinate of the second control point of the arc\n     * @param y2 - The y-coordinate of the second control point of the arc\n     * @param radius - The radius of the arc\n     * @param points - Collection of points to add to\n     * @returns - If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1: number, y1: number, x2: number, y2: number, radius: number, points: Array<number>): IArcLikeShape\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     * @private\n     * @param _startX - Start x location of arc\n     * @param _startY - Start y location of arc\n     * @param cx - The x-coordinate of the center of the circle\n     * @param cy - The y-coordinate of the center of the circle\n     * @param radius - The radius of the circle\n     * @param startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param endAngle - The ending angle, in radians\n     * @param _anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param points - Collection of points to add to\n     */\n    static arc(_startX: number, _startY: number, cx: number, cy: number, radius: number,\n        startAngle: number, endAngle: number, _anticlockwise: boolean, points: Array<number>): void\n    {\n        const sweep = endAngle - startAngle;\n        const n = curves._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}