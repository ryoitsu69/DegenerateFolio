{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n const float pi = 3.14159;\n const float pi2 = pi * 2.;\n\n const vec2 cellSizePixels = vec2(192.,192.);// best results = any multiple of 2^iterations\n float edgeSizePixels = 2.5;\n const float iterations = 5.;\n\n\n vec2 q(vec2 x, vec2 p)\n {\n     return floor(x/p)*p;\n }\n\n float rand(vec2 co){\n     return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n }\n\n vec3 rand3(vec2 p)\n {\n     vec3 p2 = vec3(p, rand(p));\n     return\n     fract(sin(vec3(\n         dot(p2,vec3(127.1,311.7,427.89)),\n                    dot(p2,vec3(269.5,183.3,77.24)),\n                    dot(p2,vec3(42004.33,123.54,714.24))\n     ))*43758.5453);\n }\n\n float sdAxisAlignedRect(vec2 uv, vec2 tl, vec2 br)\n {\n     vec2 d = max(tl - uv, uv - br);\n     return length(max(vec2(0.0), d)) + min(0.0, max(d.x, d.y));\n }\n\n mat2 rot2D(float r)\n {\n     float c = cos(r), s = sin(r);\n     return mat2(c, s, -s, c);\n }\n float pulse(float x, float pulseWidth, float totalPeriod)\n {\n     x = mod(x,totalPeriod);\n     x -= pulseWidth /= 2.;\n     return 1.-smoothstep(0.,pulseWidth, abs(x));\n }\n\n\n\n void mainImage( out vec4 o, in vec2 i)\n {\n     vec2 uv = i / iResolution.xy - .5;\n     vec2 uvn = uv;// screen / unwarped coords\n\n     uv += iMouse.xy *.1 / iResolution.xy;\n\n     if(iResolution.x > iResolution.y)\n         uv.x *= iResolution.x / iResolution.y;\n     else\n         uv.y /= iResolution.x / iResolution.y;\n\n\n     //uv *= 1.+sin(iTime*0.5)*.1;// zoom\n     uv -= .7;// offset rotation origin\n     float rotation = -(iTime+40.)*0.005;\n     //rotation = -0.2;// fixed-rot\n     uv *= rot2D(rotation);// rot\n\n     vec2 cellSize = cellSizePixels / iResolution.x;\n\n     vec2 cellOrig;\n     float cellID;\n     float edgeSizePixels = 7.;\n\n     for(float i = 0.;i<iterations;i++)\n     {\n         cellSize *= .5;\n         edgeSizePixels *= .5;\n         cellOrig = q(uv, cellSize);\n         cellID = rand(cellOrig);\n         if(i/iterations > sin(cellID*6.28+iTime*.2)*.5+.3)\n             break;\n     }\n     edgeSizePixels = max(edgeSizePixels, 1.);\n\n     //float cellID = rand(cellOrig);\n     float distToCenter = distance(uv, cellOrig+cellSize/2.)/(length(cellSize)/2.);\n     vec2 tl = cellOrig;\n     vec2 br = cellOrig + cellSize;\n     float distToEdge = sdAxisAlignedRect(uv, tl, br) / length(cellSize);// 0 = edge, -1 = center\n\n     float edgeSize = edgeSizePixels/iResolution.x/length(cellSize);\n     float aEdge = smoothstep(-edgeSize, 0., distToEdge);\n\n     float totalPulsePeriod = 10.;// in seconds\n     float highlightDuration = 1.2;\n     float highlightStrength = 1.7;\n     float highlight = pulse((cellID*totalPulsePeriod*totalPulsePeriod)+iTime,highlightDuration,totalPulsePeriod)*highlightStrength+1.;\n\n     // cell background\n     vec3 cellColor = rand3(cellOrig);\n     o = vec4(cellColor.rgbb)*.3;\n     o *= highlight;\n     o *= 1.-distToCenter*.4;\n\n     // edge color\n     vec4 edgeColor = vec4(0,0,0,1);\n     o = mix(o, edgeColor, aEdge);\n\n     // saturation\n     o = clamp(o,0.,1.);\n     //o = mix(o, vec4((o.r+o.g+o.b)/3.), sin(iTime)*.5+.5);\n     o = mix(o, vec4((o.r+o.g+o.b)/3.), .6);\n\n     // tint green / brightness\n     o *= vec4(.5,1,1,0)*2.;\n\n     // noise\n     o.rgb += (rand3(uvn*iTime)-.5)*.1;\n\n     // vignette\n     uvn *= 1.1;\n     o *= 1.-dot(uvn,uvn);\n\n     // gamma\n     o = clamp(o,0.,1.);\n     o = pow(o, vec4(1./1.2));\n }\n\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n const float pi = 3.14159;\n const float pi2 = pi * 2.;\n\n const vec2 cellSizePixels = vec2(192.,192.);// best results = any multiple of 2^iterations\n float edgeSizePixels = 2.5;\n const float iterations = 5.;\n\n\n vec2 q(vec2 x, vec2 p)\n {\n     return floor(x/p)*p;\n }\n\n float rand(vec2 co){\n     return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n }\n\n vec3 rand3(vec2 p)\n {\n     vec3 p2 = vec3(p, rand(p));\n     return\n     fract(sin(vec3(\n         dot(p2,vec3(127.1,311.7,427.89)),\n                    dot(p2,vec3(269.5,183.3,77.24)),\n                    dot(p2,vec3(42004.33,123.54,714.24))\n     ))*43758.5453);\n }\n\n float sdAxisAlignedRect(vec2 uv, vec2 tl, vec2 br)\n {\n     vec2 d = max(tl - uv, uv - br);\n     return length(max(vec2(0.0), d)) + min(0.0, max(d.x, d.y));\n }\n\n mat2 rot2D(float r)\n {\n     float c = cos(r), s = sin(r);\n     return mat2(c, s, -s, c);\n }\n float pulse(float x, float pulseWidth, float totalPeriod)\n {\n     x = mod(x,totalPeriod);\n     x -= pulseWidth /= 2.;\n     return 1.-smoothstep(0.,pulseWidth, abs(x));\n }\n\n\n\n void mainImage( out vec4 o, in vec2 i)\n {\n     vec2 uv = i / iResolution.xy - .5;\n     vec2 uvn = uv;// screen / unwarped coords\n\n     uv += iMouse.xy *.1 / iResolution.xy;\n\n     if(iResolution.x > iResolution.y)\n         uv.x *= iResolution.x / iResolution.y;\n     else\n         uv.y /= iResolution.x / iResolution.y;\n\n\n     //uv *= 1.+sin(iTime*0.5)*.1;// zoom\n     uv -= .7;// offset rotation origin\n     float rotation = -(iTime+40.)*0.005;\n     //rotation = -0.2;// fixed-rot\n     uv *= rot2D(rotation);// rot\n\n     vec2 cellSize = cellSizePixels / iResolution.x;\n\n     vec2 cellOrig;\n     float cellID;\n     float edgeSizePixels = 7.;\n\n     for(float i = 0.;i<iterations;i++)\n     {\n         cellSize *= .5;\n         edgeSizePixels *= .5;\n         cellOrig = q(uv, cellSize);\n         cellID = rand(cellOrig);\n         if(i/iterations > sin(cellID*6.28+iTime*.2)*.5+.3)\n             break;\n     }\n     edgeSizePixels = max(edgeSizePixels, 1.);\n\n     //float cellID = rand(cellOrig);\n     float distToCenter = distance(uv, cellOrig+cellSize/2.)/(length(cellSize)/2.);\n     vec2 tl = cellOrig;\n     vec2 br = cellOrig + cellSize;\n     float distToEdge = sdAxisAlignedRect(uv, tl, br) / length(cellSize);// 0 = edge, -1 = center\n\n     float edgeSize = edgeSizePixels/iResolution.x/length(cellSize);\n     float aEdge = smoothstep(-edgeSize, 0., distToEdge);\n\n     float totalPulsePeriod = 10.;// in seconds\n     float highlightDuration = 1.2;\n     float highlightStrength = 1.7;\n     float highlight = pulse((cellID*totalPulsePeriod*totalPulsePeriod)+iTime,highlightDuration,totalPulsePeriod)*highlightStrength+1.;\n\n     // cell background\n     vec3 cellColor = rand3(cellOrig);\n     o = vec4(cellColor.rgbb)*.3;\n     o *= highlight;\n     o *= 1.-distToCenter*.4;\n\n     // edge color\n     vec4 edgeColor = vec4(0,0,0,1);\n     o = mix(o, edgeColor, aEdge);\n\n     // saturation\n     o = clamp(o,0.,1.);\n     //o = mix(o, vec4((o.r+o.g+o.b)/3.), sin(iTime)*.5+.5);\n     o = mix(o, vec4((o.r+o.g+o.b)/3.), .6);\n\n     // tint green / brightness\n     o *= vec4(.5,1,1,0)*2.;\n\n     // noise\n     o.rgb += (rand3(uvn*iTime)-.5)*.1;\n\n     // vignette\n     uvn *= 1.1;\n     o *= 1.-dot(uvn,uvn);\n\n     // gamma\n     o = clamp(o,0.,1.);\n     o = pow(o, vec4(1./1.2));\n }\n\n `;\n\nroot.render(\n    <>\n<ShadertoyReact fs={fragmentShader} />\n<TodoApp />\n<footer>Â©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzeACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACJT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH;EAAe;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACtCd,OAAA,CAACL,OAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXd,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAlB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}