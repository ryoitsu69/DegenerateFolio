{"ast":null,"code":"import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { GlProgramData } from '../GlProgramData.mjs';\nimport { compileShader } from './compileShader.mjs';\nimport { defaultValue } from './defaultValue.mjs';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram.mjs';\nimport { getUboData } from './getUboData.mjs';\nimport { getUniformData } from './getUniformData.mjs';\nimport { logProgramError } from './logProgramError.mjs';\n\"use strict\";\nfunction generateProgram(gl, program) {\n  const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n  const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n  const webGLProgram = gl.createProgram();\n  gl.attachShader(webGLProgram, glVertShader);\n  gl.attachShader(webGLProgram, glFragShader);\n  const transformFeedbackVaryings = program.transformFeedbackVaryings;\n  if (transformFeedbackVaryings) {\n    if (typeof gl.transformFeedbackVaryings !== \"function\") {\n      warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n    } else {\n      gl.transformFeedbackVaryings(webGLProgram, transformFeedbackVaryings.names, transformFeedbackVaryings.bufferMode === \"separate\" ? gl.SEPARATE_ATTRIBS : gl.INTERLEAVED_ATTRIBS);\n    }\n  }\n  gl.linkProgram(webGLProgram);\n  if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {\n    logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n  }\n  program._attributeData = extractAttributesFromGlProgram(webGLProgram, gl, !/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m.test(program.vertex));\n  program._uniformData = getUniformData(webGLProgram, gl);\n  program._uniformBlockData = getUboData(webGLProgram, gl);\n  gl.deleteShader(glVertShader);\n  gl.deleteShader(glFragShader);\n  const uniformData = {};\n  for (const i in program._uniformData) {\n    const data = program._uniformData[i];\n    uniformData[i] = {\n      location: gl.getUniformLocation(webGLProgram, i),\n      value: defaultValue(data.type, data.size)\n    };\n  }\n  const glProgram = new GlProgramData(webGLProgram, uniformData);\n  return glProgram;\n}\nexport { generateProgram };","map":{"version":3,"names":["generateProgram","gl","program","glVertShader","compileShader","VERTEX_SHADER","vertex","glFragShader","FRAGMENT_SHADER","fragment","webGLProgram","createProgram","attachShader","transformFeedbackVaryings","warn","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","logProgramError","_attributeData","extractAttributesFromGlProgram","test","_uniformData","getUniformData","_uniformBlockData","getUboData","deleteShader","uniformData","i","data","location","getUniformLocation","value","defaultValue","type","size","glProgram","GlProgramData"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/shader/program/generateProgram.ts"],"sourcesContent":["import { warn } from '../../../../../utils/logging/warn';\nimport { GlProgramData } from '../GlProgramData';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram';\nimport { getUboData } from './getUboData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlProgram } from '../GlProgram';\nimport type { IGLUniformData } from '../GlProgramData';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n * @private\n */\nexport function generateProgram(gl: GlRenderingContext, program: GlProgram): GlProgramData\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    program._attributeData = extractAttributesFromGlProgram(\n        webGLProgram,\n        gl,\n        !(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertex)\n    );\n\n    program._uniformData = getUniformData(webGLProgram, gl);\n    program._uniformBlockData = getUboData(webGLProgram, gl);\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program._uniformData)\n    {\n        const data = program._uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GlProgramData(webGLProgram, uniformData);\n\n    return glProgram;\n}\n"],"mappings":";;;;;;;;;AAmBgB,SAAAA,gBAAgBC,EAAA,EAAwBC,OACxD;EACI,MAAMC,YAAA,GAAeC,aAAc,CAAAH,EAAA,EAAIA,EAAG,CAAAI,aAAA,EAAeH,OAAA,CAAQI,MAAM;EACvE,MAAMC,YAAA,GAAeH,aAAc,CAAAH,EAAA,EAAIA,EAAG,CAAAO,eAAA,EAAiBN,OAAA,CAAQO,QAAQ;EAErE,MAAAC,YAAA,GAAeT,EAAA,CAAGU,aAAc;EAEnCV,EAAA,CAAAW,YAAA,CAAaF,YAAA,EAAcP,YAAY;EACvCF,EAAA,CAAAW,YAAA,CAAaF,YAAA,EAAcH,YAAY;EAE1C,MAAMM,yBAAA,GAA4BX,OAAQ,CAAAW,yBAAA;EAE1C,IAAIA,yBACJ;IACQ,WAAOZ,EAAG,CAAAY,yBAAA,KAA8B,UAC5C;MAEIC,IAAA,CAAkF;IAAA,CAItF;MACOb,EAAA,CAAAY,yBAAA,CACCH,YAAA,EACAG,yBAA0B,CAAAE,KAAA,EAC1BF,yBAA0B,CAAAG,UAAA,KAAe,UACnC,GAAAf,EAAA,CAAGgB,gBAAA,GACHhB,EAAG,CAAAiB,mBAAA,CACb;IAAA;EACJ;EAGJjB,EAAA,CAAGkB,WAAA,CAAYT,YAAY;EAE3B,IAAI,CAACT,EAAG,CAAAmB,mBAAA,CAAoBV,YAAc,EAAAT,EAAA,CAAGoB,WAAW,CACxD;IACoBC,eAAA,CAAArB,EAAA,EAAIS,YAAc,EAAAP,YAAA,EAAcI,YAAY;EAAA;EAMhEL,OAAA,CAAQqB,cAAiB,GAAAC,8BAAA,CACrBd,YAAA,EACAT,EAAA,EACA,CAAE,iDAAkDwB,IAAK,CAAAvB,OAAA,CAAQI,MAAM,EAC3E;EAEQJ,OAAA,CAAAwB,YAAA,GAAeC,cAAe,CAAAjB,YAAA,EAAcT,EAAE;EAC9CC,OAAA,CAAA0B,iBAAA,GAAoBC,UAAW,CAAAnB,YAAA,EAAcT,EAAE;EAEvDA,EAAA,CAAG6B,YAAA,CAAa3B,YAAY;EAC5BF,EAAA,CAAG6B,YAAA,CAAavB,YAAY;EAE5B,MAAMwB,WAAA,GAA+C,EAAC;EAE3C,WAAAC,CAAA,IAAK9B,OAAA,CAAQwB,YACxB;IACU,MAAAO,IAAA,GAAO/B,OAAQ,CAAAwB,YAAA,CAAaM,CAAC;IAEnCD,WAAA,CAAYC,CAAC,CAAI;MACbE,QAAU,EAAAjC,EAAA,CAAGkC,kBAAmB,CAAAzB,YAAA,EAAcsB,CAAC;MAC/CI,KAAO,EAAAC,YAAA,CAAaJ,IAAK,CAAAK,IAAA,EAAML,IAAA,CAAKM,IAAI;IAAA,CAC5C;EAAA;EAGJ,MAAMC,SAAY,OAAIC,aAAc,CAAA/B,YAAA,EAAcqB,WAAW;EAEtD,OAAAS,SAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}