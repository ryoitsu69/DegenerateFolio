{"ast":null,"code":"//https://www.shadertoy.com/view/XlfGRj\n\nmodule.exports = `\n// Star Nest by Pablo Roman Andrioli\n// License: MIT\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //get coords and direction\n    vec2 uv=fragCoord.xy/iResolution.xy-.5;\n    uv.y*=iResolution.y/iResolution.x;\n    vec3 dir=vec3(uv*zoom,1.);\n    float time=iTime*speed+.25;\n\n    //mouse rotation\n    float a1=.5+iMouse.x/iResolution.x*2.;\n    float a2=.8+iMouse.y/iResolution.y*2.;\n    mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n    mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n    dir.xz*=rot1;\n    dir.xy*=rot2;\n    vec3 from=vec3(1.,.5,0.5);\n    from+=vec3(time*2.,time,-2.);\n    from.xz*=rot1;\n    from.xy*=rot2;\n\n    //volumetric rendering\n    float s=0.1,fade=1.;\n    vec3 v=vec3(0.);\n    for (int r=0; r<volsteps; r++) {\n        vec3 p=from+s*dir*.5;\n        p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n        float pa,a=pa=0.;\n        for (int i=0; i<iterations; i++) {\n            p=abs(p)/dot(p,p)-formuparam; // the magic formula\n            a+=abs(length(p)-pa); // absolute sum of average change\n            pa=length(p);\n        }\n        float dm=max(0.,darkmatter-a*a*.001); //dark matter\n        a*=a*a; // add contrast\n        if (r>6) fade*=1.-dm; // dark matter, don't render near\n        //v+=vec3(dm,dm*.5,0.);\n        v+=fade;\n        v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n        fade*=distfading; // distance fading\n        s+=stepsize;\n    }\n    v=mix(vec3(length(v)),v,saturation); //color adjust\n    fragColor = vec4(v*.01,1.);\n\n}\n\n`;","map":{"version":3,"names":["module","exports"],"sources":["/home/ryoitsu/Documents/DegenerateFolio/DegenerateFolio React/React/src/shaders/star_nest/star_nest.js"],"sourcesContent":["//https://www.shadertoy.com/view/XlfGRj\n\nmodule.exports = `\n// Star Nest by Pablo Roman Andrioli\n// License: MIT\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //get coords and direction\n    vec2 uv=fragCoord.xy/iResolution.xy-.5;\n    uv.y*=iResolution.y/iResolution.x;\n    vec3 dir=vec3(uv*zoom,1.);\n    float time=iTime*speed+.25;\n\n    //mouse rotation\n    float a1=.5+iMouse.x/iResolution.x*2.;\n    float a2=.8+iMouse.y/iResolution.y*2.;\n    mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n    mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n    dir.xz*=rot1;\n    dir.xy*=rot2;\n    vec3 from=vec3(1.,.5,0.5);\n    from+=vec3(time*2.,time,-2.);\n    from.xz*=rot1;\n    from.xy*=rot2;\n\n    //volumetric rendering\n    float s=0.1,fade=1.;\n    vec3 v=vec3(0.);\n    for (int r=0; r<volsteps; r++) {\n        vec3 p=from+s*dir*.5;\n        p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n        float pa,a=pa=0.;\n        for (int i=0; i<iterations; i++) {\n            p=abs(p)/dot(p,p)-formuparam; // the magic formula\n            a+=abs(length(p)-pa); // absolute sum of average change\n            pa=length(p);\n        }\n        float dm=max(0.,darkmatter-a*a*.001); //dark matter\n        a*=a*a; // add contrast\n        if (r>6) fade*=1.-dm; // dark matter, don't render near\n        //v+=vec3(dm,dm*.5,0.);\n        v+=fade;\n        v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n        fade*=distfading; // distance fading\n        s+=stepsize;\n    }\n    v=mix(vec3(length(v)),v,saturation); //color adjust\n    fragColor = vec4(v*.01,1.);\n\n}\n\n`\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAO,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}