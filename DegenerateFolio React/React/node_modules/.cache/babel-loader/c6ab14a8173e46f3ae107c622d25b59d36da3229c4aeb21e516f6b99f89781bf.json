{"ast":null,"code":"import { u8aToU8a } from '@polkadot/util';\nimport { vrfSign } from '@polkadot/wasm-crypto';\nconst EMPTY_U8A = new Uint8Array();\n/**\n * @name sr25519VrfSign\n * @description Sign with sr25519 vrf signing (deterministic)\n */\nexport function sr25519VrfSign(message, {\n  secretKey\n}, context = EMPTY_U8A, extra = EMPTY_U8A) {\n  if (secretKey?.length !== 64) {\n    throw new Error('Invalid secretKey, expected 64-bytes');\n  }\n  return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));\n}","map":{"version":3,"names":["u8aToU8a","vrfSign","EMPTY_U8A","Uint8Array","sr25519VrfSign","message","secretKey","context","extra","length","Error"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/sr25519/vrfSign.js"],"sourcesContent":["import { u8aToU8a } from '@polkadot/util';\nimport { vrfSign } from '@polkadot/wasm-crypto';\nconst EMPTY_U8A = new Uint8Array();\n/**\n * @name sr25519VrfSign\n * @description Sign with sr25519 vrf signing (deterministic)\n */\nexport function sr25519VrfSign(message, { secretKey }, context = EMPTY_U8A, extra = EMPTY_U8A) {\n    if (secretKey?.length !== 64) {\n        throw new Error('Invalid secretKey, expected 64-bytes');\n    }\n    return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAAC,CAAC;AAClC;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,OAAO,EAAE;EAAEC;AAAU,CAAC,EAAEC,OAAO,GAAGL,SAAS,EAAEM,KAAK,GAAGN,SAAS,EAAE;EAC3F,IAAII,SAAS,EAAEG,MAAM,KAAK,EAAE,EAAE;IAC1B,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EAC3D;EACA,OAAOT,OAAO,CAACK,SAAS,EAAEN,QAAQ,CAACO,OAAO,CAAC,EAAEP,QAAQ,CAACK,OAAO,CAAC,EAAEL,QAAQ,CAACQ,KAAK,CAAC,CAAC;AACpF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}