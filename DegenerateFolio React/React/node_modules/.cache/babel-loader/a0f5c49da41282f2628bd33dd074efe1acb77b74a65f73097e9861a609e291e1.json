{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/components/Wallets.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Web3\n} = require('web3');\nconst {\n  ApiPromise,\n  WsProvider\n} = require('@polkadot/api');\nconst ethRPC = new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst optRPC = new Web3(new Web3.providers.HttpProvider(\"https://optimism-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst arbRPC = new Web3(new Web3.providers.HttpProvider(\"https://arbitrum-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst starkRPC = new Web3(new Web3.providers.HttpProvider(\"https://starknet-mainnet.g.alchemy.com/v2/eDTvRiR7UGc1vibC0sQviDBnqHmlCnKz\"));\nconst bscRPC = new Web3(new Web3.providers.HttpProvider(\"https://bnb-mainnet.g.alchemy.com/v2/Wflh86IAxtX-p7SFc--_YxhsIINWRfPR\"));\nconst provider = new WsProvider('wss://rpc.polkadot.io');\nconst dotApi = await ApiPromise.create({\n  provider\n});\nconst chain = await dotApi.rpc.system.chain();\nconst dotAddr = \"13gBrKGMhttuNjywbmEfK5NFeNbHpbQGbJtFVRMmUWHaSNZf\";\nconst [{\n  nonce: accountNonce\n}, now, validators] = await Promise.all([dotApi.query.system.account(dotAddr), dotApi.query.timestamp.now(), dotApi.query.session.validators()]);\nconst unsub = await dotApi.query.system.account(dotAddr, ({\n  nonce,\n  data: balance\n}) => {\n  console.log(`free balance is ${balance.free} with ${balance.locked} reserved and a nonce of ${nonce}`);\n});\nconst unsub2 = await dotApi.query.system.account(dotAddr);\nconsole.log(unsub2);\nif (validators && validators.length > 0) {\n  // Retrieve the balances for all validators\n  const validatorBalances = await Promise.all(validators.map(authorityId => dotApi.query.system.account(authorityId)));\n\n  // Print out the authorityIds and balances of all validators\n  console.log('validators', validators.map((authorityId, index) => ({\n    address: authorityId.toString(),\n    balance: validatorBalances[index].data.free.toHuman(),\n    nonce: validatorBalances[index].nonce.toHuman()\n  })));\n}\nclass Chain {\n  constructor(rpc, tokenName, mainTokenAddress) {\n    this.rpc = rpc;\n    this.tokenName = tokenName;\n    this.mainTokenAddress = mainTokenAddress;\n  }\n}\nclass balanceEntry {\n  constructor(tokenName, amount, chain, address, price) {\n    this.tokenName = tokenName;\n    this.amount = amount;\n    this.chain = chain;\n    this.address = address;\n    this.price = price;\n  }\n}\n\n// The minimum ABI required to get the ERC20 Token balance\nconst minABI = [\n// balanceOf\n{\n  constant: true,\n  inputs: [{\n    name: '_owner',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    name: 'balance',\n    type: 'uint256'\n  }],\n  type: 'function'\n},\n// decimals\n{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"decimals\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint8\"\n  }],\n  \"type\": \"function\"\n}];\nclass Wallets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chains = new Map();\n    this.balances = [];\n    this.chains.set('ETH', new Chain(ethRPC, 'ETH', null));\n    this.chains.set('OPT', new Chain(optRPC, 'OPT', \"0x4200000000000000000000000000000000000042\"));\n    this.chains.set('ARB', new Chain(arbRPC, 'ARB', \"0x912ce59144191c1204e64559fe8253a0e49e6548\"));\n    this.chains.set('STRK', new Chain(starkRPC, 'STRK', '0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D'));\n    this.chains.set('BSC', new Chain(bscRPC, 'BNB', null));\n    this.getBalanceGasToken.bind(this);\n    this.getERC20Balance.bind(this);\n  }\n  async getERC20Balance(wallet, tokenAddr, chain, tokenName) {\n    console.log(chain);\n    const contract = new chain.rpc.eth.Contract(minABI, tokenAddr);\n    let result = await contract.methods.balanceOf(wallet).call();\n    result = this.fromWei(result);\n    this.balances.push(new balanceEntry(tokenName, result, chain.tokenName, wallet, 0.5));\n    console.log(this.balances);\n  }\n  getBalanceGasToken(address, chain) {\n    chain.rpc.eth.getBalance(address).then(balance => console.log(bscRPC.utils.fromWei(balance, \"ether\") + chain.tokenName));\n  }\n  fromWei(balance) {\n    let decimals = balance.toString().slice(-18);\n    let whole = balance.toString().split(decimals)[0];\n    return parseFloat(whole + \".\" + decimals);\n  }\n  render() {\n    {\n      this.getERC20Balance(\"0x4AE673F8898408d39966dE7ECC0BD7128b4b912E\", \"0x912ce59144191c1204e64559fe8253a0e49e6548\", this.chains.get('ARB'), \"ARB\");\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n}\n;\nexport default Wallets;","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","Web3","require","ApiPromise","WsProvider","ethRPC","providers","HttpProvider","optRPC","arbRPC","starkRPC","bscRPC","provider","dotApi","create","chain","rpc","system","dotAddr","nonce","accountNonce","now","validators","Promise","all","query","account","timestamp","session","unsub","data","balance","console","log","free","locked","unsub2","length","validatorBalances","map","authorityId","index","address","toString","toHuman","Chain","constructor","tokenName","mainTokenAddress","balanceEntry","amount","price","minABI","constant","inputs","name","type","outputs","Wallets","props","chains","Map","balances","set","getBalanceGasToken","bind","getERC20Balance","wallet","tokenAddr","contract","eth","Contract","result","methods","balanceOf","call","fromWei","push","getBalance","then","utils","decimals","slice","whole","split","parseFloat","render","get","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/components/Wallets.jsx"],"sourcesContent":["import React, { Component } from 'react';\nconst {Web3} = require('web3');\nconst { ApiPromise, WsProvider } = require('@polkadot/api');\n\nconst ethRPC = new Web3(new Web3.providers.HttpProvider(\"https://mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst optRPC = new Web3(new Web3.providers.HttpProvider(\"https://optimism-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst arbRPC = new Web3(new Web3.providers.HttpProvider(\"https://arbitrum-mainnet.infura.io/v3/ff42bd19bf6e4ca9a401fbf0a8a36f15\"));\nconst starkRPC = new Web3(new Web3.providers.HttpProvider(\"https://starknet-mainnet.g.alchemy.com/v2/eDTvRiR7UGc1vibC0sQviDBnqHmlCnKz\"));\nconst bscRPC = new Web3(new Web3.providers.HttpProvider(\"https://bnb-mainnet.g.alchemy.com/v2/Wflh86IAxtX-p7SFc--_YxhsIINWRfPR\"));\n\nconst provider =new WsProvider('wss://rpc.polkadot.io');\nconst dotApi = await ApiPromise.create({provider});\nconst chain = await dotApi.rpc.system.chain();\nconst dotAddr = \"13gBrKGMhttuNjywbmEfK5NFeNbHpbQGbJtFVRMmUWHaSNZf\";\n  const [{ nonce: accountNonce }, now, validators] = await Promise.all([\n    dotApi.query.system.account(dotAddr),\n    dotApi.query.timestamp.now(),\n    dotApi.query.session.validators()\n  ]);\nconst unsub = await dotApi.query.system.account(dotAddr, ({ nonce, data: balance }) => {\n  console.log(`free balance is ${balance.free} with ${balance.locked} reserved and a nonce of ${nonce}`);\n});\nconst unsub2 = await dotApi.query.system.account(dotAddr);\n  console.log(unsub2);\n  if (validators && validators.length > 0) {\n    // Retrieve the balances for all validators\n    const validatorBalances = await Promise.all(\n      validators.map((authorityId) =>\n        dotApi.query.system.account(authorityId)\n      )\n    );\n\n    // Print out the authorityIds and balances of all validators\n    console.log('validators', validators.map((authorityId, index) => ({\n      address: authorityId.toString(),\n      balance: validatorBalances[index].data.free.toHuman(),\n      nonce: validatorBalances[index].nonce.toHuman()\n    })));\n  }\nclass Chain{\n  constructor(rpc, tokenName, mainTokenAddress){\n    this.rpc = rpc;\n    this.tokenName = tokenName;\n    this.mainTokenAddress = mainTokenAddress;\n  }\n}\n\nclass balanceEntry{\n  constructor(tokenName, amount, chain, address, price){\n    this.tokenName = tokenName;\n    this.amount = amount;\n    this.chain = chain;\n    this.address = address;\n    this.price = price;\n  }\n}\n\n// The minimum ABI required to get the ERC20 Token balance\nconst minABI = [\n  // balanceOf\n  {\n    constant: true,\n    inputs: [{ name: '_owner', type: 'address' }],\n    name: 'balanceOf',\n    outputs: [{ name: 'balance', type: 'uint256'}],\n    type: 'function',\n  },\n  // decimals\n  {\n    \"constant\":true,\n    \"inputs\":[],\n    \"name\":\"decimals\",\n    \"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\n    \"type\":\"function\"\n  }\n\n];\n\nclass Wallets extends React.Component{\n\n\n\n  constructor(props){\n    super(props);\n    this.chains = new Map();\n    this.balances = [];\n    this.chains.set('ETH', new Chain(ethRPC, 'ETH', null));\n    this.chains.set('OPT', new Chain(optRPC, 'OPT', \"0x4200000000000000000000000000000000000042\"));\n    this.chains.set('ARB', new Chain(arbRPC, 'ARB', \"0x912ce59144191c1204e64559fe8253a0e49e6548\"));\n    this.chains.set('STRK', new Chain(starkRPC, 'STRK', '0x04718f5a0Fc34cC1AF16A1cdee98fFB20C31f5cD61D6Ab07201858f4287c938D'));\n    this.chains.set('BSC', new Chain(bscRPC, 'BNB', null));\n    this.getBalanceGasToken.bind(this);\n    this.getERC20Balance.bind(this);\n  }\n\n\n  async getERC20Balance(wallet,tokenAddr,chain,tokenName){\n    console.log(chain);\n    const contract = new chain.rpc.eth.Contract(minABI, tokenAddr);\n    let result = await contract.methods.balanceOf(wallet).call();\n    result = this.fromWei(result);\n    this.balances.push(new balanceEntry(tokenName,result,chain.tokenName,wallet,0.5));\n    console.log(this.balances);\n  }\n\n  getBalanceGasToken(address, chain){\n    chain.rpc.eth.getBalance(address).then((balance) => console.log(bscRPC.utils.fromWei(balance, \"ether\") + chain.tokenName));\n  }\n\n  fromWei(balance){\n    let decimals = balance.toString().slice(-18);\n    let whole = balance.toString().split(decimals)[0];\n    return parseFloat(whole+\".\"+decimals);\n  }\n\n\n  render(){\n  {this.getERC20Balance(\"0x4AE673F8898408d39966dE7ECC0BD7128b4b912E\",\"0x912ce59144191c1204e64559fe8253a0e49e6548\", this.chains.get('ARB'), \"ARB\")}\n    return (\n      <div></div>\n\n    );\n  }\n};\nexport default Wallets;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}