{"ast":null,"code":"\"use strict\";\n\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\nexport { State };","map":{"version":3,"names":["blendModeIds","normal","add","multiply","screen","overlay","erase","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_State","constructor","data","blendMode","polygonOffset","blend","depthMask","value","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","state","default2d","State"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts"],"sourcesContent":["/* eslint-disable max-len */\nimport type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}