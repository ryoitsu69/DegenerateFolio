{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registry = void 0;\nconst web3_eth_contract_1 = require(\"web3-eth-contract\");\nconst ENSRegistry_js_1 = require(\"./abi/ens/ENSRegistry.js\");\nconst PublicResolver_js_1 = require(\"./abi/ens/PublicResolver.js\");\nconst config_js_1 = require(\"./config.js\");\nconst utils_js_1 = require(\"./utils.js\");\nclass Registry {\n  constructor(context, customRegistryAddress) {\n    this.contract = new web3_eth_contract_1.Contract(ENSRegistry_js_1.ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : config_js_1.registryAddresses.main, context);\n    this.context = context;\n  }\n  getOwner(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const result = this.contract.methods.owner((0, utils_js_1.namehash)(name)).call();\n        return result;\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  getTTL(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return this.contract.methods.ttl((0, utils_js_1.namehash)(name)).call();\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  recordExists(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const promise = this.contract.methods.recordExists((0, utils_js_1.namehash)(name)).call();\n        return promise;\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        return this.contract.methods.resolver((0, utils_js_1.namehash)(name)).call().then(address => {\n          // address type is unknown, not sure why\n          if (typeof address === 'string') {\n            const contract = new web3_eth_contract_1.Contract(PublicResolver_js_1.PublicResolverAbi, address, this.context);\n            // TODO: set contract provider needs to be added when ens current provider\n            return contract;\n          }\n          throw new Error();\n        });\n      } catch (error) {\n        throw new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n      }\n    });\n  }\n  get events() {\n    return this.contract.events;\n  }\n}\nexports.Registry = Registry;","map":{"version":3,"names":["web3_eth_contract_1","require","ENSRegistry_js_1","PublicResolver_js_1","config_js_1","utils_js_1","Registry","constructor","context","customRegistryAddress","contract","Contract","ENSRegistryAbi","registryAddresses","main","getOwner","name","result","methods","owner","namehash","call","error","Error","getTTL","ttl","recordExists","promise","getResolver","resolver","then","address","PublicResolverAbi","events","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-ens/src/registry.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContextObject } from 'web3-core';\nimport { Contract } from 'web3-eth-contract';\nimport { Address } from 'web3-types';\nimport { ENSRegistryAbi } from './abi/ens/ENSRegistry.js';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { registryAddresses } from './config.js';\nimport { namehash } from './utils.js';\n\nexport class Registry {\n\tprivate readonly contract: Contract<typeof ENSRegistryAbi>;\n\tprivate readonly context: Web3ContextObject;\n\n\tpublic constructor(context: Web3ContextObject, customRegistryAddress?: Address) {\n\t\tthis.contract = new Contract(\n\t\t\tENSRegistryAbi,\n\t\t\tcustomRegistryAddress ?? registryAddresses.main,\n\t\t\tcontext,\n\t\t);\n\n\t\tthis.context = context;\n\t}\n\n\tpublic async getOwner(name: string) {\n\t\ttry {\n\t\t\tconst result = this.contract.methods.owner(namehash(name)).call();\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async getTTL(name: string) {\n\t\ttry {\n\t\t\treturn this.contract.methods.ttl(namehash(name)).call();\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async recordExists(name: string) {\n\t\ttry {\n\t\t\tconst promise = this.contract.methods.recordExists(namehash(name)).call();\n\n\t\t\treturn promise;\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async getResolver(name: string) {\n\t\ttry {\n\t\t\treturn this.contract.methods\n\t\t\t\t.resolver(namehash(name))\n\t\t\t\t.call()\n\t\t\t\t.then(address => {\n\t\t\t\t\t// address type is unknown, not sure why\n\t\t\t\t\tif (typeof address === 'string') {\n\t\t\t\t\t\tconst contract = new Contract(PublicResolverAbi, address, this.context);\n\t\t\t\t\t\t// TODO: set contract provider needs to be added when ens current provider\n\t\t\t\t\t\treturn contract;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic get events() {\n\t\treturn this.contract.events;\n\t}\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAAA,mBAAA,GAAAC,OAAA;AAEA,MAAAC,gBAAA,GAAAD,OAAA;AACA,MAAAE,mBAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AAEA,MAAaK,QAAQ;EAIpBC,YAAmBC,OAA0B,EAAEC,qBAA+B;IAC7E,IAAI,CAACC,QAAQ,GAAG,IAAIV,mBAAA,CAAAW,QAAQ,CAC3BT,gBAAA,CAAAU,cAAc,EACdH,qBAAqB,aAArBA,qBAAqB,cAArBA,qBAAqB,GAAIL,WAAA,CAAAS,iBAAiB,CAACC,IAAI,EAC/CN,OAAO,CACP;IAED,IAAI,CAACA,OAAO,GAAGA,OAAO;EACvB;EAEaO,QAAQA,CAACC,IAAY;;MACjC,IAAI;QACH,MAAMC,MAAM,GAAG,IAAI,CAACP,QAAQ,CAACQ,OAAO,CAACC,KAAK,CAAC,IAAAd,UAAA,CAAAe,QAAQ,EAACJ,IAAI,CAAC,CAAC,CAACK,IAAI,EAAE;QAEjE,OAAOJ,MAAM;OACb,CAAC,OAAOK,KAAK,EAAE;QACf,MAAM,IAAIC,KAAK,EAAE,CAAC,CAAC;;IAErB,CAAC;;EAEYC,MAAMA,CAACR,IAAY;;MAC/B,IAAI;QACH,OAAO,IAAI,CAACN,QAAQ,CAACQ,OAAO,CAACO,GAAG,CAAC,IAAApB,UAAA,CAAAe,QAAQ,EAACJ,IAAI,CAAC,CAAC,CAACK,IAAI,EAAE;OACvD,CAAC,OAAOC,KAAK,EAAE;QACf,MAAM,IAAIC,KAAK,EAAE,CAAC,CAAC;;IAErB,CAAC;;EAEYG,YAAYA,CAACV,IAAY;;MACrC,IAAI;QACH,MAAMW,OAAO,GAAG,IAAI,CAACjB,QAAQ,CAACQ,OAAO,CAACQ,YAAY,CAAC,IAAArB,UAAA,CAAAe,QAAQ,EAACJ,IAAI,CAAC,CAAC,CAACK,IAAI,EAAE;QAEzE,OAAOM,OAAO;OACd,CAAC,OAAOL,KAAK,EAAE;QACf,MAAM,IAAIC,KAAK,EAAE,CAAC,CAAC;;IAErB,CAAC;;EAEYK,WAAWA,CAACZ,IAAY;;MACpC,IAAI;QACH,OAAO,IAAI,CAACN,QAAQ,CAACQ,OAAO,CAC1BW,QAAQ,CAAC,IAAAxB,UAAA,CAAAe,QAAQ,EAACJ,IAAI,CAAC,CAAC,CACxBK,IAAI,EAAE,CACNS,IAAI,CAACC,OAAO,IAAG;UACf;UACA,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;YAChC,MAAMrB,QAAQ,GAAG,IAAIV,mBAAA,CAAAW,QAAQ,CAACR,mBAAA,CAAA6B,iBAAiB,EAAED,OAAO,EAAE,IAAI,CAACvB,OAAO,CAAC;YACvE;YACA,OAAOE,QAAQ;;UAEhB,MAAM,IAAIa,KAAK,EAAE;QAClB,CAAC,CAAC;OACH,CAAC,OAAOD,KAAK,EAAE;QACf,MAAM,IAAIC,KAAK,EAAE,CAAC,CAAC;;IAErB,CAAC;;EAED,IAAWU,MAAMA,CAAA;IAChB,OAAO,IAAI,CAACvB,QAAQ,CAACuB,MAAM;EAC5B;;AA/DDC,OAAA,CAAA5B,QAAA,GAAAA,QAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}