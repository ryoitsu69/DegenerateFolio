{"ast":null,"code":"import { map, switchMap } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nexport function _stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, eras, withActive = false) => {\n    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    }))));\n  });\n}\nexport function stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));\n}\nexport const stakerExposure = /*#__PURE__*/firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));","map":{"version":3,"names":["map","switchMap","firstMemo","memo","_stakerExposures","instanceId","api","accountIds","eras","withActive","stakerIds","a","registry","createType","toString","derive","staking","_erasExposure","pipe","exposures","stakerId","era","nominators","allNominators","validators","allValidators","isValidator","nominating","forEach","validatorId","isEmpty","Object","keys","length","stakerExposures","erasHistoric","stakerExposure","accountId"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/staking/stakerExposure.js"],"sourcesContent":["import { map, switchMap } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nexport function _stakerExposures(instanceId, api) {\n    return memo(instanceId, (accountIds, eras, withActive = false) => {\n        const stakerIds = accountIds.map((a) => api.registry.createType('AccountId', a).toString());\n        return api.derive.staking._erasExposure(eras, withActive).pipe(map((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {\n            const isValidator = !!allValidators[stakerId];\n            const validators = {};\n            const nominating = allNominators[stakerId] || [];\n            if (isValidator) {\n                validators[stakerId] = allValidators[stakerId];\n            }\n            else if (nominating) {\n                nominating.forEach(({ validatorId }) => {\n                    validators[validatorId] = allValidators[validatorId];\n                });\n            }\n            return { era, isEmpty: !Object.keys(validators).length, isValidator, nominating, validators };\n        }))));\n    });\n}\nexport function stakerExposures(instanceId, api) {\n    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));\n}\nexport const stakerExposure = /*#__PURE__*/ firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,SAAS,QAAQ,MAAM;AACrC,SAASC,SAAS,EAAEC,IAAI,QAAQ,kBAAkB;AAClD,OAAO,SAASC,gBAAgBA,CAACC,UAAU,EAAEC,GAAG,EAAE;EAC9C,OAAOH,IAAI,CAACE,UAAU,EAAE,CAACE,UAAU,EAAEC,IAAI,EAAEC,UAAU,GAAG,KAAK,KAAK;IAC9D,MAAMC,SAAS,GAAGH,UAAU,CAACP,GAAG,CAAEW,CAAC,IAAKL,GAAG,CAACM,QAAQ,CAACC,UAAU,CAAC,WAAW,EAAEF,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;IAC3F,OAAOR,GAAG,CAACS,MAAM,CAACC,OAAO,CAACC,aAAa,CAACT,IAAI,EAAEC,UAAU,CAAC,CAACS,IAAI,CAAClB,GAAG,CAAEmB,SAAS,IAAKT,SAAS,CAACV,GAAG,CAAEoB,QAAQ,IAAKD,SAAS,CAACnB,GAAG,CAAC,CAAC;MAAEqB,GAAG;MAAEC,UAAU,EAAEC,aAAa;MAAEC,UAAU,EAAEC;IAAc,CAAC,KAAK;MAC3L,MAAMC,WAAW,GAAG,CAAC,CAACD,aAAa,CAACL,QAAQ,CAAC;MAC7C,MAAMI,UAAU,GAAG,CAAC,CAAC;MACrB,MAAMG,UAAU,GAAGJ,aAAa,CAACH,QAAQ,CAAC,IAAI,EAAE;MAChD,IAAIM,WAAW,EAAE;QACbF,UAAU,CAACJ,QAAQ,CAAC,GAAGK,aAAa,CAACL,QAAQ,CAAC;MAClD,CAAC,MACI,IAAIO,UAAU,EAAE;QACjBA,UAAU,CAACC,OAAO,CAAC,CAAC;UAAEC;QAAY,CAAC,KAAK;UACpCL,UAAU,CAACK,WAAW,CAAC,GAAGJ,aAAa,CAACI,WAAW,CAAC;QACxD,CAAC,CAAC;MACN;MACA,OAAO;QAAER,GAAG;QAAES,OAAO,EAAE,CAACC,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC,CAACS,MAAM;QAAEP,WAAW;QAAEC,UAAU;QAAEH;MAAW,CAAC;IACjG,CAAC,CAAC,CAAC,CAAC,CAAC;EACT,CAAC,CAAC;AACN;AACA,OAAO,SAASU,eAAeA,CAAC7B,UAAU,EAAEC,GAAG,EAAE;EAC7C,OAAOH,IAAI,CAACE,UAAU,EAAE,CAACE,UAAU,EAAEE,UAAU,GAAG,KAAK,KAAKH,GAAG,CAACS,MAAM,CAACC,OAAO,CAACmB,YAAY,CAAC1B,UAAU,CAAC,CAACS,IAAI,CAACjB,SAAS,CAAEO,IAAI,IAAKF,GAAG,CAACS,MAAM,CAACC,OAAO,CAACZ,gBAAgB,CAACG,UAAU,EAAEC,IAAI,EAAEC,UAAU,CAAC,CAAC,CAAC,CAAC;AACzM;AACA,OAAO,MAAM2B,cAAc,GAAG,aAAclC,SAAS,CAAC,CAACI,GAAG,EAAE+B,SAAS,EAAE5B,UAAU,KAAKH,GAAG,CAACS,MAAM,CAACC,OAAO,CAACkB,eAAe,CAAC,CAACG,SAAS,CAAC,EAAE5B,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}