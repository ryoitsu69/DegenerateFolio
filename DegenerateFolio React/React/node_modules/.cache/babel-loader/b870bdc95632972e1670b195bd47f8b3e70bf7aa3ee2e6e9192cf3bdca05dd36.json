{"ast":null,"code":"\"use strict\";\n\n// Keep all classes requiring libsodium-js in one file as having multiple\n// requiring of the libsodium-wrappers module currently crashes browsers\n//\n// libsodium.js API: https://gist.github.com/webmaster128/b2dbe6d54d36dd168c9fabf441b9b09c\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Xchacha20poly1305Ietf = exports.xchacha20NonceLength = exports.Ed25519 = exports.Ed25519Keypair = exports.Argon2id = exports.isArgon2idOptions = void 0;\nconst utils_1 = require(\"@cosmjs/utils\");\n// Using crypto_pwhash requires sumo. Once we migrate to a standalone\n// Argon2 implementation, we can use the normal libsodium-wrappers\n// again: https://github.com/cosmos/cosmjs/issues/1031\nconst libsodium_wrappers_sumo_1 = __importDefault(require(\"libsodium-wrappers-sumo\"));\nfunction isArgon2idOptions(thing) {\n  if (!(0, utils_1.isNonNullObject)(thing)) return false;\n  if (typeof thing.outputLength !== \"number\") return false;\n  if (typeof thing.opsLimit !== \"number\") return false;\n  if (typeof thing.memLimitKib !== \"number\") return false;\n  return true;\n}\nexports.isArgon2idOptions = isArgon2idOptions;\nclass Argon2id {\n  static async execute(password, salt, options) {\n    await libsodium_wrappers_sumo_1.default.ready;\n    return libsodium_wrappers_sumo_1.default.crypto_pwhash(options.outputLength, password, salt,\n    // libsodium only supports 16 byte salts and will throw when you don't respect that\n    options.opsLimit, options.memLimitKib * 1024, libsodium_wrappers_sumo_1.default.crypto_pwhash_ALG_ARGON2ID13);\n  }\n}\nexports.Argon2id = Argon2id;\nclass Ed25519Keypair {\n  // a libsodium privkey has the format `<ed25519 privkey> + <ed25519 pubkey>`\n  static fromLibsodiumPrivkey(libsodiumPrivkey) {\n    if (libsodiumPrivkey.length !== 64) {\n      throw new Error(`Unexpected key length ${libsodiumPrivkey.length}. Must be 64.`);\n    }\n    return new Ed25519Keypair(libsodiumPrivkey.slice(0, 32), libsodiumPrivkey.slice(32, 64));\n  }\n  constructor(privkey, pubkey) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n  }\n  toLibsodiumPrivkey() {\n    return new Uint8Array([...this.privkey, ...this.pubkey]);\n  }\n}\nexports.Ed25519Keypair = Ed25519Keypair;\nclass Ed25519 {\n  /**\n   * Generates a keypair deterministically from a given 32 bytes seed.\n   *\n   * This seed equals the Ed25519 private key.\n   * For implementation details see crypto_sign_seed_keypair in\n   * https://download.libsodium.org/doc/public-key_cryptography/public-key_signatures.html\n   * and diagram on https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  static async makeKeypair(seed) {\n    await libsodium_wrappers_sumo_1.default.ready;\n    const keypair = libsodium_wrappers_sumo_1.default.crypto_sign_seed_keypair(seed);\n    return Ed25519Keypair.fromLibsodiumPrivkey(keypair.privateKey);\n  }\n  static async createSignature(message, keyPair) {\n    await libsodium_wrappers_sumo_1.default.ready;\n    return libsodium_wrappers_sumo_1.default.crypto_sign_detached(message, keyPair.toLibsodiumPrivkey());\n  }\n  static async verifySignature(signature, message, pubkey) {\n    await libsodium_wrappers_sumo_1.default.ready;\n    return libsodium_wrappers_sumo_1.default.crypto_sign_verify_detached(signature, message, pubkey);\n  }\n}\nexports.Ed25519 = Ed25519;\n/**\n * Nonce length in bytes for all flavours of XChaCha20.\n *\n * @see https://libsodium.gitbook.io/doc/advanced/stream_ciphers/xchacha20#notes\n */\nexports.xchacha20NonceLength = 24;\nclass Xchacha20poly1305Ietf {\n  static async encrypt(message, key, nonce) {\n    await libsodium_wrappers_sumo_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_sumo_1.default.crypto_aead_xchacha20poly1305_ietf_encrypt(message, additionalData, null,\n    // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    nonce, key);\n  }\n  static async decrypt(ciphertext, key, nonce) {\n    await libsodium_wrappers_sumo_1.default.ready;\n    const additionalData = null;\n    return libsodium_wrappers_sumo_1.default.crypto_aead_xchacha20poly1305_ietf_decrypt(null,\n    // secret nonce: unused and should be null (https://download.libsodium.org/doc/secret-key_cryptography/aead/chacha20-poly1305/xchacha20-poly1305_construction)\n    ciphertext, additionalData, nonce, key);\n  }\n}\nexports.Xchacha20poly1305Ietf = Xchacha20poly1305Ietf;","map":{"version":3,"names":["utils_1","require","libsodium_wrappers_sumo_1","__importDefault","isArgon2idOptions","thing","isNonNullObject","outputLength","opsLimit","memLimitKib","exports","Argon2id","execute","password","salt","options","default","ready","crypto_pwhash","crypto_pwhash_ALG_ARGON2ID13","Ed25519Keypair","fromLibsodiumPrivkey","libsodiumPrivkey","length","Error","slice","constructor","privkey","pubkey","toLibsodiumPrivkey","Uint8Array","Ed25519","makeKeypair","seed","keypair","crypto_sign_seed_keypair","privateKey","createSignature","message","keyPair","crypto_sign_detached","verifySignature","signature","crypto_sign_verify_detached","xchacha20NonceLength","Xchacha20poly1305Ietf","encrypt","key","nonce","additionalData","crypto_aead_xchacha20poly1305_ietf_encrypt","decrypt","ciphertext","crypto_aead_xchacha20poly1305_ietf_decrypt"],"sources":["../src/libsodium.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}