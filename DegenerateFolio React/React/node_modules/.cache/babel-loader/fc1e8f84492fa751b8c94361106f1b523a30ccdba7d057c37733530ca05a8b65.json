{"ast":null,"code":"import { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\n\"use strict\";\nclass BitmapFont extends AbstractBitmapFont {\n  constructor(options, url) {\n    super();\n    const {\n      textures,\n      data\n    } = options;\n    Object.keys(data.pages).forEach(key => {\n      const pageData = data.pages[parseInt(key, 10)];\n      const texture = textures[pageData.id];\n      this.pages.push({\n        texture\n      });\n    });\n    Object.keys(data.chars).forEach(key => {\n      const charData = data.chars[key];\n      const {\n        frame: textureFrame,\n        source: textureSource\n      } = textures[charData.page];\n      const frameReal = new Rectangle(charData.x + textureFrame.x, charData.y + textureFrame.y, charData.width, charData.height);\n      const texture = new Texture({\n        source: textureSource,\n        frame: frameReal\n      });\n      this.chars[key] = {\n        id: key.codePointAt(0),\n        xOffset: charData.xOffset,\n        yOffset: charData.yOffset,\n        xAdvance: charData.xAdvance,\n        kerning: charData.kerning ?? {},\n        texture\n      };\n    });\n    this.baseRenderedFontSize = data.fontSize;\n    this.baseMeasurementFontSize = data.fontSize;\n    this.fontMetrics = {\n      ascent: 0,\n      descent: 0,\n      fontSize: data.fontSize\n    };\n    this.baseLineOffset = data.baseLineOffset;\n    this.lineHeight = data.lineHeight;\n    this.fontFamily = data.fontFamily;\n    this.distanceField = data.distanceField ?? {\n      type: \"none\",\n      range: 0\n    };\n    this.url = url;\n  }\n  /** Destroys the BitmapFont object. */\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const {\n        texture\n      } = this.pages[i];\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n  /**\n   * Generates a bitmap-font for the given style and character set\n   * @param options - Setup options for font generation.\n   * @returns Font generated by style options.\n   * @example\n   * import { BitmapFont, BitmapText } from 'pixi.js';\n   *\n   * BitmapFont.install('TitleFont', {\n   *     fontFamily: 'Arial',\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: 'purple',\n   * });\n   *\n   * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n   */\n  static install(options) {\n    BitmapFontManager.install(options);\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  static uninstall(name) {\n    BitmapFontManager.uninstall(name);\n  }\n}\nexport { BitmapFont };","map":{"version":3,"names":["BitmapFont","AbstractBitmapFont","constructor","options","url","textures","data","Object","keys","pages","forEach","key","pageData","parseInt","texture","id","push","chars","charData","frame","textureFrame","source","textureSource","page","frameReal","Rectangle","x","y","width","height","Texture","codePointAt","xOffset","yOffset","xAdvance","kerning","baseRenderedFontSize","fontSize","baseMeasurementFontSize","fontMetrics","ascent","descent","baseLineOffset","lineHeight","fontFamily","distanceField","type","range","destroy","i","length","install","BitmapFontManager","uninstall","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-bitmap/BitmapFont.ts"],"sourcesContent":["import { Rectangle } from '../../maths/shapes/Rectangle';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { BitmapFontManager } from './BitmapFontManager';\n\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\nimport type { BitmapFontData } from './AbstractBitmapFont';\nimport type { BitmapFontInstallOptions } from './BitmapFontManager';\n\n/**\n * Options for creating a BitmapFont.\n * @memberof text\n */\nexport interface BitmapFontOptions\n{\n    data: BitmapFontData\n    textures: Texture[]\n}\n\n/**\n * A BitmapFont object represents a particular font face, size, and style.\n * @memberof text\n */\nexport class BitmapFont extends AbstractBitmapFont<BitmapFont>\n{\n    /** the url of the font */\n    public url?: string;\n\n    constructor(options: BitmapFontOptions, url?: string)\n    {\n        super();\n\n        const { textures, data } = options;\n\n        Object.keys(data.pages).forEach((key: string) =>\n        {\n            const pageData = data.pages[parseInt(key, 10)];\n\n            const texture = textures[pageData.id];\n\n            this.pages.push({ texture });\n        });\n\n        Object.keys(data.chars).forEach((key: string) =>\n        {\n            const charData = data.chars[key];\n            const {\n                frame: textureFrame,\n                source: textureSource,\n            } = textures[charData.page];\n\n            const frameReal = new Rectangle(\n                charData.x + textureFrame.x,\n                charData.y + textureFrame.y,\n                charData.width,\n                charData.height,\n            );\n\n            const texture = new Texture({\n                source: textureSource,\n                frame: frameReal\n            });\n\n            this.chars[key] = {\n                id: key.codePointAt(0),\n                xOffset: charData.xOffset,\n                yOffset: charData.yOffset,\n                xAdvance: charData.xAdvance,\n                kerning: charData.kerning ?? {},\n                texture,\n            };\n        });\n\n        this.baseRenderedFontSize = data.fontSize;\n\n        (this.baseMeasurementFontSize as number) = data.fontSize;\n        (this.fontMetrics as FontMetrics) = {\n            ascent: 0,\n            descent: 0,\n            fontSize: data.fontSize,\n        };\n        (this.baseLineOffset as number) = data.baseLineOffset;\n        (this.lineHeight as number) = data.lineHeight;\n        (this.fontFamily as string) = data.fontFamily;\n        (this.distanceField as { type: string, range: number }) = data.distanceField ?? {\n            type: 'none',\n            range: 0,\n        };\n\n        this.url = url;\n    }\n\n    /** Destroys the BitmapFont object. */\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { texture } = this.pages[i];\n\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFont, BitmapText } from 'pixi.js';\n     *\n     * BitmapFont.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public static install(options: BitmapFontInstallOptions)\n    {\n        BitmapFontManager.install(options);\n    }\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public static uninstall(name: string)\n    {\n        BitmapFontManager.uninstall(name);\n    }\n}\n"],"mappings":";;;;;AAuBO,MAAMA,UAAA,SAAmBC,kBAChC;EAIIC,YAAYC,OAAA,EAA4BC,GACxC;IACU;IAEA;MAAEC,QAAU;MAAAC;IAAA,CAAS,GAAAH,OAAA;IAE3BI,MAAA,CAAOC,IAAA,CAAKF,IAAK,CAAAG,KAAK,CAAE,CAAAC,OAAA,CAASC,GACjC;MACI,MAAMC,QAAA,GAAWN,IAAK,CAAAG,KAAA,CAAMI,QAAS,CAAAF,GAAA,EAAK,EAAE,CAAC;MAEvC,MAAAG,OAAA,GAAUT,QAAS,CAAAO,QAAA,CAASG,EAAE;MAEpC,KAAKN,KAAM,CAAAO,IAAA,CAAK;QAAEF;MAAA,CAAS;IAAA,CAC9B;IAEDP,MAAA,CAAOC,IAAA,CAAKF,IAAK,CAAAW,KAAK,CAAE,CAAAP,OAAA,CAASC,GACjC;MACU,MAAAO,QAAA,GAAWZ,IAAK,CAAAW,KAAA,CAAMN,GAAG;MACzB;QACFQ,KAAO,EAAAC,YAAA;QACPC,MAAQ,EAAAC;MAAA,CACZ,GAAIjB,QAAS,CAAAa,QAAA,CAASK,IAAI;MAE1B,MAAMC,SAAA,GAAY,IAAIC,SAAA,CAClBP,QAAA,CAASQ,CAAA,GAAIN,YAAa,CAAAM,CAAA,EAC1BR,QAAA,CAASS,CAAA,GAAIP,YAAa,CAAAO,CAAA,EAC1BT,QAAS,CAAAU,KAAA,EACTV,QAAS,CAAAW,MAAA,CACb;MAEM,MAAAf,OAAA,GAAU,IAAIgB,OAAQ;QACxBT,MAAQ,EAAAC,aAAA;QACRH,KAAO,EAAAK;MAAA,CACV;MAEI,KAAAP,KAAA,CAAMN,GAAG,CAAI;QACdI,EAAA,EAAIJ,GAAI,CAAAoB,WAAA,CAAY,CAAC;QACrBC,OAAA,EAASd,QAAS,CAAAc,OAAA;QAClBC,OAAA,EAASf,QAAS,CAAAe,OAAA;QAClBC,QAAA,EAAUhB,QAAS,CAAAgB,QAAA;QACnBC,OAAA,EAASjB,QAAS,CAAAiB,OAAA,IAAW,EAAC;QAC9BrB;MAAA,CACJ;IAAA,CACH;IAED,KAAKsB,oBAAA,GAAuB9B,IAAK,CAAA+B,QAAA;IAEhC,KAAKC,uBAAA,GAAqChC,IAAK,CAAA+B,QAAA;IAC/C,KAAKE,WAA8B;MAChCC,MAAQ;MACRC,OAAS;MACTJ,QAAA,EAAU/B,IAAK,CAAA+B;IAAA,CACnB;IACC,KAAKK,cAAA,GAA4BpC,IAAK,CAAAoC,cAAA;IACtC,KAAKC,UAAA,GAAwBrC,IAAK,CAAAqC,UAAA;IAClC,KAAKC,UAAA,GAAwBtC,IAAK,CAAAsC,UAAA;IAClC,KAAKC,aAAoD,GAAAvC,IAAA,CAAKuC,aAAiB;MAC5EC,IAAM;MACNC,KAAO;IAAA,CACX;IAEA,KAAK3C,GAAM,GAAAA,GAAA;EAAA;EACf;EAGgB4C,OAChBA,CAAA;IACI,MAAMA,OAAQ;IAEd,SAASC,CAAA,GAAI,CAAG,EAAAA,CAAA,GAAI,IAAK,CAAAxC,KAAA,CAAMyC,MAAA,EAAQD,CACvC;MACI,MAAM;QAAEnC;MAAA,CAAY,QAAKL,KAAA,CAAMwC,CAAC;MAEhCnC,OAAA,CAAQkC,OAAA,CAAQ,IAAI;IAAA;IAGvB,KAAKvC,KAAiB;EAAA;EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAkBA,OAAc0C,QAAQhD,OACtB;IACIiD,iBAAA,CAAkBD,OAAA,CAAQhD,OAAO;EAAA;EACrC;AAAA;AAAA;AAAA;EAKA,OAAckD,UAAUC,IACxB;IACIF,iBAAA,CAAkBC,SAAA,CAAUC,IAAI;EAAA;AAExC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}