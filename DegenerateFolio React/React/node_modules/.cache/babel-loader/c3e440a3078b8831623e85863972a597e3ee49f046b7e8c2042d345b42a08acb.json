{"ast":null,"code":"import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction getPrev(api) {\n  return api.query.society.candidates().pipe(switchMap(candidates => combineLatest([of(candidates), api.query.society['suspendedCandidates'].multi(candidates.map(({\n    who\n  }) => who))])), map(([candidates, suspended]) => candidates.map(({\n    kind,\n    value,\n    who\n  }, index) => ({\n    accountId: who,\n    isSuspended: suspended[index].isSome,\n    kind,\n    value\n  }))));\n}\nfunction getCurr(api) {\n  return api.query.society.candidates.entries().pipe(map(entries => entries.filter(([, opt]) => opt.isSome).map(([{\n    args: [accountId]\n  }, opt]) => [accountId, opt.unwrap()])\n  // FIXME We are missing the new fields from the candidate record\n  .map(([accountId, {\n    bid,\n    kind\n  }]) => ({\n    accountId,\n    isSuspended: false,\n    kind,\n    value: bid\n  }))));\n}\n/**\n * @description Get the candidate info for a society\n */\nexport function candidates(instanceId, api) {\n  return memo(instanceId, () => api.query.society['suspendedCandidates'] && api.query.society.candidates.creator.meta.type.isPlain ? getPrev(api) : getCurr(api));\n}","map":{"version":3,"names":["combineLatest","map","of","switchMap","memo","getPrev","api","query","society","candidates","pipe","multi","who","suspended","kind","value","index","accountId","isSuspended","isSome","getCurr","entries","filter","opt","args","unwrap","bid","instanceId","creator","meta","type","isPlain"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/society/candidates.js"],"sourcesContent":["import { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from '../util/index.js';\nfunction getPrev(api) {\n    return api.query.society.candidates().pipe(switchMap((candidates) => combineLatest([\n        of(candidates),\n        api.query.society['suspendedCandidates'].multi(candidates.map(({ who }) => who))\n    ])), map(([candidates, suspended]) => candidates.map(({ kind, value, who }, index) => ({\n        accountId: who,\n        isSuspended: suspended[index].isSome,\n        kind,\n        value\n    }))));\n}\nfunction getCurr(api) {\n    return api.query.society.candidates.entries().pipe(map((entries) => entries\n        .filter(([, opt]) => opt.isSome)\n        .map(([{ args: [accountId] }, opt]) => [accountId, opt.unwrap()])\n        // FIXME We are missing the new fields from the candidate record\n        .map(([accountId, { bid, kind }]) => ({\n        accountId,\n        isSuspended: false,\n        kind,\n        value: bid\n    }))));\n}\n/**\n * @description Get the candidate info for a society\n */\nexport function candidates(instanceId, api) {\n    return memo(instanceId, () => api.query.society['suspendedCandidates'] && api.query.society.candidates.creator.meta.type.isPlain\n        ? getPrev(api)\n        : getCurr(api));\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AACxD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,OAAOA,CAACC,GAAG,EAAE;EAClB,OAAOA,GAAG,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAACP,SAAS,CAAEM,UAAU,IAAKT,aAAa,CAAC,CAC/EE,EAAE,CAACO,UAAU,CAAC,EACdH,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAACG,KAAK,CAACF,UAAU,CAACR,GAAG,CAAC,CAAC;IAAEW;EAAI,CAAC,KAAKA,GAAG,CAAC,CAAC,CACnF,CAAC,CAAC,EAAEX,GAAG,CAAC,CAAC,CAACQ,UAAU,EAAEI,SAAS,CAAC,KAAKJ,UAAU,CAACR,GAAG,CAAC,CAAC;IAAEa,IAAI;IAAEC,KAAK;IAAEH;EAAI,CAAC,EAAEI,KAAK,MAAM;IACnFC,SAAS,EAAEL,GAAG;IACdM,WAAW,EAAEL,SAAS,CAACG,KAAK,CAAC,CAACG,MAAM;IACpCL,IAAI;IACJC;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC;AACT;AACA,SAASK,OAAOA,CAACd,GAAG,EAAE;EAClB,OAAOA,GAAG,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAACY,OAAO,CAAC,CAAC,CAACX,IAAI,CAACT,GAAG,CAAEoB,OAAO,IAAKA,OAAO,CACtEC,MAAM,CAAC,CAAC,GAAGC,GAAG,CAAC,KAAKA,GAAG,CAACJ,MAAM,CAAC,CAC/BlB,GAAG,CAAC,CAAC,CAAC;IAAEuB,IAAI,EAAE,CAACP,SAAS;EAAE,CAAC,EAAEM,GAAG,CAAC,KAAK,CAACN,SAAS,EAAEM,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC;EAChE;EAAA,CACCxB,GAAG,CAAC,CAAC,CAACgB,SAAS,EAAE;IAAES,GAAG;IAAEZ;EAAK,CAAC,CAAC,MAAM;IACtCG,SAAS;IACTC,WAAW,EAAE,KAAK;IAClBJ,IAAI;IACJC,KAAK,EAAEW;EACX,CAAC,CAAC,CAAC,CAAC,CAAC;AACT;AACA;AACA;AACA;AACA,OAAO,SAASjB,UAAUA,CAACkB,UAAU,EAAErB,GAAG,EAAE;EACxC,OAAOF,IAAI,CAACuB,UAAU,EAAE,MAAMrB,GAAG,CAACC,KAAK,CAACC,OAAO,CAAC,qBAAqB,CAAC,IAAIF,GAAG,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAACmB,OAAO,CAACC,IAAI,CAACC,IAAI,CAACC,OAAO,GAC1H1B,OAAO,CAACC,GAAG,CAAC,GACZc,OAAO,CAACd,GAAG,CAAC,CAAC;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}