{"ast":null,"code":"import { BehaviorSubject, map, of, switchMap, tap, toArray } from 'rxjs';\nimport { nextTick } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nimport { getQueryInterface } from './util.js';\nfunction traverseLinks(api, head) {\n  const subject = new BehaviorSubject(head);\n  const query = getQueryInterface(api);\n  return subject.pipe(switchMap(account => query.listNodes(account)), tap(node => {\n    nextTick(() => {\n      node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();\n    });\n  }), toArray(),\n  // toArray since we want to startSubject to be completed\n  map(all => all.map(o => o.unwrap())));\n}\nexport function listNodes(instanceId, api) {\n  return memo(instanceId, bag => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));\n}","map":{"version":3,"names":["BehaviorSubject","map","of","switchMap","tap","toArray","nextTick","memo","getQueryInterface","traverseLinks","api","head","subject","query","pipe","account","listNodes","node","isSome","value","next","unwrap","complete","all","o","instanceId","bag"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/bagsList/listNodes.js"],"sourcesContent":["import { BehaviorSubject, map, of, switchMap, tap, toArray } from 'rxjs';\nimport { nextTick } from '@polkadot/util';\nimport { memo } from '../util/index.js';\nimport { getQueryInterface } from './util.js';\nfunction traverseLinks(api, head) {\n    const subject = new BehaviorSubject(head);\n    const query = getQueryInterface(api);\n    return subject.pipe(switchMap((account) => query.listNodes(account)), tap((node) => {\n        nextTick(() => {\n            node.isSome && node.value.next.isSome\n                ? subject.next(node.unwrap().next.unwrap())\n                : subject.complete();\n        });\n    }), toArray(), // toArray since we want to startSubject to be completed\n    map((all) => all.map((o) => o.unwrap())));\n}\nexport function listNodes(instanceId, api) {\n    return memo(instanceId, (bag) => bag && bag.head.isSome\n        ? traverseLinks(api, bag.head.unwrap())\n        : of([]));\n}\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,GAAG,EAAEC,EAAE,EAAEC,SAAS,EAAEC,GAAG,EAAEC,OAAO,QAAQ,MAAM;AACxE,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,iBAAiB,QAAQ,WAAW;AAC7C,SAASC,aAAaA,CAACC,GAAG,EAAEC,IAAI,EAAE;EAC9B,MAAMC,OAAO,GAAG,IAAIZ,eAAe,CAACW,IAAI,CAAC;EACzC,MAAME,KAAK,GAAGL,iBAAiB,CAACE,GAAG,CAAC;EACpC,OAAOE,OAAO,CAACE,IAAI,CAACX,SAAS,CAAEY,OAAO,IAAKF,KAAK,CAACG,SAAS,CAACD,OAAO,CAAC,CAAC,EAAEX,GAAG,CAAEa,IAAI,IAAK;IAChFX,QAAQ,CAAC,MAAM;MACXW,IAAI,CAACC,MAAM,IAAID,IAAI,CAACE,KAAK,CAACC,IAAI,CAACF,MAAM,GAC/BN,OAAO,CAACQ,IAAI,CAACH,IAAI,CAACI,MAAM,CAAC,CAAC,CAACD,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,GACzCT,OAAO,CAACU,QAAQ,CAAC,CAAC;IAC5B,CAAC,CAAC;EACN,CAAC,CAAC,EAAEjB,OAAO,CAAC,CAAC;EAAE;EACfJ,GAAG,CAAEsB,GAAG,IAAKA,GAAG,CAACtB,GAAG,CAAEuB,CAAC,IAAKA,CAAC,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C;AACA,OAAO,SAASL,SAASA,CAACS,UAAU,EAAEf,GAAG,EAAE;EACvC,OAAOH,IAAI,CAACkB,UAAU,EAAGC,GAAG,IAAKA,GAAG,IAAIA,GAAG,CAACf,IAAI,CAACO,MAAM,GACjDT,aAAa,CAACC,GAAG,EAAEgB,GAAG,CAACf,IAAI,CAACU,MAAM,CAAC,CAAC,CAAC,GACrCnB,EAAE,CAAC,EAAE,CAAC,CAAC;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}