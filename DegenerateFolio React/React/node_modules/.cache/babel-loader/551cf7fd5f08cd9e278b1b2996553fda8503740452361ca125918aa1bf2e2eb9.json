{"ast":null,"code":"import { map, of } from 'rxjs';\nimport { memo } from '../util/index.js';\nimport { filterCachedEras, getEraMultiCache, setEraMultiCache } from './cache.js';\nimport { erasHistoricApply, filterEras } from './util.js';\nconst CACHE_KEY = 'eraRewards';\nfunction mapRewards(eras, optRewards) {\n  return eras.map((era, index) => ({\n    era,\n    eraReward: optRewards[index].unwrapOrDefault()\n  }));\n}\nexport function _erasRewards(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return of([]);\n    }\n    const cached = getEraMultiCache(CACHE_KEY, eras, withActive);\n    const remaining = filterEras(eras, cached);\n    if (!remaining.length) {\n      return of(cached);\n    }\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(r => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY, withActive, mapRewards(remaining, r)))));\n  });\n}\nexport const erasRewards = /*#__PURE__*/erasHistoricApply('_erasRewards');","map":{"version":3,"names":["map","of","memo","filterCachedEras","getEraMultiCache","setEraMultiCache","erasHistoricApply","filterEras","CACHE_KEY","mapRewards","eras","optRewards","era","index","eraReward","unwrapOrDefault","_erasRewards","instanceId","api","withActive","length","cached","remaining","query","staking","erasValidatorReward","multi","pipe","r","erasRewards"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/staking/erasRewards.js"],"sourcesContent":["import { map, of } from 'rxjs';\nimport { memo } from '../util/index.js';\nimport { filterCachedEras, getEraMultiCache, setEraMultiCache } from './cache.js';\nimport { erasHistoricApply, filterEras } from './util.js';\nconst CACHE_KEY = 'eraRewards';\nfunction mapRewards(eras, optRewards) {\n    return eras.map((era, index) => ({\n        era,\n        eraReward: optRewards[index].unwrapOrDefault()\n    }));\n}\nexport function _erasRewards(instanceId, api) {\n    return memo(instanceId, (eras, withActive) => {\n        if (!eras.length) {\n            return of([]);\n        }\n        const cached = getEraMultiCache(CACHE_KEY, eras, withActive);\n        const remaining = filterEras(eras, cached);\n        if (!remaining.length) {\n            return of(cached);\n        }\n        return api.query.staking.erasValidatorReward.multi(remaining).pipe(map((r) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY, withActive, mapRewards(remaining, r)))));\n    });\n}\nexport const erasRewards = /*#__PURE__*/ erasHistoricApply('_erasRewards');\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,EAAE,QAAQ,MAAM;AAC9B,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,gBAAgB,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,YAAY;AACjF,SAASC,iBAAiB,EAAEC,UAAU,QAAQ,WAAW;AACzD,MAAMC,SAAS,GAAG,YAAY;AAC9B,SAASC,UAAUA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAClC,OAAOD,IAAI,CAACV,GAAG,CAAC,CAACY,GAAG,EAAEC,KAAK,MAAM;IAC7BD,GAAG;IACHE,SAAS,EAAEH,UAAU,CAACE,KAAK,CAAC,CAACE,eAAe,CAAC;EACjD,CAAC,CAAC,CAAC;AACP;AACA,OAAO,SAASC,YAAYA,CAACC,UAAU,EAAEC,GAAG,EAAE;EAC1C,OAAOhB,IAAI,CAACe,UAAU,EAAE,CAACP,IAAI,EAAES,UAAU,KAAK;IAC1C,IAAI,CAACT,IAAI,CAACU,MAAM,EAAE;MACd,OAAOnB,EAAE,CAAC,EAAE,CAAC;IACjB;IACA,MAAMoB,MAAM,GAAGjB,gBAAgB,CAACI,SAAS,EAAEE,IAAI,EAAES,UAAU,CAAC;IAC5D,MAAMG,SAAS,GAAGf,UAAU,CAACG,IAAI,EAAEW,MAAM,CAAC;IAC1C,IAAI,CAACC,SAAS,CAACF,MAAM,EAAE;MACnB,OAAOnB,EAAE,CAACoB,MAAM,CAAC;IACrB;IACA,OAAOH,GAAG,CAACK,KAAK,CAACC,OAAO,CAACC,mBAAmB,CAACC,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC3B,GAAG,CAAE4B,CAAC,IAAKzB,gBAAgB,CAACO,IAAI,EAAEW,MAAM,EAAEhB,gBAAgB,CAACG,SAAS,EAAEW,UAAU,EAAEV,UAAU,CAACa,SAAS,EAAEM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrL,CAAC,CAAC;AACN;AACA,OAAO,MAAMC,WAAW,GAAG,aAAcvB,iBAAiB,CAAC,cAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}