{"ast":null,"code":"import { definedProps } from '../container/utils/definedProps.mjs';\nimport { Mesh } from '../mesh/shared/Mesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\"use strict\";\nclass MeshSimple extends Mesh {\n  /**\n   * @param options - Options to be used for construction\n   */\n  constructor(options) {\n    const {\n      texture,\n      vertices,\n      uvs,\n      indices,\n      topology,\n      ...rest\n    } = options;\n    const geometry = new MeshGeometry(definedProps({\n      positions: vertices,\n      uvs,\n      indices,\n      topology\n    }));\n    super(definedProps({\n      ...rest,\n      texture,\n      geometry\n    }));\n    this.autoUpdate = true;\n    this.onRender = this._render;\n  }\n  /**\n   * Collection of vertices data.\n   * @type {Float32Array}\n   */\n  get vertices() {\n    return this.geometry.getBuffer(\"aPosition\").data;\n  }\n  set vertices(value) {\n    this.geometry.getBuffer(\"aPosition\").data = value;\n  }\n  _render() {\n    if (this.autoUpdate) {\n      this.geometry.getBuffer(\"aPosition\").update();\n    }\n  }\n}\nexport { MeshSimple };","map":{"version":3,"names":["MeshSimple","Mesh","constructor","options","texture","vertices","uvs","indices","topology","rest","geometry","MeshGeometry","definedProps","positions","autoUpdate","onRender","_render","getBuffer","data","value","update"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/mesh-simple/MeshSimple.ts"],"sourcesContent":["import { definedProps } from '../container/utils/definedProps';\nimport { Mesh } from '../mesh/shared/Mesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { TypedArray } from '../../rendering/renderers/shared/buffer/Buffer';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { MeshOptions } from '../mesh/shared/Mesh';\n\n/**\n * Options for the simple mesh.\n * @memberof scene\n */\nexport interface SimpleMeshOptions extends Omit<MeshOptions, 'geometry'>\n{\n    /** The texture to use */\n    texture: Texture,\n    /** if you want to specify the vertices */\n    vertices?: Float32Array,\n    /** if you want to specify the uvs */\n    uvs?: Float32Array,\n    /** if you want to specify the indices */\n    indices?: Uint32Array,\n    /** the topology, can be any of the Topology values */\n    topology?: Topology\n}\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link scene.Mesh}.\n * @memberof scene\n */\nexport class MeshSimple extends Mesh\n{\n    /** Upload vertices buffer each frame. */\n    public autoUpdate: boolean;\n\n    /**\n     * @param options - Options to be used for construction\n     */\n    constructor(options: SimpleMeshOptions)\n    {\n        const { texture, vertices, uvs, indices, topology, ...rest } = options;\n        const geometry = new MeshGeometry(definedProps({\n            positions: vertices,\n            uvs,\n            indices,\n            topology\n        }));\n\n        // geometry.getBuffer('aPosition').static = false;\n\n        super(definedProps({\n            ...rest,\n            texture,\n            geometry,\n        }));\n\n        this.autoUpdate = true;\n        this.onRender = this._render;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get vertices(): TypedArray\n    {\n        return this.geometry.getBuffer('aPosition').data;\n    }\n    set vertices(value: TypedArray)\n    {\n        this.geometry.getBuffer('aPosition').data = value;\n    }\n\n    private _render(): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aPosition').update();\n        }\n    }\n}\n"],"mappings":";;;;AAgCO,MAAMA,UAAA,SAAmBC,IAChC;EAAA;AAAA;AAAA;EAOIC,YAAYC,OACZ;IACU;MAAEC,OAAA;MAASC,QAAU;MAAAC,GAAA;MAAKC,OAAA;MAASC,QAAU;MAAA,GAAGC;IAAA,CAAS,GAAAN,OAAA;IACzD,MAAAO,QAAA,GAAW,IAAIC,YAAA,CAAaC,YAAa;MAC3CC,SAAW,EAAAR,QAAA;MACXC,GAAA;MACAC,OAAA;MACAC;IAAA,CACH,CAAC;IAIF,MAAMI,YAAa;MACf,GAAGH,IAAA;MACHL,OAAA;MACAM;IAAA,CACH,CAAC;IAEF,KAAKI,UAAa;IAClB,KAAKC,QAAA,GAAW,IAAK,CAAAC,OAAA;EAAA;EACzB;AAAA;AAAA;AAAA;EAMA,IAAIX,QACJA,CAAA;IACI,OAAO,IAAK,CAAAK,QAAA,CAASO,SAAU,YAAW,CAAE,CAAAC,IAAA;EAAA;EAEhD,IAAIb,SAASc,KACb;IACI,KAAKT,QAAS,CAAAO,SAAA,CAAU,WAAW,EAAEC,IAAO,GAAAC,KAAA;EAAA;EAGxCH,OACRA,CAAA;IACI,IAAI,KAAKF,UACT;MACI,KAAKJ,QAAS,CAAAO,SAAA,CAAU,WAAW,EAAEG,MAAO;IAAA;EAChD;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}