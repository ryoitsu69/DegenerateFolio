{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n$root.ics23 = function () {\n  /**\n   * Namespace ics23.\n   * @exports ics23\n   * @namespace\n   */\n  var ics23 = {};\n\n  /**\n   * HashOp enum.\n   * @name ics23.HashOp\n   * @enum {string}\n   * @property {number} NO_HASH=0 NO_HASH value\n   * @property {number} SHA256=1 SHA256 value\n   * @property {number} SHA512=2 SHA512 value\n   * @property {number} KECCAK=3 KECCAK value\n   * @property {number} RIPEMD160=4 RIPEMD160 value\n   * @property {number} BITCOIN=5 BITCOIN value\n   * @property {number} SHA512_256=6 SHA512_256 value\n   */\n  ics23.HashOp = function () {\n    var valuesById = {},\n      values = Object.create(valuesById);\n    values[valuesById[0] = \"NO_HASH\"] = 0;\n    values[valuesById[1] = \"SHA256\"] = 1;\n    values[valuesById[2] = \"SHA512\"] = 2;\n    values[valuesById[3] = \"KECCAK\"] = 3;\n    values[valuesById[4] = \"RIPEMD160\"] = 4;\n    values[valuesById[5] = \"BITCOIN\"] = 5;\n    values[valuesById[6] = \"SHA512_256\"] = 6;\n    return values;\n  }();\n\n  /**\n   * LengthOp defines how to process the key and value of the LeafOp\n   * to include length information. After encoding the length with the given\n   * algorithm, the length will be prepended to the key and value bytes.\n   * (Each one with it's own encoded length)\n   * @name ics23.LengthOp\n   * @enum {string}\n   * @property {number} NO_PREFIX=0 NO_PREFIX value\n   * @property {number} VAR_PROTO=1 VAR_PROTO value\n   * @property {number} VAR_RLP=2 VAR_RLP value\n   * @property {number} FIXED32_BIG=3 FIXED32_BIG value\n   * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value\n   * @property {number} FIXED64_BIG=5 FIXED64_BIG value\n   * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value\n   * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value\n   * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value\n   */\n  ics23.LengthOp = function () {\n    var valuesById = {},\n      values = Object.create(valuesById);\n    values[valuesById[0] = \"NO_PREFIX\"] = 0;\n    values[valuesById[1] = \"VAR_PROTO\"] = 1;\n    values[valuesById[2] = \"VAR_RLP\"] = 2;\n    values[valuesById[3] = \"FIXED32_BIG\"] = 3;\n    values[valuesById[4] = \"FIXED32_LITTLE\"] = 4;\n    values[valuesById[5] = \"FIXED64_BIG\"] = 5;\n    values[valuesById[6] = \"FIXED64_LITTLE\"] = 6;\n    values[valuesById[7] = \"REQUIRE_32_BYTES\"] = 7;\n    values[valuesById[8] = \"REQUIRE_64_BYTES\"] = 8;\n    return values;\n  }();\n  ics23.ExistenceProof = function () {\n    /**\n     * Properties of an ExistenceProof.\n     * @memberof ics23\n     * @interface IExistenceProof\n     * @property {Uint8Array|null} [key] ExistenceProof key\n     * @property {Uint8Array|null} [value] ExistenceProof value\n     * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf\n     * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path\n     */\n\n    /**\n     * Constructs a new ExistenceProof.\n     * @memberof ics23\n     * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.\n     * The result of peforming all these steps will provide a \"root hash\", which can\n     * be compared to the value in a header.\n     * \n     * Since it is computationally infeasible to produce a hash collission for any of the used\n     * cryptographic hash functions, if someone can provide a series of operations to transform\n     * a given key and value into a root hash that matches some trusted root, these key and values\n     * must be in the referenced merkle tree.\n     * \n     * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,\n     * which should be controlled by a spec. Eg. with lengthOp as NONE,\n     * prefix = FOO, key = BAR, value = CHOICE\n     * and\n     * prefix = F, key = OOBAR, value = CHOICE\n     * would produce the same value.\n     * \n     * With LengthOp this is tricker but not impossible. Which is why the \"leafPrefixEqual\" field\n     * in the ProofSpec is valuable to prevent this mutability. And why all trees should\n     * length-prefix the data before hashing it.\n     * @implements IExistenceProof\n     * @constructor\n     * @param {ics23.IExistenceProof=} [properties] Properties to set\n     */\n    function ExistenceProof(properties) {\n      this.path = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n    ExistenceProof.prototype.key = $util.newBuffer([]);\n\n    /**\n     * ExistenceProof value.\n     * @member {Uint8Array} value\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n    ExistenceProof.prototype.value = $util.newBuffer([]);\n\n    /**\n     * ExistenceProof leaf.\n     * @member {ics23.ILeafOp|null|undefined} leaf\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n    ExistenceProof.prototype.leaf = null;\n\n    /**\n     * ExistenceProof path.\n     * @member {Array.<ics23.IInnerOp>} path\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n    ExistenceProof.prototype.path = $util.emptyArray;\n\n    /**\n     * Creates a new ExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.IExistenceProof=} [properties] Properties to set\n     * @returns {ics23.ExistenceProof} ExistenceProof instance\n     */\n    ExistenceProof.create = function create(properties) {\n      return new ExistenceProof(properties);\n    };\n\n    /**\n     * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.key);\n      if (message.value != null && message.hasOwnProperty(\"value\")) writer.uint32( /* id 2, wireType 2 =*/18).bytes(message.value);\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) $root.ics23.LeafOp.encode(message.leaf, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n      if (message.path != null && message.path.length) for (var i = 0; i < message.path.length; ++i) $root.ics23.InnerOp.encode(message.path[i], writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified ExistenceProof message, length delimited. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an ExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.ExistenceProof} ExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.ExistenceProof();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n          case 2:\n            message.value = reader.bytes();\n            break;\n          case 3:\n            message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n            break;\n          case 4:\n            if (!(message.path && message.path.length)) message.path = [];\n            message.path.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an ExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.ExistenceProof} ExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an ExistenceProof message.\n     * @function verify\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n      if (message.value != null && message.hasOwnProperty(\"value\")) if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value))) return \"value: buffer expected\";\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n        var error = $root.ics23.LeafOp.verify(message.leaf);\n        if (error) return \"leaf.\" + error;\n      }\n      if (message.path != null && message.hasOwnProperty(\"path\")) {\n        if (!Array.isArray(message.path)) return \"path: array expected\";\n        for (var i = 0; i < message.path.length; ++i) {\n          var error = $root.ics23.InnerOp.verify(message.path[i]);\n          if (error) return \"path.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates an ExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.ExistenceProof} ExistenceProof\n     */\n    ExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.ExistenceProof) return object;\n      var message = new $root.ics23.ExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n      if (object.value != null) if (typeof object.value === \"string\") $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);else if (object.value.length) message.value = object.value;\n      if (object.leaf != null) {\n        if (typeof object.leaf !== \"object\") throw TypeError(\".ics23.ExistenceProof.leaf: object expected\");\n        message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n      }\n      if (object.path) {\n        if (!Array.isArray(object.path)) throw TypeError(\".ics23.ExistenceProof.path: array expected\");\n        message.path = [];\n        for (var i = 0; i < object.path.length; ++i) {\n          if (typeof object.path[i] !== \"object\") throw TypeError(\".ics23.ExistenceProof.path: object expected\");\n          message.path[i] = $root.ics23.InnerOp.fromObject(object.path[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an ExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.ExistenceProof} message ExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.path = [];\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        if (options.bytes === String) object.value = \"\";else {\n          object.value = [];\n          if (options.bytes !== Array) object.value = $util.newBuffer(object.value);\n        }\n        object.leaf = null;\n      }\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.value != null && message.hasOwnProperty(\"value\")) object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n      if (message.path && message.path.length) {\n        object.path = [];\n        for (var j = 0; j < message.path.length; ++j) object.path[j] = $root.ics23.InnerOp.toObject(message.path[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this ExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.ExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return ExistenceProof;\n  }();\n  ics23.NonExistenceProof = function () {\n    /**\n     * Properties of a NonExistenceProof.\n     * @memberof ics23\n     * @interface INonExistenceProof\n     * @property {Uint8Array|null} [key] NonExistenceProof key\n     * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left\n     * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right\n     */\n\n    /**\n     * Constructs a new NonExistenceProof.\n     * @memberof ics23\n     * @classdesc Represents a NonExistenceProof.\n     * @implements INonExistenceProof\n     * @constructor\n     * @param {ics23.INonExistenceProof=} [properties] Properties to set\n     */\n    function NonExistenceProof(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * NonExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     */\n    NonExistenceProof.prototype.key = $util.newBuffer([]);\n\n    /**\n     * NonExistenceProof left.\n     * @member {ics23.IExistenceProof|null|undefined} left\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     */\n    NonExistenceProof.prototype.left = null;\n\n    /**\n     * NonExistenceProof right.\n     * @member {ics23.IExistenceProof|null|undefined} right\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     */\n    NonExistenceProof.prototype.right = null;\n\n    /**\n     * Creates a new NonExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.INonExistenceProof=} [properties] Properties to set\n     * @returns {ics23.NonExistenceProof} NonExistenceProof instance\n     */\n    NonExistenceProof.create = function create(properties) {\n      return new NonExistenceProof(properties);\n    };\n\n    /**\n     * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NonExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.key);\n      if (message.left != null && message.hasOwnProperty(\"left\")) $root.ics23.ExistenceProof.encode(message.left, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      if (message.right != null && message.hasOwnProperty(\"right\")) $root.ics23.ExistenceProof.encode(message.right, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified NonExistenceProof message, length delimited. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a NonExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.NonExistenceProof} NonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NonExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.NonExistenceProof();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n          case 2:\n            message.left = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n          case 3:\n            message.right = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a NonExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.NonExistenceProof} NonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a NonExistenceProof message.\n     * @function verify\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    NonExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n      if (message.left != null && message.hasOwnProperty(\"left\")) {\n        var error = $root.ics23.ExistenceProof.verify(message.left);\n        if (error) return \"left.\" + error;\n      }\n      if (message.right != null && message.hasOwnProperty(\"right\")) {\n        var error = $root.ics23.ExistenceProof.verify(message.right);\n        if (error) return \"right.\" + error;\n      }\n      return null;\n    };\n\n    /**\n     * Creates a NonExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.NonExistenceProof} NonExistenceProof\n     */\n    NonExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.NonExistenceProof) return object;\n      var message = new $root.ics23.NonExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n      if (object.left != null) {\n        if (typeof object.left !== \"object\") throw TypeError(\".ics23.NonExistenceProof.left: object expected\");\n        message.left = $root.ics23.ExistenceProof.fromObject(object.left);\n      }\n      if (object.right != null) {\n        if (typeof object.right !== \"object\") throw TypeError(\".ics23.NonExistenceProof.right: object expected\");\n        message.right = $root.ics23.ExistenceProof.fromObject(object.right);\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a NonExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.NonExistenceProof} message NonExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    NonExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        object.left = null;\n        object.right = null;\n      }\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.left != null && message.hasOwnProperty(\"left\")) object.left = $root.ics23.ExistenceProof.toObject(message.left, options);\n      if (message.right != null && message.hasOwnProperty(\"right\")) object.right = $root.ics23.ExistenceProof.toObject(message.right, options);\n      return object;\n    };\n\n    /**\n     * Converts this NonExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    NonExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return NonExistenceProof;\n  }();\n  ics23.CommitmentProof = function () {\n    /**\n     * Properties of a CommitmentProof.\n     * @memberof ics23\n     * @interface ICommitmentProof\n     * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist\n     * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist\n     * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch\n     * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed\n     */\n\n    /**\n     * Constructs a new CommitmentProof.\n     * @memberof ics23\n     * @classdesc Represents a CommitmentProof.\n     * @implements ICommitmentProof\n     * @constructor\n     * @param {ics23.ICommitmentProof=} [properties] Properties to set\n     */\n    function CommitmentProof(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CommitmentProof exist.\n     * @member {ics23.IExistenceProof|null|undefined} exist\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n    CommitmentProof.prototype.exist = null;\n\n    /**\n     * CommitmentProof nonexist.\n     * @member {ics23.INonExistenceProof|null|undefined} nonexist\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n    CommitmentProof.prototype.nonexist = null;\n\n    /**\n     * CommitmentProof batch.\n     * @member {ics23.IBatchProof|null|undefined} batch\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n    CommitmentProof.prototype.batch = null;\n\n    /**\n     * CommitmentProof compressed.\n     * @member {ics23.ICompressedBatchProof|null|undefined} compressed\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n    CommitmentProof.prototype.compressed = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * CommitmentProof proof.\n     * @member {\"exist\"|\"nonexist\"|\"batch\"|\"compressed\"|undefined} proof\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n    Object.defineProperty(CommitmentProof.prototype, \"proof\", {\n      get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\", \"batch\", \"compressed\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new CommitmentProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.ICommitmentProof=} [properties] Properties to set\n     * @returns {ics23.CommitmentProof} CommitmentProof instance\n     */\n    CommitmentProof.create = function create(properties) {\n      return new CommitmentProof(properties);\n    };\n\n    /**\n     * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommitmentProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) $root.ics23.ExistenceProof.encode(message.exist, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      if (message.batch != null && message.hasOwnProperty(\"batch\")) $root.ics23.BatchProof.encode(message.batch, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n      if (message.compressed != null && message.hasOwnProperty(\"compressed\")) $root.ics23.CompressedBatchProof.encode(message.compressed, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified CommitmentProof message, length delimited. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CommitmentProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CommitmentProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CommitmentProof} CommitmentProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommitmentProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.CommitmentProof();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n          case 2:\n            message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n            break;\n          case 3:\n            message.batch = $root.ics23.BatchProof.decode(reader, reader.uint32());\n            break;\n          case 4:\n            message.compressed = $root.ics23.CompressedBatchProof.decode(reader, reader.uint32());\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a CommitmentProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CommitmentProof} CommitmentProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CommitmentProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CommitmentProof message.\n     * @function verify\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CommitmentProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        properties.proof = 1;\n        {\n          var error = $root.ics23.ExistenceProof.verify(message.exist);\n          if (error) return \"exist.\" + error;\n        }\n      }\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n          if (error) return \"nonexist.\" + error;\n        }\n      }\n      if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.BatchProof.verify(message.batch);\n          if (error) return \"batch.\" + error;\n        }\n      }\n      if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.CompressedBatchProof.verify(message.compressed);\n          if (error) return \"compressed.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a CommitmentProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CommitmentProof} CommitmentProof\n     */\n    CommitmentProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CommitmentProof) return object;\n      var message = new $root.ics23.CommitmentProof();\n      if (object.exist != null) {\n        if (typeof object.exist !== \"object\") throw TypeError(\".ics23.CommitmentProof.exist: object expected\");\n        message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n      }\n      if (object.nonexist != null) {\n        if (typeof object.nonexist !== \"object\") throw TypeError(\".ics23.CommitmentProof.nonexist: object expected\");\n        message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n      }\n      if (object.batch != null) {\n        if (typeof object.batch !== \"object\") throw TypeError(\".ics23.CommitmentProof.batch: object expected\");\n        message.batch = $root.ics23.BatchProof.fromObject(object.batch);\n      }\n      if (object.compressed != null) {\n        if (typeof object.compressed !== \"object\") throw TypeError(\".ics23.CommitmentProof.compressed: object expected\");\n        message.compressed = $root.ics23.CompressedBatchProof.fromObject(object.compressed);\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a CommitmentProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.CommitmentProof} message CommitmentProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CommitmentProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n        if (options.oneofs) object.proof = \"exist\";\n      }\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n        if (options.oneofs) object.proof = \"nonexist\";\n      }\n      if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n        object.batch = $root.ics23.BatchProof.toObject(message.batch, options);\n        if (options.oneofs) object.proof = \"batch\";\n      }\n      if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n        object.compressed = $root.ics23.CompressedBatchProof.toObject(message.compressed, options);\n        if (options.oneofs) object.proof = \"compressed\";\n      }\n      return object;\n    };\n\n    /**\n     * Converts this CommitmentProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CommitmentProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CommitmentProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return CommitmentProof;\n  }();\n  ics23.LeafOp = function () {\n    /**\n     * Properties of a LeafOp.\n     * @memberof ics23\n     * @interface ILeafOp\n     * @property {ics23.HashOp|null} [hash] LeafOp hash\n     * @property {ics23.HashOp|null} [prehashKey] LeafOp prehashKey\n     * @property {ics23.HashOp|null} [prehashValue] LeafOp prehashValue\n     * @property {ics23.LengthOp|null} [length] LeafOp length\n     * @property {Uint8Array|null} [prefix] LeafOp prefix\n     */\n\n    /**\n     * Constructs a new LeafOp.\n     * @memberof ics23\n     * @classdesc LeafOp represents the raw key-value data we wish to prove, and\n     * must be flexible to represent the internal transformation from\n     * the original key-value pairs into the basis hash, for many existing\n     * merkle trees.\n     * \n     * key and value are passed in. So that the signature of this operation is:\n     * leafOp(key, value) -> output\n     * \n     * To process this, first prehash the keys and values if needed (ANY means no hash in this case):\n     * hkey = prehashKey(key)\n     * hvalue = prehashValue(value)\n     * \n     * Then combine the bytes, and hash it\n     * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)\n     * @implements ILeafOp\n     * @constructor\n     * @param {ics23.ILeafOp=} [properties] Properties to set\n     */\n    function LeafOp(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * LeafOp hash.\n     * @member {ics23.HashOp} hash\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n    LeafOp.prototype.hash = 0;\n\n    /**\n     * LeafOp prehashKey.\n     * @member {ics23.HashOp} prehashKey\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n    LeafOp.prototype.prehashKey = 0;\n\n    /**\n     * LeafOp prehashValue.\n     * @member {ics23.HashOp} prehashValue\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n    LeafOp.prototype.prehashValue = 0;\n\n    /**\n     * LeafOp length.\n     * @member {ics23.LengthOp} length\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n    LeafOp.prototype.length = 0;\n\n    /**\n     * LeafOp prefix.\n     * @member {Uint8Array} prefix\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n    LeafOp.prototype.prefix = $util.newBuffer([]);\n\n    /**\n     * Creates a new LeafOp instance using the specified properties.\n     * @function create\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.ILeafOp=} [properties] Properties to set\n     * @returns {ics23.LeafOp} LeafOp instance\n     */\n    LeafOp.create = function create(properties) {\n      return new LeafOp(properties);\n    };\n\n    /**\n     * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LeafOp.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.hash);\n      if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.prehashKey);\n      if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.prehashValue);\n      if (message.length != null && message.hasOwnProperty(\"length\")) writer.uint32( /* id 4, wireType 0 =*/32).int32(message.length);\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) writer.uint32( /* id 5, wireType 2 =*/42).bytes(message.prefix);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified LeafOp message, length delimited. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LeafOp.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a LeafOp message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.LeafOp} LeafOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LeafOp.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.LeafOp();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.hash = reader.int32();\n            break;\n          case 2:\n            message.prehashKey = reader.int32();\n            break;\n          case 3:\n            message.prehashValue = reader.int32();\n            break;\n          case 4:\n            message.length = reader.int32();\n            break;\n          case 5:\n            message.prefix = reader.bytes();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a LeafOp message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.LeafOp} LeafOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LeafOp.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a LeafOp message.\n     * @function verify\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    LeafOp.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) switch (message.hash) {\n        default:\n          return \"hash: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n          break;\n      }\n      if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\")) switch (message.prehashKey) {\n        default:\n          return \"prehashKey: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n          break;\n      }\n      if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\")) switch (message.prehashValue) {\n        default:\n          return \"prehashValue: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n          break;\n      }\n      if (message.length != null && message.hasOwnProperty(\"length\")) switch (message.length) {\n        default:\n          return \"length: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n          break;\n      }\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix))) return \"prefix: buffer expected\";\n      return null;\n    };\n\n    /**\n     * Creates a LeafOp message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.LeafOp} LeafOp\n     */\n    LeafOp.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.LeafOp) return object;\n      var message = new $root.ics23.LeafOp();\n      switch (object.hash) {\n        case \"NO_HASH\":\n        case 0:\n          message.hash = 0;\n          break;\n        case \"SHA256\":\n        case 1:\n          message.hash = 1;\n          break;\n        case \"SHA512\":\n        case 2:\n          message.hash = 2;\n          break;\n        case \"KECCAK\":\n        case 3:\n          message.hash = 3;\n          break;\n        case \"RIPEMD160\":\n        case 4:\n          message.hash = 4;\n          break;\n        case \"BITCOIN\":\n        case 5:\n          message.hash = 5;\n          break;\n        case \"SHA512_256\":\n        case 6:\n          message.hash = 6;\n          break;\n      }\n      switch (object.prehashKey) {\n        case \"NO_HASH\":\n        case 0:\n          message.prehashKey = 0;\n          break;\n        case \"SHA256\":\n        case 1:\n          message.prehashKey = 1;\n          break;\n        case \"SHA512\":\n        case 2:\n          message.prehashKey = 2;\n          break;\n        case \"KECCAK\":\n        case 3:\n          message.prehashKey = 3;\n          break;\n        case \"RIPEMD160\":\n        case 4:\n          message.prehashKey = 4;\n          break;\n        case \"BITCOIN\":\n        case 5:\n          message.prehashKey = 5;\n          break;\n        case \"SHA512_256\":\n        case 6:\n          message.prehashKey = 6;\n          break;\n      }\n      switch (object.prehashValue) {\n        case \"NO_HASH\":\n        case 0:\n          message.prehashValue = 0;\n          break;\n        case \"SHA256\":\n        case 1:\n          message.prehashValue = 1;\n          break;\n        case \"SHA512\":\n        case 2:\n          message.prehashValue = 2;\n          break;\n        case \"KECCAK\":\n        case 3:\n          message.prehashValue = 3;\n          break;\n        case \"RIPEMD160\":\n        case 4:\n          message.prehashValue = 4;\n          break;\n        case \"BITCOIN\":\n        case 5:\n          message.prehashValue = 5;\n          break;\n        case \"SHA512_256\":\n        case 6:\n          message.prehashValue = 6;\n          break;\n      }\n      switch (object.length) {\n        case \"NO_PREFIX\":\n        case 0:\n          message.length = 0;\n          break;\n        case \"VAR_PROTO\":\n        case 1:\n          message.length = 1;\n          break;\n        case \"VAR_RLP\":\n        case 2:\n          message.length = 2;\n          break;\n        case \"FIXED32_BIG\":\n        case 3:\n          message.length = 3;\n          break;\n        case \"FIXED32_LITTLE\":\n        case 4:\n          message.length = 4;\n          break;\n        case \"FIXED64_BIG\":\n        case 5:\n          message.length = 5;\n          break;\n        case \"FIXED64_LITTLE\":\n        case 6:\n          message.length = 6;\n          break;\n        case \"REQUIRE_32_BYTES\":\n        case 7:\n          message.length = 7;\n          break;\n        case \"REQUIRE_64_BYTES\":\n        case 8:\n          message.length = 8;\n          break;\n      }\n      if (object.prefix != null) if (typeof object.prefix === \"string\") $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);else if (object.prefix.length) message.prefix = object.prefix;\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a LeafOp message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.LeafOp} message LeafOp\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    LeafOp.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.hash = options.enums === String ? \"NO_HASH\" : 0;\n        object.prehashKey = options.enums === String ? \"NO_HASH\" : 0;\n        object.prehashValue = options.enums === String ? \"NO_HASH\" : 0;\n        object.length = options.enums === String ? \"NO_PREFIX\" : 0;\n        if (options.bytes === String) object.prefix = \"\";else {\n          object.prefix = [];\n          if (options.bytes !== Array) object.prefix = $util.newBuffer(object.prefix);\n        }\n      }\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n      if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\")) object.prehashKey = options.enums === String ? $root.ics23.HashOp[message.prehashKey] : message.prehashKey;\n      if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\")) object.prehashValue = options.enums === String ? $root.ics23.HashOp[message.prehashValue] : message.prehashValue;\n      if (message.length != null && message.hasOwnProperty(\"length\")) object.length = options.enums === String ? $root.ics23.LengthOp[message.length] : message.length;\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n      return object;\n    };\n\n    /**\n     * Converts this LeafOp to JSON.\n     * @function toJSON\n     * @memberof ics23.LeafOp\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    LeafOp.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return LeafOp;\n  }();\n  ics23.InnerOp = function () {\n    /**\n     * Properties of an InnerOp.\n     * @memberof ics23\n     * @interface IInnerOp\n     * @property {ics23.HashOp|null} [hash] InnerOp hash\n     * @property {Uint8Array|null} [prefix] InnerOp prefix\n     * @property {Uint8Array|null} [suffix] InnerOp suffix\n     */\n\n    /**\n     * Constructs a new InnerOp.\n     * @memberof ics23\n     * @classdesc InnerOp represents a merkle-proof step that is not a leaf.\n     * It represents concatenating two children and hashing them to provide the next result.\n     * \n     * The result of the previous step is passed in, so the signature of this op is:\n     * innerOp(child) -> output\n     * \n     * The result of applying InnerOp should be:\n     * output = op.hash(op.prefix || child || op.suffix)\n     * \n     * where the || operator is concatenation of binary data,\n     * and child is the result of hashing all the tree below this step.\n     * \n     * Any special data, like prepending child with the length, or prepending the entire operation with\n     * some value to differentiate from leaf nodes, should be included in prefix and suffix.\n     * If either of prefix or suffix is empty, we just treat it as an empty string\n     * @implements IInnerOp\n     * @constructor\n     * @param {ics23.IInnerOp=} [properties] Properties to set\n     */\n    function InnerOp(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * InnerOp hash.\n     * @member {ics23.HashOp} hash\n     * @memberof ics23.InnerOp\n     * @instance\n     */\n    InnerOp.prototype.hash = 0;\n\n    /**\n     * InnerOp prefix.\n     * @member {Uint8Array} prefix\n     * @memberof ics23.InnerOp\n     * @instance\n     */\n    InnerOp.prototype.prefix = $util.newBuffer([]);\n\n    /**\n     * InnerOp suffix.\n     * @member {Uint8Array} suffix\n     * @memberof ics23.InnerOp\n     * @instance\n     */\n    InnerOp.prototype.suffix = $util.newBuffer([]);\n\n    /**\n     * Creates a new InnerOp instance using the specified properties.\n     * @function create\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.IInnerOp=} [properties] Properties to set\n     * @returns {ics23.InnerOp} InnerOp instance\n     */\n    InnerOp.create = function create(properties) {\n      return new InnerOp(properties);\n    };\n\n    /**\n     * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    InnerOp.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.hash);\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) writer.uint32( /* id 2, wireType 2 =*/18).bytes(message.prefix);\n      if (message.suffix != null && message.hasOwnProperty(\"suffix\")) writer.uint32( /* id 3, wireType 2 =*/26).bytes(message.suffix);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified InnerOp message, length delimited. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    InnerOp.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an InnerOp message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.InnerOp} InnerOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    InnerOp.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.InnerOp();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.hash = reader.int32();\n            break;\n          case 2:\n            message.prefix = reader.bytes();\n            break;\n          case 3:\n            message.suffix = reader.bytes();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an InnerOp message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.InnerOp} InnerOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    InnerOp.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an InnerOp message.\n     * @function verify\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    InnerOp.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) switch (message.hash) {\n        default:\n          return \"hash: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n          break;\n      }\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix))) return \"prefix: buffer expected\";\n      if (message.suffix != null && message.hasOwnProperty(\"suffix\")) if (!(message.suffix && typeof message.suffix.length === \"number\" || $util.isString(message.suffix))) return \"suffix: buffer expected\";\n      return null;\n    };\n\n    /**\n     * Creates an InnerOp message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.InnerOp} InnerOp\n     */\n    InnerOp.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.InnerOp) return object;\n      var message = new $root.ics23.InnerOp();\n      switch (object.hash) {\n        case \"NO_HASH\":\n        case 0:\n          message.hash = 0;\n          break;\n        case \"SHA256\":\n        case 1:\n          message.hash = 1;\n          break;\n        case \"SHA512\":\n        case 2:\n          message.hash = 2;\n          break;\n        case \"KECCAK\":\n        case 3:\n          message.hash = 3;\n          break;\n        case \"RIPEMD160\":\n        case 4:\n          message.hash = 4;\n          break;\n        case \"BITCOIN\":\n        case 5:\n          message.hash = 5;\n          break;\n        case \"SHA512_256\":\n        case 6:\n          message.hash = 6;\n          break;\n      }\n      if (object.prefix != null) if (typeof object.prefix === \"string\") $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);else if (object.prefix.length) message.prefix = object.prefix;\n      if (object.suffix != null) if (typeof object.suffix === \"string\") $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);else if (object.suffix.length) message.suffix = object.suffix;\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an InnerOp message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.InnerOp} message InnerOp\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    InnerOp.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.hash = options.enums === String ? \"NO_HASH\" : 0;\n        if (options.bytes === String) object.prefix = \"\";else {\n          object.prefix = [];\n          if (options.bytes !== Array) object.prefix = $util.newBuffer(object.prefix);\n        }\n        if (options.bytes === String) object.suffix = \"\";else {\n          object.suffix = [];\n          if (options.bytes !== Array) object.suffix = $util.newBuffer(object.suffix);\n        }\n      }\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n      if (message.suffix != null && message.hasOwnProperty(\"suffix\")) object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;\n      return object;\n    };\n\n    /**\n     * Converts this InnerOp to JSON.\n     * @function toJSON\n     * @memberof ics23.InnerOp\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    InnerOp.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return InnerOp;\n  }();\n  ics23.ProofSpec = function () {\n    /**\n     * Properties of a ProofSpec.\n     * @memberof ics23\n     * @interface IProofSpec\n     * @property {ics23.ILeafOp|null} [leafSpec] ProofSpec leafSpec\n     * @property {ics23.IInnerSpec|null} [innerSpec] ProofSpec innerSpec\n     * @property {number|null} [maxDepth] ProofSpec maxDepth\n     * @property {number|null} [minDepth] ProofSpec minDepth\n     */\n\n    /**\n     * Constructs a new ProofSpec.\n     * @memberof ics23\n     * @classdesc ProofSpec defines what the expected parameters are for a given proof type.\n     * This can be stored in the client and used to validate any incoming proofs.\n     * \n     * verify(ProofSpec, Proof) -> Proof | Error\n     * \n     * As demonstrated in tests, if we don't fix the algorithm used to calculate the\n     * LeafHash for a given tree, there are many possible key-value pairs that can\n     * generate a given hash (by interpretting the preimage differently).\n     * We need this for proper security, requires client knows a priori what\n     * tree format server uses. But not in code, rather a configuration object.\n     * @implements IProofSpec\n     * @constructor\n     * @param {ics23.IProofSpec=} [properties] Properties to set\n     */\n    function ProofSpec(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ProofSpec leafSpec.\n     * @member {ics23.ILeafOp|null|undefined} leafSpec\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n    ProofSpec.prototype.leafSpec = null;\n\n    /**\n     * ProofSpec innerSpec.\n     * @member {ics23.IInnerSpec|null|undefined} innerSpec\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n    ProofSpec.prototype.innerSpec = null;\n\n    /**\n     * ProofSpec maxDepth.\n     * @member {number} maxDepth\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n    ProofSpec.prototype.maxDepth = 0;\n\n    /**\n     * ProofSpec minDepth.\n     * @member {number} minDepth\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n    ProofSpec.prototype.minDepth = 0;\n\n    /**\n     * Creates a new ProofSpec instance using the specified properties.\n     * @function create\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.IProofSpec=} [properties] Properties to set\n     * @returns {ics23.ProofSpec} ProofSpec instance\n     */\n    ProofSpec.create = function create(properties) {\n      return new ProofSpec(properties);\n    };\n\n    /**\n     * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ProofSpec.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) $root.ics23.LeafOp.encode(message.leafSpec, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n      if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) $root.ics23.InnerSpec.encode(message.innerSpec, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.maxDepth);\n      if (message.minDepth != null && message.hasOwnProperty(\"minDepth\")) writer.uint32( /* id 4, wireType 0 =*/32).int32(message.minDepth);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified ProofSpec message, length delimited. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ProofSpec.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ProofSpec message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.ProofSpec} ProofSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ProofSpec.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.ProofSpec();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.leafSpec = $root.ics23.LeafOp.decode(reader, reader.uint32());\n            break;\n          case 2:\n            message.innerSpec = $root.ics23.InnerSpec.decode(reader, reader.uint32());\n            break;\n          case 3:\n            message.maxDepth = reader.int32();\n            break;\n          case 4:\n            message.minDepth = reader.int32();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a ProofSpec message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.ProofSpec} ProofSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ProofSpec.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ProofSpec message.\n     * @function verify\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ProofSpec.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) {\n        var error = $root.ics23.LeafOp.verify(message.leafSpec);\n        if (error) return \"leafSpec.\" + error;\n      }\n      if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) {\n        var error = $root.ics23.InnerSpec.verify(message.innerSpec);\n        if (error) return \"innerSpec.\" + error;\n      }\n      if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\")) if (!$util.isInteger(message.maxDepth)) return \"maxDepth: integer expected\";\n      if (message.minDepth != null && message.hasOwnProperty(\"minDepth\")) if (!$util.isInteger(message.minDepth)) return \"minDepth: integer expected\";\n      return null;\n    };\n\n    /**\n     * Creates a ProofSpec message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.ProofSpec} ProofSpec\n     */\n    ProofSpec.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.ProofSpec) return object;\n      var message = new $root.ics23.ProofSpec();\n      if (object.leafSpec != null) {\n        if (typeof object.leafSpec !== \"object\") throw TypeError(\".ics23.ProofSpec.leafSpec: object expected\");\n        message.leafSpec = $root.ics23.LeafOp.fromObject(object.leafSpec);\n      }\n      if (object.innerSpec != null) {\n        if (typeof object.innerSpec !== \"object\") throw TypeError(\".ics23.ProofSpec.innerSpec: object expected\");\n        message.innerSpec = $root.ics23.InnerSpec.fromObject(object.innerSpec);\n      }\n      if (object.maxDepth != null) message.maxDepth = object.maxDepth | 0;\n      if (object.minDepth != null) message.minDepth = object.minDepth | 0;\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a ProofSpec message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.ProofSpec} message ProofSpec\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ProofSpec.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        object.leafSpec = null;\n        object.innerSpec = null;\n        object.maxDepth = 0;\n        object.minDepth = 0;\n      }\n      if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) object.leafSpec = $root.ics23.LeafOp.toObject(message.leafSpec, options);\n      if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) object.innerSpec = $root.ics23.InnerSpec.toObject(message.innerSpec, options);\n      if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\")) object.maxDepth = message.maxDepth;\n      if (message.minDepth != null && message.hasOwnProperty(\"minDepth\")) object.minDepth = message.minDepth;\n      return object;\n    };\n\n    /**\n     * Converts this ProofSpec to JSON.\n     * @function toJSON\n     * @memberof ics23.ProofSpec\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ProofSpec.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return ProofSpec;\n  }();\n  ics23.InnerSpec = function () {\n    /**\n     * Properties of an InnerSpec.\n     * @memberof ics23\n     * @interface IInnerSpec\n     * @property {Array.<number>|null} [childOrder] InnerSpec childOrder\n     * @property {number|null} [childSize] InnerSpec childSize\n     * @property {number|null} [minPrefixLength] InnerSpec minPrefixLength\n     * @property {number|null} [maxPrefixLength] InnerSpec maxPrefixLength\n     * @property {Uint8Array|null} [emptyChild] InnerSpec emptyChild\n     * @property {ics23.HashOp|null} [hash] InnerSpec hash\n     */\n\n    /**\n     * Constructs a new InnerSpec.\n     * @memberof ics23\n     * @classdesc Represents an InnerSpec.\n     * @implements IInnerSpec\n     * @constructor\n     * @param {ics23.IInnerSpec=} [properties] Properties to set\n     */\n    function InnerSpec(properties) {\n      this.childOrder = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * InnerSpec childOrder.\n     * @member {Array.<number>} childOrder\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n    InnerSpec.prototype.childOrder = $util.emptyArray;\n\n    /**\n     * InnerSpec childSize.\n     * @member {number} childSize\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n    InnerSpec.prototype.childSize = 0;\n\n    /**\n     * InnerSpec minPrefixLength.\n     * @member {number} minPrefixLength\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n    InnerSpec.prototype.minPrefixLength = 0;\n\n    /**\n     * InnerSpec maxPrefixLength.\n     * @member {number} maxPrefixLength\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n    InnerSpec.prototype.maxPrefixLength = 0;\n\n    /**\n     * InnerSpec emptyChild.\n     * @member {Uint8Array} emptyChild\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n    InnerSpec.prototype.emptyChild = $util.newBuffer([]);\n\n    /**\n     * InnerSpec hash.\n     * @member {ics23.HashOp} hash\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n    InnerSpec.prototype.hash = 0;\n\n    /**\n     * Creates a new InnerSpec instance using the specified properties.\n     * @function create\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.IInnerSpec=} [properties] Properties to set\n     * @returns {ics23.InnerSpec} InnerSpec instance\n     */\n    InnerSpec.create = function create(properties) {\n      return new InnerSpec(properties);\n    };\n\n    /**\n     * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    InnerSpec.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.childOrder != null && message.childOrder.length) {\n        writer.uint32( /* id 1, wireType 2 =*/10).fork();\n        for (var i = 0; i < message.childOrder.length; ++i) writer.int32(message.childOrder[i]);\n        writer.ldelim();\n      }\n      if (message.childSize != null && message.hasOwnProperty(\"childSize\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.childSize);\n      if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.minPrefixLength);\n      if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\")) writer.uint32( /* id 4, wireType 0 =*/32).int32(message.maxPrefixLength);\n      if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\")) writer.uint32( /* id 5, wireType 2 =*/42).bytes(message.emptyChild);\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) writer.uint32( /* id 6, wireType 0 =*/48).int32(message.hash);\n      return writer;\n    };\n\n    /**\n     * Encodes the specified InnerSpec message, length delimited. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    InnerSpec.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an InnerSpec message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.InnerSpec} InnerSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    InnerSpec.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.InnerSpec();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            if (!(message.childOrder && message.childOrder.length)) message.childOrder = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.childOrder.push(reader.int32());\n            } else message.childOrder.push(reader.int32());\n            break;\n          case 2:\n            message.childSize = reader.int32();\n            break;\n          case 3:\n            message.minPrefixLength = reader.int32();\n            break;\n          case 4:\n            message.maxPrefixLength = reader.int32();\n            break;\n          case 5:\n            message.emptyChild = reader.bytes();\n            break;\n          case 6:\n            message.hash = reader.int32();\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes an InnerSpec message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.InnerSpec} InnerSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    InnerSpec.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an InnerSpec message.\n     * @function verify\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    InnerSpec.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.childOrder != null && message.hasOwnProperty(\"childOrder\")) {\n        if (!Array.isArray(message.childOrder)) return \"childOrder: array expected\";\n        for (var i = 0; i < message.childOrder.length; ++i) if (!$util.isInteger(message.childOrder[i])) return \"childOrder: integer[] expected\";\n      }\n      if (message.childSize != null && message.hasOwnProperty(\"childSize\")) if (!$util.isInteger(message.childSize)) return \"childSize: integer expected\";\n      if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\")) if (!$util.isInteger(message.minPrefixLength)) return \"minPrefixLength: integer expected\";\n      if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\")) if (!$util.isInteger(message.maxPrefixLength)) return \"maxPrefixLength: integer expected\";\n      if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\")) if (!(message.emptyChild && typeof message.emptyChild.length === \"number\" || $util.isString(message.emptyChild))) return \"emptyChild: buffer expected\";\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) switch (message.hash) {\n        default:\n          return \"hash: enum value expected\";\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n          break;\n      }\n      return null;\n    };\n\n    /**\n     * Creates an InnerSpec message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.InnerSpec} InnerSpec\n     */\n    InnerSpec.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.InnerSpec) return object;\n      var message = new $root.ics23.InnerSpec();\n      if (object.childOrder) {\n        if (!Array.isArray(object.childOrder)) throw TypeError(\".ics23.InnerSpec.childOrder: array expected\");\n        message.childOrder = [];\n        for (var i = 0; i < object.childOrder.length; ++i) message.childOrder[i] = object.childOrder[i] | 0;\n      }\n      if (object.childSize != null) message.childSize = object.childSize | 0;\n      if (object.minPrefixLength != null) message.minPrefixLength = object.minPrefixLength | 0;\n      if (object.maxPrefixLength != null) message.maxPrefixLength = object.maxPrefixLength | 0;\n      if (object.emptyChild != null) if (typeof object.emptyChild === \"string\") $util.base64.decode(object.emptyChild, message.emptyChild = $util.newBuffer($util.base64.length(object.emptyChild)), 0);else if (object.emptyChild.length) message.emptyChild = object.emptyChild;\n      switch (object.hash) {\n        case \"NO_HASH\":\n        case 0:\n          message.hash = 0;\n          break;\n        case \"SHA256\":\n        case 1:\n          message.hash = 1;\n          break;\n        case \"SHA512\":\n        case 2:\n          message.hash = 2;\n          break;\n        case \"KECCAK\":\n        case 3:\n          message.hash = 3;\n          break;\n        case \"RIPEMD160\":\n        case 4:\n          message.hash = 4;\n          break;\n        case \"BITCOIN\":\n        case 5:\n          message.hash = 5;\n          break;\n        case \"SHA512_256\":\n        case 6:\n          message.hash = 6;\n          break;\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from an InnerSpec message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.InnerSpec} message InnerSpec\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    InnerSpec.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.childOrder = [];\n      if (options.defaults) {\n        object.childSize = 0;\n        object.minPrefixLength = 0;\n        object.maxPrefixLength = 0;\n        if (options.bytes === String) object.emptyChild = \"\";else {\n          object.emptyChild = [];\n          if (options.bytes !== Array) object.emptyChild = $util.newBuffer(object.emptyChild);\n        }\n        object.hash = options.enums === String ? \"NO_HASH\" : 0;\n      }\n      if (message.childOrder && message.childOrder.length) {\n        object.childOrder = [];\n        for (var j = 0; j < message.childOrder.length; ++j) object.childOrder[j] = message.childOrder[j];\n      }\n      if (message.childSize != null && message.hasOwnProperty(\"childSize\")) object.childSize = message.childSize;\n      if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\")) object.minPrefixLength = message.minPrefixLength;\n      if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\")) object.maxPrefixLength = message.maxPrefixLength;\n      if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\")) object.emptyChild = options.bytes === String ? $util.base64.encode(message.emptyChild, 0, message.emptyChild.length) : options.bytes === Array ? Array.prototype.slice.call(message.emptyChild) : message.emptyChild;\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n      return object;\n    };\n\n    /**\n     * Converts this InnerSpec to JSON.\n     * @function toJSON\n     * @memberof ics23.InnerSpec\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    InnerSpec.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return InnerSpec;\n  }();\n  ics23.BatchProof = function () {\n    /**\n     * Properties of a BatchProof.\n     * @memberof ics23\n     * @interface IBatchProof\n     * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries\n     */\n\n    /**\n     * Constructs a new BatchProof.\n     * @memberof ics23\n     * @classdesc Represents a BatchProof.\n     * @implements IBatchProof\n     * @constructor\n     * @param {ics23.IBatchProof=} [properties] Properties to set\n     */\n    function BatchProof(properties) {\n      this.entries = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BatchProof entries.\n     * @member {Array.<ics23.IBatchEntry>} entries\n     * @memberof ics23.BatchProof\n     * @instance\n     */\n    BatchProof.prototype.entries = $util.emptyArray;\n\n    /**\n     * Creates a new BatchProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.IBatchProof=} [properties] Properties to set\n     * @returns {ics23.BatchProof} BatchProof instance\n     */\n    BatchProof.create = function create(properties) {\n      return new BatchProof(properties);\n    };\n\n    /**\n     * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BatchProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.entries != null && message.entries.length) for (var i = 0; i < message.entries.length; ++i) $root.ics23.BatchEntry.encode(message.entries[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified BatchProof message, length delimited. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BatchProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.BatchProof} BatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BatchProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.BatchProof();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            if (!(message.entries && message.entries.length)) message.entries = [];\n            message.entries.push($root.ics23.BatchEntry.decode(reader, reader.uint32()));\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a BatchProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.BatchProof} BatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BatchProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BatchProof message.\n     * @function verify\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BatchProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n        if (!Array.isArray(message.entries)) return \"entries: array expected\";\n        for (var i = 0; i < message.entries.length; ++i) {\n          var error = $root.ics23.BatchEntry.verify(message.entries[i]);\n          if (error) return \"entries.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a BatchProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.BatchProof} BatchProof\n     */\n    BatchProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.BatchProof) return object;\n      var message = new $root.ics23.BatchProof();\n      if (object.entries) {\n        if (!Array.isArray(object.entries)) throw TypeError(\".ics23.BatchProof.entries: array expected\");\n        message.entries = [];\n        for (var i = 0; i < object.entries.length; ++i) {\n          if (typeof object.entries[i] !== \"object\") throw TypeError(\".ics23.BatchProof.entries: object expected\");\n          message.entries[i] = $root.ics23.BatchEntry.fromObject(object.entries[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a BatchProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.BatchProof} message BatchProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BatchProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.entries = [];\n      if (message.entries && message.entries.length) {\n        object.entries = [];\n        for (var j = 0; j < message.entries.length; ++j) object.entries[j] = $root.ics23.BatchEntry.toObject(message.entries[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this BatchProof to JSON.\n     * @function toJSON\n     * @memberof ics23.BatchProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BatchProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return BatchProof;\n  }();\n  ics23.BatchEntry = function () {\n    /**\n     * Properties of a BatchEntry.\n     * @memberof ics23\n     * @interface IBatchEntry\n     * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist\n     * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist\n     */\n\n    /**\n     * Constructs a new BatchEntry.\n     * @memberof ics23\n     * @classdesc Represents a BatchEntry.\n     * @implements IBatchEntry\n     * @constructor\n     * @param {ics23.IBatchEntry=} [properties] Properties to set\n     */\n    function BatchEntry(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BatchEntry exist.\n     * @member {ics23.IExistenceProof|null|undefined} exist\n     * @memberof ics23.BatchEntry\n     * @instance\n     */\n    BatchEntry.prototype.exist = null;\n\n    /**\n     * BatchEntry nonexist.\n     * @member {ics23.INonExistenceProof|null|undefined} nonexist\n     * @memberof ics23.BatchEntry\n     * @instance\n     */\n    BatchEntry.prototype.nonexist = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * BatchEntry proof.\n     * @member {\"exist\"|\"nonexist\"|undefined} proof\n     * @memberof ics23.BatchEntry\n     * @instance\n     */\n    Object.defineProperty(BatchEntry.prototype, \"proof\", {\n      get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new BatchEntry instance using the specified properties.\n     * @function create\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.IBatchEntry=} [properties] Properties to set\n     * @returns {ics23.BatchEntry} BatchEntry instance\n     */\n    BatchEntry.create = function create(properties) {\n      return new BatchEntry(properties);\n    };\n\n    /**\n     * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BatchEntry.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) $root.ics23.ExistenceProof.encode(message.exist, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified BatchEntry message, length delimited. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BatchEntry message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.BatchEntry} BatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BatchEntry.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.BatchEntry();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n          case 2:\n            message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a BatchEntry message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.BatchEntry} BatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BatchEntry.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BatchEntry message.\n     * @function verify\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BatchEntry.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        properties.proof = 1;\n        {\n          var error = $root.ics23.ExistenceProof.verify(message.exist);\n          if (error) return \"exist.\" + error;\n        }\n      }\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n          if (error) return \"nonexist.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a BatchEntry message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.BatchEntry} BatchEntry\n     */\n    BatchEntry.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.BatchEntry) return object;\n      var message = new $root.ics23.BatchEntry();\n      if (object.exist != null) {\n        if (typeof object.exist !== \"object\") throw TypeError(\".ics23.BatchEntry.exist: object expected\");\n        message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n      }\n      if (object.nonexist != null) {\n        if (typeof object.nonexist !== \"object\") throw TypeError(\".ics23.BatchEntry.nonexist: object expected\");\n        message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a BatchEntry message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.BatchEntry} message BatchEntry\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BatchEntry.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n        if (options.oneofs) object.proof = \"exist\";\n      }\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n        if (options.oneofs) object.proof = \"nonexist\";\n      }\n      return object;\n    };\n\n    /**\n     * Converts this BatchEntry to JSON.\n     * @function toJSON\n     * @memberof ics23.BatchEntry\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BatchEntry.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return BatchEntry;\n  }();\n  ics23.CompressedBatchProof = function () {\n    /**\n     * Properties of a CompressedBatchProof.\n     * @memberof ics23\n     * @interface ICompressedBatchProof\n     * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries\n     * @property {Array.<ics23.IInnerOp>|null} [lookupInners] CompressedBatchProof lookupInners\n     */\n\n    /**\n     * Constructs a new CompressedBatchProof.\n     * @memberof ics23\n     * @classdesc Represents a CompressedBatchProof.\n     * @implements ICompressedBatchProof\n     * @constructor\n     * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n     */\n    function CompressedBatchProof(properties) {\n      this.entries = [];\n      this.lookupInners = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CompressedBatchProof entries.\n     * @member {Array.<ics23.ICompressedBatchEntry>} entries\n     * @memberof ics23.CompressedBatchProof\n     * @instance\n     */\n    CompressedBatchProof.prototype.entries = $util.emptyArray;\n\n    /**\n     * CompressedBatchProof lookupInners.\n     * @member {Array.<ics23.IInnerOp>} lookupInners\n     * @memberof ics23.CompressedBatchProof\n     * @instance\n     */\n    CompressedBatchProof.prototype.lookupInners = $util.emptyArray;\n\n    /**\n     * Creates a new CompressedBatchProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof instance\n     */\n    CompressedBatchProof.create = function create(properties) {\n      return new CompressedBatchProof(properties);\n    };\n\n    /**\n     * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedBatchProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.entries != null && message.entries.length) for (var i = 0; i < message.entries.length; ++i) $root.ics23.CompressedBatchEntry.encode(message.entries[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n      if (message.lookupInners != null && message.lookupInners.length) for (var i = 0; i < message.lookupInners.length; ++i) $root.ics23.InnerOp.encode(message.lookupInners[i], writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified CompressedBatchProof message, length delimited. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedBatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CompressedBatchProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedBatchProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.CompressedBatchProof();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            if (!(message.entries && message.entries.length)) message.entries = [];\n            message.entries.push($root.ics23.CompressedBatchEntry.decode(reader, reader.uint32()));\n            break;\n          case 2:\n            if (!(message.lookupInners && message.lookupInners.length)) message.lookupInners = [];\n            message.lookupInners.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a CompressedBatchProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedBatchProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CompressedBatchProof message.\n     * @function verify\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CompressedBatchProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n        if (!Array.isArray(message.entries)) return \"entries: array expected\";\n        for (var i = 0; i < message.entries.length; ++i) {\n          var error = $root.ics23.CompressedBatchEntry.verify(message.entries[i]);\n          if (error) return \"entries.\" + error;\n        }\n      }\n      if (message.lookupInners != null && message.hasOwnProperty(\"lookupInners\")) {\n        if (!Array.isArray(message.lookupInners)) return \"lookupInners: array expected\";\n        for (var i = 0; i < message.lookupInners.length; ++i) {\n          var error = $root.ics23.InnerOp.verify(message.lookupInners[i]);\n          if (error) return \"lookupInners.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a CompressedBatchProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n     */\n    CompressedBatchProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedBatchProof) return object;\n      var message = new $root.ics23.CompressedBatchProof();\n      if (object.entries) {\n        if (!Array.isArray(object.entries)) throw TypeError(\".ics23.CompressedBatchProof.entries: array expected\");\n        message.entries = [];\n        for (var i = 0; i < object.entries.length; ++i) {\n          if (typeof object.entries[i] !== \"object\") throw TypeError(\".ics23.CompressedBatchProof.entries: object expected\");\n          message.entries[i] = $root.ics23.CompressedBatchEntry.fromObject(object.entries[i]);\n        }\n      }\n      if (object.lookupInners) {\n        if (!Array.isArray(object.lookupInners)) throw TypeError(\".ics23.CompressedBatchProof.lookupInners: array expected\");\n        message.lookupInners = [];\n        for (var i = 0; i < object.lookupInners.length; ++i) {\n          if (typeof object.lookupInners[i] !== \"object\") throw TypeError(\".ics23.CompressedBatchProof.lookupInners: object expected\");\n          message.lookupInners[i] = $root.ics23.InnerOp.fromObject(object.lookupInners[i]);\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a CompressedBatchProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.CompressedBatchProof} message CompressedBatchProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CompressedBatchProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) {\n        object.entries = [];\n        object.lookupInners = [];\n      }\n      if (message.entries && message.entries.length) {\n        object.entries = [];\n        for (var j = 0; j < message.entries.length; ++j) object.entries[j] = $root.ics23.CompressedBatchEntry.toObject(message.entries[j], options);\n      }\n      if (message.lookupInners && message.lookupInners.length) {\n        object.lookupInners = [];\n        for (var j = 0; j < message.lookupInners.length; ++j) object.lookupInners[j] = $root.ics23.InnerOp.toObject(message.lookupInners[j], options);\n      }\n      return object;\n    };\n\n    /**\n     * Converts this CompressedBatchProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedBatchProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CompressedBatchProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return CompressedBatchProof;\n  }();\n  ics23.CompressedBatchEntry = function () {\n    /**\n     * Properties of a CompressedBatchEntry.\n     * @memberof ics23\n     * @interface ICompressedBatchEntry\n     * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist\n     * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist\n     */\n\n    /**\n     * Constructs a new CompressedBatchEntry.\n     * @memberof ics23\n     * @classdesc Represents a CompressedBatchEntry.\n     * @implements ICompressedBatchEntry\n     * @constructor\n     * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n     */\n    function CompressedBatchEntry(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CompressedBatchEntry exist.\n     * @member {ics23.ICompressedExistenceProof|null|undefined} exist\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     */\n    CompressedBatchEntry.prototype.exist = null;\n\n    /**\n     * CompressedBatchEntry nonexist.\n     * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     */\n    CompressedBatchEntry.prototype.nonexist = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * CompressedBatchEntry proof.\n     * @member {\"exist\"|\"nonexist\"|undefined} proof\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     */\n    Object.defineProperty(CompressedBatchEntry.prototype, \"proof\", {\n      get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new CompressedBatchEntry instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry instance\n     */\n    CompressedBatchEntry.create = function create(properties) {\n      return new CompressedBatchEntry(properties);\n    };\n\n    /**\n     * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedBatchEntry.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) $root.ics23.CompressedExistenceProof.encode(message.exist, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) $root.ics23.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified CompressedBatchEntry message, length delimited. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedBatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CompressedBatchEntry message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedBatchEntry.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.CompressedBatchEntry();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.exist = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n            break;\n          case 2:\n            message.nonexist = $root.ics23.CompressedNonExistenceProof.decode(reader, reader.uint32());\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a CompressedBatchEntry message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedBatchEntry.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CompressedBatchEntry message.\n     * @function verify\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CompressedBatchEntry.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        properties.proof = 1;\n        {\n          var error = $root.ics23.CompressedExistenceProof.verify(message.exist);\n          if (error) return \"exist.\" + error;\n        }\n      }\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.CompressedNonExistenceProof.verify(message.nonexist);\n          if (error) return \"nonexist.\" + error;\n        }\n      }\n      return null;\n    };\n\n    /**\n     * Creates a CompressedBatchEntry message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n     */\n    CompressedBatchEntry.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedBatchEntry) return object;\n      var message = new $root.ics23.CompressedBatchEntry();\n      if (object.exist != null) {\n        if (typeof object.exist !== \"object\") throw TypeError(\".ics23.CompressedBatchEntry.exist: object expected\");\n        message.exist = $root.ics23.CompressedExistenceProof.fromObject(object.exist);\n      }\n      if (object.nonexist != null) {\n        if (typeof object.nonexist !== \"object\") throw TypeError(\".ics23.CompressedBatchEntry.nonexist: object expected\");\n        message.nonexist = $root.ics23.CompressedNonExistenceProof.fromObject(object.nonexist);\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a CompressedBatchEntry message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.CompressedBatchEntry} message CompressedBatchEntry\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CompressedBatchEntry.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        object.exist = $root.ics23.CompressedExistenceProof.toObject(message.exist, options);\n        if (options.oneofs) object.proof = \"exist\";\n      }\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        object.nonexist = $root.ics23.CompressedNonExistenceProof.toObject(message.nonexist, options);\n        if (options.oneofs) object.proof = \"nonexist\";\n      }\n      return object;\n    };\n\n    /**\n     * Converts this CompressedBatchEntry to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CompressedBatchEntry.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return CompressedBatchEntry;\n  }();\n  ics23.CompressedExistenceProof = function () {\n    /**\n     * Properties of a CompressedExistenceProof.\n     * @memberof ics23\n     * @interface ICompressedExistenceProof\n     * @property {Uint8Array|null} [key] CompressedExistenceProof key\n     * @property {Uint8Array|null} [value] CompressedExistenceProof value\n     * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf\n     * @property {Array.<number>|null} [path] CompressedExistenceProof path\n     */\n\n    /**\n     * Constructs a new CompressedExistenceProof.\n     * @memberof ics23\n     * @classdesc Represents a CompressedExistenceProof.\n     * @implements ICompressedExistenceProof\n     * @constructor\n     * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n     */\n    function CompressedExistenceProof(properties) {\n      this.path = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CompressedExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n    CompressedExistenceProof.prototype.key = $util.newBuffer([]);\n\n    /**\n     * CompressedExistenceProof value.\n     * @member {Uint8Array} value\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n    CompressedExistenceProof.prototype.value = $util.newBuffer([]);\n\n    /**\n     * CompressedExistenceProof leaf.\n     * @member {ics23.ILeafOp|null|undefined} leaf\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n    CompressedExistenceProof.prototype.leaf = null;\n\n    /**\n     * CompressedExistenceProof path.\n     * @member {Array.<number>} path\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n    CompressedExistenceProof.prototype.path = $util.emptyArray;\n\n    /**\n     * Creates a new CompressedExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof instance\n     */\n    CompressedExistenceProof.create = function create(properties) {\n      return new CompressedExistenceProof(properties);\n    };\n\n    /**\n     * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.key);\n      if (message.value != null && message.hasOwnProperty(\"value\")) writer.uint32( /* id 2, wireType 2 =*/18).bytes(message.value);\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) $root.ics23.LeafOp.encode(message.leaf, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n      if (message.path != null && message.path.length) {\n        writer.uint32( /* id 4, wireType 2 =*/34).fork();\n        for (var i = 0; i < message.path.length; ++i) writer.int32(message.path[i]);\n        writer.ldelim();\n      }\n      return writer;\n    };\n\n    /**\n     * Encodes the specified CompressedExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CompressedExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.CompressedExistenceProof();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n          case 2:\n            message.value = reader.bytes();\n            break;\n          case 3:\n            message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n            break;\n          case 4:\n            if (!(message.path && message.path.length)) message.path = [];\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n              while (reader.pos < end2) message.path.push(reader.int32());\n            } else message.path.push(reader.int32());\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a CompressedExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CompressedExistenceProof message.\n     * @function verify\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CompressedExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n      if (message.value != null && message.hasOwnProperty(\"value\")) if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value))) return \"value: buffer expected\";\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n        var error = $root.ics23.LeafOp.verify(message.leaf);\n        if (error) return \"leaf.\" + error;\n      }\n      if (message.path != null && message.hasOwnProperty(\"path\")) {\n        if (!Array.isArray(message.path)) return \"path: array expected\";\n        for (var i = 0; i < message.path.length; ++i) if (!$util.isInteger(message.path[i])) return \"path: integer[] expected\";\n      }\n      return null;\n    };\n\n    /**\n     * Creates a CompressedExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n     */\n    CompressedExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedExistenceProof) return object;\n      var message = new $root.ics23.CompressedExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n      if (object.value != null) if (typeof object.value === \"string\") $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);else if (object.value.length) message.value = object.value;\n      if (object.leaf != null) {\n        if (typeof object.leaf !== \"object\") throw TypeError(\".ics23.CompressedExistenceProof.leaf: object expected\");\n        message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n      }\n      if (object.path) {\n        if (!Array.isArray(object.path)) throw TypeError(\".ics23.CompressedExistenceProof.path: array expected\");\n        message.path = [];\n        for (var i = 0; i < object.path.length; ++i) message.path[i] = object.path[i] | 0;\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a CompressedExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.CompressedExistenceProof} message CompressedExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CompressedExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.path = [];\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        if (options.bytes === String) object.value = \"\";else {\n          object.value = [];\n          if (options.bytes !== Array) object.value = $util.newBuffer(object.value);\n        }\n        object.leaf = null;\n      }\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.value != null && message.hasOwnProperty(\"value\")) object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n      if (message.path && message.path.length) {\n        object.path = [];\n        for (var j = 0; j < message.path.length; ++j) object.path[j] = message.path[j];\n      }\n      return object;\n    };\n\n    /**\n     * Converts this CompressedExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CompressedExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return CompressedExistenceProof;\n  }();\n  ics23.CompressedNonExistenceProof = function () {\n    /**\n     * Properties of a CompressedNonExistenceProof.\n     * @memberof ics23\n     * @interface ICompressedNonExistenceProof\n     * @property {Uint8Array|null} [key] CompressedNonExistenceProof key\n     * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left\n     * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right\n     */\n\n    /**\n     * Constructs a new CompressedNonExistenceProof.\n     * @memberof ics23\n     * @classdesc Represents a CompressedNonExistenceProof.\n     * @implements ICompressedNonExistenceProof\n     * @constructor\n     * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n     */\n    function CompressedNonExistenceProof(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * CompressedNonExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     */\n    CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);\n\n    /**\n     * CompressedNonExistenceProof left.\n     * @member {ics23.ICompressedExistenceProof|null|undefined} left\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     */\n    CompressedNonExistenceProof.prototype.left = null;\n\n    /**\n     * CompressedNonExistenceProof right.\n     * @member {ics23.ICompressedExistenceProof|null|undefined} right\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     */\n    CompressedNonExistenceProof.prototype.right = null;\n\n    /**\n     * Creates a new CompressedNonExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof instance\n     */\n    CompressedNonExistenceProof.create = function create(properties) {\n      return new CompressedNonExistenceProof(properties);\n    };\n\n    /**\n     * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedNonExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.key);\n      if (message.left != null && message.hasOwnProperty(\"left\")) $root.ics23.CompressedExistenceProof.encode(message.left, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n      if (message.right != null && message.hasOwnProperty(\"right\")) $root.ics23.CompressedExistenceProof.encode(message.right, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n      return writer;\n    };\n\n    /**\n     * Encodes the specified CompressedNonExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    CompressedNonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedNonExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ics23.CompressedNonExistenceProof();\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n          case 2:\n            message.left = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n            break;\n          case 3:\n            message.right = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n            break;\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n      return message;\n    };\n\n    /**\n     * Decodes a CompressedNonExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    CompressedNonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a CompressedNonExistenceProof message.\n     * @function verify\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    CompressedNonExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n      if (message.left != null && message.hasOwnProperty(\"left\")) {\n        var error = $root.ics23.CompressedExistenceProof.verify(message.left);\n        if (error) return \"left.\" + error;\n      }\n      if (message.right != null && message.hasOwnProperty(\"right\")) {\n        var error = $root.ics23.CompressedExistenceProof.verify(message.right);\n        if (error) return \"right.\" + error;\n      }\n      return null;\n    };\n\n    /**\n     * Creates a CompressedNonExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n     */\n    CompressedNonExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedNonExistenceProof) return object;\n      var message = new $root.ics23.CompressedNonExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n      if (object.left != null) {\n        if (typeof object.left !== \"object\") throw TypeError(\".ics23.CompressedNonExistenceProof.left: object expected\");\n        message.left = $root.ics23.CompressedExistenceProof.fromObject(object.left);\n      }\n      if (object.right != null) {\n        if (typeof object.right !== \"object\") throw TypeError(\".ics23.CompressedNonExistenceProof.right: object expected\");\n        message.right = $root.ics23.CompressedExistenceProof.fromObject(object.right);\n      }\n      return message;\n    };\n\n    /**\n     * Creates a plain object from a CompressedNonExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.CompressedNonExistenceProof} message CompressedNonExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    CompressedNonExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        object.left = null;\n        object.right = null;\n      }\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.left != null && message.hasOwnProperty(\"left\")) object.left = $root.ics23.CompressedExistenceProof.toObject(message.left, options);\n      if (message.right != null && message.hasOwnProperty(\"right\")) object.right = $root.ics23.CompressedExistenceProof.toObject(message.right, options);\n      return object;\n    };\n\n    /**\n     * Converts this CompressedNonExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    CompressedNonExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return CompressedNonExistenceProof;\n  }();\n  return ics23;\n}();\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","ics23","HashOp","valuesById","values","Object","create","LengthOp","ExistenceProof","properties","path","keys","i","length","prototype","key","newBuffer","value","leaf","emptyArray","encode","message","writer","hasOwnProperty","uint32","bytes","LeafOp","fork","ldelim","InnerOp","encodeDelimited","decode","reader","end","undefined","len","pos","tag","push","skipType","decodeDelimited","verify","isString","error","Array","isArray","fromObject","object","base64","TypeError","toObject","options","arrays","defaults","String","slice","call","j","toJSON","constructor","toJSONOptions","NonExistenceProof","left","right","CommitmentProof","exist","nonexist","batch","compressed","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","BatchProof","CompressedBatchProof","proof","oneofs","hash","prehashKey","prehashValue","prefix","int32","enums","suffix","ProofSpec","leafSpec","innerSpec","maxDepth","minDepth","InnerSpec","isInteger","childOrder","childSize","minPrefixLength","maxPrefixLength","emptyChild","end2","entries","BatchEntry","lookupInners","CompressedBatchEntry","CompressedExistenceProof","CompressedNonExistenceProof","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@confio/ics23/build/generated/codecimpl.js"],"sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.ics23 = (function() {\n\n    /**\n     * Namespace ics23.\n     * @exports ics23\n     * @namespace\n     */\n    var ics23 = {};\n\n    /**\n     * HashOp enum.\n     * @name ics23.HashOp\n     * @enum {string}\n     * @property {number} NO_HASH=0 NO_HASH value\n     * @property {number} SHA256=1 SHA256 value\n     * @property {number} SHA512=2 SHA512 value\n     * @property {number} KECCAK=3 KECCAK value\n     * @property {number} RIPEMD160=4 RIPEMD160 value\n     * @property {number} BITCOIN=5 BITCOIN value\n     * @property {number} SHA512_256=6 SHA512_256 value\n     */\n    ics23.HashOp = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NO_HASH\"] = 0;\n        values[valuesById[1] = \"SHA256\"] = 1;\n        values[valuesById[2] = \"SHA512\"] = 2;\n        values[valuesById[3] = \"KECCAK\"] = 3;\n        values[valuesById[4] = \"RIPEMD160\"] = 4;\n        values[valuesById[5] = \"BITCOIN\"] = 5;\n        values[valuesById[6] = \"SHA512_256\"] = 6;\n        return values;\n    })();\n\n    /**\n     * LengthOp defines how to process the key and value of the LeafOp\n     * to include length information. After encoding the length with the given\n     * algorithm, the length will be prepended to the key and value bytes.\n     * (Each one with it's own encoded length)\n     * @name ics23.LengthOp\n     * @enum {string}\n     * @property {number} NO_PREFIX=0 NO_PREFIX value\n     * @property {number} VAR_PROTO=1 VAR_PROTO value\n     * @property {number} VAR_RLP=2 VAR_RLP value\n     * @property {number} FIXED32_BIG=3 FIXED32_BIG value\n     * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value\n     * @property {number} FIXED64_BIG=5 FIXED64_BIG value\n     * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value\n     * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value\n     * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value\n     */\n    ics23.LengthOp = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NO_PREFIX\"] = 0;\n        values[valuesById[1] = \"VAR_PROTO\"] = 1;\n        values[valuesById[2] = \"VAR_RLP\"] = 2;\n        values[valuesById[3] = \"FIXED32_BIG\"] = 3;\n        values[valuesById[4] = \"FIXED32_LITTLE\"] = 4;\n        values[valuesById[5] = \"FIXED64_BIG\"] = 5;\n        values[valuesById[6] = \"FIXED64_LITTLE\"] = 6;\n        values[valuesById[7] = \"REQUIRE_32_BYTES\"] = 7;\n        values[valuesById[8] = \"REQUIRE_64_BYTES\"] = 8;\n        return values;\n    })();\n\n    ics23.ExistenceProof = (function() {\n\n        /**\n         * Properties of an ExistenceProof.\n         * @memberof ics23\n         * @interface IExistenceProof\n         * @property {Uint8Array|null} [key] ExistenceProof key\n         * @property {Uint8Array|null} [value] ExistenceProof value\n         * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf\n         * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path\n         */\n\n        /**\n         * Constructs a new ExistenceProof.\n         * @memberof ics23\n         * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.\n         * The result of peforming all these steps will provide a \"root hash\", which can\n         * be compared to the value in a header.\n         * \n         * Since it is computationally infeasible to produce a hash collission for any of the used\n         * cryptographic hash functions, if someone can provide a series of operations to transform\n         * a given key and value into a root hash that matches some trusted root, these key and values\n         * must be in the referenced merkle tree.\n         * \n         * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,\n         * which should be controlled by a spec. Eg. with lengthOp as NONE,\n         * prefix = FOO, key = BAR, value = CHOICE\n         * and\n         * prefix = F, key = OOBAR, value = CHOICE\n         * would produce the same value.\n         * \n         * With LengthOp this is tricker but not impossible. Which is why the \"leafPrefixEqual\" field\n         * in the ProofSpec is valuable to prevent this mutability. And why all trees should\n         * length-prefix the data before hashing it.\n         * @implements IExistenceProof\n         * @constructor\n         * @param {ics23.IExistenceProof=} [properties] Properties to set\n         */\n        function ExistenceProof(properties) {\n            this.path = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * ExistenceProof value.\n         * @member {Uint8Array} value\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.value = $util.newBuffer([]);\n\n        /**\n         * ExistenceProof leaf.\n         * @member {ics23.ILeafOp|null|undefined} leaf\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.leaf = null;\n\n        /**\n         * ExistenceProof path.\n         * @member {Array.<ics23.IInnerOp>} path\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.path = $util.emptyArray;\n\n        /**\n         * Creates a new ExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof=} [properties] Properties to set\n         * @returns {ics23.ExistenceProof} ExistenceProof instance\n         */\n        ExistenceProof.create = function create(properties) {\n            return new ExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.path != null && message.path.length)\n                for (var i = 0; i < message.path.length; ++i)\n                    $root.ics23.InnerOp.encode(message.path[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ExistenceProof message, length delimited. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.path && message.path.length))\n                        message.path = [];\n                    message.path.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ExistenceProof message.\n         * @function verify\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value)))\n                    return \"value: buffer expected\";\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n                var error = $root.ics23.LeafOp.verify(message.leaf);\n                if (error)\n                    return \"leaf.\" + error;\n            }\n            if (message.path != null && message.hasOwnProperty(\"path\")) {\n                if (!Array.isArray(message.path))\n                    return \"path: array expected\";\n                for (var i = 0; i < message.path.length; ++i) {\n                    var error = $root.ics23.InnerOp.verify(message.path[i]);\n                    if (error)\n                        return \"path.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         */\n        ExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.ExistenceProof)\n                return object;\n            var message = new $root.ics23.ExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.value != null)\n                if (typeof object.value === \"string\")\n                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);\n                else if (object.value.length)\n                    message.value = object.value;\n            if (object.leaf != null) {\n                if (typeof object.leaf !== \"object\")\n                    throw TypeError(\".ics23.ExistenceProof.leaf: object expected\");\n                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n            }\n            if (object.path) {\n                if (!Array.isArray(object.path))\n                    throw TypeError(\".ics23.ExistenceProof.path: array expected\");\n                message.path = [];\n                for (var i = 0; i < object.path.length; ++i) {\n                    if (typeof object.path[i] !== \"object\")\n                        throw TypeError(\".ics23.ExistenceProof.path: object expected\");\n                    message.path[i] = $root.ics23.InnerOp.fromObject(object.path[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.ExistenceProof} message ExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.path = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                if (options.bytes === String)\n                    object.value = \"\";\n                else {\n                    object.value = [];\n                    if (options.bytes !== Array)\n                        object.value = $util.newBuffer(object.value);\n                }\n                object.leaf = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n            if (message.path && message.path.length) {\n                object.path = [];\n                for (var j = 0; j < message.path.length; ++j)\n                    object.path[j] = $root.ics23.InnerOp.toObject(message.path[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.ExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ExistenceProof;\n    })();\n\n    ics23.NonExistenceProof = (function() {\n\n        /**\n         * Properties of a NonExistenceProof.\n         * @memberof ics23\n         * @interface INonExistenceProof\n         * @property {Uint8Array|null} [key] NonExistenceProof key\n         * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left\n         * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right\n         */\n\n        /**\n         * Constructs a new NonExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a NonExistenceProof.\n         * @implements INonExistenceProof\n         * @constructor\n         * @param {ics23.INonExistenceProof=} [properties] Properties to set\n         */\n        function NonExistenceProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NonExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * NonExistenceProof left.\n         * @member {ics23.IExistenceProof|null|undefined} left\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.left = null;\n\n        /**\n         * NonExistenceProof right.\n         * @member {ics23.IExistenceProof|null|undefined} right\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.right = null;\n\n        /**\n         * Creates a new NonExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof=} [properties] Properties to set\n         * @returns {ics23.NonExistenceProof} NonExistenceProof instance\n         */\n        NonExistenceProof.create = function create(properties) {\n            return new NonExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NonExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                $root.ics23.ExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                $root.ics23.ExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NonExistenceProof message, length delimited. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NonExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NonExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.NonExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NonExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NonExistenceProof message.\n         * @function verify\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NonExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.left != null && message.hasOwnProperty(\"left\")) {\n                var error = $root.ics23.ExistenceProof.verify(message.left);\n                if (error)\n                    return \"left.\" + error;\n            }\n            if (message.right != null && message.hasOwnProperty(\"right\")) {\n                var error = $root.ics23.ExistenceProof.verify(message.right);\n                if (error)\n                    return \"right.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a NonExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         */\n        NonExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.NonExistenceProof)\n                return object;\n            var message = new $root.ics23.NonExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.left != null) {\n                if (typeof object.left !== \"object\")\n                    throw TypeError(\".ics23.NonExistenceProof.left: object expected\");\n                message.left = $root.ics23.ExistenceProof.fromObject(object.left);\n            }\n            if (object.right != null) {\n                if (typeof object.right !== \"object\")\n                    throw TypeError(\".ics23.NonExistenceProof.right: object expected\");\n                message.right = $root.ics23.ExistenceProof.fromObject(object.right);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NonExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.NonExistenceProof} message NonExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NonExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                object.left = null;\n                object.right = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                object.left = $root.ics23.ExistenceProof.toObject(message.left, options);\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                object.right = $root.ics23.ExistenceProof.toObject(message.right, options);\n            return object;\n        };\n\n        /**\n         * Converts this NonExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NonExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NonExistenceProof;\n    })();\n\n    ics23.CommitmentProof = (function() {\n\n        /**\n         * Properties of a CommitmentProof.\n         * @memberof ics23\n         * @interface ICommitmentProof\n         * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist\n         * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist\n         * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch\n         * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed\n         */\n\n        /**\n         * Constructs a new CommitmentProof.\n         * @memberof ics23\n         * @classdesc Represents a CommitmentProof.\n         * @implements ICommitmentProof\n         * @constructor\n         * @param {ics23.ICommitmentProof=} [properties] Properties to set\n         */\n        function CommitmentProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CommitmentProof exist.\n         * @member {ics23.IExistenceProof|null|undefined} exist\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.exist = null;\n\n        /**\n         * CommitmentProof nonexist.\n         * @member {ics23.INonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.nonexist = null;\n\n        /**\n         * CommitmentProof batch.\n         * @member {ics23.IBatchProof|null|undefined} batch\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.batch = null;\n\n        /**\n         * CommitmentProof compressed.\n         * @member {ics23.ICompressedBatchProof|null|undefined} compressed\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.compressed = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * CommitmentProof proof.\n         * @member {\"exist\"|\"nonexist\"|\"batch\"|\"compressed\"|undefined} proof\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        Object.defineProperty(CommitmentProof.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\", \"batch\", \"compressed\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CommitmentProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof=} [properties] Properties to set\n         * @returns {ics23.CommitmentProof} CommitmentProof instance\n         */\n        CommitmentProof.create = function create(properties) {\n            return new CommitmentProof(properties);\n        };\n\n        /**\n         * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommitmentProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.batch != null && message.hasOwnProperty(\"batch\"))\n                $root.ics23.BatchProof.encode(message.batch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\"))\n                $root.ics23.CompressedBatchProof.encode(message.compressed, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CommitmentProof message, length delimited. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommitmentProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CommitmentProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommitmentProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CommitmentProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.batch = $root.ics23.BatchProof.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.compressed = $root.ics23.CompressedBatchProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CommitmentProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommitmentProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CommitmentProof message.\n         * @function verify\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CommitmentProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.ExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.BatchProof.verify(message.batch);\n                    if (error)\n                        return \"batch.\" + error;\n                }\n            }\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedBatchProof.verify(message.compressed);\n                    if (error)\n                        return \"compressed.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CommitmentProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         */\n        CommitmentProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CommitmentProof)\n                return object;\n            var message = new $root.ics23.CommitmentProof();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.exist: object expected\");\n                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.nonexist: object expected\");\n                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n            }\n            if (object.batch != null) {\n                if (typeof object.batch !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.batch: object expected\");\n                message.batch = $root.ics23.BatchProof.fromObject(object.batch);\n            }\n            if (object.compressed != null) {\n                if (typeof object.compressed !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.compressed: object expected\");\n                message.compressed = $root.ics23.CompressedBatchProof.fromObject(object.compressed);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CommitmentProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.CommitmentProof} message CommitmentProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CommitmentProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n                object.batch = $root.ics23.BatchProof.toObject(message.batch, options);\n                if (options.oneofs)\n                    object.proof = \"batch\";\n            }\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n                object.compressed = $root.ics23.CompressedBatchProof.toObject(message.compressed, options);\n                if (options.oneofs)\n                    object.proof = \"compressed\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CommitmentProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CommitmentProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CommitmentProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CommitmentProof;\n    })();\n\n    ics23.LeafOp = (function() {\n\n        /**\n         * Properties of a LeafOp.\n         * @memberof ics23\n         * @interface ILeafOp\n         * @property {ics23.HashOp|null} [hash] LeafOp hash\n         * @property {ics23.HashOp|null} [prehashKey] LeafOp prehashKey\n         * @property {ics23.HashOp|null} [prehashValue] LeafOp prehashValue\n         * @property {ics23.LengthOp|null} [length] LeafOp length\n         * @property {Uint8Array|null} [prefix] LeafOp prefix\n         */\n\n        /**\n         * Constructs a new LeafOp.\n         * @memberof ics23\n         * @classdesc LeafOp represents the raw key-value data we wish to prove, and\n         * must be flexible to represent the internal transformation from\n         * the original key-value pairs into the basis hash, for many existing\n         * merkle trees.\n         * \n         * key and value are passed in. So that the signature of this operation is:\n         * leafOp(key, value) -> output\n         * \n         * To process this, first prehash the keys and values if needed (ANY means no hash in this case):\n         * hkey = prehashKey(key)\n         * hvalue = prehashValue(value)\n         * \n         * Then combine the bytes, and hash it\n         * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)\n         * @implements ILeafOp\n         * @constructor\n         * @param {ics23.ILeafOp=} [properties] Properties to set\n         */\n        function LeafOp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LeafOp hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.hash = 0;\n\n        /**\n         * LeafOp prehashKey.\n         * @member {ics23.HashOp} prehashKey\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prehashKey = 0;\n\n        /**\n         * LeafOp prehashValue.\n         * @member {ics23.HashOp} prehashValue\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prehashValue = 0;\n\n        /**\n         * LeafOp length.\n         * @member {ics23.LengthOp} length\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.length = 0;\n\n        /**\n         * LeafOp prefix.\n         * @member {Uint8Array} prefix\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * Creates a new LeafOp instance using the specified properties.\n         * @function create\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp=} [properties] Properties to set\n         * @returns {ics23.LeafOp} LeafOp instance\n         */\n        LeafOp.create = function create(properties) {\n            return new LeafOp(properties);\n        };\n\n        /**\n         * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LeafOp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.prehashKey);\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.prehashValue);\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.length);\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.prefix);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LeafOp message, length delimited. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LeafOp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LeafOp message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.LeafOp} LeafOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LeafOp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.LeafOp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prehashKey = reader.int32();\n                    break;\n                case 3:\n                    message.prehashValue = reader.int32();\n                    break;\n                case 4:\n                    message.length = reader.int32();\n                    break;\n                case 5:\n                    message.prefix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LeafOp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.LeafOp} LeafOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LeafOp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LeafOp message.\n         * @function verify\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LeafOp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                switch (message.prehashKey) {\n                default:\n                    return \"prehashKey: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                switch (message.prehashValue) {\n                default:\n                    return \"prehashValue: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                switch (message.length) {\n                default:\n                    return \"length: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                    break;\n                }\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix)))\n                    return \"prefix: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LeafOp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.LeafOp} LeafOp\n         */\n        LeafOp.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.LeafOp)\n                return object;\n            var message = new $root.ics23.LeafOp();\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.hash = 6;\n                break;\n            }\n            switch (object.prehashKey) {\n            case \"NO_HASH\":\n            case 0:\n                message.prehashKey = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.prehashKey = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.prehashKey = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.prehashKey = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.prehashKey = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.prehashKey = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.prehashKey = 6;\n                break;\n            }\n            switch (object.prehashValue) {\n            case \"NO_HASH\":\n            case 0:\n                message.prehashValue = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.prehashValue = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.prehashValue = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.prehashValue = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.prehashValue = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.prehashValue = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.prehashValue = 6;\n                break;\n            }\n            switch (object.length) {\n            case \"NO_PREFIX\":\n            case 0:\n                message.length = 0;\n                break;\n            case \"VAR_PROTO\":\n            case 1:\n                message.length = 1;\n                break;\n            case \"VAR_RLP\":\n            case 2:\n                message.length = 2;\n                break;\n            case \"FIXED32_BIG\":\n            case 3:\n                message.length = 3;\n                break;\n            case \"FIXED32_LITTLE\":\n            case 4:\n                message.length = 4;\n                break;\n            case \"FIXED64_BIG\":\n            case 5:\n                message.length = 5;\n                break;\n            case \"FIXED64_LITTLE\":\n            case 6:\n                message.length = 6;\n                break;\n            case \"REQUIRE_32_BYTES\":\n            case 7:\n                message.length = 7;\n                break;\n            case \"REQUIRE_64_BYTES\":\n            case 8:\n                message.length = 8;\n                break;\n            }\n            if (object.prefix != null)\n                if (typeof object.prefix === \"string\")\n                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);\n                else if (object.prefix.length)\n                    message.prefix = object.prefix;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LeafOp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.LeafOp} message LeafOp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LeafOp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n                object.prehashKey = options.enums === String ? \"NO_HASH\" : 0;\n                object.prehashValue = options.enums === String ? \"NO_HASH\" : 0;\n                object.length = options.enums === String ? \"NO_PREFIX\" : 0;\n                if (options.bytes === String)\n                    object.prefix = \"\";\n                else {\n                    object.prefix = [];\n                    if (options.bytes !== Array)\n                        object.prefix = $util.newBuffer(object.prefix);\n                }\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                object.prehashKey = options.enums === String ? $root.ics23.HashOp[message.prehashKey] : message.prehashKey;\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                object.prehashValue = options.enums === String ? $root.ics23.HashOp[message.prehashValue] : message.prehashValue;\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                object.length = options.enums === String ? $root.ics23.LengthOp[message.length] : message.length;\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n            return object;\n        };\n\n        /**\n         * Converts this LeafOp to JSON.\n         * @function toJSON\n         * @memberof ics23.LeafOp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LeafOp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LeafOp;\n    })();\n\n    ics23.InnerOp = (function() {\n\n        /**\n         * Properties of an InnerOp.\n         * @memberof ics23\n         * @interface IInnerOp\n         * @property {ics23.HashOp|null} [hash] InnerOp hash\n         * @property {Uint8Array|null} [prefix] InnerOp prefix\n         * @property {Uint8Array|null} [suffix] InnerOp suffix\n         */\n\n        /**\n         * Constructs a new InnerOp.\n         * @memberof ics23\n         * @classdesc InnerOp represents a merkle-proof step that is not a leaf.\n         * It represents concatenating two children and hashing them to provide the next result.\n         * \n         * The result of the previous step is passed in, so the signature of this op is:\n         * innerOp(child) -> output\n         * \n         * The result of applying InnerOp should be:\n         * output = op.hash(op.prefix || child || op.suffix)\n         * \n         * where the || operator is concatenation of binary data,\n         * and child is the result of hashing all the tree below this step.\n         * \n         * Any special data, like prepending child with the length, or prepending the entire operation with\n         * some value to differentiate from leaf nodes, should be included in prefix and suffix.\n         * If either of prefix or suffix is empty, we just treat it as an empty string\n         * @implements IInnerOp\n         * @constructor\n         * @param {ics23.IInnerOp=} [properties] Properties to set\n         */\n        function InnerOp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InnerOp hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.hash = 0;\n\n        /**\n         * InnerOp prefix.\n         * @member {Uint8Array} prefix\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * InnerOp suffix.\n         * @member {Uint8Array} suffix\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.suffix = $util.newBuffer([]);\n\n        /**\n         * Creates a new InnerOp instance using the specified properties.\n         * @function create\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp=} [properties] Properties to set\n         * @returns {ics23.InnerOp} InnerOp instance\n         */\n        InnerOp.create = function create(properties) {\n            return new InnerOp(properties);\n        };\n\n        /**\n         * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerOp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.prefix);\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.suffix);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InnerOp message, length delimited. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerOp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InnerOp message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.InnerOp} InnerOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerOp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerOp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prefix = reader.bytes();\n                    break;\n                case 3:\n                    message.suffix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an InnerOp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.InnerOp} InnerOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerOp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InnerOp message.\n         * @function verify\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InnerOp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix)))\n                    return \"prefix: buffer expected\";\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                if (!(message.suffix && typeof message.suffix.length === \"number\" || $util.isString(message.suffix)))\n                    return \"suffix: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an InnerOp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.InnerOp} InnerOp\n         */\n        InnerOp.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.InnerOp)\n                return object;\n            var message = new $root.ics23.InnerOp();\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.hash = 6;\n                break;\n            }\n            if (object.prefix != null)\n                if (typeof object.prefix === \"string\")\n                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);\n                else if (object.prefix.length)\n                    message.prefix = object.prefix;\n            if (object.suffix != null)\n                if (typeof object.suffix === \"string\")\n                    $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);\n                else if (object.suffix.length)\n                    message.suffix = object.suffix;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InnerOp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.InnerOp} message InnerOp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InnerOp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n                if (options.bytes === String)\n                    object.prefix = \"\";\n                else {\n                    object.prefix = [];\n                    if (options.bytes !== Array)\n                        object.prefix = $util.newBuffer(object.prefix);\n                }\n                if (options.bytes === String)\n                    object.suffix = \"\";\n                else {\n                    object.suffix = [];\n                    if (options.bytes !== Array)\n                        object.suffix = $util.newBuffer(object.suffix);\n                }\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;\n            return object;\n        };\n\n        /**\n         * Converts this InnerOp to JSON.\n         * @function toJSON\n         * @memberof ics23.InnerOp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InnerOp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return InnerOp;\n    })();\n\n    ics23.ProofSpec = (function() {\n\n        /**\n         * Properties of a ProofSpec.\n         * @memberof ics23\n         * @interface IProofSpec\n         * @property {ics23.ILeafOp|null} [leafSpec] ProofSpec leafSpec\n         * @property {ics23.IInnerSpec|null} [innerSpec] ProofSpec innerSpec\n         * @property {number|null} [maxDepth] ProofSpec maxDepth\n         * @property {number|null} [minDepth] ProofSpec minDepth\n         */\n\n        /**\n         * Constructs a new ProofSpec.\n         * @memberof ics23\n         * @classdesc ProofSpec defines what the expected parameters are for a given proof type.\n         * This can be stored in the client and used to validate any incoming proofs.\n         * \n         * verify(ProofSpec, Proof) -> Proof | Error\n         * \n         * As demonstrated in tests, if we don't fix the algorithm used to calculate the\n         * LeafHash for a given tree, there are many possible key-value pairs that can\n         * generate a given hash (by interpretting the preimage differently).\n         * We need this for proper security, requires client knows a priori what\n         * tree format server uses. But not in code, rather a configuration object.\n         * @implements IProofSpec\n         * @constructor\n         * @param {ics23.IProofSpec=} [properties] Properties to set\n         */\n        function ProofSpec(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProofSpec leafSpec.\n         * @member {ics23.ILeafOp|null|undefined} leafSpec\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.leafSpec = null;\n\n        /**\n         * ProofSpec innerSpec.\n         * @member {ics23.IInnerSpec|null|undefined} innerSpec\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.innerSpec = null;\n\n        /**\n         * ProofSpec maxDepth.\n         * @member {number} maxDepth\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.maxDepth = 0;\n\n        /**\n         * ProofSpec minDepth.\n         * @member {number} minDepth\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.minDepth = 0;\n\n        /**\n         * Creates a new ProofSpec instance using the specified properties.\n         * @function create\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec=} [properties] Properties to set\n         * @returns {ics23.ProofSpec} ProofSpec instance\n         */\n        ProofSpec.create = function create(properties) {\n            return new ProofSpec(properties);\n        };\n\n        /**\n         * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProofSpec.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\"))\n                $root.ics23.LeafOp.encode(message.leafSpec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\"))\n                $root.ics23.InnerSpec.encode(message.innerSpec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.maxDepth);\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.minDepth);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProofSpec message, length delimited. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProofSpec.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProofSpec message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.ProofSpec} ProofSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProofSpec.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ProofSpec();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.leafSpec = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.innerSpec = $root.ics23.InnerSpec.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.maxDepth = reader.int32();\n                    break;\n                case 4:\n                    message.minDepth = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProofSpec message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.ProofSpec} ProofSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProofSpec.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProofSpec message.\n         * @function verify\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProofSpec.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) {\n                var error = $root.ics23.LeafOp.verify(message.leafSpec);\n                if (error)\n                    return \"leafSpec.\" + error;\n            }\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) {\n                var error = $root.ics23.InnerSpec.verify(message.innerSpec);\n                if (error)\n                    return \"innerSpec.\" + error;\n            }\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                if (!$util.isInteger(message.maxDepth))\n                    return \"maxDepth: integer expected\";\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                if (!$util.isInteger(message.minDepth))\n                    return \"minDepth: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProofSpec message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.ProofSpec} ProofSpec\n         */\n        ProofSpec.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.ProofSpec)\n                return object;\n            var message = new $root.ics23.ProofSpec();\n            if (object.leafSpec != null) {\n                if (typeof object.leafSpec !== \"object\")\n                    throw TypeError(\".ics23.ProofSpec.leafSpec: object expected\");\n                message.leafSpec = $root.ics23.LeafOp.fromObject(object.leafSpec);\n            }\n            if (object.innerSpec != null) {\n                if (typeof object.innerSpec !== \"object\")\n                    throw TypeError(\".ics23.ProofSpec.innerSpec: object expected\");\n                message.innerSpec = $root.ics23.InnerSpec.fromObject(object.innerSpec);\n            }\n            if (object.maxDepth != null)\n                message.maxDepth = object.maxDepth | 0;\n            if (object.minDepth != null)\n                message.minDepth = object.minDepth | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProofSpec message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.ProofSpec} message ProofSpec\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProofSpec.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.leafSpec = null;\n                object.innerSpec = null;\n                object.maxDepth = 0;\n                object.minDepth = 0;\n            }\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\"))\n                object.leafSpec = $root.ics23.LeafOp.toObject(message.leafSpec, options);\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\"))\n                object.innerSpec = $root.ics23.InnerSpec.toObject(message.innerSpec, options);\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                object.maxDepth = message.maxDepth;\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                object.minDepth = message.minDepth;\n            return object;\n        };\n\n        /**\n         * Converts this ProofSpec to JSON.\n         * @function toJSON\n         * @memberof ics23.ProofSpec\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProofSpec.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProofSpec;\n    })();\n\n    ics23.InnerSpec = (function() {\n\n        /**\n         * Properties of an InnerSpec.\n         * @memberof ics23\n         * @interface IInnerSpec\n         * @property {Array.<number>|null} [childOrder] InnerSpec childOrder\n         * @property {number|null} [childSize] InnerSpec childSize\n         * @property {number|null} [minPrefixLength] InnerSpec minPrefixLength\n         * @property {number|null} [maxPrefixLength] InnerSpec maxPrefixLength\n         * @property {Uint8Array|null} [emptyChild] InnerSpec emptyChild\n         * @property {ics23.HashOp|null} [hash] InnerSpec hash\n         */\n\n        /**\n         * Constructs a new InnerSpec.\n         * @memberof ics23\n         * @classdesc Represents an InnerSpec.\n         * @implements IInnerSpec\n         * @constructor\n         * @param {ics23.IInnerSpec=} [properties] Properties to set\n         */\n        function InnerSpec(properties) {\n            this.childOrder = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InnerSpec childOrder.\n         * @member {Array.<number>} childOrder\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.childOrder = $util.emptyArray;\n\n        /**\n         * InnerSpec childSize.\n         * @member {number} childSize\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.childSize = 0;\n\n        /**\n         * InnerSpec minPrefixLength.\n         * @member {number} minPrefixLength\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.minPrefixLength = 0;\n\n        /**\n         * InnerSpec maxPrefixLength.\n         * @member {number} maxPrefixLength\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.maxPrefixLength = 0;\n\n        /**\n         * InnerSpec emptyChild.\n         * @member {Uint8Array} emptyChild\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.emptyChild = $util.newBuffer([]);\n\n        /**\n         * InnerSpec hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.hash = 0;\n\n        /**\n         * Creates a new InnerSpec instance using the specified properties.\n         * @function create\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec=} [properties] Properties to set\n         * @returns {ics23.InnerSpec} InnerSpec instance\n         */\n        InnerSpec.create = function create(properties) {\n            return new InnerSpec(properties);\n        };\n\n        /**\n         * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerSpec.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.childOrder != null && message.childOrder.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.childOrder.length; ++i)\n                    writer.int32(message.childOrder[i]);\n                writer.ldelim();\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.childSize);\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.minPrefixLength);\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxPrefixLength);\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.emptyChild);\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InnerSpec message, length delimited. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerSpec.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InnerSpec message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.InnerSpec} InnerSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerSpec.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerSpec();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.childOrder && message.childOrder.length))\n                        message.childOrder = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.childOrder.push(reader.int32());\n                    } else\n                        message.childOrder.push(reader.int32());\n                    break;\n                case 2:\n                    message.childSize = reader.int32();\n                    break;\n                case 3:\n                    message.minPrefixLength = reader.int32();\n                    break;\n                case 4:\n                    message.maxPrefixLength = reader.int32();\n                    break;\n                case 5:\n                    message.emptyChild = reader.bytes();\n                    break;\n                case 6:\n                    message.hash = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an InnerSpec message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.InnerSpec} InnerSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerSpec.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InnerSpec message.\n         * @function verify\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InnerSpec.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.childOrder != null && message.hasOwnProperty(\"childOrder\")) {\n                if (!Array.isArray(message.childOrder))\n                    return \"childOrder: array expected\";\n                for (var i = 0; i < message.childOrder.length; ++i)\n                    if (!$util.isInteger(message.childOrder[i]))\n                        return \"childOrder: integer[] expected\";\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                if (!$util.isInteger(message.childSize))\n                    return \"childSize: integer expected\";\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                if (!$util.isInteger(message.minPrefixLength))\n                    return \"minPrefixLength: integer expected\";\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                if (!$util.isInteger(message.maxPrefixLength))\n                    return \"maxPrefixLength: integer expected\";\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                if (!(message.emptyChild && typeof message.emptyChild.length === \"number\" || $util.isString(message.emptyChild)))\n                    return \"emptyChild: buffer expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates an InnerSpec message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.InnerSpec} InnerSpec\n         */\n        InnerSpec.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.InnerSpec)\n                return object;\n            var message = new $root.ics23.InnerSpec();\n            if (object.childOrder) {\n                if (!Array.isArray(object.childOrder))\n                    throw TypeError(\".ics23.InnerSpec.childOrder: array expected\");\n                message.childOrder = [];\n                for (var i = 0; i < object.childOrder.length; ++i)\n                    message.childOrder[i] = object.childOrder[i] | 0;\n            }\n            if (object.childSize != null)\n                message.childSize = object.childSize | 0;\n            if (object.minPrefixLength != null)\n                message.minPrefixLength = object.minPrefixLength | 0;\n            if (object.maxPrefixLength != null)\n                message.maxPrefixLength = object.maxPrefixLength | 0;\n            if (object.emptyChild != null)\n                if (typeof object.emptyChild === \"string\")\n                    $util.base64.decode(object.emptyChild, message.emptyChild = $util.newBuffer($util.base64.length(object.emptyChild)), 0);\n                else if (object.emptyChild.length)\n                    message.emptyChild = object.emptyChild;\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            case \"SHA512_256\":\n            case 6:\n                message.hash = 6;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InnerSpec message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.InnerSpec} message InnerSpec\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InnerSpec.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.childOrder = [];\n            if (options.defaults) {\n                object.childSize = 0;\n                object.minPrefixLength = 0;\n                object.maxPrefixLength = 0;\n                if (options.bytes === String)\n                    object.emptyChild = \"\";\n                else {\n                    object.emptyChild = [];\n                    if (options.bytes !== Array)\n                        object.emptyChild = $util.newBuffer(object.emptyChild);\n                }\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n            }\n            if (message.childOrder && message.childOrder.length) {\n                object.childOrder = [];\n                for (var j = 0; j < message.childOrder.length; ++j)\n                    object.childOrder[j] = message.childOrder[j];\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                object.childSize = message.childSize;\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                object.minPrefixLength = message.minPrefixLength;\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                object.maxPrefixLength = message.maxPrefixLength;\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                object.emptyChild = options.bytes === String ? $util.base64.encode(message.emptyChild, 0, message.emptyChild.length) : options.bytes === Array ? Array.prototype.slice.call(message.emptyChild) : message.emptyChild;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this InnerSpec to JSON.\n         * @function toJSON\n         * @memberof ics23.InnerSpec\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InnerSpec.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return InnerSpec;\n    })();\n\n    ics23.BatchProof = (function() {\n\n        /**\n         * Properties of a BatchProof.\n         * @memberof ics23\n         * @interface IBatchProof\n         * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries\n         */\n\n        /**\n         * Constructs a new BatchProof.\n         * @memberof ics23\n         * @classdesc Represents a BatchProof.\n         * @implements IBatchProof\n         * @constructor\n         * @param {ics23.IBatchProof=} [properties] Properties to set\n         */\n        function BatchProof(properties) {\n            this.entries = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BatchProof entries.\n         * @member {Array.<ics23.IBatchEntry>} entries\n         * @memberof ics23.BatchProof\n         * @instance\n         */\n        BatchProof.prototype.entries = $util.emptyArray;\n\n        /**\n         * Creates a new BatchProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof=} [properties] Properties to set\n         * @returns {ics23.BatchProof} BatchProof instance\n         */\n        BatchProof.create = function create(properties) {\n            return new BatchProof(properties);\n        };\n\n        /**\n         * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.entries != null && message.entries.length)\n                for (var i = 0; i < message.entries.length; ++i)\n                    $root.ics23.BatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BatchProof message, length delimited. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BatchProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.BatchProof} BatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.entries && message.entries.length))\n                        message.entries = [];\n                    message.entries.push($root.ics23.BatchEntry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BatchProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.BatchProof} BatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BatchProof message.\n         * @function verify\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BatchProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n                if (!Array.isArray(message.entries))\n                    return \"entries: array expected\";\n                for (var i = 0; i < message.entries.length; ++i) {\n                    var error = $root.ics23.BatchEntry.verify(message.entries[i]);\n                    if (error)\n                        return \"entries.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BatchProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.BatchProof} BatchProof\n         */\n        BatchProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.BatchProof)\n                return object;\n            var message = new $root.ics23.BatchProof();\n            if (object.entries) {\n                if (!Array.isArray(object.entries))\n                    throw TypeError(\".ics23.BatchProof.entries: array expected\");\n                message.entries = [];\n                for (var i = 0; i < object.entries.length; ++i) {\n                    if (typeof object.entries[i] !== \"object\")\n                        throw TypeError(\".ics23.BatchProof.entries: object expected\");\n                    message.entries[i] = $root.ics23.BatchEntry.fromObject(object.entries[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BatchProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.BatchProof} message BatchProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BatchProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.entries = [];\n            if (message.entries && message.entries.length) {\n                object.entries = [];\n                for (var j = 0; j < message.entries.length; ++j)\n                    object.entries[j] = $root.ics23.BatchEntry.toObject(message.entries[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BatchProof to JSON.\n         * @function toJSON\n         * @memberof ics23.BatchProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BatchProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BatchProof;\n    })();\n\n    ics23.BatchEntry = (function() {\n\n        /**\n         * Properties of a BatchEntry.\n         * @memberof ics23\n         * @interface IBatchEntry\n         * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist\n         * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist\n         */\n\n        /**\n         * Constructs a new BatchEntry.\n         * @memberof ics23\n         * @classdesc Represents a BatchEntry.\n         * @implements IBatchEntry\n         * @constructor\n         * @param {ics23.IBatchEntry=} [properties] Properties to set\n         */\n        function BatchEntry(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BatchEntry exist.\n         * @member {ics23.IExistenceProof|null|undefined} exist\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        BatchEntry.prototype.exist = null;\n\n        /**\n         * BatchEntry nonexist.\n         * @member {ics23.INonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        BatchEntry.prototype.nonexist = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * BatchEntry proof.\n         * @member {\"exist\"|\"nonexist\"|undefined} proof\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        Object.defineProperty(BatchEntry.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new BatchEntry instance using the specified properties.\n         * @function create\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry=} [properties] Properties to set\n         * @returns {ics23.BatchEntry} BatchEntry instance\n         */\n        BatchEntry.create = function create(properties) {\n            return new BatchEntry(properties);\n        };\n\n        /**\n         * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchEntry.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BatchEntry message, length delimited. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BatchEntry message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.BatchEntry} BatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchEntry.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchEntry();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BatchEntry message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.BatchEntry} BatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchEntry.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BatchEntry message.\n         * @function verify\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BatchEntry.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.ExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BatchEntry message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.BatchEntry} BatchEntry\n         */\n        BatchEntry.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.BatchEntry)\n                return object;\n            var message = new $root.ics23.BatchEntry();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.BatchEntry.exist: object expected\");\n                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.BatchEntry.nonexist: object expected\");\n                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BatchEntry message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.BatchEntry} message BatchEntry\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BatchEntry.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BatchEntry to JSON.\n         * @function toJSON\n         * @memberof ics23.BatchEntry\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BatchEntry.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BatchEntry;\n    })();\n\n    ics23.CompressedBatchProof = (function() {\n\n        /**\n         * Properties of a CompressedBatchProof.\n         * @memberof ics23\n         * @interface ICompressedBatchProof\n         * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries\n         * @property {Array.<ics23.IInnerOp>|null} [lookupInners] CompressedBatchProof lookupInners\n         */\n\n        /**\n         * Constructs a new CompressedBatchProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedBatchProof.\n         * @implements ICompressedBatchProof\n         * @constructor\n         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n         */\n        function CompressedBatchProof(properties) {\n            this.entries = [];\n            this.lookupInners = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedBatchProof entries.\n         * @member {Array.<ics23.ICompressedBatchEntry>} entries\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         */\n        CompressedBatchProof.prototype.entries = $util.emptyArray;\n\n        /**\n         * CompressedBatchProof lookupInners.\n         * @member {Array.<ics23.IInnerOp>} lookupInners\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         */\n        CompressedBatchProof.prototype.lookupInners = $util.emptyArray;\n\n        /**\n         * Creates a new CompressedBatchProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof instance\n         */\n        CompressedBatchProof.create = function create(properties) {\n            return new CompressedBatchProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.entries != null && message.entries.length)\n                for (var i = 0; i < message.entries.length; ++i)\n                    $root.ics23.CompressedBatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.lookupInners != null && message.lookupInners.length)\n                for (var i = 0; i < message.lookupInners.length; ++i)\n                    $root.ics23.InnerOp.encode(message.lookupInners[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedBatchProof message, length delimited. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedBatchProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.entries && message.entries.length))\n                        message.entries = [];\n                    message.entries.push($root.ics23.CompressedBatchEntry.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    if (!(message.lookupInners && message.lookupInners.length))\n                        message.lookupInners = [];\n                    message.lookupInners.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedBatchProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedBatchProof message.\n         * @function verify\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedBatchProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n                if (!Array.isArray(message.entries))\n                    return \"entries: array expected\";\n                for (var i = 0; i < message.entries.length; ++i) {\n                    var error = $root.ics23.CompressedBatchEntry.verify(message.entries[i]);\n                    if (error)\n                        return \"entries.\" + error;\n                }\n            }\n            if (message.lookupInners != null && message.hasOwnProperty(\"lookupInners\")) {\n                if (!Array.isArray(message.lookupInners))\n                    return \"lookupInners: array expected\";\n                for (var i = 0; i < message.lookupInners.length; ++i) {\n                    var error = $root.ics23.InnerOp.verify(message.lookupInners[i]);\n                    if (error)\n                        return \"lookupInners.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedBatchProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         */\n        CompressedBatchProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedBatchProof)\n                return object;\n            var message = new $root.ics23.CompressedBatchProof();\n            if (object.entries) {\n                if (!Array.isArray(object.entries))\n                    throw TypeError(\".ics23.CompressedBatchProof.entries: array expected\");\n                message.entries = [];\n                for (var i = 0; i < object.entries.length; ++i) {\n                    if (typeof object.entries[i] !== \"object\")\n                        throw TypeError(\".ics23.CompressedBatchProof.entries: object expected\");\n                    message.entries[i] = $root.ics23.CompressedBatchEntry.fromObject(object.entries[i]);\n                }\n            }\n            if (object.lookupInners) {\n                if (!Array.isArray(object.lookupInners))\n                    throw TypeError(\".ics23.CompressedBatchProof.lookupInners: array expected\");\n                message.lookupInners = [];\n                for (var i = 0; i < object.lookupInners.length; ++i) {\n                    if (typeof object.lookupInners[i] !== \"object\")\n                        throw TypeError(\".ics23.CompressedBatchProof.lookupInners: object expected\");\n                    message.lookupInners[i] = $root.ics23.InnerOp.fromObject(object.lookupInners[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedBatchProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.CompressedBatchProof} message CompressedBatchProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedBatchProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.entries = [];\n                object.lookupInners = [];\n            }\n            if (message.entries && message.entries.length) {\n                object.entries = [];\n                for (var j = 0; j < message.entries.length; ++j)\n                    object.entries[j] = $root.ics23.CompressedBatchEntry.toObject(message.entries[j], options);\n            }\n            if (message.lookupInners && message.lookupInners.length) {\n                object.lookupInners = [];\n                for (var j = 0; j < message.lookupInners.length; ++j)\n                    object.lookupInners[j] = $root.ics23.InnerOp.toObject(message.lookupInners[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedBatchProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedBatchProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedBatchProof;\n    })();\n\n    ics23.CompressedBatchEntry = (function() {\n\n        /**\n         * Properties of a CompressedBatchEntry.\n         * @memberof ics23\n         * @interface ICompressedBatchEntry\n         * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist\n         * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist\n         */\n\n        /**\n         * Constructs a new CompressedBatchEntry.\n         * @memberof ics23\n         * @classdesc Represents a CompressedBatchEntry.\n         * @implements ICompressedBatchEntry\n         * @constructor\n         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n         */\n        function CompressedBatchEntry(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedBatchEntry exist.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} exist\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        CompressedBatchEntry.prototype.exist = null;\n\n        /**\n         * CompressedBatchEntry nonexist.\n         * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        CompressedBatchEntry.prototype.nonexist = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * CompressedBatchEntry proof.\n         * @member {\"exist\"|\"nonexist\"|undefined} proof\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        Object.defineProperty(CompressedBatchEntry.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CompressedBatchEntry instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry instance\n         */\n        CompressedBatchEntry.create = function create(properties) {\n            return new CompressedBatchEntry(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchEntry.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.CompressedExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedBatchEntry message, length delimited. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedBatchEntry message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchEntry.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchEntry();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.CompressedNonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedBatchEntry message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchEntry.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedBatchEntry message.\n         * @function verify\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedBatchEntry.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedNonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedBatchEntry message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         */\n        CompressedBatchEntry.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedBatchEntry)\n                return object;\n            var message = new $root.ics23.CompressedBatchEntry();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.CompressedBatchEntry.exist: object expected\");\n                message.exist = $root.ics23.CompressedExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.CompressedBatchEntry.nonexist: object expected\");\n                message.nonexist = $root.ics23.CompressedNonExistenceProof.fromObject(object.nonexist);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedBatchEntry message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.CompressedBatchEntry} message CompressedBatchEntry\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedBatchEntry.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.CompressedExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.CompressedNonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedBatchEntry to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedBatchEntry.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedBatchEntry;\n    })();\n\n    ics23.CompressedExistenceProof = (function() {\n\n        /**\n         * Properties of a CompressedExistenceProof.\n         * @memberof ics23\n         * @interface ICompressedExistenceProof\n         * @property {Uint8Array|null} [key] CompressedExistenceProof key\n         * @property {Uint8Array|null} [value] CompressedExistenceProof value\n         * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf\n         * @property {Array.<number>|null} [path] CompressedExistenceProof path\n         */\n\n        /**\n         * Constructs a new CompressedExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedExistenceProof.\n         * @implements ICompressedExistenceProof\n         * @constructor\n         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n         */\n        function CompressedExistenceProof(properties) {\n            this.path = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * CompressedExistenceProof value.\n         * @member {Uint8Array} value\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.value = $util.newBuffer([]);\n\n        /**\n         * CompressedExistenceProof leaf.\n         * @member {ics23.ILeafOp|null|undefined} leaf\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.leaf = null;\n\n        /**\n         * CompressedExistenceProof path.\n         * @member {Array.<number>} path\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.path = $util.emptyArray;\n\n        /**\n         * Creates a new CompressedExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof instance\n         */\n        CompressedExistenceProof.create = function create(properties) {\n            return new CompressedExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.path != null && message.path.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.path.length; ++i)\n                    writer.int32(message.path[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.path && message.path.length))\n                        message.path = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.path.push(reader.int32());\n                    } else\n                        message.path.push(reader.int32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedExistenceProof message.\n         * @function verify\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value)))\n                    return \"value: buffer expected\";\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n                var error = $root.ics23.LeafOp.verify(message.leaf);\n                if (error)\n                    return \"leaf.\" + error;\n            }\n            if (message.path != null && message.hasOwnProperty(\"path\")) {\n                if (!Array.isArray(message.path))\n                    return \"path: array expected\";\n                for (var i = 0; i < message.path.length; ++i)\n                    if (!$util.isInteger(message.path[i]))\n                        return \"path: integer[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         */\n        CompressedExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedExistenceProof)\n                return object;\n            var message = new $root.ics23.CompressedExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.value != null)\n                if (typeof object.value === \"string\")\n                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);\n                else if (object.value.length)\n                    message.value = object.value;\n            if (object.leaf != null) {\n                if (typeof object.leaf !== \"object\")\n                    throw TypeError(\".ics23.CompressedExistenceProof.leaf: object expected\");\n                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n            }\n            if (object.path) {\n                if (!Array.isArray(object.path))\n                    throw TypeError(\".ics23.CompressedExistenceProof.path: array expected\");\n                message.path = [];\n                for (var i = 0; i < object.path.length; ++i)\n                    message.path[i] = object.path[i] | 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.CompressedExistenceProof} message CompressedExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.path = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                if (options.bytes === String)\n                    object.value = \"\";\n                else {\n                    object.value = [];\n                    if (options.bytes !== Array)\n                        object.value = $util.newBuffer(object.value);\n                }\n                object.leaf = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n            if (message.path && message.path.length) {\n                object.path = [];\n                for (var j = 0; j < message.path.length; ++j)\n                    object.path[j] = message.path[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedExistenceProof;\n    })();\n\n    ics23.CompressedNonExistenceProof = (function() {\n\n        /**\n         * Properties of a CompressedNonExistenceProof.\n         * @memberof ics23\n         * @interface ICompressedNonExistenceProof\n         * @property {Uint8Array|null} [key] CompressedNonExistenceProof key\n         * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left\n         * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right\n         */\n\n        /**\n         * Constructs a new CompressedNonExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedNonExistenceProof.\n         * @implements ICompressedNonExistenceProof\n         * @constructor\n         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n         */\n        function CompressedNonExistenceProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedNonExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * CompressedNonExistenceProof left.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} left\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.left = null;\n\n        /**\n         * CompressedNonExistenceProof right.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} right\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.right = null;\n\n        /**\n         * Creates a new CompressedNonExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof instance\n         */\n        CompressedNonExistenceProof.create = function create(properties) {\n            return new CompressedNonExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedNonExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                $root.ics23.CompressedExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                $root.ics23.CompressedExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedNonExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedNonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedNonExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedNonExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedNonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedNonExistenceProof message.\n         * @function verify\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedNonExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.left != null && message.hasOwnProperty(\"left\")) {\n                var error = $root.ics23.CompressedExistenceProof.verify(message.left);\n                if (error)\n                    return \"left.\" + error;\n            }\n            if (message.right != null && message.hasOwnProperty(\"right\")) {\n                var error = $root.ics23.CompressedExistenceProof.verify(message.right);\n                if (error)\n                    return \"right.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedNonExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         */\n        CompressedNonExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedNonExistenceProof)\n                return object;\n            var message = new $root.ics23.CompressedNonExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.left != null) {\n                if (typeof object.left !== \"object\")\n                    throw TypeError(\".ics23.CompressedNonExistenceProof.left: object expected\");\n                message.left = $root.ics23.CompressedExistenceProof.fromObject(object.left);\n            }\n            if (object.right != null) {\n                if (typeof object.right !== \"object\")\n                    throw TypeError(\".ics23.CompressedNonExistenceProof.right: object expected\");\n                message.right = $root.ics23.CompressedExistenceProof.fromObject(object.right);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedNonExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.CompressedNonExistenceProof} message CompressedNonExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedNonExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                object.left = null;\n                object.right = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                object.left = $root.ics23.CompressedExistenceProof.toObject(message.left, options);\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                object.right = $root.ics23.CompressedExistenceProof.toObject(message.right, options);\n            return object;\n        };\n\n        /**\n         * Converts this CompressedNonExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedNonExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedNonExistenceProof;\n    })();\n\n    return ics23;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}