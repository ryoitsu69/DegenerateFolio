{"ast":null,"code":"import { objectSpread } from '@polkadot/util';\n/** @internal */\nfunction createStorageHasher(registry, hasher) {\n  // Blake2_128_Concat has been added at index 2, so we increment all the\n  // indexes greater than 2\n  if (hasher.toNumber() >= 2) {\n    return registry.createTypeUnsafe('StorageHasherV10', [hasher.toNumber() + 1]);\n  }\n  return registry.createTypeUnsafe('StorageHasherV10', [hasher]);\n}\n/** @internal */\nfunction createStorageType(registry, entryType) {\n  if (entryType.isMap) {\n    return [objectSpread({}, entryType.asMap, {\n      hasher: createStorageHasher(registry, entryType.asMap.hasher)\n    }), 1];\n  }\n  if (entryType.isDoubleMap) {\n    return [objectSpread({}, entryType.asDoubleMap, {\n      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),\n      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)\n    }), 2];\n  }\n  return [entryType.asPlain, 0];\n}\n/** @internal */\nfunction convertModule(registry, mod) {\n  const storage = mod.storage.unwrapOr(null);\n  return registry.createTypeUnsafe('ModuleMetadataV10', [objectSpread({}, mod, {\n    storage: storage ? objectSpread({}, storage, {\n      items: storage.items.map(item => objectSpread({}, item, {\n        type: registry.createTypeUnsafe('StorageEntryTypeV10', createStorageType(registry, item.type))\n      }))\n    }) : null\n  })]);\n}\n/** @internal */\nexport function toV10(registry, _ref) {\n  let {\n    modules\n  } = _ref;\n  return registry.createTypeUnsafe('MetadataV10', [{\n    modules: modules.map(mod => convertModule(registry, mod))\n  }]);\n}","map":{"version":3,"names":["objectSpread","createStorageHasher","registry","hasher","toNumber","createTypeUnsafe","createStorageType","entryType","isMap","asMap","isDoubleMap","asDoubleMap","key2Hasher","asPlain","convertModule","mod","storage","unwrapOr","items","map","item","type","toV10","_ref","modules"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/metadata/v9/toV10.js"],"sourcesContent":["import { objectSpread } from '@polkadot/util';\n/** @internal */\nfunction createStorageHasher(registry, hasher) {\n    // Blake2_128_Concat has been added at index 2, so we increment all the\n    // indexes greater than 2\n    if (hasher.toNumber() >= 2) {\n        return registry.createTypeUnsafe('StorageHasherV10', [hasher.toNumber() + 1]);\n    }\n    return registry.createTypeUnsafe('StorageHasherV10', [hasher]);\n}\n/** @internal */\nfunction createStorageType(registry, entryType) {\n    if (entryType.isMap) {\n        return [objectSpread({}, entryType.asMap, {\n                hasher: createStorageHasher(registry, entryType.asMap.hasher)\n            }), 1];\n    }\n    if (entryType.isDoubleMap) {\n        return [objectSpread({}, entryType.asDoubleMap, {\n                hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),\n                key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)\n            }), 2];\n    }\n    return [entryType.asPlain, 0];\n}\n/** @internal */\nfunction convertModule(registry, mod) {\n    const storage = mod.storage.unwrapOr(null);\n    return registry.createTypeUnsafe('ModuleMetadataV10', [objectSpread({}, mod, {\n            storage: storage\n                ? objectSpread({}, storage, {\n                    items: storage.items.map((item) => objectSpread({}, item, {\n                        type: registry.createTypeUnsafe('StorageEntryTypeV10', createStorageType(registry, item.type))\n                    }))\n                })\n                : null\n        })]);\n}\n/** @internal */\nexport function toV10(registry, { modules }) {\n    return registry.createTypeUnsafe('MetadataV10', [{\n            modules: modules.map((mod) => convertModule(registry, mod))\n        }]);\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAC7C;AACA,SAASC,mBAAmBA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EAC3C;EACA;EACA,IAAIA,MAAM,CAACC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE;IACxB,OAAOF,QAAQ,CAACG,gBAAgB,CAAC,kBAAkB,EAAE,CAACF,MAAM,CAACC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACjF;EACA,OAAOF,QAAQ,CAACG,gBAAgB,CAAC,kBAAkB,EAAE,CAACF,MAAM,CAAC,CAAC;AAClE;AACA;AACA,SAASG,iBAAiBA,CAACJ,QAAQ,EAAEK,SAAS,EAAE;EAC5C,IAAIA,SAAS,CAACC,KAAK,EAAE;IACjB,OAAO,CAACR,YAAY,CAAC,CAAC,CAAC,EAAEO,SAAS,CAACE,KAAK,EAAE;MAClCN,MAAM,EAAEF,mBAAmB,CAACC,QAAQ,EAAEK,SAAS,CAACE,KAAK,CAACN,MAAM;IAChE,CAAC,CAAC,EAAE,CAAC,CAAC;EACd;EACA,IAAII,SAAS,CAACG,WAAW,EAAE;IACvB,OAAO,CAACV,YAAY,CAAC,CAAC,CAAC,EAAEO,SAAS,CAACI,WAAW,EAAE;MACxCR,MAAM,EAAEF,mBAAmB,CAACC,QAAQ,EAAEK,SAAS,CAACI,WAAW,CAACR,MAAM,CAAC;MACnES,UAAU,EAAEX,mBAAmB,CAACC,QAAQ,EAAEK,SAAS,CAACI,WAAW,CAACC,UAAU;IAC9E,CAAC,CAAC,EAAE,CAAC,CAAC;EACd;EACA,OAAO,CAACL,SAAS,CAACM,OAAO,EAAE,CAAC,CAAC;AACjC;AACA;AACA,SAASC,aAAaA,CAACZ,QAAQ,EAAEa,GAAG,EAAE;EAClC,MAAMC,OAAO,GAAGD,GAAG,CAACC,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC;EAC1C,OAAOf,QAAQ,CAACG,gBAAgB,CAAC,mBAAmB,EAAE,CAACL,YAAY,CAAC,CAAC,CAAC,EAAEe,GAAG,EAAE;IACrEC,OAAO,EAAEA,OAAO,GACVhB,YAAY,CAAC,CAAC,CAAC,EAAEgB,OAAO,EAAE;MACxBE,KAAK,EAAEF,OAAO,CAACE,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKpB,YAAY,CAAC,CAAC,CAAC,EAAEoB,IAAI,EAAE;QACtDC,IAAI,EAAEnB,QAAQ,CAACG,gBAAgB,CAAC,qBAAqB,EAAEC,iBAAiB,CAACJ,QAAQ,EAAEkB,IAAI,CAACC,IAAI,CAAC;MACjG,CAAC,CAAC;IACN,CAAC,CAAC,GACA;EACV,CAAC,CAAC,CAAC,CAAC;AACZ;AACA;AACA,OAAO,SAASC,KAAKA,CAACpB,QAAQ,EAAAqB,IAAA,EAAe;EAAA,IAAb;IAAEC;EAAQ,CAAC,GAAAD,IAAA;EACvC,OAAOrB,QAAQ,CAACG,gBAAgB,CAAC,aAAa,EAAE,CAAC;IACzCmB,OAAO,EAAEA,OAAO,CAACL,GAAG,CAAEJ,GAAG,IAAKD,aAAa,CAACZ,QAAQ,EAAEa,GAAG,CAAC;EAC9D,CAAC,CAAC,CAAC;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}