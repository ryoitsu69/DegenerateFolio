{"ast":null,"code":"import { U8aFixed } from '@polkadot/types-codec';\nimport { BN, bnToU8a, isNumber, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nexport const CID_AURA = /*#__PURE__*/stringToU8a('aura');\nexport const CID_BABE = /*#__PURE__*/stringToU8a('BABE');\nexport const CID_GRPA = /*#__PURE__*/stringToU8a('FRNK');\nexport const CID_POW = /*#__PURE__*/stringToU8a('pow_');\nexport const CID_NMBS = /*#__PURE__*/stringToU8a('nmbs');\nfunction getAuraAuthor(registry, bytes, sessionValidators) {\n  return sessionValidators[registry.createTypeUnsafe('RawAuraPreDigest', [bytes.toU8a(true)]).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];\n}\nfunction getBabeAuthor(registry, bytes, sessionValidators) {\n  const digest = registry.createTypeUnsafe('RawBabePreDigestCompat', [bytes.toU8a(true)]);\n  return sessionValidators[digest.value.toNumber()];\n}\nfunction getBytesAsAuthor(registry, bytes) {\n  return registry.createTypeUnsafe('AccountId', [bytes]);\n}\n/**\n * @name GenericConsensusEngineId\n * @description\n * A 4-byte identifier identifying the engine\n */\nexport class GenericConsensusEngineId extends U8aFixed {\n  constructor(registry, value) {\n    super(registry, isNumber(value) ? bnToU8a(value, {\n      isLe: false\n    }) : value, 32);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description `true` is the engine matches pow\n   */\n  get isPow() {\n    return this.eq(CID_POW);\n  }\n  /**\n   * @description `true` is the engine matches nimbus\n   */\n  get isNimbus() {\n    return this.eq(CID_NMBS);\n  }\n  /**\n   * @description From the input bytes, decode into an author\n   */\n  extractAuthor(bytes, sessionValidators) {\n    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {\n      if (this.isAura) {\n        return getAuraAuthor(this.registry, bytes, sessionValidators);\n      } else if (this.isBabe) {\n        return getBabeAuthor(this.registry, bytes, sessionValidators);\n      }\n    }\n    // For pow & Nimbus, the bytes are the actual author\n    if (this.isPow || this.isNimbus) {\n      return getBytesAsAuthor(this.registry, bytes);\n    }\n    return undefined;\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  toHuman() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType() {\n    return 'ConsensusEngineId';\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n  toString() {\n    return this.isAscii ? u8aToString(this) : u8aToHex(this);\n  }\n}","map":{"version":3,"names":["U8aFixed","BN","bnToU8a","isNumber","stringToU8a","u8aToHex","u8aToString","CID_AURA","CID_BABE","CID_GRPA","CID_POW","CID_NMBS","getAuraAuthor","registry","bytes","sessionValidators","createTypeUnsafe","toU8a","slotNumber","mod","length","toNumber","getBabeAuthor","digest","value","getBytesAsAuthor","GenericConsensusEngineId","constructor","isLe","isAura","eq","isBabe","isGrandpa","isPow","isNimbus","extractAuthor","undefined","toHuman","toString","toRawType","isAscii"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types/generic/ConsensusEngineId.js"],"sourcesContent":["import { U8aFixed } from '@polkadot/types-codec';\nimport { BN, bnToU8a, isNumber, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nexport const CID_AURA = /*#__PURE__*/ stringToU8a('aura');\nexport const CID_BABE = /*#__PURE__*/ stringToU8a('BABE');\nexport const CID_GRPA = /*#__PURE__*/ stringToU8a('FRNK');\nexport const CID_POW = /*#__PURE__*/ stringToU8a('pow_');\nexport const CID_NMBS = /*#__PURE__*/ stringToU8a('nmbs');\nfunction getAuraAuthor(registry, bytes, sessionValidators) {\n    return sessionValidators[registry.createTypeUnsafe('RawAuraPreDigest', [bytes.toU8a(true)])\n        .slotNumber\n        .mod(new BN(sessionValidators.length))\n        .toNumber()];\n}\nfunction getBabeAuthor(registry, bytes, sessionValidators) {\n    const digest = registry.createTypeUnsafe('RawBabePreDigestCompat', [bytes.toU8a(true)]);\n    return sessionValidators[digest.value.toNumber()];\n}\nfunction getBytesAsAuthor(registry, bytes) {\n    return registry.createTypeUnsafe('AccountId', [bytes]);\n}\n/**\n * @name GenericConsensusEngineId\n * @description\n * A 4-byte identifier identifying the engine\n */\nexport class GenericConsensusEngineId extends U8aFixed {\n    constructor(registry, value) {\n        super(registry, isNumber(value)\n            ? bnToU8a(value, { isLe: false })\n            : value, 32);\n    }\n    /**\n     * @description `true` if the engine matches aura\n     */\n    get isAura() {\n        return this.eq(CID_AURA);\n    }\n    /**\n     * @description `true` is the engine matches babe\n     */\n    get isBabe() {\n        return this.eq(CID_BABE);\n    }\n    /**\n     * @description `true` is the engine matches grandpa\n     */\n    get isGrandpa() {\n        return this.eq(CID_GRPA);\n    }\n    /**\n     * @description `true` is the engine matches pow\n     */\n    get isPow() {\n        return this.eq(CID_POW);\n    }\n    /**\n     * @description `true` is the engine matches nimbus\n     */\n    get isNimbus() {\n        return this.eq(CID_NMBS);\n    }\n    /**\n     * @description From the input bytes, decode into an author\n     */\n    extractAuthor(bytes, sessionValidators) {\n        if (sessionValidators?.length) {\n            if (this.isAura) {\n                return getAuraAuthor(this.registry, bytes, sessionValidators);\n            }\n            else if (this.isBabe) {\n                return getBabeAuthor(this.registry, bytes, sessionValidators);\n            }\n        }\n        // For pow & Nimbus, the bytes are the actual author\n        if (this.isPow || this.isNimbus) {\n            return getBytesAsAuthor(this.registry, bytes);\n        }\n        return undefined;\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    toHuman() {\n        return this.toString();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    toRawType() {\n        return 'ConsensusEngineId';\n    }\n    /**\n     * @description Override the default toString to return a 4-byte string\n     */\n    toString() {\n        return this.isAscii\n            ? u8aToString(this)\n            : u8aToHex(this);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}