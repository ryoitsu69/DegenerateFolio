{"ast":null,"code":"import WorkerInstance from \"../../_virtual/checkImageBitmap.worker.mjs\";\nimport WorkerInstance$1 from \"../../_virtual/loadImageBitmap.worker.mjs\";\nlet UUID = 0,\n  MAX_WORKERS;\nclass WorkerManagerClass {\n  constructor() {\n    this._initialized = !1, this._createdWorkers = 0, this.workerPool = [], this.queue = [], this.resolveHash = {};\n  }\n  isImageBitmapSupported() {\n    return this._isImageBitmapSupported !== void 0 ? this._isImageBitmapSupported : (this._isImageBitmapSupported = new Promise(resolve => {\n      const {\n        worker\n      } = new WorkerInstance();\n      worker.addEventListener(\"message\", event => {\n        worker.terminate(), WorkerInstance.revokeObjectURL(), resolve(event.data);\n      });\n    }), this._isImageBitmapSupported);\n  }\n  loadImageBitmap(src) {\n    return this._run(\"loadImageBitmap\", [src]);\n  }\n  async _initWorkers() {\n    this._initialized || (this._initialized = !0);\n  }\n  getWorker() {\n    MAX_WORKERS === void 0 && (MAX_WORKERS = navigator.hardwareConcurrency || 4);\n    let worker = this.workerPool.pop();\n    return !worker && this._createdWorkers < MAX_WORKERS && (this._createdWorkers++, worker = new WorkerInstance$1().worker, worker.addEventListener(\"message\", event => {\n      this.complete(event.data), this.returnWorker(event.target), this.next();\n    })), worker;\n  }\n  returnWorker(worker) {\n    this.workerPool.push(worker);\n  }\n  complete(data) {\n    data.error !== void 0 ? this.resolveHash[data.uuid].reject(data.error) : this.resolveHash[data.uuid].resolve(data.data), this.resolveHash[data.uuid] = null;\n  }\n  async _run(id, args) {\n    await this._initWorkers();\n    const promise = new Promise((resolve, reject) => {\n      this.queue.push({\n        id,\n        arguments: args,\n        resolve,\n        reject\n      });\n    });\n    return this.next(), promise;\n  }\n  next() {\n    if (!this.queue.length) return;\n    const worker = this.getWorker();\n    if (!worker) return;\n    const toDo = this.queue.pop(),\n      id = toDo.id;\n    this.resolveHash[UUID] = {\n      resolve: toDo.resolve,\n      reject: toDo.reject\n    }, worker.postMessage({\n      data: toDo.arguments,\n      uuid: UUID++,\n      id\n    });\n  }\n}\nconst WorkerManager = new WorkerManagerClass();\nexport { WorkerManager };","map":{"version":3,"names":["UUID","MAX_WORKERS","WorkerManagerClass","constructor","_initialized","_createdWorkers","workerPool","queue","resolveHash","isImageBitmapSupported","_isImageBitmapSupported","Promise","resolve","worker","WorkerInstance","addEventListener","event","terminate","revokeObjectURL","data","loadImageBitmap","src","_run","_initWorkers","getWorker","navigator","hardwareConcurrency","pop","WorkerInstance$1","complete","returnWorker","target","next","push","error","uuid","reject","id","args","promise","arguments","length","toDo","postMessage","WorkerManager"],"sources":["/home/ryoitsu/node_modules/@pixi/assets/src/loader/parsers/WorkerManager.ts"],"sourcesContent":["import CheckImageBitmapWorker from 'worker:./workers/checkImageBitmap.worker.ts';\nimport LoadImageBitmapWorker from 'worker:./workers/loadImageBitmap.worker.ts';\n\nlet UUID = 0;\nlet MAX_WORKERS: number;\n\ntype LoadImageBitmapResult = {\n    data?: ImageBitmap,\n    error?: Error,\n    uuid: number,\n    id: string,\n};\n\nclass WorkerManagerClass\n{\n    public worker: Worker;\n    private resolveHash: {\n        [key: string]: {\n            resolve: (...param: any[]) => void;\n            reject: (...param: any[]) => void;\n        }\n    };\n    private readonly workerPool: Worker[];\n    private readonly queue: {\n        id: string;\n        arguments: any[];\n        resolve: (...param: any[]) => void;\n        reject: (...param: any[]) => void;\n    }[];\n    private _initialized = false;\n    private _createdWorkers = 0;\n    private _isImageBitmapSupported?: Promise<boolean>;\n\n    constructor()\n    {\n        this.workerPool = [];\n        this.queue = [];\n\n        this.resolveHash = {};\n    }\n\n    public isImageBitmapSupported(): Promise<boolean>\n    {\n        if (this._isImageBitmapSupported !== undefined) return this._isImageBitmapSupported;\n\n        this._isImageBitmapSupported = new Promise((resolve) =>\n        {\n            const { worker } = new CheckImageBitmapWorker();\n\n            worker.addEventListener('message', (event: MessageEvent<boolean>) =>\n            {\n                worker.terminate();\n                CheckImageBitmapWorker.revokeObjectURL();\n                resolve(event.data);\n            });\n        });\n\n        return this._isImageBitmapSupported;\n    }\n\n    public loadImageBitmap(src: string): Promise<ImageBitmap>\n    {\n        return this._run('loadImageBitmap', [src]) as Promise<ImageBitmap>;\n    }\n\n    private async _initWorkers()\n    {\n        if (this._initialized) return;\n\n        this._initialized = true;\n    }\n\n    private getWorker(): Worker\n    {\n        if (MAX_WORKERS === undefined)\n        {\n            MAX_WORKERS = navigator.hardwareConcurrency || 4;\n        }\n        let worker = this.workerPool.pop();\n\n        if (!worker && this._createdWorkers < MAX_WORKERS)\n        {\n            // only create as many as MAX_WORKERS allows..\n            this._createdWorkers++;\n            worker = (new LoadImageBitmapWorker()).worker;\n\n            worker.addEventListener('message', (event: MessageEvent) =>\n            {\n                this.complete(event.data);\n\n                this.returnWorker(event.target as Worker);\n                this.next();\n            });\n        }\n\n        return worker;\n    }\n\n    private returnWorker(worker: Worker)\n    {\n        this.workerPool.push(worker);\n    }\n\n    private complete(data: LoadImageBitmapResult): void\n    {\n        if (data.error !== undefined)\n        {\n            this.resolveHash[data.uuid].reject(data.error);\n        }\n        else\n        {\n            this.resolveHash[data.uuid].resolve(data.data);\n        }\n\n        this.resolveHash[data.uuid] = null;\n    }\n\n    private async _run(id: string, args: any[]): Promise<any>\n    {\n        await this._initWorkers();\n        // push into the queue...\n\n        const promise = new Promise((resolve, reject) =>\n        {\n            this.queue.push({ id, arguments: args, resolve, reject });\n        });\n\n        this.next();\n\n        return promise;\n    }\n\n    private next(): void\n    {\n        // nothing to do\n        if (!this.queue.length) return;\n\n        const worker = this.getWorker();\n\n        // no workers available...\n        if (!worker)\n        {\n            return;\n        }\n\n        const toDo = this.queue.pop();\n\n        const id = toDo.id;\n\n        this.resolveHash[UUID] = { resolve: toDo.resolve, reject: toDo.reject };\n\n        worker.postMessage({\n            data: toDo.arguments,\n            uuid: UUID++,\n            id,\n        });\n    }\n}\n\nconst WorkerManager = new WorkerManagerClass();\n\nexport {\n    WorkerManager,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}