{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _8n = BigInt(8);\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = {\n  zip215: true\n};\nfunction validateOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(curve, {\n    hash: 'function',\n    a: 'bigint',\n    d: 'bigint',\n    randomBytes: 'function'\n  }, {\n    adjustScalarBytes: 'function',\n    domain: 'function',\n    uvRatio: 'function',\n    mapToCurve: 'function'\n  });\n  // Set defaults\n  return Object.freeze({\n    ...opts\n  });\n}\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor\n  } = CURVE;\n  const MASK = _2n << BigInt(nByteLength * 8) - _1n;\n  const modP = Fp.create; // Function overrides\n  // sqrt(u/v)\n  const uvRatio = CURVE.uvRatio || ((u, v) => {\n    try {\n      return {\n        isValid: true,\n        value: Fp.sqrt(u * Fp.inv(v))\n      };\n    } catch (e) {\n      return {\n        isValid: false,\n        value: _0n\n      };\n    }\n  });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || (bytes => bytes); // NOOP\n  const domain = CURVE.domain || ((data, ctx, phflag) => {\n    if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n    return data;\n  }); // NOOP\n  const inBig = n => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n, max) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = n => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n, max) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map();\n  function isPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point {\n    constructor(ex, ey, ez, et) {\n      this.ex = ex;\n      this.ey = ey;\n      this.ez = ez;\n      this.et = et;\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static fromAffine(p) {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const {\n        x,\n        y\n      } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity() {\n      const {\n        a,\n        d\n      } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const {\n        ex: X,\n        ey: Y,\n        ez: Z,\n        et: T\n      } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n    // Compare one point to another.\n    equals(other) {\n      isPoint(other);\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2\n      } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    negate() {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double() {\n      const {\n        a\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1\n      } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other) {\n      isPoint(other);\n      const {\n        a,\n        d\n      } = CURVE;\n      const {\n        ex: X1,\n        ey: Y1,\n        ez: Z1,\n        et: T1\n      } = this;\n      const {\n        ex: X2,\n        ey: Y2,\n        ez: Z2,\n        et: T2\n      } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n    // Constant-time multiplication.\n    multiply(scalar) {\n      const {\n        p,\n        f\n      } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar) {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder() {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree() {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz) {\n      const {\n        ex: x,\n        ey: y,\n        ez: z\n      } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : Fp.inv(z); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return {\n        x: _0n,\n        y: _1n\n      };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return {\n        x: ax,\n        y: ay\n      };\n    }\n    clearCofactor() {\n      const {\n        h: cofactor\n      } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex, zip215 = false) {\n      const {\n        d,\n        a\n      } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let {\n        isValid,\n        value: x\n      } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({\n        x,\n        y\n      });\n    }\n    static fromPrivateKey(privKey) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes() {\n      const {\n        x,\n        y\n      } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex() {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n  Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n  const {\n    BASE: G,\n    ZERO: I\n  } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n  function modN(a) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash) {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return {\n      head,\n      prefix,\n      scalar,\n      point,\n      pointBytes\n    };\n  }\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey) {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context = new Uint8Array(), ...msgs) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg, privKey, options = {}) {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const {\n      prefix,\n      scalar,\n      pointBytes\n    } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n  const verifyOpts = VERIFY_DEFAULT;\n  function verify(sig, msg, publicKey, options = verifyOpts) {\n    const {\n      context,\n      zip215\n    } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: () => randomBytes(Fp.BYTES),\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE) {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    }\n  };\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils\n  };\n}","map":{"version":3,"names":["mod","ut","ensureBytes","wNAF","validateBasic","_0n","BigInt","_1n","_2n","_8n","VERIFY_DEFAULT","zip215","validateOpts","curve","opts","validateObject","hash","a","d","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","Object","freeze","twistedEdwards","curveDef","CURVE","Fp","n","CURVE_ORDER","prehash","cHash","nByteLength","h","cofactor","MASK","modP","create","u","v","isValid","value","sqrt","inv","e","bytes","data","ctx","phflag","length","Error","inBig","inRange","max","in0MaskRange","assertInRange","assertGE0","pointPrecomputes","Map","isPoint","other","Point","constructor","ex","ey","ez","et","x","toAffine","y","fromAffine","p","normalizeZ","points","toInv","invertBatch","map","i","_setWindowSize","windowSize","_WINDOW_SIZE","delete","assertValidity","is0","X","Y","Z","T","X2","Y2","Z2","Z4","aX2","left","right","XY","ZT","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","wnaf","wNAFCached","multiply","scalar","f","multiplyUnsafe","I","unsafeLadder","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","hex","len","BYTES","normed","slice","lastByte","bytesToNumberLE","ORDER","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","numberToBytesLE","toHex","bytesToHex","BASE","Gx","Gy","modN","modN_LE","key","hashed","head","prefix","pointBytes","getPublicKey","hashDomainToScalar","context","Uint8Array","msgs","msg","concatBytes","sign","options","r","R","k","s","res","verifyOpts","verify","sig","publicKey","SB","error","RkA","utils","randomPrivateKey","precompute","ExtendedPoint"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/node_modules/@noble/curves/src/abstract/edwards.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}