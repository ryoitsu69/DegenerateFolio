{"ast":null,"code":"function determineCrossOrigin(url, loc = globalThis.location) {\n  if (url.startsWith(\"data:\")) return \"\";\n  loc = loc || globalThis.location;\n  const parsedUrl = new URL(url, document.baseURI);\n  return parsedUrl.hostname !== loc.hostname || parsedUrl.port !== loc.port || parsedUrl.protocol !== loc.protocol ? \"anonymous\" : \"\";\n}\nexport { determineCrossOrigin };","map":{"version":3,"names":["determineCrossOrigin","url","loc","globalThis","location","startsWith","parsedUrl","URL","document","baseURI","hostname","port","protocol"],"sources":["/home/ryoitsu/node_modules/@pixi/utils/src/network/determineCrossOrigin.ts"],"sourcesContent":["/**\n * Sets the `crossOrigin` property for this resource based on if the url\n * for this resource is cross-origin. If crossOrigin was manually set, this\n * function does nothing.\n * Nipped from the resource loader!\n * @ignore\n * @param {string} url - The url to test.\n * @param {object} [loc=window.location] - The location object to test against.\n * @returns {string} The crossOrigin value to use (or empty string for none).\n */\nexport function determineCrossOrigin(url: string, loc: Location = globalThis.location): string\n{\n    // data: and javascript: urls are considered same-origin\n    if (url.startsWith('data:'))\n    {\n        return '';\n    }\n\n    // default is window.location\n    loc = loc || globalThis.location;\n\n    const parsedUrl = new URL(url, document.baseURI);\n\n    // if cross origin\n    if (parsedUrl.hostname !== loc.hostname || parsedUrl.port !== loc.port || parsedUrl.protocol !== loc.protocol)\n    {\n        return 'anonymous';\n    }\n\n    return '';\n}\n"],"mappings":"AAUO,SAASA,qBAAqBC,GAAA,EAAaC,GAAA,GAAgBC,UAAA,CAAWC,QAAA,EAC7E;EAEQ,IAAAH,GAAA,CAAII,UAAA,CAAW,OAAO,GAEf;EAIXH,GAAA,GAAMA,GAAA,IAAOC,UAAA,CAAWC,QAAA;EAExB,MAAME,SAAA,GAAY,IAAIC,GAAA,CAAIN,GAAA,EAAKO,QAAA,CAASC,OAAO;EAG/C,OAAIH,SAAA,CAAUI,QAAA,KAAaR,GAAA,CAAIQ,QAAA,IAAYJ,SAAA,CAAUK,IAAA,KAAST,GAAA,CAAIS,IAAA,IAAQL,SAAA,CAAUM,QAAA,KAAaV,GAAA,CAAIU,QAAA,GAE1F,cAGJ;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}