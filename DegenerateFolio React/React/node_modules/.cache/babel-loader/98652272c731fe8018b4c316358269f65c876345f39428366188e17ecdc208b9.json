{"ast":null,"code":"import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._gpuText = /* @__PURE__ */Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const newKey = htmlText._getKey();\n    if (gpuText.textureNeedsUploading) {\n      gpuText.textureNeedsUploading = false;\n      return true;\n    }\n    if (gpuText.currentKey !== newKey) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n  }\n  updateRenderable(htmlText) {\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (htmlText._didTextUpdate) {\n      this._updateText(htmlText);\n    }\n    batchableSprite.batcher.updateElement(batchableSprite);\n  }\n  destroyRenderable(htmlText) {\n    this._destroyRenderableById(htmlText.uid);\n  }\n  _destroyRenderableById(htmlTextUid) {\n    const gpuText = this._gpuText[htmlTextUid];\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    BigPool.return(gpuText.batchableSprite);\n    this._gpuText[htmlTextUid] = null;\n  }\n  _updateText(htmlText) {\n    const newKey = htmlText._getKey();\n    const gpuText = this._getGpuText(htmlText);\n    const batchableSprite = gpuText.batchableSprite;\n    if (gpuText.currentKey !== newKey) {\n      this._updateGpuText(htmlText).catch(e => {\n        console.error(e);\n      });\n    }\n    htmlText._didTextUpdate = false;\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const gpuText = this._getGpuText(htmlText);\n    if (gpuText.generatingTexture) return;\n    const newKey = htmlText._getKey();\n    this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n    gpuText.generatingTexture = true;\n    gpuText.currentKey = newKey;\n    const resolution = htmlText.resolution ?? this._renderer.resolution;\n    const texture = await this._renderer.htmlText.getManagedTexture(htmlText.text, resolution, htmlText._style, htmlText._getKey());\n    const batchableSprite = gpuText.batchableSprite;\n    batchableSprite.texture = gpuText.texture = texture;\n    gpuText.generatingTexture = false;\n    gpuText.textureNeedsUploading = true;\n    htmlText.onViewUpdate();\n    const padding = htmlText._style.padding;\n    updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n  }\n  _getGpuText(htmlText) {\n    return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const gpuTextData = {\n      texture: Texture.EMPTY,\n      currentKey: \"--\",\n      batchableSprite: BigPool.get(BatchableSprite),\n      textureNeedsUploading: false,\n      generatingTexture: false\n    };\n    const batchableSprite = gpuTextData.batchableSprite;\n    batchableSprite.renderable = htmlText;\n    batchableSprite.texture = Texture.EMPTY;\n    batchableSprite.bounds = {\n      minX: 0,\n      maxX: 1,\n      minY: 0,\n      maxY: 0\n    };\n    batchableSprite.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    this._gpuText[htmlText.uid] = gpuTextData;\n    htmlText.on(\"destroyed\", () => {\n      this.destroyRenderable(htmlText);\n    });\n    return gpuTextData;\n  }\n  destroy() {\n    for (const i in this._gpuText) {\n      this._destroyRenderableById(i);\n    }\n    this._gpuText = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"htmlText\"\n};\nexport { HTMLTextPipe };","map":{"version":3,"names":["HTMLTextPipe","constructor","renderer","_gpuText","Object","create","_renderer","validateRenderable","htmlText","gpuText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","addRenderable","batchableSprite","_didTextUpdate","_updateText","renderPipes","batch","addToBatch","updateRenderable","batcher","updateElement","destroyRenderable","_destroyRenderableById","uid","htmlTextUid","decreaseReferenceCount","BigPool","return","_updateGpuText","catch","e","console","error","padding","_style","updateQuadBounds","bounds","_anchor","texture","generatingTexture","resolution","getManagedTexture","text","onViewUpdate","initGpuText","gpuTextData","Texture","EMPTY","get","BatchableSprite","renderable","minX","maxX","minY","maxY","roundPixels","_roundPixels","on","destroy","i","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HtmlTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        this._gpuText[htmlText.uid] = gpuTextData;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', () =>\n        {\n            this.destroyRenderable(htmlText);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}