{"ast":null,"code":"import { extensions, ExtensionType } from '../extensions/Extensions.mjs';\n\"use strict\";\nconst environments = [];\nextensions.handleByNamedList(ExtensionType.Environment, environments);\nasync function autoDetectEnvironment(manageImports) {\n  if (!manageImports) return;\n  for (let i = 0; i < environments.length; i++) {\n    const env = environments[i];\n    if (env.value.test()) {\n      await env.value.load();\n      return;\n    }\n  }\n}\nexport { autoDetectEnvironment };","map":{"version":3,"names":["environments","extensions","handleByNamedList","ExtensionType","Environment","autoDetectEnvironment","manageImports","i","length","env","value","test","load"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/environment/autoDetectEnvironment.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../extensions/Extensions';\n\nconst environments: { name: string; value: { test: () => boolean; load: () => Promise<boolean> } }[] = [];\n\nextensions.handleByNamedList(ExtensionType.Environment, environments);\n\n/**\n * Automatically detects the environment and loads the appropriate extensions.\n * @param manageImports - whether to add the default imports to the bundle\n * @memberof environment\n */\nexport async function autoDetectEnvironment(manageImports: boolean): Promise<void>\n{\n    if (!manageImports) return;\n\n    for (let i = 0; i < environments.length; i++)\n    {\n        const env = environments[i];\n\n        if (env.value.test())\n        {\n            await env.value.load();\n\n            return;\n        }\n    }\n}\n"],"mappings":";;AAEA,MAAMA,YAAA,GAAiG,EAAC;AAExGC,UAAW,CAAAC,iBAAA,CAAkBC,aAAc,CAAAC,WAAA,EAAaJ,YAAY;AAOpE,eAAsBK,sBAAsBC,aAC5C;EACI,IAAI,CAACA,aAAA,EAAe;EAEpB,SAASC,CAAI,MAAGA,CAAI,GAAAP,YAAA,CAAaQ,MAAA,EAAQD,CACzC;IACU,MAAAE,GAAA,GAAMT,YAAA,CAAaO,CAAC;IAEtB,IAAAE,GAAA,CAAIC,KAAM,CAAAC,IAAA,EACd;MACU,MAAAF,GAAA,CAAIC,KAAA,CAAME,IAAK;MAErB;IAAA;EACJ;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}