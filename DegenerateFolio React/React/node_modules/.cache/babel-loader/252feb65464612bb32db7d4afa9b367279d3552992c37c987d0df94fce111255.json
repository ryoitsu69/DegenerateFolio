{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  PrimitiveType,\n  NonPrimitiveType,\n  RemoteType\n} = require('./protocolType');\nconst TYPE_CONSTANT = 'type';\nconst VALUE_CONSTANT = 'value';\nconst RemoteReferenceType = {\n  HANDLE: 'handle',\n  SHARED_ID: 'sharedId'\n};\nclass LocalValue {\n  constructor(type, value = null) {\n    if (type === PrimitiveType.UNDEFINED || type === PrimitiveType.NULL) {\n      this.type = type;\n    } else {\n      this.type = type;\n      this.value = value;\n    }\n  }\n  static createStringValue(value) {\n    return new LocalValue(PrimitiveType.STRING, value);\n  }\n  static createNumberValue(value) {\n    return new LocalValue(PrimitiveType.NUMBER, value);\n  }\n  static createSpecialNumberValue(value) {\n    return new LocalValue(PrimitiveType.SPECIAL_NUMBER, value);\n  }\n  static createUndefinedValue() {\n    return new LocalValue(PrimitiveType.UNDEFINED);\n  }\n  static createNullValue() {\n    return new LocalValue(PrimitiveType.NULL);\n  }\n  static createBooleanValue(value) {\n    return new LocalValue(PrimitiveType.BOOLEAN, value);\n  }\n  static createBigIntValue(value) {\n    return new LocalValue(PrimitiveType.BIGINT, value);\n  }\n  static createArrayValue(value) {\n    return new LocalValue(NonPrimitiveType.ARRAY, value);\n  }\n  static createDateValue(value) {\n    return new LocalValue(NonPrimitiveType.DATE, value);\n  }\n  static createMapValue(map) {\n    let value = [];\n    Object.entries(map).forEach(entry => {\n      value.push(entry);\n    });\n    return new LocalValue(NonPrimitiveType.MAP, value);\n  }\n  static createObjectValue(map) {\n    let value = [];\n    Object.entries(map).forEach(entry => {\n      value.push(entry);\n    });\n    return new LocalValue(NonPrimitiveType.OBJECT, value);\n  }\n  static createRegularExpressionValue(value) {\n    return new LocalValue(NonPrimitiveType.REGULAR_EXPRESSION, value);\n  }\n  static createSetValue(value) {\n    return new LocalValue(NonPrimitiveType.SET, value);\n  }\n  static createChannelValue(value) {\n    return new LocalValue(NonPrimitiveType.CHANNEL, value);\n  }\n  toJson() {\n    let toReturn = {};\n    toReturn[TYPE_CONSTANT] = this.type;\n    if (!(this.type === PrimitiveType.NULL || this.type === PrimitiveType.UNDEFINED)) {\n      toReturn[VALUE_CONSTANT] = this.value;\n    }\n    return toReturn;\n  }\n}\nclass RemoteValue {\n  constructor(remoteValue) {\n    this.type = null;\n    this.handle = null;\n    this.internalId = null;\n    this.value = null;\n    this.sharedId = null;\n    if ('type' in remoteValue) {\n      const typeString = remoteValue['type'];\n      if (PrimitiveType.findByName(typeString) != null) {\n        this.type = PrimitiveType.findByName(typeString);\n      } else if (NonPrimitiveType.findByName(typeString) != null) {\n        this.type = NonPrimitiveType.findByName(typeString);\n      } else {\n        this.type = RemoteType.findByName(typeString);\n      }\n    }\n    if ('handle' in remoteValue) {\n      this.handle = remoteValue['handle'];\n    }\n    if ('internalId' in remoteValue) {\n      this.internalId = remoteValue['internalId'];\n    }\n    if ('value' in remoteValue) {\n      this.value = remoteValue['value'];\n    }\n    if ('sharedId' in remoteValue) {\n      this.sharedId = remoteValue['sharedId'];\n    }\n    if (this.value != null) {\n      this.value = this.deserializeValue(this.value, this.type);\n    }\n  }\n  deserializeValue(value, type) {\n    if ([NonPrimitiveType.MAP, NonPrimitiveType.OBJECT].includes(type)) {\n      return Object.fromEntries(value);\n    } else if (type === NonPrimitiveType.REGULAR_EXPRESSION) {\n      return new RegExpValue(value.pattern, value.flags);\n    }\n    return value;\n  }\n}\nclass ReferenceValue {\n  #handle;\n  #sharedId;\n  constructor(handle, sharedId) {\n    if (handle === RemoteReferenceType.HANDLE) {\n      this.#handle = sharedId;\n    } else if (handle === RemoteReferenceType.SHARED_ID) {\n      this.#sharedId = sharedId;\n    } else {\n      this.#handle = handle;\n      this.#sharedId = sharedId;\n    }\n  }\n  asMap() {\n    const toReturn = {};\n    if (this.#handle != null) {\n      toReturn[RemoteReferenceType.HANDLE] = this.#handle;\n    }\n    if (this.#sharedId != null) {\n      toReturn[RemoteReferenceType.SHARED_ID] = this.#sharedId;\n    }\n    return toReturn;\n  }\n}\nclass RegExpValue {\n  constructor(pattern, flags = null) {\n    this.pattern = pattern;\n    this.flags = flags;\n  }\n}\nclass SerializationOptions {\n  constructor(maxDomDepth = 0, maxObjectDepth = null, includeShadowTree = 'none') {\n    this._maxDomDepth = maxDomDepth;\n    this._maxObjectDepth = maxObjectDepth;\n    if (['none', 'open', 'all'].includes(includeShadowTree)) {\n      throw Error(`Valid types are 'none', 'open', and 'all'. Received: ${includeShadowTree}`);\n    }\n    this._includeShadowTree = includeShadowTree;\n  }\n}\nclass ChannelValue {\n  constructor(channel, options = undefined, resultOwnership = undefined) {\n    this.channel = channel;\n    if (options !== undefined) {\n      if (options instanceof SerializationOptions) {\n        this.options = options;\n      } else {\n        throw Error(`Pass in SerializationOptions object. Received: ${options} `);\n      }\n    }\n    if (resultOwnership != undefined) {\n      if (['root', 'none'].includes(resultOwnership)) {\n        this.resultOwnership = resultOwnership;\n      } else {\n        throw Error(`Valid types are 'root' and 'none. Received: ${resultOwnership}`);\n      }\n    }\n  }\n}\nmodule.exports = {\n  ChannelValue,\n  LocalValue,\n  RemoteValue,\n  ReferenceValue,\n  RemoteReferenceType,\n  RegExpValue,\n  SerializationOptions\n};","map":{"version":3,"names":["PrimitiveType","NonPrimitiveType","RemoteType","require","TYPE_CONSTANT","VALUE_CONSTANT","RemoteReferenceType","HANDLE","SHARED_ID","LocalValue","constructor","type","value","UNDEFINED","NULL","createStringValue","STRING","createNumberValue","NUMBER","createSpecialNumberValue","SPECIAL_NUMBER","createUndefinedValue","createNullValue","createBooleanValue","BOOLEAN","createBigIntValue","BIGINT","createArrayValue","ARRAY","createDateValue","DATE","createMapValue","map","Object","entries","forEach","entry","push","MAP","createObjectValue","OBJECT","createRegularExpressionValue","REGULAR_EXPRESSION","createSetValue","SET","createChannelValue","CHANNEL","toJson","toReturn","RemoteValue","remoteValue","handle","internalId","sharedId","typeString","findByName","deserializeValue","includes","fromEntries","RegExpValue","pattern","flags","ReferenceValue","asMap","SerializationOptions","maxDomDepth","maxObjectDepth","includeShadowTree","_maxDomDepth","_maxObjectDepth","Error","_includeShadowTree","ChannelValue","channel","options","undefined","resultOwnership","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/bidi/protocolValue.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { PrimitiveType, NonPrimitiveType, RemoteType } = require('./protocolType')\n\nconst TYPE_CONSTANT = 'type'\nconst VALUE_CONSTANT = 'value'\nconst RemoteReferenceType = {\n  HANDLE: 'handle',\n  SHARED_ID: 'sharedId',\n}\n\nclass LocalValue {\n  constructor(type, value = null) {\n    if (type === PrimitiveType.UNDEFINED || type === PrimitiveType.NULL) {\n      this.type = type\n    } else {\n      this.type = type\n      this.value = value\n    }\n  }\n\n  static createStringValue(value) {\n    return new LocalValue(PrimitiveType.STRING, value)\n  }\n\n  static createNumberValue(value) {\n    return new LocalValue(PrimitiveType.NUMBER, value)\n  }\n\n  static createSpecialNumberValue(value) {\n    return new LocalValue(PrimitiveType.SPECIAL_NUMBER, value)\n  }\n\n  static createUndefinedValue() {\n    return new LocalValue(PrimitiveType.UNDEFINED)\n  }\n\n  static createNullValue() {\n    return new LocalValue(PrimitiveType.NULL)\n  }\n\n  static createBooleanValue(value) {\n    return new LocalValue(PrimitiveType.BOOLEAN, value)\n  }\n\n  static createBigIntValue(value) {\n    return new LocalValue(PrimitiveType.BIGINT, value)\n  }\n\n  static createArrayValue(value) {\n    return new LocalValue(NonPrimitiveType.ARRAY, value)\n  }\n\n  static createDateValue(value) {\n    return new LocalValue(NonPrimitiveType.DATE, value)\n  }\n\n  static createMapValue(map) {\n    let value = []\n    Object.entries(map).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.MAP, value)\n  }\n\n  static createObjectValue(map) {\n    let value = []\n    Object.entries(map).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.OBJECT, value)\n  }\n\n  static createRegularExpressionValue(value) {\n    return new LocalValue(NonPrimitiveType.REGULAR_EXPRESSION, value)\n  }\n\n  static createSetValue(value) {\n    return new LocalValue(NonPrimitiveType.SET, value)\n  }\n\n  static createChannelValue(value) {\n    return new LocalValue(NonPrimitiveType.CHANNEL, value)\n  }\n\n  toJson() {\n    let toReturn = {}\n    toReturn[TYPE_CONSTANT] = this.type\n\n    if (!(this.type === PrimitiveType.NULL || this.type === PrimitiveType.UNDEFINED)) {\n      toReturn[VALUE_CONSTANT] = this.value\n    }\n    return toReturn\n  }\n}\n\nclass RemoteValue {\n  constructor(remoteValue) {\n    this.type = null\n    this.handle = null\n    this.internalId = null\n    this.value = null\n    this.sharedId = null\n\n    if ('type' in remoteValue) {\n      const typeString = remoteValue['type']\n      if (PrimitiveType.findByName(typeString) != null) {\n        this.type = PrimitiveType.findByName(typeString)\n      } else if (NonPrimitiveType.findByName(typeString) != null) {\n        this.type = NonPrimitiveType.findByName(typeString)\n      } else {\n        this.type = RemoteType.findByName(typeString)\n      }\n    }\n\n    if ('handle' in remoteValue) {\n      this.handle = remoteValue['handle']\n    }\n\n    if ('internalId' in remoteValue) {\n      this.internalId = remoteValue['internalId']\n    }\n\n    if ('value' in remoteValue) {\n      this.value = remoteValue['value']\n    }\n\n    if ('sharedId' in remoteValue) {\n      this.sharedId = remoteValue['sharedId']\n    }\n\n    if (this.value != null) {\n      this.value = this.deserializeValue(this.value, this.type)\n    }\n  }\n\n  deserializeValue(value, type) {\n    if ([NonPrimitiveType.MAP, NonPrimitiveType.OBJECT].includes(type)) {\n      return Object.fromEntries(value)\n    } else if (type === NonPrimitiveType.REGULAR_EXPRESSION) {\n      return new RegExpValue(value.pattern, value.flags)\n    }\n    return value\n  }\n}\n\nclass ReferenceValue {\n  #handle\n  #sharedId\n  constructor(handle, sharedId) {\n    if (handle === RemoteReferenceType.HANDLE) {\n      this.#handle = sharedId\n    } else if (handle === RemoteReferenceType.SHARED_ID) {\n      this.#sharedId = sharedId\n    } else {\n      this.#handle = handle\n      this.#sharedId = sharedId\n    }\n  }\n\n  asMap() {\n    const toReturn = {}\n    if (this.#handle != null) {\n      toReturn[RemoteReferenceType.HANDLE] = this.#handle\n    }\n\n    if (this.#sharedId != null) {\n      toReturn[RemoteReferenceType.SHARED_ID] = this.#sharedId\n    }\n\n    return toReturn\n  }\n}\n\nclass RegExpValue {\n  constructor(pattern, flags = null) {\n    this.pattern = pattern\n    this.flags = flags\n  }\n}\n\nclass SerializationOptions {\n  constructor(maxDomDepth = 0, maxObjectDepth = null, includeShadowTree = 'none') {\n    this._maxDomDepth = maxDomDepth\n    this._maxObjectDepth = maxObjectDepth\n\n    if (['none', 'open', 'all'].includes(includeShadowTree)) {\n      throw Error(`Valid types are 'none', 'open', and 'all'. Received: ${includeShadowTree}`)\n    }\n    this._includeShadowTree = includeShadowTree\n  }\n}\n\nclass ChannelValue {\n  constructor(channel, options = undefined, resultOwnership = undefined) {\n    this.channel = channel\n\n    if (options !== undefined) {\n      if (options instanceof SerializationOptions) {\n        this.options = options\n      } else {\n        throw Error(`Pass in SerializationOptions object. Received: ${options} `)\n      }\n    }\n\n    if (resultOwnership != undefined) {\n      if (['root', 'none'].includes(resultOwnership)) {\n        this.resultOwnership = resultOwnership\n      } else {\n        throw Error(`Valid types are 'root' and 'none. Received: ${resultOwnership}`)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  ChannelValue,\n  LocalValue,\n  RemoteValue,\n  ReferenceValue,\n  RemoteReferenceType,\n  RegExpValue,\n  SerializationOptions,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}