{"ast":null,"code":"import { buildAdaptiveBezier } from './buildAdaptiveBezier.mjs';\n\"use strict\";\nconst TAU = Math.PI * 2;\nconst out = {\n  centerX: 0,\n  centerY: 0,\n  ang1: 0,\n  ang2: 0\n};\nconst mapToEllipse = ({\n  x,\n  y\n}, rx, ry, cosPhi, sinPhi, centerX, centerY, out2) => {\n  x *= rx;\n  y *= ry;\n  const xp = cosPhi * x - sinPhi * y;\n  const yp = sinPhi * x + cosPhi * y;\n  out2.x = xp + centerX;\n  out2.y = yp + centerY;\n  return out2;\n};\nfunction approxUnitArc(ang1, ang2) {\n  const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n  const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n  const x1 = Math.cos(ang1);\n  const y1 = Math.sin(ang1);\n  const x2 = Math.cos(ang1 + ang2);\n  const y2 = Math.sin(ang1 + ang2);\n  return [{\n    x: x1 - y1 * a,\n    y: y1 + x1 * a\n  }, {\n    x: x2 + y2 * a,\n    y: y2 - x2 * a\n  }, {\n    x: x2,\n    y: y2\n  }];\n}\nconst vectorAngle = (ux, uy, vx, vy) => {\n  const sign = ux * vy - uy * vx < 0 ? -1 : 1;\n  let dot = ux * vx + uy * vy;\n  if (dot > 1) {\n    dot = 1;\n  }\n  if (dot < -1) {\n    dot = -1;\n  }\n  return sign * Math.acos(dot);\n};\nconst getArcCenter = (px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinPhi, cosPhi, pxp, pyp, out2) => {\n  const rxSq = Math.pow(rx, 2);\n  const rySq = Math.pow(ry, 2);\n  const pxpSq = Math.pow(pxp, 2);\n  const pypSq = Math.pow(pyp, 2);\n  let radicant = rxSq * rySq - rxSq * pypSq - rySq * pxpSq;\n  if (radicant < 0) {\n    radicant = 0;\n  }\n  radicant /= rxSq * pypSq + rySq * pxpSq;\n  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n  const centerXp = radicant * rx / ry * pyp;\n  const centerYp = radicant * -ry / rx * pxp;\n  const centerX = cosPhi * centerXp - sinPhi * centerYp + (px + cx) / 2;\n  const centerY = sinPhi * centerXp + cosPhi * centerYp + (py + cy) / 2;\n  const vx1 = (pxp - centerXp) / rx;\n  const vy1 = (pyp - centerYp) / ry;\n  const vx2 = (-pxp - centerXp) / rx;\n  const vy2 = (-pyp - centerYp) / ry;\n  const ang1 = vectorAngle(1, 0, vx1, vy1);\n  let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n  if (sweepFlag === 0 && ang2 > 0) {\n    ang2 -= TAU;\n  }\n  if (sweepFlag === 1 && ang2 < 0) {\n    ang2 += TAU;\n  }\n  out2.centerX = centerX;\n  out2.centerY = centerY;\n  out2.ang1 = ang1;\n  out2.ang2 = ang2;\n};\nfunction buildArcToSvg(points, px, py, cx, cy, rx, ry, xAxisRotation = 0, largeArcFlag = 0, sweepFlag = 0) {\n  if (rx === 0 || ry === 0) {\n    return;\n  }\n  const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n  const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n  const pxp = cosPhi * (px - cx) / 2 + sinPhi * (py - cy) / 2;\n  const pyp = -sinPhi * (px - cx) / 2 + cosPhi * (py - cy) / 2;\n  if (pxp === 0 && pyp === 0) {\n    return;\n  }\n  rx = Math.abs(rx);\n  ry = Math.abs(ry);\n  const lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);\n  if (lambda > 1) {\n    rx *= Math.sqrt(lambda);\n    ry *= Math.sqrt(lambda);\n  }\n  getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinPhi, cosPhi, pxp, pyp, out);\n  let {\n    ang1,\n    ang2\n  } = out;\n  const {\n    centerX,\n    centerY\n  } = out;\n  let ratio = Math.abs(ang2) / (TAU / 4);\n  if (Math.abs(1 - ratio) < 1e-7) {\n    ratio = 1;\n  }\n  const segments = Math.max(Math.ceil(ratio), 1);\n  ang2 /= segments;\n  let lastX = points[points.length - 2];\n  let lastY = points[points.length - 1];\n  const outCurvePoint = {\n    x: 0,\n    y: 0\n  };\n  for (let i = 0; i < segments; i++) {\n    const curve = approxUnitArc(ang1, ang2);\n    const {\n      x: x1,\n      y: y1\n    } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const {\n      x: x2,\n      y: y2\n    } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    const {\n      x,\n      y\n    } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n    buildAdaptiveBezier(points, lastX, lastY, x1, y1, x2, y2, x, y);\n    lastX = x;\n    lastY = y;\n    ang1 += ang2;\n  }\n}\nexport { buildArcToSvg };","map":{"version":3,"names":["TAU","Math","PI","out","centerX","centerY","ang1","ang2","mapToEllipse","x","y","rx","ry","cosPhi","sinPhi","out2","xp","yp","approxUnitArc","a1","tan","a","x1","cos","y1","sin","x2","y2","vectorAngle","ux","uy","vx","vy","sign","dot","acos","getArcCenter","px","py","cx","cy","largeArcFlag","sweepFlag","pxp","pyp","rxSq","pow","rySq","pxpSq","pypSq","radicant","sqrt","centerXp","centerYp","vx1","vy1","vx2","vy2","buildArcToSvg","points","xAxisRotation","abs","lambda","ratio","segments","max","ceil","lastX","length","lastY","outCurvePoint","i","curve","buildAdaptiveBezier"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArcToSvg.ts"],"sourcesContent":["import { buildAdaptiveBezier } from './buildAdaptiveBezier';\n\nconst TAU = Math.PI * 2;\n\nconst out = {\n    centerX: 0,\n    centerY: 0,\n    ang1: 0,\n    ang2: 0\n};\n\nconst mapToEllipse = (\n    { x, y }: {x: number, y: number},\n    rx: number, ry: number,\n    cosPhi: number, sinPhi: number,\n    centerX: number, centerY: number,\n    out: {x: number, y: number}\n): {x: number, y: number} =>\n{\n    x *= rx;\n    y *= ry;\n\n    const xp = (cosPhi * x) - (sinPhi * y);\n    const yp = (sinPhi * x) + (cosPhi * y);\n\n    out.x = xp + centerX;\n    out.y = yp + centerY;\n\n    return out;\n};\n\nfunction approxUnitArc(ang1: number, ang2: number): {x: number, y: number}[]\n{\n    // If 90 degree circular arc, use a constant\n    // as derived from http://spencermortensen.com/articles/bezier-circle\n\n    const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n\n    const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n\n    const x1 = Math.cos(ang1);\n    const y1 = Math.sin(ang1);\n    const x2 = Math.cos(ang1 + ang2);\n    const y2 = Math.sin(ang1 + ang2);\n\n    return [\n        {\n            x: x1 - (y1 * a),\n            y: y1 + (x1 * a)\n        },\n        {\n            x: x2 + (y2 * a),\n            y: y2 - (x2 * a)\n        },\n        {\n            x: x2,\n            y: y2\n        }\n    ];\n}\n\nconst vectorAngle = (ux: number, uy: number, vx: number, vy: number) =>\n{\n    const sign = ((ux * vy) - (uy * vx) < 0) ? -1 : 1;\n\n    let dot = (ux * vx) + (uy * vy);\n\n    if (dot > 1)\n    {\n        dot = 1;\n    }\n\n    if (dot < -1)\n    {\n        dot = -1;\n    }\n\n    return sign * Math.acos(dot);\n};\n\nconst getArcCenter = (\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    largeArcFlag: number,\n    sweepFlag: number,\n    sinPhi: number,\n    cosPhi: number,\n    pxp: number,\n    pyp: number,\n    out: {\n        centerX: number,\n        centerY: number,\n        ang1: number,\n        ang2: number\n    }\n// eslint-disable-next-line max-params\n) =>\n{\n    const rxSq = Math.pow(rx, 2);\n    const rySq = Math.pow(ry, 2);\n    const pxpSq = Math.pow(pxp, 2);\n    const pypSq = Math.pow(pyp, 2);\n\n    let radicant = (rxSq * rySq) - (rxSq * pypSq) - (rySq * pxpSq);\n\n    if (radicant < 0)\n    {\n        radicant = 0;\n    }\n\n    radicant /= (rxSq * pypSq) + (rySq * pxpSq);\n    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n\n    const centerXp = radicant * rx / ry * pyp;\n    const centerYp = radicant * -ry / rx * pxp;\n\n    const centerX = (cosPhi * centerXp) - (sinPhi * centerYp) + ((px + cx) / 2);\n    const centerY = (sinPhi * centerXp) + (cosPhi * centerYp) + ((py + cy) / 2);\n\n    const vx1 = (pxp - centerXp) / rx;\n    const vy1 = (pyp - centerYp) / ry;\n    const vx2 = (-pxp - centerXp) / rx;\n    const vy2 = (-pyp - centerYp) / ry;\n\n    const ang1 = vectorAngle(1, 0, vx1, vy1);\n    let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n\n    if (sweepFlag === 0 && ang2 > 0)\n    {\n        ang2 -= TAU;\n    }\n\n    if (sweepFlag === 1 && ang2 < 0)\n    {\n        ang2 += TAU;\n    }\n\n    out.centerX = centerX;\n    out.centerY = centerY;\n    out.ang1 = ang1;\n    out.ang2 = ang2;\n};\n\nexport function buildArcToSvg(\n    points: number[],\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    xAxisRotation = 0,\n    largeArcFlag = 0,\n    sweepFlag = 0\n): void\n{\n    if (rx === 0 || ry === 0)\n    {\n        return;\n    }\n\n    const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n    const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n\n    const pxp = (cosPhi * (px - cx) / 2) + (sinPhi * (py - cy) / 2);\n    const pyp = (-sinPhi * (px - cx) / 2) + (cosPhi * (py - cy) / 2);\n\n    if (pxp === 0 && pyp === 0)\n    {\n        return;\n    }\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    const lambda = (Math.pow(pxp, 2) / Math.pow(rx, 2)) + (Math.pow(pyp, 2) / Math.pow(ry, 2));\n\n    if (lambda > 1)\n    {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n\n    getArcCenter(\n        px,\n        py,\n        cx,\n        cy,\n        rx,\n        ry,\n        largeArcFlag,\n        sweepFlag,\n        sinPhi,\n        cosPhi,\n        pxp,\n        pyp,\n        out\n    );\n\n    let { ang1, ang2 } = out;\n    const { centerX, centerY } = out;\n\n    // If 'ang2' == 90.0000000001, then `ratio` will devalue to\n    // 1.0000000001. This causes `segments` to be greater than one, which is an\n    // unnecessary split, and adds extra points to the bezier curve. To alleviate\n    // this issue, we round to 1.0 when the ratio is close to 1.0.\n    let ratio = Math.abs(ang2) / (TAU / 4);\n\n    if (Math.abs(1.0 - ratio) < 0.0000001)\n    {\n        ratio = 1.0;\n    }\n\n    const segments = Math.max(Math.ceil(ratio), 1);\n\n    ang2 /= segments;\n\n    let lastX = points[points.length - 2];\n    let lastY = points[points.length - 1];\n\n    const outCurvePoint = { x: 0, y: 0 };\n\n    for (let i = 0; i < segments; i++)\n    {\n        const curve = approxUnitArc(ang1, ang2);\n\n        const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n\n        buildAdaptiveBezier(\n            points,\n            lastX, lastY,\n            x1, y1, x2, y2, x, y\n        );\n\n        lastX = x;\n        lastY = y;\n\n        ang1 += ang2;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}