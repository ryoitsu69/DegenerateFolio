{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Edge (Chromium) is supported and support\n * for Edge Legacy (EdgeHTML) as part of https://github.com/SeleniumHQ/selenium/issues/9166.\n * Before using this module, you must download and install the correct\n * [WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/) server.\n *\n * Ensure that the msedgedriver (Chromium)\n * is on your [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * You may use {@link Options} to specify whether Edge Chromium options should be used:\n\n *     const edge = require('selenium-webdriver/edge');\n *     const options = new edge.Options();\n\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [WebDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     WebDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     const edge = require('selenium-webdriver/edge');\n *\n *     const service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     let options = new edge.Options();\n *     // configure browser options ...\n *\n *     let driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start msedgedriver using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [WebDriver (Chromium)]: https://docs.microsoft.com/en-us/microsoft-edge/webdriver-chromium\n */\n\n'use strict';\n\nconst {\n  Browser\n} = require('./lib/capabilities');\nconst chromium = require('./chromium');\nconst EDGE_CAPABILITY_KEY = 'ms:edgeOptions';\n\n/** @type {remote.DriverService} */\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [MSEdgeDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)\n * server in a child process.\n */\nclass ServiceBuilder extends chromium.ServiceBuilder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the msedgedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the msedgedriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe);\n    this.setLoopback(true);\n  }\n}\n\n/**\n * Class for managing edge chromium specific options.\n */\nclass Options extends chromium.Options {\n  /**\n   * Sets the path to the edge binary to use\n   *\n   * The binary path be absolute or relative to the msedgedriver server\n   * executable, but it must exist on the machine that will launch edge chromium.\n   *\n   * @param {string} path The path to the msedgedriver binary to use.\n   * @return {!Options} A self reference.\n   */\n  setEdgeChromiumBinaryPath(path) {\n    return this.setBinaryPath(path);\n  }\n\n  /**\n   * Changes the browser name to 'webview2' to enable\n   * <a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/how-to/webdriver\">\n   *   test automation of WebView2 apps with Microsoft Edge WebDriver\n   * </a>\n   *\n   * @param {boolean} enable  flag to enable or disable the 'webview2' usage\n   */\n  useWebView(enable) {\n    const browserName = enable ? 'webview2' : Browser.EDGE;\n    return this.setBrowserName(browserName);\n  }\n}\n\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\nclass Driver extends chromium.Driver {\n  /**\n   * Creates a new browser session for Microsoft's Edge browser.\n   *\n   * @param {(Capabilities|Options)=} opt_config The configuration options.\n   * @param {remote.DriverService=} opt_serviceExecutor The service to use; will create\n   *     a new Legacy or Chromium service based on {@linkplain Options} by default.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_serviceExecutor) {\n    let caps = opt_config || new Options();\n    return /** @type {!Driver} */super.createSession(caps, opt_serviceExecutor, 'ms', EDGE_CAPABILITY_KEY);\n  }\n\n  /**\n   * returns new instance of edge driver service\n   * @returns {remote.DriverService}\n   */\n  static getDefaultService() {\n    return new ServiceBuilder().build();\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\nOptions.prototype.BROWSER_NAME_VALUE = Browser.EDGE;\nOptions.prototype.CAPABILITY_KEY = EDGE_CAPABILITY_KEY;\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder\n};","map":{"version":3,"names":["Browser","require","chromium","EDGE_CAPABILITY_KEY","ServiceBuilder","constructor","opt_exe","setLoopback","Options","setEdgeChromiumBinaryPath","path","setBinaryPath","useWebView","enable","browserName","EDGE","setBrowserName","Driver","createSession","opt_config","opt_serviceExecutor","caps","getDefaultService","build","setFileDetector","prototype","BROWSER_NAME_VALUE","CAPABILITY_KEY","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/edge.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Edge (Chromium) is supported and support\n * for Edge Legacy (EdgeHTML) as part of https://github.com/SeleniumHQ/selenium/issues/9166.\n * Before using this module, you must download and install the correct\n * [WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/) server.\n *\n * Ensure that the msedgedriver (Chromium)\n * is on your [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * You may use {@link Options} to specify whether Edge Chromium options should be used:\n\n *     const edge = require('selenium-webdriver/edge');\n *     const options = new edge.Options();\n\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [WebDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     WebDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     const edge = require('selenium-webdriver/edge');\n *\n *     const service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     let options = new edge.Options();\n *     // configure browser options ...\n *\n *     let driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start msedgedriver using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [WebDriver (Chromium)]: https://docs.microsoft.com/en-us/microsoft-edge/webdriver-chromium\n */\n\n'use strict'\n\nconst { Browser } = require('./lib/capabilities')\nconst chromium = require('./chromium')\nconst EDGE_CAPABILITY_KEY = 'ms:edgeOptions'\n\n/** @type {remote.DriverService} */\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [MSEdgeDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)\n * server in a child process.\n */\nclass ServiceBuilder extends chromium.ServiceBuilder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the msedgedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the msedgedriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe)\n    this.setLoopback(true)\n  }\n}\n\n/**\n * Class for managing edge chromium specific options.\n */\nclass Options extends chromium.Options {\n  /**\n   * Sets the path to the edge binary to use\n   *\n   * The binary path be absolute or relative to the msedgedriver server\n   * executable, but it must exist on the machine that will launch edge chromium.\n   *\n   * @param {string} path The path to the msedgedriver binary to use.\n   * @return {!Options} A self reference.\n   */\n  setEdgeChromiumBinaryPath(path) {\n    return this.setBinaryPath(path)\n  }\n\n  /**\n   * Changes the browser name to 'webview2' to enable\n   * <a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/how-to/webdriver\">\n   *   test automation of WebView2 apps with Microsoft Edge WebDriver\n   * </a>\n   *\n   * @param {boolean} enable  flag to enable or disable the 'webview2' usage\n   */\n  useWebView(enable) {\n    const browserName = enable ? 'webview2' : Browser.EDGE\n    return this.setBrowserName(browserName)\n  }\n}\n\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\nclass Driver extends chromium.Driver {\n  /**\n   * Creates a new browser session for Microsoft's Edge browser.\n   *\n   * @param {(Capabilities|Options)=} opt_config The configuration options.\n   * @param {remote.DriverService=} opt_serviceExecutor The service to use; will create\n   *     a new Legacy or Chromium service based on {@linkplain Options} by default.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_serviceExecutor) {\n    let caps = opt_config || new Options()\n    return /** @type {!Driver} */ (super.createSession(caps, opt_serviceExecutor, 'ms', EDGE_CAPABILITY_KEY))\n  }\n\n  /**\n   * returns new instance of edge driver service\n   * @returns {remote.DriverService}\n   */\n  static getDefaultService() {\n    return new ServiceBuilder().build()\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\n\nOptions.prototype.BROWSER_NAME_VALUE = Browser.EDGE\nOptions.prototype.CAPABILITY_KEY = EDGE_CAPABILITY_KEY\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AACtC,MAAME,mBAAmB,GAAG,gBAAgB;;AAE5C;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASF,QAAQ,CAACE,cAAc,CAAC;EACnD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAACC,OAAO,EAAE;IACnB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,WAAW,CAAC,IAAI,CAAC;EACxB;AACF;;AAEA;AACA;AACA;AACA,MAAMC,OAAO,SAASN,QAAQ,CAACM,OAAO,CAAC;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,yBAAyBA,CAACC,IAAI,EAAE;IAC9B,OAAO,IAAI,CAACC,aAAa,CAACD,IAAI,CAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,UAAUA,CAACC,MAAM,EAAE;IACjB,MAAMC,WAAW,GAAGD,MAAM,GAAG,UAAU,GAAGb,OAAO,CAACe,IAAI;IACtD,OAAO,IAAI,CAACC,cAAc,CAACF,WAAW,CAAC;EACzC;AACF;;AAEA;AACA;AACA;AACA,MAAMG,MAAM,SAASf,QAAQ,CAACe,MAAM,CAAC;EACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,aAAaA,CAACC,UAAU,EAAEC,mBAAmB,EAAE;IACpD,IAAIC,IAAI,GAAGF,UAAU,IAAI,IAAIX,OAAO,CAAC,CAAC;IACtC,OAAO,sBAAwB,KAAK,CAACU,aAAa,CAACG,IAAI,EAAED,mBAAmB,EAAE,IAAI,EAAEjB,mBAAmB,CAAC;EAC1G;;EAEA;AACF;AACA;AACA;EACE,OAAOmB,iBAAiBA,CAAA,EAAG;IACzB,OAAO,IAAIlB,cAAc,CAAC,CAAC,CAACmB,KAAK,CAAC,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;EACEC,eAAeA,CAAA,EAAG,CAAC;AACrB;AAEAhB,OAAO,CAACiB,SAAS,CAACC,kBAAkB,GAAG1B,OAAO,CAACe,IAAI;AACnDP,OAAO,CAACiB,SAAS,CAACE,cAAc,GAAGxB,mBAAmB;;AAEtD;;AAEAyB,MAAM,CAACC,OAAO,GAAG;EACfZ,MAAM;EACNT,OAAO;EACPJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}