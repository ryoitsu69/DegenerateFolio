{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n\n const int iters = 150;\n\n int fractal(vec2 p, vec2 point) {\n     vec2 so = (-1.0 + 2.0 * point) * 0.4;\n     vec2 seed = vec2(0.098386255 + so.x, 0.6387662 + so.y);\n\n     for (int i = 0; i < iters; i++) {\n\n         if (length(p) > 2.0) {\n             return i;\n         }\n         vec2 r = p;\n         p = vec2(p.x * p.x - p.y * p.y, 2.0* p.x * p.y);\n         p = vec2(p.x * r.x - p.y * r.y + seed.x, r.x * p.y + p.x * r.y + seed.y);\n     }\n\n     return 0;\n }\n\n vec3 color(int i) {\n     float f = float(i)/float(iters) * 2.0;\n     f=f*f*2.;\n     return vec3((sin(f*2.0)), (sin(f*3.0)), abs(sin(f*7.0)));\n }\n\n\n float sampleMusicA() {\n     return 0.5 * (\n         texture( iChannel0, vec2( 0.15, 0.25 ) ).x +\n         texture( iChannel0, vec2( 0.30, 0.25 ) ).x);\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 uv = fragCoord.xy / iResolution.xy;\n     vec2 mouse = vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y);\n\n     vec2 position = 3. * (-0.5 + fragCoord.xy / iResolution.xy );\n     position.x *= iResolution.x/iResolution.y;\n\n     vec2 iFC = vec2(iResolution.x-fragCoord.x,iResolution.y-fragCoord.y);\n     vec2 pos2 = 2. * (-0.5 + iFC.xy / iResolution.xy);\n     pos2.x*=iResolution.x/iResolution.y;\n\n     vec4 t3 = texture(iChannel0, vec2(length(position)/2.0,0.1) );\n     float pulse = 0.5+sampleMusicA()*1.8;\n\n     vec3 invFract = color(fractal(pos2,vec2(0.55+sin(iTime/3.+0.5)/2.0,pulse*.9)));\n\n     vec3 fract4 = color(fractal(position/1.6,vec2(0.6+cos(iTime/2.+0.5)/2.0,pulse*.8)));\n\n     vec3 c = color(fractal(position,vec2(0.5+sin(iTime/3.)/2.0,pulse)));\n\n     t3=abs(vec4(0.5,0.1,0.5,1.)-t3)*2.;\n\n     vec4 fract01 =  vec4( c , 1.0 );\n     vec4 salida;\n     salida = fract01 / t3 + fract01 * t3 + vec4(invFract,0.6) + vec4(fract4,0.3);\n     fragColor = salida;\n }\n\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n\n const int iters = 150;\n\n int fractal(vec2 p, vec2 point) {\n     vec2 so = (-1.0 + 2.0 * point) * 0.4;\n     vec2 seed = vec2(0.098386255 + so.x, 0.6387662 + so.y);\n\n     for (int i = 0; i < iters; i++) {\n\n         if (length(p) > 2.0) {\n             return i;\n         }\n         vec2 r = p;\n         p = vec2(p.x * p.x - p.y * p.y, 2.0* p.x * p.y);\n         p = vec2(p.x * r.x - p.y * r.y + seed.x, r.x * p.y + p.x * r.y + seed.y);\n     }\n\n     return 0;\n }\n\n vec3 color(int i) {\n     float f = float(i)/float(iters) * 2.0;\n     f=f*f*2.;\n     return vec3((sin(f*2.0)), (sin(f*3.0)), abs(sin(f*7.0)));\n }\n\n\n float sampleMusicA() {\n     return 0.5 * (\n         texture( iChannel0, vec2( 0.15, 0.25 ) ).x +\n         texture( iChannel0, vec2( 0.30, 0.25 ) ).x);\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 uv = fragCoord.xy / iResolution.xy;\n     vec2 mouse = vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y);\n\n     vec2 position = 3. * (-0.5 + fragCoord.xy / iResolution.xy );\n     position.x *= iResolution.x/iResolution.y;\n\n     vec2 iFC = vec2(iResolution.x-fragCoord.x,iResolution.y-fragCoord.y);\n     vec2 pos2 = 2. * (-0.5 + iFC.xy / iResolution.xy);\n     pos2.x*=iResolution.x/iResolution.y;\n\n     vec4 t3 = texture(iChannel0, vec2(length(position)/2.0,0.1) );\n     float pulse = 0.5+sampleMusicA()*1.8;\n\n     vec3 invFract = color(fractal(pos2,vec2(0.55+sin(iTime/3.+0.5)/2.0,pulse*.9)));\n\n     vec3 fract4 = color(fractal(position/1.6,vec2(0.6+cos(iTime/2.+0.5)/2.0,pulse*.8)));\n\n     vec3 c = color(fractal(position,vec2(0.5+sin(iTime/3.)/2.0,pulse)));\n\n     t3=abs(vec4(0.5,0.1,0.5,1.)-t3)*2.;\n\n     vec4 fract01 =  vec4( c , 1.0 );\n     vec4 salida;\n     salida = fract01 / t3 + fract01 * t3 + vec4(invFract,0.6) + vec4(fract4,0.3);\n     fragColor = salida;\n }\n\n `;\n\nroot.render(\n    <>\n<ShadertoyReact fs={fragmentShader} />\n<TodoApp />\n<footer>Â©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEFJ,IAAI,CAACK,MAAM,eACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACJT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH;EAAe;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACtCd,OAAA,CAACL,OAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXd,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAlB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}