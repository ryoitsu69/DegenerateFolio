{"ast":null,"code":"import { secp256k1 } from '@noble/curves/secp256k1';\nimport { hasBigInt } from '@polkadot/util';\nimport { isReady, secp256k1Compress as wasm } from '@polkadot/wasm-crypto';\nexport function secp256k1Compress(publicKey, onlyJs) {\n  if (![33, 65].includes(publicKey.length)) {\n    throw new Error(\"Invalid publicKey provided, received \".concat(publicKey.length, \" bytes input\"));\n  }\n  if (publicKey.length === 33) {\n    return publicKey;\n  }\n  return !hasBigInt || !onlyJs && isReady() ? wasm(publicKey) : secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(true);\n}","map":{"version":3,"names":["secp256k1","hasBigInt","isReady","secp256k1Compress","wasm","publicKey","onlyJs","includes","length","Error","concat","ProjectivePoint","fromHex","toRawBytes"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/secp256k1/compress.js"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1';\nimport { hasBigInt } from '@polkadot/util';\nimport { isReady, secp256k1Compress as wasm } from '@polkadot/wasm-crypto';\nexport function secp256k1Compress(publicKey, onlyJs) {\n    if (![33, 65].includes(publicKey.length)) {\n        throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);\n    }\n    if (publicKey.length === 33) {\n        return publicKey;\n    }\n    return !hasBigInt || (!onlyJs && isReady())\n        ? wasm(publicKey)\n        : secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(true);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,OAAO,EAAEC,iBAAiB,IAAIC,IAAI,QAAQ,uBAAuB;AAC1E,OAAO,SAASD,iBAAiBA,CAACE,SAAS,EAAEC,MAAM,EAAE;EACjD,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACF,SAAS,CAACG,MAAM,CAAC,EAAE;IACtC,MAAM,IAAIC,KAAK,yCAAAC,MAAA,CAAyCL,SAAS,CAACG,MAAM,iBAAc,CAAC;EAC3F;EACA,IAAIH,SAAS,CAACG,MAAM,KAAK,EAAE,EAAE;IACzB,OAAOH,SAAS;EACpB;EACA,OAAO,CAACJ,SAAS,IAAK,CAACK,MAAM,IAAIJ,OAAO,CAAC,CAAE,GACrCE,IAAI,CAACC,SAAS,CAAC,GACfL,SAAS,CAACW,eAAe,CAACC,OAAO,CAACP,SAAS,CAAC,CAACQ,UAAU,CAAC,IAAI,CAAC;AACvE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}