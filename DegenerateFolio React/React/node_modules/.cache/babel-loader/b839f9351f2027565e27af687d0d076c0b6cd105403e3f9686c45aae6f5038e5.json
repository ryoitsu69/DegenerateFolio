{"ast":null,"code":"\"use strict\";\n\nclass ViewableBuffer {\n  constructor(sizeOrBuffer) {\n    if (typeof sizeOrBuffer === \"number\") {\n      this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n    } else if (sizeOrBuffer instanceof Uint8Array) {\n      this.rawBinaryData = sizeOrBuffer.buffer;\n    } else {\n      this.rawBinaryData = sizeOrBuffer;\n    }\n    this.uint32View = new Uint32Array(this.rawBinaryData);\n    this.float32View = new Float32Array(this.rawBinaryData);\n    this.size = this.rawBinaryData.byteLength;\n  }\n  /** View on the raw binary data as a `Int8Array`. */\n  get int8View() {\n    if (!this._int8View) {\n      this._int8View = new Int8Array(this.rawBinaryData);\n    }\n    return this._int8View;\n  }\n  /** View on the raw binary data as a `Uint8Array`. */\n  get uint8View() {\n    if (!this._uint8View) {\n      this._uint8View = new Uint8Array(this.rawBinaryData);\n    }\n    return this._uint8View;\n  }\n  /**  View on the raw binary data as a `Int16Array`. */\n  get int16View() {\n    if (!this._int16View) {\n      this._int16View = new Int16Array(this.rawBinaryData);\n    }\n    return this._int16View;\n  }\n  /** View on the raw binary data as a `Int32Array`. */\n  get int32View() {\n    if (!this._int32View) {\n      this._int32View = new Int32Array(this.rawBinaryData);\n    }\n    return this._int32View;\n  }\n  /** View on the raw binary data as a `Float64Array`. */\n  get float64View() {\n    if (!this._float64Array) {\n      this._float64Array = new Float64Array(this.rawBinaryData);\n    }\n    return this._float64Array;\n  }\n  /** View on the raw binary data as a `BigUint64Array`. */\n  get bigUint64View() {\n    if (!this._bigUint64Array) {\n      this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n    }\n    return this._bigUint64Array;\n  }\n  /**\n   * Returns the view of the given type.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *    `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - typed array of given type\n   */\n  view(type) {\n    return this[`${type}View`];\n  }\n  /** Destroys all buffer references. Do not use after calling this. */\n  destroy() {\n    this.rawBinaryData = null;\n    this._int8View = null;\n    this._uint8View = null;\n    this._int16View = null;\n    this.uint16View = null;\n    this._int32View = null;\n    this.uint32View = null;\n    this.float32View = null;\n  }\n  /**\n   * Returns the size of the given type in bytes.\n   * @param type - One of `int8`, `uint8`, `int16`,\n   *   `uint16`, `int32`, `uint32`, and `float32`.\n   * @returns - size of the type in bytes\n   */\n  static sizeOf(type) {\n    switch (type) {\n      case \"int8\":\n      case \"uint8\":\n        return 1;\n      case \"int16\":\n      case \"uint16\":\n        return 2;\n      case \"int32\":\n      case \"uint32\":\n      case \"float32\":\n        return 4;\n      default:\n        throw new Error(`${type} isn't a valid view type`);\n    }\n  }\n}\nexport { ViewableBuffer };","map":{"version":3,"names":["ViewableBuffer","constructor","sizeOrBuffer","rawBinaryData","ArrayBuffer","Uint8Array","buffer","uint32View","Uint32Array","float32View","Float32Array","size","byteLength","int8View","_int8View","Int8Array","uint8View","_uint8View","int16View","_int16View","Int16Array","int32View","_int32View","Int32Array","float64View","_float64Array","Float64Array","bigUint64View","_bigUint64Array","BigUint64Array","view","type","destroy","uint16View","sizeOf","Error"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/data/ViewableBuffer.ts"],"sourcesContent":["type TypedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof utils\n */\nexport class ViewableBuffer\n{\n    /** The size of the buffer in bytes. */\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n    public uint16View: Uint16Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _int32View: Int32Array;\n    private _float64Array: Float64Array;\n    private _bigUint64Array: BigUint64Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n\n        this.size = this.rawBinaryData.byteLength;\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /** View on the raw binary data as a `Float64Array`. */\n    get float64View(): Float64Array\n    {\n        if (!this._float64Array)\n        {\n            this._float64Array = new Float64Array(this.rawBinaryData);\n        }\n\n        return this._float64Array;\n    }\n\n    /** View on the raw binary data as a `BigUint64Array`. */\n    get bigUint64View(): BigUint64Array\n    {\n        if (!this._bigUint64Array)\n        {\n            this._bigUint64Array = new BigUint64Array(this.rawBinaryData);\n        }\n\n        return this._bigUint64Array;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    public view(type: string): TypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    public destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this.uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    /**\n     * Returns the size of the given type in bytes.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *   `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - size of the type in bytes\n     */\n    public static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n"],"mappings":";;AAMO,MAAMA,cACb;EA+BIC,YAAYC,YACZ;IACQ,WAAOA,YAAA,KAAiB,QAC5B;MACS,KAAAC,aAAA,GAAgB,IAAIC,WAAA,CAAYF,YAAY;IAAA,CACrD,UACSA,YAAA,YAAwBG,UACjC;MACI,KAAKF,aAAA,GAAgBD,YAAa,CAAAI,MAAA;IAAA,CAGtC;MACI,KAAKH,aAAgB,GAAAD,YAAA;IAAA;IAGzB,KAAKK,UAAa,OAAIC,WAAY,MAAKL,aAAa;IACpD,KAAKM,WAAc,OAAIC,YAAa,MAAKP,aAAa;IAEjD,KAAAQ,IAAA,GAAO,KAAKR,aAAc,CAAAS,UAAA;EAAA;EACnC;EAGA,IAAIC,QACJA,CAAA;IACQ,KAAC,KAAKC,SACV;MACI,KAAKA,SAAY,OAAIC,SAAU,MAAKZ,aAAa;IAAA;IAGrD,OAAO,IAAK,CAAAW,SAAA;EAAA;EAChB;EAGA,IAAIE,SACJA,CAAA;IACQ,KAAC,KAAKC,UACV;MACI,KAAKA,UAAa,OAAIZ,UAAW,MAAKF,aAAa;IAAA;IAGvD,OAAO,IAAK,CAAAc,UAAA;EAAA;EAChB;EAGA,IAAIC,SACJA,CAAA;IACQ,KAAC,KAAKC,UACV;MACI,KAAKA,UAAa,OAAIC,UAAW,MAAKjB,aAAa;IAAA;IAGvD,OAAO,IAAK,CAAAgB,UAAA;EAAA;EAChB;EAGA,IAAIE,SACJA,CAAA;IACQ,KAAC,KAAKC,UACV;MACI,KAAKA,UAAa,OAAIC,UAAW,MAAKpB,aAAa;IAAA;IAGvD,OAAO,IAAK,CAAAmB,UAAA;EAAA;EAChB;EAGA,IAAIE,WACJA,CAAA;IACQ,KAAC,KAAKC,aACV;MACI,KAAKA,aAAgB,OAAIC,YAAa,MAAKvB,aAAa;IAAA;IAG5D,OAAO,IAAK,CAAAsB,aAAA;EAAA;EAChB;EAGA,IAAIE,aACJA,CAAA;IACQ,KAAC,KAAKC,eACV;MACI,KAAKA,eAAkB,OAAIC,cAAe,MAAK1B,aAAa;IAAA;IAGhE,OAAO,IAAK,CAAAyB,eAAA;EAAA;EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;EAQOE,KAAKC,IACZ;IACY,YAAgB,GAAAA,IAAU;EAAA;EACtC;EAGOC,OACPA,CAAA;IACI,KAAK7B,aAAgB;IACrB,KAAKW,SAAY;IACjB,KAAKG,UAAa;IAClB,KAAKE,UAAa;IAClB,KAAKc,UAAa;IAClB,KAAKX,UAAa;IAClB,KAAKf,UAAa;IAClB,KAAKE,WAAc;EAAA;EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,OAAcyB,OAAOH,IACrB;IACI,QAAQA,IACR;MACI,KAAK;MACL,KAAK;QACM;MACX,KAAK;MACL,KAAK;QACM;MACX,KAAK;MACL,KAAK;MACL,KAAK;QACM;MACX;QACI,MAAM,IAAII,KAAA,CAAS,GAAAJ,IAA8B;IAAA;EACzD;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}