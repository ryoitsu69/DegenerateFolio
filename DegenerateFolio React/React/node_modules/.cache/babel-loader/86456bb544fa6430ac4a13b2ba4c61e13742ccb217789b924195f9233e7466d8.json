{"ast":null,"code":"import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { BlendModeFilter } from '../filters/blend-modes/BlendModeFilter.mjs';\nimport { hslgl } from '../filters/blend-modes/hls/GLhls.mjs';\nimport { hslgpu } from '../filters/blend-modes/hls/GPUhls.mjs';\n\"use strict\";\nclass ColorBlend extends BlendModeFilter {\n  constructor() {\n    super({\n      gl: {\n        functions: `\n                ${hslgl}\n\n                vec3 blendColor(vec3 base, vec3 blend,  float opacity)\n                {\n                    return (setLuminosity(blend, getLuminosity(base)) * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                finalColor = vec4(blendColor(back.rgb, front.rgb, front.a), uBlend);\n                `\n      },\n      gpu: {\n        functions: `\n                ${hslgpu}\n\n                fn blendColorOpacity(base:vec3<f32>,  blend:vec3<f32>,  opacity:f32) -> vec3<f32>\n                {\n                    return (setLuminosity(blend, getLuminosity(base)) * opacity + base * (1.0 - opacity));\n                }\n                `,\n        main: `\n                out = vec4<f32>(blendColorOpacity(back.rgb, front.rgb, front.a), blendUniforms.uBlend);\n                `\n      }\n    });\n  }\n}\n/** @ignore */\nColorBlend.extension = {\n  name: \"color\",\n  type: ExtensionType.BlendMode\n};\nexport { ColorBlend };","map":{"version":3,"names":["ColorBlend","BlendModeFilter","constructor","gl","functions","hslgl","main","gpu","hslgpu","extension","name","type","ExtensionType","BlendMode"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/advanced-blend-modes/ColorBlend.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\nimport { BlendModeFilter } from '../filters/blend-modes/BlendModeFilter';\nimport { hslgl } from '../filters/blend-modes/hls/GLhls';\nimport { hslgpu } from '../filters/blend-modes/hls/GPUhls';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Available as `container.blendMode = 'color'` after importing `pixi.js/advanced-blend-modes`.\n * @example\n * import 'pixi.js/advanced-blend-modes';\n * import { Sprite } from 'pixi.js';\n *\n * const sprite = Sprite.from('something.png');\n * sprite.blendMode = 'color'\n * @memberof filters\n */\nexport class ColorBlend extends BlendModeFilter\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = {\n        name: 'color',\n        type: ExtensionType.BlendMode\n    };\n\n    constructor()\n    {\n        super({\n            gl: {\n                functions: `\n                ${hslgl}\n\n                vec3 blendColor(vec3 base, vec3 blend,  float opacity)\n                {\n                    return (setLuminosity(blend, getLuminosity(base)) * opacity + base * (1.0 - opacity));\n                }\n                `,\n                main: `\n                finalColor = vec4(blendColor(back.rgb, front.rgb, front.a), uBlend);\n                `\n            },\n            gpu: {\n                functions: `\n                ${hslgpu}\n\n                fn blendColorOpacity(base:vec3<f32>,  blend:vec3<f32>,  opacity:f32) -> vec3<f32>\n                {\n                    return (setLuminosity(blend, getLuminosity(base)) * opacity + base * (1.0 - opacity));\n                }\n                `,\n                main: `\n                out = vec4<f32>(blendColorOpacity(back.rgb, front.rgb, front.a), blendUniforms.uBlend);\n                `\n            }\n        });\n    }\n}\n"],"mappings":";;;;;AAiBO,MAAMA,UAAA,SAAmBC,eAChC;EAOIC,WACAA,CAAA;IACU;MACFC,EAAI;QACAC,SAAW;AAAA,kBACTC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;QAOPC,IAAM;AAAA;AAAA;MAAA,CAGV;MACAC,GAAK;QACDH,SAAW;AAAA,kBACTI,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;QAORF,IAAM;AAAA;AAAA;MAAA;IAGV,CACH;EAAA;AAET;AAAA;AAvCaN,UAAA,CAGKS,SAA+B;EACzCC,IAAM;EACNC,IAAA,EAAMC,aAAc,CAAAC;AACxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}