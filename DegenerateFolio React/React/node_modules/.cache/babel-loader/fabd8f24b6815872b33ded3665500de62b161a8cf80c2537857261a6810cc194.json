{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebsocketClient = void 0;\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\nconst socket_1 = require(\"@cosmjs/socket\");\nconst stream_1 = require(\"@cosmjs/stream\");\nconst xstream_1 = require(\"xstream\");\nconst rpcclient_1 = require(\"./rpcclient\");\nfunction defaultErrorHandler(error) {\n  throw error;\n}\nfunction toJsonRpcResponse(message) {\n  // this should never happen, but I want an alert if it does\n  if (message.type !== \"message\") {\n    throw new Error(`Unexcepted message type on websocket: ${message.type}`);\n  }\n  const jsonRpcEvent = (0, json_rpc_1.parseJsonRpcResponse)(JSON.parse(message.data));\n  return jsonRpcEvent;\n}\nclass RpcEventProducer {\n  constructor(request, socket) {\n    this.running = false;\n    this.subscriptions = [];\n    this.request = request;\n    this.socket = socket;\n  }\n  /**\n   * Implementation of Producer.start\n   */\n  start(listener) {\n    if (this.running) {\n      throw Error(\"Already started. Please stop first before restarting.\");\n    }\n    this.running = true;\n    this.connectToClient(listener);\n    this.socket.queueRequest(JSON.stringify(this.request));\n  }\n  /**\n   * Implementation of Producer.stop\n   *\n   * Called by the stream when the stream's last listener stopped listening\n   * or when the producer completed.\n   */\n  stop() {\n    this.running = false;\n    // Tell the server we are done in order to save resources. We cannot wait for the result.\n    // This may fail when socket connection is not open, thus ignore errors in queueRequest\n    const endRequest = {\n      ...this.request,\n      method: \"unsubscribe\"\n    };\n    try {\n      this.socket.queueRequest(JSON.stringify(endRequest));\n    } catch (error) {\n      if (error instanceof Error && error.message.match(/socket has disconnected/i)) {\n        // ignore\n      } else {\n        throw error;\n      }\n    }\n  }\n  connectToClient(listener) {\n    const responseStream = this.socket.events.map(toJsonRpcResponse);\n    // this should unsubscribe itself, so doesn't need to be removed explicitly\n    const idSubscription = responseStream.filter(response => response.id === this.request.id).subscribe({\n      next: response => {\n        if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n          this.closeSubscriptions();\n          listener.error(JSON.stringify(response.error));\n        }\n        idSubscription.unsubscribe();\n      }\n    });\n    // this will fire on a response (success or error)\n    // Tendermint adds an \"#event\" suffix for events that follow a previous subscription\n    // https://github.com/tendermint/tendermint/blob/v0.23.0/rpc/core/events.go#L107\n    const idEventSubscription = responseStream.filter(response => response.id === this.request.id).subscribe({\n      next: response => {\n        if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n          this.closeSubscriptions();\n          listener.error(JSON.stringify(response.error));\n        } else {\n          listener.next(response.result);\n        }\n      }\n    });\n    // this will fire in case the websocket disconnects cleanly\n    const nonResponseSubscription = responseStream.subscribe({\n      error: error => {\n        this.closeSubscriptions();\n        listener.error(error);\n      },\n      complete: () => {\n        this.closeSubscriptions();\n        listener.complete();\n      }\n    });\n    this.subscriptions.push(idSubscription, idEventSubscription, nonResponseSubscription);\n  }\n  closeSubscriptions() {\n    for (const subscription of this.subscriptions) {\n      subscription.unsubscribe();\n    }\n    // clear unused subscriptions\n    this.subscriptions = [];\n  }\n}\nclass WebsocketClient {\n  constructor(baseUrl, onError = defaultErrorHandler) {\n    // Lazily create streams and use the same stream when listening to the same query twice.\n    //\n    // Creating streams is cheap since producer is not started as long as nobody listens to events. Thus this\n    // map is never cleared and there is no need to do so. But unsubscribe all the subscriptions!\n    this.subscriptionStreams = new Map();\n    if (!(0, rpcclient_1.hasProtocol)(baseUrl)) {\n      throw new Error(\"Base URL is missing a protocol. Expected 'ws://' or 'wss://'.\");\n    }\n    // make sure we don't end up with ...//websocket\n    const path = baseUrl.endsWith(\"/\") ? \"websocket\" : \"/websocket\";\n    this.url = baseUrl + path;\n    this.socket = new socket_1.ReconnectingSocket(this.url);\n    const errorSubscription = this.socket.events.subscribe({\n      error: error => {\n        onError(error);\n        errorSubscription.unsubscribe();\n      }\n    });\n    this.jsonRpcResponseStream = this.socket.events.map(toJsonRpcResponse);\n    this.socket.connect();\n  }\n  async execute(request) {\n    const pendingResponse = this.responseForRequestId(request.id);\n    this.socket.queueRequest(JSON.stringify(request));\n    const response = await pendingResponse;\n    if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n      throw new Error(JSON.stringify(response.error));\n    }\n    return response;\n  }\n  listen(request) {\n    if (request.method !== \"subscribe\") {\n      throw new Error(`Request method must be \"subscribe\" to start event listening`);\n    }\n    const query = request.params.query;\n    if (typeof query !== \"string\") {\n      throw new Error(\"request.params.query must be a string\");\n    }\n    if (!this.subscriptionStreams.has(query)) {\n      const producer = new RpcEventProducer(request, this.socket);\n      const stream = xstream_1.Stream.create(producer);\n      this.subscriptionStreams.set(query, stream);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.subscriptionStreams.get(query).filter(response => response.query !== undefined);\n  }\n  /**\n   * Resolves as soon as websocket is connected. execute() queues requests automatically,\n   * so this should be required for testing purposes only.\n   */\n  async connected() {\n    await this.socket.connectionStatus.waitFor(socket_1.ConnectionStatus.Connected);\n  }\n  disconnect() {\n    this.socket.disconnect();\n  }\n  async responseForRequestId(id) {\n    return (0, stream_1.firstEvent)(this.jsonRpcResponseStream.filter(r => r.id === id));\n  }\n}\nexports.WebsocketClient = WebsocketClient;","map":{"version":3,"names":["json_rpc_1","require","socket_1","stream_1","xstream_1","rpcclient_1","defaultErrorHandler","error","toJsonRpcResponse","message","type","Error","jsonRpcEvent","parseJsonRpcResponse","JSON","parse","data","RpcEventProducer","constructor","request","socket","running","subscriptions","start","listener","connectToClient","queueRequest","stringify","stop","endRequest","method","match","responseStream","events","map","idSubscription","filter","response","id","subscribe","next","isJsonRpcErrorResponse","closeSubscriptions","unsubscribe","idEventSubscription","result","nonResponseSubscription","complete","push","subscription","WebsocketClient","baseUrl","onError","subscriptionStreams","Map","hasProtocol","path","endsWith","url","ReconnectingSocket","errorSubscription","jsonRpcResponseStream","connect","execute","pendingResponse","responseForRequestId","listen","query","params","has","producer","stream","Stream","create","set","get","undefined","connected","connectionStatus","waitFor","ConnectionStatus","Connected","disconnect","firstEvent","r","exports"],"sources":["../../src/rpcclients/websocketclient.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}