{"ast":null,"code":"/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport class AbstractBase {\n  registry;\n  createdAtHash;\n  initialU8aLength;\n  isStorageFallback;\n  __internal__raw;\n  constructor(registry, value, initialU8aLength) {\n    this.initialU8aLength = initialU8aLength;\n    this.__internal__raw = value;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description returns the inner (wrapped value)\n   */\n  get inner() {\n    return this.__internal__raw;\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n  get isEmpty() {\n    return this.__internal__raw.isEmpty;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  eq(other) {\n    return this.__internal__raw.eq(other);\n  }\n  /**\n   * @description Returns a breakdown of the hex encoding for this Codec\n   */\n  inspect() {\n    return this.__internal__raw.inspect();\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n  toHex(isLe) {\n    return this.__internal__raw.toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  toHuman(isExtended, disableAscii) {\n    return this.__internal__raw.toHuman(isExtended, disableAscii);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n  toJSON() {\n    return this.__internal__raw.toJSON();\n  }\n  /**\n   * @description Converts the value in a best-fit primitive form\n   */\n  toPrimitive(disableAscii) {\n    return this.__internal__raw.toPrimitive(disableAscii);\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n  toString() {\n    return this.__internal__raw.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  toU8a(isBare) {\n    return this.__internal__raw.toU8a(isBare);\n  }\n  /**\n   * @description Returns the inner wrapped value (equivalent to valueOf)\n   */\n  unwrap() {\n    return this.__internal__raw;\n  }\n  /**\n   * @description Returns the inner wrapped value\n   */\n  valueOf() {\n    return this.__internal__raw;\n  }\n}","map":{"version":3,"names":["AbstractBase","registry","createdAtHash","initialU8aLength","isStorageFallback","__internal__raw","constructor","value","encodedLength","toU8a","length","hash","inner","isEmpty","eq","other","inspect","toHex","isLe","toHuman","isExtended","disableAscii","toJSON","toPrimitive","toString","isBare","unwrap","valueOf"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types-codec/abstract/Base.js"],"sourcesContent":["/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport class AbstractBase {\n    registry;\n    createdAtHash;\n    initialU8aLength;\n    isStorageFallback;\n    __internal__raw;\n    constructor(registry, value, initialU8aLength) {\n        this.initialU8aLength = initialU8aLength;\n        this.__internal__raw = value;\n        this.registry = registry;\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get encodedLength() {\n        return this.toU8a().length;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n    get hash() {\n        return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description returns the inner (wrapped value)\n     */\n    get inner() {\n        return this.__internal__raw;\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n    get isEmpty() {\n        return this.__internal__raw.isEmpty;\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    eq(other) {\n        return this.__internal__raw.eq(other);\n    }\n    /**\n     * @description Returns a breakdown of the hex encoding for this Codec\n     */\n    inspect() {\n        return this.__internal__raw.inspect();\n    }\n    /**\n     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n     */\n    toHex(isLe) {\n        return this.__internal__raw.toHex(isLe);\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    toHuman(isExtended, disableAscii) {\n        return this.__internal__raw.toHuman(isExtended, disableAscii);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n    toJSON() {\n        return this.__internal__raw.toJSON();\n    }\n    /**\n     * @description Converts the value in a best-fit primitive form\n     */\n    toPrimitive(disableAscii) {\n        return this.__internal__raw.toPrimitive(disableAscii);\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n    toString() {\n        return this.__internal__raw.toString();\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    toU8a(isBare) {\n        return this.__internal__raw.toU8a(isBare);\n    }\n    /**\n     * @description Returns the inner wrapped value (equivalent to valueOf)\n     */\n    unwrap() {\n        return this.__internal__raw;\n    }\n    /**\n     * @description Returns the inner wrapped value\n     */\n    valueOf() {\n        return this.__internal__raw;\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,CAAC;EACtBC,QAAQ;EACRC,aAAa;EACbC,gBAAgB;EAChBC,iBAAiB;EACjBC,eAAe;EACfC,WAAWA,CAACL,QAAQ,EAAEM,KAAK,EAAEJ,gBAAgB,EAAE;IAC3C,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACE,eAAe,GAAGE,KAAK;IAC5B,IAAI,CAACN,QAAQ,GAAGA,QAAQ;EAC5B;EACA;AACJ;AACA;EACI,IAAIO,aAAaA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,KAAK,CAAC,CAAC,CAACC,MAAM;EAC9B;EACA;AACJ;AACA;EACI,IAAIC,IAAIA,CAAA,EAAG;IACP,OAAO,IAAI,CAACV,QAAQ,CAACU,IAAI,CAAC,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC;EAC3C;EACA;AACJ;AACA;EACI,IAAIG,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACP,eAAe;EAC/B;EACA;AACJ;AACA;EACI,IAAIQ,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACR,eAAe,CAACQ,OAAO;EACvC;EACA;AACJ;AACA;EACIC,EAAEA,CAACC,KAAK,EAAE;IACN,OAAO,IAAI,CAACV,eAAe,CAACS,EAAE,CAACC,KAAK,CAAC;EACzC;EACA;AACJ;AACA;EACIC,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACX,eAAe,CAACW,OAAO,CAAC,CAAC;EACzC;EACA;AACJ;AACA;EACIC,KAAKA,CAACC,IAAI,EAAE;IACR,OAAO,IAAI,CAACb,eAAe,CAACY,KAAK,CAACC,IAAI,CAAC;EAC3C;EACA;AACJ;AACA;EACIC,OAAOA,CAACC,UAAU,EAAEC,YAAY,EAAE;IAC9B,OAAO,IAAI,CAAChB,eAAe,CAACc,OAAO,CAACC,UAAU,EAAEC,YAAY,CAAC;EACjE;EACA;AACJ;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACjB,eAAe,CAACiB,MAAM,CAAC,CAAC;EACxC;EACA;AACJ;AACA;EACIC,WAAWA,CAACF,YAAY,EAAE;IACtB,OAAO,IAAI,CAAChB,eAAe,CAACkB,WAAW,CAACF,YAAY,CAAC;EACzD;EACA;AACJ;AACA;EACIG,QAAQA,CAAA,EAAG;IACP,OAAO,IAAI,CAACnB,eAAe,CAACmB,QAAQ,CAAC,CAAC;EAC1C;EACA;AACJ;AACA;AACA;EACIf,KAAKA,CAACgB,MAAM,EAAE;IACV,OAAO,IAAI,CAACpB,eAAe,CAACI,KAAK,CAACgB,MAAM,CAAC;EAC7C;EACA;AACJ;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,OAAO,IAAI,CAACrB,eAAe;EAC/B;EACA;AACJ;AACA;EACIsB,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACtB,eAAe;EAC/B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}