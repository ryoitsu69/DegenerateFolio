{"ast":null,"code":"import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._tilingSpriteDataHash = /* @__PURE__ */Object.create(null);\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const {\n        batchableMesh\n      } = tilingSpriteData;\n      if (batchableMesh.texture._source !== renderable.texture._source) {\n        return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture);\n      }\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const {\n      geometry,\n      canBatch\n    } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite._didTilingSpriteUpdate) {\n        tilingSprite._didTilingSpriteUpdate = false;\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.mesh = tilingSprite;\n        batchableMesh.texture = tilingSprite._texture;\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const {\n      shader\n    } = this._tilingSpriteDataHash[tilingSprite.uid];\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(tilingSprite.groupColorAlpha, localUniforms.uColor, 0);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: State.default2d\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const {\n      canBatch\n    } = tilingSpriteData;\n    if (canBatch) {\n      const {\n        batchableMesh\n      } = tilingSpriteData;\n      if (tilingSprite._didTilingSpriteUpdate) this._updateBatchableMesh(tilingSprite);\n      batchableMesh.batcher.updateElement(batchableMesh);\n    } else if (tilingSprite._didTilingSpriteUpdate) {\n      const {\n        shader\n      } = tilingSpriteData;\n      shader.updateUniforms(tilingSprite.width, tilingSprite.height, tilingSprite._tileTransform.matrix, tilingSprite.anchor.x, tilingSprite.anchor.y, tilingSprite.texture);\n    }\n    tilingSprite._didTilingSpriteUpdate = false;\n  }\n  destroyRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    tilingSpriteData.batchableMesh = null;\n    tilingSpriteData.shader?.destroy();\n    this._tilingSpriteDataHash[tilingSprite.uid] = null;\n  }\n  _getTilingSpriteData(renderable) {\n    return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const geometry = new MeshGeometry({\n      indices: sharedQuad.indices,\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n    this._tilingSpriteDataHash[tilingSprite.uid] = {\n      canBatch: true,\n      renderable: tilingSprite,\n      geometry\n    };\n    tilingSprite.on(\"destroyed\", () => {\n      this.destroyRenderable(tilingSprite);\n    });\n    return this._tilingSpriteDataHash[tilingSprite.uid];\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const {\n      geometry\n    } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    for (const i in this._tilingSpriteDataHash) {\n      this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n    }\n    this._tilingSpriteDataHash = null;\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [ExtensionType.WebGLPipes, ExtensionType.WebGPUPipes, ExtensionType.CanvasPipes],\n  name: \"tilingSprite\"\n};\nexport { TilingSpritePipe };","map":{"version":3,"names":["sharedQuad","QuadGeometry","TilingSpritePipe","constructor","renderer","_tilingSpriteDataHash","Object","create","_renderer","validateRenderable","renderable","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","batchableMesh","texture","_source","batcher","checkAndUpdateTexture","addRenderable","tilingSprite","instructionSet","renderPipes","batch","geometry","BatchableMesh","_didTilingSpriteUpdate","_updateBatchableMesh","mesh","_texture","roundPixels","_roundPixels","addToBatch","break","shader","TilingSpriteShader","updateRenderable","add","execute","uid","groups","globalUniforms","bindGroup","localUniforms","resources","uniforms","uTransformMatrix","groupTransform","uRound","color32BitToUniform","groupColorAlpha","uColor","encoder","draw","state","State","default2d","updateElement","updateUniforms","width","height","_tileTransform","matrix","anchor","x","y","destroyRenderable","destroy","_initTilingSpriteData","MeshGeometry","indices","positions","slice","uvs","on","renderableData","style","source","addressMode","update","setUvs","setPositions","i","_nonPowOf2wrapping","type","RendererType","WEBGL","context","supports","nonPowOf2wrapping","textureMatrix","isSimple","isPowerOfTwo","extension","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            // we are batching.. check a texture change!\n            if (batchableMesh.texture._source !== renderable.texture._source)\n\n            { return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture); }\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite._didTilingSpriteUpdate)\n            {\n                tilingSprite._didTilingSpriteUpdate = false;\n\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.mesh = tilingSprite;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: State.default2d,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite._didTilingSpriteUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh.batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite._didTilingSpriteUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n\n        tilingSprite._didTilingSpriteUpdate = false;\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(tilingSprite);\n        });\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}