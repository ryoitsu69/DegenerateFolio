{"ast":null,"code":"\"use strict\";\n\nfunction extractStructAndGroups(wgsl) {\n  const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n  const groupPattern = /@group\\((\\d+)\\)/;\n  const bindingPattern = /@binding\\((\\d+)\\)/;\n  const namePattern = /var(<[^>]+>)? (\\w+)/;\n  const typePattern = /:\\s*(\\w+)/;\n  const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n  const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n  const structName = /struct\\s+(\\w+)/;\n  const groups = wgsl.match(linePattern)?.map(item => ({\n    group: parseInt(item.match(groupPattern)[1], 10),\n    binding: parseInt(item.match(bindingPattern)[1], 10),\n    name: item.match(namePattern)[2],\n    isUniform: item.match(namePattern)[1] === \"<uniform>\",\n    type: item.match(typePattern)[1]\n  }));\n  if (!groups) {\n    return {\n      groups: [],\n      structs: []\n    };\n  }\n  const structs = wgsl.match(structPattern)?.map(struct => {\n    const name = struct.match(structName)[1];\n    const members = struct.match(structMemberPattern).reduce((acc, member) => {\n      const [name2, type] = member.split(\":\");\n      acc[name2.trim()] = type.trim();\n      return acc;\n    }, {});\n    if (!members) {\n      return null;\n    }\n    return {\n      name,\n      members\n    };\n  }).filter(({\n    name\n  }) => groups.some(group => group.type === name)) ?? [];\n  return {\n    groups,\n    structs\n  };\n}\nexport { extractStructAndGroups };","map":{"version":3,"names":["extractStructAndGroups","wgsl","linePattern","groupPattern","bindingPattern","namePattern","typePattern","structPattern","structMemberPattern","structName","groups","match","map","item","group","parseInt","binding","name","isUniform","type","structs","struct","members","reduce","acc","member","name2","split","trim","filter","some"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gpu/shader/utils/extractStructAndGroups.ts"],"sourcesContent":["export interface StructsAndGroups\n{\n    groups: {\n        group: number;\n        binding: number;\n        name: string;\n        isUniform: boolean;\n        type: string;\n    }[];\n    structs: {\n        name: string;\n        members: Record<string, string>;\n    }[];\n}\n\nexport function extractStructAndGroups(wgsl: string): StructsAndGroups\n{\n    // Patterns for parsing the WGSL file\n    const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n    const groupPattern = /@group\\((\\d+)\\)/;\n    const bindingPattern = /@binding\\((\\d+)\\)/;\n    const namePattern = /var(<[^>]+>)? (\\w+)/;\n    const typePattern = /:\\s*(\\w+)/;\n    const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n    const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n    const structName = /struct\\s+(\\w+)/;\n\n    // Find the @group and @binding annotations\n    const groups = wgsl.match(linePattern)?.map((item) => ({\n        group: parseInt(item.match(groupPattern)[1], 10),\n        binding: parseInt(item.match(bindingPattern)[1], 10),\n        name: item.match(namePattern)[2],\n        isUniform: item.match(namePattern)[1] === '<uniform>',\n        type: item.match(typePattern)[1],\n    }));\n\n    if (!groups)\n    {\n        return {\n            groups: [],\n            structs: [],\n        };\n    }\n\n    // Find the structs\n    const structs = wgsl\n        .match(structPattern)\n        ?.map((struct) =>\n        {\n            const name = struct.match(structName)[1];\n            const members = struct.match(structMemberPattern).reduce((acc: Record<string, string>, member) =>\n            {\n                const [name, type] = member.split(':');\n\n                acc[name.trim()] = type.trim();\n\n                return acc;\n            }, {});\n\n            if (!members)\n            {\n                return null;\n            }\n\n            return { name, members };\n            // Only include the structs mentioned in the @group/@binding annotations\n        })\n        .filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n\n    return {\n        groups,\n        structs,\n    };\n}\n"],"mappings":";;AAeO,SAASA,uBAAuBC,IACvC;EAEI,MAAMC,WAAc;EACpB,MAAMC,YAAe;EACrB,MAAMC,cAAiB;EACvB,MAAMC,WAAc;EACpB,MAAMC,WAAc;EACpB,MAAMC,aAAgB;EACtB,MAAMC,mBAAsB;EAC5B,MAAMC,UAAa;EAGnB,MAAMC,MAAA,GAAST,IAAK,CAAAU,KAAA,CAAMT,WAAW,CAAG,EAAAU,GAAA,CAAKC,IAAU;IACnDC,KAAA,EAAOC,QAAA,CAASF,IAAK,CAAAF,KAAA,CAAMR,YAAY,CAAE,EAAC,GAAG,EAAE;IAC/Ca,OAAA,EAASD,QAAA,CAASF,IAAK,CAAAF,KAAA,CAAMP,cAAc,CAAE,EAAC,GAAG,EAAE;IACnDa,IAAM,EAAAJ,IAAA,CAAKF,KAAM,CAAAN,WAAW,EAAE,CAAC;IAC/Ba,SAAA,EAAWL,IAAK,CAAAF,KAAA,CAAMN,WAAW,EAAE,CAAC,CAAM;IAC1Cc,IAAM,EAAAN,IAAA,CAAKF,KAAM,CAAAL,WAAW,EAAE,CAAC;EAAA,CACjC;EAEF,IAAI,CAACI,MACL;IACW;MACHA,MAAA,EAAQ,EAAC;MACTU,OAAA,EAAS;IAAC,CACd;EAAA;EAIJ,MAAMA,OAAA,GAAUnB,IACX,CAAAU,KAAA,CAAMJ,aAAa,CAClB,EAAAK,GAAA,CAAKS,MACP;IACI,MAAMJ,IAAO,GAAAI,MAAA,CAAOV,KAAM,CAAAF,UAAU,EAAE,CAAC;IACjC,MAAAa,OAAA,GAAUD,MAAA,CAAOV,KAAM,CAAAH,mBAAmB,EAAEe,MAAO,EAACC,GAAA,EAA6BC,MACvF;MACI,MAAM,CAACC,KAAM,EAAAP,IAAI,CAAI,GAAAM,MAAA,CAAOE,KAAA,CAAM,GAAG;MAErCH,GAAA,CAAIE,KAAK,CAAAE,IAAA,EAAM,IAAIT,IAAA,CAAKS,IAAK;MAEtB,OAAAJ,GAAA;IAAA,CACX,EAAG,EAAE;IAEL,IAAI,CAACF,OACL;MACW;IAAA;IAGJ;MAAEL,IAAA;MAAMK;IAAQ;EAAA,CAE1B,CACA,CAAAO,MAAA,CAAO,CAAC;IAAEZ;EAAA,CAAW,KAAAP,MAAA,CAAOoB,IAAK,CAAChB,KAAA,IAAUA,KAAM,CAAAK,IAAA,KAASF,IAAI,CAAC,KAAK,EAAC;EAEpE;IACHP,MAAA;IACAU;EAAA,CACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}