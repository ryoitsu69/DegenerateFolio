{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Wrapper for getting information from the Selenium Manager binaries\n */\n\nconst {\n  platform\n} = require('process');\nconst path = require('path');\nconst fs = require('fs');\nconst spawnSync = require('child_process').spawnSync;\nconst {\n  Capability\n} = require('../lib/capabilities');\nconst logging = require('../lib/logging');\nconst log_ = logging.getLogger(logging.Type.DRIVER);\nlet debugMessagePrinted = false;\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getBinary() {\n  const directory = {\n    darwin: 'macos',\n    win32: 'windows',\n    cygwin: 'windows',\n    linux: 'linux'\n  }[platform];\n  const file = directory === 'windows' ? 'selenium-manager.exe' : 'selenium-manager';\n  let seleniumManagerBasePath = path.join(__dirname, '..', '/bin');\n  const filePath = process.env.SE_MANAGER_PATH || path.join(seleniumManagerBasePath, directory, file);\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Unable to obtain Selenium Manager at ${filePath}`);\n  }\n  if (!debugMessagePrinted) {\n    log_.debug(`Selenium Manager binary found at ${filePath}`);\n    debugMessagePrinted = true; // Set the flag to true after printing the debug message\n  }\n  return filePath;\n}\n\n/**\n * Determines the path of the correct driver\n * @param {Capabilities} options browser options to fetch the driver\n * @returns {{browserPath: string, driverPath: string}} path of the driver and\n * browser location\n */\n\nfunction driverLocation(options) {\n  let args = ['--browser', options.getBrowserName(), '--language-binding', 'javascript', '--output', 'json'];\n  if (options.getBrowserVersion() && options.getBrowserVersion() !== '') {\n    args.push('--browser-version', options.getBrowserVersion());\n  }\n  const vendorOptions = options.get('goog:chromeOptions') || options.get('ms:edgeOptions') || options.get('moz:firefoxOptions');\n  if (vendorOptions && vendorOptions.binary && vendorOptions.binary !== '') {\n    args.push('--browser-path', path.resolve(vendorOptions.binary));\n  }\n  const proxyOptions = options.getProxy();\n\n  // Check if proxyOptions exists and has properties\n  if (proxyOptions && Object.keys(proxyOptions).length > 0) {\n    const httpProxy = proxyOptions['httpProxy'];\n    const sslProxy = proxyOptions['sslProxy'];\n    if (httpProxy !== undefined) {\n      args.push('--proxy', httpProxy);\n    } else if (sslProxy !== undefined) {\n      args.push('--proxy', sslProxy);\n    }\n  }\n  const smBinary = getBinary();\n  const spawnResult = spawnSync(smBinary, args);\n  let output;\n  if (spawnResult.status) {\n    let errorMessage;\n    if (spawnResult.stderr.toString()) {\n      errorMessage = spawnResult.stderr.toString();\n    }\n    if (spawnResult.stdout.toString()) {\n      try {\n        output = JSON.parse(spawnResult.stdout.toString());\n        logOutput(output);\n        errorMessage = output.result.message;\n      } catch (e) {\n        errorMessage = e.toString();\n      }\n    }\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${errorMessage}`);\n  }\n  try {\n    output = JSON.parse(spawnResult.stdout.toString());\n  } catch (e) {\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${e.toString()}`);\n  }\n\n  // Once driverPath is available, delete browserVersion from payload\n  if (output.result.driver_path) {\n    options.delete(Capability.BROWSER_VERSION);\n  }\n  logOutput(output);\n  return {\n    driverPath: output.result.driver_path,\n    browserPath: output.result.browser_path\n  };\n}\nfunction logOutput(output) {\n  for (const key in output.logs) {\n    if (output.logs[key].level === 'WARN') {\n      log_.warning(`${output.logs[key].message}`);\n    }\n    if (['DEBUG', 'INFO'].includes(output.logs[key].level)) {\n      log_.debug(`${output.logs[key].message}`);\n    }\n  }\n}\n\n// PUBLIC API\nmodule.exports = {\n  driverLocation\n};","map":{"version":3,"names":["platform","require","path","fs","spawnSync","Capability","logging","log_","getLogger","Type","DRIVER","debugMessagePrinted","getBinary","directory","darwin","win32","cygwin","linux","file","seleniumManagerBasePath","join","__dirname","filePath","process","env","SE_MANAGER_PATH","existsSync","Error","debug","driverLocation","options","args","getBrowserName","getBrowserVersion","push","vendorOptions","get","binary","resolve","proxyOptions","getProxy","Object","keys","length","httpProxy","sslProxy","undefined","smBinary","spawnResult","output","status","errorMessage","stderr","toString","stdout","JSON","parse","logOutput","result","message","e","driver_path","delete","BROWSER_VERSION","driverPath","browserPath","browser_path","key","logs","level","warning","includes","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/common/seleniumManager.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Wrapper for getting information from the Selenium Manager binaries\n */\n\nconst { platform } = require('process')\nconst path = require('path')\nconst fs = require('fs')\nconst spawnSync = require('child_process').spawnSync\nconst { Capability } = require('../lib/capabilities')\nconst logging = require('../lib/logging')\n\nconst log_ = logging.getLogger(logging.Type.DRIVER)\nlet debugMessagePrinted = false\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getBinary() {\n  const directory = {\n    darwin: 'macos',\n    win32: 'windows',\n    cygwin: 'windows',\n    linux: 'linux',\n  }[platform]\n\n  const file = directory === 'windows' ? 'selenium-manager.exe' : 'selenium-manager'\n\n  let seleniumManagerBasePath = path.join(__dirname, '..', '/bin')\n\n  const filePath = process.env.SE_MANAGER_PATH || path.join(seleniumManagerBasePath, directory, file)\n\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Unable to obtain Selenium Manager at ${filePath}`)\n  }\n\n  if (!debugMessagePrinted) {\n    log_.debug(`Selenium Manager binary found at ${filePath}`)\n    debugMessagePrinted = true // Set the flag to true after printing the debug message\n  }\n\n  return filePath\n}\n\n/**\n * Determines the path of the correct driver\n * @param {Capabilities} options browser options to fetch the driver\n * @returns {{browserPath: string, driverPath: string}} path of the driver and\n * browser location\n */\n\nfunction driverLocation(options) {\n  let args = ['--browser', options.getBrowserName(), '--language-binding', 'javascript', '--output', 'json']\n\n  if (options.getBrowserVersion() && options.getBrowserVersion() !== '') {\n    args.push('--browser-version', options.getBrowserVersion())\n  }\n\n  const vendorOptions =\n    options.get('goog:chromeOptions') || options.get('ms:edgeOptions') || options.get('moz:firefoxOptions')\n  if (vendorOptions && vendorOptions.binary && vendorOptions.binary !== '') {\n    args.push('--browser-path', path.resolve(vendorOptions.binary))\n  }\n\n  const proxyOptions = options.getProxy()\n\n  // Check if proxyOptions exists and has properties\n  if (proxyOptions && Object.keys(proxyOptions).length > 0) {\n    const httpProxy = proxyOptions['httpProxy']\n    const sslProxy = proxyOptions['sslProxy']\n\n    if (httpProxy !== undefined) {\n      args.push('--proxy', httpProxy)\n    } else if (sslProxy !== undefined) {\n      args.push('--proxy', sslProxy)\n    }\n  }\n\n  const smBinary = getBinary()\n  const spawnResult = spawnSync(smBinary, args)\n  let output\n  if (spawnResult.status) {\n    let errorMessage\n    if (spawnResult.stderr.toString()) {\n      errorMessage = spawnResult.stderr.toString()\n    }\n    if (spawnResult.stdout.toString()) {\n      try {\n        output = JSON.parse(spawnResult.stdout.toString())\n        logOutput(output)\n        errorMessage = output.result.message\n      } catch (e) {\n        errorMessage = e.toString()\n      }\n    }\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${errorMessage}`)\n  }\n  try {\n    output = JSON.parse(spawnResult.stdout.toString())\n  } catch (e) {\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${e.toString()}`)\n  }\n\n  // Once driverPath is available, delete browserVersion from payload\n  if (output.result.driver_path) {\n    options.delete(Capability.BROWSER_VERSION)\n  }\n\n  logOutput(output)\n  return {\n    driverPath: output.result.driver_path,\n    browserPath: output.result.browser_path,\n  }\n}\n\nfunction logOutput(output) {\n  for (const key in output.logs) {\n    if (output.logs[key].level === 'WARN') {\n      log_.warning(`${output.logs[key].message}`)\n    }\n    if (['DEBUG', 'INFO'].includes(output.logs[key].level)) {\n      log_.debug(`${output.logs[key].message}`)\n    }\n  }\n}\n\n// PUBLIC API\nmodule.exports = { driverLocation }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}