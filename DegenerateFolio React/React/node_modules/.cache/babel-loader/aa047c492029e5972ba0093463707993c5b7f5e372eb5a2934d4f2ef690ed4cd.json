{"ast":null,"code":"import { extensions, ExtensionType } from \"@pixi/extensions\";\nconst renderers = [];\nextensions.handleByList(ExtensionType.Renderer, renderers);\nfunction autoDetectRenderer(options) {\n  for (const RendererType of renderers) if (RendererType.test(options)) return new RendererType(options);\n  throw new Error(\"Unable to auto-detect a suitable renderer.\");\n}\nexport { autoDetectRenderer };","map":{"version":3,"names":["renderers","extensions","handleByList","ExtensionType","Renderer","autoDetectRenderer","options","RendererType","test","Error"],"sources":["/home/ryoitsu/node_modules/@pixi/core/src/autoDetectRenderer.ts"],"sourcesContent":["import { extensions, ExtensionType } from '@pixi/extensions';\n\nimport type { ICanvas } from '@pixi/settings';\nimport type { IRenderer, IRendererOptions } from './IRenderer';\n\n/**\n * Renderer options supplied to `autoDetectRenderer`.\n * @memberof PIXI\n */\nexport interface IRendererOptionsAuto extends IRendererOptions\n{\n    /**\n     * Force CanvasRenderer even if WebGL is supported. Only available with **pixi.js-legacy**.\n     * @default false\n     */\n    forceCanvas?: boolean;\n}\n\nexport interface IRendererConstructor<VIEW extends ICanvas = ICanvas>\n{\n    test(options?: Partial<IRendererOptionsAuto>): boolean;\n    new (options?: Partial<IRendererOptionsAuto>): IRenderer<VIEW>;\n}\n\n/**\n * Collection of installed Renderers.\n * @ignore\n */\nconst renderers: IRendererConstructor<ICanvas>[] = [];\n\nextensions.handleByList(ExtensionType.Renderer, renderers);\n\n/**\n * This helper function will automatically detect which renderer you should be using.\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n * the browser then this function will return a canvas renderer.\n * @memberof PIXI\n * @function autoDetectRenderer\n * @param options - Options to use.\n */\nexport function autoDetectRenderer<VIEW extends ICanvas = ICanvas>(options?: Partial<IRendererOptionsAuto>): IRenderer<VIEW>\n{\n    for (const RendererType of renderers)\n    {\n        if (RendererType.test(options))\n        {\n            return new RendererType(options) as IRenderer<VIEW>;\n        }\n    }\n\n    throw new Error('Unable to auto-detect a suitable renderer.');\n}\n"],"mappings":";AA4BA,MAAMA,SAAA,GAA6C;AAEnDC,UAAA,CAAWC,YAAA,CAAaC,aAAA,CAAcC,QAAA,EAAUJ,SAAS;AAUlD,SAASK,mBAAmDC,OAAA,EACnE;EACI,WAAWC,YAAA,IAAgBP,SAAA,EAEnB,IAAAO,YAAA,CAAaC,IAAA,CAAKF,OAAO,GAElB,WAAIC,YAAA,CAAaD,OAAO;EAIjC,UAAIG,KAAA,CAAM,4CAA4C;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}