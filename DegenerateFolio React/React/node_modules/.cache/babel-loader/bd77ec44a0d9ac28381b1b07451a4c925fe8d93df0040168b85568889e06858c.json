{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst modular_js_1 = require(\"./abstract/modular.js\");\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\nconst utils_js_1 = require(\"./abstract/utils.js\");\nconst hash_to_curve_js_1 = require(\"./abstract/hash-to-curve.js\");\nconst _shortw_utils_js_1 = require(\"./_shortw_utils.js\");\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3),\n    _6n = BigInt(6),\n    _11n = BigInt(11),\n    _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23),\n    _44n = BigInt(44),\n    _88n = BigInt(88);\n  const b2 = y * y * y % P; // x^3, 11\n  const b3 = b2 * b2 * y % P; // x^7\n  const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;\n  const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;\n  const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;\n  const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;\n  const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;\n  const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;\n  const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;\n  const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;\n  const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;\n  const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;\n  const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;\n  const root = (0, modular_js_1.pow2)(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\nconst Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, {\n  sqrt: sqrtMod\n});\nexports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({\n  a: BigInt(0),\n  // equation params: a, b\n  b: BigInt(7),\n  // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n  Fp,\n  // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n  n: secp256k1N,\n  // Curve order, total count of valid points in the field\n  // Base point (x, y) aka generator point\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  h: BigInt(1),\n  // Cofactor\n  lowS: true,\n  // Allow only low-S signatures by default in sign() and verify()\n  /**\n   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n   */\n  endo: {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    splitScalar: k => {\n      const n = secp256k1N;\n      const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n      const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n      const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n      const b2 = a1;\n      const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n      const c1 = divNearest(b2 * k, n);\n      const c2 = divNearest(-b1 * k, n);\n      let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);\n      let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);\n      const k1neg = k1 > POW_2_128;\n      const k2neg = k2 > POW_2_128;\n      if (k1neg) k1 = n - k1;\n      if (k2neg) k2 = n - k2;\n      if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalar: Endomorphism failed, k=' + k);\n      }\n      return {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      };\n    }\n  }\n}, sha256_1.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = x => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = x => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, c => c.charCodeAt(0)));\n    tagP = (0, utils_js_1.concatBytes)(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = point => point.toRawBytes(true).slice(1);\nconst numTo32b = n => (0, utils_js_1.numberToBytesBE)(n, 32);\nconst modP = x => (0, modular_js_1.mod)(x, secp256k1P);\nconst modN = x => (0, modular_js_1.mod)(x, secp256k1N);\nconst Point = exports.secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n  let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return {\n    scalar: scalar,\n    bytes: pointToBytes(p)\n  };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n  return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {\n  const m = (0, utils_js_1.ensureBytes)('message', message);\n  const {\n    bytes: px,\n    scalar: d\n  } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const {\n    bytes: rx,\n    scalar: k\n  } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n  const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);\n  const m = (0, utils_js_1.ensureBytes)('message', message);\n  const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);\n  try {\n    const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\nexports.schnorr = (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE: utils_js_1.numberToBytesBE,\n    bytesToNumberBE: utils_js_1.bytesToNumberBE,\n    taggedHash,\n    mod: modular_js_1.mod\n  }\n}))();\nconst isoMap = /* @__PURE__ */(() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [\n// xNum\n['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n// xDen\n['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n],\n// yNum\n['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n// yDen\n['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n]].map(i => i.map(j => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */(() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {\n  A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n  B: BigInt('1771'),\n  Z: Fp.create(BigInt('-11'))\n}))();\nconst htf = /* @__PURE__ */(() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, scalars => {\n  const {\n    x,\n    y\n  } = mapSWU(Fp.create(scalars[0]));\n  return isoMap(x, y);\n}, {\n  DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n  encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n  p: Fp.ORDER,\n  m: 1,\n  k: 128,\n  expand: 'xmd',\n  hash: sha256_1.sha256\n}))();\nexports.hashToCurve = (() => htf.hashToCurve)();\nexports.encodeToCurve = (() => htf.encodeToCurve)();","map":{"version":3,"names":["sha256_1","require","utils_1","modular_js_1","weierstrass_js_1","utils_js_1","hash_to_curve_js_1","_shortw_utils_js_1","secp256k1P","BigInt","secp256k1N","_1n","_2n","divNearest","a","b","sqrtMod","y","P","_3n","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","pow2","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","root","Fp","eql","sqr","Error","Field","undefined","sqrt","exports","secp256k1","createCurve","n","Gx","Gy","h","lowS","endo","beta","splitScalar","k","a1","b1","a2","POW_2_128","c1","c2","k1","mod","k2","k1neg","k2neg","sha256","_0n","fe","x","ge","TAGGED_HASH_PREFIXES","taggedHash","tag","messages","tagP","tagH","Uint8Array","from","c","charCodeAt","concatBytes","pointToBytes","point","toRawBytes","slice","numTo32b","numberToBytesBE","modP","modN","Point","ProjectivePoint","GmulAdd","Q","BASE","multiplyAndAddUnsafe","schnorrGetExtPubKey","priv","d_","utils","normPrivateKeyToScalar","p","fromPrivateKey","scalar","hasEvenY","bytes","lift_x","xx","assertValidity","challenge","args","bytesToNumberBE","schnorrGetPublicKey","privateKey","schnorrSign","message","auxRand","randomBytes","m","ensureBytes","px","d","t","rand","k_","rx","e","sig","set","schnorrVerify","signature","publicKey","pub","r","subarray","s","R","toAffine","error","schnorr","getPublicKey","sign","verify","randomPrivateKey","isoMap","isogenyMap","map","i","j","mapSWU","mapToCurveSimpleSWU","A","B","Z","create","htf","createHasher","scalars","DST","encodeDST","ORDER","expand","hash","hashToCurve","encodeToCurve"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}