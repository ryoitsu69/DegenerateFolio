{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst RealmType = {\n  AUDIO_WORKLET: 'audio-worklet',\n  DEDICATED_WORKER: 'dedicated-worker',\n  PAINT_WORKLET: 'paint-worklet',\n  SERVICE_WORKED: 'service-worker',\n  SHARED_WORKED: 'shared-worker',\n  WINDOW: 'window',\n  WORKER: 'worker',\n  WORKLET: 'worklet',\n  findByName(name) {\n    return Object.values(this).find(type => {\n      return typeof type === 'string' && name.toLowerCase() === type.toLowerCase();\n    }) || null;\n  }\n};\nclass RealmInfo {\n  constructor(realmId, origin, realmType) {\n    this.realmId = realmId;\n    this.origin = origin;\n    this.realmType = realmType;\n  }\n  static fromJson(input) {\n    let realmId = null;\n    let origin = null;\n    let realmType = null;\n    let browsingContext = null;\n    let sandbox = null;\n    if ('type' in input) {\n      let typeString = input['type'];\n      realmType = RealmType.findByName(typeString);\n    }\n    if ('realm' in input) {\n      realmId = input['realm'];\n    }\n    if ('origin' in input) {\n      origin = input['origin'];\n    }\n    if ('context' in input) {\n      browsingContext = input['context'];\n    }\n    if ('sandbox' in input) {\n      sandbox = input['sandbox'];\n    }\n    if (realmType === RealmType.WINDOW) {\n      return new WindowRealmInfo(realmId, origin, realmType, browsingContext, sandbox);\n    }\n    return new RealmInfo(realmId, origin, realmType);\n  }\n}\nclass WindowRealmInfo extends RealmInfo {\n  constructor(realmId, origin, realmType, browsingContext, sandbox = null) {\n    super(realmId, origin, realmType);\n    this.browsingContext = browsingContext;\n    this.sandbox = sandbox;\n  }\n}\nmodule.exports = {\n  RealmInfo,\n  RealmType,\n  WindowRealmInfo\n};","map":{"version":3,"names":["RealmType","AUDIO_WORKLET","DEDICATED_WORKER","PAINT_WORKLET","SERVICE_WORKED","SHARED_WORKED","WINDOW","WORKER","WORKLET","findByName","name","Object","values","find","type","toLowerCase","RealmInfo","constructor","realmId","origin","realmType","fromJson","input","browsingContext","sandbox","typeString","WindowRealmInfo","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/bidi/realmInfo.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst RealmType = {\n  AUDIO_WORKLET: 'audio-worklet',\n  DEDICATED_WORKER: 'dedicated-worker',\n  PAINT_WORKLET: 'paint-worklet',\n  SERVICE_WORKED: 'service-worker',\n  SHARED_WORKED: 'shared-worker',\n  WINDOW: 'window',\n  WORKER: 'worker',\n  WORKLET: 'worklet',\n\n  findByName(name) {\n    return (\n      Object.values(this).find((type) => {\n        return typeof type === 'string' && name.toLowerCase() === type.toLowerCase()\n      }) || null\n    )\n  },\n}\n\nclass RealmInfo {\n  constructor(realmId, origin, realmType) {\n    this.realmId = realmId\n    this.origin = origin\n    this.realmType = realmType\n  }\n\n  static fromJson(input) {\n    let realmId = null\n    let origin = null\n    let realmType = null\n    let browsingContext = null\n    let sandbox = null\n\n    if ('type' in input) {\n      let typeString = input['type']\n      realmType = RealmType.findByName(typeString)\n    }\n\n    if ('realm' in input) {\n      realmId = input['realm']\n    }\n\n    if ('origin' in input) {\n      origin = input['origin']\n    }\n\n    if ('context' in input) {\n      browsingContext = input['context']\n    }\n\n    if ('sandbox' in input) {\n      sandbox = input['sandbox']\n    }\n\n    if (realmType === RealmType.WINDOW) {\n      return new WindowRealmInfo(realmId, origin, realmType, browsingContext, sandbox)\n    }\n\n    return new RealmInfo(realmId, origin, realmType)\n  }\n}\n\nclass WindowRealmInfo extends RealmInfo {\n  constructor(realmId, origin, realmType, browsingContext, sandbox = null) {\n    super(realmId, origin, realmType)\n    this.browsingContext = browsingContext\n    this.sandbox = sandbox\n  }\n}\n\nmodule.exports = {\n  RealmInfo,\n  RealmType,\n  WindowRealmInfo,\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,GAAG;EAChBC,aAAa,EAAE,eAAe;EAC9BC,gBAAgB,EAAE,kBAAkB;EACpCC,aAAa,EAAE,eAAe;EAC9BC,cAAc,EAAE,gBAAgB;EAChCC,aAAa,EAAE,eAAe;EAC9BC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,OAAO,EAAE,SAAS;EAElBC,UAAUA,CAACC,IAAI,EAAE;IACf,OACEC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;MACjC,OAAO,OAAOA,IAAI,KAAK,QAAQ,IAAIJ,IAAI,CAACK,WAAW,CAAC,CAAC,KAAKD,IAAI,CAACC,WAAW,CAAC,CAAC;IAC9E,CAAC,CAAC,IAAI,IAAI;EAEd;AACF,CAAC;AAED,MAAMC,SAAS,CAAC;EACdC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAE;IACtC,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEA,OAAOC,QAAQA,CAACC,KAAK,EAAE;IACrB,IAAIJ,OAAO,GAAG,IAAI;IAClB,IAAIC,MAAM,GAAG,IAAI;IACjB,IAAIC,SAAS,GAAG,IAAI;IACpB,IAAIG,eAAe,GAAG,IAAI;IAC1B,IAAIC,OAAO,GAAG,IAAI;IAElB,IAAI,MAAM,IAAIF,KAAK,EAAE;MACnB,IAAIG,UAAU,GAAGH,KAAK,CAAC,MAAM,CAAC;MAC9BF,SAAS,GAAGpB,SAAS,CAACS,UAAU,CAACgB,UAAU,CAAC;IAC9C;IAEA,IAAI,OAAO,IAAIH,KAAK,EAAE;MACpBJ,OAAO,GAAGI,KAAK,CAAC,OAAO,CAAC;IAC1B;IAEA,IAAI,QAAQ,IAAIA,KAAK,EAAE;MACrBH,MAAM,GAAGG,KAAK,CAAC,QAAQ,CAAC;IAC1B;IAEA,IAAI,SAAS,IAAIA,KAAK,EAAE;MACtBC,eAAe,GAAGD,KAAK,CAAC,SAAS,CAAC;IACpC;IAEA,IAAI,SAAS,IAAIA,KAAK,EAAE;MACtBE,OAAO,GAAGF,KAAK,CAAC,SAAS,CAAC;IAC5B;IAEA,IAAIF,SAAS,KAAKpB,SAAS,CAACM,MAAM,EAAE;MAClC,OAAO,IAAIoB,eAAe,CAACR,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEG,eAAe,EAAEC,OAAO,CAAC;IAClF;IAEA,OAAO,IAAIR,SAAS,CAACE,OAAO,EAAEC,MAAM,EAAEC,SAAS,CAAC;EAClD;AACF;AAEA,MAAMM,eAAe,SAASV,SAAS,CAAC;EACtCC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEG,eAAe,EAAEC,OAAO,GAAG,IAAI,EAAE;IACvE,KAAK,CAACN,OAAO,EAAEC,MAAM,EAAEC,SAAS,CAAC;IACjC,IAAI,CAACG,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;AACF;AAEAG,MAAM,CAACC,OAAO,GAAG;EACfZ,SAAS;EACThB,SAAS;EACT0B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}