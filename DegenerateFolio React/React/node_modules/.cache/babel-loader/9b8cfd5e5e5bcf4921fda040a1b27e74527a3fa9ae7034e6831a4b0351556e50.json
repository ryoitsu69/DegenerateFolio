{"ast":null,"code":"import { isHex, isU8a, u8aToU8a } from '@polkadot/util';\nimport { Option } from '../base/Option.js';\nimport { bool as Bool } from '../native/Bool.js';\nfunction decodeU8a(registry, value) {\n  // Encoded as -\n  //  - 0 = None\n  //  - 1 = True\n  //  - 2 = False\n  return value[0] === 0 ? null : new Bool(registry, value[0] === 1);\n}\n/**\n * @name OptionBool\n * @description A specific implementation of Option<bool> than allows for single-byte encoding\n */\nexport class OptionBool extends Option {\n  constructor(registry, value) {\n    super(registry, Bool, isU8a(value) || isHex(value) ? decodeU8a(registry, u8aToU8a(value)) : value);\n    this.initialU8aLength = 1;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n  get encodedLength() {\n    return 1 | 0;\n  }\n  /**\n   * @description Checks if the value is an empty value (always false)\n   */\n  get isFalse() {\n    return this.isSome ? !this.value.valueOf() : false;\n  }\n  /**\n   * @description Checks if the value is an empty value (always false)\n   */\n  get isTrue() {\n    return this.isSome ? this.value.valueOf() : false;\n  }\n  /**\n   * @description Returns a breakdown of the hex encoding for this Codec\n   */\n  inspect() {\n    return {\n      outer: [this.toU8a()]\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n  toRawType(isBare) {\n    return isBare ? 'bool' : 'Option<bool>';\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  toU8a(isBare) {\n    if (isBare) {\n      return super.toU8a(true);\n    }\n    return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);\n  }\n}","map":{"version":3,"names":["isHex","isU8a","u8aToU8a","Option","bool","Bool","decodeU8a","registry","value","OptionBool","constructor","initialU8aLength","encodedLength","isFalse","isSome","valueOf","isTrue","inspect","outer","toU8a","toRawType","isBare","Uint8Array"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/types-codec/extended/OptionBool.js"],"sourcesContent":["import { isHex, isU8a, u8aToU8a } from '@polkadot/util';\nimport { Option } from '../base/Option.js';\nimport { bool as Bool } from '../native/Bool.js';\nfunction decodeU8a(registry, value) {\n    // Encoded as -\n    //  - 0 = None\n    //  - 1 = True\n    //  - 2 = False\n    return value[0] === 0\n        ? null\n        : new Bool(registry, value[0] === 1);\n}\n/**\n * @name OptionBool\n * @description A specific implementation of Option<bool> than allows for single-byte encoding\n */\nexport class OptionBool extends Option {\n    constructor(registry, value) {\n        super(registry, Bool, isU8a(value) || isHex(value)\n            ? decodeU8a(registry, u8aToU8a(value))\n            : value);\n        this.initialU8aLength = 1;\n    }\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get encodedLength() {\n        return 1 | 0;\n    }\n    /**\n     * @description Checks if the value is an empty value (always false)\n     */\n    get isFalse() {\n        return this.isSome\n            ? !this.value.valueOf()\n            : false;\n    }\n    /**\n     * @description Checks if the value is an empty value (always false)\n     */\n    get isTrue() {\n        return this.isSome\n            ? this.value.valueOf()\n            : false;\n    }\n    /**\n     * @description Returns a breakdown of the hex encoding for this Codec\n     */\n    inspect() {\n        return { outer: [this.toU8a()] };\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n    toRawType(isBare) {\n        return isBare\n            ? 'bool'\n            : 'Option<bool>';\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    toU8a(isBare) {\n        if (isBare) {\n            return super.toU8a(true);\n        }\n        return this.isSome\n            ? new Uint8Array([this.isTrue ? 1 : 2])\n            : new Uint8Array([0]);\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;AACvD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,IAAI,IAAIC,IAAI,QAAQ,mBAAmB;AAChD,SAASC,SAASA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EAChC;EACA;EACA;EACA;EACA,OAAOA,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GACf,IAAI,GACJ,IAAIH,IAAI,CAACE,QAAQ,EAAEC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,SAASN,MAAM,CAAC;EACnCO,WAAWA,CAACH,QAAQ,EAAEC,KAAK,EAAE;IACzB,KAAK,CAACD,QAAQ,EAAEF,IAAI,EAAEJ,KAAK,CAACO,KAAK,CAAC,IAAIR,KAAK,CAACQ,KAAK,CAAC,GAC5CF,SAAS,CAACC,QAAQ,EAAEL,QAAQ,CAACM,KAAK,CAAC,CAAC,GACpCA,KAAK,CAAC;IACZ,IAAI,CAACG,gBAAgB,GAAG,CAAC;EAC7B;EACA;AACJ;AACA;EACI,IAAIC,aAAaA,CAAA,EAAG;IAChB,OAAO,CAAC,GAAG,CAAC;EAChB;EACA;AACJ;AACA;EACI,IAAIC,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,MAAM,GACZ,CAAC,IAAI,CAACN,KAAK,CAACO,OAAO,CAAC,CAAC,GACrB,KAAK;EACf;EACA;AACJ;AACA;EACI,IAAIC,MAAMA,CAAA,EAAG;IACT,OAAO,IAAI,CAACF,MAAM,GACZ,IAAI,CAACN,KAAK,CAACO,OAAO,CAAC,CAAC,GACpB,KAAK;EACf;EACA;AACJ;AACA;EACIE,OAAOA,CAAA,EAAG;IACN,OAAO;MAAEC,KAAK,EAAE,CAAC,IAAI,CAACC,KAAK,CAAC,CAAC;IAAE,CAAC;EACpC;EACA;AACJ;AACA;EACIC,SAASA,CAACC,MAAM,EAAE;IACd,OAAOA,MAAM,GACP,MAAM,GACN,cAAc;EACxB;EACA;AACJ;AACA;AACA;EACIF,KAAKA,CAACE,MAAM,EAAE;IACV,IAAIA,MAAM,EAAE;MACR,OAAO,KAAK,CAACF,KAAK,CAAC,IAAI,CAAC;IAC5B;IACA,OAAO,IAAI,CAACL,MAAM,GACZ,IAAIQ,UAAU,CAAC,CAAC,IAAI,CAACN,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GACrC,IAAIM,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7B;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}