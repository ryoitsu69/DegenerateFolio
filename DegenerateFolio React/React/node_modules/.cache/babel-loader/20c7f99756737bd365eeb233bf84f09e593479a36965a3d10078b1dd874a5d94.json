{"ast":null,"code":"import { FederatedEvent } from '../events/FederatedEvent.mjs';\nimport { ExtensionType } from '../extensions/Extensions.mjs';\nimport { isMobile } from '../utils/browser/isMobile.mjs';\nimport { removeItems } from '../utils/data/removeItems.mjs';\n\"use strict\";\nconst KEY_CODE_TAB = 9;\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1e3;\nconst DIV_HOOK_POS_Y = -1e3;\nconst DIV_HOOK_ZINDEX = 2;\nclass AccessibilitySystem {\n  // 2fps\n  // eslint-disable-next-line jsdoc/require-param\n  /**\n   * @param {WebGLRenderer|WebGPURenderer} renderer - A reference to the current renderer\n   */\n  constructor(renderer, _mobileInfo = isMobile) {\n    this._mobileInfo = _mobileInfo;\n    /** Setting this to true will visually show the divs. */\n    this.debug = false;\n    /** Internal variable, see isActive getter. */\n    this._isActive = false;\n    /** Internal variable, see isMobileAccessibility getter. */\n    this._isMobileAccessibility = false;\n    /** A simple pool for storing divs. */\n    this._pool = [];\n    /** This is a tick used to check if an object is no longer being rendered. */\n    this._renderId = 0;\n    /** The array of currently active accessible items. */\n    this._children = [];\n    /** Count to throttle div updates on android devices. */\n    this._androidUpdateCount = 0;\n    /**  The frequency to update the div elements. */\n    this._androidUpdateFrequency = 500;\n    this._hookDiv = null;\n    if (_mobileInfo.tablet || _mobileInfo.phone) {\n      this._createTouchHook();\n    }\n    const div = document.createElement(\"div\");\n    div.style.width = `${DIV_TOUCH_SIZE}px`;\n    div.style.height = `${DIV_TOUCH_SIZE}px`;\n    div.style.position = \"absolute\";\n    div.style.top = `${DIV_TOUCH_POS_X}px`;\n    div.style.left = `${DIV_TOUCH_POS_Y}px`;\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    this._div = div;\n    this._renderer = renderer;\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    globalThis.addEventListener(\"keydown\", this._onKeyDown, false);\n  }\n  /**\n   * Value of `true` if accessibility is currently active and accessibility layers are showing.\n   * @member {boolean}\n   * @readonly\n   */\n  get isActive() {\n    return this._isActive;\n  }\n  /**\n   * Value of `true` if accessibility is enabled for touch devices.\n   * @member {boolean}\n   * @readonly\n   */\n  get isMobileAccessibility() {\n    return this._isMobileAccessibility;\n  }\n  get hookDiv() {\n    return this._hookDiv;\n  }\n  /**\n   * Creates the touch hooks.\n   * @private\n   */\n  _createTouchHook() {\n    const hookDiv = document.createElement(\"button\");\n    hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n    hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n    hookDiv.style.position = \"absolute\";\n    hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n    hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = \"#FF0000\";\n    hookDiv.title = \"select to enable accessibility for this content\";\n    hookDiv.addEventListener(\"focus\", () => {\n      this._isMobileAccessibility = true;\n      this._activate();\n      this._destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  }\n  /**\n   * Destroys the touch hooks.\n   * @private\n   */\n  _destroyTouchHook() {\n    if (!this._hookDiv) {\n      return;\n    }\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  }\n  /**\n   * Activating will cause the Accessibility layer to be shown.\n   * This is called when a user presses the tab key.\n   * @private\n   */\n  _activate() {\n    if (this._isActive) {\n      return;\n    }\n    this._isActive = true;\n    globalThis.document.addEventListener(\"mousemove\", this._onMouseMove, true);\n    globalThis.removeEventListener(\"keydown\", this._onKeyDown, false);\n    this._renderer.runners.postrender.add(this);\n    this._renderer.view.canvas.parentNode?.appendChild(this._div);\n  }\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden.\n   * This is called when a user moves the mouse.\n   * @private\n   */\n  _deactivate() {\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n    this._isActive = false;\n    globalThis.document.removeEventListener(\"mousemove\", this._onMouseMove, true);\n    globalThis.addEventListener(\"keydown\", this._onKeyDown, false);\n    this._renderer.runners.postrender.remove(this);\n    this._div.parentNode?.removeChild(this._div);\n  }\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   * @private\n   * @param {Container} container - The Container to check.\n   */\n  _updateAccessibleObjects(container) {\n    if (!container.visible || !container.accessibleChildren) {\n      return;\n    }\n    if (container.accessible && container.isInteractive()) {\n      if (!container._accessibleActive) {\n        this._addChild(container);\n      }\n      container._renderId = this._renderId;\n    }\n    const children = container.children;\n    if (children) {\n      for (let i = 0; i < children.length; i++) {\n        this._updateAccessibleObjects(children[i]);\n      }\n    }\n  }\n  /**\n   * Runner init called, view is available at this point.\n   * @ignore\n   */\n  init(options) {\n    this.debug = options?.debug ?? this.debug;\n    this._renderer.runners.postrender.remove(this);\n  }\n  /**\n   * Runner postrender was called, ensure that all divs are mapped correctly to their Containers.\n   * Only fires while active.\n   * @ignore\n   */\n  postrender() {\n    const now = performance.now();\n    if (this._mobileInfo.android.device && now < this._androidUpdateCount) {\n      return;\n    }\n    this._androidUpdateCount = now + this._androidUpdateFrequency;\n    if (!this._renderer.renderingToScreen || !this._renderer.view.canvas) {\n      return;\n    }\n    if (this._renderer.lastObjectRendered) {\n      this._updateAccessibleObjects(this._renderer.lastObjectRendered);\n    }\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this._renderer.view.canvas.getBoundingClientRect();\n    const {\n      width: viewWidth,\n      height: viewHeight,\n      resolution\n    } = this._renderer;\n    const sx = width / viewWidth * resolution;\n    const sy = height / viewHeight * resolution;\n    let div = this._div;\n    div.style.left = `${x}px`;\n    div.style.top = `${y}px`;\n    div.style.width = `${viewWidth}px`;\n    div.style.height = `${viewHeight}px`;\n    for (let i = 0; i < this._children.length; i++) {\n      const child = this._children[i];\n      if (child._renderId !== this._renderId) {\n        child._accessibleActive = false;\n        removeItems(this._children, i, 1);\n        this._div.removeChild(child._accessibleDiv);\n        this._pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        div = child._accessibleDiv;\n        let hitArea = child.hitArea;\n        const wt = child.worldTransform;\n        if (child.hitArea) {\n          div.style.left = `${(wt.tx + hitArea.x * wt.a) * sx}px`;\n          div.style.top = `${(wt.ty + hitArea.y * wt.d) * sy}px`;\n          div.style.width = `${hitArea.width * wt.a * sx}px`;\n          div.style.height = `${hitArea.height * wt.d * sy}px`;\n        } else {\n          hitArea = child.getBounds().rectangle;\n          this._capHitArea(hitArea);\n          div.style.left = `${hitArea.x * sx}px`;\n          div.style.top = `${hitArea.y * sy}px`;\n          div.style.width = `${hitArea.width * sx}px`;\n          div.style.height = `${hitArea.height * sy}px`;\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle || \"\";\n          }\n          if (div.getAttribute(\"aria-label\") !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute(\"aria-label\", child.accessibleHint || \"\");\n          }\n        }\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle || \"\";\n          div.tabIndex = child.tabIndex;\n          if (this.debug) {\n            this._updateDebugHTML(div);\n          }\n        }\n      }\n    }\n    this._renderId++;\n  }\n  /**\n   * private function that will visually add the information to the\n   * accessibility div\n   * @param {HTMLElement} div -\n   */\n  _updateDebugHTML(div) {\n    div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n  }\n  /**\n   * Adjust the hit area based on the bounds of a display object\n   * @param {Rectangle} hitArea - Bounds of the child\n   */\n  _capHitArea(hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n    const {\n      width: viewWidth,\n      height: viewHeight\n    } = this._renderer;\n    if (hitArea.x + hitArea.width > viewWidth) {\n      hitArea.width = viewWidth - hitArea.x;\n    }\n    if (hitArea.y + hitArea.height > viewHeight) {\n      hitArea.height = viewHeight - hitArea.y;\n    }\n  }\n  /**\n   * Adds a Container to the accessibility manager\n   * @private\n   * @param {Container} container - The child to make accessible.\n   */\n  _addChild(container) {\n    let div = this._pool.pop();\n    if (!div) {\n      div = document.createElement(\"button\");\n      div.style.width = `${DIV_TOUCH_SIZE}px`;\n      div.style.height = `${DIV_TOUCH_SIZE}px`;\n      div.style.backgroundColor = this.debug ? \"rgba(255,255,255,0.5)\" : \"transparent\";\n      div.style.position = \"absolute\";\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = \"none\";\n      if (navigator.userAgent.toLowerCase().includes(\"chrome\")) {\n        div.setAttribute(\"aria-live\", \"off\");\n      } else {\n        div.setAttribute(\"aria-live\", \"polite\");\n      }\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        div.setAttribute(\"aria-relevant\", \"additions\");\n      } else {\n        div.setAttribute(\"aria-relevant\", \"text\");\n      }\n      div.addEventListener(\"click\", this._onClick.bind(this));\n      div.addEventListener(\"focus\", this._onFocus.bind(this));\n      div.addEventListener(\"focusout\", this._onFocusOut.bind(this));\n    }\n    div.style.pointerEvents = container.accessiblePointerEvents;\n    div.type = container.accessibleType;\n    if (container.accessibleTitle && container.accessibleTitle !== null) {\n      div.title = container.accessibleTitle;\n    } else if (!container.accessibleHint || container.accessibleHint === null) {\n      div.title = `container ${container.tabIndex}`;\n    }\n    if (container.accessibleHint && container.accessibleHint !== null) {\n      div.setAttribute(\"aria-label\", container.accessibleHint);\n    }\n    if (this.debug) {\n      this._updateDebugHTML(div);\n    }\n    container._accessibleActive = true;\n    container._accessibleDiv = div;\n    div.container = container;\n    this._children.push(container);\n    this._div.appendChild(container._accessibleDiv);\n    container._accessibleDiv.tabIndex = container.tabIndex;\n  }\n  /**\n   * Dispatch events with the EventSystem.\n   * @param e\n   * @param type\n   * @private\n   */\n  _dispatchEvent(e, type) {\n    const {\n      container: target\n    } = e.target;\n    const boundary = this._renderer.events.rootBoundary;\n    const event = Object.assign(new FederatedEvent(boundary), {\n      target\n    });\n    boundary.rootTarget = this._renderer.lastObjectRendered;\n    type.forEach(type2 => boundary.dispatchEvent(event, type2));\n  }\n  /**\n   * Maps the div button press to pixi's EventSystem (click)\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n  _onClick(e) {\n    this._dispatchEvent(e, [\"click\", \"pointertap\", \"tap\"]);\n  }\n  /**\n   * Maps the div focus events to pixi's EventSystem (mouseover)\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n  _onFocus(e) {\n    if (!e.target.getAttribute(\"aria-live\")) {\n      e.target.setAttribute(\"aria-live\", \"assertive\");\n    }\n    this._dispatchEvent(e, [\"mouseover\"]);\n  }\n  /**\n   * Maps the div focus events to pixi's EventSystem (mouseout)\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n  _onFocusOut(e) {\n    if (!e.target.getAttribute(\"aria-live\")) {\n      e.target.setAttribute(\"aria-live\", \"polite\");\n    }\n    this._dispatchEvent(e, [\"mouseout\"]);\n  }\n  /**\n   * Is called when a key is pressed\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n  _onKeyDown(e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n    this._activate();\n  }\n  /**\n   * Is called when the mouse moves across the renderer element\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n  _onMouseMove(e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n    this._deactivate();\n  }\n  /** Destroys the accessibility manager */\n  destroy() {\n    this._destroyTouchHook();\n    this._div = null;\n    globalThis.document.removeEventListener(\"mousemove\", this._onMouseMove, true);\n    globalThis.removeEventListener(\"keydown\", this._onKeyDown);\n    this._pool = null;\n    this._children = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nAccessibilitySystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem],\n  name: \"accessibility\"\n};\nexport { AccessibilitySystem };","map":{"version":3,"names":["KEY_CODE_TAB","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","DIV_HOOK_ZINDEX","AccessibilitySystem","constructor","renderer","_mobileInfo","isMobile","debug","_isActive","_isMobileAccessibility","_pool","_renderId","_children","_androidUpdateCount","_androidUpdateFrequency","_hookDiv","tablet","phone","_createTouchHook","div","document","createElement","style","width","height","position","top","left","zIndex","toString","_div","_renderer","_onKeyDown","bind","_onMouseMove","globalThis","addEventListener","isActive","isMobileAccessibility","hookDiv","backgroundColor","title","_activate","_destroyTouchHook","body","appendChild","removeChild","removeEventListener","runners","postrender","add","view","canvas","parentNode","_deactivate","remove","_updateAccessibleObjects","container","visible","accessibleChildren","accessible","isInteractive","_accessibleActive","_addChild","children","i","length","init","options","now","performance","android","device","renderingToScreen","lastObjectRendered","x","y","getBoundingClientRect","viewWidth","viewHeight","resolution","sx","sy","child","removeItems","_accessibleDiv","push","hitArea","wt","worldTransform","tx","a","ty","d","getBounds","rectangle","_capHitArea","accessibleTitle","getAttribute","accessibleHint","setAttribute","tabIndex","_updateDebugHTML","innerHTML","type","pop","borderStyle","navigator","userAgent","toLowerCase","includes","match","_onClick","_onFocus","_onFocusOut","pointerEvents","accessiblePointerEvents","accessibleType","_dispatchEvent","e","target","boundary","events","rootBoundary","event","Object","assign","FederatedEvent","rootTarget","forEach","type2","dispatchEvent","keyCode","movementX","movementY","destroy","extension","ExtensionType","WebGLSystem","WebGPUSystem","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/accessibility/AccessibilitySystem.ts"],"sourcesContent":["import { FederatedEvent } from '../events/FederatedEvent';\nimport { ExtensionType } from '../extensions/Extensions';\nimport { isMobile } from '../utils/browser/isMobile';\nimport { removeItems } from '../utils/data/removeItems';\nimport { type AccessibleHTMLElement } from './accessibilityTarget';\n\nimport type { Rectangle } from '../maths/shapes/Rectangle';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { isMobileResult } from '../utils/browser/isMobile';\n\n/**\n * The accessibility module recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * This module is a mixin for {@link AbstractRenderer} and will need to be imported if you are managing your own renderer.\n * Usage:\n * ```js\n * import 'pixi.js/accessibility';\n * ```\n * To make an object accessible do the following:\n * ```js\n * container.accessible = true; // object is now accessible to screen readers!\n * ```\n * See {@link accessibility.AccessibleOptions} for more accessibility related properties that can be set.\n * @namespace accessibility\n */\n\n/** @ignore */\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/** @ignore */\nexport interface AccessibilityOptions\n{\n    /** Setting this to true will visually show the divs. */\n    debug?: boolean;\n}\n\n/**\n * The Accessibility system recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A Container can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.accessibility`\n * @memberof accessibility\n */\nexport class AccessibilitySystem implements System<AccessibilityOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'accessibility',\n    } as const;\n\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     * @type {WebGLRenderer|WebGPURenderer}\n     */\n    private _renderer: Renderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement | null;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private _div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private _pool: AccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private _renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private _children: Container[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private _androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private readonly _androidUpdateFrequency = 500; // 2fps\n\n    // eslint-disable-next-line jsdoc/require-param\n    /**\n     * @param {WebGLRenderer|WebGPURenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer, private readonly _mobileInfo: isMobileResult = isMobile)\n    {\n        this._hookDiv = null;\n\n        if (_mobileInfo.tablet || _mobileInfo.phone)\n        {\n            this._createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this._div = div;\n        this._renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    get hookDiv()\n    {\n        return this._hookDiv;\n    }\n\n    /**\n     * Creates the touch hooks.\n     * @private\n     */\n    private _createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this._activate();\n            this._destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     * @private\n     */\n    private _destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     * @private\n     */\n    private _activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this._renderer.runners.postrender.add(this);\n        this._renderer.view.canvas.parentNode?.appendChild(this._div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     * @private\n     */\n    private _deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this._renderer.runners.postrender.remove(this);\n        this._div.parentNode?.removeChild(this._div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     * @private\n     * @param {Container} container - The Container to check.\n     */\n    private _updateAccessibleObjects(container: Container): void\n    {\n        if (!container.visible || !container.accessibleChildren)\n        {\n            return;\n        }\n\n        if (container.accessible && container.isInteractive())\n        {\n            if (!container._accessibleActive)\n            {\n                this._addChild(container);\n            }\n\n            container._renderId = this._renderId;\n        }\n\n        const children = container.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this._updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Runner init called, view is available at this point.\n     * @ignore\n     */\n    public init(options?: AccessibilityOptions)\n    {\n        this.debug = options?.debug ?? this.debug;\n        this._renderer.runners.postrender.remove(this);\n    }\n\n    /**\n     * Runner postrender was called, ensure that all divs are mapped correctly to their Containers.\n     * Only fires while active.\n     * @ignore\n     */\n    public postrender(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (this._mobileInfo.android.device && now < this._androidUpdateCount)\n        {\n            return;\n        }\n\n        this._androidUpdateCount = now + this._androidUpdateFrequency;\n\n        if (!this._renderer.renderingToScreen || !this._renderer.view.canvas)\n        {\n            return;\n        }\n\n        // update children...\n        if (this._renderer.lastObjectRendered)\n        {\n            this._updateAccessibleObjects(this._renderer.lastObjectRendered as Container);\n        }\n\n        const { x, y, width, height } = this._renderer.view.canvas.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this._renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this._div;\n\n        div.style.left = `${x}px`;\n        div.style.top = `${y}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this._children.length; i++)\n        {\n            const child = this._children[i];\n\n            if (child._renderId !== this._renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this._children, i, 1);\n                this._div.removeChild(child._accessibleDiv);\n                this._pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds().rectangle;\n\n                    this._capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle || '';\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint || '');\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle || '';\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug)\n                    {\n                        this._updateDebugHTML(div);\n                    }\n                }\n            }\n        }\n\n        // increment the render id..\n        this._renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessibility div\n     * @param {HTMLElement} div -\n     */\n    private _updateDebugHTML(div: AccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     * @param {Rectangle} hitArea - Bounds of the child\n     */\n    private _capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this._renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a Container to the accessibility manager\n     * @private\n     * @param {Container} container - The child to make accessible.\n     */\n    private _addChild<T extends Container>(container: T): void\n    {\n        //    this.activate();\n\n        let div = this._pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().includes('chrome'))\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = container.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = container.accessibleType;\n\n        if (container.accessibleTitle && container.accessibleTitle !== null)\n        {\n            div.title = container.accessibleTitle;\n        }\n        else if (!container.accessibleHint\n            || container.accessibleHint === null)\n        {\n            div.title = `container ${container.tabIndex}`;\n        }\n\n        if (container.accessibleHint\n            && container.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', container.accessibleHint);\n        }\n\n        if (this.debug)\n        {\n            this._updateDebugHTML(div);\n        }\n\n        container._accessibleActive = true;\n        container._accessibleDiv = div;\n        div.container = container;\n\n        this._children.push(container);\n        this._div.appendChild(container._accessibleDiv);\n        container._accessibleDiv.tabIndex = container.tabIndex;\n    }\n\n    /**\n     * Dispatch events with the EventSystem.\n     * @param e\n     * @param type\n     * @private\n     */\n    private _dispatchEvent(e: UIEvent, type: string[]): void\n    {\n        const { container: target } = e.target as AccessibleHTMLElement;\n        const boundary = this._renderer.events.rootBoundary;\n        const event: FederatedEvent = Object.assign(new FederatedEvent(boundary), { target });\n\n        boundary.rootTarget = this._renderer.lastObjectRendered as Container;\n        type.forEach((type) => boundary.dispatchEvent(event, type));\n    }\n\n    /**\n     * Maps the div button press to pixi's EventSystem (click)\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        this._dispatchEvent(e, ['click', 'pointertap', 'tap']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseover)\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        this._dispatchEvent(e, ['mouseover']);\n    }\n\n    /**\n     * Maps the div focus events to pixi's EventSystem (mouseout)\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        this._dispatchEvent(e, ['mouseout']);\n    }\n\n    /**\n     * Is called when a key is pressed\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this._activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this._deactivate();\n    }\n\n    /** Destroys the accessibility manager */\n    public destroy(): void\n    {\n        this._destroyTouchHook();\n        this._div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this._pool = null;\n        this._children = null;\n        this._renderer = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}