{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst util_1 = require(\"../helpers/util\");\nconst ZodError_1 = require(\"../ZodError\");\nconst errorMap = (issue, _ctx) => {\n  let message;\n  switch (issue.code) {\n    case ZodError_1.ZodIssueCode.invalid_type:\n      if (issue.received === util_1.ZodParsedType.undefined) {\n        message = \"Required\";\n      } else {\n        message = `Expected ${issue.expected}, received ${issue.received}`;\n      }\n      break;\n    case ZodError_1.ZodIssueCode.invalid_literal:\n      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;\n      break;\n    case ZodError_1.ZodIssueCode.unrecognized_keys:\n      message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, \", \")}`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_union:\n      message = `Invalid input`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_union_discriminator:\n      message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_enum_value:\n      message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_arguments:\n      message = `Invalid function arguments`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_return_type:\n      message = `Invalid function return type`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_date:\n      message = `Invalid date`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_string:\n      if (typeof issue.validation === \"object\") {\n        if (\"includes\" in issue.validation) {\n          message = `Invalid input: must include \"${issue.validation.includes}\"`;\n          if (typeof issue.validation.position === \"number\") {\n            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n          }\n        } else if (\"startsWith\" in issue.validation) {\n          message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n        } else if (\"endsWith\" in issue.validation) {\n          message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n        } else {\n          util_1.util.assertNever(issue.validation);\n        }\n      } else if (issue.validation !== \"regex\") {\n        message = `Invalid ${issue.validation}`;\n      } else {\n        message = \"Invalid\";\n      }\n      break;\n    case ZodError_1.ZodIssueCode.too_small:\n      if (issue.type === \"array\") message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;else if (issue.type === \"string\") message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;else message = \"Invalid input\";\n      break;\n    case ZodError_1.ZodIssueCode.too_big:\n      if (issue.type === \"array\") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;else if (issue.type === \"string\") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === \"bigint\") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;else message = \"Invalid input\";\n      break;\n    case ZodError_1.ZodIssueCode.custom:\n      message = `Invalid input`;\n      break;\n    case ZodError_1.ZodIssueCode.invalid_intersection_types:\n      message = `Intersection results could not be merged`;\n      break;\n    case ZodError_1.ZodIssueCode.not_multiple_of:\n      message = `Number must be a multiple of ${issue.multipleOf}`;\n      break;\n    case ZodError_1.ZodIssueCode.not_finite:\n      message = \"Number must be finite\";\n      break;\n    default:\n      message = _ctx.defaultError;\n      util_1.util.assertNever(issue);\n  }\n  return {\n    message\n  };\n};\nexports.default = errorMap;","map":{"version":3,"names":["Object","defineProperty","exports","value","util_1","require","ZodError_1","errorMap","issue","_ctx","message","code","ZodIssueCode","invalid_type","received","ZodParsedType","undefined","expected","invalid_literal","JSON","stringify","util","jsonStringifyReplacer","unrecognized_keys","joinValues","keys","invalid_union","invalid_union_discriminator","options","invalid_enum_value","invalid_arguments","invalid_return_type","invalid_date","invalid_string","validation","includes","position","startsWith","endsWith","assertNever","too_small","type","exact","inclusive","minimum","Date","Number","too_big","maximum","custom","invalid_intersection_types","not_multiple_of","multipleOf","not_finite","defaultError","default"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/zod/lib/locales/en.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../helpers/util\");\nconst ZodError_1 = require(\"../ZodError\");\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodError_1.ZodIssueCode.invalid_type:\n            if (issue.received === util_1.ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodError_1.ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;\n            break;\n        case ZodError_1.ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util_1.util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodError_1.ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodError_1.ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodError_1.ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodError_1.ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodError_1.ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodError_1.ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util_1.util.assertNever(issue);\n    }\n    return { message };\n};\nexports.default = errorMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}