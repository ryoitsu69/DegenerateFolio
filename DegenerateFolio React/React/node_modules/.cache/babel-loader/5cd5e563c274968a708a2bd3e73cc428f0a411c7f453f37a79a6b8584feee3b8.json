{"ast":null,"code":"\"use strict\";\n\nclass ObservablePoint {\n  /**\n   * Creates a new `ObservablePoint`\n   * @param observer - Observer to pass to listen for change events.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  constructor(observer, x, y) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._observer = observer;\n  }\n  /**\n   * Creates a clone of this point.\n   * @param observer - Optional observer to pass to the new observable point.\n   * @returns a copy of this observable point\n   */\n  clone(observer) {\n    return new ObservablePoint(observer ?? this._observer, this._x, this._y);\n  }\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns The observable point instance itself\n   */\n  set(x = 0, y = x) {\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this._observer._onUpdate(this);\n    }\n    return this;\n  }\n  /**\n   * Copies x and y from the given point (`p`)\n   * @param p - The point to copy from. Can be any of type that is or extends `PointData`\n   * @returns The observable point instance itself\n   */\n  copyFrom(p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this._observer._onUpdate(this);\n    }\n    return this;\n  }\n  /**\n   * Copies this point's x and y into that of the given point (`p`)\n   * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n   * @returns The point (`p`) with values updated\n   */\n  copyTo(p) {\n    p.set(this._x, this._y);\n    return p;\n  }\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n  equals(p) {\n    return p.x === this._x && p.y === this._y;\n  }\n  toString() {\n    return `[pixi.js/math:ObservablePoint x=${0} y=${0} scope=${this._observer}]`;\n  }\n  /** Position of the observable point on the x axis. */\n  get x() {\n    return this._x;\n  }\n  set x(value) {\n    if (this._x !== value) {\n      this._x = value;\n      this._observer._onUpdate(this);\n    }\n  }\n  /** Position of the observable point on the y axis. */\n  get y() {\n    return this._y;\n  }\n  set y(value) {\n    if (this._y !== value) {\n      this._y = value;\n      this._observer._onUpdate(this);\n    }\n  }\n}\nexport { ObservablePoint };","map":{"version":3,"names":["ObservablePoint","constructor","observer","x","y","_x","_y","_observer","clone","set","_onUpdate","copyFrom","p","copyTo","equals","toString","value"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/point/ObservablePoint.ts"],"sourcesContent":["import type { PointData } from './PointData';\nimport type { PointLike } from './PointLike';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ObservablePoint extends PixiMixins.ObservablePoint { }\n\n/**\n * Observer used to listen for observable point changes.\n * @memberof maths\n */\nexport interface Observer<T>\n{\n    /** Callback to call when the point has updated. */\n    _onUpdate: (point?: T) => void;\n}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers the `onUpdate` method on an observer when the point's position is changed.\n * @memberof maths\n */\nexport class ObservablePoint implements PointLike\n{\n    /** @ignore */\n    public _x: number;\n    /** @ignore */\n    public _y: number;\n\n    /** This object used to call the `onUpdate` callback when the point changes. */\n    private readonly _observer: Observer<ObservablePoint>;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param observer - Observer to pass to listen for change events.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(observer: Observer<ObservablePoint>, x?: number, y?: number)\n    {\n        this._x = x || 0;\n        this._y = y || 0;\n\n        this._observer = observer;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * @param observer - Optional observer to pass to the new observable point.\n     * @returns a copy of this observable point\n     */\n    public clone(observer?: Observer<ObservablePoint>): ObservablePoint\n    {\n        return new ObservablePoint(observer ?? this._observer, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    public set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this._observer._onUpdate(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `PointData`\n     * @returns The observable point instance itself\n     */\n    public copyFrom(p: PointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this._observer._onUpdate(this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `PointData`\n     * @returns The point (`p`) with values updated\n     */\n    public copyTo<T extends PointLike>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    public equals(p: PointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:ObservablePoint x=${0} y=${0} scope=${this._observer}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this._observer._onUpdate(this);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this._observer._onUpdate(this);\n        }\n    }\n}\n"],"mappings":";;AAuBO,MAAMA,eACb;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeIC,YAAYC,QAAqC,EAAAC,CAAA,EAAYC,CAC7D;IACI,KAAKC,EAAA,GAAKF,CAAK;IACf,KAAKG,EAAA,GAAKF,CAAK;IAEf,KAAKG,SAAY,GAAAL,QAAA;EAAA;EACrB;AAAA;AAAA;AAAA;AAAA;EAOOM,MAAMN,QACb;IACW,WAAIF,eAAA,CAAgBE,QAAY,SAAKK,SAAA,EAAW,IAAK,CAAAF,EAAA,EAAI,KAAKC,EAAE;EAAA;EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASOG,GAAIA,CAAAN,CAAA,GAAI,CAAG,EAAAC,CAAA,GAAID,CACtB;IACI,IAAI,IAAK,CAAAE,EAAA,KAAOF,CAAK,SAAKG,EAAA,KAAOF,CACjC;MACI,KAAKC,EAAK,GAAAF,CAAA;MACV,KAAKG,EAAK,GAAAF,CAAA;MACL,KAAAG,SAAA,CAAUG,SAAA,CAAU,IAAI;IAAA;IAG1B;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;EAOOC,SAASC,CAChB;IACI,IAAI,KAAKP,EAAO,KAAAO,CAAA,CAAET,CAAA,IAAK,IAAK,CAAAG,EAAA,KAAOM,CAAA,CAAER,CACrC;MACI,KAAKC,EAAA,GAAKO,CAAE,CAAAT,CAAA;MACZ,KAAKG,EAAA,GAAKM,CAAE,CAAAR,CAAA;MACP,KAAAG,SAAA,CAAUG,SAAA,CAAU,IAAI;IAAA;IAG1B;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;EAOOG,OAA4BD,CACnC;IACIA,CAAA,CAAEH,GAAI,MAAKJ,EAAI,OAAKC,EAAE;IAEf,OAAAM,CAAA;EAAA;EACX;AAAA;AAAA;AAAA;AAAA;EAOOE,OAAOF,CACd;IACI,OAAQA,CAAA,CAAET,CAAM,UAAKE,EAAQ,IAAAO,CAAA,CAAER,CAAA,KAAM,IAAK,CAAAE,EAAA;EAAA;EAIvCS,QACPA,CAAA;IACI,OAAO,mCAAmC,CAAC,MAAM,CAAC,UAAU,KAAKR,SAAS;EAAA;EAC9E;EAIA,IAAIJ,CACJA,CAAA;IACI,OAAO,IAAK,CAAAE,EAAA;EAAA;EAGhB,IAAIF,EAAEa,KACN;IACQ,SAAKX,EAAA,KAAOW,KAChB;MACI,KAAKX,EAAK,GAAAW,KAAA;MACL,KAAAT,SAAA,CAAUG,SAAA,CAAU,IAAI;IAAA;EACjC;EACJ;EAGA,IAAIN,CACJA,CAAA;IACI,OAAO,IAAK,CAAAE,EAAA;EAAA;EAGhB,IAAIF,EAAEY,KACN;IACQ,SAAKV,EAAA,KAAOU,KAChB;MACI,KAAKV,EAAK,GAAAU,KAAA;MACL,KAAAT,SAAA,CAAUG,SAAA,CAAU,IAAI;IAAA;EACjC;AAER","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}