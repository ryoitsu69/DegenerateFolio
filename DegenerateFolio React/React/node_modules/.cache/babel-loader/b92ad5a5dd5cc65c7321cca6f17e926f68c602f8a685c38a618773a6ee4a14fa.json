{"ast":null,"code":"var _jsxFileName = \"/home/ryoitsu/Documents/test/react-todo-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst fragmentShader = `\n float time;\n\n float noise(vec2 p)\n {\n     return sin(p.x*10.) * sin(p.y*(3. + sin(time/11.))) + .2;\n }\n\n mat2 rotate(float angle)\n {\n     return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n }\n\n\n float fbm(vec2 p)\n {\n     p *= 1.1;\n     float f = 0.;\n     float amp = .5;\n     for( int i = 0; i < 3; i++) {\n         mat2 modify = rotate(time/50. * float(i*i));\n         f += amp*noise(p);\n         p = modify * p;\n         p *= 2.;\n         amp /= 2.2;\n     }\n     return f;\n }\n\n float pattern(vec2 p, out vec2 q, out vec2 r) {\n     q = vec2( fbm(p + vec2(1.)), fbm(rotate(.1*time)*p + vec2(1.)));\n     r = vec2( fbm(rotate(.1)*q + vec2(0.)), fbm(q + vec2(0.)));\n     return fbm(p + 1.*r);\n\n }\n\n float digit(vec2 p){\n     vec2 grid = vec2(3.,1.) * 15.;\n     vec2 s = floor(p * grid) / grid;\n     p = p * grid;\n     vec2 q;\n     vec2 r;\n     float intensity = pattern(s/10., q, r)*1.3 - 0.03 ;\n     p = fract(p);\n     p *= vec2(1.2, 1.2);\n     float x = fract(p.x * 5.);\n     float y = fract((1. - p.y) * 5.);\n     int i = int(floor((1. - p.y) * 5.));\n     int j = int(floor(p.x * 5.));\n     int n = (i-2)*(i-2)+(j-2)*(j-2);\n     float f = float(n)/16.;\n     float isOn = intensity - f > 0.1 ? 1. : 0.;\n     return p.x <= 1. && p.y <= 1. ? isOn * (0.2 + y*4./5.) * (0.75 + x/4.) : 0.;\n }\n\n float hash(float x){\n     return fract(sin(x*234.1)* 324.19 + sin(sin(x*3214.09) * 34.132 * x) + x * 234.12);\n }\n\n float onOff(float a, float b, float c)\n {\n     return step(c, sin(iTime + a*cos(iTime*b)));\n }\n\n float displace(vec2 look)\n {\n     float y = (look.y-mod(iTime/4.,1.));\n     float window = 1./(1.+50.*y*y);\n     return sin(look.y*20. + iTime)/80.*onOff(4.,2.,.8)*(1.+cos(iTime*60.))*window;\n }\n\n vec3 getColor(vec2 p){\n\n     float bar = mod(p.y + time*20., 1.) < 0.2 ?  1.4  : 1.;\n     p.x += displace(p);\n     float middle = digit(p);\n     float off = 0.002;\n     float sum = 0.;\n     for (float i = -1.; i < 2.; i+=1.){\n         for (float j = -1.; j < 2.; j+=1.){\n             sum += digit(p+vec2(off*i, off*j));\n         }\n     }\n     return vec3(0.9)*middle + sum/10.*vec3(0.,1.,0.) * bar;\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     time = iTime / 3.;\n     vec2 p = fragCoord / iResolution.xy;\n     float off = 0.0001;\n     vec3 col = getColor(p);\n     fragColor = vec4(col,1);\n }\n\n `;\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: [/*#__PURE__*/_jsxDEV(ShadertoyReact, {\n    fs: fragmentShader\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 1\n  }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n    children: \"\\xA92024 Ultra Degenerate Labs, No Rights Reserved\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 1\n  }, this)]\n}, void 0, true));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","ShadertoyReact","TodoApp","reportWebVitals","vertex","fragment","jsxDEV","_jsxDEV","Fragment","_Fragment","root","createRoot","document","getElementById","fragmentShader","render","children","fs","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport ShadertoyReact from \"shadertoy-react\";\nimport './css/index.css';\nimport TodoApp from './components/todo.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport vertex from './shaders/mosaic/mosaic.vert';\nimport fragment from './shaders/mosaic/mosaic.frag';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n const fragmentShader = `\n float time;\n\n float noise(vec2 p)\n {\n     return sin(p.x*10.) * sin(p.y*(3. + sin(time/11.))) + .2;\n }\n\n mat2 rotate(float angle)\n {\n     return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n }\n\n\n float fbm(vec2 p)\n {\n     p *= 1.1;\n     float f = 0.;\n     float amp = .5;\n     for( int i = 0; i < 3; i++) {\n         mat2 modify = rotate(time/50. * float(i*i));\n         f += amp*noise(p);\n         p = modify * p;\n         p *= 2.;\n         amp /= 2.2;\n     }\n     return f;\n }\n\n float pattern(vec2 p, out vec2 q, out vec2 r) {\n     q = vec2( fbm(p + vec2(1.)), fbm(rotate(.1*time)*p + vec2(1.)));\n     r = vec2( fbm(rotate(.1)*q + vec2(0.)), fbm(q + vec2(0.)));\n     return fbm(p + 1.*r);\n\n }\n\n float digit(vec2 p){\n     vec2 grid = vec2(3.,1.) * 15.;\n     vec2 s = floor(p * grid) / grid;\n     p = p * grid;\n     vec2 q;\n     vec2 r;\n     float intensity = pattern(s/10., q, r)*1.3 - 0.03 ;\n     p = fract(p);\n     p *= vec2(1.2, 1.2);\n     float x = fract(p.x * 5.);\n     float y = fract((1. - p.y) * 5.);\n     int i = int(floor((1. - p.y) * 5.));\n     int j = int(floor(p.x * 5.));\n     int n = (i-2)*(i-2)+(j-2)*(j-2);\n     float f = float(n)/16.;\n     float isOn = intensity - f > 0.1 ? 1. : 0.;\n     return p.x <= 1. && p.y <= 1. ? isOn * (0.2 + y*4./5.) * (0.75 + x/4.) : 0.;\n }\n\n float hash(float x){\n     return fract(sin(x*234.1)* 324.19 + sin(sin(x*3214.09) * 34.132 * x) + x * 234.12);\n }\n\n float onOff(float a, float b, float c)\n {\n     return step(c, sin(iTime + a*cos(iTime*b)));\n }\n\n float displace(vec2 look)\n {\n     float y = (look.y-mod(iTime/4.,1.));\n     float window = 1./(1.+50.*y*y);\n     return sin(look.y*20. + iTime)/80.*onOff(4.,2.,.8)*(1.+cos(iTime*60.))*window;\n }\n\n vec3 getColor(vec2 p){\n\n     float bar = mod(p.y + time*20., 1.) < 0.2 ?  1.4  : 1.;\n     p.x += displace(p);\n     float middle = digit(p);\n     float off = 0.002;\n     float sum = 0.;\n     for (float i = -1.; i < 2.; i+=1.){\n         for (float j = -1.; j < 2.; j+=1.){\n             sum += digit(p+vec2(off*i, off*j));\n         }\n     }\n     return vec3(0.9)*middle + sum/10.*vec3(0.,1.,0.) * bar;\n }\n\n void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     time = iTime / 3.;\n     vec2 p = fragCoord / iResolution.xy;\n     float off = 0.0001;\n     vec3 col = getColor(p);\n     fragColor = vec4(col,1);\n }\n\n `;\n\nroot.render(\n    <>\n<ShadertoyReact fs={fragmentShader} />\n<TodoApp />\n<footer>Â©2024 Ultra Degenerate Labs, No Rights Reserved</footer>\n</>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,OAAO,iBAAiB;AACxB,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,8BAA8B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpD,MAAMC,IAAI,GAAGV,QAAQ,CAACW,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEhE,MAAMC,cAAc,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEFJ,IAAI,CAACK,MAAM,eACPR,OAAA,CAAAE,SAAA;EAAAO,QAAA,gBACJT,OAAA,CAACN,cAAc;IAACgB,EAAE,EAAEH;EAAe;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACtCd,OAAA,CAACL,OAAO;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACXd,OAAA;IAAAS,QAAA,EAAQ;EAA+C;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAAA,eAC9D,CACF,CAAC;;AAED;AACA;AACA;AACAlB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}