{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SocketProvider = void 0;\nconst web3_errors_1 = require(\"web3-errors\");\nconst web3_eip1193_provider_js_1 = require(\"./web3_eip1193_provider.js\");\nconst chunk_response_parser_js_1 = require(\"./chunk_response_parser.js\");\nconst validation_js_1 = require(\"./validation.js\");\nconst web3_deferred_promise_js_1 = require(\"./web3_deferred_promise.js\");\nconst jsonRpc = __importStar(require(\"./json_rpc.js\"));\nconst DEFAULT_RECONNECTION_OPTIONS = {\n  autoReconnect: true,\n  delay: 5000,\n  maxAttempts: 5\n};\nconst NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\nclass SocketProvider extends web3_eip1193_provider_js_1.Eip1193Provider {\n  /**\n   * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n   * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n   * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n   * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n   */\n  constructor(socketPath, socketOptions, reconnectOptions) {\n    super();\n    this._connectionStatus = 'connecting';\n    // Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n    this._onMessageHandler = this._onMessage.bind(this);\n    this._onOpenHandler = this._onConnect.bind(this);\n    this._onCloseHandler = this._onCloseEvent.bind(this);\n    this._onErrorHandler = this._onError.bind(this);\n    if (!this._validateProviderPath(socketPath)) throw new web3_errors_1.InvalidClientError(socketPath);\n    this._socketPath = socketPath;\n    this._socketOptions = socketOptions;\n    this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {});\n    this._pendingRequestsQueue = new Map();\n    this._sentRequestsQueue = new Map();\n    this._init();\n    this.connect();\n    this.chunkResponseParser = new chunk_response_parser_js_1.ChunkResponseParser(this._eventEmitter, this._reconnectOptions.autoReconnect);\n    this.chunkResponseParser.onError(() => {\n      this._clearQueues();\n    });\n    this.isReconnecting = false;\n  }\n  get SocketConnection() {\n    return this._socketConnection;\n  }\n  _init() {\n    this._reconnectAttempts = 0;\n  }\n  /**\n   * Try to establish a connection to the socket\n   */\n  connect() {\n    try {\n      this._openSocketConnection();\n      this._connectionStatus = 'connecting';\n      this._addSocketListeners();\n    } catch (e) {\n      if (!this.isReconnecting) {\n        this._connectionStatus = 'disconnected';\n        if (e && e.message) {\n          throw new web3_errors_1.ConnectionError(\"Error while connecting to \".concat(this._socketPath, \". Reason: \").concat(e.message));\n        } else {\n          throw new web3_errors_1.InvalidClientError(this._socketPath);\n        }\n      } else {\n        setImmediate(() => {\n          this._reconnect();\n        });\n      }\n    }\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _validateProviderPath(path) {\n    return !!path;\n  }\n  /**\n   *\n   * @returns the pendingRequestQueue size\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getPendingRequestQueueSize() {\n    return this._pendingRequestsQueue.size;\n  }\n  /**\n   *\n   * @returns the sendPendingRequests size\n   */\n  // eslint-disable-next-line class-methods-use-this\n  getSentRequestsQueueSize() {\n    return this._sentRequestsQueue.size;\n  }\n  /**\n   *\n   * @returns `true` if the socket supports subscriptions\n   */\n  // eslint-disable-next-line class-methods-use-this\n  supportsSubscriptions() {\n    return true;\n  }\n  on(type, listener) {\n    this._eventEmitter.on(type, listener);\n  }\n  once(type, listener) {\n    this._eventEmitter.once(type, listener);\n  }\n  removeListener(type, listener) {\n    this._eventEmitter.removeListener(type, listener);\n  }\n  _onDisconnect(code, data) {\n    this._connectionStatus = 'disconnected';\n    super._onDisconnect(code, data);\n  }\n  /**\n   * Disconnects the socket\n   * @param code - The code to be sent to the server\n   * @param data - The data to be sent to the server\n   */\n  disconnect(code, data) {\n    const disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;\n    this._removeSocketListeners();\n    if (this.getStatus() !== 'disconnected') {\n      this._closeSocketConnection(disconnectCode, data);\n    }\n    this._onDisconnect(disconnectCode, data);\n  }\n  /**\n   * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting\n   * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0\n   * @param ms - Determines the ms of setInterval\n   * @param code - The code to be sent to the server\n   * @param data - The data to be sent to the server\n   */\n  safeDisconnect(code, data) {\n    let forceDisconnect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let ms = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    return __awaiter(this, void 0, void 0, function* () {\n      let retryAttempt = 0;\n      const checkQueue = () => __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resolve => {\n          const interval = setInterval(() => {\n            if (forceDisconnect && retryAttempt === 5) {\n              this.clearQueues();\n            }\n            if (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {\n              clearInterval(interval);\n              resolve(true);\n            }\n            retryAttempt += 1;\n          }, ms);\n        });\n      });\n      yield checkQueue();\n      this.disconnect(code, data);\n    });\n  }\n  /**\n   * Removes all listeners for the specified event type.\n   * @param type - The event type to remove the listeners for\n   */\n  removeAllListeners(type) {\n    this._eventEmitter.removeAllListeners(type);\n  }\n  _onError(event) {\n    // do not emit error while trying to reconnect\n    if (this.isReconnecting) {\n      this._reconnect();\n    } else {\n      this._eventEmitter.emit('error', event);\n    }\n  }\n  /**\n   * Resets the socket, removing all listeners and pending requests\n   */\n  reset() {\n    this._sentRequestsQueue.clear();\n    this._pendingRequestsQueue.clear();\n    this._init();\n    this._removeSocketListeners();\n    this._addSocketListeners();\n  }\n  _reconnect() {\n    if (this.isReconnecting) {\n      return;\n    }\n    this.isReconnecting = true;\n    if (this._sentRequestsQueue.size > 0) {\n      this._sentRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new web3_errors_1.PendingRequestsOnReconnectingError());\n        this._sentRequestsQueue.delete(key);\n      });\n    }\n    if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n      this._reconnectAttempts += 1;\n      setTimeout(() => {\n        this._removeSocketListeners();\n        this.connect();\n        this.isReconnecting = false;\n      }, this._reconnectOptions.delay);\n    } else {\n      this.isReconnecting = false;\n      this._clearQueues();\n      this._removeSocketListeners();\n      this._eventEmitter.emit('error', new web3_errors_1.MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts));\n    }\n  }\n  /**\n   *  Creates a request object to be sent to the server\n   */\n  request(request) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if ((0, validation_js_1.isNullish)(this._socketConnection)) {\n        throw new Error('Connection is undefined');\n      }\n      // if socket disconnected - open connection\n      if (this.getStatus() === 'disconnected') {\n        this.connect();\n      }\n      const requestId = jsonRpc.isBatchRequest(request) ? request[0].id : request.id;\n      if (!requestId) {\n        throw new web3_errors_1.Web3WSProviderError('Request Id not defined');\n      }\n      if (this._sentRequestsQueue.has(requestId)) {\n        throw new web3_errors_1.RequestAlreadySentError(requestId);\n      }\n      const deferredPromise = new web3_deferred_promise_js_1.Web3DeferredPromise();\n      deferredPromise.catch(error => {\n        this._eventEmitter.emit('error', error);\n      });\n      const reqItem = {\n        payload: request,\n        deferredPromise\n      };\n      if (this.getStatus() === 'connecting') {\n        this._pendingRequestsQueue.set(requestId, reqItem);\n        return reqItem.deferredPromise;\n      }\n      this._sentRequestsQueue.set(requestId, reqItem);\n      try {\n        this._sendToSocket(reqItem.payload);\n      } catch (error) {\n        this._sentRequestsQueue.delete(requestId);\n        this._eventEmitter.emit('error', error);\n      }\n      return deferredPromise;\n    });\n  }\n  _onConnect() {\n    this._connectionStatus = 'connected';\n    this._reconnectAttempts = 0;\n    super._onConnect();\n    this._sendPendingRequests();\n  }\n  _sendPendingRequests() {\n    for (const [id, value] of this._pendingRequestsQueue.entries()) {\n      this._sendToSocket(value.payload);\n      this._pendingRequestsQueue.delete(id);\n      this._sentRequestsQueue.set(id, value);\n    }\n  }\n  _onMessage(event) {\n    const responses = this._parseResponses(event);\n    if ((0, validation_js_1.isNullish)(responses) || responses.length === 0) {\n      return;\n    }\n    for (const response of responses) {\n      if (jsonRpc.isResponseWithNotification(response) && response.method.endsWith('_subscription')) {\n        this._eventEmitter.emit('message', response);\n        return;\n      }\n      const requestId = jsonRpc.isBatchResponse(response) ? response[0].id : response.id;\n      const requestItem = this._sentRequestsQueue.get(requestId);\n      if (!requestItem) {\n        return;\n      }\n      if (jsonRpc.isBatchResponse(response) || jsonRpc.isResponseWithResult(response) || jsonRpc.isResponseWithError(response)) {\n        this._eventEmitter.emit('message', response);\n        requestItem.deferredPromise.resolve(response);\n      }\n      this._sentRequestsQueue.delete(requestId);\n    }\n  }\n  clearQueues(event) {\n    this._clearQueues(event);\n  }\n  _clearQueues(event) {\n    if (this._pendingRequestsQueue.size > 0) {\n      this._pendingRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new web3_errors_1.ConnectionNotOpenError(event));\n        this._pendingRequestsQueue.delete(key);\n      });\n    }\n    if (this._sentRequestsQueue.size > 0) {\n      this._sentRequestsQueue.forEach((request, key) => {\n        request.deferredPromise.reject(new web3_errors_1.ConnectionNotOpenError(event));\n        this._sentRequestsQueue.delete(key);\n      });\n    }\n    this._removeSocketListeners();\n  }\n}\nexports.SocketProvider = SocketProvider;","map":{"version":3,"names":["web3_errors_1","require","web3_eip1193_provider_js_1","chunk_response_parser_js_1","validation_js_1","web3_deferred_promise_js_1","jsonRpc","__importStar","DEFAULT_RECONNECTION_OPTIONS","autoReconnect","delay","maxAttempts","NORMAL_CLOSE_CODE","SocketProvider","Eip1193Provider","constructor","socketPath","socketOptions","reconnectOptions","_connectionStatus","_onMessageHandler","_onMessage","bind","_onOpenHandler","_onConnect","_onCloseHandler","_onCloseEvent","_onErrorHandler","_onError","_validateProviderPath","InvalidClientError","_socketPath","_socketOptions","_reconnectOptions","Object","assign","_pendingRequestsQueue","Map","_sentRequestsQueue","_init","connect","chunkResponseParser","ChunkResponseParser","_eventEmitter","onError","_clearQueues","isReconnecting","SocketConnection","_socketConnection","_reconnectAttempts","_openSocketConnection","_addSocketListeners","e","message","ConnectionError","concat","setImmediate","_reconnect","path","getPendingRequestQueueSize","size","getSentRequestsQueueSize","supportsSubscriptions","on","type","listener","once","removeListener","_onDisconnect","code","data","disconnect","disconnectCode","_removeSocketListeners","getStatus","_closeSocketConnection","safeDisconnect","forceDisconnect","arguments","length","undefined","ms","retryAttempt","checkQueue","__awaiter","Promise","resolve","interval","setInterval","clearQueues","clearInterval","removeAllListeners","event","emit","reset","clear","forEach","request","key","deferredPromise","reject","PendingRequestsOnReconnectingError","delete","setTimeout","MaxAttemptsReachedOnReconnectingError","isNullish","Error","requestId","isBatchRequest","id","Web3WSProviderError","has","RequestAlreadySentError","Web3DeferredPromise","catch","error","reqItem","payload","set","_sendToSocket","_sendPendingRequests","value","entries","responses","_parseResponses","response","isResponseWithNotification","method","endsWith","isBatchResponse","requestItem","get","isResponseWithResult","isResponseWithError","ConnectionNotOpenError","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-utils/src/socket_provider.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tConnectionEvent,\n\tEip1193EventName,\n\tEthExecutionAPI,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcId,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResult,\n\tProviderConnectInfo,\n\tProviderMessage,\n\tProviderRpcError,\n\tSocketRequestItem,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3Eip1193ProviderEventCallback,\n\tWeb3ProviderEventCallback,\n\tWeb3ProviderMessageEventCallback,\n\tWeb3ProviderStatus,\n} from 'web3-types';\nimport {\n\tConnectionError,\n\tConnectionNotOpenError,\n\tInvalidClientError,\n\tMaxAttemptsReachedOnReconnectingError,\n\tPendingRequestsOnReconnectingError,\n\tRequestAlreadySentError,\n\tWeb3WSProviderError,\n} from 'web3-errors';\nimport { Eip1193Provider } from './web3_eip1193_provider.js';\nimport { ChunkResponseParser } from './chunk_response_parser.js';\nimport { isNullish } from './validation.js';\nimport { Web3DeferredPromise } from './web3_deferred_promise.js';\nimport * as jsonRpc from './json_rpc.js';\n\nexport type ReconnectOptions = {\n\tautoReconnect: boolean;\n\tdelay: number;\n\tmaxAttempts: number;\n};\n\nconst DEFAULT_RECONNECTION_OPTIONS = {\n\tautoReconnect: true,\n\tdelay: 5000,\n\tmaxAttempts: 5,\n};\n\nconst NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\n\nexport abstract class SocketProvider<\n\tMessageEvent,\n\tCloseEvent,\n\tErrorEvent,\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Eip1193Provider<API> {\n\tprotected isReconnecting: boolean;\n\tprotected readonly _socketPath: string;\n\tprotected readonly chunkResponseParser: ChunkResponseParser;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _pendingRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _sentRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\tprotected _reconnectAttempts!: number;\n\tprotected readonly _socketOptions?: unknown;\n\tprotected readonly _reconnectOptions: ReconnectOptions;\n\tprotected _socketConnection?: unknown;\n\tpublic get SocketConnection() {\n\t\treturn this._socketConnection;\n\t}\n\tprotected _connectionStatus: Web3ProviderStatus;\n\tprotected readonly _onMessageHandler: (event: MessageEvent) => void;\n\tprotected readonly _onOpenHandler: () => void;\n\tprotected readonly _onCloseHandler: (event: CloseEvent) => void;\n\tprotected readonly _onErrorHandler: (event: ErrorEvent) => void;\n\n\t/**\n\t * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n\t * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n\t * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n\t * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n\t */\n\tpublic constructor(\n\t\tsocketPath: string,\n\t\tsocketOptions?: unknown,\n\t\treconnectOptions?: Partial<ReconnectOptions>,\n\t) {\n\t\tsuper();\n\t\tthis._connectionStatus = 'connecting';\n\n\t\t// Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n\t\tthis._onMessageHandler = this._onMessage.bind(this);\n\t\tthis._onOpenHandler = this._onConnect.bind(this);\n\t\tthis._onCloseHandler = this._onCloseEvent.bind(this);\n\t\tthis._onErrorHandler = this._onError.bind(this);\n\n\t\tif (!this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);\n\n\t\tthis._socketPath = socketPath;\n\t\tthis._socketOptions = socketOptions;\n\t\tthis._reconnectOptions = {\n\t\t\t...DEFAULT_RECONNECTION_OPTIONS,\n\t\t\t...(reconnectOptions ?? {}),\n\t\t};\n\n\t\tthis._pendingRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\t\tthis._sentRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\n\t\tthis._init();\n\t\tthis.connect();\n\t\tthis.chunkResponseParser = new ChunkResponseParser(\n\t\t\tthis._eventEmitter,\n\t\t\tthis._reconnectOptions.autoReconnect,\n\t\t);\n\t\tthis.chunkResponseParser.onError(() => {\n\t\t\tthis._clearQueues();\n\t\t});\n\t\tthis.isReconnecting = false;\n\t}\n\n\tprotected _init() {\n\t\tthis._reconnectAttempts = 0;\n\t}\n\n\t/**\n\t * Try to establish a connection to the socket\n\t */\n\tpublic connect(): void {\n\t\ttry {\n\t\t\tthis._openSocketConnection();\n\t\t\tthis._connectionStatus = 'connecting';\n\t\t\tthis._addSocketListeners();\n\t\t} catch (e) {\n\t\t\tif (!this.isReconnecting) {\n\t\t\t\tthis._connectionStatus = 'disconnected';\n\t\t\t\tif (e && (e as Error).message) {\n\t\t\t\t\tthrow new ConnectionError(\n\t\t\t\t\t\t`Error while connecting to ${this._socketPath}. Reason: ${\n\t\t\t\t\t\t\t(e as Error).message\n\t\t\t\t\t\t}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidClientError(this._socketPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\tthis._reconnect();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected abstract _openSocketConnection(): void;\n\tprotected abstract _addSocketListeners(): void;\n\n\tprotected abstract _removeSocketListeners(): void;\n\n\tprotected abstract _onCloseEvent(_event: unknown): void;\n\n\tprotected abstract _sendToSocket(_payload: Web3APIPayload<API, any>): void;\n\n\tprotected abstract _parseResponses(_event: MessageEvent): JsonRpcResponse[];\n\n\tprotected abstract _closeSocketConnection(_code?: number, _data?: string): void;\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprotected _validateProviderPath(path: string): boolean {\n\t\treturn !!path;\n\t}\n\t\n\t/**\n\t *\n\t * @returns the pendingRequestQueue size\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic getPendingRequestQueueSize()  {\n\t\treturn this._pendingRequestsQueue.size;\n\t}\n\n\t/**\n\t *\n\t * @returns the sendPendingRequests size\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic getSentRequestsQueueSize() {\n\t\treturn this._sentRequestsQueue.size;\n\t}\n\n\t/**\n\t *\n\t * @returns `true` if the socket supports subscriptions\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type.\n\t * @param type - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic on(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic on(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic on(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic on(type: 'accountsChanged', listener: Web3Eip1193ProviderEventCallback<string[]>): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.on(type, listener);\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type that will be invoked at most once.\n\t * @param type  - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic once(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic once(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic once(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic once(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.once(type, listener);\n\t}\n\n\t/**\n\t *  Removes a listener for the specified event type.\n\t * @param type - The event type to remove the listener for\n\t * @param listener - The callback to be executed\n\t */\n\tpublic removeListener(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'chainChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.removeListener(type, listener);\n\t}\n\n\tprotected _onDisconnect(code: number, data?: string) {\n\t\tthis._connectionStatus = 'disconnected';\n\t\tsuper._onDisconnect(code, data);\n\t}\n\n\t/**\n\t * Disconnects the socket\n\t * @param code - The code to be sent to the server\n\t * @param data - The data to be sent to the server\n\t */\n\tpublic disconnect(code?: number, data?: string): void {\n\t\tconst disconnectCode = code ?? NORMAL_CLOSE_CODE;\n\t\tthis._removeSocketListeners();\n\t\tif (this.getStatus() !== 'disconnected') {\n\t\t\tthis._closeSocketConnection(disconnectCode, data);\n\t\t}\n\t\tthis._onDisconnect(disconnectCode, data);\n\t}\n\n\t/**\n\t * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting\n\t * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0  \n\t * @param ms - Determines the ms of setInterval\n\t * @param code - The code to be sent to the server\n\t * @param data - The data to be sent to the server\n\t */\n\tpublic async safeDisconnect(code?: number, data?: string, forceDisconnect = false,ms = 1000) {\n\t\tlet retryAttempt = 0;\n\t\tconst checkQueue = async () => \n\t\t\tnew Promise(resolve => {\n\t\t\t\tconst interval = setInterval(() => {\n\t\t\t\t\tif (forceDisconnect && retryAttempt === 5) {\n\t\t\t\t\t\tthis.clearQueues();\n\t\t\t\t\t}\n\t\t\t\t\tif (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t}\n\t\t\t\t\tretryAttempt+=1;\n\t\t\t\t}, ms)\n\t\t\t})\n\t\t\n\t\tawait checkQueue();\n\t\tthis.disconnect(code, data);\n\t}\n\n\n\t/**\n\t * Removes all listeners for the specified event type.\n\t * @param type - The event type to remove the listeners for\n\t */\n\tpublic removeAllListeners(type: string): void {\n\t\tthis._eventEmitter.removeAllListeners(type);\n\t}\n\n\tprotected _onError(event: ErrorEvent): void {\n\t\t// do not emit error while trying to reconnect\n\t\tif (this.isReconnecting) {\n\t\t\tthis._reconnect();\n\t\t} else {\n\t\t\tthis._eventEmitter.emit('error', event);\n\t\t}\n\t}\n\n\t/**\n\t * Resets the socket, removing all listeners and pending requests\n\t */\n\tpublic reset(): void {\n\t\tthis._sentRequestsQueue.clear();\n\t\tthis._pendingRequestsQueue.clear();\n\n\t\tthis._init();\n\t\tthis._removeSocketListeners();\n\t\tthis._addSocketListeners();\n\t}\n\n\tprotected _reconnect(): void {\n\t\tif (this.isReconnecting) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isReconnecting = true;\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new PendingRequestsOnReconnectingError());\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n\t\t\tthis._reconnectAttempts += 1;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._removeSocketListeners();\n\t\t\t\tthis.connect();\n\t\t\t\tthis.isReconnecting = false;\n\t\t\t}, this._reconnectOptions.delay);\n\t\t} else {\n\t\t\tthis.isReconnecting = false;\n\t\t\tthis._clearQueues();\n\t\t\tthis._removeSocketListeners();\n\t\t\tthis._eventEmitter.emit(\n\t\t\t\t'error',\n\t\t\t\tnew MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t *  Creates a request object to be sent to the server\n\t */\n\tpublic async request<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResultType = Web3APIReturnType<API, Method>,\n\t>(request: Web3APIPayload<API, Method>): Promise<JsonRpcResponseWithResult<ResultType>> {\n\t\tif (isNullish(this._socketConnection)) {\n\t\t\tthrow new Error('Connection is undefined');\n\t\t}\n\t\t// if socket disconnected - open connection\n\t\tif (this.getStatus() === 'disconnected') {\n\t\t\tthis.connect();\n\t\t}\n\n\t\tconst requestId = jsonRpc.isBatchRequest(request)\n\t\t\t? (request as unknown as JsonRpcBatchRequest)[0].id\n\t\t\t: (request as unknown as JsonRpcRequest).id;\n\n\t\tif (!requestId) {\n\t\t\tthrow new Web3WSProviderError('Request Id not defined');\n\t\t}\n\n\t\tif (this._sentRequestsQueue.has(requestId)) {\n\t\t\tthrow new RequestAlreadySentError(requestId);\n\t\t}\n\t\tconst deferredPromise = new Web3DeferredPromise<JsonRpcResponseWithResult<ResultType>>();\n\t\tdeferredPromise.catch(error => {\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t});\n\t\tconst reqItem: SocketRequestItem<API, Method, JsonRpcResponseWithResult<ResultType>> = {\n\t\t\tpayload: request,\n\t\t\tdeferredPromise,\n\t\t};\n\n\t\tif (this.getStatus() === 'connecting') {\n\t\t\tthis._pendingRequestsQueue.set(requestId, reqItem);\n\n\t\t\treturn reqItem.deferredPromise;\n\t\t}\n\n\t\tthis._sentRequestsQueue.set(requestId, reqItem);\n\n\t\ttry {\n\t\t\tthis._sendToSocket(reqItem.payload);\n\t\t} catch (error) {\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t}\n\n\t\treturn deferredPromise;\n\t}\n\n\tprotected _onConnect() {\n\t\tthis._connectionStatus = 'connected';\n\t\tthis._reconnectAttempts = 0;\n\t\tsuper._onConnect();\n\t\tthis._sendPendingRequests();\n\t}\n\n\tprivate _sendPendingRequests() {\n\t\tfor (const [id, value] of this._pendingRequestsQueue.entries()) {\n\t\t\tthis._sendToSocket(value.payload as Web3APIPayload<API, any>);\n\t\t\tthis._pendingRequestsQueue.delete(id);\n\t\t\tthis._sentRequestsQueue.set(id, value);\n\t\t}\n\t}\n\n\tprotected _onMessage(event: MessageEvent): void {\n\t\tconst responses = this._parseResponses(event);\n\t\tif (isNullish(responses) || responses.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor (const response of responses) {\n\t\t\tif (\n\t\t\t\tjsonRpc.isResponseWithNotification(response as JsonRpcNotification) &&\n\t\t\t\t(response as JsonRpcNotification).method.endsWith('_subscription')\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst requestId = jsonRpc.isBatchResponse(response)\n\t\t\t\t? (response as unknown as JsonRpcBatchResponse)[0].id\n\t\t\t\t: (response as unknown as JsonRpcResponseWithResult).id;\n\n\t\t\tconst requestItem = this._sentRequestsQueue.get(requestId);\n\n\t\t\tif (!requestItem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tjsonRpc.isBatchResponse(response) ||\n\t\t\t\tjsonRpc.isResponseWithResult(response) ||\n\t\t\t\tjsonRpc.isResponseWithError(response)\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\trequestItem.deferredPromise.resolve(response);\n\t\t\t}\n\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\t\t}\n\t}\n\t\n\tpublic clearQueues(event?: ConnectionEvent) {\n\t\tthis._clearQueues(event);\n\t}\n\n\tprotected _clearQueues(event?: ConnectionEvent) {\n\t\tif (this._pendingRequestsQueue.size > 0) {\n\t\t\tthis._pendingRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._pendingRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tthis._removeSocketListeners();\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}