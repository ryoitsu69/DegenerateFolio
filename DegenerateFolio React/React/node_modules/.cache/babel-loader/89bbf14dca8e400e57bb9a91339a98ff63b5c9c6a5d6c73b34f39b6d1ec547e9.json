{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexports.fromBig = fromBig;\nfunction split(lst) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s;\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexports.default = u64;","map":{"version":3,"names":["U32_MASK64","BigInt","_32n","fromBig","n","le","arguments","length","undefined","h","Number","l","exports","split","lst","Ah","Uint32Array","Al","i","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","default"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@noble/hashes/src/_u64.ts"],"sourcesContent":["const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}