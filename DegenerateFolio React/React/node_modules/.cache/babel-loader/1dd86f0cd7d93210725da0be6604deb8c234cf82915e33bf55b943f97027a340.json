{"ast":null,"code":"\"use strict\";\n\nfunction extractInputs(fragmentSource, out) {\n  let match;\n  const regex = /@in\\s+([^;]+);/g;\n  while ((match = regex.exec(fragmentSource)) !== null) {\n    out.push(match[1]);\n  }\n}\nfunction compileInputs(fragments, template, sort = false) {\n  const results = [];\n  extractInputs(template, results);\n  fragments.forEach(fragment => {\n    if (fragment.header) {\n      extractInputs(fragment.header, results);\n    }\n  });\n  const mainInput = results;\n  if (sort) {\n    mainInput.sort();\n  }\n  const finalString = mainInput.map((inValue, i) => `       @location(${i}) ${inValue},`).join(\"\\n\");\n  let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, \"\");\n  cleanedString = cleanedString.replace(\"{{in}}\", `\n${finalString}\n`);\n  return cleanedString;\n}\nexport { compileInputs };","map":{"version":3,"names":["extractInputs","fragmentSource","out","match","regex","exec","push","compileInputs","fragments","template","sort","results","forEach","fragment","header","mainInput","finalString","map","inValue","i","join","cleanedString","replace"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/high-shader/compiler/utils/compileInputs.ts"],"sourcesContent":["function extractInputs(fragmentSource: string, out: string[])\n{\n    let match;\n    const regex = /@in\\s+([^;]+);/g;\n\n    while ((match = regex.exec(fragmentSource)) !== null)\n    {\n        out.push(match[1]);\n    }\n}\n\nexport function compileInputs(fragments: any[], template: string, sort = false)\n{\n    // get all the inputs from the fragments..\n    const results: string[] = [];\n\n    extractInputs(template, results);\n\n    fragments.forEach((fragment) =>\n    {\n        if (fragment.header)\n        {\n            extractInputs(fragment.header, results);\n        }\n    });\n\n    // build the input:\n    const mainInput = results;\n\n    if (sort)\n    {\n        mainInput.sort();\n    }\n\n    const finalString = mainInput\n        .map((inValue, i) => `       @location(${i}) ${inValue},`)\n        .join('\\n');\n\n    // Remove lines from original string\n    let cleanedString = template.replace(/@in\\s+[^;]+;\\s*/g, '');\n\n    cleanedString = cleanedString.replace('{{in}}', `\\n${finalString}\\n`);\n\n    return cleanedString;\n}\n"],"mappings":";;AAAA,SAASA,cAAcC,cAAA,EAAwBC,GAC/C;EACQ,IAAAC,KAAA;EACJ,MAAMC,KAAQ;EAEd,QAAQD,KAAQ,GAAAC,KAAA,CAAMC,IAAK,CAAAJ,cAAc,OAAO,IAChD;IACQC,GAAA,CAAAI,IAAA,CAAKH,KAAM,EAAC,CAAC;EAAA;AAEzB;AAEO,SAASI,aAAcA,CAAAC,SAAA,EAAkBC,QAAkB,EAAAC,IAAA,GAAO,KACzE;EAEI,MAAMC,OAAA,GAAoB,EAAC;EAE3BX,aAAA,CAAcS,QAAA,EAAUE,OAAO;EAErBH,SAAA,CAAAI,OAAA,CAASC,QACnB;IACI,IAAIA,QAAA,CAASC,MACb;MACkBd,aAAA,CAAAa,QAAA,CAASC,MAAA,EAAQH,OAAO;IAAA;EAC1C,CACH;EAGD,MAAMI,SAAY,GAAAJ,OAAA;EAElB,IAAID,IACJ;IACIK,SAAA,CAAUL,IAAK;EAAA;EAGnB,MAAMM,WAAc,GAAAD,SAAA,CACfE,GAAI,EAACC,OAAS,EAAAC,CAAA,KAA0B,oBAAAA,CAAM,KAAAD,OAAU,KACxDE,IAAA,CAAK,IAAI;EAGd,IAAIC,aAAgB,GAAAZ,QAAA,CAASa,OAAQ,qBAAoB,EAAE;EAE3CD,aAAA,GAAAA,aAAA,CAAcC,OAAA,CAAQ,QAAU;AAAA,EAAKN,WAAW;AAAA,CAAI;EAE7D,OAAAK,aAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}