{"ast":null,"code":"import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = {\n      ..._BackgroundSystem.defaultOptions,\n      ...options\n    };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   * @ignore\n   */\n  destroy() {}\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem, ExtensionType.CanvasSystem],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\nexport { BackgroundSystem };","map":{"version":3,"names":["_BackgroundSystem","constructor","clearBeforeRender","_backgroundColor","Color","color","alpha","init","options","defaultOptions","background","backgroundColor","backgroundAlpha","setAlpha","value","setValue","colorRgba","toArray","destroy","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","priority","BackgroundSystem"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/background/BackgroundSystem.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n"],"mappings":";;;AA+CO,MAAMA,iBAAA,GAAN,MAAMA,iBACb;EA0CIC,WACAA,CAAA;IACI,KAAKC,iBAAoB;IAEpB,KAAAC,gBAAA,GAAmB,IAAIC,KAAA,CAAM,CAAQ;IAE1C,KAAKC,KAAA,GAAQ,IAAK,CAAAF,gBAAA;IAClB,KAAKG,KAAQ;EAAA;EACjB;AAAA;AAAA;AAAA;EAMOC,KAAKC,OACZ;IACIA,OAAA,GAAU;MAAE,GAAGR,iBAAiB,CAAAS,cAAA;MAAgB,GAAGD;IAAQ;IAE3D,KAAKN,iBAAA,GAAoBM,OAAQ,CAAAN,iBAAA;IACjC,KAAKG,KAAQ,GAAAG,OAAA,CAAQE,UAAc,IAAAF,OAAA,CAAQG,eAAA,IAAmB,IAAK,CAAAR,gBAAA;IACnE,KAAKG,KAAA,GAAQE,OAAQ,CAAAI,eAAA;IAEhB,KAAAT,gBAAA,CAAiBU,QAAS,CAAAL,OAAA,CAAQI,eAAe;EAAA;EAC1D;EAGA,IAAIP,KACJA,CAAA;IACI,OAAO,IAAK,CAAAF,gBAAA;EAAA;EAGhB,IAAIE,MAAMS,KACV;IACS,KAAAX,gBAAA,CAAiBY,QAAA,CAASD,KAAK;EAAA;EACxC;EAGA,IAAIR,KACJA,CAAA;IACI,OAAO,KAAKH,gBAAiB,CAAAG,KAAA;EAAA;EAGjC,IAAIA,MAAMQ,KACV;IACS,KAAAX,gBAAA,CAAiBU,QAAA,CAASC,KAAK;EAAA;EACxC;EAGA,IAAIE,SACJA,CAAA;IACW,YAAKb,gBAAA,CAAiBc,OAAQ;EAAA;EACzC;AAAA;AAAA;AAAA;AAAA;EAOOC,OACPA,CAAA;AAGJ;AAAA;AAzGalB,iBAAA,CAGKmB,SAAY;EACtBC,IAAM,GACFC,aAAc,CAAAC,WAAA,EACdD,aAAc,CAAAE,YAAA,EACdF,aAAc,CAAAG,YAAA,CAClB;EACAC,IAAM;EACNC,QAAU;AACd;AAAA;AAXS1B,iBAAA,CAcKS,cAA0C;EAAA;AAAA;AAAA;AAAA;EAKpDG,eAAiB;EAAA;AAAA;AAAA;AAAA;EAKjBD,eAAiB;EAAA;AAAA;AAAA;AAAA;EAKjBT,iBAAmB;AACvB;AA9BG,IAAMyB,gBAAN,GAAA3B,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}