{"ast":null,"code":"\"use strict\";\n\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseTransaction = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst constants_js_1 = require(\"./constants.js\");\nconst utils_js_1 = require(\"../common/utils.js\");\nconst common_js_1 = require(\"../common/common.js\");\nconst enums_js_1 = require(\"../common/enums.js\");\nconst types_js_1 = require(\"./types.js\");\nconst address_js_1 = require(\"./address.js\");\nconst utils_js_2 = require(\"./utils.js\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nclass BaseTransaction {\n  constructor(txData, opts) {\n    var _a, _b;\n    this.cache = {\n      hash: undefined,\n      dataFee: undefined\n    };\n    /**\n     * List of tx type defining EIPs,\n     * e.g. 1559 (fee market) and 2930 (access lists)\n     * for FeeMarketEIP1559Transaction objects\n     */\n    this.activeCapabilities = [];\n    /**\n     * The default chain the tx falls back to if no Common\n     * is provided and if the chain can't be derived from\n     * a passed in chainId (only EIP-2718 typed txs) or\n     * EIP-155 signature (legacy txs).\n     *\n     * @hidden\n     */\n    this.DEFAULT_CHAIN = enums_js_1.Chain.Mainnet;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = enums_js_1.Hardfork.Merge;\n    const {\n      nonce,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s,\n      type\n    } = txData;\n    this._type = Number((0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(type)));\n    this.txOptions = opts;\n    const toB = (0, utils_js_1.toUint8Array)(to === '' ? '0x' : to);\n    const vB = (0, utils_js_1.toUint8Array)(v === '' ? '0x' : v);\n    const rB = (0, utils_js_1.toUint8Array)(r === '' ? '0x' : r);\n    const sB = (0, utils_js_1.toUint8Array)(s === '' ? '0x' : s);\n    this.nonce = (0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(nonce === '' ? '0x' : nonce));\n    this.gasLimit = (0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(gasLimit === '' ? '0x' : gasLimit));\n    this.to = toB.length > 0 ? new address_js_1.Address(toB) : undefined;\n    this.value = (0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(value === '' ? '0x' : value));\n    this.data = (0, utils_js_1.toUint8Array)(data === '' ? '0x' : data);\n    this.v = vB.length > 0 ? (0, utils_js_1.uint8ArrayToBigInt)(vB) : undefined;\n    this.r = rB.length > 0 ? (0, utils_js_1.uint8ArrayToBigInt)(rB) : undefined;\n    this.s = sB.length > 0 ? (0, utils_js_1.uint8ArrayToBigInt)(sB) : undefined;\n    this._validateCannotExceedMaxInteger({\n      value: this.value,\n      r: this.r,\n      s: this.s\n    });\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({\n      gasLimit: this.gasLimit\n    }, 64);\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({\n      nonce: this.nonce\n    }, 64, true);\n    // eslint-disable-next-line no-null/no-null\n    const createContract = this.to === undefined || this.to === null;\n    const allowUnlimitedInitCodeSize = (_a = opts.allowUnlimitedInitCodeSize) !== null && _a !== void 0 ? _a : false;\n    const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();\n    if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n      (0, utils_js_2.checkMaxInitCodeSize)(common, this.data.length);\n    }\n  }\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n  get type() {\n    return this._type;\n  }\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n  supports(capability) {\n    return this.activeCapabilities.includes(capability);\n  }\n  validate(stringError = false) {\n    const errors = [];\n    if (this.getBaseFee() > this.gasLimit) {\n      errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n    }\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n    return stringError ? errors : errors.length === 0;\n  }\n  _validateYParity() {\n    const {\n      v\n    } = this;\n    if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n      throw new Error(msg);\n    }\n  }\n  /**\n   * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n   * Reasoning: https://ethereum.stackexchange.com/a/55728\n   */\n  _validateHighS() {\n    const {\n      s\n    } = this;\n    if (this.common.gteHardfork('homestead') && s !== undefined && s > constants_js_1.SECP256K1_ORDER_DIV_2) {\n      const msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n      throw new Error(msg);\n    }\n  }\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  getBaseFee() {\n    const txFee = this.common.param('gasPrices', 'tx');\n    let fee = this.getDataFee();\n    if (txFee) fee += txFee;\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      const txCreationFee = this.common.param('gasPrices', 'txCreation');\n      if (txCreationFee) fee += txCreationFee;\n    }\n    return fee;\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    const txDataZero = this.common.param('gasPrices', 'txDataZero');\n    const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n    let cost = BigInt(0);\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < this.data.length; i += 1) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n      this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n    }\n    // eslint-disable-next-line no-null/no-null\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      const dataLength = BigInt(Math.ceil(this.data.length / 32));\n      const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n      cost += initCodeCost;\n    }\n    return cost;\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  toCreationAddress() {\n    return this.to === undefined || this.to.buf.length === 0;\n  }\n  isSigned() {\n    const {\n      v,\n      r,\n      s\n    } = this;\n    if (v === undefined || r === undefined || s === undefined) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Determines if the signature is valid\n   */\n  verifySignature() {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      const publicKey = this.getSenderPublicKey();\n      return (0, utils_js_1.unpadUint8Array)(publicKey).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  }\n  /**\n   * Returns the sender's address\n   */\n  getSenderAddress() {\n    return new address_js_1.Address(address_js_1.Address.publicToAddress(this.getSenderPublicKey()));\n  }\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n  sign(privateKey) {\n    if (privateKey.length !== 32) {\n      const msg = this._errorMsg('Private key must be 32 bytes in length.');\n      throw new Error(msg);\n    }\n    // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n    let hackApplied = false;\n    if (this.type === 0 && this.common.gteHardfork('spuriousDragon') && !this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n      this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n      hackApplied = true;\n    }\n    const msgHash = this.getMessageToSign(true);\n    const {\n      v,\n      r,\n      s\n    } = this._ecsign(msgHash, privateKey);\n    const tx = this._processSignature(v, r, s);\n    // Hack part 2\n    if (hackApplied) {\n      const index = this.activeCapabilities.indexOf(types_js_1.Capability.EIP155ReplayProtection);\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1);\n      }\n    }\n    return tx;\n  }\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n  _getCommon(common, chainId) {\n    var _a, _b, _c, _d;\n    // TODO: this function needs to be reviewed and the code to be more clean\n    // check issue https://github.com/web3/web3.js/issues/6666\n    // Chain ID provided\n    if (chainId !== undefined) {\n      const chainIdBigInt = (0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(chainId));\n      if (common) {\n        if (common.chainId() !== chainIdBigInt) {\n          const msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n          throw new Error(msg);\n        }\n        // Common provided, chain ID does match\n        // -> Return provided Common\n        return common.copy();\n      }\n      if (common_js_1.Common.isSupportedChainId(chainIdBigInt)) {\n        // No Common, chain ID supported by Common\n        // -> Instantiate Common with chain ID\n        return new common_js_1.Common({\n          chain: chainIdBigInt,\n          hardfork: this.DEFAULT_HARDFORK\n        });\n      }\n      // No Common, chain ID not supported by Common\n      // -> Instantiate custom Common derived from DEFAULT_CHAIN\n      return common_js_1.Common.custom({\n        name: 'custom-chain',\n        networkId: chainIdBigInt,\n        chainId: chainIdBigInt\n      }, {\n        baseChain: this.DEFAULT_CHAIN,\n        hardfork: this.DEFAULT_HARDFORK\n      });\n    }\n    // No chain ID provided\n    // -> return Common provided or create new default Common\n    if ((common === null || common === void 0 ? void 0 : common.copy) && typeof (common === null || common === void 0 ? void 0 : common.copy) === 'function') {\n      return common.copy();\n    }\n    // TODO: Recheck this next block when working on https://github.com/web3/web3.js/issues/6666\n    // This block is to handle when `chainId` was not passed and the `common` object does not have `copy()`\n    // If it was meant to be unsupported to process `common` in this case, an exception should be thrown instead of the following block\n    if (common) {\n      const hardfork = typeof common.hardfork === 'function' ? common.hardfork() :\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      common.hardfork;\n      return common_js_1.Common.custom({\n        name: 'custom-chain',\n        networkId: common.networkId ? common.networkId() : (_b = BigInt((_a = common.customChain) === null || _a === void 0 ? void 0 : _a.networkId)) !== null && _b !== void 0 ? _b : undefined,\n        chainId: common.chainId ? common.chainId() : (_d = BigInt((_c = common.customChain) === null || _c === void 0 ? void 0 : _c.chainId)) !== null && _d !== void 0 ? _d : undefined\n      }, {\n        baseChain: this.DEFAULT_CHAIN,\n        hardfork: hardfork || this.DEFAULT_HARDFORK\n      });\n    }\n    return new common_js_1.Common({\n      chain: this.DEFAULT_CHAIN,\n      hardfork: this.DEFAULT_HARDFORK\n    });\n  }\n  /**\n   * Validates that an object with BigInt values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BigInt values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n  _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n    for (const [key, value] of Object.entries(values)) {\n      switch (bits) {\n        case 64:\n          if (cannotEqual) {\n            if (value !== undefined && value >= constants_js_1.MAX_UINT64) {\n              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n              throw new Error(msg);\n            }\n          } else if (value !== undefined && value > constants_js_1.MAX_UINT64) {\n            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n            throw new Error(msg);\n          }\n          break;\n        case 256:\n          if (cannotEqual) {\n            if (value !== undefined && value >= constants_js_1.MAX_INTEGER) {\n              const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n              throw new Error(msg);\n            }\n          } else if (value !== undefined && value > constants_js_1.MAX_INTEGER) {\n            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n            throw new Error(msg);\n          }\n          break;\n        default:\n          {\n            const msg = this._errorMsg('unimplemented bits value');\n            throw new Error(msg);\n          }\n      }\n    }\n  }\n  static _validateNotArray(values) {\n    const txDataKeys = ['nonce', 'gasPrice', 'gasLimit', 'to', 'value', 'data', 'v', 'r', 's', 'type', 'baseFee', 'maxFeePerGas', 'chainId'];\n    for (const [key, value] of Object.entries(values)) {\n      if (txDataKeys.includes(key)) {\n        if (Array.isArray(value)) {\n          throw new Error(`${key} cannot be an array`);\n        }\n      }\n    }\n  }\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n  _getSharedErrorPostfix() {\n    let hash = '';\n    try {\n      hash = this.isSigned() ? (0, web3_utils_1.bytesToHex)(this.hash()) : 'not available (unsigned)';\n    } catch (e) {\n      hash = 'error';\n    }\n    let isSigned = '';\n    try {\n      isSigned = this.isSigned().toString();\n    } catch (e) {\n      hash = 'error';\n    }\n    let hf = '';\n    try {\n      hf = this.common.hardfork();\n    } catch (e) {\n      hf = 'error';\n    }\n    let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n    postfix += `signed=${isSigned} hf=${hf}`;\n    return postfix;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  _ecsign(msgHash, privateKey, chainId) {\n    const signature = constants_js_1.secp256k1.sign(msgHash, privateKey);\n    const signatureBytes = signature.toCompactRawBytes();\n    const r = signatureBytes.subarray(0, 32);\n    const s = signatureBytes.subarray(32, 64);\n    const v = chainId === undefined ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);\n    return {\n      r,\n      s,\n      v\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromSerializedTx(\n  // @ts-expect-error unused variable\n  serialized,\n  // @ts-expect-error unused variable\n  opts = {}) {}\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromTxData(\n  // @ts-expect-error unused variable\n  txData,\n  // @ts-expect-error unused variable\n  opts = {}) {}\n}\nexports.BaseTransaction = BaseTransaction;","map":{"version":3,"names":["web3_utils_1","require","constants_js_1","utils_js_1","common_js_1","enums_js_1","types_js_1","address_js_1","utils_js_2","BaseTransaction","constructor","txData","opts","cache","hash","undefined","dataFee","activeCapabilities","DEFAULT_CHAIN","Chain","Mainnet","DEFAULT_HARDFORK","Hardfork","Merge","nonce","gasLimit","to","value","data","v","r","s","type","_type","Number","uint8ArrayToBigInt","toUint8Array","txOptions","toB","vB","rB","sB","length","Address","_validateCannotExceedMaxInteger","createContract","allowUnlimitedInitCodeSize","_a","common","_b","_getCommon","isActivatedEIP","checkMaxInitCodeSize","supports","capability","includes","validate","stringError","errors","getBaseFee","push","isSigned","verifySignature","_validateYParity","BigInt","msg","_errorMsg","Error","_validateHighS","gteHardfork","SECP256K1_ORDER_DIV_2","txFee","param","fee","getDataFee","toCreationAddress","txCreationFee","txDataZero","txDataNonZero","cost","i","dataLength","Math","ceil","initCodeCost","buf","publicKey","getSenderPublicKey","unpadUint8Array","e","getSenderAddress","publicToAddress","sign","privateKey","hackApplied","Capability","EIP155ReplayProtection","msgHash","getMessageToSign","_ecsign","tx","_processSignature","index","indexOf","splice","chainId","chainIdBigInt","copy","Common","isSupportedChainId","chain","hardfork","custom","name","networkId","baseChain","customChain","_d","_c","values","bits","cannotEqual","key","Object","entries","MAX_UINT64","MAX_INTEGER","_validateNotArray","txDataKeys","Array","isArray","_getSharedErrorPostfix","bytesToHex","toString","hf","postfix","signature","secp256k1","signatureBytes","toCompactRawBytes","subarray","recovery","fromSerializedTx","serialized","fromTxData","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-accounts/src/tx/baseTransaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Common as CommonType, Numbers } from 'web3-types';\nimport { bytesToHex } from 'web3-utils';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER_DIV_2, secp256k1 } from './constants.js';\nimport { toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { Common } from '../common/common.js';\nimport { Hardfork, Chain } from '../common/enums.js';\nimport type {\n\tAccessListEIP2930TxData,\n\tAccessListEIP2930ValuesArray,\n\tFeeMarketEIP1559TxData,\n\tFeeMarketEIP1559ValuesArray,\n\tJsonTx,\n\tTxData,\n\tTxOptions,\n\tTxValuesArray,\n} from './types.js';\nimport { Capability, ECDSASignature } from './types.js';\nimport { Address } from './address.js';\nimport { checkMaxInitCodeSize } from './utils.js';\n\ninterface TransactionCache {\n\thash: Uint8Array | undefined;\n\tdataFee?: {\n\t\tvalue: bigint;\n\t\thardfork: string | Hardfork;\n\t};\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n\tprivate readonly _type: number;\n\n\tpublic readonly nonce: bigint;\n\tpublic readonly gasLimit: bigint;\n\tpublic readonly to?: Address;\n\tpublic readonly value: bigint;\n\tpublic readonly data: Uint8Array;\n\n\tpublic readonly v?: bigint;\n\tpublic readonly r?: bigint;\n\tpublic readonly s?: bigint;\n\n\tpublic readonly common!: Common;\n\n\tprotected cache: TransactionCache = {\n\t\thash: undefined,\n\t\tdataFee: undefined,\n\t};\n\n\tprotected readonly txOptions: TxOptions;\n\n\t/**\n\t * List of tx type defining EIPs,\n\t * e.g. 1559 (fee market) and 2930 (access lists)\n\t * for FeeMarketEIP1559Transaction objects\n\t */\n\tprotected activeCapabilities: number[] = [];\n\n\t/**\n\t * The default chain the tx falls back to if no Common\n\t * is provided and if the chain can't be derived from\n\t * a passed in chainId (only EIP-2718 typed txs) or\n\t * EIP-155 signature (legacy txs).\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_CHAIN = Chain.Mainnet;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Merge;\n\n\tpublic constructor(\n\t\ttxData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n\t\topts: TxOptions,\n\t) {\n\t\tconst { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n\t\tthis._type = Number(uint8ArrayToBigInt(toUint8Array(type)));\n\n\t\tthis.txOptions = opts;\n\n\t\tconst toB = toUint8Array(to === '' ? '0x' : to);\n\t\tconst vB = toUint8Array(v === '' ? '0x' : v);\n\t\tconst rB = toUint8Array(r === '' ? '0x' : r);\n\t\tconst sB = toUint8Array(s === '' ? '0x' : s);\n\n\t\tthis.nonce = uint8ArrayToBigInt(toUint8Array(nonce === '' ? '0x' : nonce));\n\t\tthis.gasLimit = uint8ArrayToBigInt(toUint8Array(gasLimit === '' ? '0x' : gasLimit));\n\t\tthis.to = toB.length > 0 ? new Address(toB) : undefined;\n\t\tthis.value = uint8ArrayToBigInt(toUint8Array(value === '' ? '0x' : value));\n\t\tthis.data = toUint8Array(data === '' ? '0x' : data);\n\n\t\tthis.v = vB.length > 0 ? uint8ArrayToBigInt(vB) : undefined;\n\t\tthis.r = rB.length > 0 ? uint8ArrayToBigInt(rB) : undefined;\n\t\tthis.s = sB.length > 0 ? uint8ArrayToBigInt(sB) : undefined;\n\n\t\tthis._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n\n\t\t// geth limits gasLimit to 2^64-1\n\t\tthis._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n\n\t\t// EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n\t\tthis._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst createContract = this.to === undefined || this.to === null;\n\t\tconst allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n\t\tconst common = opts.common ?? this._getCommon();\n\t\tif (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n\t\t\tcheckMaxInitCodeSize(common, this.data.length);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the transaction type.\n\t *\n\t * Note: legacy txs will return tx type `0`.\n\t */\n\tpublic get type() {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * Checks if a tx type defining capability is active\n\t * on a tx, for example the EIP-1559 fee market mechanism\n\t * or the EIP-2930 access list feature.\n\t *\n\t * Note that this is different from the tx type itself,\n\t * so EIP-2930 access lists can very well be active\n\t * on an EIP-1559 tx for example.\n\t *\n\t * This method can be useful for feature checks if the\n\t * tx type is unknown (e.g. when instantiated with\n\t * the tx factory).\n\t *\n\t * See `Capabilites` in the `types` module for a reference\n\t * on all supported capabilities.\n\t */\n\tpublic supports(capability: Capability) {\n\t\treturn this.activeCapabilities.includes(capability);\n\t}\n\n\t/**\n\t * Checks if the transaction has the minimum amount of gas required\n\t * (DataFee + TxFee + Creation Fee).\n\t */\n\tpublic validate(): boolean;\n\tpublic validate(stringError: false): boolean;\n\tpublic validate(stringError: true): string[];\n\tpublic validate(stringError = false): boolean | string[] {\n\t\tconst errors = [];\n\n\t\tif (this.getBaseFee() > this.gasLimit) {\n\t\t\terrors.push(\n\t\t\t\t`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`,\n\t\t\t);\n\t\t}\n\n\t\tif (this.isSigned() && !this.verifySignature()) {\n\t\t\terrors.push('Invalid Signature');\n\t\t}\n\n\t\treturn stringError ? errors : errors.length === 0;\n\t}\n\n\tprotected _validateYParity() {\n\t\tconst { v } = this;\n\t\tif (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n\t\t\tconst msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n\t * Reasoning: https://ethereum.stackexchange.com/a/55728\n\t */\n\tprotected _validateHighS() {\n\t\tconst { s } = this;\n\t\tif (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n\t */\n\tpublic getBaseFee(): bigint {\n\t\tconst txFee = this.common.param('gasPrices', 'tx');\n\t\tlet fee = this.getDataFee();\n\t\tif (txFee) fee += txFee;\n\t\tif (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n\t\t\tconst txCreationFee = this.common.param('gasPrices', 'txCreation');\n\t\t\tif (txCreationFee) fee += txCreationFee;\n\t\t}\n\t\treturn fee;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tconst txDataZero = this.common.param('gasPrices', 'txDataZero');\n\t\tconst txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n\n\t\tlet cost = BigInt(0);\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < this.data.length; i += 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n\t\t\tthis.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n\t\t\tconst dataLength = BigInt(Math.ceil(this.data.length / 32));\n\t\t\tconst initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n\t\t\tcost += initCodeCost;\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic abstract getUpfrontCost(): bigint;\n\n\t/**\n\t * If the tx's `to` is to the creation address\n\t */\n\tpublic toCreationAddress(): boolean {\n\t\treturn this.to === undefined || this.to.buf.length === 0;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of this transaction, in order.\n\t *\n\t * Use {@link BaseTransaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n\t */\n\tpublic abstract raw():\n\t\t| TxValuesArray\n\t\t| AccessListEIP2930ValuesArray\n\t\t| FeeMarketEIP1559ValuesArray;\n\n\t/**\n\t * Returns the encoding of the transaction.\n\t */\n\tpublic abstract serialize(): Uint8Array;\n\n\t// Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n\t//\n\t// Note: do not use code docs here since VS Studio is then not able to detect the\n\t// comments from the inherited methods\n\tpublic abstract getMessageToSign(hashMessage: false): Uint8Array | Uint8Array[];\n\tpublic abstract getMessageToSign(hashMessage?: true): Uint8Array;\n\n\tpublic abstract hash(): Uint8Array;\n\n\tpublic abstract getMessageToVerifySignature(): Uint8Array;\n\n\tpublic isSigned(): boolean {\n\t\tconst { v, r, s } = this;\n\t\tif (v === undefined || r === undefined || s === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determines if the signature is valid\n\t */\n\tpublic verifySignature(): boolean {\n\t\ttry {\n\t\t\t// Main signature verification is done in `getSenderPublicKey()`\n\t\t\tconst publicKey = this.getSenderPublicKey();\n\t\t\treturn unpadUint8Array(publicKey).length !== 0;\n\t\t} catch (e: any) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the sender's address\n\t */\n\tpublic getSenderAddress(): Address {\n\t\treturn new Address(Address.publicToAddress(this.getSenderPublicKey()));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic abstract getSenderPublicKey(): Uint8Array;\n\n\t/**\n\t * Signs a transaction.\n\t *\n\t * Note that the signed tx is returned as a new object,\n\t * use as follows:\n\t * ```javascript\n\t * const signedTx = tx.sign(privateKey)\n\t * ```\n\t */\n\tpublic sign(privateKey: Uint8Array): TransactionObject {\n\t\tif (privateKey.length !== 32) {\n\t\t\tconst msg = this._errorMsg('Private key must be 32 bytes in length.');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\t// Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n\t\t// and want to recreate a signature (where EIP155 should be applied)\n\t\t// Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n\t\t// 2021-06-23\n\t\tlet hackApplied = false;\n\t\tif (\n\t\t\tthis.type === 0 &&\n\t\t\tthis.common.gteHardfork('spuriousDragon') &&\n\t\t\t!this.supports(Capability.EIP155ReplayProtection)\n\t\t) {\n\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\thackApplied = true;\n\t\t}\n\n\t\tconst msgHash = this.getMessageToSign(true);\n\t\tconst { v, r, s } = this._ecsign(msgHash, privateKey);\n\t\tconst tx = this._processSignature(v, r, s);\n\n\t\t// Hack part 2\n\t\tif (hackApplied) {\n\t\t\tconst index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);\n\t\t\tif (index > -1) {\n\t\t\t\tthis.activeCapabilities.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic abstract toJSON(): JsonTx;\n\n\t// Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n\tprotected abstract _processSignature(\n\t\tv: bigint,\n\t\tr: Uint8Array,\n\t\ts: Uint8Array,\n\t): TransactionObject;\n\n\t/**\n\t * Does chain ID checks on common and returns a common\n\t * to be used on instantiation\n\t * @hidden\n\t *\n\t * @param common - {@link Common} instance from tx options\n\t * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n\t */\n\tprotected _getCommon(common?: Common, chainId?: Numbers) {\n\t\t// TODO: this function needs to be reviewed and the code to be more clean\n\t\t// check issue https://github.com/web3/web3.js/issues/6666\n\t\t// Chain ID provided\n\t\tif (chainId !== undefined) {\n\t\t\tconst chainIdBigInt = uint8ArrayToBigInt(toUint8Array(chainId));\n\t\t\tif (common) {\n\t\t\t\tif (common.chainId() !== chainIdBigInt) {\n\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t'The chain ID does not match the chain ID of Common',\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\t// Common provided, chain ID does match\n\t\t\t\t// -> Return provided Common\n\t\t\t\treturn common.copy();\n\t\t\t}\n\t\t\tif (Common.isSupportedChainId(chainIdBigInt)) {\n\t\t\t\t// No Common, chain ID supported by Common\n\t\t\t\t// -> Instantiate Common with chain ID\n\t\t\t\treturn new Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });\n\t\t\t}\n\t\t\t// No Common, chain ID not supported by Common\n\t\t\t// -> Instantiate custom Common derived from DEFAULT_CHAIN\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-chain',\n\t\t\t\t\tnetworkId: chainIdBigInt,\n\t\t\t\t\tchainId: chainIdBigInt,\n\t\t\t\t},\n\t\t\t\t{ baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK },\n\t\t\t);\n\t\t}\n\t\t// No chain ID provided\n\t\t// -> return Common provided or create new default Common\n\n\t\tif (common?.copy && typeof common?.copy === 'function') {\n\t\t\treturn common.copy();\n\t\t}\n\t\t// TODO: Recheck this next block when working on https://github.com/web3/web3.js/issues/6666\n\t\t// This block is to handle when `chainId` was not passed and the `common` object does not have `copy()`\n\t\t// If it was meant to be unsupported to process `common` in this case, an exception should be thrown instead of the following block\n\t\tif (common) {\n\t\t\tconst hardfork =\n\t\t\t\ttypeof common.hardfork === 'function'\n\t\t\t\t\t? common.hardfork()\n\t\t\t\t\t: // eslint-disable-next-line @typescript-eslint/unbound-method\n\t\t\t\t\t  (common.hardfork as unknown as string);\n\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-chain',\n\t\t\t\t\tnetworkId: common.networkId\n\t\t\t\t\t\t? common.networkId()\n\t\t\t\t\t\t: BigInt((common as unknown as CommonType).customChain?.networkId) ??\n\t\t\t\t\t\t  undefined,\n\t\t\t\t\tchainId: common.chainId\n\t\t\t\t\t\t? common.chainId()\n\t\t\t\t\t\t: BigInt((common as unknown as CommonType).customChain?.chainId) ??\n\t\t\t\t\t\t  undefined,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain: this.DEFAULT_CHAIN,\n\t\t\t\t\thardfork: hardfork || this.DEFAULT_HARDFORK,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });\n\t}\n\n\t/**\n\t * Validates that an object with BigInt values cannot exceed the specified bit limit.\n\t * @param values Object containing string keys and BigInt values\n\t * @param bits Number of bits to check (64 or 256)\n\t * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n\t */\n\tprotected _validateCannotExceedMaxInteger(\n\t\tvalues: { [key: string]: bigint | undefined },\n\t\tbits = 256,\n\t\tcannotEqual = false,\n\t) {\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tswitch (bits) {\n\t\t\t\tcase 64:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_UINT64) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_UINT64) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 256:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_INTEGER) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_INTEGER) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst msg = this._errorMsg('unimplemented bits value');\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected static _validateNotArray(values: { [key: string]: any }) {\n\t\tconst txDataKeys = [\n\t\t\t'nonce',\n\t\t\t'gasPrice',\n\t\t\t'gasLimit',\n\t\t\t'to',\n\t\t\t'value',\n\t\t\t'data',\n\t\t\t'v',\n\t\t\t'r',\n\t\t\t's',\n\t\t\t'type',\n\t\t\t'baseFee',\n\t\t\t'maxFeePerGas',\n\t\t\t'chainId',\n\t\t];\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tif (txDataKeys.includes(key)) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthrow new Error(`${key} cannot be an array`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic abstract errorStr(): string;\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected abstract _errorMsg(msg: string): string;\n\n\t/**\n\t * Returns the shared error postfix part for _error() method\n\t * tx type implementations.\n\t */\n\tprotected _getSharedErrorPostfix() {\n\t\tlet hash = '';\n\t\ttry {\n\t\t\thash = this.isSigned() ? bytesToHex(this.hash()) : 'not available (unsigned)';\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet isSigned = '';\n\t\ttry {\n\t\t\tisSigned = this.isSigned().toString();\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet hf = '';\n\t\ttry {\n\t\t\thf = this.common.hardfork();\n\t\t} catch (e: any) {\n\t\t\thf = 'error';\n\t\t}\n\n\t\tlet postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n\t\tpostfix += `signed=${isSigned} hf=${hf}`;\n\n\t\treturn postfix;\n\t}\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _ecsign(msgHash: Uint8Array, privateKey: Uint8Array, chainId?: bigint): ECDSASignature {\n\t\tconst signature = secp256k1.sign(msgHash, privateKey);\n\t\tconst signatureBytes = signature.toCompactRawBytes();\n\n\t\tconst r = signatureBytes.subarray(0, 32);\n\t\tconst s = signatureBytes.subarray(32, 64);\n\n\t\tconst v =\n\t\t\tchainId === undefined\n\t\t\t\t? BigInt(signature.recovery! + 27)\n\t\t\t\t: BigInt(signature.recovery! + 35) + BigInt(chainId) * BigInt(2);\n\n\t\treturn { r, s, v };\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tpublic static fromSerializedTx(\n\t\t// @ts-expect-error unused variable\n\t\tserialized: Uint8Array,\n\t\t// @ts-expect-error unused variable\n\t\topts: TxOptions = {},\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t): any {}\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tpublic static fromTxData(\n\t\t// @ts-expect-error unused variable\n\t\ttxData: any,\n\t\t// @ts-expect-error unused variable\n\t\topts: TxOptions = {},\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t): any {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}