{"ast":null,"code":"import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(globalUniformData.worldColor, uniforms.uWorldColorAlpha, 0);\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      uWorldTransformMatrix: {\n        value: new Matrix(),\n        type: \"mat3x3<f32>\"\n      },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: {\n        value: new Float32Array(4),\n        type: \"vec4<f32>\"\n      },\n      uResolution: {\n        value: [0, 0],\n        type: \"vec2<f32>\"\n      }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [ExtensionType.WebGLSystem, ExtensionType.WebGPUSystem, ExtensionType.CanvasSystem],\n  name: \"globalUniforms\"\n};\nexport { GlobalUniformSystem };","map":{"version":3,"names":["GlobalUniformSystem","constructor","renderer","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","_renderer","reset","i","length","push","start","options","bind","size","projectionMatrix","worldTransformMatrix","worldColor","offset","renderTarget","currentGlobalUniformData","projectionData","Matrix","Point","globalUniformData","resolution","bindGroup","uniformGroup","pop","_createUniforms","uniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","copyFrom","tx","x","ty","y","color32BitToUniform","uWorldColorAlpha","update","renderPipes","uniformBatch","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","type","RendererType","WEBGL","resources","globalUniforms","UniformGroup","value","Float32Array","isStatic","destroy","extension","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\ninterface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}