{"ast":null,"code":"import { logger, noop, stringify } from '@polkadot/util';\nimport { fetch } from '@polkadot/x-fetch';\nimport { RpcCoder } from '../coder/index.js';\nimport defaults from '../defaults.js';\nimport { LRUCache } from '../lru.js';\nconst ERROR_SUBSCRIBE = 'HTTP Provider does not have subscriptions, use WebSockets instead';\nconst l = logger('api-http');\n/**\n * # @polkadot/rpc-provider\n *\n * @name HttpProvider\n *\n * @description The HTTP Provider allows sending requests using HTTP to a HTTP RPC server TCP port. It does not support subscriptions so you won't be able to listen to events such as new blocks or balance changes. It is usually preferable using the [[WsProvider]].\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Api from '@polkadot/api/promise';\n * import { HttpProvider } from '@polkadot/rpc-provider';\n *\n * const provider = new HttpProvider('http://127.0.0.1:9933');\n * const api = new Api(provider);\n * ```\n *\n * @see [[WsProvider]]\n */\nexport class HttpProvider {\n  __internal__callCache = new LRUCache();\n  __internal__coder;\n  __internal__endpoint;\n  __internal__headers;\n  __internal__stats;\n  /**\n   * @param {string} endpoint The endpoint url starting with http://\n   */\n  constructor(endpoint = defaults.HTTP_URL, headers = {}) {\n    if (!/^(https|http):\\/\\//.test(endpoint)) {\n      throw new Error(`Endpoint should start with 'http://' or 'https://', received '${endpoint}'`);\n    }\n    this.__internal__coder = new RpcCoder();\n    this.__internal__endpoint = endpoint;\n    this.__internal__headers = headers;\n    this.__internal__stats = {\n      active: {\n        requests: 0,\n        subscriptions: 0\n      },\n      total: {\n        bytesRecv: 0,\n        bytesSent: 0,\n        cached: 0,\n        errors: 0,\n        requests: 0,\n        subscriptions: 0,\n        timeout: 0\n      }\n    };\n  }\n  /**\n   * @summary `true` when this provider supports subscriptions\n   */\n  get hasSubscriptions() {\n    return !!false;\n  }\n  /**\n   * @description Returns a clone of the object\n   */\n  clone() {\n    return new HttpProvider(this.__internal__endpoint, this.__internal__headers);\n  }\n  /**\n   * @description Manually connect from the connection\n   */\n  async connect() {\n    // noop\n  }\n  /**\n   * @description Manually disconnect from the connection\n   */\n  async disconnect() {\n    // noop\n  }\n  /**\n   * @description Returns the connection stats\n   */\n  get stats() {\n    return this.__internal__stats;\n  }\n  /**\n   * @summary `true` when this provider supports clone()\n   */\n  get isClonable() {\n    return !!true;\n  }\n  /**\n   * @summary Whether the node is connected or not.\n   * @return {boolean} true if connected\n   */\n  get isConnected() {\n    return !!true;\n  }\n  /**\n   * @summary Events are not supported with the HttpProvider, see [[WsProvider]].\n   * @description HTTP Provider does not have 'on' emitters. WebSockets should be used instead.\n   */\n  on(_type, _sub) {\n    l.error('HTTP Provider does not have \\'on\\' emitters, use WebSockets instead');\n    return noop;\n  }\n  /**\n   * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.\n   */\n  async send(method, params, isCacheable) {\n    this.__internal__stats.total.requests++;\n    const [, body] = this.__internal__coder.encodeJson(method, params);\n    const cacheKey = isCacheable ? `${method}::${stringify(params)}` : '';\n    let resultPromise = isCacheable ? this.__internal__callCache.get(cacheKey) : null;\n    if (!resultPromise) {\n      resultPromise = this.__internal__send(body);\n      if (isCacheable) {\n        this.__internal__callCache.set(cacheKey, resultPromise);\n      }\n    } else {\n      this.__internal__stats.total.cached++;\n    }\n    return resultPromise;\n  }\n  async __internal__send(body) {\n    this.__internal__stats.active.requests++;\n    this.__internal__stats.total.bytesSent += body.length;\n    try {\n      const response = await fetch(this.__internal__endpoint, {\n        body,\n        headers: {\n          Accept: 'application/json',\n          'Content-Length': `${body.length}`,\n          'Content-Type': 'application/json',\n          ...this.__internal__headers\n        },\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`[${response.status}]: ${response.statusText}`);\n      }\n      const result = await response.text();\n      this.__internal__stats.total.bytesRecv += result.length;\n      const decoded = this.__internal__coder.decodeResponse(JSON.parse(result));\n      this.__internal__stats.active.requests--;\n      return decoded;\n    } catch (e) {\n      this.__internal__stats.active.requests--;\n      this.__internal__stats.total.errors++;\n      throw e;\n    }\n  }\n  /**\n   * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async subscribe(_types, _method, _params, _cb) {\n    l.error(ERROR_SUBSCRIBE);\n    throw new Error(ERROR_SUBSCRIBE);\n  }\n  /**\n   * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async unsubscribe(_type, _method, _id) {\n    l.error(ERROR_SUBSCRIBE);\n    throw new Error(ERROR_SUBSCRIBE);\n  }\n}","map":{"version":3,"names":["logger","noop","stringify","fetch","RpcCoder","defaults","LRUCache","ERROR_SUBSCRIBE","l","HttpProvider","__internal__callCache","__internal__coder","__internal__endpoint","__internal__headers","__internal__stats","constructor","endpoint","HTTP_URL","headers","test","Error","active","requests","subscriptions","total","bytesRecv","bytesSent","cached","errors","timeout","hasSubscriptions","clone","connect","disconnect","stats","isClonable","isConnected","on","_type","_sub","error","send","method","params","isCacheable","body","encodeJson","cacheKey","resultPromise","get","__internal__send","set","length","response","Accept","ok","status","statusText","result","text","decoded","decodeResponse","JSON","parse","e","subscribe","_types","_method","_params","_cb","unsubscribe","_id"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/rpc-provider/http/index.js"],"sourcesContent":["import { logger, noop, stringify } from '@polkadot/util';\nimport { fetch } from '@polkadot/x-fetch';\nimport { RpcCoder } from '../coder/index.js';\nimport defaults from '../defaults.js';\nimport { LRUCache } from '../lru.js';\nconst ERROR_SUBSCRIBE = 'HTTP Provider does not have subscriptions, use WebSockets instead';\nconst l = logger('api-http');\n/**\n * # @polkadot/rpc-provider\n *\n * @name HttpProvider\n *\n * @description The HTTP Provider allows sending requests using HTTP to a HTTP RPC server TCP port. It does not support subscriptions so you won't be able to listen to events such as new blocks or balance changes. It is usually preferable using the [[WsProvider]].\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Api from '@polkadot/api/promise';\n * import { HttpProvider } from '@polkadot/rpc-provider';\n *\n * const provider = new HttpProvider('http://127.0.0.1:9933');\n * const api = new Api(provider);\n * ```\n *\n * @see [[WsProvider]]\n */\nexport class HttpProvider {\n    __internal__callCache = new LRUCache();\n    __internal__coder;\n    __internal__endpoint;\n    __internal__headers;\n    __internal__stats;\n    /**\n     * @param {string} endpoint The endpoint url starting with http://\n     */\n    constructor(endpoint = defaults.HTTP_URL, headers = {}) {\n        if (!/^(https|http):\\/\\//.test(endpoint)) {\n            throw new Error(`Endpoint should start with 'http://' or 'https://', received '${endpoint}'`);\n        }\n        this.__internal__coder = new RpcCoder();\n        this.__internal__endpoint = endpoint;\n        this.__internal__headers = headers;\n        this.__internal__stats = {\n            active: { requests: 0, subscriptions: 0 },\n            total: { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 }\n        };\n    }\n    /**\n     * @summary `true` when this provider supports subscriptions\n     */\n    get hasSubscriptions() {\n        return !!false;\n    }\n    /**\n     * @description Returns a clone of the object\n     */\n    clone() {\n        return new HttpProvider(this.__internal__endpoint, this.__internal__headers);\n    }\n    /**\n     * @description Manually connect from the connection\n     */\n    async connect() {\n        // noop\n    }\n    /**\n     * @description Manually disconnect from the connection\n     */\n    async disconnect() {\n        // noop\n    }\n    /**\n     * @description Returns the connection stats\n     */\n    get stats() {\n        return this.__internal__stats;\n    }\n    /**\n     * @summary `true` when this provider supports clone()\n     */\n    get isClonable() {\n        return !!true;\n    }\n    /**\n     * @summary Whether the node is connected or not.\n     * @return {boolean} true if connected\n     */\n    get isConnected() {\n        return !!true;\n    }\n    /**\n     * @summary Events are not supported with the HttpProvider, see [[WsProvider]].\n     * @description HTTP Provider does not have 'on' emitters. WebSockets should be used instead.\n     */\n    on(_type, _sub) {\n        l.error('HTTP Provider does not have \\'on\\' emitters, use WebSockets instead');\n        return noop;\n    }\n    /**\n     * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.\n     */\n    async send(method, params, isCacheable) {\n        this.__internal__stats.total.requests++;\n        const [, body] = this.__internal__coder.encodeJson(method, params);\n        const cacheKey = isCacheable ? `${method}::${stringify(params)}` : '';\n        let resultPromise = isCacheable\n            ? this.__internal__callCache.get(cacheKey)\n            : null;\n        if (!resultPromise) {\n            resultPromise = this.__internal__send(body);\n            if (isCacheable) {\n                this.__internal__callCache.set(cacheKey, resultPromise);\n            }\n        }\n        else {\n            this.__internal__stats.total.cached++;\n        }\n        return resultPromise;\n    }\n    async __internal__send(body) {\n        this.__internal__stats.active.requests++;\n        this.__internal__stats.total.bytesSent += body.length;\n        try {\n            const response = await fetch(this.__internal__endpoint, {\n                body,\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Length': `${body.length}`,\n                    'Content-Type': 'application/json',\n                    ...this.__internal__headers\n                },\n                method: 'POST'\n            });\n            if (!response.ok) {\n                throw new Error(`[${response.status}]: ${response.statusText}`);\n            }\n            const result = await response.text();\n            this.__internal__stats.total.bytesRecv += result.length;\n            const decoded = this.__internal__coder.decodeResponse(JSON.parse(result));\n            this.__internal__stats.active.requests--;\n            return decoded;\n        }\n        catch (e) {\n            this.__internal__stats.active.requests--;\n            this.__internal__stats.total.errors++;\n            throw e;\n        }\n    }\n    /**\n     * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async subscribe(_types, _method, _params, _cb) {\n        l.error(ERROR_SUBSCRIBE);\n        throw new Error(ERROR_SUBSCRIBE);\n    }\n    /**\n     * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async unsubscribe(_type, _method, _id) {\n        l.error(ERROR_SUBSCRIBE);\n        throw new Error(ERROR_SUBSCRIBE);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}