{"ast":null,"code":"import { extractAuthor } from './util.js';\nfunction mapExtrinsics(extrinsics, records) {\n  return extrinsics.map((extrinsic, index) => {\n    let dispatchError;\n    let dispatchInfo;\n    const events = records.filter(({\n      phase\n    }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({\n      event\n    }) => {\n      if (event.section === 'system') {\n        if (event.method === 'ExtrinsicSuccess') {\n          dispatchInfo = event.data[0];\n        } else if (event.method === 'ExtrinsicFailed') {\n          dispatchError = event.data[0];\n          dispatchInfo = event.data[1];\n        }\n      }\n      return event;\n    });\n    return {\n      dispatchError,\n      dispatchInfo,\n      events,\n      extrinsic\n    };\n  });\n}\nexport function createSignedBlockExtended(registry, block, events, validators, author) {\n  // an instance of the base extrinsic for us to extend\n  const SignedBlockBase = registry.createClass('SignedBlock');\n  class Implementation extends SignedBlockBase {\n    __internal__author;\n    __internal__events;\n    __internal__extrinsics;\n    constructor(registry, block, events, validators, author) {\n      super(registry, block);\n      this.__internal__author = author || extractAuthor(this.block.header.digest, validators || []);\n      this.__internal__events = events || [];\n      this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);\n      this.createdAtHash = block?.createdAtHash;\n    }\n    /**\n     * @description Convenience method, returns the author for the block\n     */\n    get author() {\n      return this.__internal__author;\n    }\n    /**\n     * @description Convenience method, returns the events associated with the block\n     */\n    get events() {\n      return this.__internal__events;\n    }\n    /**\n     * @description Returns the extrinsics and their events, mapped\n     */\n    get extrinsics() {\n      return this.__internal__extrinsics;\n    }\n  }\n  return new Implementation(registry, block, events, validators, author);\n}","map":{"version":3,"names":["extractAuthor","mapExtrinsics","extrinsics","records","map","extrinsic","index","dispatchError","dispatchInfo","events","filter","phase","isApplyExtrinsic","asApplyExtrinsic","eq","event","section","method","data","createSignedBlockExtended","registry","block","validators","author","SignedBlockBase","createClass","Implementation","__internal__author","__internal__events","__internal__extrinsics","constructor","header","digest","createdAtHash"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/api-derive/type/SignedBlockExtended.js"],"sourcesContent":["import { extractAuthor } from './util.js';\nfunction mapExtrinsics(extrinsics, records) {\n    return extrinsics.map((extrinsic, index) => {\n        let dispatchError;\n        let dispatchInfo;\n        const events = records\n            .filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index))\n            .map(({ event }) => {\n            if (event.section === 'system') {\n                if (event.method === 'ExtrinsicSuccess') {\n                    dispatchInfo = event.data[0];\n                }\n                else if (event.method === 'ExtrinsicFailed') {\n                    dispatchError = event.data[0];\n                    dispatchInfo = event.data[1];\n                }\n            }\n            return event;\n        });\n        return { dispatchError, dispatchInfo, events, extrinsic };\n    });\n}\nexport function createSignedBlockExtended(registry, block, events, validators, author) {\n    // an instance of the base extrinsic for us to extend\n    const SignedBlockBase = registry.createClass('SignedBlock');\n    class Implementation extends SignedBlockBase {\n        __internal__author;\n        __internal__events;\n        __internal__extrinsics;\n        constructor(registry, block, events, validators, author) {\n            super(registry, block);\n            this.__internal__author = author || extractAuthor(this.block.header.digest, validators || []);\n            this.__internal__events = events || [];\n            this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);\n            this.createdAtHash = block?.createdAtHash;\n        }\n        /**\n         * @description Convenience method, returns the author for the block\n         */\n        get author() {\n            return this.__internal__author;\n        }\n        /**\n         * @description Convenience method, returns the events associated with the block\n         */\n        get events() {\n            return this.__internal__events;\n        }\n        /**\n         * @description Returns the extrinsics and their events, mapped\n         */\n        get extrinsics() {\n            return this.__internal__extrinsics;\n        }\n    }\n    return new Implementation(registry, block, events, validators, author);\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,WAAW;AACzC,SAASC,aAAaA,CAACC,UAAU,EAAEC,OAAO,EAAE;EACxC,OAAOD,UAAU,CAACE,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;IACxC,IAAIC,aAAa;IACjB,IAAIC,YAAY;IAChB,MAAMC,MAAM,GAAGN,OAAO,CACjBO,MAAM,CAAC,CAAC;MAAEC;IAAM,CAAC,KAAKA,KAAK,CAACC,gBAAgB,IAAID,KAAK,CAACE,gBAAgB,CAACC,EAAE,CAACR,KAAK,CAAC,CAAC,CACjFF,GAAG,CAAC,CAAC;MAAEW;IAAM,CAAC,KAAK;MACpB,IAAIA,KAAK,CAACC,OAAO,KAAK,QAAQ,EAAE;QAC5B,IAAID,KAAK,CAACE,MAAM,KAAK,kBAAkB,EAAE;UACrCT,YAAY,GAAGO,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC;QAChC,CAAC,MACI,IAAIH,KAAK,CAACE,MAAM,KAAK,iBAAiB,EAAE;UACzCV,aAAa,GAAGQ,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC;UAC7BV,YAAY,GAAGO,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC;QAChC;MACJ;MACA,OAAOH,KAAK;IAChB,CAAC,CAAC;IACF,OAAO;MAAER,aAAa;MAAEC,YAAY;MAAEC,MAAM;MAAEJ;IAAU,CAAC;EAC7D,CAAC,CAAC;AACN;AACA,OAAO,SAASc,yBAAyBA,CAACC,QAAQ,EAAEC,KAAK,EAAEZ,MAAM,EAAEa,UAAU,EAAEC,MAAM,EAAE;EACnF;EACA,MAAMC,eAAe,GAAGJ,QAAQ,CAACK,WAAW,CAAC,aAAa,CAAC;EAC3D,MAAMC,cAAc,SAASF,eAAe,CAAC;IACzCG,kBAAkB;IAClBC,kBAAkB;IAClBC,sBAAsB;IACtBC,WAAWA,CAACV,QAAQ,EAAEC,KAAK,EAAEZ,MAAM,EAAEa,UAAU,EAAEC,MAAM,EAAE;MACrD,KAAK,CAACH,QAAQ,EAAEC,KAAK,CAAC;MACtB,IAAI,CAACM,kBAAkB,GAAGJ,MAAM,IAAIvB,aAAa,CAAC,IAAI,CAACqB,KAAK,CAACU,MAAM,CAACC,MAAM,EAAEV,UAAU,IAAI,EAAE,CAAC;MAC7F,IAAI,CAACM,kBAAkB,GAAGnB,MAAM,IAAI,EAAE;MACtC,IAAI,CAACoB,sBAAsB,GAAG5B,aAAa,CAAC,IAAI,CAACoB,KAAK,CAACnB,UAAU,EAAE,IAAI,CAAC0B,kBAAkB,CAAC;MAC3F,IAAI,CAACK,aAAa,GAAGZ,KAAK,EAAEY,aAAa;IAC7C;IACA;AACR;AACA;IACQ,IAAIV,MAAMA,CAAA,EAAG;MACT,OAAO,IAAI,CAACI,kBAAkB;IAClC;IACA;AACR;AACA;IACQ,IAAIlB,MAAMA,CAAA,EAAG;MACT,OAAO,IAAI,CAACmB,kBAAkB;IAClC;IACA;AACR;AACA;IACQ,IAAI1B,UAAUA,CAAA,EAAG;MACb,OAAO,IAAI,CAAC2B,sBAAsB;IACtC;EACJ;EACA,OAAO,IAAIH,cAAc,CAACN,QAAQ,EAAEC,KAAK,EAAEZ,MAAM,EAAEa,UAAU,EAAEC,MAAM,CAAC;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}