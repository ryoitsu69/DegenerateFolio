{"ast":null,"code":"var LINE_JOIN = /* @__PURE__ */(LINE_JOIN2 => (LINE_JOIN2.MITER = \"miter\", LINE_JOIN2.BEVEL = \"bevel\", LINE_JOIN2.ROUND = \"round\", LINE_JOIN2))(LINE_JOIN || {}),\n  LINE_CAP = /* @__PURE__ */(LINE_CAP2 => (LINE_CAP2.BUTT = \"butt\", LINE_CAP2.ROUND = \"round\", LINE_CAP2.SQUARE = \"square\", LINE_CAP2))(LINE_CAP || {});\nconst curves = {\n    adaptive: !0,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments: 2048,\n    epsilon: 1e-4,\n    _segmentsCount(length, defaultSegments = 20) {\n      if (!this.adaptive || !length || isNaN(length)) return defaultSegments;\n      let result = Math.ceil(length / this.maxLength);\n      return result < this.minSegments ? result = this.minSegments : result > this.maxSegments && (result = this.maxSegments), result;\n    }\n  },\n  GRAPHICS_CURVES = curves;\nexport { GRAPHICS_CURVES, LINE_CAP, LINE_JOIN, curves };","map":{"version":3,"names":["LINE_JOIN","LINE_JOIN2","MITER","BEVEL","ROUND","LINE_CAP","LINE_CAP2","BUTT","SQUARE","curves","adaptive","maxLength","minSegments","maxSegments","epsilon","_segmentsCount","length","defaultSegments","isNaN","result","Math","ceil","GRAPHICS_CURVES"],"sources":["/home/ryoitsu/node_modules/@pixi/graphics/src/const.ts"],"sourcesContent":["/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n * @memberof PIXI\n * @static\n * @enum {string}\n */\nexport enum LINE_JOIN\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 'miter': make a sharp corner where outer part of lines meet\n     * @default miter\n     */\n    MITER = 'miter',\n    /**\n     * 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n     * @default bevel\n     */\n    BEVEL = 'bevel',\n    /**\n     * 'round': add an arc at the joint\n     * @default round\n     */\n    ROUND = 'round'\n}\n\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n * @see PIXI.Graphics#lineStyle\n * @memberof PIXI\n * @static\n * @enum {string}\n */\nexport enum LINE_CAP\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 'butt': don't add any cap at line ends (leaves orthogonal edges)\n     * @default butt\n     */\n    BUTT = 'butt',\n    /**\n     * 'round': add semicircle at ends\n     * @default round\n     */\n    ROUND = 'round',\n    /**\n     * 'square': add square at end (like `BUTT` except more length at end)\n     * @default square\n     */\n    SQUARE = 'square'\n}\n\n/**\n * @memberof PIXI\n * @deprecated\n */\nexport interface IGraphicsCurvesSettings\n{\n    adaptive: boolean;\n    maxLength: number;\n    minSegments: number;\n    maxSegments: number;\n\n    epsilon: number;\n\n    _segmentsCount(length: number, defaultSegments?: number): number;\n}\n\n/**\n * @private\n */\nexport const curves = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments:  2048,\n\n    epsilon: 0.0001,\n\n    _segmentsCount(length: number, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n\n/**\n * @static\n * @readonly\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @deprecated since 7.1.0\n * @see PIXI.Graphics.curves\n */\nexport const GRAPHICS_CURVES = curves;\n"],"mappings":"AAQY,IAAAA,SAAA,mBAAAC,UAAA,KAORA,UAAA,CAAAC,KAAA,GAAQ,SAKRD,UAAA,CAAAE,KAAA,GAAQ,SAKRF,UAAA,CAAAG,KAAA,GAAQ,SAjBAH,UAAA,GAAAD,SAAA;EA2BAK,QAAA,GAAL,gBAAKC,SAAA,KAORA,SAAA,CAAAC,IAAA,GAAO,QAKPD,SAAA,CAAAF,KAAA,GAAQ,SAKRE,SAAA,CAAAE,MAAA,GAAS,UAjBDF,SAAA,GAAAD,QAAA;AAuCL,MAAMI,MAAA,GAAS;IAClBC,QAAA,EAAU;IACVC,SAAA,EAAW;IACXC,WAAA,EAAa;IACbC,WAAA,EAAc;IAEdC,OAAA,EAAS;IAETC,eAAeC,MAAA,EAAgBC,eAAA,GAAkB,IACjD;MACI,IAAI,CAAC,KAAKP,QAAA,IAAY,CAACM,MAAA,IAAUE,KAAA,CAAMF,MAAM,GAElC,OAAAC,eAAA;MAGX,IAAIE,MAAA,GAASC,IAAA,CAAKC,IAAA,CAAKL,MAAA,GAAS,KAAKL,SAAS;MAE1C,OAAAQ,MAAA,GAAS,KAAKP,WAAA,GAEdO,MAAA,GAAS,KAAKP,WAAA,GAETO,MAAA,GAAS,KAAKN,WAAA,KAEnBM,MAAA,GAAS,KAAKN,WAAA,GAGXM,MAAA;IACX;EACJ;EAWaG,eAAA,GAAkBb,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}