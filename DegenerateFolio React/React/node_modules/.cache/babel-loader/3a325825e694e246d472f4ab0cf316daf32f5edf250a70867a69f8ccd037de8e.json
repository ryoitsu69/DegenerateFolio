{"ast":null,"code":"import { Rectangle } from './Rectangle.mjs';\n\"use strict\";\nclass Ellipse {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0) {\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    this.type = \"ellipse\";\n    this.x = x;\n    this.y = y;\n    this.halfWidth = halfWidth;\n    this.halfHeight = halfHeight;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   * @returns {Ellipse} A copy of the ellipse\n   */\n  clone() {\n    return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  contains(x, y) {\n    if (this.halfWidth <= 0 || this.halfHeight <= 0) {\n      return false;\n    }\n    let normx = (x - this.x) / this.halfWidth;\n    let normy = (y - this.y) / this.halfHeight;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  }\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @param width\n   * @returns Whether the x/y coords are within this ellipse\n   */\n  strokeContains(x, y, width) {\n    const {\n      halfWidth,\n      halfHeight\n    } = this;\n    if (halfWidth <= 0 || halfHeight <= 0) {\n      return false;\n    }\n    const halfStrokeWidth = width / 2;\n    const innerA = halfWidth - halfStrokeWidth;\n    const innerB = halfHeight - halfStrokeWidth;\n    const outerA = halfWidth + halfStrokeWidth;\n    const outerB = halfHeight + halfStrokeWidth;\n    const normalizedX = x - this.x;\n    const normalizedY = y - this.y;\n    const innerEllipse = normalizedX * normalizedX / (innerA * innerA) + normalizedY * normalizedY / (innerB * innerB);\n    const outerEllipse = normalizedX * normalizedX / (outerA * outerA) + normalizedY * normalizedY / (outerB * outerB);\n    return innerEllipse > 1 && outerEllipse <= 1;\n  }\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   * @returns The framing rectangle\n   */\n  getBounds() {\n    return new Rectangle(this.x - this.halfWidth, this.y - this.halfHeight, this.halfWidth * 2, this.halfHeight * 2);\n  }\n  /**\n   * Copies another ellipse to this one.\n   * @param ellipse - The ellipse to copy from.\n   * @returns Returns itself.\n   */\n  copyFrom(ellipse) {\n    this.x = ellipse.x;\n    this.y = ellipse.y;\n    this.halfWidth = ellipse.halfWidth;\n    this.halfHeight = ellipse.halfHeight;\n    return this;\n  }\n  /**\n   * Copies this ellipse to another one.\n   * @param ellipse - The ellipse to copy to.\n   * @returns Returns given parameter.\n   */\n  copyTo(ellipse) {\n    ellipse.copyFrom(this);\n    return ellipse;\n  }\n  toString() {\n    return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n  }\n}\nexport { Ellipse };","map":{"version":3,"names":["Ellipse","constructor","x","y","halfWidth","halfHeight","type","clone","contains","normx","normy","strokeContains","width","halfStrokeWidth","innerA","innerB","outerA","outerB","normalizedX","normalizedY","innerEllipse","outerEllipse","getBounds","Rectangle","copyFrom","ellipse","copyTo","toString"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/maths/shapes/Ellipse.ts"],"sourcesContent":["import { Rectangle } from './Rectangle';\n\nimport type { ShapePrimitive } from './ShapePrimitive';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for containers.\n * ```js\n * import { Ellipse } from 'pixi.js';\n *\n * const ellipse = new Ellipse(0, 0, 20, 10); // 40x20 rectangle\n * const isPointInEllipse = ellipse.contains(0, 0); // true\n * ```\n * @memberof maths\n */\nexport class Ellipse implements ShapePrimitive\n{\n    /**\n     * The X coordinate of the center of this ellipse\n     * @default 0\n     */\n    public x: number;\n\n    /**\n     * The Y coordinate of the center of this ellipse\n     * @default 0\n     */\n    public y: number;\n\n    /**\n     * The half width of this ellipse\n     * @default 0\n     */\n    public halfWidth: number;\n\n    /**\n     * The half height of this ellipse\n     * @default 0\n     */\n    public halfHeight: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default 'ellipse'\n     */\n    public readonly type = 'ellipse';\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.halfWidth = halfWidth;\n        this.halfHeight = halfHeight;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {Ellipse} A copy of the ellipse\n     */\n    public clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.halfWidth, this.halfHeight);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    public contains(x: number, y: number): boolean\n    {\n        if (this.halfWidth <= 0 || this.halfHeight <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.halfWidth);\n        let normy = ((y - this.y) / this.halfHeight);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse including stroke\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @param width\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    public strokeContains(x: number, y: number, width: number): boolean\n    {\n        const { halfWidth, halfHeight } = this;\n\n        if (halfWidth <= 0 || halfHeight <= 0)\n        {\n            return false;\n        }\n\n        const halfStrokeWidth = width / 2;\n        const innerA = halfWidth - halfStrokeWidth;\n        const innerB = halfHeight - halfStrokeWidth;\n        const outerA = halfWidth + halfStrokeWidth;\n        const outerB = halfHeight + halfStrokeWidth;\n\n        const normalizedX = x - this.x;\n        const normalizedY = y - this.y;\n\n        const innerEllipse = ((normalizedX * normalizedX) / (innerA * innerA))\n                           + ((normalizedY * normalizedY) / (innerB * innerB));\n        const outerEllipse = ((normalizedX * normalizedX) / (outerA * outerA))\n                           + ((normalizedY * normalizedY) / (outerB * outerB));\n\n        return innerEllipse > 1 && outerEllipse <= 1;\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    public getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.halfWidth, this.y - this.halfHeight, this.halfWidth * 2, this.halfHeight * 2);\n    }\n\n    /**\n     * Copies another ellipse to this one.\n     * @param ellipse - The ellipse to copy from.\n     * @returns Returns itself.\n     */\n    public copyFrom(ellipse: Ellipse): this\n    {\n        this.x = ellipse.x;\n        this.y = ellipse.y;\n        this.halfWidth = ellipse.halfWidth;\n        this.halfHeight = ellipse.halfHeight;\n\n        return this;\n    }\n\n    /**\n     * Copies this ellipse to another one.\n     * @param ellipse - The ellipse to copy to.\n     * @returns Returns given parameter.\n     */\n    public copyTo(ellipse: Ellipse): Ellipse\n    {\n        ellipse.copyFrom(this);\n\n        return ellipse;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/math:Ellipse x=${this.x} y=${this.y} halfWidth=${this.halfWidth} halfHeight=${this.halfHeight}]`;\n    }\n    // #endif\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}