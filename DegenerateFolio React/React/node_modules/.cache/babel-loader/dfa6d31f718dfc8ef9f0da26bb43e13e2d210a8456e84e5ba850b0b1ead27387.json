{"ast":null,"code":"\"use strict\";\n\nlet promise;\nasync function detectVideoAlphaMode() {\n  promise ?? (promise = (async () => {\n    const canvas = document.createElement(\"canvas\");\n    const gl = canvas.getContext(\"webgl\");\n    if (!gl) {\n      return \"premultiply-alpha-on-upload\";\n    }\n    const video = await new Promise(resolve => {\n      const video2 = document.createElement(\"video\");\n      video2.onloadeddata = () => resolve(video2);\n      video2.onerror = () => resolve(null);\n      video2.autoplay = false;\n      video2.crossOrigin = \"anonymous\";\n      video2.preload = \"auto\";\n      video2.src = \"data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=\";\n      video2.load();\n    });\n    if (!video) {\n      return \"premultiply-alpha-on-upload\";\n    }\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const framebuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n    const pixel = new Uint8Array(4);\n    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n    gl.deleteFramebuffer(framebuffer);\n    gl.deleteTexture(texture);\n    gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n    return pixel[0] <= pixel[3] ? \"premultiplied-alpha\" : \"premultiply-alpha-on-upload\";\n  })());\n  return promise;\n}\nexport { detectVideoAlphaMode };","map":{"version":3,"names":["promise","detectVideoAlphaMode","canvas","document","createElement","gl","getContext","video","Promise","resolve","video2","onloadeddata","onerror","autoplay","crossOrigin","preload","src","load","texture","createTexture","bindTexture","TEXTURE_2D","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","texImage2D","RGBA","UNSIGNED_BYTE","pixel","Uint8Array","readPixels","deleteFramebuffer","deleteTexture","getExtension","loseContext"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/utils/browser/detectVideoAlphaMode.ts"],"sourcesContent":["import type { ALPHA_MODES } from '../../rendering/renderers/shared/texture/const';\n\nlet promise: Promise<ALPHA_MODES> | undefined;\n\n/**\n * Helper for detecting the correct alpha mode for video textures.\n * For some reason, some browsers/devices/WebGL implementations premultiply the alpha\n * of a video before and then a second time if `UNPACK_PREMULTIPLY_ALPHA_WEBGL`\n * is true. So the video is premultiplied twice if the alpha mode is `UNPACK`.\n * In this case we need the alpha mode to be `PMA`. This function detects\n * the upload behavior by uploading a white 2x2 webm with 50% alpha\n * without `UNPACK_PREMULTIPLY_ALPHA_WEBGL` and then checking whether\n * the uploaded pixels are premultiplied.\n * @memberof utils\n * @function detectVideoAlphaMode\n * @returns {Promise<ALPHA_MODES>} The correct alpha mode for video textures.\n */\nexport async function detectVideoAlphaMode(): Promise<ALPHA_MODES>\n{\n    promise ??= (async () =>\n    {\n        const canvas = document.createElement('canvas');\n        const gl = canvas.getContext('webgl');\n\n        if (!gl)\n        {\n            return 'premultiply-alpha-on-upload';\n        }\n\n        const video = await new Promise<HTMLVideoElement | null>((resolve) =>\n        {\n            const video = document.createElement('video');\n\n            video.onloadeddata = () => resolve(video);\n            video.onerror = () => resolve(null);\n            video.autoplay = false;\n            video.crossOrigin = 'anonymous';\n            video.preload = 'auto';\n            // eslint-disable-next-line max-len\n            video.src = 'data:video/webm;base64,GkXfo59ChoEBQveBAULygQRC84EIQoKEd2VibUKHgQJChYECGFOAZwEAAAAAAAHTEU2bdLpNu4tTq4QVSalmU6yBoU27i1OrhBZUrmtTrIHGTbuMU6uEElTDZ1OsggEXTbuMU6uEHFO7a1OsggG97AEAAAAAAABZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmoCrXsYMPQkBNgIRMYXZmV0GETGF2ZkSJiEBEAAAAAAAAFlSua8yuAQAAAAAAAEPXgQFzxYgAAAAAAAAAAZyBACK1nIN1bmSIgQCGhVZfVlA5g4EBI+ODhAJiWgDglLCBArqBApqBAlPAgQFVsIRVuYEBElTDZ9Vzc9JjwItjxYgAAAAAAAAAAWfInEWjh0VOQ09ERVJEh49MYXZjIGxpYnZweC12cDlnyKJFo4hEVVJBVElPTkSHlDAwOjAwOjAwLjA0MDAwMDAwMAAAH0O2dcfngQCgwqGggQAAAIJJg0IAABAAFgA4JBwYSgAAICAAEb///4r+AAB1oZ2mm+6BAaWWgkmDQgAAEAAWADgkHBhKAAAgIABIQBxTu2uRu4+zgQC3iveBAfGCAXHwgQM=';\n            video.load();\n        });\n\n        if (!video)\n        {\n            return 'premultiply-alpha-on-upload';\n        }\n\n        const texture = gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        const framebuffer = gl.createFramebuffer();\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER,\n            gl.COLOR_ATTACHMENT0,\n            gl.TEXTURE_2D,\n            texture,\n            0\n        );\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, video);\n\n        const pixel = new Uint8Array(4);\n\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n        gl.deleteFramebuffer(framebuffer);\n        gl.deleteTexture(texture);\n        gl.getExtension('WEBGL_lose_context')?.loseContext();\n\n        return pixel[0] <= pixel[3] ? 'premultiplied-alpha' : 'premultiply-alpha-on-upload';\n    })();\n\n    return promise;\n}\n"],"mappings":";;AAEA,IAAIA,OAAA;AAeJ,eAAsBC,oBACtBA,CAAA;EACID,OAAA,KAAAA,OAAA,IAAa,YACb;IACU,MAAAE,MAAA,GAASC,QAAS,CAAAC,aAAA,CAAc,QAAQ;IACxC,MAAAC,EAAA,GAAKH,MAAO,CAAAI,UAAA,CAAW,OAAO;IAEpC,IAAI,CAACD,EACL;MACW;IAAA;IAGX,MAAME,KAAQ,SAAM,IAAIC,OAAA,CAAkCC,OAC1D;MACU,MAAAC,MAAA,GAAQP,QAAS,CAAAC,aAAA,CAAc,OAAO;MAE5CM,MAAM,CAAAC,YAAA,GAAe,MAAMF,OAAA,CAAQC,MAAK;MACxCA,MAAM,CAAAE,OAAA,GAAU,MAAMH,OAAA,CAAQ,IAAI;MAClCC,MAAA,CAAMG,QAAW;MACjBH,MAAA,CAAMI,WAAc;MACpBJ,MAAA,CAAMK,OAAU;MAEhBL,MAAA,CAAMM,GAAM;MACZN,MAAA,CAAMO,IAAK;IAAA,CACd;IAED,IAAI,CAACV,KACL;MACW;IAAA;IAGL,MAAAW,OAAA,GAAUb,EAAA,CAAGc,aAAc;IAE9Bd,EAAA,CAAAe,WAAA,CAAYf,EAAG,CAAAgB,UAAA,EAAYH,OAAO;IAE/B,MAAAI,WAAA,GAAcjB,EAAA,CAAGkB,iBAAkB;IAEtClB,EAAA,CAAAmB,eAAA,CAAgBnB,EAAG,CAAAoB,WAAA,EAAaH,WAAW;IAC3CjB,EAAA,CAAAqB,oBAAA,CACCrB,EAAG,CAAAoB,WAAA,EACHpB,EAAG,CAAAsB,iBAAA,EACHtB,EAAG,CAAAgB,UAAA,EACHH,OAAA,EACA,EACJ;IAEGb,EAAA,CAAAuB,WAAA,CAAYvB,EAAG,CAAAwB,8BAAA,EAAgC,KAAK;IACvDxB,EAAA,CAAGuB,WAAY,CAAAvB,EAAA,CAAGyB,kCAAoC,EAAAzB,EAAA,CAAG0B,IAAI;IAC1D1B,EAAA,CAAA2B,UAAA,CAAW3B,EAAG,CAAAgB,UAAA,EAAY,CAAG,EAAAhB,EAAA,CAAG4B,IAAA,EAAM5B,EAAG,CAAA4B,IAAA,EAAM5B,EAAG,CAAA6B,aAAA,EAAe3B,KAAK;IAEnE,MAAA4B,KAAA,GAAQ,IAAIC,UAAA,CAAW,CAAC;IAE3B/B,EAAA,CAAAgC,UAAA,CAAW,GAAG,CAAG,KAAG,GAAGhC,EAAG,CAAA4B,IAAA,EAAM5B,EAAG,CAAA6B,aAAA,EAAeC,KAAK;IAE1D9B,EAAA,CAAGiC,iBAAA,CAAkBhB,WAAW;IAChCjB,EAAA,CAAGkC,aAAA,CAAcrB,OAAO;IACrBb,EAAA,CAAAmC,YAAA,CAAa,oBAAoB,GAAGC,WAAY;IAEnD,OAAON,KAAA,CAAM,CAAC,KAAKA,KAAM,EAAC,IAAI,qBAAwB;EAAA,CACvD;EAEI,OAAAnC,OAAA;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}