{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactBitArray = exports.MultiSignature = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst binary_1 = require(\"../../../../binary\");\nconst helpers_1 = require(\"../../../../helpers\");\nexports.protobufPackage = \"cosmos.crypto.multisig.v1beta1\";\nfunction createBaseMultiSignature() {\n  return {\n    signatures: []\n  };\n}\nexports.MultiSignature = {\n  typeUrl: \"/cosmos.crypto.multisig.v1beta1.MultiSignature\",\n  encode(message, writer = binary_1.BinaryWriter.create()) {\n    for (const v of message.signatures) {\n      writer.uint32(10).bytes(v);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseMultiSignature();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(reader.bytes());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const obj = createBaseMultiSignature();\n    if (Array.isArray(object?.signatures)) obj.signatures = object.signatures.map(e => (0, helpers_1.bytesFromBase64)(e));\n    return obj;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));\n    } else {\n      obj.signatures = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseMultiSignature();\n    message.signatures = object.signatures?.map(e => e) || [];\n    return message;\n  }\n};\nfunction createBaseCompactBitArray() {\n  return {\n    extraBitsStored: 0,\n    elems: new Uint8Array()\n  };\n}\nexports.CompactBitArray = {\n  typeUrl: \"/cosmos.crypto.multisig.v1beta1.CompactBitArray\",\n  encode(message, writer = binary_1.BinaryWriter.create()) {\n    if (message.extraBitsStored !== 0) {\n      writer.uint32(8).uint32(message.extraBitsStored);\n    }\n    if (message.elems.length !== 0) {\n      writer.uint32(18).bytes(message.elems);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCompactBitArray();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.extraBitsStored = reader.uint32();\n          break;\n        case 2:\n          message.elems = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const obj = createBaseCompactBitArray();\n    if ((0, helpers_1.isSet)(object.extraBitsStored)) obj.extraBitsStored = Number(object.extraBitsStored);\n    if ((0, helpers_1.isSet)(object.elems)) obj.elems = (0, helpers_1.bytesFromBase64)(object.elems);\n    return obj;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.extraBitsStored !== undefined && (obj.extraBitsStored = Math.round(message.extraBitsStored));\n    message.elems !== undefined && (obj.elems = (0, helpers_1.base64FromBytes)(message.elems !== undefined ? message.elems : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    const message = createBaseCompactBitArray();\n    message.extraBitsStored = object.extraBitsStored ?? 0;\n    message.elems = object.elems ?? new Uint8Array();\n    return message;\n  }\n};","map":{"version":3,"names":["binary_1","require","helpers_1","exports","protobufPackage","createBaseMultiSignature","signatures","MultiSignature","typeUrl","encode","message","writer","BinaryWriter","create","v","uint32","bytes","decode","input","length","reader","BinaryReader","end","undefined","len","pos","tag","push","skipType","fromJSON","object","obj","Array","isArray","map","e","bytesFromBase64","toJSON","base64FromBytes","Uint8Array","fromPartial","createBaseCompactBitArray","extraBitsStored","elems","CompactBitArray","isSet","Number","Math","round"],"sources":["../../../../../src/cosmos/crypto/multisig/v1beta1/multisig.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}