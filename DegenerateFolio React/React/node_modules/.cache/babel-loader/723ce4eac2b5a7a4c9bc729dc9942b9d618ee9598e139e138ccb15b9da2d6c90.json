{"ast":null,"code":"import { hasBigInt } from '@polkadot/util';\nimport { bip39ToSeed, isReady } from '@polkadot/wasm-crypto';\nimport { mnemonicToSeedSync } from './bip39.js';\nimport { mnemonicValidate } from './validate.js';\n/**\n * @name mnemonicToLegacySeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a\n * }\n * ```\n */\nexport function mnemonicToLegacySeed(mnemonic) {\n  let password = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let onlyJs = arguments.length > 2 ? arguments[2] : undefined;\n  let byteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;\n  if (!mnemonicValidate(mnemonic)) {\n    throw new Error('Invalid bip39 mnemonic specified');\n  } else if (![32, 64].includes(byteLength)) {\n    throw new Error(\"Invalid seed length \".concat(byteLength, \", expected 32 or 64\"));\n  }\n  return byteLength === 32 ? !hasBigInt || !onlyJs && isReady() ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32) : mnemonicToSeedSync(mnemonic, password);\n}","map":{"version":3,"names":["hasBigInt","bip39ToSeed","isReady","mnemonicToSeedSync","mnemonicValidate","mnemonicToLegacySeed","mnemonic","password","arguments","length","undefined","onlyJs","byteLength","Error","includes","concat","subarray"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js"],"sourcesContent":["import { hasBigInt } from '@polkadot/util';\nimport { bip39ToSeed, isReady } from '@polkadot/wasm-crypto';\nimport { mnemonicToSeedSync } from './bip39.js';\nimport { mnemonicValidate } from './validate.js';\n/**\n * @name mnemonicToLegacySeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a\n * }\n * ```\n */\nexport function mnemonicToLegacySeed(mnemonic, password = '', onlyJs, byteLength = 32) {\n    if (!mnemonicValidate(mnemonic)) {\n        throw new Error('Invalid bip39 mnemonic specified');\n    }\n    else if (![32, 64].includes(byteLength)) {\n        throw new Error(`Invalid seed length ${byteLength}, expected 32 or 64`);\n    }\n    return byteLength === 32\n        ? !hasBigInt || (!onlyJs && isReady())\n            ? bip39ToSeed(mnemonic, password)\n            : mnemonicToSeedSync(mnemonic, password).subarray(0, 32)\n        : mnemonicToSeedSync(mnemonic, password);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,WAAW,EAAEC,OAAO,QAAQ,uBAAuB;AAC5D,SAASC,kBAAkB,QAAQ,YAAY;AAC/C,SAASC,gBAAgB,QAAQ,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,QAAQ,EAA0C;EAAA,IAAxCC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,UAAU,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACjF,IAAI,CAACJ,gBAAgB,CAACE,QAAQ,CAAC,EAAE;IAC7B,MAAM,IAAIO,KAAK,CAAC,kCAAkC,CAAC;EACvD,CAAC,MACI,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAACC,QAAQ,CAACF,UAAU,CAAC,EAAE;IACrC,MAAM,IAAIC,KAAK,wBAAAE,MAAA,CAAwBH,UAAU,wBAAqB,CAAC;EAC3E;EACA,OAAOA,UAAU,KAAK,EAAE,GAClB,CAACZ,SAAS,IAAK,CAACW,MAAM,IAAIT,OAAO,CAAC,CAAE,GAChCD,WAAW,CAACK,QAAQ,EAAEC,QAAQ,CAAC,GAC/BJ,kBAAkB,CAACG,QAAQ,EAAEC,QAAQ,CAAC,CAACS,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,GAC1Db,kBAAkB,CAACG,QAAQ,EAAEC,QAAQ,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}