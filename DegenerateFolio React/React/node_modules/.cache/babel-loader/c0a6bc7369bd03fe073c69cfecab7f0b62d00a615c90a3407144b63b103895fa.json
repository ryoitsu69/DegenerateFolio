{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst web3_utils_1 = require(\"web3-utils\");\nconst web3_validator_1 = require(\"web3-validator\");\nconst utils_js_1 = require(\"../common/utils.js\");\nconst constants_js_1 = require(\"./constants.js\");\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\nconst types_js_1 = require(\"./types.js\");\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n  const v = Number(_v);\n  const chainIdDoubled = Number(chainId) * 2;\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\nclass Transaction extends baseTransaction_js_1.BaseTransaction {\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  constructor(txData, opts = {}) {\n    var _a;\n    super(Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    this.common = this._validateTxV(this.v, opts.common);\n    this.gasPrice = (0, utils_js_1.uint8ArrayToBigInt)((0, utils_js_1.toUint8Array)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (this.gasPrice * this.gasLimit > constants_js_1.MAX_INTEGER) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice\n    });\n    baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        // eslint-disable-next-line no-lonely-if\n        if (meetsEIP155(this.v, this.common.chainId())) {\n          this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    const freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(this);\n    }\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  static fromTxData(txData, opts = {}) {\n    return new Transaction(txData, opts);\n  }\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  static fromSerializedTx(serialized, opts = {}) {\n    const values = rlp_1.RLP.decode(serialized);\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array');\n    }\n    return this.fromValuesArray(values, opts);\n  }\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  static fromValuesArray(values, opts = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n    }\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n    (0, web3_validator_1.validateNoLeadingZeroes)({\n      nonce,\n      gasPrice,\n      gasLimit,\n      value,\n      v,\n      r,\n      s\n    });\n    return new Transaction({\n      nonce,\n      gasPrice,\n      gasLimit,\n      to,\n      value,\n      data,\n      v,\n      r,\n      s\n    }, opts);\n  }\n  /**\n   * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Uint8Array values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw() {\n    return [(0, utils_js_1.bigIntToUnpaddedUint8Array)(this.nonce), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasPrice), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.value), this.data, this.v !== undefined ? (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.v) : Uint8Array.from([]), this.r !== undefined ? (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.r) : Uint8Array.from([]), this.s !== undefined ? (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.s) : Uint8Array.from([])];\n  }\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Uint8Array values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize() {\n    return rlp_1.RLP.encode(this.raw());\n  }\n  _getMessageToSign() {\n    const values = [(0, utils_js_1.bigIntToUnpaddedUint8Array)(this.nonce), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasPrice), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), (0, utils_js_1.bigIntToUnpaddedUint8Array)(this.value), this.data];\n    if (this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n      values.push((0, utils_js_1.toUint8Array)(this.common.chainId()));\n      values.push((0, utils_js_1.unpadUint8Array)((0, utils_js_1.toUint8Array)(0)));\n      values.push((0, utils_js_1.unpadUint8Array)((0, utils_js_1.toUint8Array)(0)));\n    }\n    return values;\n  }\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign();\n    if (hashMessage) {\n      return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(message));\n    }\n    return message;\n  }\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee() {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value;\n    }\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork()\n      };\n    }\n    return super.getDataFee();\n  }\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost() {\n    return this.gasLimit * this.gasPrice + this.value;\n  }\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n      throw new Error(msg);\n    }\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(this.raw()));\n      }\n      return this.cache.hash;\n    }\n    return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(this.raw()));\n  }\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed');\n      throw new Error(msg);\n    }\n    const message = this._getMessageToSign();\n    return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode(message));\n  }\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey() {\n    const msgHash = this.getMessageToVerifySignature();\n    const {\n      v,\n      r,\n      s\n    } = this;\n    this._validateHighS();\n    try {\n      return (0, utils_js_1.ecrecover)(msgHash, v, (0, utils_js_1.bigIntToUnpaddedUint8Array)(r), (0, utils_js_1.bigIntToUnpaddedUint8Array)(s), this.supports(types_js_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n    } catch (e) {\n      const msg = this._errorMsg('Invalid Signature');\n      throw new Error(msg);\n    }\n  }\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  _processSignature(_v, r, s) {\n    let v = _v;\n    if (this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n      v += this.common.chainId() * BigInt(2) + BigInt(8);\n    }\n    const opts = Object.assign(Object.assign({}, this.txOptions), {\n      common: this.common\n    });\n    return Transaction.fromTxData({\n      nonce: this.nonce,\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      to: this.to,\n      value: this.value,\n      data: this.data,\n      v,\n      r: (0, utils_js_1.uint8ArrayToBigInt)(r),\n      s: (0, utils_js_1.uint8ArrayToBigInt)(s)\n    }, opts);\n  }\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON() {\n    return {\n      nonce: (0, utils_js_1.bigIntToHex)(this.nonce),\n      gasPrice: (0, utils_js_1.bigIntToHex)(this.gasPrice),\n      gasLimit: (0, utils_js_1.bigIntToHex)(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: (0, utils_js_1.bigIntToHex)(this.value),\n      data: (0, web3_utils_1.bytesToHex)(this.data),\n      v: this.v !== undefined ? (0, utils_js_1.bigIntToHex)(this.v) : undefined,\n      r: this.r !== undefined ? (0, utils_js_1.bigIntToHex)(this.r) : undefined,\n      s: this.s !== undefined ? (0, utils_js_1.bigIntToHex)(this.s) : undefined\n    };\n  }\n  /**\n   * Validates tx's `v` value\n   */\n  _validateTxV(_v, common) {\n    let chainIdBigInt;\n    const v = _v !== undefined ? Number(_v) : undefined;\n    // Check for valid v values in the scope of a signed legacy tx\n    if (v !== undefined) {\n      // v is 1. not matching the EIP-155 chainId included case and...\n      // v is 2. not matching the classic v=27 or v=28 case\n      if (v < 37 && v !== 27 && v !== 28) {\n        throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n      }\n    }\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (v !== undefined && v !== 0 && (!common || common.gteHardfork('spuriousDragon')) && v !== 27 && v !== 28) {\n      if (common) {\n        if (!meetsEIP155(BigInt(v), common.chainId())) {\n          throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub;\n        if ((v - 35) % 2 === 0) {\n          numSub = 35;\n        } else {\n          numSub = 36;\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n      }\n    }\n    return this._getCommon(common, chainIdBigInt);\n  }\n  /**\n   * Return a compact error string representation of the object\n   */\n  errorStr() {\n    let errorStr = this._getSharedErrorPostfix();\n    errorStr += ` gasPrice=${this.gasPrice}`;\n    return errorStr;\n  }\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  _errorMsg(msg) {\n    return `${msg} (${this.errorStr()})`;\n  }\n}\nexports.Transaction = Transaction;","map":{"version":3,"names":["rlp_1","require","keccak_js_1","web3_utils_1","web3_validator_1","utils_js_1","constants_js_1","baseTransaction_js_1","types_js_1","TRANSACTION_TYPE","meetsEIP155","_v","chainId","v","Number","chainIdDoubled","Transaction","BaseTransaction","constructor","txData","opts","Object","assign","type","common","_validateTxV","gasPrice","uint8ArrayToBigInt","toUint8Array","gasLimit","MAX_INTEGER","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","_validateNotArray","gteHardfork","isSigned","activeCapabilities","push","Capability","EIP155ReplayProtection","freeze","_a","fromTxData","fromSerializedTx","serialized","values","RLP","decode","Array","isArray","fromValuesArray","length","nonce","to","value","data","r","s","validateNoLeadingZeroes","raw","bigIntToUnpaddedUint8Array","undefined","buf","Uint8Array","from","serialize","encode","_getMessageToSign","supports","unpadUint8Array","getMessageToSign","hashMessage","message","keccak256","getDataFee","cache","dataFee","hardfork","isFrozen","getUpfrontCost","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","_validateHighS","ecrecover","e","_processSignature","BigInt","txOptions","toJSON","bigIntToHex","toString","bytesToHex","chainIdBigInt","numSub","_getCommon","errorStr","_getSharedErrorPostfix","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/web3-eth-accounts/src/tx/legacyTransaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex } from 'web3-utils';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport {\n\tbigIntToHex,\n\tbigIntToUnpaddedUint8Array,\n\tecrecover,\n\ttoUint8Array,\n\tuint8ArrayToBigInt,\n\tunpadUint8Array,\n} from '../common/utils.js';\nimport { MAX_INTEGER } from './constants.js';\n\nimport { BaseTransaction } from './baseTransaction.js';\n\nimport type { Common } from '../common/common.js';\nimport type { JsonTx, TxData, TxOptions, TxValuesArray } from './types.js';\nimport { Capability } from './types.js';\n\nconst TRANSACTION_TYPE = 0;\n\nfunction meetsEIP155(_v: bigint, chainId: bigint) {\n\tconst v = Number(_v);\n\tconst chainIdDoubled = Number(chainId) * 2;\n\treturn v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\nexport class Transaction extends BaseTransaction<Transaction> {\n\tpublic readonly gasPrice: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n\t *\n\t * Notes:\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: TxData, opts: TxOptions = {}) {\n\t\treturn new Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tconst values = RLP.decode(serialized);\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input. Must be array');\n\t\t}\n\n\t\treturn this.fromValuesArray(values as Uint8Array[], opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t */\n\tpublic static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n\t\t// If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n\t\t// This happens if you get the RLP data from `raw()`\n\t\tif (values.length !== 6 && values.length !== 9) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\n\n\t\treturn new Transaction(\n\t\t\t{\n\t\t\t\tnonce,\n\t\t\t\tgasPrice,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\tv,\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\n\t\tthis.common = this._validateTxV(this.v, opts.common);\n\n\t\tthis.gasPrice = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice),\n\t\t);\n\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tthis._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.common.gteHardfork('spuriousDragon')) {\n\t\t\tif (!this.isSigned()) {\n\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t} else {\n\t\t\t\t// EIP155 spec:\n\t\t\t\t// If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n\t\t\t\t// then when computing the hash of a transaction for purposes of signing or recovering\n\t\t\t\t// instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n\t\t\t\t// hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\t\t\t\t// v and chain ID meet EIP-155 conditions\n\t\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\t\tif (meetsEIP155(this.v!, this.common.chainId())) {\n\t\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t *\n\t * For legacy txs this is also the correct format to add transactions\n\t * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n\t * for typed txs).\n\t *\n\t * For an unsigned tx this method returns the empty Uint8Array values\n\t * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n\t * representation have a look at {@link Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): TxValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the legacy transaction.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link Transaction.getMessageToSign}.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\treturn RLP.encode(this.raw());\n\t}\n\n\tprivate _getMessageToSign() {\n\t\tconst values = [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t];\n\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tvalues.push(toUint8Array(this.common.chainId()));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t}\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * Returns the unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: the raw message message format for the legacy tx is not RLP encoded\n\t * and you might need to do yourself with:\n\t *\n\t * ```javascript\n\t * import { bufArrToArr } from '../util'\n\t * import { RLP } from '../rlp'\n\t * const message = tx.getMessageToSign(false)\n\t * const serializedMessage = RLP.encode(message) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage: false): Uint8Array[];\n\tpublic getMessageToSign(hashMessage?: true): Uint8Array;\n\tpublic getMessageToSign(hashMessage = true) {\n\t\tconst message = this._getMessageToSign();\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(RLP.encode(message));\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: super.getDataFee(),\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn super.getDataFee();\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic getUpfrontCost(): bigint {\n\t\treturn this.gasLimit * this.gasPrice + this.value;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(RLP.encode(this.raw()));\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(RLP.encode(this.raw()));\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature() {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('This transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tconst message = this._getMessageToSign();\n\t\treturn keccak256(RLP.encode(message));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv!,\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t\tthis.supports(Capability.EIP155ReplayProtection)\n\t\t\t\t\t? this.common.chainId()\n\t\t\t\t\t: undefined,\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * Process the v, r, s values from the `sign` method of the base transaction.\n\t */\n\tprotected _processSignature(_v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tlet v = _v;\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tv += this.common.chainId() * BigInt(2) + BigInt(8);\n\t\t}\n\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tgasPrice: this.gasPrice,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\tv,\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction.\n\t */\n\tpublic toJSON(): JsonTx {\n\t\treturn {\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Validates tx's `v` value\n\t */\n\tprivate _validateTxV(_v?: bigint, common?: Common): Common {\n\t\tlet chainIdBigInt;\n\t\tconst v = _v !== undefined ? Number(_v) : undefined;\n\t\t// Check for valid v values in the scope of a signed legacy tx\n\t\tif (v !== undefined) {\n\t\t\t// v is 1. not matching the EIP-155 chainId included case and...\n\t\t\t// v is 2. not matching the classic v=27 or v=28 case\n\t\t\tif (v < 37 && v !== 27 && v !== 28) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// No unsigned tx and EIP-155 activated and chain ID included\n\t\tif (\n\t\t\tv !== undefined &&\n\t\t\tv !== 0 &&\n\t\t\t(!common || common.gteHardfork('spuriousDragon')) &&\n\t\t\tv !== 27 &&\n\t\t\tv !== 28\n\t\t) {\n\t\t\tif (common) {\n\t\t\t\tif (!meetsEIP155(BigInt(v), common.chainId())) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Derive the original chain ID\n\t\t\t\tlet numSub;\n\t\t\t\tif ((v - 35) % 2 === 0) {\n\t\t\t\t\tnumSub = 35;\n\t\t\t\t} else {\n\t\t\t\t\tnumSub = 36;\n\t\t\t\t}\n\t\t\t\t// Use derived chain ID to create a proper Common\n\t\t\t\tchainIdBigInt = BigInt(v - numSub) / BigInt(2);\n\t\t\t}\n\t\t}\n\t\treturn this._getCommon(common, chainIdBigInt);\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\terrorStr += ` gasPrice=${this.gasPrice}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}