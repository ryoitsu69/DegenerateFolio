{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n  /**\n   * Creates a Secp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n  static async fromKey(privkey, prefix = \"cosmos\") {\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  get address() {\n    return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n  }\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n  async signAmino(signerAddress, signDoc) {\n    if (signerAddress !== this.address) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n    const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes)\n    };\n  }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;","map":{"version":3,"names":["crypto_1","require","encoding_1","addresses_1","signature_1","signdoc_1","Secp256k1Wallet","fromKey","privkey","prefix","uncompressed","Secp256k1","makeKeypair","pubkey","compressPubkey","constructor","address","toBech32","rawSecp256k1PubkeyToRawAddress","getAccounts","algo","signAmino","signerAddress","signDoc","Error","message","Sha256","serializeSignDoc","digest","signature","createSignature","signatureBytes","Uint8Array","r","s","signed","encodeSecp256k1Signature","exports"],"sources":["../src/secp256k1wallet.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAEA,MAAAE,WAAA,GAAAF,OAAA;AACA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,SAAA,GAAAJ,OAAA;AAGA;;;;;AAKA,MAAaK,eAAe;EAC1B;;;;;;EAMO,aAAaC,OAAOA,CAACC,OAAmB,EAAEC,MAAM,GAAG,QAAQ;IAChE,MAAMC,YAAY,GAAG,CAAC,MAAMV,QAAA,CAAAW,SAAS,CAACC,WAAW,CAACJ,OAAO,CAAC,EAAEK,MAAM;IAClE,OAAO,IAAIP,eAAe,CAACE,OAAO,EAAER,QAAA,CAAAW,SAAS,CAACG,cAAc,CAACJ,YAAY,CAAC,EAAED,MAAM,CAAC;EACrF;EAMAM,YAAoBP,OAAmB,EAAEK,MAAkB,EAAEJ,MAAc;IACzE,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACK,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACJ,MAAM,GAAGA,MAAM;EACtB;EAEA,IAAYO,OAAOA,CAAA;IACjB,OAAO,IAAAd,UAAA,CAAAe,QAAQ,EAAC,IAAI,CAACR,MAAM,EAAE,IAAAN,WAAA,CAAAe,8BAA8B,EAAC,IAAI,CAACL,MAAM,CAAC,CAAC;EAC3E;EAEO,MAAMM,WAAWA,CAAA;IACtB,OAAO,CACL;MACEC,IAAI,EAAE,WAAW;MACjBJ,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBH,MAAM,EAAE,IAAI,CAACA;KACd,CACF;EACH;EAEO,MAAMQ,SAASA,CAACC,aAAqB,EAAEC,OAAmB;IAC/D,IAAID,aAAa,KAAK,IAAI,CAACN,OAAO,EAAE;MAClC,MAAM,IAAIQ,KAAK,CAAC,WAAWF,aAAa,sBAAsB,CAAC;;IAEjE,MAAMG,OAAO,GAAG,IAAIzB,QAAA,CAAA0B,MAAM,CAAC,IAAArB,SAAA,CAAAsB,gBAAgB,EAACJ,OAAO,CAAC,CAAC,CAACK,MAAM,EAAE;IAC9D,MAAMC,SAAS,GAAG,MAAM7B,QAAA,CAAAW,SAAS,CAACmB,eAAe,CAACL,OAAO,EAAE,IAAI,CAACjB,OAAO,CAAC;IACxE,MAAMuB,cAAc,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAGH,SAAS,CAACI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGJ,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,OAAO;MACLC,MAAM,EAAEZ,OAAO;MACfM,SAAS,EAAE,IAAAzB,WAAA,CAAAgC,wBAAwB,EAAC,IAAI,CAACvB,MAAM,EAAEkB,cAAc;KAChE;EACH;;AA/CFM,OAAA,CAAA/B,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}