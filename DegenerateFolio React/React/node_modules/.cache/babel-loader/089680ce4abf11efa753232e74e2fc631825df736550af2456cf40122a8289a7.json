{"ast":null,"code":"\"use strict\";\n\nfunction mapFormatToGlFormat(gl) {\n  return {\n    // 8-bit formats\n    r8unorm: gl.RED,\n    r8snorm: gl.RED,\n    r8uint: gl.RED,\n    r8sint: gl.RED,\n    // 16-bit formats\n    r16uint: gl.RED,\n    r16sint: gl.RED,\n    r16float: gl.RED,\n    rg8unorm: gl.RG,\n    rg8snorm: gl.RG,\n    rg8uint: gl.RG,\n    rg8sint: gl.RG,\n    // 32-bit formats\n    r32uint: gl.RED,\n    r32sint: gl.RED,\n    r32float: gl.RED,\n    rg16uint: gl.RG,\n    rg16sint: gl.RG,\n    rg16float: gl.RG,\n    rgba8unorm: gl.RGBA,\n    \"rgba8unorm-srgb\": gl.RGBA,\n    // Packed 32-bit formats\n    rgba8snorm: gl.RGBA,\n    rgba8uint: gl.RGBA,\n    rgba8sint: gl.RGBA,\n    bgra8unorm: gl.RGBA,\n    \"bgra8unorm-srgb\": gl.RGBA,\n    rgb9e5ufloat: gl.RGB,\n    rgb10a2unorm: gl.RGBA,\n    rg11b10ufloat: gl.RGB,\n    // 64-bit formats\n    rg32uint: gl.RG,\n    rg32sint: gl.RG,\n    rg32float: gl.RG,\n    rgba16uint: gl.RGBA,\n    rgba16sint: gl.RGBA,\n    rgba16float: gl.RGBA,\n    // 128-bit formats\n    rgba32uint: gl.RGBA,\n    rgba32sint: gl.RGBA,\n    rgba32float: gl.RGBA,\n    // Depth/stencil formats\n    stencil8: gl.STENCIL_INDEX8,\n    depth16unorm: gl.DEPTH_COMPONENT,\n    depth24plus: gl.DEPTH_COMPONENT,\n    \"depth24plus-stencil8\": gl.DEPTH_STENCIL,\n    depth32float: gl.DEPTH_COMPONENT,\n    \"depth32float-stencil8\": gl.DEPTH_STENCIL\n  };\n}\nexport { mapFormatToGlFormat };","map":{"version":3,"names":["mapFormatToGlFormat","gl","r8unorm","RED","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","RG","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","RGBA","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","rgb9e5ufloat","RGB","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","STENCIL_INDEX8","depth16unorm","DEPTH_COMPONENT","depth24plus","DEPTH_STENCIL","depth32float"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.ts"],"sourcesContent":["import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlFormat(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.RED,\n        r8snorm: gl.RED,\n        r8uint: gl.RED,\n        r8sint: gl.RED,\n\n        // 16-bit formats\n        r16uint: gl.RED,\n        r16sint:    gl.RED,\n        r16float: gl.RED,\n        rg8unorm:  gl.RG,\n        rg8snorm:   gl.RG,\n        rg8uint:  gl.RG,\n        rg8sint:  gl.RG,\n\n        // 32-bit formats\n        r32uint: gl.RED,\n        r32sint: gl.RED,\n        r32float: gl.RED,\n        rg16uint:   gl.RG,\n        rg16sint:  gl.RG,\n        rg16float:  gl.RG,\n        rgba8unorm: gl.RGBA,\n        'rgba8unorm-srgb': gl.RGBA,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA,\n        rgba8uint: gl.RGBA,\n        rgba8sint: gl.RGBA,\n        bgra8unorm: gl.RGBA,\n        'bgra8unorm-srgb': gl.RGBA,\n        rgb9e5ufloat: gl.RGB,\n        rgb10a2unorm: gl.RGBA,\n        rg11b10ufloat: gl.RGB,\n\n        // 64-bit formats\n        rg32uint: gl.RG,\n        rg32sint: gl.RG,\n        rg32float:  gl.RG,\n        rgba16uint: gl.RGBA,\n        rgba16sint: gl.RGBA,\n        rgba16float: gl.RGBA,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA,\n        rgba32sint: gl.RGBA,\n        rgba32float: gl.RGBA,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT,\n        depth24plus: gl.DEPTH_COMPONENT,\n        'depth24plus-stencil8': gl.DEPTH_STENCIL,\n        depth32float: gl.DEPTH_COMPONENT,\n        'depth32float-stencil8': gl.DEPTH_STENCIL,\n\n    };\n}\n"],"mappings":";;AASO,SAASA,oBAAoBC,EACpC;EACW;IAAA;IAEHC,OAAA,EAASD,EAAG,CAAAE,GAAA;IACZC,OAAA,EAASH,EAAG,CAAAE,GAAA;IACZE,MAAA,EAAQJ,EAAG,CAAAE,GAAA;IACXG,MAAA,EAAQL,EAAG,CAAAE,GAAA;IAAA;IAGXI,OAAA,EAASN,EAAG,CAAAE,GAAA;IACZK,OAAA,EAAYP,EAAG,CAAAE,GAAA;IACfM,QAAA,EAAUR,EAAG,CAAAE,GAAA;IACbO,QAAA,EAAWT,EAAG,CAAAU,EAAA;IACdC,QAAA,EAAYX,EAAG,CAAAU,EAAA;IACfE,OAAA,EAAUZ,EAAG,CAAAU,EAAA;IACbG,OAAA,EAAUb,EAAG,CAAAU,EAAA;IAAA;IAGbI,OAAA,EAASd,EAAG,CAAAE,GAAA;IACZa,OAAA,EAASf,EAAG,CAAAE,GAAA;IACZc,QAAA,EAAUhB,EAAG,CAAAE,GAAA;IACbe,QAAA,EAAYjB,EAAG,CAAAU,EAAA;IACfQ,QAAA,EAAWlB,EAAG,CAAAU,EAAA;IACdS,SAAA,EAAYnB,EAAG,CAAAU,EAAA;IACfU,UAAA,EAAYpB,EAAG,CAAAqB,IAAA;IACf,mBAAmBrB,EAAG,CAAAqB,IAAA;IAAA;IAGtBC,UAAA,EAAYtB,EAAG,CAAAqB,IAAA;IACfE,SAAA,EAAWvB,EAAG,CAAAqB,IAAA;IACdG,SAAA,EAAWxB,EAAG,CAAAqB,IAAA;IACdI,UAAA,EAAYzB,EAAG,CAAAqB,IAAA;IACf,mBAAmBrB,EAAG,CAAAqB,IAAA;IACtBK,YAAA,EAAc1B,EAAG,CAAA2B,GAAA;IACjBC,YAAA,EAAc5B,EAAG,CAAAqB,IAAA;IACjBQ,aAAA,EAAe7B,EAAG,CAAA2B,GAAA;IAAA;IAGlBG,QAAA,EAAU9B,EAAG,CAAAU,EAAA;IACbqB,QAAA,EAAU/B,EAAG,CAAAU,EAAA;IACbsB,SAAA,EAAYhC,EAAG,CAAAU,EAAA;IACfuB,UAAA,EAAYjC,EAAG,CAAAqB,IAAA;IACfa,UAAA,EAAYlC,EAAG,CAAAqB,IAAA;IACfc,WAAA,EAAanC,EAAG,CAAAqB,IAAA;IAAA;IAGhBe,UAAA,EAAYpC,EAAG,CAAAqB,IAAA;IACfgB,UAAA,EAAYrC,EAAG,CAAAqB,IAAA;IACfiB,WAAA,EAAatC,EAAG,CAAAqB,IAAA;IAAA;IAGhBkB,QAAA,EAAUvC,EAAG,CAAAwC,cAAA;IACbC,YAAA,EAAczC,EAAG,CAAA0C,eAAA;IACjBC,WAAA,EAAa3C,EAAG,CAAA0C,eAAA;IAChB,wBAAwB1C,EAAG,CAAA4C,aAAA;IAC3BC,YAAA,EAAc7C,EAAG,CAAA0C,eAAA;IACjB,yBAAyB1C,EAAG,CAAA4C;EAAA,CAEhC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}