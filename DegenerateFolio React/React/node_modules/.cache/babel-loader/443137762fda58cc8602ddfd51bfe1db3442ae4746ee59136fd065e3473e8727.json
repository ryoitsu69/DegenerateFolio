{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable */\n/**\n * This file and any referenced files were automatically generated by @cosmology/telescope@1.0.7\n * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain\n * and run the transpile command or yarn proto command to regenerate this bundle.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeByte = exports.writeFixed32 = exports.int64Length = exports.writeVarint64 = exports.writeVarint32 = exports.readInt32 = exports.readUInt32 = exports.zzDecode = exports.zzEncode = exports.varint32read = exports.varint32write = exports.uInt64ToString = exports.int64ToString = exports.int64FromString = exports.varint64write = exports.varint64read = void 0;\n// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nfunction varint64read() {\n  let lowBits = 0;\n  let highBits = 0;\n  for (let shift = 0; shift < 28; shift += 7) {\n    let b = this.buf[this.pos++];\n    lowBits |= (b & 0x7f) << shift;\n    if ((b & 0x80) == 0) {\n      this.assertBounds();\n      return [lowBits, highBits];\n    }\n  }\n  let middleByte = this.buf[this.pos++];\n  // last four bits of the first 32 bit number\n  lowBits |= (middleByte & 0x0f) << 28;\n  // 3 upper bits are part of the next 32 bit number\n  highBits = (middleByte & 0x70) >> 4;\n  if ((middleByte & 0x80) == 0) {\n    this.assertBounds();\n    return [lowBits, highBits];\n  }\n  for (let shift = 3; shift <= 31; shift += 7) {\n    let b = this.buf[this.pos++];\n    highBits |= (b & 0x7f) << shift;\n    if ((b & 0x80) == 0) {\n      this.assertBounds();\n      return [lowBits, highBits];\n    }\n  }\n  throw new Error(\"invalid varint\");\n}\nexports.varint64read = varint64read;\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nfunction varint64write(lo, hi, bytes) {\n  for (let i = 0; i < 28; i = i + 7) {\n    const shift = lo >>> i;\n    const hasNext = !(shift >>> 7 == 0 && hi == 0);\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n    bytes.push(byte);\n    if (!hasNext) {\n      return;\n    }\n  }\n  const splitBits = lo >>> 28 & 0x0f | (hi & 0x07) << 4;\n  const hasMoreBits = !(hi >> 3 == 0);\n  bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n  if (!hasMoreBits) {\n    return;\n  }\n  for (let i = 3; i < 31; i = i + 7) {\n    const shift = hi >>> i;\n    const hasNext = !(shift >>> 7 == 0);\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n    bytes.push(byte);\n    if (!hasNext) {\n      return;\n    }\n  }\n  bytes.push(hi >>> 31 & 0x01);\n}\nexports.varint64write = varint64write;\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction int64FromString(dec) {\n  // Check for minus sign.\n  const minus = dec[0] === \"-\";\n  if (minus) {\n    dec = dec.slice(1);\n  }\n  // Work 6 decimal digits at a time, acting like we're converting base 1e6\n  // digits to binary. This is safe to do with floating point math because\n  // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n  const base = 1e6;\n  let lowBits = 0;\n  let highBits = 0;\n  function add1e6digit(begin, end) {\n    // Note: Number('') is 0.\n    const digit1e6 = Number(dec.slice(begin, end));\n    highBits *= base;\n    lowBits = lowBits * base + digit1e6;\n    // Carry bits from lowBits to\n    if (lowBits >= TWO_PWR_32_DBL) {\n      highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);\n      lowBits = lowBits % TWO_PWR_32_DBL;\n    }\n  }\n  add1e6digit(-24, -18);\n  add1e6digit(-18, -12);\n  add1e6digit(-12, -6);\n  add1e6digit(-6);\n  return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\nexports.int64FromString = int64FromString;\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction int64ToString(lo, hi) {\n  let bits = newBits(lo, hi);\n  // If we're treating the input as a signed value and the high bit is set, do\n  // a manual two's complement conversion before the decimal conversion.\n  const negative = bits.hi & 0x80000000;\n  if (negative) {\n    bits = negate(bits.lo, bits.hi);\n  }\n  const result = uInt64ToString(bits.lo, bits.hi);\n  return negative ? \"-\" + result : result;\n}\nexports.int64ToString = int64ToString;\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction uInt64ToString(lo, hi) {\n  ({\n    lo,\n    hi\n  } = toUnsigned(lo, hi));\n  // Skip the expensive conversion if the number is small enough to use the\n  // built-in conversions.\n  // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n  // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n  // integer precision.\n  // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n  if (hi <= 0x1fffff) {\n    return String(TWO_PWR_32_DBL * hi + lo);\n  }\n  // What this code is doing is essentially converting the input number from\n  // base-2 to base-1e7, which allows us to represent the 64-bit range with\n  // only 3 (very large) digits. Those digits are then trivial to convert to\n  // a base-10 string.\n  // The magic numbers used here are -\n  // 2^24 = 16777216 = (1,6777216) in base-1e7.\n  // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n  // Split 32:32 representation into 16:24:24 representation so our\n  // intermediate digits don't overflow.\n  const low = lo & 0xffffff;\n  const mid = (lo >>> 24 | hi << 8) & 0xffffff;\n  const high = hi >> 16 & 0xffff;\n  // Assemble our three base-1e7 digits, ignoring carries. The maximum\n  // value in a digit at this step is representable as a 48-bit integer, which\n  // can be stored in a 64-bit floating point number.\n  let digitA = low + mid * 6777216 + high * 6710656;\n  let digitB = mid + high * 8147497;\n  let digitC = high * 2;\n  // Apply carries from A to B and from B to C.\n  const base = 10000000;\n  if (digitA >= base) {\n    digitB += Math.floor(digitA / base);\n    digitA %= base;\n  }\n  if (digitB >= base) {\n    digitC += Math.floor(digitB / base);\n    digitB %= base;\n  }\n  // If digitC is 0, then we should have returned in the trivial code path\n  // at the top for non-safe integers. Given this, we can assume both digitB\n  // and digitA need leading zeros.\n  return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);\n}\nexports.uInt64ToString = uInt64ToString;\nfunction toUnsigned(lo, hi) {\n  return {\n    lo: lo >>> 0,\n    hi: hi >>> 0\n  };\n}\nfunction newBits(lo, hi) {\n  return {\n    lo: lo | 0,\n    hi: hi | 0\n  };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n  highBits = ~highBits;\n  if (lowBits) {\n    lowBits = ~lowBits + 1;\n  } else {\n    // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n    // adding 1 to that, results in 0x100000000, which leaves\n    // the low bits 0x0 and simply adds one to the high bits.\n    highBits += 1;\n  }\n  return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = digit1e7 => {\n  const partial = String(digit1e7);\n  return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nfunction varint32write(value, bytes) {\n  if (value >= 0) {\n    // write value as varint 32\n    while (value > 0x7f) {\n      bytes.push(value & 0x7f | 0x80);\n      value = value >>> 7;\n    }\n    bytes.push(value);\n  } else {\n    for (let i = 0; i < 9; i++) {\n      bytes.push(value & 127 | 128);\n      value = value >> 7;\n    }\n    bytes.push(1);\n  }\n}\nexports.varint32write = varint32write;\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nfunction varint32read() {\n  let b = this.buf[this.pos++];\n  let result = b & 0x7f;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7f) << 7;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7f) << 14;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  b = this.buf[this.pos++];\n  result |= (b & 0x7f) << 21;\n  if ((b & 0x80) == 0) {\n    this.assertBounds();\n    return result;\n  }\n  // Extract only last 4 bits\n  b = this.buf[this.pos++];\n  result |= (b & 0x0f) << 28;\n  for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++) b = this.buf[this.pos++];\n  if ((b & 0x80) != 0) throw new Error(\"invalid varint\");\n  this.assertBounds();\n  // Result can have 32 bits, convert it to unsigned\n  return result >>> 0;\n}\nexports.varint32read = varint32read;\n/**\n * encode zig zag\n */\nfunction zzEncode(lo, hi) {\n  let mask = hi >> 31;\n  hi = ((hi << 1 | lo >>> 31) ^ mask) >>> 0;\n  lo = (lo << 1 ^ mask) >>> 0;\n  return [lo, hi];\n}\nexports.zzEncode = zzEncode;\n/**\n * decode zig zag\n */\nfunction zzDecode(lo, hi) {\n  let mask = -(lo & 1);\n  lo = ((lo >>> 1 | hi << 31) ^ mask) >>> 0;\n  hi = (hi >>> 1 ^ mask) >>> 0;\n  return [lo, hi];\n}\nexports.zzDecode = zzDecode;\n/**\n * unsigned int32 without moving pos.\n */\nfunction readUInt32(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + buf[pos + 3] * 0x1000000;\n}\nexports.readUInt32 = readUInt32;\n/**\n * signed int32 without moving pos.\n */\nfunction readInt32(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16) + (buf[pos + 3] << 24);\n}\nexports.readInt32 = readInt32;\n/**\n * writing varint32 to pos\n */\nfunction writeVarint32(val, buf, pos) {\n  while (val > 127) {\n    buf[pos++] = val & 127 | 128;\n    val >>>= 7;\n  }\n  buf[pos] = val;\n}\nexports.writeVarint32 = writeVarint32;\n/**\n * writing varint64 to pos\n */\nfunction writeVarint64(val, buf, pos) {\n  while (val.hi) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n    val.hi >>>= 7;\n  }\n  while (val.lo > 127) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = val.lo >>> 7;\n  }\n  buf[pos++] = val.lo;\n}\nexports.writeVarint64 = writeVarint64;\nfunction int64Length(lo, hi) {\n  let part0 = lo,\n    part1 = (lo >>> 28 | hi << 4) >>> 0,\n    part2 = hi >>> 24;\n  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n}\nexports.int64Length = int64Length;\nfunction writeFixed32(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\nexports.writeFixed32 = writeFixed32;\nfunction writeByte(val, buf, pos) {\n  buf[pos] = val & 255;\n}\nexports.writeByte = writeByte;","map":{"version":3,"names":["varint64read","lowBits","highBits","shift","b","buf","pos","assertBounds","middleByte","Error","exports","varint64write","lo","hi","bytes","i","hasNext","byte","push","splitBits","hasMoreBits","TWO_PWR_32_DBL","int64FromString","dec","minus","slice","base","add1e6digit","begin","end","digit1e6","Number","negate","newBits","int64ToString","bits","negative","result","uInt64ToString","toUnsigned","String","low","mid","high","digitA","digitB","digitC","Math","floor","toString","decimalFrom1e7WithLeadingZeros","digit1e7","partial","length","varint32write","value","varint32read","readBytes","zzEncode","mask","zzDecode","readUInt32","readInt32","writeVarint32","val","writeVarint64","int64Length","part0","part1","part2","writeFixed32","writeByte"],"sources":["../src/varint.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}