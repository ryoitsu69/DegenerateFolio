{"ast":null,"code":"// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Various HTTP utilities.\n */\n\n'use strict';\n\nconst Executor = require('./index').Executor;\nconst HttpClient = require('./index').HttpClient;\nconst HttpRequest = require('./index').Request;\nconst Command = require('../lib/command').Command;\nconst CommandName = require('../lib/command').Name;\nconst error = require('../lib/error');\n\n/**\n * Queries a WebDriver server for its current status.\n * @param {string} url Base URL of the server to query.\n * @return {!Promise<!Object>} A promise that resolves with\n *     a hash of the server status.\n */\nfunction getStatus(url) {\n  const client = new HttpClient(url);\n  const executor = new Executor(client);\n  const command = new Command(CommandName.GET_SERVER_STATUS);\n  return executor.execute(command);\n}\nclass CancellationError {}\n\n/**\n * Waits for a WebDriver server to be healthy and accepting requests.\n * @param {string} url Base URL of the server to query.\n * @param {number} timeout How long to wait for the server.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the server is ready, the wait will be terminated\n *     early with a {@link CancellationError}.\n * @return {!Promise} A promise that will resolve when the server is ready, or\n *     if the wait is cancelled.\n */\nfunction waitForServer(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let start = Date.now();\n    let done = false;\n    let resolve = status => {\n      done = true;\n      onResolve(status);\n    };\n    let reject = err => {\n      done = true;\n      onReject(err);\n    };\n    if (opt_cancelToken) {\n      opt_cancelToken.then(_ => reject(new CancellationError()));\n    }\n    checkServerStatus();\n    function checkServerStatus() {\n      return getStatus(url).then(status => resolve(status), onError);\n    }\n    function onError(e) {\n      // Some servers don't support the status command. If they are able to\n      // response with an error, then can consider the server ready.\n      if (e instanceof error.UnsupportedOperationError) {\n        resolve({});\n        return;\n      }\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the WebDriver server at ' + url));\n      } else {\n        setTimeout(function () {\n          if (!done) {\n            checkServerStatus();\n          }\n        }, 50);\n      }\n    }\n  });\n}\n\n/**\n * Polls a URL with GET requests until it returns a 2xx response or the\n * timeout expires.\n * @param {string} url The URL to poll.\n * @param {number} timeout How long to wait, in milliseconds.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the a 2xx response is received, the wait will be\n *     terminated early with a {@link CancellationError}.\n * @return {!Promise} A promise that will resolve when a 2xx is received from\n *     the given URL, or if the wait is cancelled.\n */\nfunction waitForUrl(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let client = new HttpClient(url);\n    let request = new HttpRequest('GET', '');\n    let start = Date.now();\n    let done = false;\n    let resolve = () => {\n      done = true;\n      onResolve();\n    };\n    let reject = err => {\n      done = true;\n      onReject(err);\n    };\n    if (opt_cancelToken) {\n      opt_cancelToken.then(_ => reject(new CancellationError()));\n    }\n    testUrl();\n    function testUrl() {\n      client.send(request).then(onResponse, onError);\n    }\n    function onError() {\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the URL to return 2xx: ' + url));\n      } else {\n        setTimeout(function () {\n          if (!done) {\n            testUrl();\n          }\n        }, 50);\n      }\n    }\n    function onResponse(response) {\n      if (done) {\n        return;\n      }\n      if (response.status > 199 && response.status < 300) {\n        resolve();\n        return;\n      }\n      onError();\n    }\n  });\n}\n\n// PUBLIC API\nmodule.exports.getStatus = getStatus;\nmodule.exports.CancellationError = CancellationError;\nmodule.exports.waitForServer = waitForServer;\nmodule.exports.waitForUrl = waitForUrl;","map":{"version":3,"names":["Executor","require","HttpClient","HttpRequest","Request","Command","CommandName","Name","error","getStatus","url","client","executor","command","GET_SERVER_STATUS","execute","CancellationError","waitForServer","timeout","opt_cancelToken","Promise","onResolve","onReject","start","Date","now","done","resolve","status","reject","err","then","_","checkServerStatus","onError","e","UnsupportedOperationError","Error","setTimeout","waitForUrl","request","testUrl","send","onResponse","response","module","exports"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/selenium-webdriver/http/util.js"],"sourcesContent":["// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Various HTTP utilities.\n */\n\n'use strict'\n\nconst Executor = require('./index').Executor\nconst HttpClient = require('./index').HttpClient\nconst HttpRequest = require('./index').Request\nconst Command = require('../lib/command').Command\nconst CommandName = require('../lib/command').Name\nconst error = require('../lib/error')\n\n/**\n * Queries a WebDriver server for its current status.\n * @param {string} url Base URL of the server to query.\n * @return {!Promise<!Object>} A promise that resolves with\n *     a hash of the server status.\n */\nfunction getStatus(url) {\n  const client = new HttpClient(url)\n  const executor = new Executor(client)\n  const command = new Command(CommandName.GET_SERVER_STATUS)\n  return executor.execute(command)\n}\n\nclass CancellationError {}\n\n/**\n * Waits for a WebDriver server to be healthy and accepting requests.\n * @param {string} url Base URL of the server to query.\n * @param {number} timeout How long to wait for the server.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the server is ready, the wait will be terminated\n *     early with a {@link CancellationError}.\n * @return {!Promise} A promise that will resolve when the server is ready, or\n *     if the wait is cancelled.\n */\nfunction waitForServer(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let start = Date.now()\n\n    let done = false\n    let resolve = (status) => {\n      done = true\n      onResolve(status)\n    }\n    let reject = (err) => {\n      done = true\n      onReject(err)\n    }\n\n    if (opt_cancelToken) {\n      opt_cancelToken.then((_) => reject(new CancellationError()))\n    }\n\n    checkServerStatus()\n\n    function checkServerStatus() {\n      return getStatus(url).then((status) => resolve(status), onError)\n    }\n\n    function onError(e) {\n      // Some servers don't support the status command. If they are able to\n      // response with an error, then can consider the server ready.\n      if (e instanceof error.UnsupportedOperationError) {\n        resolve({})\n        return\n      }\n\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the WebDriver server at ' + url))\n      } else {\n        setTimeout(function () {\n          if (!done) {\n            checkServerStatus()\n          }\n        }, 50)\n      }\n    }\n  })\n}\n\n/**\n * Polls a URL with GET requests until it returns a 2xx response or the\n * timeout expires.\n * @param {string} url The URL to poll.\n * @param {number} timeout How long to wait, in milliseconds.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the a 2xx response is received, the wait will be\n *     terminated early with a {@link CancellationError}.\n * @return {!Promise} A promise that will resolve when a 2xx is received from\n *     the given URL, or if the wait is cancelled.\n */\nfunction waitForUrl(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let client = new HttpClient(url)\n    let request = new HttpRequest('GET', '')\n    let start = Date.now()\n\n    let done = false\n    let resolve = () => {\n      done = true\n      onResolve()\n    }\n    let reject = (err) => {\n      done = true\n      onReject(err)\n    }\n\n    if (opt_cancelToken) {\n      opt_cancelToken.then((_) => reject(new CancellationError()))\n    }\n\n    testUrl()\n\n    function testUrl() {\n      client.send(request).then(onResponse, onError)\n    }\n\n    function onError() {\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the URL to return 2xx: ' + url))\n      } else {\n        setTimeout(function () {\n          if (!done) {\n            testUrl()\n          }\n        }, 50)\n      }\n    }\n\n    function onResponse(response) {\n      if (done) {\n        return\n      }\n      if (response.status > 199 && response.status < 300) {\n        resolve()\n        return\n      }\n      onError()\n    }\n  })\n}\n\n// PUBLIC API\nmodule.exports.getStatus = getStatus\nmodule.exports.CancellationError = CancellationError\nmodule.exports.waitForServer = waitForServer\nmodule.exports.waitForUrl = waitForUrl\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,SAAS,CAAC,CAACD,QAAQ;AAC5C,MAAME,UAAU,GAAGD,OAAO,CAAC,SAAS,CAAC,CAACC,UAAU;AAChD,MAAMC,WAAW,GAAGF,OAAO,CAAC,SAAS,CAAC,CAACG,OAAO;AAC9C,MAAMC,OAAO,GAAGJ,OAAO,CAAC,gBAAgB,CAAC,CAACI,OAAO;AACjD,MAAMC,WAAW,GAAGL,OAAO,CAAC,gBAAgB,CAAC,CAACM,IAAI;AAClD,MAAMC,KAAK,GAAGP,OAAO,CAAC,cAAc,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,SAASA,CAACC,GAAG,EAAE;EACtB,MAAMC,MAAM,GAAG,IAAIT,UAAU,CAACQ,GAAG,CAAC;EAClC,MAAME,QAAQ,GAAG,IAAIZ,QAAQ,CAACW,MAAM,CAAC;EACrC,MAAME,OAAO,GAAG,IAAIR,OAAO,CAACC,WAAW,CAACQ,iBAAiB,CAAC;EAC1D,OAAOF,QAAQ,CAACG,OAAO,CAACF,OAAO,CAAC;AAClC;AAEA,MAAMG,iBAAiB,CAAC;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACP,GAAG,EAAEQ,OAAO,EAAEC,eAAe,EAAE;EACpD,OAAO,IAAIC,OAAO,CAAC,CAACC,SAAS,EAAEC,QAAQ,KAAK;IAC1C,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAEtB,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAIC,OAAO,GAAIC,MAAM,IAAK;MACxBF,IAAI,GAAG,IAAI;MACXL,SAAS,CAACO,MAAM,CAAC;IACnB,CAAC;IACD,IAAIC,MAAM,GAAIC,GAAG,IAAK;MACpBJ,IAAI,GAAG,IAAI;MACXJ,QAAQ,CAACQ,GAAG,CAAC;IACf,CAAC;IAED,IAAIX,eAAe,EAAE;MACnBA,eAAe,CAACY,IAAI,CAAEC,CAAC,IAAKH,MAAM,CAAC,IAAIb,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC9D;IAEAiB,iBAAiB,CAAC,CAAC;IAEnB,SAASA,iBAAiBA,CAAA,EAAG;MAC3B,OAAOxB,SAAS,CAACC,GAAG,CAAC,CAACqB,IAAI,CAAEH,MAAM,IAAKD,OAAO,CAACC,MAAM,CAAC,EAAEM,OAAO,CAAC;IAClE;IAEA,SAASA,OAAOA,CAACC,CAAC,EAAE;MAClB;MACA;MACA,IAAIA,CAAC,YAAY3B,KAAK,CAAC4B,yBAAyB,EAAE;QAChDT,OAAO,CAAC,CAAC,CAAC,CAAC;QACX;MACF;MAEA,IAAIH,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,GAAGL,OAAO,EAAE;QAChCW,MAAM,CAACQ,KAAK,CAAC,gDAAgD,GAAG3B,GAAG,CAAC,CAAC;MACvE,CAAC,MAAM;QACL4B,UAAU,CAAC,YAAY;UACrB,IAAI,CAACZ,IAAI,EAAE;YACTO,iBAAiB,CAAC,CAAC;UACrB;QACF,CAAC,EAAE,EAAE,CAAC;MACR;IACF;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,UAAUA,CAAC7B,GAAG,EAAEQ,OAAO,EAAEC,eAAe,EAAE;EACjD,OAAO,IAAIC,OAAO,CAAC,CAACC,SAAS,EAAEC,QAAQ,KAAK;IAC1C,IAAIX,MAAM,GAAG,IAAIT,UAAU,CAACQ,GAAG,CAAC;IAChC,IAAI8B,OAAO,GAAG,IAAIrC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC;IACxC,IAAIoB,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAEtB,IAAIC,IAAI,GAAG,KAAK;IAChB,IAAIC,OAAO,GAAGA,CAAA,KAAM;MAClBD,IAAI,GAAG,IAAI;MACXL,SAAS,CAAC,CAAC;IACb,CAAC;IACD,IAAIQ,MAAM,GAAIC,GAAG,IAAK;MACpBJ,IAAI,GAAG,IAAI;MACXJ,QAAQ,CAACQ,GAAG,CAAC;IACf,CAAC;IAED,IAAIX,eAAe,EAAE;MACnBA,eAAe,CAACY,IAAI,CAAEC,CAAC,IAAKH,MAAM,CAAC,IAAIb,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC9D;IAEAyB,OAAO,CAAC,CAAC;IAET,SAASA,OAAOA,CAAA,EAAG;MACjB9B,MAAM,CAAC+B,IAAI,CAACF,OAAO,CAAC,CAACT,IAAI,CAACY,UAAU,EAAET,OAAO,CAAC;IAChD;IAEA,SAASA,OAAOA,CAAA,EAAG;MACjB,IAAIV,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK,GAAGL,OAAO,EAAE;QAChCW,MAAM,CAACQ,KAAK,CAAC,+CAA+C,GAAG3B,GAAG,CAAC,CAAC;MACtE,CAAC,MAAM;QACL4B,UAAU,CAAC,YAAY;UACrB,IAAI,CAACZ,IAAI,EAAE;YACTe,OAAO,CAAC,CAAC;UACX;QACF,CAAC,EAAE,EAAE,CAAC;MACR;IACF;IAEA,SAASE,UAAUA,CAACC,QAAQ,EAAE;MAC5B,IAAIlB,IAAI,EAAE;QACR;MACF;MACA,IAAIkB,QAAQ,CAAChB,MAAM,GAAG,GAAG,IAAIgB,QAAQ,CAAChB,MAAM,GAAG,GAAG,EAAE;QAClDD,OAAO,CAAC,CAAC;QACT;MACF;MACAO,OAAO,CAAC,CAAC;IACX;EACF,CAAC,CAAC;AACJ;;AAEA;AACAW,MAAM,CAACC,OAAO,CAACrC,SAAS,GAAGA,SAAS;AACpCoC,MAAM,CAACC,OAAO,CAAC9B,iBAAiB,GAAGA,iBAAiB;AACpD6B,MAAM,CAACC,OAAO,CAAC7B,aAAa,GAAGA,aAAa;AAC5C4B,MAAM,CAACC,OAAO,CAACP,UAAU,GAAGA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}