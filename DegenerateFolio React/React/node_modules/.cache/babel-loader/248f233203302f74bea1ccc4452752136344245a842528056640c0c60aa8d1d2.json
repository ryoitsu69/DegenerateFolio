{"ast":null,"code":"var ExtensionType = /* @__PURE__ */(ExtensionType2 => (ExtensionType2.Renderer = \"renderer\", ExtensionType2.Application = \"application\", ExtensionType2.RendererSystem = \"renderer-webgl-system\", ExtensionType2.RendererPlugin = \"renderer-webgl-plugin\", ExtensionType2.CanvasRendererSystem = \"renderer-canvas-system\", ExtensionType2.CanvasRendererPlugin = \"renderer-canvas-plugin\", ExtensionType2.Asset = \"asset\", ExtensionType2.LoadParser = \"load-parser\", ExtensionType2.ResolveParser = \"resolve-parser\", ExtensionType2.CacheParser = \"cache-parser\", ExtensionType2.DetectionParser = \"detection-parser\", ExtensionType2))(ExtensionType || {});\nconst normalizeExtension = ext => {\n    if (typeof ext == \"function\" || typeof ext == \"object\" && ext.extension) {\n      if (!ext.extension) throw new Error(\"Extension class must have an extension object\");\n      ext = {\n        ...(typeof ext.extension != \"object\" ? {\n          type: ext.extension\n        } : ext.extension),\n        ref: ext\n      };\n    }\n    if (typeof ext == \"object\") ext = {\n      ...ext\n    };else throw new Error(\"Invalid extension type\");\n    return typeof ext.type == \"string\" && (ext.type = [ext.type]), ext;\n  },\n  normalizePriority = (ext, defaultPriority) => normalizeExtension(ext).priority ?? defaultPriority,\n  extensions = {\n    /** @ignore */\n    _addHandlers: {},\n    /** @ignore */\n    _removeHandlers: {},\n    /** @ignore */\n    _queue: {},\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    remove(...extensions2) {\n      return extensions2.map(normalizeExtension).forEach(ext => {\n        ext.type.forEach(type => this._removeHandlers[type]?.(ext));\n      }), this;\n    },\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    add(...extensions2) {\n      return extensions2.map(normalizeExtension).forEach(ext => {\n        ext.type.forEach(type => {\n          const handlers = this._addHandlers,\n            queue = this._queue;\n          handlers[type] ? handlers[type]?.(ext) : (queue[type] = queue[type] || [], queue[type]?.push(ext));\n        });\n      }), this;\n    },\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n     * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handle(type, onAdd, onRemove) {\n      const addHandlers = this._addHandlers,\n        removeHandlers = this._removeHandlers;\n      if (addHandlers[type] || removeHandlers[type]) throw new Error(`Extension type ${type} already has a handler`);\n      addHandlers[type] = onAdd, removeHandlers[type] = onRemove;\n      const queue = this._queue;\n      return queue[type] && (queue[type]?.forEach(ext => onAdd(ext)), delete queue[type]), this;\n    },\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByMap(type, map) {\n      return this.handle(type, extension => {\n        extension.name && (map[extension.name] = extension.ref);\n      }, extension => {\n        extension.name && delete map[extension.name];\n      });\n    },\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @param defaultPriority - The default priority to use if none is specified.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByList(type, list, defaultPriority = -1) {\n      return this.handle(type, extension => {\n        list.includes(extension.ref) || (list.push(extension.ref), list.sort((a, b) => normalizePriority(b, defaultPriority) - normalizePriority(a, defaultPriority)));\n      }, extension => {\n        const index = list.indexOf(extension.ref);\n        index !== -1 && list.splice(index, 1);\n      });\n    }\n  };\nexport { ExtensionType, extensions };","map":{"version":3,"names":["ExtensionType","ExtensionType2","Renderer","Application","RendererSystem","RendererPlugin","CanvasRendererSystem","CanvasRendererPlugin","Asset","LoadParser","ResolveParser","CacheParser","DetectionParser","normalizeExtension","ext","extension","Error","type","ref","normalizePriority","defaultPriority","priority","extensions","_addHandlers","_removeHandlers","_queue","remove","extensions2","map","forEach","add","handlers","queue","push","handle","onAdd","onRemove","addHandlers","removeHandlers","handleByMap","name","handleByList","list","includes","sort","a","b","index","indexOf","splice"],"sources":["/home/ryoitsu/node_modules/@pixi/extensions/src/index.ts"],"sourcesContent":["/**\n * Collection of valid extension types.\n * @memberof PIXI\n * @property {string} Application - Application plugins\n * @property {string} RendererPlugin - Plugins for Renderer\n * @property {string} CanvasRendererPlugin - Plugins for CanvasRenderer\n * @property {string} Loader - Plugins to use with Loader\n * @property {string} LoadParser - Parsers for Assets loader.\n * @property {string} ResolveParser - Parsers for Assets resolvers.\n * @property {string} CacheParser - Parsers for Assets cache.\n */\nenum ExtensionType\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    Renderer = 'renderer',\n    Application = 'application',\n    RendererSystem = 'renderer-webgl-system',\n    RendererPlugin = 'renderer-webgl-plugin',\n    CanvasRendererSystem = 'renderer-canvas-system',\n    CanvasRendererPlugin = 'renderer-canvas-plugin',\n    Asset = 'asset',\n    LoadParser = 'load-parser',\n    ResolveParser = 'resolve-parser',\n    CacheParser = 'cache-parser',\n    DetectionParser = 'detection-parser',\n}\n\ninterface ExtensionMetadataDetails\n{\n    type: ExtensionType | ExtensionType[];\n    name?: string;\n    priority?: number;\n}\n\ntype ExtensionMetadata = ExtensionType | ExtensionMetadataDetails;\n\n/**\n * Format when registering an extension. Generally, the extension\n * should have these values as `extension` static property,\n * but you can override name or type by providing an object.\n * @memberof PIXI\n */\ninterface ExtensionFormatLoose\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, such as Renderer plugins */\n    name?: string;\n    /** Optional, used for sorting the plugins in a particular order */\n    priority?: number;\n    /** Reference to the plugin object/class */\n    ref: any;\n}\n\n/**\n * Strict extension format that is used internally for registrations.\n * @memberof PIXI\n */\ninterface ExtensionFormat extends ExtensionFormatLoose\n{\n    /** The extension type, always expressed as multiple, even if a single */\n    type: ExtensionType[];\n}\n\ntype ExtensionHandler = (extension: ExtensionFormat) => void;\n\n/**\n * Convert input into extension format data.\n * @ignore\n */\nconst normalizeExtension = (ext: ExtensionFormatLoose | any): ExtensionFormat =>\n{\n    // Class/Object submission, use extension object\n    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension))\n    {\n        if (process.env.DEBUG)\n        {\n            if (!ext.extension)\n            {\n                throw new Error('Extension class must have an extension object');\n            }\n        }\n        const metadata: ExtensionMetadataDetails = (typeof ext.extension !== 'object')\n            ? { type: ext.extension }\n            : ext.extension;\n\n        ext = { ...metadata, ref: ext };\n    }\n    if (typeof ext === 'object')\n    {\n        ext = { ...ext };\n    }\n    else\n    {\n        throw new Error('Invalid extension type');\n    }\n\n    if (typeof ext.type === 'string')\n    {\n        ext.type = [ext.type];\n    }\n\n    return ext;\n};\n\n/**\n * Get the priority for an extension.\n * @ignore\n * @param ext - Any extension\n * @param defaultPriority - Fallback priority if none is defined.\n * @returns The priority for the extension.\n */\nconst normalizePriority = (ext: ExtensionFormatLoose | any, defaultPriority: number): number =>\n    normalizeExtension(ext).priority ?? defaultPriority;\n\n/**\n * Global registration of all PixiJS extensions. One-stop-shop for extensibility.\n * @memberof PIXI\n * @namespace extensions\n */\nconst extensions = {\n\n    /** @ignore */\n    _addHandlers: {} as Partial<Record<ExtensionType, ExtensionHandler>>,\n\n    /** @ignore */\n    _removeHandlers: {} as Partial<Record<ExtensionType, ExtensionHandler>>,\n\n    /** @ignore */\n    _queue: {} as Partial<Record<ExtensionType, ExtensionFormat[]>>,\n\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    remove(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n        });\n\n        return this;\n    },\n\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    add(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        // Handle any extensions either passed as class w/ data or as data\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) =>\n            {\n                const handlers = this._addHandlers;\n                const queue = this._queue;\n\n                if (!handlers[type])\n                {\n                    queue[type] = queue[type] || [];\n                    queue[type]?.push(ext);\n                }\n                else\n                {\n                    handlers[type]?.(ext);\n                }\n            });\n        });\n\n        return this;\n    },\n\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n     * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handle(type: ExtensionType, onAdd: ExtensionHandler, onRemove: ExtensionHandler)\n    {\n        const addHandlers = this._addHandlers;\n        const removeHandlers = this._removeHandlers;\n\n        if (process.env.DEBUG)\n        {\n            if (addHandlers[type] || removeHandlers[type])\n            {\n                throw new Error(`Extension type ${type} already has a handler`);\n            }\n        }\n\n        addHandlers[type] = onAdd;\n        removeHandlers[type] = onRemove;\n\n        // Process the queue\n        const queue = this._queue;\n\n        // Process any plugins that have been registered before the handler\n        if (queue[type])\n        {\n            queue[type]?.forEach((ext) => onAdd(ext));\n            delete queue[type];\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByMap(type: ExtensionType, map: Record<string, any>)\n    {\n        return this.handle(type,\n            (extension) =>\n            {\n                if (extension.name)\n                {\n                    map[extension.name] = extension.ref;\n                }\n            },\n            (extension) =>\n            {\n                if (extension.name)\n                {\n                    delete map[extension.name];\n                }\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @param defaultPriority - The default priority to use if none is specified.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByList(type: ExtensionType, list: any[], defaultPriority = -1)\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                if (list.includes(extension.ref))\n                {\n                    return;\n                }\n\n                list.push(extension.ref);\n                list.sort((a, b) => normalizePriority(b, defaultPriority) - normalizePriority(a, defaultPriority));\n            },\n            (extension) =>\n            {\n                const index = list.indexOf(extension.ref);\n\n                if (index !== -1)\n                {\n                    list.splice(index, 1);\n                }\n            }\n        );\n    },\n};\n\nexport {\n    extensions,\n    ExtensionType,\n};\nexport type {\n    ExtensionFormat,\n    ExtensionFormatLoose,\n    ExtensionHandler,\n    ExtensionMetadata,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}