{"ast":null,"code":"import { u8aEq, u8aToU8a } from '@polkadot/util';\nimport { hasher } from './hasher.js';\nimport { secp256k1Recover } from './recover.js';\n/**\n * @name secp256k1Verify\n * @description Verifies the signature of `message`, using the supplied pair\n */\nexport function secp256k1Verify(msgHash, signature, address, hashType = 'blake2', onlyJs) {\n  const sig = u8aToU8a(signature);\n  if (sig.length !== 65) {\n    throw new Error(`Expected signature with 65 bytes, ${sig.length} found instead`);\n  }\n  const publicKey = secp256k1Recover(hasher(hashType, msgHash), sig, sig[64], hashType, onlyJs);\n  const signerAddr = hasher(hashType, publicKey, onlyJs);\n  const inputAddr = u8aToU8a(address);\n  // for Ethereum (keccak) the last 20 bytes is the address\n  return u8aEq(publicKey, inputAddr) || (hashType === 'keccak' ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq(signerAddr, inputAddr));\n}","map":{"version":3,"names":["u8aEq","u8aToU8a","hasher","secp256k1Recover","secp256k1Verify","msgHash","signature","address","hashType","onlyJs","sig","length","Error","publicKey","signerAddr","inputAddr","slice"],"sources":["/home/ryoitsu/Documents/test/react-todo-app/node_modules/@polkadot/util-crypto/secp256k1/verify.js"],"sourcesContent":["import { u8aEq, u8aToU8a } from '@polkadot/util';\nimport { hasher } from './hasher.js';\nimport { secp256k1Recover } from './recover.js';\n/**\n * @name secp256k1Verify\n * @description Verifies the signature of `message`, using the supplied pair\n */\nexport function secp256k1Verify(msgHash, signature, address, hashType = 'blake2', onlyJs) {\n    const sig = u8aToU8a(signature);\n    if (sig.length !== 65) {\n        throw new Error(`Expected signature with 65 bytes, ${sig.length} found instead`);\n    }\n    const publicKey = secp256k1Recover(hasher(hashType, msgHash), sig, sig[64], hashType, onlyJs);\n    const signerAddr = hasher(hashType, publicKey, onlyJs);\n    const inputAddr = u8aToU8a(address);\n    // for Ethereum (keccak) the last 20 bytes is the address\n    return u8aEq(publicKey, inputAddr) || (hashType === 'keccak'\n        ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20))\n        : u8aEq(signerAddr, inputAddr));\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,QAAQ,QAAQ,gBAAgB;AAChD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,gBAAgB,QAAQ,cAAc;AAC/C;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,GAAG,QAAQ,EAAEC,MAAM,EAAE;EACtF,MAAMC,GAAG,GAAGT,QAAQ,CAACK,SAAS,CAAC;EAC/B,IAAII,GAAG,CAACC,MAAM,KAAK,EAAE,EAAE;IACnB,MAAM,IAAIC,KAAK,CAAE,qCAAoCF,GAAG,CAACC,MAAO,gBAAe,CAAC;EACpF;EACA,MAAME,SAAS,GAAGV,gBAAgB,CAACD,MAAM,CAACM,QAAQ,EAAEH,OAAO,CAAC,EAAEK,GAAG,EAAEA,GAAG,CAAC,EAAE,CAAC,EAAEF,QAAQ,EAAEC,MAAM,CAAC;EAC7F,MAAMK,UAAU,GAAGZ,MAAM,CAACM,QAAQ,EAAEK,SAAS,EAAEJ,MAAM,CAAC;EACtD,MAAMM,SAAS,GAAGd,QAAQ,CAACM,OAAO,CAAC;EACnC;EACA,OAAOP,KAAK,CAACa,SAAS,EAAEE,SAAS,CAAC,KAAKP,QAAQ,KAAK,QAAQ,GACtDR,KAAK,CAACc,UAAU,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAED,SAAS,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAClDhB,KAAK,CAACc,UAAU,EAAEC,SAAS,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}