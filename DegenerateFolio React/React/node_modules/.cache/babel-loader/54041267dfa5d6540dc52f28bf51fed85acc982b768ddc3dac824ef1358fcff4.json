{"ast":null,"code":"import { LoaderParserPriority } from '../../assets/loader/parsers/LoaderParser.mjs';\nimport { createTexture } from '../../assets/loader/parsers/textures/utils/createTexture.mjs';\nimport { checkExtension } from '../../assets/utils/checkExtension.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CompressedSource } from '../../rendering/renderers/shared/texture/sources/CompressedSource.mjs';\nimport { getSupportedTextureFormats } from '../../rendering/renderers/shared/texture/utils/getSupportedTextureFormats.mjs';\nimport { parseKTX } from './parseKTX.mjs';\n\"use strict\";\nconst loadKTX = {\n  extension: {\n    type: ExtensionType.LoadParser,\n    priority: LoaderParserPriority.High\n  },\n  name: \"loadKTX\",\n  test(url) {\n    return checkExtension(url, \".ktx\");\n  },\n  async load(url, _asset, loader) {\n    const supportedTextures = await getSupportedTextureFormats();\n    const ktxResponse = await fetch(url);\n    const ktxArrayBuffer = await ktxResponse.arrayBuffer();\n    const textureOptions = parseKTX(ktxArrayBuffer, supportedTextures);\n    const compressedTextureSource = new CompressedSource(textureOptions);\n    return createTexture(compressedTextureSource, loader, url);\n  },\n  unload(texture) {\n    if (Array.isArray(texture)) {\n      texture.forEach(t => t.destroy(true));\n    } else {\n      texture.destroy(true);\n    }\n  }\n};\nexport { loadKTX };","map":{"version":3,"names":["loadKTX","extension","type","ExtensionType","LoadParser","priority","LoaderParserPriority","High","name","test","url","checkExtension","load","_asset","loader","supportedTextures","getSupportedTextureFormats","ktxResponse","fetch","ktxArrayBuffer","arrayBuffer","textureOptions","parseKTX","compressedTextureSource","CompressedSource","createTexture","unload","texture","Array","isArray","forEach","t","destroy"],"sources":["/home/ryoitsu/node_modules/pixi.js/src/compressed-textures/ktx/loadKTX.ts"],"sourcesContent":["import { LoaderParserPriority } from '../../assets/loader/parsers/LoaderParser';\nimport { createTexture } from '../../assets/loader/parsers/textures/utils/createTexture';\nimport { checkExtension } from '../../assets/utils/checkExtension';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { CompressedSource } from '../../rendering/renderers/shared/texture/sources/CompressedSource';\nimport { getSupportedTextureFormats } from '../../rendering/renderers/shared/texture/utils/getSupportedTextureFormats';\nimport { parseKTX } from './parseKTX';\n\nimport type { Loader } from '../../assets/loader/Loader';\nimport type { LoaderParser } from '../../assets/loader/parsers/LoaderParser';\nimport type { ResolvedAsset } from '../../assets/types';\nimport type { TextureSourceOptions } from '../../rendering/renderers/shared/texture/sources/TextureSource';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\n\n/** Loads KTX textures! */\nexport const loadKTX = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.High,\n    },\n\n    name: 'loadKTX',\n\n    test(url: string): boolean\n    {\n        return checkExtension(url, '.ktx');\n    },\n\n    async load(url: string, _asset: ResolvedAsset, loader: Loader): Promise<Texture | Texture[]>\n    {\n        const supportedTextures = await getSupportedTextureFormats();\n\n        const ktxResponse = await fetch(url);\n\n        const ktxArrayBuffer = await ktxResponse.arrayBuffer();\n\n        const textureOptions = parseKTX(ktxArrayBuffer, supportedTextures);\n\n        const compressedTextureSource = new CompressedSource(textureOptions);\n\n        return createTexture(compressedTextureSource, loader, url);\n    },\n\n    unload(texture: Texture | Texture[]): void\n    {\n        if (Array.isArray(texture))\n        {\n            texture.forEach((t) => t.destroy(true));\n        }\n        else\n        {\n            texture.destroy(true);\n        }\n    }\n\n} as LoaderParser<Texture | Texture[], TextureSourceOptions>;\n\n"],"mappings":";;;;;;;;AAeO,MAAMA,OAAU;EACnBC,SAAW;IACPC,IAAA,EAAMC,aAAc,CAAAC,UAAA;IACpBC,QAAA,EAAUC,oBAAqB,CAAAC;EAAA,CACnC;EAEAC,IAAM;EAENC,KAAKC,GACL;IACW,OAAAC,cAAA,CAAeD,GAAA,EAAK,MAAM;EAAA,CACrC;EAEA,MAAME,KAAKF,GAAa,EAAAG,MAAA,EAAuBC,MAC/C;IACU,MAAAC,iBAAA,GAAoB,MAAMC,0BAA2B;IAErD,MAAAC,WAAA,GAAc,MAAMC,KAAA,CAAMR,GAAG;IAE7B,MAAAS,cAAA,GAAiB,MAAMF,WAAA,CAAYG,WAAY;IAE/C,MAAAC,cAAA,GAAiBC,QAAS,CAAAH,cAAA,EAAgBJ,iBAAiB;IAE3D,MAAAQ,uBAAA,GAA0B,IAAIC,gBAAA,CAAiBH,cAAc;IAE5D,OAAAI,aAAA,CAAcF,uBAAyB,EAAAT,MAAA,EAAQJ,GAAG;EAAA,CAC7D;EAEAgB,OAAOC,OACP;IACQ,IAAAC,KAAA,CAAMC,OAAQ,CAAAF,OAAO,CACzB;MACIA,OAAA,CAAQG,OAAA,CAASC,CAAA,IAAMA,CAAE,CAAAC,OAAA,CAAQ,IAAI,CAAC;IAAA,CAG1C;MACIL,OAAA,CAAQK,OAAA,CAAQ,IAAI;IAAA;EACxB;AAGR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}